{"problem_id": "2053B", "problem_title": "B. Outstanding Impressionist", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2053/B", "problem_statement": "If it was so, then let's make it a deal...\n\n— MayDay, [Gentleness](https://www.youtube.com/watch?v=mtAc_bMYBsM&list=PLj6NQzHFCvkHKIm0Vnk9LH3odqTIBRZ1Q&index=15)\n\nEven after copying the paintings from famous artists for ten years, unfortunately, Eric is still unable to become a skillful impressionist painter. He wants to forget something, but the white bear phenomenon just keeps hanging over him.\n\nEric still remembers $n$ pieces of impressions in the form of an integer array. He records them as $w_1, w_2, \\ldots, w_n$. However, he has a poor memory of the impressions. For each $1 \\leq i \\leq n$, he can only remember that $l_i \\leq w_i \\leq r_i$.\n\nEric believes that impression $i$ is unique if and only if there exists a possible array $w_1, w_2, \\ldots, w_n$ such that $w_i \\neq w_j$ holds for all $1 \\leq j \\leq n$ with $j \\neq i$.\n\nPlease help Eric determine whether impression $i$ is unique for every $1 \\leq i \\leq n$, independently for each $i$. Perhaps your judgment can help rewrite the final story.\n\n### Input\n\nEach test contains multiple test cases. The first line of the input contains a single integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases. The description of test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\leq n \\leq 2\\cdot 10^5$) — the number of impressions.\n\nThen $n$ lines follow, the $i$-th containing two integers $l_i$ and $r_i$ ($1 \\leq l_i \\leq r_i \\leq 2\\cdot n$) — the minimum possible value and the maximum possible value of $w_i$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, output a binary string $s$ of length $n$: for each $1 \\leq i \\leq n$, if impression $i$ is unique, $s_i=\\texttt{1}$; otherwise, $s_i=\\texttt{0}$. Do not output spaces.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n2\n\n1 1\n\n1 1\n\n4\n\n1 3\n\n1 3\n\n1 3\n\n1 3\n\n6\n\n3 6\n\n2 2\n\n1 2\n\n1 1\n\n3 4\n\n2 2\n\n7\n\n3 4\n\n4 4\n\n4 4\n\n1 3\n\n2 5\n\n1 4\n\n2 2\n\n3\n\n4 5\n\n4 4\n\n5 5\n\n```\n\n#### Output #1\n\n```\n00\n1111\n100110\n1001111\n011\n```\n\n### Note\n\nIn the first test case, the only possible array $w$ is $[1, 1]$, making neither impression $1$ nor $2$ unique (since $w_1 = w_2$).\n\nIn the second test case, all impressions can be made unique:\n\n- For $i = 1$, we can set $w$ to $[1, 3, 2, 3]$, in which $w_1 \\neq w_2$, $w_1 \\neq w_3$, and $w_1 \\neq w_4$;\n- For $i = 2$, we can set $w$ to $[2, 3, 1, 2]$, in which $w_2 \\neq w_1$, $w_2 \\neq w_3$, and $w_2 \\neq w_4$;\n- For $i = 3$, we can set $w$ to $[1, 1, 3, 1]$;\n- For $i = 4$, we can set $w$ to $[2, 3, 3, 1]$.\n\nIn the third test case, for $i = 4$, we can set $w$ to $[3, 2, 2, 1, 3, 2]$. Thus, impression $4$ is unique.", "cfid": "2053B"}
{"problem_id": "2053A", "problem_title": "A. Tender Carpenter", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2053/A", "problem_statement": "I would use a firework to announce, a wave to bid farewell, and a bow to say thanks: bygones are bygones; not only on the following path will I be walking leisurely and joyfully, but also the footsteps won't halt as time never leaves out flowing; for in the next year, we will meet again.\n\n— Cocoly1990, [Goodbye 2022](https://www.luogu.com.cn/problem/P8941)\n\nIn his dream, Cocoly would go on a long holiday with no worries around him. So he would try out for many new things, such as... being a carpenter. To learn it well, Cocoly decides to become an apprentice of Master, but in front of him lies a hard task waiting for him to solve.\n\nCocoly is given an array $a_1, a_2,\\ldots, a_n$. Master calls a set of integers $S$ stable if and only if, for any possible $u$, $v$, and $w$ from the set $S$ (note that $u$, $v$, and $w$ do not necessarily have to be pairwise distinct), sticks of length $u$, $v$, and $w$ can form a non-degenerate triangle$^{\\text{∗}}$.\n\nCocoly is asked to partition the array $a$ into several (possibly, $1$ or $n$) non-empty continuous subsegments$^{\\text{†}}$, such that: for each of the subsegments, the set containing all the elements in it is stable.\n\nMaster wants Cocoly to partition $a$ in at least two different$^{\\text{‡}}$ ways. You have to help him determine whether it is possible.\n\n$^{\\text{∗}}$A triangle with side lengths $x$, $y$, and $z$ is called non-degenerate if and only if:\n\n- $x + y > z$,\n- $y + z > x$, and\n- $z + x > y$.\n\n$^{\\text{†}}$A sequence $b$ is a subsegment of a sequence $c$ if $b$ can be obtained from $c$ by the deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\n$^{\\text{‡}}$Two partitions are considered different if and only if at least one of the following holds:\n\n- the numbers of continuous subsegments split in two partitions are different;\n- there is an integer $k$ such that the lengths of the $k$-th subsegment in two partitions are different.\n\n### Input\n\nEach test contains multiple test cases. The first line of the input contains a single integer $t$ ($1 \\leq t \\leq 200$) — the number of test cases. The description of test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\leq n \\leq 200$) — the length of the array $a$.\n\nThe second line contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($1 \\leq a_i \\leq 10^5$) — the elements in the array $a$.\n\n### Output\n\nFor each test case, print $\\texttt{YES}$ if there are at least two ways to partition $a$, and $\\texttt{NO}$ otherwise.\n\nYou can output the answer in any case (upper or lower). For example, the strings $\\texttt{yEs}$, $\\texttt{yes}$, $\\texttt{Yes}$, and $\\texttt{YES}$ will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n4\n\n2 3 5 7\n\n4\n\n115 9 2 28\n\n5\n\n8 4 1 6 2\n\n6\n\n1 5 4 1 4 7\n\n2\n\n100000 100000\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nNO\nYES\nYES\n```\n\n### Note\n\nIn the first test case, here are two possible partitions:\n\n- $[2, 3], [5, 7]$, since\n  - $[2, 3]$ is stable because sticks of lengths $(2, 2, 2), (2, 2, 3), (2, 3, 3), (3, 3, 3)$ respectively can all form non-degenerate triangles.\n  - $[5, 7]$ is stable because sticks of lengths $(5, 5, 5), (5, 5, 7), (5, 7, 7), (7, 7, 7)$ respectively can all form non-degenerate triangles.\n- and $[2], [3, 5], [7]$, since\n  - $[2]$ is stable because sticks of lengths $(2, 2, 2)$ respectively can form a non-degenerate triangle.\n  - $[3, 5]$ is stable because sticks of lengths $(3, 3, 3), (3, 3, 5), (3, 5, 5), (5, 5, 5)$ respectively can all form non-degenerate triangles.\n  - $[7]$ is stable because sticks of lengths $(7, 7, 7)$ respectively can form a non-degenerate triangle.\n\nNote that some other partitions also satisfy the constraints, such as $[2], [3], [5], [7]$ and $[2], [3], [5, 7]$.\n\nIn the second test case, Cocoly can only partition each element as a single subsegment, resulting in $[115], [9], [2], [28]$. Since we only have one possible partition, the answer is $\\texttt{NO}$.\n\nIn the third test case, please note that the partition $[8, 4], [1], [6], [2]$ does not satisfy the constraints, because $\\{8, 4\\}$ is not a stable set: sticks of lengths $4$, $4$, and $8$ cannot form a non-degenerate triangle.", "cfid": "2053A"}
{"problem_id": "2053C", "problem_title": "C. Bewitching Stargazer", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2053/C", "problem_statement": "I'm praying for owning a transparent heart; as well as eyes with tears more than enough...\n\n— Escape Plan, [Brightest Star in the Dark](https://www.youtube.com/watch?v=GPnymcrXgX0)\n\nIris looked at the stars and a beautiful problem emerged in her mind. She is inviting you to solve it so that a meteor shower is believed to form.\n\nThere are $n$ stars in the sky, arranged in a row. Iris has a telescope, which she uses to look at the stars.\n\nInitially, Iris observes stars in the segment $[1, n]$, and she has a lucky value of $0$. Iris wants to look for the star in the middle position for each segment $[l, r]$ that she observes. So the following recursive procedure is used:\n\n- First, she will calculate $m = \\left\\lfloor \\frac{l+r}{2} \\right\\rfloor$.\n- If the length of the segment (i.e. $r - l + 1$) is even, Iris will divide it into two equally long segments $[l, m]$ and $[m+1, r]$ for further observation.\n- Otherwise, Iris will aim the telescope at star $m$, and her lucky value will increase by $m$; subsequently, if $l \\neq r$, Iris will continue to observe two segments $[l, m-1]$ and $[m+1, r]$.\n\nIris is a bit lazy. She defines her laziness by an integer $k$: as the observation progresses, she will not continue to observe any segment $[l, r]$ with a length strictly less than $k$. In this case, please predict her final lucky value.\n\n### Input\n\nEach test contains multiple test cases. The first line of input contains a single integer $t$ ($1 \\leq t \\leq 10^5$) — the number of test cases. The description of test cases follows.\n\nThe only line of each test case contains two integers $n$ and $k$ ($1 \\leq k \\leq n \\leq 2\\cdot 10^9$).\n\n### Output\n\nFor each test case, output a single integer — the final lucky value.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n7 2\n\n11 3\n\n55 13\n\n5801 6\n\n8919 64\n\n8765432 1\n\n```\n\n#### Output #1\n\n```\n12\n18\n196\n1975581\n958900\n38416403456028\n```\n\n### Note\n\nIn the first test case, at the beginning, Iris observes $[1, 7]$. Since $[1, 7]$ has an odd length, she aims at star $4$ and therefore increases her lucky value by $4$. Then it is split into $2$ new segments: $[1, 3]$ and $[5, 7]$. The segment $[1, 3]$ again has an odd length, so Iris aims at star $2$ and increases her lucky value by $2$. Then it is split into $2$ new segments: $[1, 1]$ and $[3, 3]$, both having a length less than $2$, so no further observation is conducted. For range $[5, 7]$, the progress is similar and the lucky value eventually increases by $6$. Therefore, the final lucky value is $4 + 2 + 6 = 12$.\n\nIn the last test case, Iris finally observes all the stars and the final lucky value is $1 + 2 + \\cdots + 8\\,765\\,432 = 38\\,416\\,403\\,456\\,028$.", "cfid": "2053C"}
{"problem_id": "2053D", "problem_title": "D. Refined Product Optimality", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2053/D", "problem_statement": "As a tester, when my solution has a different output from the example during testing, I suspect the author first.\n\n— Chris, [a comment](https://codeforces.com/blog/entry/133116?#comment-1190579)\n\nAlthough Iris occasionally sets a problem where the solution is possibly wrong, she still insists on creating problems with her imagination; after all, everyone has always been on the road with their stubbornness... And like ever before, Iris has set a problem to which she gave a wrong solution, but Chris is always supposed to save it! You are going to play the role of Chris now:\n\n- Chris is given two arrays $a$ and $b$, both consisting of $n$ integers.\n- Iris is interested in the largest possible value of $P = \\prod\\limits_{i=1}^n \\min(a_i, b_i)$ after an arbitrary rearrangement of $b$. Note that she only wants to know the maximum value of $P$, and no actual rearrangement is performed on $b$.\n- There will be $q$ modifications. Each modification can be denoted by two integers $o$ and $x$ ($o$ is either $1$ or $2$, $1 \\leq x \\leq n$). If $o = 1$, then Iris will increase $a_x$ by $1$; otherwise, she will increase $b_x$ by $1$.\n- Iris asks Chris the maximum value of $P$ for $q + 1$ times: once before any modification, then after every modification.\n- Since $P$ might be huge, Chris only needs to calculate it modulo $998\\,244\\,353$.\n\nChris soon worked out this problem, but he was so tired that he fell asleep. Besides saying thanks to Chris, now it is your turn to write a program to calculate the answers for given input data.\n\nNote: since the input and output are large, you may need to optimize them for this problem.\n\nFor example, in C++, it is enough to use the following lines at the start of the main() function:\n\n```\n`int main() {<br/>    std::ios::sync_with_stdio(false);<br/>    std::cin.tie(nullptr); std::cout.tie(nullptr);<br/>}<br/>````\n\n### Input\n\nEach test contains multiple test cases. The first line of input contains a single integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases. The description of test cases follows.\n\nThe first line of each test case contains two integers $n$ and $q$ ($1 \\leq n \\leq 2\\cdot 10^5$, $1 \\leq q \\leq 2\\cdot 10^5$) — the length of the array and the number of operations.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 5\\cdot 10^8$) — the array $a$.\n\nThe third line of each test case contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($1 \\leq b_i \\leq 5\\cdot 10^8$) — the array $b$.\n\nThen $q$ lines follow, each line contains two integers $o$ and $x$ ($o \\in \\{1, 2\\}$, $1 \\leq x \\leq n$), representing an operation.\n\nIt's guaranteed that the sum of $n$ and the sum of $q$ over all test cases does not exceed $4\\cdot 10^5$, respectively.\n\n### Output\n\nFor each test case, output $q + 1$ integers in a line, representing the answers that Chris will calculate, modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3 4\n\n1 1 2\n\n3 2 1\n\n1 3\n\n2 3\n\n1 1\n\n2 1\n\n6 8\n\n1 4 2 7 3 5\n\n7 6 5 6 3 3\n\n2 5\n\n1 6\n\n1 5\n\n1 5\n\n1 5\n\n2 3\n\n2 3\n\n1 6\n\n13 8\n\n7 7 6 6 5 5 5 2 2 3 4 5 1\n\n1 4 1 9 6 6 9 1 5 1 3 8 4\n\n2 2\n\n2 11\n\n2 4\n\n2 4\n\n1 7\n\n1 1\n\n2 12\n\n1 5\n\n5 3\n\n10000000 20000000 30000000 40000000 50000000\n\n10000000 20000000 30000000 40000000 50000000\n\n1 1\n\n2 2\n\n2 1\n\n```\n\n#### Output #1\n\n```\n2 3 3 6 6\n840 840 1008 1344 1680 2016 2016 2016 2352\n2116800 2646000 3528000 3528000 3528000 4233600 4838400 4838400 4838400\n205272023 205272023 205272023 264129429\n```\n\n### Note\n\nIn the first test case:\n\n- Before the modifications, Chris can rearrange $b$ to $[1, 2, 3]$ so that $P = \\prod\\limits_{i=1}^n \\min(a_i, b_i) = 1 \\cdot 1 \\cdot 2 = 2$. We can prove that this is the maximum possible value. For example, if Chris rearranges $b = [2, 3, 1]$, $P$ will be equal $1 \\cdot 1 \\cdot 1 = 1 < 2$, which is not optimal.\n- After the first modification, Chris can rearrange $b$ to $[1, 2, 3]$ so that $P = 1 \\cdot 1 \\cdot 3 = 3$, which is maximized.\n- After the second modification, Chris can rearrange $b$ to $[2, 2, 3]$ so that $P = 1 \\cdot 1 \\cdot 3 = 3$, which is maximized.\n- After the third modification, Chris can rearrange $b$ to $[2, 2, 3]$ so that $P = 6$, which is maximized.\n- After the fourth modification, Chris can rearrange $b$ to $[2, 2, 4]$ so that $P = 6$, which is maximized.", "cfid": "2053D"}
{"problem_id": "2043B", "problem_title": "B. Digits", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2043/B", "problem_statement": "Artem wrote the digit $d$ on the board exactly $n!$ times in a row. So, he got the number $dddddd \\dots ddd$ (exactly $n!$ digits).\n\nNow he is curious about which odd digits from $1$ to $9$ divide the number written on the board.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 100$) — the number of test cases. The next $t$ test cases follow.\n\nEach test case consists of a single line containing two integers $n$ and $d$ ($2 \\le n \\le 10^9$, $1 \\le d \\le 9$).\n\n### Output\n\nFor each test case, output the odd digits in ascending order that divide the number written on the board.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2 6\n\n7 1\n\n8 5\n\n```\n\n#### Output #1\n\n```\n1 3\n1 3 7 9\n1 3 5 7 9\n```\n\n### Note\n\nThe factorial of a positive integer $n$ ($n!$) is the product of all integers from $1$ to $n$. For example, the factorial of $5$ is $1 \\cdot 2 \\cdot 3 \\cdot 4 \\cdot 5 = 120$.", "cfid": "2043B"}
{"problem_id": "2043C", "problem_title": "C. Sums on Segments", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2043/C", "problem_statement": "You are given an array $a$ of $n$ integers, where all elements except for at most one are equal to $-1$ or $1$. The remaining element $x$ satisfies $-10^9 \\le x \\le 10^9$.\n\nFind all possible sums of subarrays of $a$, including the empty subarray, whose sum is defined as $0$. In other words, find all integers $x$ such that the array $a$ has at least one subarray (possibly empty) with sum equal to $x$. A subarray is a contiguous subsegment of an array.\n\nOutput these sums in ascending order. Each sum should be printed only once, even if it is achieved by multiple subarrays.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. Then, $t$ test cases follow.\n\nEach test case consists of two lines:\n\n- The first line contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) — the size of the array.\n- The second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($-10^9 \\le a_i \\le 10^9$) — the elements of the array $a$. In the array $a$, there is at most one element that is neither $1$ nor $-1$.\n\nAdditional constraint on the input: the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output two lines:\n\n- In the first line, print a single integer — the number of distinct subarray sums.\n- In the second line, print these sums in ascending order.\n\nEach sum should be printed only once, even if it is produced by multiple subarrays.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n5\n\n1 -1 10 1 1\n\n5\n\n-1 -1 -1 -1 -1\n\n2\n\n-1 2\n\n2\n\n7 1\n\n3\n\n1 4 -1\n\n```\n\n#### Output #1\n\n```\n8\n-1 0 1 2 9 10 11 12\n6\n-5 -4 -3 -2 -1 0\n4\n-1 0 1 2\n4\n0 1 7 8\n6\n-1 0 1 3 4 5\n```\n\n### Note\n\nLet's define $a[i,j]$ as the subarray of $a$ from position $i$ to position $j$.\n\nConsider the first test case of the example:\n\n- $-1$ is produced by $a[2,2]$;\n- $0$ is produced by the empty subarray;\n- $1$ is produced by $a[4,4]$;\n- $2$ is produced by $a[4,5]$;\n- $9$ is produced by $a[2,3]$;\n- $10$ is produced by $a[1,3]$;\n- $11$ is produced by $a[3,4]$;\n- $12$ is produced by $a[3,5]$.", "cfid": "2043C"}
{"problem_id": "2043A", "problem_title": "A. Coin Transformation", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2043/A", "problem_statement": "Initially, you have a coin with value $n$. You can perform the following operation any number of times (possibly zero):\n\n- transform one coin with value $x$, where $x$ is greater than $3$ ($x>3$), into two coins with value $\\lfloor \\frac{x}{4} \\rfloor$.\n\nWhat is the maximum number of coins you can have after performing this operation any number of times?\n\n### Input\n\nThe first line contains one integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nEach test case consists of one line containing one integer $n$ ($1 \\le n \\le 10^{18}$).\n\n### Output\n\nFor each test case, print one integer — the maximum number of coins you can have after performing the operation any number of times.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n1\n\n5\n\n16\n\n1000000000000000000\n\n```\n\n#### Output #1\n\n```\n1\n2\n4\n536870912\n```\n\n### Note\n\nIn the first example, you have a coin of value $1$, and you can't do anything with it. So, the answer is $1$.\n\nIn the second example, you can transform a coin of value $5$ into two coins with value $1$.\n\nIn the third example, you can transform a coin of value $16$ into two coins with value $4$. Each of the resulting coins can be transformed into two coins with value $1$.", "cfid": "2043A"}
{"problem_id": "2043D", "problem_title": "D. Problem about GCD", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2043/D", "problem_statement": "Given three integers $l$, $r$, and $G$, find two integers $A$ and $B$ ($l \\le A \\le B \\le r$) such that their greatest common divisor (GCD) equals $G$ and the distance $|A - B|$ is maximized.\n\nIf there are multiple such pairs, choose the one where $A$ is minimized. If no such pairs exist, output \"-1 -1\".\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^3$) — the number of test cases. Then, $t$ test cases follow.\n\nEach test case consists of a single line containing three integers $l, r, G$ ($1 \\le l \\le r \\le 10^{18}$; $1 \\le G \\le 10^{18}$) — the range boundaries and the required GCD.\n\n### Output\n\nFor each test case, output two integers $A$ and $B$ — the solution to the problem, or \"-1 -1\" if no such pair exists.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n4 8 2\n\n4 8 3\n\n4 8 4\n\n5 7 6\n\n```\n\n#### Output #1\n\n```\n4 6\n-1 -1\n4 8\n6 6\n```", "cfid": "2043D"}
{"problem_id": "2051B", "problem_title": "B. Journey", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2051/B", "problem_statement": "Monocarp decided to embark on a long hiking journey.\n\nHe decided that on the first day he would walk $a$ kilometers, on the second day he would walk $b$ kilometers, on the third day he would walk $c$ kilometers, on the fourth day, just like on the first, he would walk $a$ kilometers, on the fifth day, just like on the second, he would walk $b$ kilometers, on the sixth day, just like on the third, he would walk $c$ kilometers, and so on.\n\nMonocarp will complete his journey on the day when he has walked at least $n$ kilometers in total. Your task is to determine the day on which Monocarp will complete his journey.\n\n### Input\n\nThe first line contains one integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nEach test case consists of one line containing four integers $n$, $a$, $b$, $c$ ($1 \\le n \\le 10^9$; $1 \\le a, b, c \\le 10^6$).\n\n### Output\n\nFor each test case, output one integer — the day on which Monocarp will have walked at least $n$ kilometers in total and will complete his journey.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n12 1 5 3\n\n6 6 7 4\n\n16 3 4 1\n\n1000000000 1 1 1\n\n```\n\n#### Output #1\n\n```\n5\n1\n6\n1000000000\n```\n\n### Note\n\nIn the first example, over the first four days, Monocarp will cover $1 + 5 + 3 + 1 = 10$ kilometers. On the fifth day, he will cover another $5$ kilometers, meaning that in total over five days he will have covered $10 + 5 = 15$ kilometers. Since $n = 12$, Monocarp will complete his journey on the fifth day.\n\nIn the second example, Monocarp will cover $6$ kilometers on the first day. Since $n = 6$, Monocarp will complete his journey on the very first day.\n\nIn the third example, Monocarp will cover $3 + 4 + 1 + 3 + 4 + 1 = 16$ kilometers over the first six days. Since $n = 16$, Monocarp will complete his journey on the sixth day.", "cfid": "2051B"}
{"problem_id": "2051D", "problem_title": "D. Counting Pairs", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2051/D", "problem_statement": "You are given a sequence $a$, consisting of $n$ integers, where the $i$-th element of the sequence is equal to $a_i$. You are also given two integers $x$ and $y$ ($x \\le y$).\n\nA pair of integers $(i, j)$ is considered interesting if the following conditions are met:\n\n- $1 \\le i < j \\le n$;\n- if you simultaneously remove the elements at positions $i$ and $j$ from the sequence $a$, the sum of the remaining elements is at least $x$ and at most $y$.\n\nYour task is to determine the number of interesting pairs of integers for the given sequence $a$.\n\n### Input\n\nThe first line contains one integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nEach test case consists of two lines:\n\n- The first line contains three integers $n, x, y$ ($3 \\le n \\le 2 \\cdot 10^5$, $1 \\le x \\le y \\le 2 \\cdot 10^{14}$);\n- The second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^{9}$).\n\nAdditional constraint on the input: the sum of $n$ across all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output one integer — the number of interesting pairs of integers for the given sequence $a$.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n4 8 10\n\n4 6 3 6\n\n6 22 27\n\n4 9 6 3 4 5\n\n3 8 10\n\n3 2 1\n\n3 1 1\n\n2 3 4\n\n3 3 6\n\n3 2 1\n\n4 4 12\n\n3 3 2 1\n\n6 8 8\n\n1 1 2 2 2 3\n\n```\n\n#### Output #1\n\n```\n4\n7\n0\n0\n1\n5\n6\n```\n\n### Note\n\nIn the first example, there are $4$ interesting pairs of integers:\n\n1. $(1, 2)$;\n2. $(1, 4)$;\n3. $(2, 3)$;\n4. $(3, 4)$.", "cfid": "2051D"}
{"problem_id": "2051C", "problem_title": "C. Preparing for the Exam", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2051/C", "problem_statement": "Monocarp is preparing for his first exam at the university. There are $n$ different questions which can be asked during the exam, numbered from $1$ to $n$. There are $m$ different lists of questions; each list consists of exactly $n-1$ different questions. Each list $i$ is characterized by one integer $a_i$, which is the index of the only question which is not present in the $i$-th list. For example, if $n = 4$ and $a_i = 3$, the $i$-th list contains questions $[1, 2, 4]$.\n\nDuring the exam, Monocarp will receive one of these $m$ lists of questions. Then, the professor will make Monocarp answer all questions from the list. So, Monocarp will pass only if he knows all questions from the list.\n\nMonocarp knows the answers for $k$ questions $q_1, q_2, \\dots, q_k$. For each list, determine if Monocarp will pass the exam if he receives that list.\n\n### Input\n\nThe first line contains one integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nEach test case consists of three lines:\n\n- the first line contains three integers $n$, $m$ and $k$ ($2 \\le n \\le 3 \\cdot 10^5$; $1 \\le m, k \\le n$);\n- the second line contains $m$ distinct integers $a_1, a_2, \\dots, a_m$ ($1 \\le a_i \\le n$; $a_i < a_{i+1}$);\n- the third line contains $k$ distinct integers $q_1, q_2, \\dots, q_k$ ($1 \\le q_i \\le n$; $q_i < q_{i+1}$).\n\nAdditional constraints on the input:\n\n- the sum of $n$ over all test cases does not exceed $3 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print a string of $m$ characters. The $i$-th character should be 1 if Monocarp passes the exam if he receives the $i$-th question list, 0 if Monocarp won't pass.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n4 4 3\n\n1 2 3 4\n\n1 3 4\n\n5 4 3\n\n1 2 3 4\n\n1 3 4\n\n4 4 4\n\n1 2 3 4\n\n1 2 3 4\n\n2 2 1\n\n1 2\n\n2\n\n```\n\n#### Output #1\n\n```\n0100\n0000\n1111\n10\n```\n\n### Note\n\nIn the first test case, Monocarp knows the questions $[1, 3, 4]$. Let's consider all the question lists:\n\n- the first list consists of questions $[2, 3, 4]$. Monocarp doesn't know the $2$-nd question, so he won't pass;\n- the second list consists of questions $[1, 3, 4]$. Monocarp knows all these questions, so he will pass;\n- the third list consists of questions $[1, 2, 4]$. Monocarp doesn't know the $2$-nd question, so he won't pass;\n- the fourth list consists of questions $[1, 2, 3]$. Monocarp doesn't know the $2$-nd question, so he won't pass.", "cfid": "2051C"}
{"problem_id": "2051E", "problem_title": "E. Best Price", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2051/E", "problem_statement": "A batch of Christmas trees has arrived at the largest store in Berland. $n$ customers have already come to the store, wanting to buy them.\n\nBefore the sales begin, the store needs to determine the price for one tree (the price is the same for all customers). To do this, the store has some information about each customer.\n\nFor the $i$-th customer, two integers $a_i$ and $b_i$ are known, which define their behavior:\n\n- if the price of the product is at most $a_i$, the customer will buy a tree and leave a positive review;\n- otherwise, if the price of the product is at most $b_i$, the customer will buy a tree but leave a negative review;\n- otherwise, the customer will not buy a tree at all.\n\nYour task is to calculate the maximum possible earnings for the store, given that it can receive no more than $k$ negative reviews.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\le n \\le 2 \\cdot 10^5$; $0 \\le k \\le n$).\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 2 \\cdot 10^9$).\n\nThe third line contains $n$ integers $b_1, b_2, \\dots, b_n$ ($1 \\le b_i \\le 2 \\cdot 10^9$; $a_i < b_i$).\n\nAdditional constraint on the input: the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print a single integer — the maximum possible earnings for the store, given that it can receive no more than $k$ negative reviews.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n2 0\n\n2 1\n\n3 4\n\n1 1\n\n2\n\n5\n\n3 3\n\n1 5 2\n\n3 6 4\n\n4 3\n\n2 3 2 8\n\n3 7 3 9\n\n3 1\n\n2 9 5\n\n12 14 9\n\n```\n\n#### Output #1\n\n```\n2\n5\n9\n14\n15\n```\n\n### Note\n\nConsider the example from the statement:\n\n- In the first test case, the price should be set to $1$. Then both customers will buy one tree each and leave no negative reviews;\n- In the second test case, the price should be set to $5$. Then the only customer will buy a tree and leave a negative review;\n- In the third test case, the price should be set to $3$. Then all customers will buy one tree each, and the store will receive two negative reviews.\n- In the fourth test case, the price should be set to $7$. Then two customers will buy one tree each, and the store will receive one negative review.", "cfid": "2051E"}
{"problem_id": "2051A", "problem_title": "A. Preparing for the Olympiad", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2051/A", "problem_statement": "Monocarp and Stereocarp are preparing for the Olympiad. There are $n$ days left until the Olympiad. On the $i$-th day, if Monocarp plans to practice, he will solve $a_i$ problems. Similarly, if Stereocarp plans to practice on the same day, he will solve $b_i$ problems.\n\nMonocarp can train on any day he wants. However, Stereocarp watches Monocarp and follows a different schedule: if Monocarp trained on day $i$ and $i < n$, then Stereocarp will train on day $(i+1)$.\n\nMonocarp wants to organize his training process in a way that the difference between the number of problems he solves and the number of problems Stereocarp solves is as large as possible. Formally, Monocarp wants to maximize the value of $(m-s)$, where $m$ is the number of problems he solves, and $s$ is the number of problems Stereocarp solves. Help Monocarp determine the maximum possible difference in the number of solved problems between them.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^3$) — the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 100$).\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$).\n\nThe third line contains $n$ integers $b_1, b_2, \\dots, b_n$ ($1 \\le b_i \\le 100$).\n\n### Output\n\nFor each test case, print a single integer — the maximum possible difference between the number of problems Monocarp solves and the number of problems Stereocarp solves.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2\n\n3 2\n\n2 1\n\n1\n\n5\n\n8\n\n3\n\n1 1 1\n\n2 2 2\n\n6\n\n8 2 5 6 2 6\n\n8 2 7 4 3 4\n\n```\n\n#### Output #1\n\n```\n4\n5\n1\n16\n```\n\n### Note\n\nLet's analyze the example from the statement:\n\n- In the first test case, it is optimal for Monocarp to train both days; then Stereocarp will train on day $2$.\n- In the second test case, it is optimal for Monocarp to train on the only day, and Stereocarp will not train at all.\n- In the third test case, it is optimal for Monocarp to train on the last day (and only on that day).\n- In the fourth test case, it is optimal for Monocarp to train on days $1, 3, 4, 6$; then Stereocarp will train on days $2, 4, 5$.", "cfid": "2051A"}
{"problem_id": "2049B", "problem_title": "B. pspspsps", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2049/B", "problem_statement": "Cats are attracted to pspspsps, but Evirir, being a dignified dragon, is only attracted to pspspsps with oddly specific requirements...\n\nGiven a string $s = s_1s_2\\ldots s_n$ of length $n$ consisting of characters p, s, and . (dot), determine whether a permutation$^{\\text{∗}}$ $p$ of length $n$ exists, such that for all integers $i$ ($1 \\le i \\le n$):\n\n- If $s_i$ is p, then $[p_1, p_2, \\ldots, p_i]$ forms a permutation (of length $i$);\n- If $s_i$ is s, then $[p_i, p_{i+1}, \\ldots, p_{n}]$ forms a permutation (of length $n-i+1$);\n- If $s_i$ is ., then there is no additional restriction.\n\n$^{\\text{∗}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 500$), the length of $s$.\n\nThe second line of each test case contains a string $s$ of length $n$ that consists of the characters p, s, and ..\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5000$.\n\n### Output\n\nFor each test case, output YES or NO on a line. Output YES if there is such a permutation and NO otherwise.\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n9\n\n4\n\ns.sp\n\n6\n\npss..s\n\n5\n\nppppp\n\n2\n\nsp\n\n4\n\n.sp.\n\n8\n\npsss....\n\n1\n\n.\n\n8\n\npspspsps\n\n20\n\n....................\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nYES\nYES\nNO\nNO\nYES\nNO\nYES\n```\n\n### Note\n\nFor the first test case, one permutation that works is $p = [3, 4, 1, 2]$. The restrictions are as follows:\n\n- $s_1 =$ s: $[p_1, p_2, p_3, p_4] = [3, 4, 1, 2]$ forms a permutation.\n- $s_2 =$ .: No additional restriction.\n- $s_3 =$ s: $[p_3, p_4] = [1, 2]$ forms a permutation.\n- $s_4 =$ p: $[p_1, p_2, p_3, p_4] = [3, 4, 1, 2]$ forms a permutation.\n\nFor the second test case, it can be proven that there is no permutation that satisfies all restrictions.\n\nFor the third test case, one permutation that satisfies the constraints is $p = [1, 2, 3, 4, 5]$.", "cfid": "2049B"}
{"problem_id": "2049A", "problem_title": "A. MEX Destruction", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2049/A", "problem_statement": "Evirir the dragon snuck into a wizard's castle and found a mysterious contraption, and their playful instincts caused them to play with (destroy) it...\n\nEvirir the dragon found an array $a_1, a_2, \\ldots, a_n$ of $n$ non-negative integers.\n\nIn one operation, they can choose a non-empty subarray$^{\\\\text{∗}}$ $b$ of $a$ and replace it with the integer $\\\\operatorname{mex}(b)$$^{\\\\text{†}}$. They want to use this operation any number of times to make $a$ only contain zeros. It can be proven that this is always possible under the problem constraints.\n\nWhat is the minimum number of operations needed?\n\n$^{\\text{∗}}$An array $c$ is a subarray of an array $d$ if $c$ can be obtained from $d$ by the deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\n$^{\\text{†}}$The minimum excluded (MEX) of a collection of integers $f_1, f_2, \\ldots, f_k$ is defined as the smallest non-negative integer $x$ which does not occur in the collection $f$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 200$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 50$), the length of $a$.\n\nThe second line of each test case contains $n$ space-separated integers, $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le 100$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $500$.\n\n### Output\n\nFor each test case, output a single integer on a line, the minimum number of operations needed to make $a$ contain only zeros.\n\n### Example\n\n#### Input #1\n\n```\n\n10\n\n4\n\n0 1 2 3\n\n6\n\n0 0 0 0 0 0\n\n5\n\n1 0 1 0 1\n\n5\n\n3 1 4 1 5\n\n4\n\n3 2 1 0\n\n7\n\n9 100 0 89 12 2 3\n\n4\n\n0 3 9 0\n\n7\n\n0 7 0 2 0 7 0\n\n1\n\n0\n\n2\n\n0 1\n\n```\n\n#### Output #1\n\n```\n1\n0\n2\n1\n1\n2\n1\n2\n0\n1\n```\n\n### Note\n\nIn the first test case, Evirir can choose the subarray $b = [1, 2, 3]$ and replace it with $\\operatorname{mex}(1, 2, 3) = 0$, changing $a$ from $[0, \\underline{1, 2, 3}]$ to $[0, 0]$ (where the chosen subarray is underlined). Therefore, the answer is $1$.\n\nIn the second test case, $a$ already contains only $0$s, so no operation is needed.\n\nIn the third test case, Evirir can change $a$ as follows: $[1, \\underline{0, 1, 0, 1}] \\to [\\underline{1, 2}] \\to [0]$. Here, $\\operatorname{mex}(0, 1, 0, 1) = 2$ and $\\operatorname{mex}(1, 2) = 0$.\n\nIn the fourth test case, Evirir can choose $b$ to be the entire array $a$, changing $a$ from $[\\underline{3, 1, 4, 1, 5}]$ to $[0]$.", "cfid": "2049A"}
{"problem_id": "2049C", "problem_title": "C. MEX Cycle", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2049/C", "problem_statement": "Evirir the dragon has many friends. They have 3 friends! That is one more than the average dragon.\n\nYou are given integers $n$, $x$, and $y$. There are $n$ dragons sitting in a circle. The dragons are numbered $1, 2, \\ldots, n$. For each $i$ ($1 \\le i \\le n$), dragon $i$ is friends with dragon $i - 1$ and $i + 1$, where dragon $0$ is defined to be dragon $n$ and dragon $n + 1$ is defined to be dragon $1$. Additionally, dragons $x$ and $y$ are friends with each other (if they are already friends, this changes nothing). Note that all friendships are mutual.\n\nOutput $n$ non-negative integers $a_1, a_2, \\ldots, a_n$ such that for each dragon $i$ ($1 \\le i \\le n$), the following holds:\n\n- Let $f_1, f_2, \\ldots, f_k$ be the friends of dragon $i$. Then $a_i = \\operatorname{mex}(a_{f_1}, a_{f_2}, \\ldots, a_{f_k})$.$^{\\text{∗}}$\n\n$^{\\text{∗}}$The minimum excluded (MEX) of a collection of integers $c_1, c_2, \\ldots, c_m$ is defined as the smallest non-negative integer $t$ which does not occur in the collection $c$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first and only line of each test case contains three integers $n$, $x$, $y$ ($3 \\le n \\le 2 \\cdot 10^5$, $1 \\le x < y \\le n$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output $n$ space-separated non-negative integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le 10^9$) on a line that satisfy the condition in the statement. If there are multiple solutions, print any of them. It can be proven that under the problem constraints, a solution with $0 \\le a_i \\le 10^9$ always exists.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n5 1 3\n\n4 2 4\n\n6 3 5\n\n7 3 6\n\n3 2 3\n\n5 1 5\n\n6 2 5\n\n```\n\n#### Output #1\n\n```\n0 2 1 0 1\n1 2 1 0\n1 2 0 1 2 0\n0 1 2 0 1 0 1\n2 0 1\n1 0 2 1 0\n0 1 2 0 2 1\n```\n\n### Note\n\nFor the first test case:\n\n- $i = 1$: Dragon $1$'s friends are dragons $2, 3, 5$. $\\operatorname{mex}(a_2, a_3, a_5) = \\operatorname{mex}(2, 1, 1) = 0 = a_1$, so the condition for dragon $1$ is satisfied.\n- $i = 2$: Dragon $2$'s friends are dragons $1, 3$. $\\operatorname{mex}(a_1, a_3) = \\operatorname{mex}(0, 1) = 2 = a_2$.\n- $i = 3$: Dragon $3$'s friends are dragons $1, 2, 4$. $\\operatorname{mex}(a_1, a_2, a_4) = \\operatorname{mex}(0, 2, 0) = 1 = a_3$.\n- $i = 4$: Dragon $4$'s friends are dragons $3, 5$. $\\operatorname{mex}(a_3, a_5) = \\operatorname{mex}(1, 1) = 0 = a_4$.\n- $i = 5$: Dragon $5$'s friends are dragons $1, 4$. $\\operatorname{mex}(a_1, a_4) = \\operatorname{mex}(0, 0) = 1 = a_5$.", "cfid": "2049C"}
{"problem_id": "2048D", "problem_title": "D. Kevin and Competition Memories", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2048/D", "problem_statement": "Kevin used to get into Rio's Memories, and in Rio's Memories, a series of contests was once held. Kevin remembers all the participants and all the contest problems from that time, but he has forgotten the specific rounds, the distribution of problems, and the exact rankings.\n\nThere are $ m $ problems in total, with the $ i $-th problem having a difficulty of $ b_i $. Let each contest consist of $ k $ problems, resulting in a total of $ \\lfloor \\frac{m}{k} \\rfloor $ contests. This means that you select exactly $ \\lfloor \\frac{m}{k} \\rfloor \\cdot k $ problems for the contests in any combination you want, with each problem being selected at most once, and the remaining $m\\bmod k$ problems are left unused. For example, if $m = 17$ and $k = 3$, you should create exactly $5$ contests consisting of $3$ problems each, and exactly $2$ problems will be left unused.\n\nThere are $ n $ participants in the contests, with Kevin being the $1$-st participant. The $ i $-th participant has a rating of $ a_i $. During the contests, each participant solves all problems with a difficulty not exceeding their rating, meaning the $ i $-th participant solves the $ j $-th problem if and only if $ a_i \\geq b_j $. In each contest, Kevin's rank is one plus the number of participants who solve more problems than he does.\n\nFor each $ k = 1, 2, \\ldots, m $, Kevin wants to know the minimum sum of his ranks across all $ \\lfloor \\frac{m}{k} \\rfloor $ contests. In other words, for some value of $k$, after selecting the problems for each contest, you calculate the rank of Kevin in each contest and sum up these ranks over all $ \\lfloor \\frac{m}{k} \\rfloor $ contests. Your goal is to minimize this value.\n\nNote that contests for different values of $k$ are independent. It means that for different values of $k$, you can select the distribution of problems into the contests independently.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $ t $ ($ 1 \\le t \\le 5\\cdot 10^4 $).\n\nThe first line of each test case contains two integers $ n $ and $ m $ ($ 1 \\le n, m \\leq 3\\cdot 10^5 $) — the number of participants and the number of problems.\n\nThe second line of each test case contains $ n $ integers $ a_1, a_2, \\ldots, a_n $ ($ 0 \\le a_i \\le 10^9 $) — the rating of each participant.\n\nThe third line of each test case contains $ m $ integers $ b_1, b_2, \\ldots, b_m $ ($ 0 \\le b_i \\le 10^9 $) — the difficulty of each problem.\n\nIt is guaranteed that both the sum of $ n $ and the sum of $ m $ over all test cases do not exceed $ 3 \\cdot 10^5 $.\n\n### Output\n\nFor each test case, output $m$ integers — the minimum sum of Kevin's ranks for each $ k = 1, 2, \\ldots, m$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n4 4\n\n4 3 7 5\n\n2 5 4 6\n\n5 5\n\n5 0 4 8 6\n\n1 3 9 2 7\n\n6 7\n\n1 1 4 5 1 4\n\n1 9 1 9 8 1 0\n\n7 6\n\n1 9 1 9 8 1 0\n\n1 1 4 5 1 4\n\n```\n\n#### Output #1\n\n```\n7 4 2 3\n6 2 1 1 2\n7 3 2 1 1 1 1\n15 9 5 4 4 4\n```\n\n### Note\n\nFor the first test case:\n\nWhen $k=1$, since each contest only contains one problem, the distribution is in fact unique. For example, in the contest which only includes the third problem (which has a difficulty of $4$), all participants except the $2$-nd can solve it. Since no one solves strictly more problems than Kevin, his ranking in this contest is $1$. Similarly, in all $4$ contests, Kevin's rankings are $1,3,1,2$, and the sum is $7$.\n\nWhen $k=2$, one optimal way is to choose the $1$-st and the $3$-rd problem to form a contest, while the $2$-nd and $4$-th for another. In the former contest, $4$ participants respectively solve $2,1,2,2$ problems, so Kevin's ranking is $1$; in the latter one, they respectively solve $0,0,2,1$, since there are $2$ participants ($3$-rd and $4$-th) solve more problems than Kevin, his ranking is $1+2=3$. Thus the answer is $1+3=4$. It can be proven that there's no way to achieve a lower sum.\n\nWhen $k=3$, we can simply choose the $1$-st, the $3$-rd, and the $4$-th problem to make a contest, and Kevin has a ranking of $2$, which is optimal.\n\nWhen $k=4$, since there's only one contest, the distribution is also unique, and Kevin's ranking is $3$.", "cfid": "2048D"}
{"problem_id": "2048A", "problem_title": "A. Kevin and Combination Lock", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2048/A", "problem_statement": "Kevin is trapped in Lakeside Village by Grace. At the exit of the village, there is a combination lock that can only be unlocked if Kevin solves it.\n\nThe combination lock starts with an integer $ x $. Kevin can perform one of the following two operations zero or more times:\n\n1. If $ x \\neq 33 $, he can select two consecutive digits $ 3 $ from $ x $ and remove them simultaneously. For example, if $ x = 13\\,323 $, he can remove the second and third $ 3 $, changing $ x $ to $ 123 $.\n2. If $ x \\geq 33 $, he can change $ x $ to $ x - 33 $. For example, if $ x = 99 $, he can choose this operation to change $ x $ to $ 99 - 33 = 66 $.\n\nWhen the value of $ x $ on the combination lock becomes $ 0 $, Kevin can unlock the lock and escape from Lakeside Village. Please determine whether it is possible for Kevin to unlock the combination lock and escape.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$).\n\nThe only line of each test case contains a positive integer $x$ ($1\\leq x\\leq 10^9$).\n\n### Output\n\nFor each test case, output \"YES\" or \"NO\" (without quotes) in one line, representing whether Kevin can unlock the combination lock and escape. You can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n165\n\n6369\n\n666\n\n114514\n\n133333332\n\n```\n\n#### Output #1\n\n```\nYES\nYES\nNO\nNO\nYES\n```\n\n### Note\n\nFor the first test case, $165\\xrightarrow{-33}132\\xrightarrow{-33}99\\xrightarrow{-33}66\\xrightarrow{-33}33\\xrightarrow{-33}0$.\n\nFor the second test case, $6369\\xrightarrow{-33}6{\\color{red}{33}}6\\xrightarrow{\\text{remove \"33\"}}66\\xrightarrow{-33}33\\xrightarrow{-33}0$.\n\nFor the third test case, it can be proven that, regardless of the operations performed, $666$ cannot be transformed into $0$.", "cfid": "2048A"}
{"problem_id": "2048B", "problem_title": "B. Kevin and Permutation", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2048/B", "problem_statement": "Kevin is a master of permutation-related problems. You are taking a walk with Kevin in Darkwoods, and during your leisure time, he wants to ask you the following question.\n\nGiven two positive integers $ n $ and $ k $, construct a permutation$^{\\text{∗}}$ $ p $ of length $ n $ to minimize the sum of the minimum values of all subarrays$^{\\text{†}}$ of length $ k $. Formally, you need to minimize\n\n\n\n$$ \\sum_{i=1}^{n-k+1}\\left( \\min_{j=i}^{i+k-1} p_j\\right). $$\n\ntext{∗}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n$^{\\text{†}}$An array $a$ is a subarray of an array $b$ if $a$ can be obtained from $b$ by the deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end. Two subarrays are considered different if the sets of positions of the deleted elements are different.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^3$).\n\nThe only line of each test case contains two integers $ n $ and $ k $ ($ 1\\le k\\le n\\le 10^5 $).\n\nIt is guaranteed that the sum of $ n $ over all test cases doesn't exceed $ 10^5 $.\n\n### Output\n\nFor each test case, output $ n $ integers on a single line — the permutation $ p $ you constructed.\n\nIf there are multiple answers, you can print any of them.\n\n### Example\n\n#### Input #1\n\n```\n3\n4 2\n6 1\n8 3\n```\n\n#### Output #1\n\n```\n3 1 2 4\n5 2 1 6 4 3\n4 6 2 8 3 1 5 7\n```\n\n### Note\n\nIn the first test case, with $ k=2 $, consider all subarrays of length $ 2 $: the minimum value of $ p_1,p_2 $ is $ 1 $, the minimum value of $ p_2,p_3 $ is $ 1 $, and the minimum value of $ p_3,p_4 $ is $ 2 $. The sum $ 1+1+2=4 $ is the smallest among all possible permutations.\n\nIn the second test case, all subarrays of length $ 1 $ have minimum values of $ 5, 2, 1, 6, 4, 3 $, and the sum $ 5+2+1+6+4+3=21 $ is proven to be the smallest.", "cfid": "2048B"}
{"problem_id": "2048C", "problem_title": "C. Kevin and Binary Strings", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2048/C", "problem_statement": "Kevin discovered a binary string $s$ that starts with 1 in the river at Moonlit River Park and handed it over to you. Your task is to select two non-empty substrings$^{\\text{∗}}$ of $s$ (which can be overlapped) to maximize the XOR value of these two substrings.\n\nThe XOR of two binary strings $a$ and $b$ is defined as the result of the $\\oplus$ operation applied to the two numbers obtained by interpreting $a$ and $b$ as binary numbers, with the leftmost bit representing the highest value. Here, $\\oplus$ denotes the [bitwise XOR operation](https://en.wikipedia.org/wiki/Bitwise_operation#XOR).\n\nThe strings you choose may have leading zeros.\n\n$^{\\text{∗}}$A string $a$ is a substring of a string $b$ if $a$ can be obtained from $b$ by the deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^3$).\n\nThe only line of each test case contains a binary string $s$ that starts with 1 ($1\\le\\lvert s\\rvert\\le 5000$).\n\nIt is guaranteed that the sum of $\\lvert s\\rvert$ over all test cases doesn't exceed $5000$.\n\n### Output\n\nFor each test case, output four integers $l_1, r_1, l_2, r_2$ ($1 \\le l_1 \\le r_1 \\le |s|$, $1 \\le l_2 \\le r_2 \\le |s|$) — in the case the two substrings you selected are $s_{l_1} s_{l_1 + 1} \\ldots s_{r_1}$ and $s_{l_2} s_{l_2 + 1} \\ldots s_{r_2}$.\n\nIf there are multiple solutions, print any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n111\n\n1000\n\n10111\n\n11101\n\n1100010001101\n\n```\n\n#### Output #1\n\n```\n2 2 1 3\n1 3 1 4\n1 5 1 4\n3 4 1 5\n1 13 1 11\n```\n\n### Note\n\nIn the first test case, we can choose $ s_2=\\texttt{1} $ and $ s_1 s_2 s_3=\\texttt{111} $, and $ \\texttt{1}\\oplus\\texttt{111}=\\texttt{110} $. It can be proven that it is impossible to obtain a larger result. Additionally, $ l_1=3$, $r_1=3$, $l_2=1$, $r_2=3 $ is also a valid solution.\n\nIn the second test case, $ s_1 s_2 s_3=\\texttt{100} $, $ s_1 s_2 s_3 s_4=\\texttt{1000} $, the result is $ \\texttt{100}\\oplus\\texttt{1000}=\\texttt{1100} $, which is the maximum.", "cfid": "2048C"}
{"problem_id": "2044E", "problem_title": "E. Insane Problem", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2044/E", "problem_statement": "Wave is given five integers $k$, $l_1$, $r_1$, $l_2$, and $r_2$. Wave wants you to help her count the number of ordered pairs $(x, y)$ such that all of the following are satisfied:\n\n- $l_1 \\leq x \\leq r_1$.\n- $l_2 \\leq y \\leq r_2$.\n- There exists a non-negative integer $n$ such that $\\frac{y}{x} = k^n$.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe only line of each test case contains five integers $k$, $l_1$, $r_1$, $l_2$, and $r_2$ ($2 \\leq k \\leq 10^9, 1 \\leq l_1 \\leq r_1 \\leq 10^9, 1 \\leq l_2 \\leq r_2 \\leq 10^9$).\n\n### Output\n\nFor each test case, output the number of matching ordered pairs $(x, y)$ on a new line.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n2 2 6 2 12\n\n2 1 1000000000 1 1000000000\n\n3 5 7 15 63\n\n1000000000 1 5 6 1000000000\n\n15 17 78 2596 20914861\n\n```\n\n#### Output #1\n\n```\n12\n1999999987\n6\n1\n197\n```\n\n### Note\n\nIn the third test case, the matching ordered pairs are the following:\n\n- $(5,15)$\n- $(5,45)$\n- $(6,18)$\n- $(6,54)$\n- $(7,21)$\n- $(7,63)$\n\nIn the fourth test case, the only valid ordered pair is $(1,1\\,000\\,000\\,000)$", "cfid": "2044E"}
{"problem_id": "2044A", "problem_title": "A. Easy Problem", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2044/A", "problem_statement": "Cube is given an integer $n$. She wants to know how many ordered pairs of positive integers $(a,b)$ there are such that $a=n-b$. Since Cube is not very good at math, please help her!\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 99$) — the number of test cases.\n\nThe only line of each test case contains an integer $n$ ($2 \\leq n \\leq 100$).\n\n### Output\n\nFor each test case, output the number of ordered pairs $(a, b)$ on a new line.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2\n\n4\n\n6\n\n```\n\n#### Output #1\n\n```\n1\n3\n5\n```\n\n### Note\n\nIn the first test case, the only ordered pair that works is $(a,b)=(1,1)$.\n\nIn the second test case, the three ordered pairs of $(a,b)$ that work are $(3,1), (2,2), (1,3)$.", "cfid": "2044A"}
{"problem_id": "2044D", "problem_title": "D. Harder Problem", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2044/D", "problem_statement": "Given a sequence of positive integers, a positive integer is called a mode of the sequence if it occurs the maximum number of times that any positive integer occurs. For example, the mode of $[2,2,3]$ is $2$. Any of $9$, $8$, or $7$ can be considered to be a mode of the sequence $[9,9,8,8,7,7]$.\n\nYou gave UFO an array $a$ of length $n$. To thank you, UFO decides to construct another array $b$ of length $n$ such that $a_i$ is a mode of the sequence $[b_1, b_2, \\ldots, b_i]$ for all $1 \\leq i \\leq n$.\n\nHowever, UFO doesn't know how to construct array $b$, so you must help her. Note that $1 \\leq b_i \\leq n$ must hold for your array for all $1 \\leq i \\leq n$.\n\n### Input\n\nThe first line contains $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe first line of each test case contains an integer $n$ ($1 \\leq n \\leq 2 \\cdot 10^5$) — the length of $a$.\n\nThe following line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq n$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output $n$ numbers $b_1, b_2, \\ldots, b_n$ ($1 \\leq b_i \\leq n$) on a new line. It can be shown that $b$ can always be constructed. If there are multiple possible arrays, you may print any.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2\n\n1 2\n\n4\n\n1 1 1 2\n\n8\n\n4 5 5 5 1 1 2 1\n\n10\n\n1 1 2 2 1 1 3 3 1 1\n\n```\n\n#### Output #1\n\n```\n1 2\n1 1 2 2\n4 5 5 1 1 2 2 3\n1 8 2 2 1 3 3 9 1 1\n```\n\n### Note\n\nLet's verify the correctness for our sample output in test case $2$.\n\n- At $i = 1$, $1$ is the only possible mode of $[1]$.\n- At $i = 2$, $1$ is the only possible mode of $[1, 1]$.\n- At $i = 3$, $1$ is the only possible mode of $[1, 1, 2]$.\n- At $i = 4$, $1$ or $2$ are both modes of $[1, 1, 2, 2]$. Since $a_i = 2$, this array is valid.", "cfid": "2044D"}
{"problem_id": "2044B", "problem_title": "B. Normal Problem", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2044/B", "problem_statement": "A string consisting of only characters 'p', 'q', and 'w' is painted on a glass window of a store. Ship walks past the store, standing directly in front of the glass window, and observes string $a$. Ship then heads inside the store, looks directly at the same glass window, and observes string $b$.\n\nShip gives you string $a$. Your job is to find and output $b$.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 100$) — the number of test cases.\n\nThe only line of each test case contains a string $a$ ($1 \\leq |a| \\leq 100$) — the string Ship observes from outside the store. It is guaranteed that $a$ only contains characters 'p', 'q', and 'w'.\n\n### Output\n\nFor each test case, output string $b$, the string Ship observes from inside the store, on a new line.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\nqwq\n\nppppp\n\npppwwwqqq\n\nwqpqwpqwwqp\n\npqpqpqpq\n\n```\n\n#### Output #1\n\n```\npwp\nqqqqq\npppwwwqqq\nqpwwpqwpqpw\npqpqpqpq\n```", "cfid": "2044B"}
{"problem_id": "2044G1", "problem_title": "G1. Medium Demon Problem (easy version)", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2044/G1", "problem_statement": "This is the easy version of the problem. The key difference between the two versions is highlighted in bold.\n\nA group of $n$ spiders has come together to exchange plushies. Initially, each spider has $1$ plushie. Every year, if spider $i$ has at least one plushie, he will give exactly one plushie to spider $r_i$. Otherwise, he will do nothing. Note that all plushie transfers happen at the same time. In this version, if any spider has more than $1$ plushie at any point in time, they will throw all but $1$ away.\n\nThe process is stable in the current year if each spider has the same number of plushies (before the current year's exchange) as he did the previous year (before the previous year's exchange). Note that year $1$ can never be stable.\n\nFind the first year in which the process becomes stable.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe first line of each test case contains an integer $n$ ($2 \\leq n \\leq 2 \\cdot 10^5$) — the number of spiders.\n\nThe following line contains $n$ integers $r_1, r_2, \\ldots, r_n$ ($1 \\leq r_i \\leq n, r_i \\neq i$) — the recipient of the plushie of each spider.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output an integer on a new line, the first year in which the process becomes stable.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n2\n\n2 1\n\n5\n\n2 3 4 5 1\n\n5\n\n2 1 4 2 3\n\n5\n\n4 1 1 5 4\n\n10\n\n4 3 9 1 6 7 9 10 10 3\n\n```\n\n#### Output #1\n\n```\n2\n2\n5\n4\n5\n```\n\n### Note\n\nFor the second test case:\n\n- At year $1$, the following array shows the number of plushies each spider has: $[1, 1, 1, 1, 1]$. Then, year $1$'s exchange happens.\n- At year $2$, the following array shows the number of plushies each spider has: $[1, 1, 1, 1, 1]$. Since this array is the same as the previous year, this year is stable.\n\nFor the third test case:\n\n- At year $1$, the following array shows the number of plushies each spider has: $[1, 1, 1, 1, 1]$. Then, year $1$'s exchange happens.\n- At year $2$, the following array shows the number of plushies each spider has: $[1, 1, 1, 1, 0]$. Then, year $2$'s exchange happens. Note that even though two spiders gave spider $2$ plushies, spider $2$ may only keep one plushie.\n- At year $3$, the following array shows the number of plushies each spider has: $[1, 1, 0, 1, 0]$. Then, year $3$'s exchange happens.\n- At year $4$, the following array shows the number of plushies each spider has: $[1, 1, 0, 0, 0]$. Then, year $4$'s exchange happens.\n- At year $5$, the following array shows the number of plushies each spider has: $[1, 1, 0, 0, 0]$. Since this array is the same as the previous year, this year is stable.", "cfid": "2044G1"}
{"problem_id": "2044C", "problem_title": "C. Hard Problem", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2044/C", "problem_statement": "Ball is the teacher in Paperfold University. The seats of his classroom are arranged in $2$ rows with $m$ seats each.\n\nBall is teaching $a + b + c$ monkeys, and he wants to assign as many monkeys to a seat as possible. Ball knows that $a$ of them only want to sit in row $1$, $b$ of them only want to sit in row $2$, and $c$ of them have no preference. Only one monkey may sit in each seat, and each monkey's preference must be followed if it is seated.\n\nWhat is the maximum number of monkeys that Ball can seat?\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nEach test case contains four integers $m$, $a$, $b$, and $c$ ($1 \\leq m, a, b, c \\leq 10^8$).\n\n### Output\n\nFor each test case, output the maximum number of monkeys you can seat.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n10 5 5 10\n\n3 6 1 1\n\n15 14 12 4\n\n1 1 1 1\n\n420 6 9 69\n\n```\n\n#### Output #1\n\n```\n20\n5\n30\n2\n84\n```\n\n### Note\n\nIn the second test case, $6$ monkeys want to sit in the front row, but only $3$ seats are available. The monkeys that have no preference and the monkeys who prefer sitting in the second row can sit in the second row together. Thus, the answer is $3+2=5$.", "cfid": "2044C"}
{"problem_id": "2040A", "problem_title": "A. Game of Division", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2040/A", "problem_statement": "You are given an array of integers $a_1, a_2, \\ldots, a_n$ of length $n$ and an integer $k$.\n\nTwo players are playing a game. The first player chooses an index $1 \\le i \\le n$. Then the second player chooses a different index $1 \\le j \\le n, i \\neq j$. The first player wins if $|a_i - a_j|$ is not divisible by $k$. Otherwise, the second player wins.\n\nWe play as the first player. Determine whether it is possible to win, and if so, which index $i$ should be chosen.\n\nThe absolute value of a number $x$ is denoted by $|x|$ and is equal to $x$ if $x \\ge 0$, and $-x$ otherwise.\n\n### Input\n\nEach test contains multiple test cases. The first line of input contains a single integer $t$ ($1 \\le t \\le 100$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\le n \\le 100$; $1 \\le k \\le 100$) — the length of the array and the number $k$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 100$) — the elements of the array $a$.\n\n### Output\n\nFor each test case, if it is impossible for the first player to win, print \"NO\" (without quotes).\n\nOtherwise, print \"YES\" (without quotes) and on the next line the appropriate index $1 \\le i \\le n$. If there are multiple solutions, print any of them.\n\nYou can output each letter in any case (lowercase or uppercase). For example, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will be recognized as a positive answer.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n3 2\n\n1 2 3\n\n4 2\n\n1 2 4 5\n\n5 3\n\n10 7 3 4 5\n\n5 3\n\n1 31 15 55 36\n\n2 1\n\n17 17\n\n2 2\n\n17 18\n\n1 3\n\n6\n\n```\n\n#### Output #1\n\n```\nYES\n2\nNO\nYES\n3\nNO\nNO\nYES\n2\nYES\n1\n```\n\n### Note\n\nIn the first test case, the first player can choose $a_2 = 2$. Then:\n\n- If the second player chooses $a_1 = 1$, the resulting difference is $|2 - 1| = 1$ which is not divisible by $k = 2$.\n- If the second player chooses $a_3 = 3$, the resulting difference is $|2 - 3| = 1$ which is not divisible by $k = 2$.\n\nIn the second test case:\n\n- If the first player chooses $a_1 = 1$ and then the second player chooses $a_4 = 5$, the resulting difference is $|1 - 5| = 4$ which is divisible by $k = 2$.\n- If the first player chooses $a_2 = 2$ and then the second player chooses $a_3 = 4$, the resulting difference is $|2 - 4| = 2$ which is divisible by $k = 2$.\n- If the first player chooses $a_3 = 4$ and then the second player chooses $a_2 = 2$, the resulting difference is $|4 - 2| = 2$ which is divisible by $k = 2$.\n- If the first player chooses $a_4 = 5$ and then the second player chooses $a_1 = 1$, the resulting difference is $|5 - 1| = 4$ which is divisible by $k = 2$.\n\nIn any case, the second player wins.", "cfid": "2040A"}
{"problem_id": "2040B", "problem_title": "B. Paint a Strip", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2040/B", "problem_statement": "You have an array of zeros $a_1, a_2, \\ldots, a_n$ of length $n$.\n\nYou can perform two types of operations on it:\n\n1. Choose an index $i$ such that $1 \\le i \\le n$ and $a_i = 0$, and assign $1$ to $a_i$;\n2. Choose a pair of indices $l$ and $r$ such that $1 \\le l \\le r \\le n$, $a_l = 1$, $a_r = 1$, $a_l + \\ldots + a_r \\ge \\lceil\\frac{r - l + 1}{2}\\rceil$, and assign $1$ to $a_i$ for all $l \\le i \\le r$.\n\nWhat is the minimum number of operations of the first type needed to make all elements of the array equal to one?\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe only line of each test case contains one integer $n$ ($1 \\le n \\le 10^5$) — the length of the array.\n\nNote that there is no limit on the sum of $n$ over all test cases.\n\n### Output\n\nFor each test case, print one integer — the minimum number of needed operations of first type.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n1\n\n2\n\n4\n\n20\n\n```\n\n#### Output #1\n\n```\n1\n2\n2\n4\n```\n\n### Note\n\nIn the first test case, you can perform an operation of the $1$st type with $i = 1$.\n\nIn the second test case, you can perform the following sequence of operations:\n\n1. Operation of $1$st type, $i = 1$. After performing this operation, the array will look like this: $[1, 0]$.\n2. Operation of $1$st type, $i = 2$. After performing this operation, the array will look like this: $[1, 1]$.\n\nThe sequence of operations in the second test case![](https://espresso.codeforces.com/ecf02679535327fda085e7f1b907288a051b3fb0.png)\n\nIn the third test case, you can perform the following sequence of operations:\n\n1. Operation of $1$st type, $i = 1$. After performing this operation, the array will look like this: $[1, 0, 0, 0]$.\n2. Operation of $1$st type, $i = 4$. After performing this operation, the array will look like this: $[1, 0, 0, 1]$.\n3. Operation of $2$nd type, $l = 1$, $r = 4$. On this segment, $a_l + \\ldots + a_r = a_1 + a_2 + a_3 + a_4 = 2$, which is not less than $\\lceil\\frac{r - l + 1}{2}\\rceil = 2$. After performing this operation, the array will look like this: $[1, 1, 1, 1]$.\n\nThe sequence of operations in the third test case![](https://espresso.codeforces.com/d3efd70fa3bf233db7f264ab6039a169081d8cf5.png)", "cfid": "2040B"}
{"problem_id": "2040C", "problem_title": "C. Ordered Permutations", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2040/C", "problem_statement": "Consider a permutation$^{\\text{∗}}$ $p_1, p_2, \\ldots, p_n$ of integers from $1$ to $n$. We can introduce the following sum for it$^{\\text{†}}$:\n\n\n\n$$S(p) = \\sum_{1 \\le l \\le r \\le n} \\min(p_l, p_{l + 1}, \\ldots, p_r)$$\n\nLet us consider all permutations of length $n$ with the maximum possible value of $S(p)$. Output the $k$-th of them in lexicographical$^{\\text{‡}}$order, or report that there are less than $k$ of them.\n\n$^{\\text{∗}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n$^{\\text{†}}$For example:\n\n- For the permutation $[1, 2, 3]$ the value of $S(p)$ is equal to $\\min(1) + \\min(1, 2) + \\min(1, 2, 3) + \\min(2) + \\min(2, 3) + \\min(3) =$ $1 + 1 + 1 + 2 + 2 + 3 = 10$\n- For the permutation $[2, 4, 1, 3]$ the value of $S(p)$ is equal to $\\min(2) + \\min(2, 4) + \\min(2, 4, 1) + \\min(2, 4, 1, 3) \\ +$ $ \\min(4) + \\min(4, 1) + \\min(4, 1, 3) \\ +$ $\\min(1) + \\min(1, 3) \\ +$ $\\min(3) =$ $2 + 2 + 1 + 1 + 4 + 1 + 1 + 1 + 1 + 3 = 17$.\n\n$^{\\text{‡}}$An array $a$ is lexicographically smaller than an array $b$ if and only if one of the following holds:\n\n- $a$ is a prefix of $b$, but $a \\ne b$; or\n- in the first position where $a$ and $b$ differ, the array $a$ has a smaller element than the corresponding element in $b$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe only line of each test case contains two integers $n$ and $k$ ($1 \\le n \\le 2 \\cdot 10^5$; $1 \\le k \\le 10^{12}$) — the length of the permutation and the index number of the desired permutation.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10 ^ 5$.\n\n### Output\n\nFor each test case, if there are less than $k$ suitable permutations, print $-1$.\n\nOtherwise, print the $k$-th suitable permutation.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n3 2\n\n3 3\n\n4 11\n\n4 6\n\n6 39\n\n7 34\n\n```\n\n#### Output #1\n\n```\n1 3 2\n2 3 1\n-1\n2 4 3 1\n-1\n2 3 4 5 7 6 1\n```\n\n### Note\n\nLet us calculate the required sum for all permutations of length $3$ (ordered lexicographically):\n\nPermutationValue of $S(p)\n\n$$[1, 2, 3]$$\n\n10\n\n$$[1, 3, 2]$$\n\n10\n\n$$[2, 1, 3]$$\n\n9\n\n$$[2, 3, 1]$$\n\n10\n\n$$[3, 1, 2]$$\n\n9\n\n$$[3, 2, 1]$$\n\n10$\n\nIn the first test case, you have to print the second suitable permutation of length $3$. Looking at the table, we see that it is the permutation $[1, 3, 2]$.\n\nIn the second test case, you have to print the third suitable permutation of length $3$. Looking at the table, we see that it is the permutation $[2, 3, 1]$.", "cfid": "2040C"}
{"problem_id": "2050E", "problem_title": "E. Three Strings", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2050/E", "problem_statement": "You are given three strings: $a$, $b$, and $c$, consisting of lowercase Latin letters. The string $c$ was obtained in the following way:\n\n1. At each step, either string $a$ or string $b$ was randomly chosen, and the first character of the chosen string was removed from it and appended to the end of string $c$, until one of the strings ran out. After that, the remaining characters of the non-empty string were added to the end of $c$.\n2. Then, a certain number of characters in string $c$ were randomly changed.\n\nFor example, from the strings $a=\\color{red}{\\text{abra}}$ and $b=\\color{blue}{\\text{cada}}$, without character replacements, the strings $\\color{blue}{\\text{ca}}\\color{red}{\\text{ab}}\\color{blue}{\\text{d}}\\color{red}{\\text{ra}}\\color{blue}{\\text{a}}$, $\\color{red}{\\text{abra}}\\color{blue}{\\text{cada}}$, $\\color{red}{\\text{a}}\\color{blue}{\\text{cada}}\\color{red}{\\text{bra}}$ could be obtained.\n\nFind the minimum number of characters that could have been changed in string $c$.\n\n### Input\n\nThe first line of the input contains a single integer $t$ ($1 \\le t \\le 10^3$) — the number of test cases.\n\nThe first line of each test case contains one string of lowercase Latin letters $a$ ($1 \\leq |a| \\leq 10^3$) — the first string, where $|a|$ denotes the length of string $a$.\n\nThe second line of each test case contains one string of lowercase Latin letters $b$ ($1 \\leq |b| \\leq 10^3$) — the second string, where $|b|$ denotes the length of string $b$.\n\nThe third line of each test case contains one string of lowercase Latin letters $c$ ($|c| = |a| + |b|$) — the third string.\n\nIt is guaranteed that the sum of $|a|$ across all test cases does not exceed $2 \\cdot 10^3$. Also, the sum of $|b|$ across all test cases does not exceed $2 \\cdot 10^3$.\n\n### Output\n\nFor each test case, output a single integer — the minimum number of characters that could have been changed in string $c$.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\na\n\nb\n\ncb\n\nab\n\ncd\n\nacbd\n\nab\n\nba\n\naabb\n\nxxx\n\nyyy\n\nxyxyxy\n\na\n\nbcd\n\ndecf\n\ncodes\n\nhorse\n\ncodeforces\n\negg\n\nannie\n\negaegaeg\n\n```\n\n#### Output #1\n\n```\n1\n0\n2\n0\n3\n2\n3\n```", "cfid": "2050E"}
{"problem_id": "2050B", "problem_title": "B. Transfusion", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2050/B", "problem_statement": "You are given an array $a$ of length $n$. In one operation, you can pick an index $i$ from $2$ to $n-1$ inclusive, and do one of the following actions:\n\n- Decrease $a_{i-1}$ by $1$, then increase $a_{i+1}$ by $1$.\n\n- Decrease $a_{i+1}$ by $1$, then increase $a_{i-1}$ by $1$.\n\nAfter each operation, all the values must be non-negative. Can you make all the elements equal after any number of operations?\n\n### Input\n\nFirst line of input consists of one integer $t$ ($1 \\le t \\le 10^4$)  — the number of test cases.\n\nFirst line of each test case consists of one integer $n$ ($3 \\le n \\le 2\\cdot 10^5$).\n\nSecond line of each test case consists of $n$ integers $a_i$ ($1 \\le a_i \\le 10^9$).\n\nIt is guaranteed that the sum of $n$ of all test cases doesn't exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, print \"YES\" without quotation marks if it is possible to make all the elements equal after any number of operations; otherwise, print \"NO\" without quotation marks.\n\nYou can print answers in any register: \"yes\", \"YeS\", \"nO\"  — will also be considered correct.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n3\n\n3 2 1\n\n3\n\n1 1 3\n\n4\n\n1 2 5 4\n\n4\n\n1 6 6 1\n\n5\n\n6 2 1 4 2\n\n4\n\n1 4 2 1\n\n5\n\n3 1 2 1 3\n\n3\n\n2 4 2\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nYES\nNO\nYES\nNO\nNO\nNO\n```", "cfid": "2050B"}
{"problem_id": "2050D", "problem_title": "D. Digital string maximization", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2050/D", "problem_statement": "You are given a string $s$, consisting of digits from $0$ to $9$. In one operation, you can pick any digit in this string, except for $0$ or the leftmost digit, decrease it by $1$, and then swap it with the digit left to the picked.\n\nFor example, in one operation from the string $1023$, you can get $1103$ or $1022$.\n\nFind the lexicographically maximum string you can obtain after any number of operations.\n\n### Input\n\nThe first line of the input consists of an integer $t$ ($1 \\le t \\le 10^4$)  — the number of test cases.\n\nEach test case consists of a single line consisting of a digital string $s$ ($1 \\le |s| \\le 2\\cdot 10^5$), where $|s|$ denotes the length of $s$. The string does not contain leading zeroes.\n\nIt is guaranteed that the sum of $|s|$ of all test cases doesn't exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, print the answer on a separate line.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n19\n\n1709\n\n11555\n\n51476\n\n9876543210\n\n5891917899\n\n```\n\n#### Output #1\n\n```\n81\n6710\n33311\n55431\n9876543210\n7875567711\n```\n\n### Note\n\nIn the first example, the following sequence of operations is suitable: $19 \\rightarrow 81$.\n\nIn the second example, the following sequence of operations is suitable: $1709 \\rightarrow 1780 \\rightarrow 6180 \\rightarrow 6710$.\n\nIn the fourth example, the following sequence of operations is suitable: $51476 \\rightarrow 53176 \\rightarrow 53616 \\rightarrow 53651 \\rightarrow 55351 \\rightarrow 55431$.", "cfid": "2050D"}
{"problem_id": "2050A", "problem_title": "A. Line Breaks", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2050/A", "problem_statement": "Kostya has a text $s$ consisting of $n$ words made up of Latin alphabet letters. He also has two strips on which he must write the text. The first strip can hold $m$ characters, while the second can hold as many as needed.\n\nKostya must choose a number $x$ and write the first $x$ words from $s$ on the first strip, while all the remaining words are written on the second strip. To save space, the words are written without gaps, but each word must be entirely on one strip.\n\nSince space on the second strip is very valuable, Kostya asks you to choose the maximum possible number $x$ such that all words $s_1, s_2, \\dots, s_x$ fit on the first strip of length $m$.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\le t \\le 1000$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\le n \\le 50$; $1 \\le m \\le 500$) — the number of words in the list and the maximum number of characters that can be on the first strip.\n\nThe next $n$ lines contain one word $s_i$ of lowercase Latin letters, where the length of $s_i$ does not exceed $10$.\n\n### Output\n\nFor each test case, output the maximum number of words $x$ such that the first $x$ words have a total length of no more than $m$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3 1\n\na\n\nb\n\nc\n\n2 9\n\nalpha\n\nbeta\n\n4 12\n\nhello\n\nworld\n\nand\n\ncodeforces\n\n3 2\n\nab\n\nc\n\nd\n\n3 2\n\nabc\n\nab\n\na\n\n```\n\n#### Output #1\n\n```\n1\n2\n2\n1\n0\n```", "cfid": "2050A"}
{"problem_id": "2050C", "problem_title": "C. Uninteresting Number", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2050/C", "problem_statement": "You are given a number $n$ with a length of no more than $10^5$.\n\nYou can perform the following operation any number of times: choose one of its digits, square it, and replace the original digit with the result. The result must be a digit (that is, if you choose the digit $x$, then the value of $x^2$ must be less than $10$).\n\nIs it possible to obtain a number that is divisible by $9$ through these operations?\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe only line of each test case contains the number $n$, without leading zeros. The length of the number does not exceed $10^5$.\n\nIt is guaranteed that the sum of the lengths of the numbers across all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, output \"YES\" if it is possible to obtain a number divisible by $9$ using the described operations, and \"NO\" otherwise.\n\nYou can output each letter in any case (lowercase or uppercase). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be accepted as a positive answer.\n\n### Example\n\n#### Input #1\n\n```\n\n9\n\n123\n\n322\n\n333333333333\n\n9997\n\n5472778912773\n\n1234567890\n\n23\n\n33\n\n52254522632\n\n```\n\n#### Output #1\n\n```\nNO\nYES\nYES\nNO\nNO\nYES\nNO\nYES\nYES\n```\n\n### Note\n\nIn the first example, from the integer $123$, it is possible to obtain only $123$, $143$, $129$, and $149$, none of which are divisible by $9$.\n\nIn the second example, you need to replace the second digit with its square; then $n$ will equal $342 = 38 \\cdot 9$.\n\nIn the third example, the integer is already divisible by $9$.", "cfid": "2050C"}
{"problem_id": "2050F", "problem_title": "F. Maximum modulo equality", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2050/F", "problem_statement": "You are given an array $a$ of length $n$ and $q$ queries $l$, $r$.\n\nFor each query, find the maximum possible $m$, such that all elements $a_l$, $a_{l+1}$, ..., $a_r$ are equal modulo $m$. In other words, $a_l \\bmod m = a_{l+1} \\bmod m = \\dots = a_r \\bmod m$, where $a \\bmod b$ — is the remainder of division $a$ by $b$. In particular, when $m$ can be infinite, print $0$.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$, $q$ ($1 \\le n, q \\le 2\\cdot 10^5$) — the length of the array and the number of queries.\n\nThe second line of each test case contains $n$ integers $a_i$ ($1 \\le a_i \\le 10^9$) — the elements of the array.\n\nIn the following $q$ lines of each test case, two integers $l$, $r$ are provided ($1 \\le l \\le r \\le n$) — the range of the query.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2\\cdot 10^5$, and the sum of $q$ does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each query, output the maximum value $m$ described in the statement.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n5 5\n\n5 14 2 6 3\n\n4 5\n\n1 4\n\n2 4\n\n3 5\n\n1 1\n\n1 1\n\n7\n\n1 1\n\n3 2\n\n1 7 8\n\n2 3\n\n1 2\n\n```\n\n#### Output #1\n\n```\n3 1 4 1 0\n0\n1 6\n```\n\n### Note\n\nIn the first query of the first sample, $6 \\bmod 3 = 3 \\bmod 3 = 0$. It can be shown that for greater $m$, the required condition will not be fulfilled.\n\nIn the third query of the first sample, $14 \\bmod 4 = 2 \\bmod 4 = 6 \\bmod 4 = 2$. It can be shown that for greater $m$, the required condition will not be fulfilled.", "cfid": "2050F"}
{"problem_id": "2046A", "problem_title": "A. Swap Columns and Find a Path", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2046/A", "problem_statement": "There is a matrix consisting of $2$ rows and $n$ columns. The rows are numbered from $1$ to $2$ from top to bottom; the columns are numbered from $1$ to $n$ from left to right. Let's denote the cell on the intersection of the $i$-th row and the $j$-th column as $(i,j)$. Each cell contains an integer; initially, the integer in the cell $(i,j)$ is $a_{i,j}$.\n\nYou can perform the following operation any number of times (possibly zero):\n\n- choose two columns and swap them (i. e. choose two integers $x$ and $y$ such that $1 \\le x < y \\le n$, then swap $a_{1,x}$ with $a_{1,y}$, and then swap $a_{2,x}$ with $a_{2,y}$).\n\nAfter performing the operations, you have to choose a path from the cell $(1,1)$ to the cell $(2,n)$. For every cell $(i,j)$ in the path except for the last, the next cell should be either $(i+1,j)$ or $(i,j+1)$. Obviously, the path cannot go outside the matrix.\n\nThe cost of the path is the sum of all integers in all $(n+1)$ cells belonging to the path. You have to perform the operations and choose a path so that its cost is maximum possible.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 5000$). The description of the test cases follows.\n\nEach test case consists of three lines:\n\n- the first line contains one integer $n$ ($1 \\le n \\le 5000$) — the number of columns in the matrix;\n- the second line contains $n$ integers $a_{1,1}, a_{1,2}, \\ldots, a_{1,n}$ ($-10^5 \\le a_{i,j} \\le 10^5$) — the first row of the matrix;\n- the third line contains $n$ integers $a_{2,1}, a_{2,2}, \\ldots, a_{2,n}$ ($-10^5 \\le a_{i,j} \\le 10^5$) — the second row of the matrix.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5000$.\n\n### Output\n\nFor each test case, print one integer — the maximum cost of a path you can obtain.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n1\n\n-10\n\n5\n\n3\n\n1 2 3\n\n10 -5 -3\n\n4\n\n2 8 5 3\n\n1 10 3 4\n\n```\n\n#### Output #1\n\n```\n-5\n16\n29\n```\n\n### Note\n\nHere are the explanations of the first three test cases of the example. The left matrix is the matrix given in the input, the right one is the state of the matrix after several column swaps (possibly zero). The optimal path is highlighted in green.\n\n![](https://espresso.codeforces.com/e7b0e0b73deafdd300cca5214c9e7584889e20ad.png)", "cfid": "2046A"}
{"problem_id": "2047A", "problem_title": "A. Alyona and a Square Jigsaw Puzzle", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2047/A", "problem_statement": "Alyona assembles an unusual square Jigsaw Puzzle. She does so in $n$ days in the following manner:\n\n- On the first day, she starts by placing the central piece in the center of the table.\n- On each day after the first one, she places a certain number of pieces around the central piece in clockwise order, always finishing each square layer completely before starting a new one.\n\nFor example, she places the first $14$ pieces in the following order:\n\n![](https://espresso.codeforces.com/0bf6bf6b73e87a48f211b53722a2e082fe0d198f.png)The colors denote the layers. The third layer is still unfinished.\n\nAlyona is happy if at the end of the day the assembled part of the puzzle does not have any started but unfinished layers. Given the number of pieces she assembles on each day, find the number of days Alyona is happy on.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 500$). The description of the test cases follows.\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 100$), the number of days.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 100$, $a_1 = 1$), where $a_i$ is the number of pieces Alyona assembles on the $i$-th day.\n\nIt is guaranteed in each test case that at the end of the $n$ days, there are no unfinished layers.\n\n### Output\n\nFor each test case, print a single integer: the number of days when Alyona is happy.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n1\n\n1\n\n2\n\n1 8\n\n5\n\n1 3 2 1 2\n\n7\n\n1 2 1 10 2 7 2\n\n14\n\n1 10 10 100 1 1 10 1 10 2 10 2 10 1\n\n```\n\n#### Output #1\n\n```\n1\n2\n2\n2\n3\n```\n\n### Note\n\nIn the first test case, in the only day Alyona finishes the only layer.\n\nIn the second test case, on the first day, Alyona finishes the first layer, and on the second day, she finishes the second layer.\n\nIn the third test case, she finishes the second layer in a few days.\n\nIn the fourth test case, she finishes the second layer and immediately starts the next one on the same day, therefore, she is not happy on that day. She is only happy on the first and last days.\n\nIn the fifth test case, Alyona is happy on the first, fourth, and last days.", "cfid": "2047A"}
{"problem_id": "2047B", "problem_title": "B. Replace Character", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2047/B", "problem_statement": "You're given a string $s$ of length $n$, consisting of only lowercase English letters.\n\nYou must do the following operation exactly once:\n\n- Choose any two indices $i$ and $j$ ($1 \\le i, j \\le n$). You can choose $i = j$.\n- Set $s_i := s_j$.\n\nYou need to minimize the number of distinct permutations$^\\dagger$ of $s$. Output any string with the smallest number of distinct permutations after performing exactly one operation.\n\n$^\\dagger$ A permutation of the string is an arrangement of its characters into any order. For example, \"bac\" is a permutation of \"abc\" but \"bcc\" is not.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 500$). The description of the test cases follows.\n\nThe first line of each test case contains $n$ ($1 \\le n \\le 10$) — the length of string $s$.\n\nThe second line of each test case contains $s$ of length $n$. The string contains only lowercase English letters.\n\n### Output\n\nFor each test case, output the required $s$ after applying exactly one operation. If there are multiple solutions, print any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n3\n\nabc\n\n4\n\nxyyx\n\n8\n\nalphabet\n\n1\n\nk\n\n10\n\naabbccddee\n\n6\n\nttbddq\n\n```\n\n#### Output #1\n\n```\ncbc\nyyyx\nalphaaet\nk\neabbccddee\ntttddq\n```\n\n### Note\n\nIn the first test case, we can obtain the following strings in one operation: \"abc\", \"bbc\", \"cbc\", \"aac\", \"acc\", \"aba\", and \"abb\".\n\nThe string \"abc\" has $6$ distinct permutations: \"abc\", \"acb\", \"bac\", \"bca\", \"cab\", and \"cba\".\n\nThe string \"cbc\" has $3$ distinct permutations: \"bcc\", \"cbc\", and \"ccb\", which is the lowest of all the obtainable strings. In fact, all obtainable strings except \"abc\" have $3$ permutations, so any of them would be accepted.", "cfid": "2047B"}
{"problem_id": "2046B", "problem_title": "B. Move Back at a Cost", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2046/B", "problem_statement": "You are given an array of integers $a$ of length $n$. You can perform the following operation zero or more times:\n\n- In one operation choose an index $i$ ($1 \\le i \\le n$), assign $a_i := a_i + 1$, and then move $a_i$ to the back of the array (to the rightmost position). For example, if $a = [3, 5, 1, 9]$, and you choose $i = 2$, the array becomes $[3, 1, 9, 6]$.\n\nFind the lexicographically smallest$^{\\text{∗}}$ array you can get by performing these operations.\n\n$^{\\text{∗}}$An array $c$ is lexicographically smaller than an array $d$ if and only if one of the following holds:\n\n- $c$ is a prefix of $d$, but $c \\ne d$; or\n- in the first position where $c$ and $d$ differ, the array $c$ has a smaller element than the corresponding element in $d$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 10^5$), the length of the array.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$), the elements of the array.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, print the lexicographically smallest array you can get.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3\n\n2 1 3\n\n5\n\n1 2 2 1 4\n\n6\n\n1 2 3 6 5 4\n\n```\n\n#### Output #1\n\n```\n1 3 3\n1 1 3 3 5\n1 2 3 4 6 7\n```", "cfid": "2046B"}
{"problem_id": "2042C", "problem_title": "C. Competitive Fishing", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2042/C", "problem_statement": "Alice and Bob participate in a fishing contest! In total, they caught $n$ fishes, numbered from $1$ to $n$ (the bigger the fish, the greater its index). Some of these fishes were caught by Alice, others — by Bob.\n\nTheir performance will be evaluated as follows. First, an integer $m$ will be chosen, and all fish will be split into $m$ non-empty groups. The first group should contain several (at least one) smallest fishes, the second group — several (at least one) next smallest fishes, and so on. Each fish should belong to exactly one group, and each group should be a contiguous subsegment of fishes. Note that the groups are numbered in exactly that order; for example, the fishes from the second group cannot be smaller than the fishes from the first group, since the first group contains the smallest fishes.\n\nThen, each fish will be assigned a value according to its group index: each fish in the first group gets value equal to $0$, each fish in the second group gets value equal to $1$, and so on. So, each fish in the $i$-th group gets value equal to $(i-1)$.\n\nThe score of each contestant is simply the total value of all fishes that contestant caught.\n\nYou want Bob's score to exceed Alice's score by at least $k$ points. What is the minimum number of groups ($m$) you have to split the fishes into? If it is impossible, you should report that.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $k$ ($2 \\le n \\le 2 \\cdot 10^5$; $1 \\le k \\le 10^9$).\n\nThe second line contains a string, consisting of exactly $n$ characters. The $i$-th character is either 0 (denoting that the $i$-th fish was caught by Alice) or 1 (denoting that the $i$-th fish was caught by Bob).\n\nAdditional constraint on the input: the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print a single integer — the minimum number of groups you have to split the fishes into; or -1 if it's impossible.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n4 1\n\n1001\n\n4 1\n\n1010\n\n4 1\n\n0110\n\n4 2\n\n0110\n\n6 3\n\n001110\n\n10 20\n\n1111111111\n\n5 11\n\n11111\n\n```\n\n#### Output #1\n\n```\n2\n-1\n2\n-1\n3\n4\n-1\n```\n\n### Note\n\nIn the first test case of the example, you can split the fishes into groups as follows: the first three fishes form the $1$-st group, the last fish forms the $2$-nd group. Then, Bob's score will be $1$, and Alice's score will be $0$.\n\nIn the third test case of the example, you can split the fishes into groups as follows: the first fish forms the $1$-st group, the last three fishes form the $2$-nd group. Then, Bob's score will be $2$, and Alice's score will be $1$.", "cfid": "2042C"}
{"problem_id": "2042B", "problem_title": "B. Game with Colored Marbles", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2042/B", "problem_statement": "Alice and Bob play a game. There are $n$ marbles, the $i$-th of them has color $c_i$. The players take turns; Alice goes first, then Bob, then Alice again, then Bob again, and so on.\n\nDuring their turn, a player must take one of the remaining marbles and remove it from the game. If there are no marbles left (all $n$ marbles have been taken), the game ends.\n\nAlice's score at the end of the game is calculated as follows:\n\n- she receives $1$ point for every color $x$ such that she has taken at least one marble of that color;\n- additionally, she receives $1$ point for every color $x$ such that she has taken all marbles of that color (of course, only colors present in the game are considered).\n\nFor example, suppose there are $5$ marbles, their colors are $[1, 3, 1, 3, 4]$, and the game goes as follows: Alice takes the $1$-st marble, then Bob takes the $3$-rd marble, then Alice takes the $5$-th marble, then Bob takes the $2$-nd marble, and finally, Alice takes the $4$-th marble. Then, Alice receives $4$ points: $3$ points for having at least one marble for colors $1$, $3$ and $4$, and $1$ point for having all marbles of color $4$. Note that this strategy is not necessarily optimal for both players.\n\nAlice wants to maximize her score at the end of the game. Bob wants to minimize it. Both players play optimally (i. e. Alice chooses a strategy which allows her to get as many points as possible, and Bob chooses a strategy which minimizes the amount of points Alice can get).\n\nCalculate Alice's score at the end of the game.\n\n### Input\n\nThe first line contains one integer $t$ ($1 \\le t \\le 1000$) — the number of test cases.\n\nEach test case consists of two lines:\n\n- the first line contains one integer $n$ ($1 \\le n \\le 1000$) — the number of marbles;\n- the second line contains $n$ integers $c_1, c_2, \\dots, c_n$ ($1 \\le c_i \\le n$) — the colors of the marbles.\n\nAdditional constraint on the input: the sum of $n$ over all test cases does not exceed $1000$.\n\n### Output\n\nFor each test case, print one integer — Alice's score at the end of the game, assuming that both players play optimally.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n5\n\n1 3 1 3 4\n\n3\n\n1 2 3\n\n4\n\n4 4 4 4\n\n```\n\n#### Output #1\n\n```\n4\n4\n1\n```\n\n### Note\n\nIn the second test case of the example, the colors of all marbles are distinct, so, no matter how the players act, Alice receives $4$ points for having all marbles of two colors, and no marbles of the third color.\n\nIn the third test case of the example, the colors of all marbles are the same, so, no matter how the players act, Alice receives $1$ point for having at least one (but not all) marble of color $4$.", "cfid": "2042B"}
{"problem_id": "2042A", "problem_title": "A. Greedy Monocarp", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2042/A", "problem_statement": "There are $n$ chests; the $i$-th chest initially contains $a_i$ coins. For each chest, you can choose any non-negative ($0$ or greater) number of coins to add to that chest, with one constraint: the total number of coins in all chests must become at least $k$.\n\nAfter you've finished adding coins to the chests, greedy Monocarp comes, who wants the coins. He will take the chests one by one, and since he is greedy, he will always choose the chest with the maximum number of coins. Monocarp will stop as soon as the total number of coins in chests he takes is at least $k$.\n\nYou want Monocarp to take as few coins as possible, so you have to add coins to the chests in such a way that, when Monocarp stops taking chests, he will have exactly $k$ coins. Calculate the minimum number of coins you have to add.\n\n### Input\n\nThe first line contains one integer $t$ ($1 \\le t \\le 1000$) — the number of test cases.\n\nEach test case consists of two lines:\n\n- the first line contains two integers $n$ and $k$ ($1 \\le n \\le 50$; $1 \\le k \\le 10^7$);\n- the second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le k$).\n\n### Output\n\nFor each test case, print one integer — the minimum number of coins you have to add so that, when Monocarp stops taking the chests, he has exactly $k$ coins. It can be shown that under the constraints of the problem, it is always possible.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n5 4\n\n4 1 2 3 2\n\n5 10\n\n4 1 2 3 2\n\n2 10\n\n1 1\n\n3 8\n\n3 3 3\n\n```\n\n#### Output #1\n\n```\n0\n1\n8\n2\n```\n\n### Note\n\nIn the first test case of the example, you don't have to add any coins. When Monocarp arrives, he will take the chest with $4$ coins, so he will have exactly $4$ coins.\n\nIn the second test case of the example, you can add $1$ coin to the $4$-th chest, so, when Monocarp arrives, he will take a chest with $4$ coins, then another chest with $4$ coins, and a chest with $2$ coins.\n\nIn the third test case of the example, you can add $3$ coins to the $1$-st chest and $5$ coins to the $2$-nd chest.\n\nIn the fourth test case of the example, you can add $1$ coin to the $1$-st chest and $1$ coin to the $3$-rd chest.", "cfid": "2042A"}
{"problem_id": "2034C", "problem_title": "C. Trapped in the Witch's Labyrinth", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2034/C", "problem_statement": "In the [fourth labor of Rostam](https://www.gathertales.com/story/the-tale-of-the-haft-khan-seven-labors-of-rostam/sid-604), the legendary hero from the [Shahnameh](https://en.wikipedia.org/wiki/Shahnameh), an old witch has created a magical maze to trap him. The maze is a rectangular grid consisting of $n$ rows and $m$ columns. Each cell in the maze points in a specific direction: up, down, left, or right. The witch has enchanted Rostam so that whenever he is in a cell, he will move to the next cell in the direction indicated by that cell.\n\n![](https://espresso.codeforces.com/fe31b399bb2207f13616c91f5553e04c54d77805.webp)\n\nIf Rostam eventually exits the maze, he will be freed from the witch's enchantment and will defeat her. However, if he remains trapped within the maze forever, he will never escape.\n\nThe witch has not yet determined the directions for all the cells. She wants to assign directions to the unspecified cells in such a way that the number of starting cells from which Rostam will be trapped forever is maximized. Your task is to find the maximum number of starting cells which make Rostam trapped.\n\n### Input\n\nThe first line of the input contains an integer $t$ ($1 \\leq t \\leq 10^4$), the number of test cases.\n\nFor each test case:\n\n- The first line contains two integers $n$ and $m$ ($1 \\leq n, m \\leq 1000$), representing the number of rows and columns in the maze.\n- Each of the next $n$ lines contains a string of $m$ characters representing the directions in the maze. Each character is one of the following:\n  - U (up)\n  - D (down)\n  - L (left)\n  - R (right)\n  - ? (unspecified direction)\n\nIt's guaranteed that the sum of $n \\cdot m$ over all test cases is at most $10^6$.\n\n### Output\n\nFor each test case, print a single integer, the maximum number of starting cells from which Rostam will be trapped forever after assigning directions to the unspecified cells optimally.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3 3\n\nUUU\n\nL?R\n\nDDD\n\n2 3\n\n???\n\n???\n\n3 3\n\n?U?\n\nR?L\n\nRDL\n\n```\n\n#### Output #1\n\n```\n0\n6\n5\n```\n\n### Note\n\nIn the first test case, all of the cells will be good no matter what you do.\n\nIn the second test case, if you assign the ?s like the picture below, all of the cells will be bad:\n\n![](https://espresso.codeforces.com/c667fb00a6b0c8bcc1f533cb121685a1542afcf7.png)\n\nIn the third test case, if you assign the ?s like the picture below, you will have $5$ bad cells (red-shaded cells):\n\n![](https://espresso.codeforces.com/f2e2c3b844c4b7a8643622146bdf82e54c8ec8e3.png)", "cfid": "2034C"}
{"problem_id": "2034B", "problem_title": "B. Rakhsh's Revival", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2034/B", "problem_statement": "[Rostam](https://en.wikipedia.org/wiki/Rostam)'s loyal horse, [Rakhsh](https://en.wikipedia.org/wiki/Rakhsh), has seen better days. Once powerful and fast, Rakhsh has grown weaker over time, struggling to even move. Rostam worries that if too many parts of Rakhsh's body lose strength at once, Rakhsh might stop entirely. To keep his companion going, Rostam decides to strengthen Rakhsh, bit by bit, so no part of his body is too frail for too long.\n\n![](https://espresso.codeforces.com/ace389a4376151924b6a103ba086e314fbadc855.webp)\n\nImagine Rakhsh's body as a line of spots represented by a binary string $s$ of length $n$, where each $0$ means a weak spot and each $1$ means a strong one. Rostam's goal is to make sure that no interval of $m$ consecutive spots is entirely weak (all $0$s).\n\nLuckily, Rostam has a special ability called Timar, inherited from his mother [Rudabeh](https://en.wikipedia.org/wiki/Rudaba) at birth. With Timar, he can select any segment of length $k$ and instantly strengthen all of it (changing every character in that segment to $1$). The challenge is to figure out the minimum number of times Rostam needs to use Timar to keep Rakhsh moving, ensuring there are no consecutive entirely weak spots of length $m$.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10^4$), the number of test cases.\n\nThe first line of each test case contains three numbers $n$, $m$, $k$ ($1 \\le m, k \\le n \\le 2 \\cdot 10^5$). The second line of each test case contains a binary string $s$ of $n$ characters $s_1s_2 \\ldots s_n$. ($s_i \\in \\{$0,1$\\}$ for $1 \\le i \\le n$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the minimum number of times Rostam needs to use Timar to keep Rakhsh moving, ensuring there are no consecutive entirely weak spots of length $m$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n5 1 1\n\n10101\n\n5 2 1\n\n10101\n\n6 3 2\n\n000000\n\n```\n\n#### Output #1\n\n```\n2\n0\n1\n```\n\n### Note\n\nIn the first test case, we should apply an operation on each 0.\n\nIn the second test case, $s$ is already ok.\n\nIn the third test case, we can perform an operation on interval $[3,4]$ to get 001100.", "cfid": "2034B"}
{"problem_id": "2034D", "problem_title": "D. Darius' Wisdom", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2034/D", "problem_statement": "[Darius the Great](https://en.wikipedia.org/wiki/Darius_the_Great) is constructing $n$ stone columns, each consisting of a base and between $0$, $1$, or $2$ inscription pieces stacked on top.\n\nIn each move, Darius can choose two columns $u$ and $v$ such that the difference in the number of inscriptions between these columns is exactly $1$, and transfer one inscription from the column with more inscriptions to the other one. It is guaranteed that at least one column contains exactly $1$ inscription.\n\n![](https://espresso.codeforces.com/d4cdf6815b1220ffe2be57e8bcb7d42bfa773cfc.webp)\n\nSince beauty is the main pillar of historical buildings, Darius wants the columns to have ascending heights. To avoid excessive workers' efforts, he asks you to plan a sequence of at most $n$ moves to arrange the columns in non-decreasing order based on the number of inscriptions. Minimizing the number of moves is not required.\n\n### Input\n\nThe first line contains an integer $t$ — the number of test cases. ($1 \\leq t \\leq 3000$)\n\nThe first line of each test case contains an integer $n$ — the number of stone columns. ($1 \\leq n \\leq 2 \\cdot 10^5$)\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$, where $a_i \\in \\{0,1,2\\}$ represents the initial number of inscriptions in the $i$-th column. It is guaranteed that at least one column has exactly $1$ inscription.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output an integer $k$ — the number of moves used to sort the columns. ($0 \\leq k \\leq n$)\n\nThen, output $k$ lines, each containing two integers $u_i$ and $v_i$ ($1 \\leq u_i, v_i \\leq n$), representing the indices of the columns involved in the $i$-th move. During each move, it must hold that $|a_{u_i} - a_{v_i}| = 1$, and one inscription is transferred from the column with more inscriptions to the other.\n\nIt can be proven that a valid solution always exists under the given constraints.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n4\n\n0 2 0 1\n\n3\n\n1 2 0\n\n6\n\n0 1 1 2 2 2\n\n```\n\n#### Output #1\n\n```\n2\n2 4\n2 3\n2\n3 1\n2 3\n0\n```\n\n### Note\n\nColumns state in the first test case:\n\n- Initial: $0, 2, 0, 1$\n- After the first move: $0, 1, 0, 2$\n- After the second move: $0, 0, 1, 2$\n\nColumns state in the second test case:\n\n- Initial: $1, 2, 0$\n- After the first move: $0, 2, 1$\n- After the second move: $0, 1, 2$\n\nIn the third test case, the column heights are already sorted in ascending order.", "cfid": "2034D"}
{"problem_id": "2034A", "problem_title": "A. King Keykhosrow's Mystery", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2034/A", "problem_statement": "There is a tale about the wise [King Keykhosrow](https://en.wikipedia.org/wiki/Kay_Khosrow) who owned a grand treasury filled with treasures from across the Persian Empire. However, to prevent theft and ensure the safety of his wealth, King Keykhosrow's vault was sealed with a magical lock that could only be opened by solving a riddle.\n\n![](https://espresso.codeforces.com/02ff1013de2c71e8f78fd7d74b43bd365dcc6a3b.webp)\n\nThe riddle involves two sacred numbers $a$ and $b$. To unlock the vault, the challenger must determine the smallest key number $m$ that satisfies two conditions:\n\n- $m$ must be greater than or equal to at least one of $a$ and $b$.\n- The remainder when $m$ is divided by $a$ must be equal to the remainder when $m$ is divided by $b$.\n\nOnly by finding the smallest correct value of $m$ can one unlock the vault and access the legendary treasures!\n\n### Input\n\nThe first line of the input contains an integer $t$ ($1 \\leq t \\leq 100$), the number of test cases.\n\nEach test case consists of a single line containing two integers $a$ and $b$ ($1 \\leq a, b \\leq 1000$).\n\n### Output\n\nFor each test case, print the smallest integer $m$ that satisfies the conditions above.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n4 6\n\n472 896\n\n```\n\n#### Output #1\n\n```\n12\n52864\n```\n\n### Note\n\nIn the first test case, you can see that:\n\n- $4 \\bmod 4 = 0$ but $4 \\bmod 6 = 4$\n- $5 \\bmod 4 = 1$ but $5 \\bmod 6 = 5$\n- $6 \\bmod 4 = 2$ but $6 \\bmod 6 = 0$\n- $7 \\bmod 4 = 3$ but $7 \\bmod 6 = 1$\n- $8 \\bmod 4 = 0$ but $8 \\bmod 6 = 2$\n- $9 \\bmod 4 = 1$ but $9 \\bmod 6 = 3$\n- $10 \\bmod 4 = 2$ but $10 \\bmod 6 = 4$\n- $11 \\bmod 4 = 3$ but $11 \\bmod 6 = 5$\n\nso no integer less than $12$ satisfies the desired properties.", "cfid": "2034A"}
{"problem_id": "2039C2", "problem_title": "C2. Shohag Loves XOR (Hard Version)", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2039/C2", "problem_statement": "This is the hard version of the problem. The differences between the two versions are highlighted in bold. You can only make hacks if both versions of the problem are solved.\n\nShohag has two integers $x$ and $m$. Help him count the number of integers $1 \\le y \\le m$ such that $x \\oplus y$ is divisible$^{\\text{∗}}$ by either $x$, $y$, or both. Here $\\oplus$ is the [bitwise XOR](https://en.wikipedia.org/wiki/Bitwise_operation#XOR) operator.\n\n$^{\\text{∗}}$The number $a$ is divisible by the number $b$ if there exists an integer $c$ such that $a = b \\cdot c$.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first and only line of each test case contains two space-separated integers $x$ and $m$ ($1 \\le x \\le 10^6$, $1 \\le m \\le 10^{18}$).\n\nIt is guaranteed that the sum of $x$ over all test cases does not exceed $10^7$.\n\n### Output\n\nFor each test case, print a single integer — the number of suitable $y$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n7 10\n\n2 3\n\n6 4\n\n1 6\n\n4 1\n\n```\n\n#### Output #1\n\n```\n3\n2\n2\n6\n1\n```\n\n### Note\n\nIn the first test case, for $x = 7$, there are $3$ valid values for $y$ among the integers from $1$ to $m = 10$, and they are $1$, $7$, and $9$.\n\n- $y = 1$ is valid because $x \\oplus y = 7 \\oplus 1 = 6$ and $6$ is divisible by $y = 1$.\n- $y = 7$ is valid because $x \\oplus y = 7 \\oplus 7 = 0$ and $0$ is divisible by both $x = 7$ and $y = 7$.\n- $y = 9$ is valid because $x \\oplus y = 7 \\oplus 9 = 14$ and $14$ is divisible by $x = 7$.", "cfid": "2039C2"}
{"problem_id": "2039B", "problem_title": "B. Shohag Loves Strings", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2039/B", "problem_statement": "For a string $p$, let $f(p)$ be the number of distinct non-empty substrings$^{\\text{∗}}$ of $p$.\n\nShohag has a string $s$. Help him find a non-empty string $p$ such that $p$ is a substring of $s$ and $f(p)$ is even or state that no such string exists.\n\n$^{\\text{∗}}$A string $a$ is a substring of a string $b$ if $a$ can be obtained from $b$ by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first and only line of each test case contains a string $s$ ($1 \\le |s| \\le 10^5$) consisting of lowercase English letters.\n\nIt is guaranteed that the sum of the length of $s$ over all test cases doesn't exceed $3 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print a non-empty string that satisfies the conditions mentioned in the statement, or $-1$ if no such string exists. If there are multiple solutions, output any.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\ndcabaac\n\na\n\nyouknowwho\n\ncodeforces\n\nbangladesh\n\n```\n\n#### Output #1\n\n```\nabaa\n-1\nyouknowwho\neforce\nbang\n```\n\n### Note\n\nIn the first test case, we can set $p = $ abaa because it is a substring of $s$ and the distinct non-empty substrings of $p$ are a, b, aa, ab, ba, aba, baa and abaa, so it has a total of $8$ distinct substrings which is even.\n\nIn the second test case, we can only set $p = $ a but it has one distinct non-empty substring but this number is odd, so not valid.\n\nIn the third test case, the whole string contains $52$ distinct non-empty substrings, so the string itself is a valid solution.", "cfid": "2039B"}
{"problem_id": "2039C1", "problem_title": "C1. Shohag Loves XOR (Easy Version)", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2039/C1", "problem_statement": "This is the easy version of the problem. The differences between the two versions are highlighted in bold. You can only make hacks if both versions of the problem are solved.\n\nShohag has two integers $x$ and $m$. Help him count the number of integers $1 \\le y \\le m$ such that $\\mathbf{x \\neq y}$ and $x \\oplus y$ is a divisor$^{\\text{∗}}$ of either $x$, $y$, or both. Here $\\oplus$ is the [bitwise XOR](https://en.wikipedia.org/wiki/Bitwise_operation#XOR) operator.\n\n$^{\\text{∗}}$The number $b$ is a divisor of the number $a$ if there exists an integer $c$ such that $a = b \\cdot c$.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first and only line of each test case contains two space-separated integers $x$ and $m$ ($1 \\le x \\le 10^6$, $1 \\le m \\le 10^{18}$).\n\nIt is guaranteed that the sum of $x$ over all test cases does not exceed $10^7$.\n\n### Output\n\nFor each test case, print a single integer — the number of suitable $y$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n6 9\n\n5 7\n\n2 3\n\n6 4\n\n4 1\n\n```\n\n#### Output #1\n\n```\n3\n2\n1\n1\n0\n```\n\n### Note\n\nIn the first test case, for $x = 6$, there are $3$ valid values for $y$ among the integers from $1$ to $m = 9$, and they are $4$, $5$, and $7$.\n\n- $y = 4$ is valid because $x \\oplus y = 6 \\oplus 4 = 2$ and $2$ is a divisor of both $x = 6$ and $y = 4$.\n- $y = 5$ is valid because $x \\oplus y = 6 \\oplus 5 = 3$ and $3$ is a divisor of $x = 6$.\n- $y = 7$ is valid because $x \\oplus y = 6 \\oplus 7 = 1$ and $1$ is a divisor of both $x = 6$ and $y = 7$.\n\nIn the second test case, for $x = 5$, there are $2$ valid values for $y$ among the integers from $1$ to $m = 7$, and they are $4$ and $6$.\n\n- $y = 4$ is valid because $x \\oplus y = 5 \\oplus 4 = 1$ and $1$ is a divisor of both $x = 5$ and $y = 4$.\n- $y = 6$ is valid because $x \\oplus y = 5 \\oplus 6 = 3$ and $3$ is a divisor of $y = 6$.", "cfid": "2039C1"}
{"problem_id": "2039D", "problem_title": "D. Shohag Loves GCD", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2039/D", "problem_statement": "Shohag has an integer $n$ and a set $S$ of $m$ unique integers. Help him find the lexicographically largest$^{\\\\text{∗}}$ integer array $a\\_1, a\\_2, \\\\ldots, a\\_n$ such that $a\\_i \\\\in S$ for each $1 \\\\le i \\\\le n$ and $a\\_{\\\\operatorname{gcd}(i, j)} \\\\neq \\\\operatorname{gcd}(a\\_i, a\\_j)$$^{\\\\text{†}}$ is satisfied over all pairs $1 \\\\le i \\\\lt j \\\\le n$, or state that no such array exists.\n\n$^{\\text{∗}}$An array $a$ is lexicographically larger than an array $b$ of the same length if $a \\ne b$, and in the first position where $a$ and $b$ differ, the array $a$ has a larger element than the corresponding element in $b$.\n\n$^{\\\\text{†}}$$\\\\gcd(x, y)$ denotes the [greatest common divisor (GCD)](https://en.wikipedia.org/wiki/Greatest_common_divisor) of integers $x$ and $y$.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\le m \\le n \\le 10^5$).\n\nThe second line contains $m$ unique integers in increasing order, representing the elements of the set $S$ ($1 \\le x \\le n$ for each $x \\in S$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $3 \\cdot 10^5$.\n\n### Output\n\nFor each test case, if there is no solution print $-1$, otherwise print $n$ integers — the lexicographically largest integer array that satisfies the conditions.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n6 3\n\n3 4 6\n\n1 1\n\n1\n\n2 1\n\n2\n\n```\n\n#### Output #1\n\n```\n6 4 4 3 4 3\n1\n-1\n```\n\n### Note\n\nIn the first test case, every element in the array belongs to the given set $S = \\{3, 4, 6\\}$, and all pairs of indices of the array satisfy the necessary conditions. In particular, for pair $(2, 3)$, $a_{\\operatorname{gcd}(2, 3)} = a_1 = 6$ and $\\operatorname{gcd}(a_2, a_3) = \\operatorname{gcd}(4, 4) = 4$, so they are not equal. There are other arrays that satisfy the conditions as well but this one is the lexicographically largest among them.\n\nIn the third test case, there is no solution possible because we are only allowed to use $a = [2, 2]$ but for this array, for pair $(1, 2)$, $a_{\\operatorname{gcd}(1, 2)} = a_1 = 2$ and $\\operatorname{gcd}(a_1, a_2) = \\operatorname{gcd}(2, 2) = 2$, so they are equal which is not allowed!", "cfid": "2039D"}
{"problem_id": "2039A", "problem_title": "A. Shohag Loves Mod", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2039/A", "problem_statement": "Shohag has an integer $n$. Please help him find an increasing integer sequence $1 \\le a_1 \\lt a_2 \\lt \\ldots \\lt a_n \\le 100$ such that $a_i \\bmod i \\neq a_j \\bmod j$ $^{\\text{∗}}$ is satisfied over all pairs $1 \\le i \\lt j \\le n$.\n\nIt can be shown that such a sequence always exists under the given constraints.\n\n$^{\\\\text{∗}}$$a \\\\bmod b$ denotes the remainder of $a$ after division by $b$. For example, $7 \\\\bmod 3 = 1, 8 \\\\bmod 4 = 0$ and $69 \\\\bmod 10 = 9$.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 50$) — the number of test cases.\n\nThe first and only line of each test case contains an integer $n$ ($2 \\le n \\le 50$).\n\n### Output\n\nFor each test case, print $n$ integers — the integer sequence that satisfies the conditions mentioned in the statement. If there are multiple such sequences, output any.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n3\n\n6\n\n```\n\n#### Output #1\n\n```\n2 7 8\n2 3 32 35 69 95\n```\n\n### Note\n\nIn the first test case, the sequence is increasing, values are from $1$ to $100$ and each pair of indices satisfies the condition mentioned in the statement:\n\n- For pair $(1, 2)$, $a_1 \\bmod 1 = 2 \\bmod 1 = 0$, and $a_2 \\bmod 2 = 7 \\bmod 2 = 1$. So they are different.\n- For pair $(1, 3)$, $a_1 \\bmod 1 = 2 \\bmod 1 = 0$, and $a_3 \\bmod 3 = 8 \\bmod 3 = 2$. So they are different.\n- For pair $(2, 3)$, $a_2 \\bmod 2 = 7 \\bmod 2 = 1$, and $a_3 \\bmod 3 = 8 \\bmod 3 = 2$. So they are different.\n\nNote that you do not necessarily have to print the exact same sequence, you can print any other sequence as long as it satisfies the necessary conditions.", "cfid": "2039A"}
{"problem_id": "2037C", "problem_title": "C. Superultra's Favorite Permutation", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2037/C", "problem_statement": "Superultra, a little red panda, desperately wants primogems. In his dreams, a voice tells him that he must solve the following task to obtain a lifetime supply of primogems. Help Superultra!\n\nConstruct a permutation$^{\\text{∗}}$ $p$ of length $n$ such that $p_i + p_{i+1}$ is composite$^{\\text{†}}$ over all $1 \\leq i \\leq n - 1$. If it's not possible, output $-1$.\n\n$^{\\text{∗}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n$^{\\text{†}}$An integer $x$ is composite if it has at least one other divisor besides $1$ and $x$. For example, $4$ is composite because $2$ is a divisor.\n\n### Input\n\nThe first line contains $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nEach test case contains an integer $n$ ($2 \\leq n \\leq 2 \\cdot 10^5$) — the length of the permutation.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, if it's not possible to construct $p$, output $-1$ on a new line. Otherwise, output $n$ integers $p_1, p_2, \\ldots, p_n$ on a new line.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n3\n\n8\n\n```\n\n#### Output #1\n\n```\n-1\n1 8 7 3 6 2 4 5```\n\n### Note\n\nIn the first example, it can be shown that all permutation of size $3$ contain two adjacent elements whose sum is prime. For example, in the permutation $[2,3,1]$ the sum $2+3=5$ is prime.\n\nIn the second example, we can verify that the sample output is correct because $1+8$, $8+7$, $7+3$, $3+6$, $6+2$, $2+4$, and $4+5$ are all composite. There may be other constructions that are correct.", "cfid": "2037C"}
{"problem_id": "2037B", "problem_title": "B. Intercepted Inputs", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2037/B", "problem_statement": "To help you prepare for your upcoming Codeforces contest, Citlali set a grid problem and is trying to give you a $n$ by $m$ grid through your input stream. Specifically, your input stream should contain the following:\n\n- The first line contains two integers $n$ and $m$ — the dimensions of the grid.\n- The following $n$ lines contain $m$ integers each — the values of the grid.\n\nHowever, someone has intercepted your input stream, shuffled all given integers, and put them all on one line! Now, there are $k$ integers all on one line, and you don't know where each integer originally belongs. Instead of asking Citlali to resend the input, you decide to determine the values of $n$ and $m$ yourself.\n\nOutput any possible value of $n$ and $m$ that Citlali could have provided.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe first line of each test case contains an integer $k$ ($3 \\leq k \\leq 2 \\cdot 10^5$) — the total number of inputs in your input stream.\n\nThe following line of each test case contains $k$ integers $a_1, a_2, \\ldots, a_k$ ($1 \\leq a_i \\leq k$) — the shuffled inputs of your input stream. It is guaranteed that $n$ and $m$ are contained within the $k$ integers.\n\nIt is guaranteed that the sum of $k$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output two integers, one possible value of $n$ and $m$. If multiple possible answers exist, output any.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3\n\n1 1 2\n\n11\n\n3 3 4 5 6 7 8 9 9 10 11\n\n8\n\n8 4 8 3 8 2 8 1\n\n6\n\n2 1 4 5 3 3\n\n8\n\n1 2 6 3 8 5 5 3\n\n```\n\n#### Output #1\n\n```\n1 1\n3 3\n2 3\n4 1\n1 6```\n\n### Note\n\nIn the first test case, the initial input could have been the following:\n\n1 1\n\n2\n\nIn the second test case, the initial input could have been the following:\n\n3 3\n\n4 5 6\n\n7 8 9\n\n9 10 11", "cfid": "2037B"}
{"problem_id": "2037A", "problem_title": "A. Twice", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2037/A", "problem_statement": "Kinich wakes up to the start of a new day. He turns on his phone, checks his mailbox, and finds a mysterious present. He decides to unbox the present.\n\nKinich unboxes an array $a$ with $n$ integers. Initially, Kinich's score is $0$. He will perform the following operation any number of times:\n\n- Select two indices $i$ and $j$ $(1 \\leq i < j \\leq n)$ such that neither $i$ nor $j$ has been chosen in any previous operation and $a_i = a_j$. Then, add $1$ to his score.\n\nOutput the maximum score Kinich can achieve after performing the aforementioned operation any number of times.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 500$) — the number of test cases.\n\nThe first line of each test case contains an integer $n$ ($1 \\leq n \\leq 20$) — the length of $a$.\n\nThe following line of each test case contains $n$ space-separated integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq n$).\n\n### Output\n\nFor each test case, output the maximum score achievable on a new line.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n1\n\n1\n\n2\n\n2 2\n\n2\n\n1 2\n\n4\n\n1 2 3 1\n\n6\n\n1 2 3 1 2 3\n\n```\n\n#### Output #1\n\n```\n0\n1\n0\n1\n3\n```\n\n### Note\n\nIn the first and third testcases, Kinich cannot perform any operations.\n\nIn the second testcase, Kinich can perform one operation with $i=1$ and $j=2$.\n\nIn the fourth testcase, Kinich can perform one operation with $i=1$ and $j=4$.", "cfid": "2037A"}
{"problem_id": "2037D", "problem_title": "D. Sharky Surfing", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2037/D", "problem_statement": "Mualani loves surfing on her sharky surfboard!\n\nMualani's surf path can be modeled by a number line. She starts at position $1$, and the path ends at position $L$. When she is at position $x$ with a jump power of $k$, she can jump to any integer position in the interval $[x, x+k]$. Initially, her jump power is $1$.\n\nHowever, her surf path isn't completely smooth. There are $n$ hurdles on her path. Each hurdle is represented by an interval $[l, r]$, meaning she cannot jump to any position in the interval $[l, r]$.\n\nThere are also $m$ power-ups at certain positions on the path. Power-up $i$ is located at position $x_i$ and has a value of $v_i$. When Mualani is at position $x_i$, she has the option to collect the power-up to increase her jump power by $v_i$. There may be multiple power-ups at the same position. When she is at a position with some power-ups, she may choose to take or ignore each individual power-up. No power-up is in the interval of any hurdle.\n\nWhat is the minimum number of power-ups she must collect to reach position $L$ to finish the path? If it is not possible to finish the surf path, output $-1$.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe first line of each test case contains three integers $n$, $m$, and $L$ ($1 \\leq n, m \\leq 2 \\cdot 10^5, 3 \\leq L \\leq 10^9$) — the number of hurdles, the number of power-ups, and the position of the end.\n\nThe following $n$ lines contain two integers $l_i$ and $r_i$ ($2 \\leq l_i \\leq r_i \\leq L-1$) — the bounds of the interval for the $i$'th hurdle. It is guaranteed that $r_i + 1 < l_{i+1}$ for all $1 \\leq i < n$ (i.e. all hurdles are non-overlapping, sorted by increasing positions, and the end point of a previous hurdle is not consecutive with the start point of the next hurdle).\n\nThe following $m$ lines contain two integers $x_i$ and $v_i$ ($1 \\leq x_i, v_i \\leq L$) — the position and the value for the $i$'th power-up. There may be multiple power-ups with the same $x$. It is guaranteed that $x_i \\leq x_{i+1}$ for all $1 \\leq i < m$ (i.e. the power-ups are sorted by non-decreasing position) and no power-up is in the interval of any hurdle.\n\nIt is guaranteed the sum of $n$ and the sum of $m$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the minimum number of power-ups she must collect to reach position $L$. If it is not possible, output $-1$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2 5 50\n\n7 14\n\n30 40\n\n2 2\n\n3 1\n\n3 5\n\n18 2\n\n22 32\n\n4 3 50\n\n4 6\n\n15 18\n\n20 26\n\n34 38\n\n1 2\n\n8 2\n\n10 2\n\n1 4 17\n\n10 14\n\n1 6\n\n1 2\n\n1 2\n\n16 9\n\n1 2 10\n\n5 9\n\n2 3\n\n2 2\n\n```\n\n#### Output #1\n\n```\n4\n-1\n1\n2\n```\n\n### Note\n\nIn the first test case, she can collect power-ups $1$, $2$, $3$, and $5$ to clear all hurdles.\n\nIn the second test case, she cannot jump over the first hurdle.\n\nIn the fourth test case, by collecting both power-ups, she can jump over the hurdle.", "cfid": "2037D"}
{"problem_id": "2037E", "problem_title": "E. Kachina's Favorite Binary String", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2037/E", "problem_statement": "This is an interactive problem.\n\nKachina challenges you to guess her favorite binary string$^{\\text{∗}}$ $s$ of length $n$. She defines $f(l, r)$ as the number of subsequences$^{\\text{†}}$ of $\\texttt{01}$ in $s_l s_{l+1} \\ldots s_r$. Two subsequences are considered different if they are formed by deleting characters from different positions in the original string, even if the resulting subsequences consist of the same characters.\n\nTo determine $s$, you can ask her some questions. In each question, you can choose two indices $l$ and $r$ ($1 \\leq l < r \\leq n$) and ask her for the value of $f(l, r)$.\n\nDetermine and output $s$ after asking Kachina no more than $n$ questions. However, it may be the case that $s$ is impossible to be determined. In this case, you would need to report $\\texttt{IMPOSSIBLE}$ instead.\n\nFormally, $s$ is impossible to be determined if after asking $n$ questions, there are always multiple possible strings for $s$, regardless of what questions are asked. Note that if you report $\\texttt{IMPOSSIBLE}$ when there exists a sequence of at most $n$ queries that will uniquely determine the binary string, you will get the Wrong Answer verdict.\n\n$^{\\text{∗}}$A binary string only contains characters $\\texttt{0}$ and $\\texttt{1}$.\n\n$^{\\text{†}}$A sequence $a$ is a subsequence of a sequence $b$ if $a$ can be obtained from $b$ by the deletion of several (possibly, zero or all) elements. For example, subsequences of $\\mathtt{1011101}$ are $\\mathtt{0}$, $\\mathtt{1}$, $\\mathtt{11111}$, $\\mathtt{0111}$, but not $\\mathtt{000}$ nor $\\mathtt{11100}$.\n\n### Input\n\nThe first line of input contains a single integer $t$ ($1 \\leq t \\leq 10^3$) — the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($2 \\leq n \\leq 10^4$) — the length of $s$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^4$.\n\n### Interaction\n\nTo ask a question, output a line in the following format (do not include quotes)\n\n- \"$\\texttt{? l r}$\" ($1 \\leq l < r \\leq n$)\n\nThe jury will return an integer $f(l, r)$.\n\nWhen you are ready to print the answer, output a single line in the following format\n\n- If $s$ is impossible to be determined, output \"$\\texttt{! IMPOSSIBLE}$\"\n- Otherwise, output \"$\\texttt{! s}$\"\n\nAfter that, proceed to process the next test case or terminate the program if it was the last test case. Printing the answer does not count as a query.\n\nThe interactor is not adaptive, meaning that the answer is known before the participant asks the queries and doesn't depend on the queries asked by the participant.\n\nIf your program makes more than $n$ queries for one test case, your program should immediately terminate to receive the verdict Wrong Answer. Otherwise, you can get an arbitrary verdict because your solution will continue to read from a closed stream.\n\nAfter printing a query do not forget to output the end of line and flush the output. Otherwise, you may get Idleness limit exceeded verdict. To do this, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- flush(output) in Pascal;\n- stdout.flush() in Python;\n- see the documentation for other languages.\n\nHacks\n\nTo make a hack, use the following format.\n\nThe first line should contain a single integer $t$ ($1 \\leq t \\leq 10^3$) – the number of test cases.\n\nThe first line of each test case should contain an integer $n$ ($2 \\leq n \\leq 10^4$) — the length of $s$.\n\nThe following line should contain $s$, a binary string of length $n$.\n\nThe sum of $n$ over all test cases should not exceed $10^4$.\n\n### Example\n\n#### Input #1\n\n```\n2\n5\n\n4\n\n0\n\n1\n\n2\n\n2\n\n0```\n\n#### Output #1\n\n```\n? 1 5\n\n? 2 4\n\n? 4 5\n\n? 3 5\n\n! 01001\n\n? 1 2\n\n! IMPOSSIBLE```\n\n### Note\n\nIn the first test case:\n\nIn the first query, you ask Kachina for the value of $f(1, 5)$, and she responds with $4$ in the input stream.\n\nIn the second query, you ask Kachina for the value of $f(2, 4)$. Because there are no subsequences of $\\texttt{01}$ in the string $\\texttt{100}$, she responds with $0$ in the input stream.\n\nAfter asking $4$ questions, you report $\\texttt{01001}$ as $s$, and it is correct.\n\nIn the second test case:\n\nIn the first query, you ask Kachina for the value of $f(1, 2)$, and she responds with $0$ in the input stream. Notice that this is the only distinct question you can ask.\n\nHowever, notice that the strings $00$ and $11$ both have an answer of $0$, and it is impossible to differentiate between the two. Therefore, we report IMPOSSIBLE.\n\nPlease note that this example only serves to demonstrate the interaction format. It is not guaranteed the queries provided are optimal or uniquely determine the answer. However, it can be shown there exists a sequence of at most $5$ queries that does uniquely determine sample test case $1$.", "cfid": "2037E"}
{"problem_id": "2031D", "problem_title": "D. Penchick and Desert Rabbit", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2031/D", "problem_statement": "Dedicated to pushing himself to his limits, Penchick challenged himself to survive the midday sun in the Arabian Desert!\n\nWhile trekking along a linear oasis, Penchick spots a desert rabbit preparing to jump along a line of palm trees. There are $n$ trees, each with a height denoted by $a_i$.\n\nThe rabbit can jump from the $i$-th tree to the $j$-th tree if exactly one of the following conditions is true:\n\n- $j < i$ and $a_j > a_i$: the rabbit can jump backward to a taller tree.\n- $j > i$ and $a_j < a_i$: the rabbit can jump forward to a shorter tree.\n\nFor each $i$ from $1$ to $n$, determine the maximum height among all trees that the rabbit can reach if it starts from the $i$-th tree.\n\n### Input\n\nThe first line contains the number of test cases $t$ ($1 \\le t \\le 5 \\cdot 10^5$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\leq n \\leq 5 \\cdot 10^5$) — the number of trees.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le n$) — the height of the trees.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output $n$ integers. The $i$-th integer should contain the maximum height among all trees that the rabbit can reach if it starts from the $i$-th tree.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n4\n\n2 3 1 4\n\n5\n\n5 4 3 2 1\n\n4\n\n2 1 1 3\n\n4\n\n1 1 3 1\n\n8\n\n2 4 1 6 3 8 5 7\n\n```\n\n#### Output #1\n\n```\n3 3 3 4\n5 5 5 5 5\n2 2 2 3\n1 1 3 3\n8 8 8 8 8 8 8 8\n```\n\n### Note\n\nIn the first test case, the initial heights of trees are $a = [2, 3, 1, 4]$.\n\n- If the rabbit starts from the first tree, it can jump to the third tree as $3 > 1$ and $1 < 2$. Then, the rabbit can jump to the second tree as $2 < 3$ and $3 > 1$. It can be proved that the rabbit cannot reach the fourth tree; hence, the maximum height of the tree that the rabbit can reach is $a_2 = 3$.\n- If the rabbit starts from the fourth tree, it does not need to jump anywhere as it is already at the highest tree.\n\nIn the second test case, the rabbit can jump to the first tree regardless of which tree it starts from.\n\nIn the fifth test case, if the rabbit starts from the fifth tree, it can jump to the fourth tree. Then the rabbit can jump to the seventh tree and finally reach the sixth tree. Therefore, the maximum height of the tree that the rabbit can reach is $8$.", "cfid": "2031D"}
{"problem_id": "2031C", "problem_title": "C. Penchick and BBQ Buns", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2031/C", "problem_statement": "Penchick loves two things: square numbers and Hong Kong-style BBQ buns! For his birthday, Kohane wants to combine them with a gift: $n$ BBQ buns arranged from left to right. There are $10^6$ available fillings of BBQ buns, numbered from $1$ to $10^6$. To ensure that Penchick would love this gift, Kohane has a few goals:\n\n- No filling is used exactly once; that is, each filling must either not appear at all or appear at least twice.\n- For any two buns $i$ and $j$ that have the same filling, the distance between them, which is $|i-j|$, must be a perfect square$^{\\text{∗}}$.\n\nHelp Kohane find a valid way to choose the filling of the buns, or determine if it is impossible to satisfy her goals! If there are multiple solutions, print any of them.\n\n$^{\\text{∗}}$A positive integer $x$ is a perfect square if there exists a positive integer $y$ such that $x = y^2$. For example, $49$ and $1$ are perfect squares because $49 = 7^2$ and $1 = 1^2$ respectively. On the other hand, $5$ is not a perfect square as no integer squared equals $5$\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 2\\cdot 10^5$). The description of the test cases follows.\n\nThe only line of each test case contains a single integer $n$ ($1\\le n\\le 2\\cdot 10^5$) — the number of BBQ buns.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, if no valid choice of fillings exists, output $-1$. Otherwise, output $n$ integers, where the $i$-th integer represents the filling of the $i$-th BBQ bun. If there are multiple solutions, print any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n3\n\n12\n\n```\n\n#### Output #1\n\n```\n-1\n1 2 3 6 10 2 7 6 10 1 7 3\n```\n\n### Note\n\nIn the first test case, the choice of fillings \"1 1 1\" is not allowed because buns $1$ and $3$ have the same filling, but are distance $2$ apart, which is not a perfect square. The choice of fillings \"1 1 2\" is also not allowed as filling $2$ is only used once.\n\nIn the second test case, the solution is valid because no filling is used exactly once, and any two buns with the same filling are spaced at a distance equal to a perfect square. For example, buns $1$ and $10$ both have filling $1$ and are spaced at a distance of $9=3^2$. Similarly, buns $5$ and $9$ both have filling $10$ and are spaced at a distance of $4=2^2$.", "cfid": "2031C"}
{"problem_id": "2031A", "problem_title": "A. Penchick and Modern Monument", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2031/A", "problem_statement": "Amidst skyscrapers in the bustling metropolis of Metro Manila, the newest Noiph mall in the Philippines has just been completed! The construction manager, Penchick, ordered a state-of-the-art monument to be built with $n$ pillars.\n\nThe heights of the monument's pillars can be represented as an array $h$ of $n$ positive integers, where $h_i$ represents the height of the $i$-th pillar for all $i$ between $1$ and $n$.\n\nPenchick wants the heights of the pillars to be in non-decreasing order, i.e. $h_i \\le h_{i + 1}$ for all $i$ between $1$ and $n - 1$. However, due to confusion, the monument was built such that the heights of the pillars are in non-increasing order instead, i.e. $h_i \\ge h_{i + 1}$ for all $i$ between $1$ and $n - 1$.\n\nLuckily, Penchick can modify the monument and do the following operation on the pillars as many times as necessary:\n\n- Modify the height of a pillar to any positive integer. Formally, choose an index $1\\le i\\le n$ and a positive integer $x$. Then, assign $h_i := x$.\n\nHelp Penchick determine the minimum number of operations needed to make the heights of the monument's pillars non-decreasing.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\leq n \\leq 50$) — the number of pillars.\n\nThe second line of each test case contains $n$ integers $h_1, h_2, \\ldots, h_n$ ($1 \\le h_i \\le n$ and $h_i\\ge h_{i+1}$) — the height of the pillars.\n\nPlease take note that the given array $h$ is non-increasing.\n\nNote that there are no constraints on the sum of $n$ over all test cases.\n\n### Output\n\nFor each test case, output a single integer representing the minimum number of operations needed to make the heights of the pillars non-decreasing.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n5\n\n5 4 3 2 1\n\n3\n\n2 2 1\n\n1\n\n1\n\n```\n\n#### Output #1\n\n```\n4\n1\n0\n```\n\n### Note\n\nIn the first test case, the initial heights of pillars are $h = [5, 4, 3, 2, 1]$.\n\n- In the first operation, Penchick changes the height of pillar $1$ to $h_1 := 2$.\n- In the second operation, he changes the height of pillar $2$ to $h_2 := 2$.\n- In the third operation, he changes the height of pillar $4$ to $h_4 := 4$.\n- In the fourth operation, he changes the height of pillar $5$ to $h_5 := 4$.\n\nAfter the operation, the heights of the pillars are $h = [2, 2, 3, 4, 4]$, which is non-decreasing. It can be proven that it is not possible for Penchick to make the heights of the pillars non-decreasing in fewer than $4$ operations.\n\nIn the second test case, Penchick can make the heights of the pillars non-decreasing by modifying the height of pillar $3$ to $h_3 := 2$.\n\nIn the third test case, the heights of pillars are already non-decreasing, so no operations are required.", "cfid": "2031A"}
{"problem_id": "2031B", "problem_title": "B. Penchick and Satay Sticks", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2031/B", "problem_statement": "Penchick and his friend Kohane are touring Indonesia, and their next stop is in Surabaya!\n\nIn the bustling food stalls of Surabaya, Kohane bought $n$ satay sticks and arranged them in a line, with the $i$-th satay stick having length $p_i$. It is given that $p$ is a permutation$^{\\text{∗}}$ of length $n$.\n\nPenchick wants to sort the satay sticks in increasing order of length, so that $p_i=i$ for each $1\\le i\\le n$. For fun, they created a rule: they can only swap neighboring satay sticks whose lengths differ by exactly $1$. Formally, they can perform the following operation any number of times (including zero):\n\n- Select an index $i$ ($1\\le i\\le n-1$) such that $|p_{i+1}-p_i|=1$;\n- Swap $p_i$ and $p_{i+1}$.\n\nDetermine whether it is possible to sort the permutation $p$, thus the satay sticks, by performing the above operation.\n\n$^{\\text{∗}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 2\\cdot 10^5$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 2\\cdot 10^5$) — the number of satay sticks.\n\nThe second line of each test case contains $n$ integers $p_1, p_2, \\ldots, p_n$ ($1 \\le p_i \\le n$) — the permutation $p$ representing the length of the satay sticks.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, output \"YES\" if it is possible to sort permutation $p$ by performing the operation. Otherwise, output \"NO\".\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n4\n\n2 1 3 4\n\n4\n\n4 2 3 1\n\n```\n\n#### Output #1\n\n```\nYES\nNO\n```\n\n### Note\n\nIn the first test case, we can sort permutation $p = [2, 1, 3, 4]$ by performing an operation on index $1$ ($|p_2 - p_1| = |1 - 2| = 1$), resulting in $p = [1, 2, 3, 4]$.\n\nIn the second test case, it can be proven that it is impossible to sort permutation $p = [4, 2, 3, 1]$ by performing the operation. Here is an example of a sequence of operations that can be performed on the permutation:\n\n- Select $i = 2$ ($|p_3 - p_2| = |3 - 2| = 1$). This results in $p = [4, 3, 2, 1]$.\n- Select $i = 1$ ($|p_2 - p_1| = |3 - 4| = 1$). This results in $p = [3, 4, 2, 1]$.\n- Select $i = 3$ ($|p_4 - p_3| = |1 - 2| = 1$). This results in $p = [3, 4, 1, 2]$.\n\nUnfortunately, permutation $p$ remains unsorted after performing the operations.", "cfid": "2031B"}
{"problem_id": "2028C", "problem_title": "C. Alice's Adventures in Cutting Cake", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2028/C", "problem_statement": "Alice is at the Mad Hatter's tea party! There is a long sheet cake made up of $n$ sections with tastiness values $a_1, a_2, \\ldots, a_n$. There are $m$ creatures at the tea party, excluding Alice.\n\nAlice will cut the cake into $m + 1$ pieces. Formally, she will partition the cake into $m + 1$ subarrays, where each subarray consists of some number of adjacent sections. The tastiness of a piece is the sum of tastiness of its sections. Afterwards, she will divvy these $m + 1$ pieces up among the $m$ creatures and herself (her piece can be empty). However, each of the $m$ creatures will only be happy when the tastiness of its piece is $v$ or more.\n\nAlice wants to make sure every creature is happy. Limited by this condition, she also wants to maximize the tastiness of her own piece. Can you help Alice find the maximum tastiness her piece can have? If there is no way to make sure every creature is happy, output $-1$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n, m, v$ ($1\\le m\\le n\\le 2\\cdot 10^5$; $1\\le v\\le 10^9$) — the number of sections, the number of creatures, and the creatures' minimum requirement for tastiness, respectively.\n\nThe next line contains $n$ space separated integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$) — the tastinesses of the sections.\n\nThe sum of $n$ over all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, output the maximum tastiness Alice can achieve for her piece, or $-1$ if there is no way to make sure every creature is happy.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n6 2 1\n\n1 1 10 1 1 10\n\n6 2 2\n\n1 1 10 1 1 10\n\n6 2 3\n\n1 1 10 1 1 10\n\n6 2 10\n\n1 1 10 1 1 10\n\n6 2 11\n\n1 1 10 1 1 10\n\n6 2 12\n\n1 1 10 1 1 10\n\n6 2 12\n\n1 1 1 1 10 10\n\n```\n\n#### Output #1\n\n```\n22\n12\n2\n2\n2\n0\n-1\n```\n\n### Note\n\nFor the first test case, Alice can give the first and second section as their own pieces, and then take the remaining $10 + 1 + 1 + 10 = 22$ tastiness for herself. We can show that she cannot do any better.\n\nFor the second test case, Alice could give the first and second section as one piece, and the sixth section as one piece. She can then take the remaining $10 + 1 + 1 = 12$ tastiness for herself. We can show that she cannot do any better.\n\nFor the seventh test case, Alice cannot give each creature a piece of at least $12$ tastiness.", "cfid": "2028C"}
{"problem_id": "2028B", "problem_title": "B. Alice's Adventures in Permuting", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2028/B", "problem_statement": "Alice mixed up the words transmutation and permutation! She has an array $a$ specified via three integers $n$, $b$, $c$: the array $a$ has length $n$ and is given via $a_i = b\\cdot (i - 1) + c$ for $1\\le i\\le n$. For example, if $n=3$, $b=2$, and $c=1$, then $a=[2 \\cdot 0 + 1, 2 \\cdot 1 + 1, 2 \\cdot 2 + 1] = [1, 3, 5]$.\n\nNow, Alice really enjoys permutations of $\\[0, \\\\ldots, n-1\\]\n\n$$^{\\text{∗}}$ and would like to transform $a$ into a permutation. In one operation, Alice replaces the maximum element of $a$ with the $\\operatorname{MEX}$$\n\ntext{†}}$ of $a$. If there are multiple maximum elements in $a$, Alice chooses the leftmost one to replace.\n\nCan you help Alice figure out how many operations she has to do for $a$ to become a permutation for the first time? If it is impossible, you should report it.\n\n$^{\\text{∗}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $0$ to $n-1$ in arbitrary order. Please note, this is slightly different from the usual definition of a permutation. For example, $[1,2,0,4,3]$ is a permutation, but $[0,1,1]$ is not a permutation ($1$ appears twice in the array), and $[0,2,3]$ is also not a permutation ($n=3$ but there is $3$ in the array).\n\n$^{\\text{†}}$The $\\operatorname{MEX}$ of an array is the smallest non-negative integer that does not belong to the array. For example, the $\\operatorname{MEX}$ of $[0, 3, 1, 3]$ is $2$ and the $\\operatorname{MEX}$ of $[5]$ is $0$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^5$). The description of the test cases follows.\n\nThe only line of each test case contains three integers $n$, $b$, $c$ ($1\\le n\\le 10^{18}$; $0\\le b$, $c\\le 10^{18}$) — the parameters of the array.\n\n### Output\n\nFor each test case, if the array can never become a permutation, output $-1$. Otherwise, output the minimum number of operations for the array to become a permutation.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n10 1 0\n\n1 2 3\n\n100 2 1\n\n3 0 1\n\n3 0 0\n\n1000000000000000000 0 0\n\n1000000000000000000 1000000000000000000 1000000000000000000\n\n```\n\n#### Output #1\n\n```\n0\n1\n50\n2\n-1\n-1\n1000000000000000000\n```\n\n### Note\n\nIn the first test case, the array is already $[0, 1, \\ldots, 9]$, so no operations are required.\n\nIn the third test case, the starting array is $[1, 3, 5, \\ldots, 199]$. After the first operation, the $199$ gets transformed into a $0$. In the second operation, the $197$ gets transformed into a $2$. If we continue this, it will take exactly $50$ operations to get the array $[0, 1, 2, 3, \\ldots, 99]$.\n\nIn the fourth test case, two operations are needed: $[1,1,1] \\to [0,1,1] \\to [0,2,1]$.\n\nIn the fifth test case, the process is $[0,0,0] \\to [1,0,0] \\to [2,0,0] \\to [1,0,0] \\to [2,0,0]$. This process repeats forever, so the array is never a permutation and the answer is $-1$.", "cfid": "2028B"}
{"problem_id": "2028A", "problem_title": "A. Alice's Adventures in \"Chess\"", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2028/A", "problem_statement": "Alice is trying to meet up with the Red Queen in the countryside! Right now, Alice is at position $(0, 0)$, and the Red Queen is at position $(a, b)$. Alice can only move in the four cardinal directions (north, east, south, west).\n\nMore formally, if Alice is at the point $(x, y)$, she will do one of the following:\n\n- go north (represented by N), moving to $(x, y+1)$;\n- go east (represented by E), moving to $(x+1, y)$;\n- go south (represented by S), moving to $(x, y-1)$; or\n- go west (represented by W), moving to $(x-1, y)$.\n\nAlice's movements are predetermined. She has a string $s$ representing a sequence of moves that she performs from left to right. Once she reaches the end of the sequence, she repeats the same pattern of moves forever.\n\nCan you help Alice figure out if she will ever meet the Red Queen?\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 500$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n$, $a$, $b$ ($1 \\le n$, $a$, $b \\le 10$) — the length of the string and the initial coordinates of the Red Queen.\n\nThe second line contains a string $s$ of length $n$ consisting only of the characters N, E, S, or W.\n\n### Output\n\nFor each test case, output a single string \"YES\" or \"NO\" (without the quotes) denoting whether Alice will eventually meet the Red Queen.\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n2 2 2\n\nNE\n\n3 2 2\n\nNNE\n\n6 2 1\n\nNNEESW\n\n6 10 10\n\nNNEESW\n\n3 4 2\n\nNEE\n\n4 5 5\n\nNEWS\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nYES\nYES\nYES\nNO\n```\n\n### Note\n\nIn the first test case, Alice follows the path $(0,0) \\xrightarrow[\\texttt{N}]{} (0,1) \\xrightarrow[\\texttt{E}]{} (1,1) \\xrightarrow[\\texttt{N}]{} (1,2) \\xrightarrow[\\texttt{E}]{} (2,2)$.\n\nIn the second test case, Alice can never reach the Red Queen.", "cfid": "2028A"}
{"problem_id": "2029C", "problem_title": "C. New Rating", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2029/C", "problem_statement": "Hello, Codeforces Forcescode!\n\nKevin used to be a participant of Codeforces. Recently, the KDOI Team has developed a new Online Judge called Forcescode.\n\nKevin has participated in $n$ contests on Forcescode. In the $i$-th contest, his performance rating is $a_i$.\n\nNow he has hacked into the backend of Forcescode and will select an interval $[l,r]$ ($1\\le l\\le r\\le n$), then skip all of the contests in this interval. After that, his rating will be recalculated in the following way:\n\n- Initially, his rating is $x=0$;\n- For each $1\\le i\\le n$, after the $i$-th contest,\n  - If $l\\le i\\le r$, this contest will be skipped, and the rating will remain unchanged;\n  - Otherwise, his rating will be updated according to the following rules:\n    - If $a_i>x$, his rating $x$ will increase by $1$;\n    - If $a_i=x$, his rating $x$ will remain unchanged;\n    - If $a_i<x$, his rating $x$ will decrease by $1$.\n\nYou have to help Kevin to find his maximum possible rating after the recalculation if he chooses the interval $[l,r]$ optimally. Note that Kevin has to skip at least one contest.\n\n### Input\n\nEach test contains multiple test cases. The first line of the input contains a single integer $t$ ($1\\le t\\le 5\\cdot 10^4$) — the number of test cases. The description of test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1\\le n\\le 3\\cdot 10^5$) — the number of contests.\n\nThe second line contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($1\\le a_i\\le n$) — the performance ratings in the contests.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $3 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the maximum possible rating after the recalculation if Kevin chooses the interval optimally.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n6\n\n1 2 3 4 5 6\n\n7\n\n1 2 1 1 1 3 4\n\n1\n\n1\n\n9\n\n9 9 8 2 4 4 3 5 3\n\n10\n\n1 2 3 4 1 3 2 1 1 10\n\n```\n\n#### Output #1\n\n```\n5\n4\n0\n4\n5\n```\n\n### Note\n\nIn the first test case, Kevin must skip at least one contest. If he chooses any interval of length $1$, his rating after the recalculation will be equal to $5$.\n\nIn the second test case, Kevin's optimal choice is to select the interval $[3,5]$. During the recalculation, his rating changes as follows:\n\n\n\n$$ 0 \\xrightarrow{a_1=1} 1 \\xrightarrow{a_2=2} 2 \\xrightarrow{\\mathtt{skip}} 2 \\xrightarrow{\\mathtt{skip}} 2 \\xrightarrow{\\mathtt{skip}} 2 \\xrightarrow{a_6=3} 3 \\xrightarrow{a_7=4} 4 $$\n\nIn the third test case, Kevin must skip the only contest, so his rating will remain at the initial value of $0$.\n\nIn the fourth test case, Kevin's optimal choice is to select the interval $[7,9]$. During the recalculation, his rating changes as follows:\n\n\n\n$$ 0 \\xrightarrow{a_1=9} 1 \\xrightarrow{a_2=9} 2 \\xrightarrow{a_3=8} 3 \\xrightarrow{a_4=2} 2 \\xrightarrow{a_5=4} 3 \\xrightarrow{a_6=4} 4 \\xrightarrow{\\mathtt{skip}} 4 \\xrightarrow{\\mathtt{skip}} 4 \\xrightarrow{\\mathtt{skip}} 4 $$\n\nIn the fifth test case, Kevin's optimal choice is to select the interval $[5,9]$.", "cfid": "2029C"}
{"problem_id": "2029A", "problem_title": "A. Set", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2029/A", "problem_statement": "You are given a positive integer $k$ and a set $S$ of all integers from $l$ to $r$ (inclusive).\n\nYou can perform the following two-step operation any number of times (possibly zero):\n\n1. First, choose a number $x$ from the set $S$, such that there are at least $k$ multiples of $x$ in $S$ (including $x$ itself);\n2. Then, remove $x$ from $S$ (note that nothing else is removed).\n\nFind the maximum possible number of operations that can be performed.\n\n### Input\n\nEach test contains multiple test cases. The first line of the input contains a single integer $t$ ($1\\le t\\le 10^4$) — the number of test cases. The description of test cases follows.\n\nThe only line of each test case contains three integers $l$, $r$, and $k$ ($1\\le l\\le r\\leq 10^9$, $1\\leq k\\le r-l+1$) — the minimum integer in $S$, the maximum integer in $S$, and the parameter $k$.\n\n### Output\n\nFor each test case, output a single integer — the maximum possible number of operations that can be performed.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n3 9 2\n\n4 9 1\n\n7 9 2\n\n2 10 2\n\n154 220 2\n\n147 294 2\n\n998 24435 3\n\n1 1000000000 2\n\n```\n\n#### Output #1\n\n```\n2\n6\n0\n4\n0\n1\n7148\n500000000\n```\n\n### Note\n\nIn the first test case, initially, $S = \\{3,4,5,6,7,8,9\\}$. One possible optimal sequence of operations is:\n\n1. Choose $x = 4$ for the first operation, since there are two multiples of $4$ in $S$: $4$ and $8$. $S$ becomes equal to $\\{3,5,6,7,8,9\\}$;\n2. Choose $x = 3$ for the second operation, since there are three multiples of $3$ in $S$: $3$, $6$, and $9$. $S$ becomes equal to $\\{5,6,7,8,9\\}$.\n\nIn the second test case, initially, $S=\\{4,5,6,7,8,9\\}$. One possible optimal sequence of operations is:\n\n1. Choose $x = 5$, $S$ becomes equal to $\\{4,6,7,8,9\\}$;\n2. Choose $x = 6$, $S$ becomes equal to $\\{4,7,8,9\\}$;\n3. Choose $x = 4$, $S$ becomes equal to $\\{7,8,9\\}$;\n4. Choose $x = 8$, $S$ becomes equal to $\\{7,9\\}$;\n5. Choose $x = 7$, $S$ becomes equal to $\\{9\\}$;\n6. Choose $x = 9$, $S$ becomes equal to $\\{\\}$.\n\nIn the third test case, initially, $S=\\{7,8,9\\}$. For each $x$ in $S$, no multiple of $x$ other than $x$ itself can be found in $S$. Since $k = 2$, you can perform no operations.\n\nIn the fourth test case, initially, $S=\\{2,3,4,5,6,7,8,9,10\\}$. One possible optimal sequence of operations is:\n\n1. Choose $x = 2$, $S$ becomes equal to $\\{3,4,5,6,7,8,9,10\\}$;\n2. Choose $x = 4$, $S$ becomes equal to $\\{3,5,6,7,8,9,10\\}$;\n3. Choose $x = 3$, $S$ becomes equal to $\\{5,6,7,8,9,10\\}$;\n4. Choose $x = 5$, $S$ becomes equal to $\\{6,7,8,9,10\\}$.", "cfid": "2029A"}
{"problem_id": "2029B", "problem_title": "B. Replacement", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2029/B", "problem_statement": "You have a binary string$^{\\text{∗}}$ $s$ of length $n$, and Iris gives you another binary string $r$ of length $n-1$.\n\nIris is going to play a game with you. During the game, you will perform $n-1$ operations on $s$. In the $i$-th operation ($1 \\le i \\le n-1$):\n\n- First, you choose an index $k$ such that $1\\le k\\le |s| - 1$ and $s_{k} \\neq s_{k+1}$. If it is impossible to choose such an index, you lose;\n- Then, you replace $s_ks_{k+1}$ with $r_i$. Note that this decreases the length of $s$ by $1$.\n\nIf all the $n-1$ operations are performed successfully, you win.\n\nDetermine whether it is possible for you to win this game.\n\n$^{\\text{∗}}$A binary string is a string where each character is either $\\mathtt{0}$ or $\\mathtt{1}$.\n\n### Input\n\nEach test contains multiple test cases. The first line of the input contains a single integer $t$ ($1\\le t\\le 10^4$) — the number of test cases. The description of test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2\\le n\\le 10^5$) — the length of $s$.\n\nThe second line contains the binary string $s$ of length $n$ ($s_i=\\mathtt{0}$ or $\\mathtt{1}$).\n\nThe third line contains the binary string $r$ of length $n-1$ ($r_i=\\mathtt{0}$ or $\\mathtt{1}$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, print \"YES\" (without quotes) if you can win the game, and \"NO\" (without quotes) otherwise.\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n2\n\n11\n\n0\n\n2\n\n01\n\n1\n\n4\n\n1101\n\n001\n\n6\n\n111110\n\n10000\n\n6\n\n010010\n\n11010\n\n8\n\n10010010\n\n0010010\n\n```\n\n#### Output #1\n\n```\nNO\nYES\nYES\nNO\nYES\nNO\n```\n\n### Note\n\nIn the first test case, you cannot perform the first operation. Thus, you lose the game.\n\nIn the second test case, you can choose $k=1$ in the only operation, and after that, $s$ becomes equal to $\\mathtt{1}$. Thus, you win the game.\n\nIn the third test case, you can perform the following operations: $\\mathtt{1}\\underline{\\mathtt{10}}\\mathtt{1}\\xrightarrow{r_1=\\mathtt{0}} \\mathtt{1}\\underline{\\mathtt{01}} \\xrightarrow{r_2=\\mathtt{0}} \\underline{\\mathtt{10}} \\xrightarrow{r_3=\\mathtt{1}} \\mathtt{1}$.", "cfid": "2029B"}
{"problem_id": "2036C", "problem_title": "C. Anya and 1100", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2036/C", "problem_statement": "While rummaging through things in a distant drawer, Anya found a beautiful string $s$ consisting only of zeros and ones.\n\nNow she wants to make it even more beautiful by performing $q$ operations on it.\n\nEach operation is described by two integers $i$ ($1 \\le i \\le |s|$) and $v$ ($v \\in \\{0, 1\\}$) and means that the $i$-th character of the string is assigned the value $v$ (that is, the assignment $s_i = v$ is performed).\n\nBut Anya loves the number $1100$, so after each query, she asks you to tell her whether the substring \"1100\" is present in her string (i.e. there exist such $1 \\le i \\le |s| - 3$ that $s_{i}s_{i + 1}s_{i + 2}s_{i + 3} = \\texttt{1100}$).\n\n### Input\n\nThe first line contains one integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe first line of the test case contains the string $s$ ($1 \\leq |s| \\leq 2 \\cdot 10^5$), consisting only of the characters \"0\" and \"1\". Here $|s|$ denotes the length of the string $s$.\n\nThe next line contains an integer $q$ ($1 \\leq q \\leq 2 \\cdot 10^5$) — the number of queries.\n\nThe following $q$ lines contain two integers $i$ ($1 \\leq i \\leq |s|$) and $v$ ($v \\in \\{0, 1\\}$), describing the query.\n\nIt is guaranteed that the sum of $|s|$ across all test cases does not exceed $2 \\cdot 10^5$. It is also guaranteed that the sum of $q$ across all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each query, output \"YES\", if \"1100\" is present in Anya's string; otherwise, output \"NO\".\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n100\n\n4\n\n1 1\n\n2 0\n\n2 0\n\n3 1\n\n1100000\n\n3\n\n6 1\n\n7 1\n\n4 1\n\n111010\n\n4\n\n1 1\n\n5 0\n\n4 1\n\n5 0\n\n0100\n\n4\n\n3 1\n\n1 1\n\n2 0\n\n2 1\n\n```\n\n#### Output #1\n\n```\nNO\nNO\nNO\nNO\nYES\nYES\nNO\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nNO\n```", "cfid": "2036C"}
{"problem_id": "2036B", "problem_title": "B. Startup", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2036/B", "problem_statement": "Arseniy came up with another business plan — to sell soda from a vending machine! For this, he purchased a machine with $n$ shelves, as well as $k$ bottles, where the $i$-th bottle is characterized by the brand index $b_i$ and the cost $c_i$.\n\nYou can place any number of bottles on each shelf, but all bottles on the same shelf must be of the same brand.\n\nArseniy knows that all the bottles he puts on the shelves of the machine will be sold. Therefore, he asked you to calculate the maximum amount he can earn.\n\n### Input\n\nThe first line contains one integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\le n, k \\le 2 \\cdot 10^5$), where $n$ is the number of shelves in the machine, and $k$ is the number of bottles available to Arseniy.\n\nThe next $k$ lines contain two integers $b_i$ and $c_i$ ($1 \\le b_i \\le k, 1 \\le c_i \\le 1000$) — the brand and cost of the $i$-th bottle.\n\nIt is also guaranteed that the sum of $n$ across all test cases does not exceed $2 \\cdot 10^5$ and that the sum of $k$ across all test cases also does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output one integer — the maximum amount that Arseniy can earn.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3 3\n\n2 6\n\n2 7\n\n1 15\n\n1 3\n\n2 6\n\n2 7\n\n1 15\n\n6 2\n\n1 7\n\n2 5\n\n190000 1\n\n1 1000\n\n```\n\n#### Output #1\n\n```\n28\n15\n12\n1000\n```\n\n### Note\n\nIn the first test case, Arseniy has $3$ shelves in the vending machine. He can place, for example, two bottles of the brand $2$ on the first shelf and a bottle of the brand $1$ on the second shelf. Then the total cost of the bottles would be $6 + 7 + 15 = 28$.\n\nIn the second test case, he has only one shelf. It is not difficult to show that the optimal option is to place a bottle of the brand $1$ on it. Then the total cost will be $15$.\n\nIn the third test case, he has as many as $6$ shelves, so he can place all available bottles with a total cost of $7 + 5 = 12$.", "cfid": "2036B"}
{"problem_id": "2036A", "problem_title": "A. Quintomania", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2036/A", "problem_statement": "Boris Notkin composes melodies. He represents them as a sequence of notes, where each note is encoded as an integer from $0$ to $127$ inclusive. The interval between two notes $a$ and $b$ is equal to $|a - b|$ semitones.\n\nBoris considers a melody perfect if the interval between each two adjacent notes is either $5$ semitones or $7$ semitones.\n\nAfter composing his latest melodies, he enthusiastically shows you his collection of works. Help Boris Notkin understand whether his melodies are perfect.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 1000$) — the number of melodies.\n\nEach melody is described by two lines.\n\nThe first line contains an integer $n$ ($2 \\leq n \\leq 50$) — the number of notes in the melody.\n\nThe second line contains $n$ integers $a_{1}, a_{2}, \\dots, a_{n}$ ($0 \\leq a_{i} \\leq 127$) — the notes of the melody.\n\n### Output\n\nFor each melody, output \"YES\", if it is perfect; otherwise, output \"NO\".\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n2\n\n114 109\n\n2\n\n17 10\n\n3\n\n76 83 88\n\n8\n\n38 45 38 80 85 92 99 106\n\n5\n\n63 58 65 58 65\n\n8\n\n117 124 48 53 48 43 54 49\n\n5\n\n95 102 107 114 121\n\n10\n\n72 77 82 75 70 75 68 75 68 75\n\n```\n\n#### Output #1\n\n```\nYES\nYES\nYES\nNO\nYES\nNO\nYES\nYES\n```", "cfid": "2036A"}
{"problem_id": "2036E", "problem_title": "E. Reverse the Rivers", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2036/E", "problem_statement": "A conspiracy of ancient sages, who decided to redirect rivers for their own convenience, has put the world on the brink. But before implementing their grand plan, they decided to carefully think through their strategy — that's what sages do.\n\nThere are $n$ countries, each with exactly $k$ regions. For the $j$-th region of the $i$-th country, they calculated the value $a_{i,j}$, which reflects the amount of water in it.\n\nThe sages intend to create channels between the $j$-th region of the $i$-th country and the $j$-th region of the $(i + 1)$-th country for all $1 \\leq i \\leq (n - 1)$ and for all $1 \\leq j \\leq k$.\n\nSince all $n$ countries are on a large slope, water flows towards the country with the highest number. According to the sages' predictions, after the channel system is created, the new value of the $j$-th region of the $i$-th country will be $b_{i,j} = a_{1,j} | a_{2,j} | ... | a_{i,j}$, where $|$ denotes the [bitwise \"OR\"](http://tiny.cc/bitwise_or) operation.\n\nAfter the redistribution of water, the sages aim to choose the most suitable country for living, so they will send you $q$ queries for consideration.\n\nEach query will contain $m$ requirements.\n\nEach requirement contains three parameters: the region number $r$, the sign $o$ (either \"$<$\" or \"$>$\"), and the value $c$. If $o$ = \"$<$\", then in the $r$-th region of the country you choose, the new value must be strictly less than the limit $c$, and if $o$ = \"$>$\", it must be strictly greater.\n\nIn other words, the chosen country $i$ must satisfy all $m$ requirements. If in the current requirement $o$ = \"$<$\", then it must hold that $b_{i,r} < c$, and if $o$ = \"$>$\", then $b_{i,r} > c$.\n\nIn response to each query, you should output a single integer — the number of the suitable country. If there are multiple such countries, output the smallest one. If no such country exists, output $-1$.\n\n### Input\n\nThe first line contains three integers $n$, $k$, and $q$ ($1 \\leq n, k, q \\leq 10^5$) — the number of countries, regions, and queries, respectively.\n\nNext, there are $n$ lines, where the $i$-th line contains $k$ integers $a_{i,1}, a_{i,2}, \\dots, a_{i,k}$ ($1 \\leq a_{i,j} \\leq 10^9$), where $a_{i,j}$ is the value of the $j$-th region of the $i$-th country.\n\nThen, $q$ queries are described.\n\nThe first line of each query contains a single integer $m$ ($1 \\leq m \\leq 10^5$) — the number of requirements.\n\nThen follow $m$ lines, each containing an integer $r$, a character $o$, and an integer $c$ ($1 \\leq r \\leq k$, $0 \\leq c \\leq 2 \\cdot 10^9$), where $r$ and $c$ are the region number and the value, and $o$ is either \"$<$\" or \"$>$\" — the sign.\n\nIt is guaranteed that $n \\cdot k$ does not exceed $10^5$ and that the sum of $m$ across all queries also does not exceed $10^5$.\n\n### Output\n\nFor each query, output a single integer on a new line — the smallest number of the suitable country, or $-1$ if no such country exists.\n\n### Example\n\n#### Input #1\n\n```\n\n3 4 4\n\n1 3 5 9\n\n4 6 5 3\n\n2 1 2 7\n\n3\n\n1 > 4\n\n2 < 8\n\n1 < 6\n\n2\n\n1 < 8\n\n2 > 8\n\n1\n\n3 > 5\n\n2\n\n4 > 8\n\n1 < 8\n\n```\n\n#### Output #1\n\n```\n2\n-1\n3\n1\n```\n\n### Note\n\nIn the example, the initial values of the regions are as follows:\n\n$1\n\n$$3$$\n\n5\n\n$$9$$\n\n4\n\n$$6$$\n\n5\n\n$$3$$\n\n2\n\n$$1$$\n\n2$$7$\n\nAfter creating the channels, the new values will look like this:\n\n$1\n\n$$3$$\n\n5\n\n$$9$$\n\n1 | 4\n\n$$3 | 6$$\n\n5 | 5\n\n$$9 | 3$$\n\n1 | 4 | 2\n\n$$3 | 6 | 1$$\n\n5 | 5 | 2\n\n$$9 | 3 | 7$ $\\downarrow$ $1$$\n\n3\n\n$$5$$\n\n9\n\n$$5$$\n\n7\n\n$$5$$\n\n11\n\n$$7$$\n\n7\n\n$$7$$\n\n15$\n\nIn the first query, it is necessary to output the minimum country number (i.e., row) where, after the redistribution of water in the first region (i.e., column), the new value will be greater than four and less than six, and in the second region it will be less than eight. Only the country with number $2$ meets these requirements.\n\nIn the second query, there are no countries that meet the specified requirements.\n\nIn the third query, only the country with number $3$ is suitable.\n\nIn the fourth query, all three countries meet the conditions, so the answer is the smallest number $1$.", "cfid": "2036E"}
{"problem_id": "2036D", "problem_title": "D. I Love 1543", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2036/D", "problem_statement": "One morning, Polycarp woke up and realized that $1543$ is the most favorite number in his life.\n\nThe first thing that Polycarp saw that day as soon as he opened his eyes was a large wall carpet of size $n$ by $m$ cells; $n$ and $m$ are even integers. Each cell contains one of the digits from $0$ to $9$.\n\nPolycarp became curious about how many times the number $1543$ would appear in all layers$^{\\text{∗}}$ of the carpet when traversed clockwise.\n\n$^{\\text{∗}}$The first layer of a carpet of size $n \\times m$ is defined as a closed strip of length $2 \\cdot (n+m-2)$ and thickness of $1$ element, surrounding its outer part. Each subsequent layer is defined as the first layer of the carpet obtained by removing all previous layers from the original carpet.\n\n### Input\n\nThe first line of the input contains a single integer $t$ ($1 \\leq t \\leq 100$) — the number of test cases. The following lines describe the test cases.\n\nThe first line of each test case contains a pair of numbers $n$ and $m$ ($2 \\leq n, m \\leq 10^3$, $n, m$ — even integers).\n\nThis is followed by $n$ lines of length $m$, consisting of digits from $0$ to $9$ — the description of the carpet.\n\nIt is guaranteed that the sum of $n \\cdot m$ across all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case, output a single number — the total number of times $1543$ appears in all layers of the carpet in the order of traversal clockwise.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n2 4\n\n1543\n\n7777\n\n2 4\n\n7154\n\n8903\n\n2 4\n\n3451\n\n8888\n\n2 2\n\n54\n\n13\n\n2 2\n\n51\n\n43\n\n2 6\n\n432015\n\n512034\n\n4 4\n\n5431\n\n1435\n\n5518\n\n7634\n\n6 4\n\n5432\n\n1152\n\n4542\n\n2432\n\n2302\n\n5942\n\n```\n\n#### Output #1\n\n```\n1\n1\n0\n1\n0\n2\n2\n2\n```\n\n### Note\n\n![](https://espresso.codeforces.com/376751b0f30c54602e78b686b24d2749f7484632.png)Occurrences of $1543$ in the seventh example. Different layers are colored in different colors.", "cfid": "2036D"}
{"problem_id": "2032D", "problem_title": "D. Genokraken", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2032/D", "problem_statement": "This is an interactive problem.\n\nUpon clearing the Waterside Area, Gretel has found a monster named Genokraken, and she's keeping it contained for her scientific studies.\n\nThe monster's nerve system can be structured as a tree$^{\\dagger}$ of $n$ nodes (really, everything should stop resembling trees all the time$\\ldots$), numbered from $0$ to $n-1$, with node $0$ as the root.\n\nGretel's objective is to learn the exact structure of the monster's nerve system — more specifically, she wants to know the values $p_1, p_2, \\ldots, p_{n-1}$ of the tree, where $p_i$ ($0 \\le p_i < i$) is the direct parent node of node $i$ ($1 \\le i \\le n - 1$).\n\nShe doesn't know exactly how the nodes are placed, but she knows a few convenient facts:\n\n- If we remove root node $0$ and all adjacent edges, this tree will turn into a forest consisting of only paths$^{\\ddagger}$. Each node that was initially adjacent to the node $0$ will be the end of some path.\n- The nodes are indexed in a way that if $1 \\le x \\le y \\le n - 1$, then $p_x \\le p_y$.\n- Node $1$ has exactly two adjacent nodes (including the node $0$).\n\n![](https://espresso.codeforces.com/79c0eaeb33c28c383838ac1d3ffe56a98aad0308.png)![](https://espresso.codeforces.com/cc25c204cfe251a488b90fa52b493218ec9a53b2.png)![](https://espresso.codeforces.com/e015305db3354f0fc63350fca12a2e243b01e727.png)The tree in this picture does not satisfy the condition, because if we remove node $0$, then node $2$ (which was initially adjacent to the node $0$) will not be the end of the path $4-2-5$.The tree in this picture does not satisfy the condition, because $p_3 \\le p_4$ must hold.The tree in this picture does not satisfy the condition, because node $1$ has only one adjacent node.\n\nGretel can make queries to the containment cell:\n\n- \"? a b\" ($1 \\le a, b < n$, $a \\ne b$) — the cell will check if the simple path between nodes $a$ and $b$ contains the node $0$.\n\nHowever, to avoid unexpected consequences by overstimulating the creature, Gretel wants to query at most $2n - 6$ times. Though Gretel is gifted, she can't do everything all at once, so can you give her a helping hand?\n\n$^{\\dagger}$A tree is a connected graph where every pair of distinct nodes has exactly one simple path connecting them.\n\n$^{\\ddagger}$A path is a tree whose vertices can be listed in the order $v_1, v_2, \\ldots, v_k$ such that the edges are $(v_i, v_{i+1})$ ($1 \\le i < k$).\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 500$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($4 \\le n \\le 10^4$) — the number of nodes in Genokraken's nerve system.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^4$.\n\n### Interaction\n\nFor each test case, interaction starts by reading the integer $n$.\n\nThen you can make queries of the following type:\n\n- \"? a b\" (without quotes) ($1 \\le a, b < n$, $a \\ne b$).\n\nAfter the query, read an integer $r$ — the answer to your query. You are allowed to use at most $2n - 6$ queries of this type.\n\n- If the simple path between nodes $a$ and $b$ does not contain node $0$, you will get $r = 0$.\n- If the simple path between nodes $a$ and $b$ contains node $0$, you will get $r = 1$.\n- In case you make more than $2n-6$ queries or make an invalid query, you will get $r = -1$. You will need to terminate after this to get the \"Wrong answer\" verdict. Otherwise, you can get an arbitrary verdict because your solution will continue to read from a closed stream.\n\nWhen you find out the structure, output a line in the format \"! $p_1 \\space p_2 \\ldots p_{n-1}$\" (without quotes), where $p_i$ ($0 \\le p_i < i$) denotes the index of the direct parent of node $i$. This query is not counted towards the $2n - 6$ queries limit.\n\nAfter solving one test case, the program should immediately move on to the next one. After solving all test cases, the program should be terminated immediately.\n\nAfter printing any query do not forget to output an end of line and flush the output buffer. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- flush(output) in Pascal;\n- stdout.flush() in Python;\n- see documentation for other languages.\n\nThe interactor is non-adaptive. The tree does not change during the interaction.\n\nHacks\n\nFor hack, use the following format:\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 500$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($4 \\le n \\le 10^4$) — the number of nodes in Genokraken's nerve system.\n\nThe second line of each test case contains $n-1$ integers $p_1, p_2, \\ldots, p_{n-1}$ ($0 \\le p_1 \\le p_2 \\le \\ldots \\le p_{n-1} \\le n - 2$, $0 \\le p_i < i$) — the direct parents of node $1$, $2$, ..., $n-1$ in the system, respectively.\n\nIn each test case, the values $p_1, p_2, \\ldots, p_{n-1}$ must ensure the following in the tree:\n\n- If we remove root node $0$ and all adjacent edges, this tree will turn into a forest consisting of only paths. Each node that was initially adjacent to the node $0$ will be the end of some path.\n- Node $1$ has exactly two adjacent nodes (including the node $0$).\n\nThe sum of $n$ over all test cases must not exceed $10^4$.\n\n### Example\n\n#### Input #1\n\n```\n3\n4\n\n1\n\n5\n\n1\n\n0\n\n9\n\n```\n\n#### Output #1\n\n```\n\n? 2 3\n\n! 0 0 1\n\n? 2 3\n\n? 2 4\n\n! 0 0 1 2\n\n! 0 0 0 1 3 5 6 7```\n\n### Note\n\nIn the first test case, Genokraken's nerve system forms the following tree:\n\n![](https://espresso.codeforces.com/991d6cb5d94abfd9a93a3612cadccb312faff58d.png)\n\n- The answer to \"? 2 3\" is $1$. This means that the simple path between nodes $2$ and $3$ contains node $0$.\n\nIn the second test case, Genokraken's nerve system forms the following tree:\n\n![](https://espresso.codeforces.com/f22633acb2e8fdafa664ba724b2b918559788075.png)\n\n- The answer to \"? 2 3\" is $1$. This means that the simple path between nodes $2$ and $3$ contains node $0$.\n- The answer to \"? 2 4\" is $0$. This means that the simple path between nodes $2$ and $4$ doesn't contain node $0$.\n\nIn the third test case, Genokraken's nerve system forms the following tree:\n\n![](https://espresso.codeforces.com/ba3efbe4d8cdb7afca29eb95512d7497d5e9507f.png)", "cfid": "2032D"}
{"problem_id": "2032B", "problem_title": "B. Medians", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2032/B", "problem_statement": "You are given an array $a = [1, 2, \\ldots, n]$, where $n$ is odd, and an integer $k$.\n\nYour task is to choose an odd positive integer $m$ and to split $a$ into $m$ subarrays$^{\\dagger}$ $b_1, b_2, \\ldots, b_m$ such that:\n\n- Each element of the array $a$ belongs to exactly one subarray.\n- For all $1 \\le i \\le m$, $|b_i|$ is odd, i.e., the length of each subarray is odd.\n- $\\operatorname{median}([\\operatorname{median}(b_1), \\operatorname{median}(b_2), \\ldots, \\operatorname{median}(b_m)]) = k$, i.e., the median$^{\\ddagger}$ of the array of medians of all subarrays must equal $k$. $\\operatorname{median}(c)$ denotes the median of the array $c$.\n\n$^{\\dagger}$A subarray of the array $a$ of length $n$ is the array $[a_l, a_{l + 1}, \\ldots, a_r]$ for some integers $1 \\le l \\le r \\le n$.\n\n$^{\\ddagger}$A median of the array of odd length is the middle element after the array is sorted in non-decreasing order. For example: $\\operatorname{median}([1,2,5,4,3]) = 3$, $\\operatorname{median}([3,2,1]) = 2$, $\\operatorname{median}([2,1,2,1,2,2,2]) = 2$.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 5000$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\le k \\le n < 2 \\cdot 10^5$, $n$ is odd) — the length of array $a$ and the desired median of the array of medians of all subarrays.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case:\n\n- If there is no suitable partition, output $-1$ in a single line.\n- Otherwise, in the first line, output an odd integer $m$ ($1 \\le m \\le n$), and in the second line, output $m$ distinct integers $p_1, p_2 , p_3 , \\ldots, p_m$ ($1 = p_1 < p_2 < p_3 < \\ldots < p_m \\le n$) — denoting the left borders of each subarray.\n\nIn detail, for a valid answer $[p_1, p_2, \\ldots, p_m]$:\n\n- $b_1 = \\left[ a_{p_1}, a_{p_1 + 1}, \\ldots, a_{p_2 - 1} \\right]$\n- $b_2 = \\left[ a_{p_2}, a_{p_2 + 1}, \\ldots, a_{p_3 - 1} \\right]$\n- $\\ldots$\n- $b_m = \\left[ a_{p_m}, a_{p_m + 1}, \\ldots, a_n \\right]$.\n\nIf there are multiple solutions, you can output any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n1 1\n\n3 2\n\n3 3\n\n15 8\n\n```\n\n#### Output #1\n\n```\n1\n1\n3\n1 2 3\n-1\n5\n1 4 7 10 13\n```\n\n### Note\n\nIn the first test case, the given partition has $m = 1$ and $b_1 = [1]$. It is obvious that $\\operatorname{median}([\\operatorname{median}([1])]) = \\operatorname{median}([1]) = 1$.\n\nIn the second test case, the given partition has $m = 3$ and:\n\n- $b_1 = [1]$\n- $b_2 = [2]$\n- $b_3 = [3]$\n\nTherefore, $\\operatorname{median}([\\operatorname{median}([1]), \\operatorname{median}([2]), \\operatorname{median}([3])]) = \\operatorname{median}([1, 2, 3]) = 2$.\n\nIn the third test case, there is no valid partition for $k = 3$.\n\nIn the fourth test case, the given partition has $m = 5$ and:\n\n- $b_1 = [1, 2, 3]$\n- $b_2 = [4, 5, 6]$\n- $b_3 = [7, 8, 9]$\n- $b_4 = [10, 11, 12]$\n- $b_5 = [13, 14, 15]$\n\nTherefore, $\\operatorname{median}([\\operatorname{median}([1, 2, 3]), \\operatorname{median}([4, 5, 6]), \\operatorname{median}([7, 8, 9]), \\operatorname{median}([10, 11, 12]), \\operatorname{median}([13, 14, 15])]) = \\operatorname{median}([2, 5, 8, 11, 14]) = 8$.", "cfid": "2032B"}
{"problem_id": "2032A", "problem_title": "A. Circuit", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2032/A", "problem_statement": "Alice has just crafted a circuit with $n$ lights and $2n$ switches. Each component (a light or a switch) has two states: on or off. The lights and switches are arranged in a way that:\n\n- Each light is connected to exactly two switches.\n- Each switch is connected to exactly one light. It's unknown which light each switch is connected to.\n- When all switches are off, all lights are also off.\n- If a switch is toggled (from on to off, or vice versa), the state of the light connected to it will also toggle.\n\nAlice brings the circuit, which shows only the states of the $2n$ switches, to her sister Iris and gives her a riddle: what is the minimum and maximum number of lights that can be turned on?\n\nKnowing her little sister's antics too well, Iris takes no more than a second to give Alice a correct answer. Can you do the same?\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 500$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 50$) — the number of lights in the circuit.\n\nThe second line of each test case contains $2n$ integers $a_1, a_2, \\ldots, a_{2n}$ ($0 \\le a_i \\le 1$) — the states of the switches in the circuit. $a_i = 0$ means the $i$-th switch is off, and $a_i = 1$ means the $i$-th switch is on.\n\n### Output\n\nFor each test case, output two integers — the minimum and maximum number of lights, respectively, that can be turned on.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n1\n\n0 0\n\n1\n\n0 1\n\n1\n\n1 1\n\n3\n\n0 0 1 0 1 0\n\n3\n\n0 1 1 1 0 0\n\n```\n\n#### Output #1\n\n```\n0 0\n1 1\n0 0\n0 2\n1 3\n```\n\n### Note\n\nIn the first test case, there is only one light in the circuit, and no switch is on, so the light is certainly off.\n\nIn the second test case, there is only one light in the circuit, but one switch connected to it is on, so the light is on.\n\nIn the third test case, there is only one light in the circuit, and both switches are on, so the light is off as it was toggled twice.\n\nIn the fourth test case, to have no lights on, the switches can be arranged in this way:\n\n- Switch $1$ and switch $4$ are connected to light $1$. Since both switches are off, light $1$ is also off.\n- Switch $2$ and switch $6$ are connected to light $2$. Since both switches are off, light $2$ is also off.\n- Switch $3$ and switch $5$ are connected to light $3$. Both switches are on, so light $3$ is toggled twice from its initial off state, and thus also stays off.\n\nAnd to have $2$ lights on, the switches can be arranged in this way:\n\n- Switch $1$ and switch $2$ are connected to light $1$. Since both switches are off, light $1$ is also off.\n- Switch $3$ and switch $4$ are connected to light $2$. Since switch $3$ is on and switch $4$ is off, light $2$ is toggled once from its initial off state, so it is on.\n- Switch $5$ and switch $6$ are connected to light $3$. Since switch $5$ is on and switch $6$ is off, light $3$ is toggled once from its initial off state, so it is on.", "cfid": "2032A"}
{"problem_id": "2032C", "problem_title": "C. Trinity", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2032/C", "problem_statement": "You are given an array $a$ of $n$ elements $a_1, a_2, \\ldots, a_n$.\n\nYou can perform the following operation any number (possibly $0$) of times:\n\n- Choose two integers $i$ and $j$, where $1 \\le i, j \\le n$, and assign $a_i := a_j$.\n\nFind the minimum number of operations required to make the array $a$ satisfy the condition:\n\n- For every pairwise distinct triplet of indices $(x, y, z)$ ($1 \\le x, y, z \\le n$, $x \\ne y$, $y \\ne z$, $x \\ne z$), there exists a non-degenerate triangle with side lengths $a_x$, $a_y$ and $a_z$, i.e. $a_x + a_y > a_z$, $a_y + a_z > a_x$ and $a_z + a_x > a_y$.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($3 \\le n \\le 2 \\cdot 10^5$) — the number of elements in the array $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$) — the elements of the array $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the minimum number of operations required.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n7\n\n1 2 3 4 5 6 7\n\n3\n\n1 3 2\n\n3\n\n4 5 3\n\n15\n\n9 3 8 1 6 5 3 8 2 1 4 2 9 4 7\n\n```\n\n#### Output #1\n\n```\n3\n1\n0\n8\n```\n\n### Note\n\nIn the first test case, one of the possible series of operations would be:\n\n- Assign $a_1 := a_4 = 4$. The array will become $[4, 2, 3, 4, 5, 6, 7]$.\n- Assign $a_2 := a_5 = 5$. The array will become $[4, 5, 3, 4, 5, 6, 7]$.\n- Assign $a_7 := a_1 = 4$. The array will become $[4, 5, 3, 4, 5, 6, 4]$.\n\nIt can be proven that any triplet of elements with pairwise distinct indices in the final array forms a non-degenerate triangle, and there is no possible answer using less than $3$ operations.\n\nIn the second test case, we can assign $a_1 := a_2 = 3$ to make the array $a = [3, 3, 2]$.\n\nIn the third test case, since $3$, $4$ and $5$ are valid side lengths of a triangle, we don't need to perform any operation to the array.", "cfid": "2032C"}
{"problem_id": "2026C", "problem_title": "C. Action Figures", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2026/C", "problem_statement": "There is a shop that sells action figures near Monocarp's house. A new set of action figures will be released shortly; this set contains $n$ figures, the $i$-th figure costs $i$ coins and is available for purchase from day $i$ to day $n$.\n\nFor each of the $n$ days, Monocarp knows whether he can visit the shop.\n\nEvery time Monocarp visits the shop, he can buy any number of action figures which are sold in the shop (of course, he cannot buy an action figure that is not yet available for purchase). If Monocarp buys at least two figures during the same day, he gets a discount equal to the cost of the most expensive figure he buys (in other words, he gets the most expensive of the figures he buys for free).\n\nMonocarp wants to buy exactly one $1$-st figure, one $2$-nd figure, ..., one $n$-th figure from the set. He cannot buy the same figure twice. What is the minimum amount of money he has to spend?\n\n### Input\n\nThe first line contains one integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nEach test case consists of two lines:\n\n- the first line contains one integer $n$ ($1 \\le n \\le 4 \\cdot 10^5$) — the number of figures in the set (and the number of days);\n- the second line contains a string $s$ ($|s| = n$, each $s_i$ is either 0 or 1). If Monocarp can visit the shop on the $i$-th day, then $s_i$ is 1; otherwise, $s_i$ is 0.\n\nAdditional constraints on the input:\n\n- in each test case, $s_n$ is 1, so Monocarp is always able to buy all figures during the $n$-th day;\n- the sum of $n$ over all test cases does not exceed $4 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print one integer — the minimum amount of money Monocarp has to spend.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n1\n\n1\n\n6\n\n101101\n\n7\n\n1110001\n\n5\n\n11111\n\n```\n\n#### Output #1\n\n```\n1\n8\n18\n6\n```\n\n### Note\n\nIn the first test case, Monocarp buys the $1$-st figure on the $1$-st day and spends $1$ coin.\n\nIn the second test case, Monocarp can buy the $1$-st and the $3$-rd figure on the $3$-rd day, the $2$-nd and the $4$-th figure on the $4$-th day, and the $5$-th and the $6$-th figure on the $6$-th day. Then, he will spend $1+2+5=8$ coins.\n\nIn the third test case, Monocarp can buy the $2$-nd and the $3$-rd figure on the $3$-rd day, and all other figures on the $7$-th day. Then, he will spend $1+2+4+5+6 = 18$ coins.", "cfid": "2026C"}
{"problem_id": "2026A", "problem_title": "A. Perpendicular Segments", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2026/A", "problem_statement": "You are given a coordinate plane and three integers $X$, $Y$, and $K$. Find two line segments $AB$ and $CD$ such that\n\n1. the coordinates of points $A$, $B$, $C$, and $D$ are integers;\n2. $0 \\le A_x, B_x, C_x, D_x \\le X$ and $0 \\le A_y, B_y, C_y, D_y \\le Y$;\n3. the length of segment $AB$ is at least $K$;\n4. the length of segment $CD$ is at least $K$;\n5. segments $AB$ and $CD$ are perpendicular: if you draw lines that contain $AB$ and $CD$, they will cross at a right angle.\n\nNote that it's not necessary for segments to intersect. Segments are perpendicular as long as the lines they induce are perpendicular.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 5000$) — the number of test cases. Next, $t$ cases follow.\n\nThe first and only line of each test case contains three integers $X$, $Y$, and $K$ ($1 \\le X, Y \\le 1000$; $1 \\le K \\le 1414$).\n\nAdditional constraint on the input: the values of $X$, $Y$, and $K$ are chosen in such a way that the answer exists.\n\n### Output\n\nFor each test case, print two lines. The first line should contain $4$ integers $A_x$, $A_y$, $B_x$, and $B_y$ — the coordinates of the first segment.\n\nThe second line should also contain $4$ integers $C_x$, $C_y$, $D_x$, and $D_y$ — the coordinates of the second segment.\n\nIf there are multiple answers, print any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n1 1 1\n\n3 4 1\n\n4 3 3\n\n3 4 4\n\n```\n\n#### Output #1\n\n```\n0 0 1 0\n0 0 0 1\n2 4 2 2\n0 1 1 1\n0 0 1 3\n1 2 4 1\n0 1 3 4\n0 3 3 0\n```\n\n### Note\n\nThe answer for the first test case is shown below:\n\n![](https://espresso.codeforces.com/8ff10475ccf3403c6de83da01703883f8a912f68.png) The answer for the second test case: ![](https://espresso.codeforces.com/f5d07d5cf35872fb3871f0fdbc299a6bf02f4c41.png) The answer for the third test case: ![](https://espresso.codeforces.com/8bb04be50b98e98df8bafec057d0479b6f4fcde0.png) The answer for the fourth test case: ![](https://espresso.codeforces.com/9cf56bcca6e135737bc885eecb651d8ca3e5adcf.png)", "cfid": "2026A"}
{"problem_id": "2026B", "problem_title": "B. Black Cells", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2026/B", "problem_statement": "You are given a strip divided into cells, numbered from left to right from $0$ to $10^{18}$. Initially, all cells are white.\n\nYou can perform the following operation: choose two white cells $i$ and $j$, such that $i \\ne j$ and $|i - j| \\le k$, and paint them black.\n\nA list $a$ is given. All cells from this list must be painted black. Additionally, at most one cell that is not in this list can also be painted black. Your task is to determine the minimum value of $k$ for which this is possible.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 500$) — the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 2000$).\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($0 < a_i < 10^{18}$; $a_i < a_{i + 1}$).\n\nAdditional constraint on the input: the sum of $n$ across all test cases does not exceed $2000$.\n\n### Output\n\nFor each test case, print a single integer — the minimum value of $k$ for which it is possible to paint all the given cells black.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2\n\n1 2\n\n1\n\n7\n\n3\n\n2 4 9\n\n5\n\n1 5 8 10 13\n\n```\n\n#### Output #1\n\n```\n1\n1\n2\n3\n```\n\n### Note\n\nIn the first example, with $k=1$, it is possible to paint the cells $(1, 2)$.\n\nIn the second example, with $k=1$, it is possible to paint the cells $(7, 8)$.\n\nIn the third example, with $k=2$, it is possible to paint the cells $(2, 4)$ and $(8, 9)$.\n\nIn the fourth example, with $k=3$, it is possible to paint the cells $(0, 1)$, $(5, 8)$ and $(10, 13)$.", "cfid": "2026B"}
{"problem_id": "2035D", "problem_title": "D. Yet Another Real Number Problem", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2035/D", "problem_statement": "Three r there are's in strawberry.\n\nYou are given an array $b$ of length $m$. You can perform the following operation any number of times (possibly zero):\n\n- Choose two distinct indices $i$ and $j$ where $\\bf{1\\le i < j\\le m}$ and $b_i$ is even, divide $b_i$ by $2$ and multiply $b_j$ by $2$.\n\nYour task is to maximize the sum of the array after performing any number of such operations. Since it could be large, output this sum modulo $10^9+7$.\n\nSince this problem is too easy, you are given an array $a$ of length $n$ and need to solve the problem for each prefix of $a$.\n\nIn other words, denoting the maximum sum of $b$ after performing any number of such operations as $f(b)$, you need to output $f([a_1])$, $f([a_1,a_2])$, $\\ldots$, $f([a_1,a_2,\\ldots,a_n])$ modulo $10^9+7$ respectively.\n\n### Input\n\nThe first line contains a single integer $t$ ($1\\le t\\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) — the length of $a$.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$) — the starting values of array $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases will not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output $n$ integers representing the answer for each prefix of $a$ modulo $10^9+7$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n10\n\n1 2 3 4 5 6 7 8 9 10\n\n11\n\n1 6 9 4 7 4 4 10 3 2 3\n\n4\n\n527792568 502211460 850237282 374773208\n\n```\n\n#### Output #1\n\n```\n1 3 8 13 46 59 126 149 1174 1311\n1 7 22 26 70 74 150 1303 1306 1308 1568\n527792568 83665723 399119771 773892979\n```\n\n### Note\n\nFor each prefix in the first example, a possible array after operations is:\n\n- $[1]$ and the sum is $1$;\n- $[1, 2]$ and the sum is $3$;\n- $[1, 1, 6]$ and the sum is $8$;\n- $[1, 1, 3, 8]$ and the sum is $13$;\n- $[1, 1, 3, 1, 40]$ and the sum is $46$;\n- $[1, 1, 3, 1, 5, 48]$ and the sum is $59$;\n- $[1, 1, 3, 1, 5, 3, 112]$ and the sum is $126$;\n- $[1, 1, 3, 1, 5, 3, 7, 128]$ and the sum is $149$;\n- $[1, 1, 3, 1, 5, 3, 7, 1, 1152]$ and the sum is $1174$;\n- $[1, 1, 3, 1, 5, 3, 7, 1, 9, 1280]$ and the sum is $1311$.", "cfid": "2035D"}
{"problem_id": "2035A", "problem_title": "A. Sliding", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2035/A", "problem_statement": "Red was ejected. They were not the imposter.\n\nThere are $n$ rows of $m$ people. Let the position in the $r$-th row and the $c$-th column be denoted by $(r, c)$. Number each person starting from $1$ in row-major order, i.e., the person numbered $(r-1)\\cdot m+c$ is initially at $(r,c)$.\n\nThe person at $(r, c)$ decides to leave. To fill the gap, let the person who left be numbered $i$. Each person numbered $j>i$ will move to the position where the person numbered $j-1$ is initially at. The following diagram illustrates the case where $n=2$, $m=3$, $r=1$, and $c=2$.\n\n![](https://espresso.codeforces.com/b24389738aac41115cbf116d0cb49065a5710c74.png)\n\nCalculate the sum of the Manhattan distances of each person's movement. If a person was initially at $(r_0, c_0)$ and then moved to $(r_1, c_1)$, the Manhattan distance is $|r_0-r_1|+|c_0-c_1|$.\n\n### Input\n\nThe first line contains a single integer $t$ ($1\\le t\\le 10^4$) — the number of test cases.\n\nThe only line of each testcase contains $4$ integers $n$, $m$, $r$, and $c$ ($1\\le r\\le n\\le 10^6$, $1 \\le c \\le m \\le 10^6$), where $n$ is the number of rows, $m$ is the number of columns, and $(r,c)$ is the position where the person who left is initially at.\n\n### Output\n\nFor each test case, output a single integer denoting the sum of the Manhattan distances.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2 3 1 2\n\n2 2 2 1\n\n1 1 1 1\n\n1000000 1000000 1 1\n\n```\n\n#### Output #1\n\n```\n6\n1\n0\n1999998000000\n```\n\n### Note\n\nFor the first test case, the person numbered $2$ leaves, and the distances of the movements of the person numbered $3$, $4$, $5$, and $6$ are $1$, $3$, $1$, and $1$, respectively. So the answer is $1+3+1+1=6$.\n\nFor the second test case, the person numbered $3$ leaves, and the person numbered $4$ moves. The answer is $1$.", "cfid": "2035A"}
{"problem_id": "2035B", "problem_title": "B. Everyone Loves Tres", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2035/B", "problem_statement": "There are 3 heroes and 3 villains, so 6 people in total.\n\nGiven a positive integer $n$. Find the smallest integer whose decimal representation has length $n$ and consists only of $3$s and $6$s such that it is divisible by both $33$ and $66$. If no such integer exists, print $-1$.\n\n### Input\n\nThe first line contains a single integer $t$ ($1\\le t\\le 500$) — the number of test cases.\n\nThe only line of each test case contains a single integer $n$ ($1\\le n\\le 500$) — the length of the decimal representation.\n\n### Output\n\nFor each test case, output the smallest required integer if such an integer exists and $-1$ otherwise.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n1\n\n2\n\n3\n\n4\n\n5\n\n7\n\n```\n\n#### Output #1\n\n```\n-1\n66\n-1\n3366\n36366\n3336366\n```\n\n### Note\n\nFor $n=1$, no such integer exists as neither $3$ nor $6$ is divisible by $33$.\n\nFor $n=2$, $66$ consists only of $6$s and it is divisible by both $33$ and $66$.\n\nFor $n=3$, no such integer exists. Only $363$ is divisible by $33$, but it is not divisible by $66$.\n\nFor $n=4$, $3366$ and $6666$ are divisible by both $33$ and $66$, and $3366$ is the smallest.", "cfid": "2035B"}
{"problem_id": "2035C", "problem_title": "C. Alya and Permutation", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2035/C", "problem_statement": "Alya has been given a hard problem. Unfortunately, she is too busy running for student council. Please solve this problem for her.\n\nGiven an integer $n$, construct a permutation $p$ of integers $1, 2, \\ldots, n$ that maximizes the value of $k$ (which is initially $0$) after the following process.\n\nPerform $n$ operations, on the $i$-th operation ($i=1, 2, \\dots, n$),\n\n- If $i$ is odd, $k=k\\,\\&\\,p_i$, where $\\&$ denotes the [bitwise AND operation](https://en.wikipedia.org/wiki/Bitwise_operation#AND).\n- If $i$ is even, $k=k\\,|\\,p_i$, where $|$ denotes the [bitwise OR operation](https://en.wikipedia.org/wiki/Bitwise_operation#OR).\n\n### Input\n\nThe first line contains a single integer $t$ ($1\\le t\\le 500$) — the number of test cases.\n\nThe only line of each test case contains a single integer $n$ ($5\\le n\\le 2 \\cdot 10^5$) — the length of the permutation.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the maximum value of $k$ in the first line and output the permutation $p_1, p_2,\\ldots, p_n$ in the second line.\n\nIf there are multiple such permutations, output any.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n```\n\n#### Output #1\n\n```\n5\n2 1 3 4 5\n7\n1 2 4 6 5 3\n7\n2 4 5 1 3 6 7\n15\n2 4 5 1 3 6 7 8\n9\n2 4 5 6 7 1 3 8 9\n15\n1 2 3 4 5 6 8 10 9 7\n```\n\n### Note\n\nFor the first test case, the value of $k$ is determined as follows:\n\n$k = 0$ initially.\n\n- On the $1$st operation, $1$ is odd, so Alya sets $k$ to be $k\\&p_1 = 0\\&2 = 0$.\n- On the $2$nd operation, $2$ is even, so Alya sets $k$ to be $k|p_2 = 0|1 = 1$.\n- On the $3$rd operation, $3$ is odd, so Alya sets $k$ to be $k\\&p_3 = 1\\&3 = 1$.\n- On the $4$th operation, $4$ is even, so Alya sets $k$ to be $k|p_4 = 1|4 = 5$.\n- On the $5$th operation, $5$ is odd, so Alya sets $k$ to be $k\\&p_5 = 5\\&5 = 5$.\n\nThe final value of $k$ is $5$. It can be shown that the final value of $k$ is at most $5$ for all permutations of length $5$. Another valid output is $[2, 3, 1, 4, 5]$.\n\nFor the second test case, the final value of $k$ is $7$. It can be shown that the final value of $k$ is at most $7$ for all permutations of length $6$. Other valid outputs include $[2, 4, 1, 6, 3, 5]$ and $[5, 2, 6, 1, 3, 4]$.", "cfid": "2035C"}
{"problem_id": "2027C", "problem_title": "C. Add Zeros", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2027/C", "problem_statement": "You're given an array $a$ initially containing $n$ integers. In one operation, you must do the following:\n\n- Choose a position $i$ such that $1 < i \\le |a|$ and $a_i = |a| + 1 - i$, where $|a|$ is the current size of the array.\n- Append $i - 1$ zeros onto the end of $a$.\n\nAfter performing this operation as many times as you want, what is the maximum possible length of the array $a$?\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$). The description of the test cases follows.\n\nThe first line of each test case contains $n$ ($1 \\le n \\le 3 \\cdot 10^5$) — the length of the array $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^{12}$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $3 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the maximum possible length of $a$ after performing some sequence of operations.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n5\n\n2 4 6 2 5\n\n5\n\n5 4 4 5 1\n\n4\n\n6 8 2 3\n\n1\n\n1\n\n```\n\n#### Output #1\n\n```\n10\n11\n10\n1\n```\n\n### Note\n\nIn the first test case, we can first choose $i = 4$, since $a_4 = 5 + 1 - 4 = 2$. After this, the array becomes $[2, 4, 6, 2, 5, 0, 0, 0]$. We can then choose $i = 3$ since $a_3 = 8 + 1 - 3 = 6$. After this, the array becomes $[2, 4, 6, 2, 5, 0, 0, 0, 0, 0]$, which has a length of $10$. It can be shown that no sequence of operations will make the final array longer.\n\nIn the second test case, we can choose $i=2$, then $i=3$, then $i=4$. The final array will be $[5, 4, 4, 5, 1, 0, 0, 0, 0, 0, 0]$, with a length of $11$.", "cfid": "2027C"}
{"problem_id": "2027A", "problem_title": "A. Rectangle Arrangement", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2027/A", "problem_statement": "You are coloring an infinite square grid, in which all cells are initially white. To do this, you are given $n$ stamps. Each stamp is a rectangle of width $w_i$ and height $h_i$.\n\nYou will use each stamp exactly once to color a rectangle of the same size as the stamp on the grid in black. You cannot rotate the stamp, and for each cell, the stamp must either cover it fully or not cover it at all. You can use the stamp at any position on the grid, even if some or all of the cells covered by the stamping area are already black.\n\nWhat is the minimum sum of the perimeters of the connected regions of black squares you can obtain after all the stamps have been used?\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 500$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 100$).\n\nThe $i$-th of the next $n$ lines contains two integers $w_i$ and $h_i$ ($1 \\le w_i, h_i \\le 100$).\n\n### Output\n\nFor each test case, output a single integer — the minimum sum of the perimeters of the connected regions of black squares you can obtain after all the stamps have been used.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n5\n\n1 5\n\n2 4\n\n3 3\n\n4 2\n\n5 1\n\n3\n\n2 2\n\n1 1\n\n1 2\n\n1\n\n3 2\n\n3\n\n100 100\n\n100 100\n\n100 100\n\n4\n\n1 4\n\n2 3\n\n1 5\n\n3 2\n\n```\n\n#### Output #1\n\n```\n20\n8\n10\n400\n16\n```\n\n### Note\n\nIn the first test case, the stamps can be used as shown on the left. Each stamp is highlighted in its own color for clarity.\n\n![](https://espresso.codeforces.com/e5cb3a60d3f4edae5433009de214eeef86376690.png)\n\nAfter all these stamps are used, there is one black region (as shown on the right), and its perimeter is $20$. It can be shown that there is no way of using the stamps that yields a lower total perimeter.\n\nIn the second test case, the second and third stamps can be used entirely inside the first one, so the minimum perimeter is equal to $8$.", "cfid": "2027A"}
{"problem_id": "2027B", "problem_title": "B. Stalin Sort", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2027/B", "problem_statement": "Stalin Sort is a humorous sorting algorithm designed to eliminate elements which are out of place instead of bothering to sort them properly, lending itself to an $\\mathcal{O}(n)$ time complexity.\n\nIt goes as follows: starting from the second element in the array, if it is strictly smaller than the previous element (ignoring those which have already been deleted), then delete it. Continue iterating through the array until it is sorted in non-decreasing order. For example, the array $[1, 4, 2, 3, 6, 5, 5, 7, 7]$ becomes $[1, 4, 6, 7, 7]$ after a Stalin Sort.\n\nWe define an array as vulnerable if you can sort it in non-increasing order by repeatedly applying a Stalin Sort to any of its subarrays$^{\\text{∗}}$, as many times as is needed.\n\nGiven an array $a$ of $n$ integers, determine the minimum number of integers which must be removed from the array to make it vulnerable.\n\n$^{\\text{∗}}$An array $a$ is a subarray of an array $b$ if $a$ can be obtained from $b$ by the deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\n### Input\n\nEach test consists of several test cases. The first line contains a single integer $t$ ($1 \\le t \\le 500$) — the number of test cases. This is followed by descriptions of the test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 2000$) — the size of the array.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2000$.\n\n### Output\n\nFor each test case, output a single integer — the minimum number of integers which must be removed from the array to make it vulnerable.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n7\n\n3 6 4 9 2 5 2\n\n5\n\n5 4 4 2 2\n\n8\n\n2 2 4 4 6 6 10 10\n\n1\n\n1000\n\n9\n\n6 8 9 10 12 9 7 5 4\n\n7\n\n300000000 600000000 400000000 900000000 200000000 400000000 200000000\n\n```\n\n#### Output #1\n\n```\n2\n0\n6\n0\n4\n2\n```\n\n### Note\n\nIn the first test case, the optimal answer is to remove the numbers $3$ and $9$. Then we are left with $a = [6, 4, 2, 5, 2]$. To show this array is vulnerable, we can first apply a Stalin Sort on the subarray $[4, 2, 5]$ to get $a = [6, 4, 5, 2]$ and then apply a Stalin Sort on the subarray $[6, 4, 5]$ to get $a = [6, 2]$, which is non-increasing.\n\nIn the second test case, the array is already non-increasing, so we don't have to remove any integers.", "cfid": "2027B"}
{"problem_id": "2027D1", "problem_title": "D1. The Endspeaker (Easy Version)", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2027/D1", "problem_statement": "This is the easy version of this problem. The only difference is that you only need to output the minimum total cost of operations in this version. You must solve both versions to be able to hack.\n\nYou're given an array $a$ of length $n$, and an array $b$ of length $m$ ($b_i > b_{i+1}$ for all $1 \\le i < m$). Initially, the value of $k$ is $1$. Your aim is to make the array $a$ empty by performing one of these two operations repeatedly:\n\n- Type $1$ — If the value of $k$ is less than $m$ and the array $a$ is not empty, you can increase the value of $k$ by $1$. This does not incur any cost.\n- Type $2$ — You remove a non-empty prefix of array $a$, such that its sum does not exceed $b_k$. This incurs a cost of $m - k$.\n\nYou need to minimize the total cost of the operations to make array $a$ empty. If it's impossible to do this through any sequence of operations, output $-1$. Otherwise, output the minimum total cost of the operations.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\le n, m \\le 3 \\cdot 10^5$, $\\boldsymbol{1 \\le n \\cdot m \\le 3 \\cdot 10^5}$).\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$).\n\nThe third line of each test case contains $m$ integers $b_1, b_2, \\ldots, b_m$ ($1 \\le b_i \\le 10^9$).\n\nIt is also guaranteed that $b_i > b_{i+1}$ for all $1 \\le i < m$.\n\nIt is guaranteed that the sum of $\\boldsymbol{n \\cdot m}$ over all test cases does not exceed $3 \\cdot 10^5$.\n\n### Output\n\nFor each test case, if it's possible to make $a$ empty, then output the minimum total cost of the operations.\n\nIf there is no possible sequence of operations which makes $a$ empty, then output a single integer $-1$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n4 2\n\n9 3 4 3\n\n11 7\n\n1 2\n\n20\n\n19 18\n\n10 2\n\n2 5 2 1 10 3 2 9 9 6\n\n17 9\n\n10 11\n\n2 2 2 2 2 2 2 2 2 2\n\n20 18 16 14 12 10 8 6 4 2 1\n\n1 6\n\n10\n\n32 16 8 4 2 1\n\n```\n\n#### Output #1\n\n```\n1\n-1\n2\n10\n4\n```\n\n### Note\n\nIn the first test case, one optimal sequence of operations which yields a total cost of $1$ is as follows:\n\n- Perform an operation of type $2$. Choose the prefix to be $[9]$. This incurs a cost of $1$.\n- Perform an operation of type $1$. The value of $k$ is now $2$. This incurs no cost.\n- Perform an operation of type $2$. Choose the prefix to be $[3, 4]$. This incurs a cost of $0$.\n- Perform an operation of type $2$. Choose the prefix to be $[3]$. This incurs a cost of $0$.\n- The array $a$ is now empty, and the total cost of all operations is $1$.\n\nIn the second test case, it's impossible to remove any prefix of the array since $a_1 > b_1$, so array $a$ cannot be made empty by any sequence of operations.", "cfid": "2027D1"}
{"problem_id": "2033E", "problem_title": "E. Sakurako, Kosuke, and the Permutation", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2033/E", "problem_statement": "Sakurako's exams are over, and she did excellently. As a reward, she received a permutation $p$. Kosuke was not entirely satisfied because he failed one exam and did not receive a gift. He decided to sneak into her room (thanks to the code for her lock) and spoil the permutation so that it becomes simple.\n\nA permutation $p$ is considered simple if for every $i$ $(1\\le i \\le n)$ one of the following conditions holds:\n\n- $p_i=i$\n- $p_{p_i}=i$\n\nFor example, the permutations $[1, 2, 3, 4]$, $[5, 2, 4, 3, 1]$, and $[2, 1]$ are simple, while $[2, 3, 1]$ and $[5, 2, 1, 4, 3]$ are not.\n\nIn one operation, Kosuke can choose indices $i,j$ $(1\\le i,j\\le n)$ and swap the elements $p_i$ and $p_j$.\n\nSakurako is about to return home. Your task is to calculate the minimum number of operations that Kosuke needs to perform to make the permutation simple.\n\n### Input\n\nThe first line contains one integer $t$ ($1\\le t\\le 10^4$) — the number of test cases.\n\nEach test case is described by two lines.\n\n- The first line contains one integer $n$ ($1\\le n \\le 10^6$) — the length of the permutation $p$.\n- The second line contains $n$ integers $p_i$ ($1\\le p_i\\le n$) — the elements of the permutation $p$.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $10^6$.\n\nIt is guaranteed that $p$ is a permutation.\n\n### Output\n\nFor each test case, output the minimum number of operations that Kosuke needs to perform to make the permutation simple.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n5\n\n1 2 3 4 5\n\n5\n\n5 4 3 2 1\n\n5\n\n2 3 4 5 1\n\n4\n\n2 3 4 1\n\n3\n\n1 3 2\n\n7\n\n2 3 1 5 6 7 4\n\n```\n\n#### Output #1\n\n```\n0\n0\n2\n1\n0\n2\n```\n\n### Note\n\nIn the first and second examples, the permutations are already simple.\n\nIn the fourth example, it is sufficient to swap $p_2$ and $p_4$. Thus, the permutation will become $[2, 1, 4, 3]$ in $1$ operation.", "cfid": "2033E"}
{"problem_id": "2033B", "problem_title": "B. Sakurako and Water", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2033/B", "problem_statement": "During her journey with Kosuke, Sakurako and Kosuke found a valley that can be represented as a matrix of size $n \\times n$, where at the intersection of the $i$-th row and the $j$-th column is a mountain with a height of $a_{i,j}$. If $a_{i,j} < 0$, then there is a lake there.\n\nKosuke is very afraid of water, so Sakurako needs to help him:\n\n- With her magic, she can select a square area of mountains and increase the height of each mountain on the main diagonal of that area by exactly one.\n\nMore formally, she can choose a submatrix with the upper left corner located at $(i, j)$ and the lower right corner at $(p, q)$, such that $p-i=q-j$. She can then add one to each element at the intersection of the $(i + k)$-th row and the $(j + k)$-th column, for all $k$ such that $0 \\le k \\le p-i$.\n\nDetermine the minimum number of times Sakurako must use her magic so that there are no lakes.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 200$) — the number of test cases.\n\nEach test case is described as follows:\n\n- The first line of each test case consists of a single number $n$ ($1 \\le n \\le 500$).\n- Each of the following $n$ lines consists of $n$ integers separated by spaces, which correspond to the heights of the mountains in the valley $a$ ($-10^5 \\le a_{i,j} \\le 10^5$).\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $1000$.\n\n### Output\n\nFor each test case, output the minimum number of times Sakurako will have to use her magic so that all lakes disappear.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n1\n\n1\n\n2\n\n-1 2\n\n3 0\n\n3\n\n1 2 3\n\n-2 1 -1\n\n0 0 -1\n\n5\n\n1 1 -1 -1 3\n\n-3 1 4 4 -4\n\n-1 -1 3 0 -5\n\n4 5 3 -3 -1\n\n3 1 -3 -1 5\n\n```\n\n#### Output #1\n\n```\n0\n1\n4\n19\n```", "cfid": "2033B"}
{"problem_id": "2033A", "problem_title": "A. Sakurako and Kosuke", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2033/A", "problem_statement": "Sakurako and Kosuke decided to play some games with a dot on a coordinate line. The dot is currently located in position $x=0$. They will be taking turns, and Sakurako will be the one to start.\n\nOn the $i$-th move, the current player will move the dot in some direction by $2\\cdot i-1$ units. Sakurako will always be moving the dot in the negative direction, whereas Kosuke will always move it in the positive direction.\n\nIn other words, the following will happen:\n\n1. Sakurako will change the position of the dot by $-1$, $x = -1$ now\n2. Kosuke will change the position of the dot by $3$, $x = 2$ now\n3. Sakurako will change the position of the dot by $-5$, $x = -3$ now\n4. $\\cdots$\n\nThey will keep on playing while the absolute value of the coordinate of the dot does not exceed $n$. More formally, the game continues while $-n\\le x\\le n$. It can be proven that the game will always end.\n\nYour task is to determine who will be the one who makes the last turn.\n\n### Input\n\nThe first line contains one integer $t$ ($1\\le t\\le 100$) — the number of games that Sakurako and Kosuke played.\n\nEach game is described by one number $n$ ($1 \\le n\\le 100$) — the number that defines the condition when the game ends.\n\n### Output\n\nFor each of the $t$ games, output a line with the result of that game. If Sakurako makes the last turn, output \"Sakurako\" (without quotes); else output \"Kosuke\".\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n1\n\n6\n\n3\n\n98\n\n```\n\n#### Output #1\n\n```\nKosuke\nSakurako\nKosuke\nSakurako\n```", "cfid": "2033A"}
{"problem_id": "2033F", "problem_title": "F. Kosuke's Sloth", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2033/F", "problem_statement": "Kosuke is too lazy. He will not give you any legend, just the task:\n\nFibonacci numbers are defined as follows:\n\n- $f(1)=f(2)=1$.\n- $f(n)=f(n-1)+f(n-2)$ $(3\\le n)$\n\nWe denote $G(n,k)$ as an index of the $n$-th Fibonacci number that is divisible by $k$. For given $n$ and $k$, compute $G(n,k)$.\n\nAs this number can be too big, output it by modulo $10^9+7$.\n\nFor example: $G(3,2)=9$ because the $3$-rd Fibonacci number that is divisible by $2$ is $34$. $[1,1,\\textbf{2},3,5,\\textbf{8},13,21,\\textbf{34}]$.\n\n### Input\n\nThe first line of the input data contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first and only line contains two integers $n$ and $k$ ($1 \\le n \\le 10^{18}$, $1 \\le k \\le 10^5$).\n\nIt is guaranteed that the sum of $k$ across all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case, output the only number: the value $G(n,k)$ taken by modulo $10^9+7$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3 2\n\n100 1\n\n1000000000000 1377\n\n```\n\n#### Output #1\n\n```\n9\n100\n999244007\n```", "cfid": "2033F"}
{"problem_id": "2033C", "problem_title": "C. Sakurako's Field Trip", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2033/C", "problem_statement": "Even in university, students need to relax. That is why Sakurakos teacher decided to go on a field trip. It is known that all of the students will be walking in one line. The student with index $i$ has some topic of interest which is described as $a_i$. As a teacher, you want to minimise the disturbance of the line of students.\n\nThe disturbance of the line is defined as the number of neighbouring people with the same topic of interest. In other words, disturbance is the number of indices $j$ ($1 \\le j < n$) such that $a_j = a_{j + 1}$.\n\nIn order to do this, you can choose index $i$ ($1\\le i\\le n$) and swap students at positions $i$ and $n-i+1$. You can perform any number of swaps.\n\nYour task is to determine the minimal amount of disturbance that you can achieve by doing the operation described above any number of times.\n\n### Input\n\nThe first line contains one integer $t$ ($1\\le t\\le 10^4$) — the number of test cases.\n\nEach test case is described by two lines.\n\n- The first line contains one integer $n$ ($2 \\le n \\le 10^5$) — the length of the line of students.\n- The second line contains $n$ integers $a_i$ ($1\\le a_i\\le n$) — the topics of interest of students in line.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, output the minimal possible disturbance of the line that you can achieve.\n\n### Example\n\n#### Input #1\n\n```\n\n9\n\n5\n\n1 1 1 2 3\n\n6\n\n2 1 2 2 1 1\n\n4\n\n1 2 1 1\n\n6\n\n2 1 1 2 2 4\n\n4\n\n2 1 2 3\n\n6\n\n1 2 2 1 2 1\n\n5\n\n4 5 5 1 5\n\n7\n\n1 4 3 5 1 1 3\n\n7\n\n3 1 3 2 2 3 3\n\n```\n\n#### Output #1\n\n```\n1\n2\n1\n0\n0\n1\n1\n0\n2\n```\n\n### Note\n\nIn the first example, it is necessary to apply the operation to $i=2$, thus the array will become $[1, \\textbf{2}, 1, \\textbf{1}, 3]$, with the bold elements indicating those that have swapped places. The disturbance of this array is equal to $1$.\n\nIn the fourth example, it is sufficient to apply the operation to $i=3$, thus the array will become $[2, 1, \\textbf{2}, \\textbf{1}, 2, 4]$. The disturbance of this array is equal to $0$.\n\nIn the eighth example, it is sufficient to apply the operation to $i=3$, thus the array will become $[1, 4, \\textbf{1}, 5, \\textbf{3}, 1, 3]$. The disturbance of this array is equal to $0$.", "cfid": "2033C"}
{"problem_id": "2033D", "problem_title": "D. Kousuke's Assignment", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2033/D", "problem_statement": "After a trip with Sakurako, Kousuke was very scared because he forgot about his programming assignment. In this assignment, the teacher gave him an array $a$ of $n$ integers and asked him to calculate the number of non-overlapping segments of the array $a$, such that each segment is considered beautiful.\n\nA segment $[l,r]$ is considered beautiful if $a_l + a_{l+1} + \\dots + a_{r-1} + a_r=0$.\n\nFor a fixed array $a$, your task is to compute the maximum number of non-overlapping beautiful segments.\n\n### Input\n\nThe first line of input contains the number $t$ ($1 \\le t \\le 10^4$) — the number of test cases. Each test case consists of $2$ lines.\n\n- The first line contains one integer $n$ ($1 \\le n \\le 10^5$) — the length of the array.\n- The second line contains $n$ integers $a_i$ ($-10^5 \\le a_i \\le 10^5$) — the elements of the array $a$.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $3\\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer: the maximum number of non-overlapping beautiful segments.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n5\n\n2 1 -3 2 1\n\n7\n\n12 -4 4 43 -3 -5 8\n\n6\n\n0 -4 0 3 0 1\n\n```\n\n#### Output #1\n\n```\n1\n2\n3\n```", "cfid": "2033D"}
{"problem_id": "2023B", "problem_title": "B. Skipping", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2023/B", "problem_statement": "It is already the year $3024$, ideas for problems have long run out, and the olympiad now takes place in a modified individual format. The olympiad consists of $n$ problems, numbered from $1$ to $n$. The $i$-th problem has its own score $a_i$ and a certain parameter $b_i$ ($1 \\le b_i \\le n$).\n\nInitially, the testing system gives the participant the first problem. When the participant is given the $i$-th problem, they have two options:\n\n- They can submit the problem and receive $a_i$ points;\n- They can skip the problem, in which case they will never be able to submit it.\n\nThen, the testing system selects the next problem for the participant from problems with indices $j$, such that:\n\n- If he submitted the $i$-th problem, it looks at problems with indices $j < i$;\n- If he skipped the $i$-th problem, it looks at problems with indices $j \\leq b_i$.\n\nAmong these problems, it selects the problem with the maximum index that it has not previously given to the participant (he has neither submitted nor skipped it before). If there is no such problem, then the competition for the participant ends, and their result is equal to the sum of points for all submitted problems. In particular, if the participant submits the first problem, then the competition for them ends. Note that the participant receives each problem at most once.\n\nProkhor has prepared thoroughly for the olympiad, and now he can submit any problem. Help him determine the maximum number of points he can achieve.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\leq t \\leq 10^5$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\leq n \\leq 4 \\cdot 10^5$) — the number of problems in the olympiad.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$) — the scores of the problems.\n\nThe third line of each test case contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($1 \\leq b_i \\leq n$) — the parameters of the problems.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $4 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the maximum number of points that Prokhor can achieve.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2\n\n15 16\n\n2 1\n\n5\n\n10 10 100 100 1000\n\n3 4 1 1 1\n\n3\n\n100 49 50\n\n3 2 2\n\n4\n\n100 200 300 1000\n\n2 3 4 1\n\n```\n\n#### Output #1\n\n```\n16\n200\n100\n1000\n```\n\n### Note\n\nIn the first test case, Prokhor can skip the first problem; then he will receive the problem with index $b_1 = 2$. Prokhor can submit it and receive $a_2 = 16$ points. After that, the competition will end because Prokhor has already received all problems. Note that if Prokhor submits the first problem, he will receive $a_1 = 15$ points, but the competition will end immediately.\n\nIn the second test case, Prokhor can skip the first problem; then he will receive the problem with index $b_1 = 3$. Prokhor can submit it and receive $a_3 = 100$ points. After that, Prokhor will receive the second problem, which he can skip to receive the problem with index $b_2 = 4$. Prokhor can submit the fourth problem and receive another $a_4 = 100$ points. After that, the competition ends because Prokhor has already received all problems with indices not exceeding $4$. Thus, Prokhor will receive a total of $200$ points.\n\nIn the third test case, Prokhor can submit the first problem and receive $100$ points, after which the competition will end immediately.", "cfid": "2023B"}
{"problem_id": "2024B", "problem_title": "B. Buying Lemonade", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2024/B", "problem_statement": "There is a vending machine that sells lemonade. The machine has a total of $n$ slots. You know that initially, the $i$-th slot contains $a_i$ cans of lemonade. There are also $n$ buttons on the machine, each button corresponds to a slot, with exactly one button corresponding to each slot. Unfortunately, the labels on the buttons have worn off, so you do not know which button corresponds to which slot.\n\nWhen you press the button corresponding to the $i$-th slot, one of two events occurs:\n\n- If there is a can of lemonade in the $i$-th slot, it will drop out and you will take it. At this point, the number of cans in the $i$-th slot decreases by $1$.\n- If there are no cans of lemonade left in the $i$-th slot, nothing will drop out.\n\nAfter pressing, the can drops out so quickly that it is impossible to track from which slot it fell. The contents of the slots are hidden from your view, so you cannot see how many cans are left in each slot. The only thing you know is the initial number of cans in the slots: $a_1, a_2, \\ldots, a_n$.\n\nDetermine the minimum number of button presses needed to guarantee that you receive at least $k$ cans of lemonade.\n\nNote that you can adapt your strategy during the button presses based on whether you received a can or not. It is guaranteed that there are at least $k$ cans of lemonade in total in the machine. In other words, $k \\leq a_1 + a_2 + \\ldots + a_n$.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\le n \\le 2 \\cdot 10^5$, $1 \\leq k \\leq 10^9$) — the number of slots in the machine and the required number of cans of lemonade.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$) — the number of cans in the slots.\n\nIt is guaranteed that $k \\leq a_1 + a_2 + \\ldots + a_n$, meaning there are at least $k$ cans of lemonade in the machine.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the minimum number of button presses needed to guarantee that you receive at least $k$ cans of lemonade.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n2 1\n\n1 1\n\n2 2\n\n1 2\n\n3 4\n\n2 1 3\n\n10 50\n\n1 1 3 8 8 9 12 13 27 27\n\n2 1000000000\n\n1000000000 500000000\n\n```\n\n#### Output #1\n\n```\n1\n2\n5\n53\n1000000000\n```\n\n### Note\n\nIn the first test case, we can simply press the first button and receive one can of lemonade.\n\nIn the second test case, we can press each button once and guarantee that we receive $2$ cans of lemonade. Note that if we simply press one button twice, we might not be lucky, and that button could correspond to the first slot, in which case we would only receive $1$ can of lemonade for two presses.\n\nIn the third test case, one of the optimal strategies is as follows:\n\nPress the first button twice. After the first press, a can of lemonade will definitely drop out. Then there are two options:\n\n- If no can of lemonade drops after the second press, we know that this button must correspond to the second slot, since $a_2 = 1$ and $a_1, a_3 > 1$. Then we can press the second button twice and the third button once. Since $a_1, a_3 \\geq 2$, we will definitely receive three cans of lemonade for these three presses. Thus, after $5$ presses, we will have $4$ cans of lemonade.\n- If a can of lemonade drops after the second press, we can make one press on the second button and one press on the third button. After each of these presses, we will definitely receive a can of lemonade. Thus, after $4$ presses, we will have $4$ cans of lemonade.\n\nIt can be shown that it is impossible to guarantee receiving $4$ cans of lemonade with only $4$ presses, so the answer is $5$.", "cfid": "2024B"}
{"problem_id": "2023A", "problem_title": "A. Concatenation of Arrays", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2023/A", "problem_statement": "You are given $n$ arrays $a_1$, $\\ldots$, $a_n$. The length of each array is two. Thus, $a_i = [a_{i, 1}, a_{i, 2}]$. You need to concatenate the arrays into a single array of length $2n$ such that the number of inversions$^{\\dagger}$ in the resulting array is minimized. Note that you do not need to count the actual number of inversions.\n\nMore formally, you need to choose a permutation$^{\\ddagger}$ $p$ of length $n$, so that the array $b = [a_{p_1,1}, a_{p_1,2}, a_{p_2, 1}, a_{p_2, 2}, \\ldots, a_{p_n,1}, a_{p_n,2}]$ contains as few inversions as possible.\n\n$^{\\dagger}$The number of inversions in an array $c$ is the number of pairs of indices $i$ and $j$ such that $i < j$ and $c_i > c_j$.\n\n$^{\\ddagger}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 10^5$) — the number of arrays.\n\nEach of the following $n$ lines contains two integers $a_{i,1}$ and $a_{i,2}$ ($1 \\le a_{i,j} \\le 10^9$) — the elements of the $i$-th array.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, output $2n$ integers — the elements of the array you obtained. If there are multiple solutions, output any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2\n\n1 4\n\n2 3\n\n3\n\n3 2\n\n4 3\n\n2 1\n\n5\n\n5 10\n\n2 3\n\n9 6\n\n4 1\n\n8 7\n\n1\n\n10 20\n\n```\n\n#### Output #1\n\n```\n2 3 1 4\n2 1 3 2 4 3\n4 1 2 3 5 10 8 7 9 6\n10 20\n```\n\n### Note\n\nIn the first test case, we concatenated the arrays in the order $2, 1$. Let's consider the inversions in the resulting array $b = [2, 3, 1, 4]$:\n\n- $i = 1$, $j = 3$, since $b_1 = 2 > 1 = b_3$;\n- $i = 2$, $j = 3$, since $b_2 = 3 > 1 = b_3$.\n\nThus, the number of inversions is $2$. It can be proven that this is the minimum possible number of inversions.\n\nIn the second test case, we concatenated the arrays in the order $3, 1, 2$. Let's consider the inversions in the resulting array $b = [2, 1, 3, 2, 4, 3]$:\n\n- $i = 1$, $j = 2$, since $b_1 = 2 > 1 = b_2$;\n- $i = 3$, $j = 4$, since $b_3 = 3 > 2 = b_4$;\n- $i = 5$, $j = 6$, since $b_5 = 4 > 3 = b_6$.\n\nThus, the number of inversions is $3$. It can be proven that this is the minimum possible number of inversions.\n\nIn the third test case, we concatenated the arrays in the order $4, 2, 1, 5, 3$.", "cfid": "2023A"}
{"problem_id": "2024A", "problem_title": "A. Profitable Interest Rate", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2024/A", "problem_statement": "Alice has $a$ coins. She can open a bank deposit called \"Profitable\", but the minimum amount required to open this deposit is $b$ coins.\n\nThere is also a deposit called \"Unprofitable\", which can be opened with any amount of coins. Alice noticed that if she opens the \"Unprofitable\" deposit with $x$ coins, the minimum amount required to open the \"Profitable\" deposit decreases by $2x$ coins. However, these coins cannot later be deposited into the \"Profitable\" deposit.\n\nHelp Alice determine the maximum number of coins she can deposit into the \"Profitable\" deposit if she first deposits some amount of coins (possibly $0$) into the \"Unprofitable\" deposit. If Alice can never open the \"Profitable\" deposit, output $0$.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. The description of the test cases follows.\n\nA single line of each test case contains two integers $a$ and $b$ ($1 \\le a, b \\le 10^9$) — the number of coins Alice has and the initial minimum amount required to open the \"Profitable\" deposit.\n\n### Output\n\nFor each test case, output a single integer — the maximum number of coins that Alice can deposit into the \"Profitable\" deposit. If Alice can never open the \"Profitable\" deposit, output $0$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n10 5\n\n7 9\n\n5 100\n\n1 1\n\n1 2\n\n```\n\n#### Output #1\n\n```\n10\n5\n0\n1\n0\n```\n\n### Note\n\nIn the first test case, $a \\ge b$, so Alice can immediately open the \"Profitable\" deposit with all $10$ coins.\n\nIn the second test case, Alice can open the \"Unprofitable\" deposit with $2$ coins. Then she will have $5$ coins left, but the minimum amount required to open the \"Profitable\" deposit will decrease by $4$ coins, making it equal to $5$ coins. Thus, Alice will be able to open the \"Profitable\" deposit with $5$ coins.\n\nIn the third test case, Alice will not be able to open the \"Profitable\" deposit.", "cfid": "2024A"}
{"problem_id": "2030C", "problem_title": "C. A TRUE Battle", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2030/C", "problem_statement": "Alice and Bob are playing a game. There is a list of $n$ booleans, each of which is either true or false, given as a binary string $^{\\text{∗}}$ of length $n$ (where $\\texttt{1}$ represents true, and $\\texttt{0}$ represents false). Initially, there are no operators between the booleans.\n\nAlice and Bob will take alternate turns placing and or or between the booleans, with Alice going first. Thus, the game will consist of $n-1$ turns since there are $n$ booleans. Alice aims for the final statement to evaluate to true, while Bob aims for it to evaluate to false. Given the list of boolean values, determine whether Alice will win if both players play optimally.\n\nTo evaluate the final expression, repeatedly perform the following steps until the statement consists of a single true or false:\n\n- If the statement contains an and operator, choose any one and replace the subexpression surrounding it with its evaluation.\n- Otherwise, the statement contains an or operator. Choose any one and replace the subexpression surrounding the or with its evaluation.\n\nFor example, the expression true or false and false is evaluated as true or (false and false) $=$ true or false $=$ true. It can be shown that the result of any compound statement is unique.\n\n$^{\\text{∗}}$A binary string is a string that only consists of characters $\\texttt{0}$ and $\\texttt{1}$\n\n### Input\n\nThe first line contains $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe first line of each test case contains an integer $n$ ($2 \\leq n \\leq 2 \\cdot 10^5$) — the length of the string.\n\nThe second line contains a binary string of length $n$, consisting of characters $\\texttt{0}$ and $\\texttt{1}$ — the list of boolean values.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each testcase, output \"YES\" (without quotes) if Alice wins, and \"NO\" (without quotes) otherwise.\n\nYou can output \"YES\" and \"NO\" in any case (for example, strings \"yES\", \"yes\" and \"Yes\" will be recognized as a positive response).\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n2\n\n11\n\n3\n\n010\n\n12\n\n101111111100\n\n10\n\n0111111011\n\n8\n\n01000010\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nYES\nYES\nNO\n```\n\n### Note\n\nIn the first testcase, Alice can place and between the two booleans. The game ends as there are no other places to place operators, and Alice wins because true and true is true.\n\nIn the second testcase, Alice can place or between the middle true and the left false. Bob can place and between the middle true and the right false. The statement false or true and false is false.\n\nNote that these examples may not be the best strategies for either Alice or Bob.", "cfid": "2030C"}
{"problem_id": "2030B", "problem_title": "B. Minimise Oneness", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2030/B", "problem_statement": "For an arbitrary binary string $t$$^{\\\\text{∗}}$, let $f(t)$ be the number of non-empty subsequences$^{\\\\text{†}}$ of $t$ that contain only $\\\\mathtt{0}$, and let $g(t)$ be the number of non-empty subsequences of $t$ that contain at least one $\\\\mathtt{1}$.\n\nNote that for $f(t)$ and for $g(t)$, each subsequence is counted as many times as it appears in $t$. E.g., $f(\\mathtt{000}) = 7, g(\\mathtt{100}) = 4$.\n\nWe define the oneness of the binary string $t$ to be $|f(t)-g(t)|$, where for an arbitrary integer $z$, $|z|$ represents the absolute value of $z$.\n\nYou are given a positive integer $n$. Find a binary string $s$ of length $n$ such that its oneness is as small as possible. If there are multiple strings, you can print any of them.\n\n$^{\\text{∗}}$A binary string is a string that only consists of characters $\\texttt{0}$ and $\\texttt{1}$.\n\n$^{\\text{†}}$A sequence $a$ is a subsequence of a sequence $b$ if $a$ can be obtained from $b$ by the deletion of several (possibly, zero or all) elements. For example, subsequences of $\\mathtt{1011101}$ are $\\mathtt{0}$, $\\mathtt{1}$, $\\mathtt{11111}$, $\\mathtt{0111}$, but not $\\mathtt{000}$ nor $\\mathtt{11100}$.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe only line of each test case contains an integer $n$ ($1 \\leq n \\leq 2\\cdot10^5$) — the length of $s$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2\\cdot10^5$.\n\n### Output\n\nFor each test case, output $s$ on a new line. If multiple answers exist, output any.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n1\n\n2\n\n3\n\n```\n\n#### Output #1\n\n```\n0\n01\n010\n```\n\n### Note\n\nIn the first test case, for the example output, $f(t)=1$ because there is one subsequence that contains only $\\mathtt{0}$ ($\\mathtt{0}$), and $g(t)=0$ because there are no subsequences that contain at least one $1$. The oneness is $|1-0|=1$. The output $\\mathtt{1}$ is correct as well because its oneness is $|0-1|=1$.\n\nFor the example output of the second test case, $f(t)=1$ because there is one non-empty subsequence that contains only $\\mathtt{0}$, and $g(t)=2$ because there are two non-empty subsequences that contain at least one $\\mathtt{1}$ ($\\mathtt{01}$ and $\\mathtt{1}$). The oneness is thus $|1-2|=1$. It can be shown that $1$ is the minimum possible value of its oneness over all possible binary strings of size $2$.", "cfid": "2030B"}
{"problem_id": "2030D", "problem_title": "D. QED's Favorite Permutation", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2030/D", "problem_statement": "QED is given a permutation$^{\\text{∗}}$ $p$ of length $n$. He also has a string $s$ of length $n$ containing only characters $\\texttt{L}$ and $\\texttt{R}$. QED only likes permutations that are sorted in non-decreasing order. To sort $p$, he can select any of the following operations and perform them any number of times:\n\n- Choose an index $i$ such that $s_i = \\texttt{L}$. Then, swap $p_i$ and $p_{i-1}$. It is guaranteed that $s_1 \\neq \\texttt{L}$.\n- Choose an index $i$ such that $s_i = \\texttt{R}$. Then, swap $p_i$ and $p_{i+1}$. It is guaranteed that $s_n \\neq \\texttt{R}$.\n\nHe is also given $q$ queries. In each query, he selects an index $i$ and changes $s_i$ from $\\texttt{L}$ to $\\texttt{R}$ (or from $\\texttt{R}$ to $\\texttt{L}$). Note that the changes are persistent.\n\nAfter each query, he asks you if it is possible to sort $p$ in non-decreasing order by performing the aforementioned operations any number of times. Note that before answering each query, the permutation $p$ is reset to its original form.\n\n$^{\\text{∗}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n### Input\n\nThe first line contains $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $q$ ($3 \\leq n \\leq 2 \\cdot 10^5$, $1 \\leq q \\leq 2 \\cdot 10^5$) – the length of the permutation and the number of queries.\n\nThe following line contains $n$ integers $p_1, p_2, \\ldots, p_n$ ($1 \\leq p_i \\leq n$, $p$ is a permutation).\n\nThe following line contains $n$ characters $s_1s_2 \\ldots s_n$. It is guaranteed that $s_i$ is either $\\texttt{L}$ or $\\texttt{R}$, $s_1 = \\texttt{R}$, and $s_n = \\texttt{L}$.\n\nThe following $q$ lines contain an integer $i$ ($2 \\leq i \\leq n-1$), denoting that $s_i$ is changed from $\\texttt{L}$ to $\\texttt{R}$ (or from $\\texttt{R}$ to $\\texttt{L}$).\n\nIt is guaranteed that the sum of $n$ and $q$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each query, output \"YES\" (without quotes) if it is possible, and \"NO\" (without quotes) otherwise.\n\nYou can output \"YES\" and \"NO\" in any case (for example, strings \"yES\", \"yes\" and \"Yes\" will be recognized as a positive response).\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n5 3\n\n1 4 2 5 3\n\nRLRLL\n\n2\n\n4\n\n3\n\n8 5\n\n1 5 2 4 8 3 6 7\n\nRRLLRRRL\n\n4\n\n3\n\n5\n\n3\n\n4\n\n6 2\n\n1 2 3 4 5 6\n\nRLRLRL\n\n4\n\n5\n\n```\n\n#### Output #1\n\n```\nYES\nYES\nNO\nNO\nYES\nNO\nNO\nNO\nYES\nYES\n```\n\n### Note\n\nIn the first testcase, $s = \\texttt{RRRLL}$ after the first query. QED may sort $p$ using the following operations:\n\n- Initially, $p = [1,4,2,5,3]$.\n- Select $i = 2$ and swap $p_2$ with $p_{3}$. Now, $p = [1,2,4,5,3]$.\n- Select $i = 5$ and swap $p_5$ with $p_{4}$. Now, $p = [1,2,4,3,5]$.\n- Select $i = 4$ and swap $p_4$ with $p_{3}$. Now, $p = [1,2,3,4,5]$, which is in non-decreasing order.\n\nIt can be shown that it is impossible to sort the array after all three updates of the first testcase.", "cfid": "2030D"}
{"problem_id": "2030A", "problem_title": "A. A Gift From Orangutan", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2030/A", "problem_statement": "While exploring the jungle, you have bumped into a rare orangutan with a bow tie! You shake hands with the orangutan and offer him some food and water. In return...\n\nThe orangutan has gifted you an array $a$ of length $n$. Using $a$, you will construct two arrays $b$ and $c$, both containing $n$ elements, in the following manner:\n\n- $b_i = \\min(a_1, a_2, \\ldots, a_i)$ for each $1 \\leq i \\leq n$.\n- $c_i = \\max(a_1, a_2, \\ldots, a_i)$ for each $1 \\leq i \\leq n$.\n\nDefine the score of $a$ as $\\sum_{i=1}^n c_i - b_i$ (i.e. the sum of $c_i - b_i$ over all $1 \\leq i \\leq n$). Before you calculate the score, you can shuffle the elements of $a$ however you want.\n\nFind the maximum score that you can get if you shuffle the elements of $a$ optimally.\n\n### Input\n\nThe first line contains $t$ ($1 \\leq t \\leq 100$) — the number of test cases.\n\nThe first line of each test case contains an integer $n$ ($1 \\leq n \\leq 1000$) — the number of elements in $a$.\n\nThe following line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 1000$) — the elements of the array $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $1000$.\n\n### Output\n\nFor each test case, output the maximum score that you can get.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n1\n\n69\n\n3\n\n7 6 5\n\n5\n\n1 1 1 2 2\n\n```\n\n#### Output #1\n\n```\n0\n4\n4\n```\n\n### Note\n\nIn the first test case, there is no other way to rearrange $a$. So, $b = [69]$ and $c = [69]$. The only possible score is $69 - 69 = 0$.\n\nIn the second test case, you can rearrange $a$ as $[7, 5, 6]$. Here, $b = [7, 5, 5]$ and $c = [7, 7, 7]$. The score in this case is $(7 - 7) + (7 - 5) + (7 - 5) = 4$. It can be shown this is the maximum possible score.", "cfid": "2030A"}
{"problem_id": "2025D", "problem_title": "D. Attribute Checks", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2025/D", "problem_statement": "Imagine a game where you play as a character that has two attributes: \"Strength\" and \"Intelligence\", that are at zero level initially.\n\nDuring the game, you'll acquire $m$ attribute points that allow you to increase your attribute levels — one point will increase one of the attributes by one level. But sometimes, you'll encounter a so-called \"Attribute Checks\": if your corresponding attribute is high enough, you'll pass it; otherwise, you'll fail it.\n\nSpending some time, you finally prepared a list which contains records of all points you got and all checks you've met. And now you're wondering: what is the maximum number of attribute checks you can pass in a single run if you'd spend points wisely?\n\nNote that you can't change the order of records.\n\n### Input\n\nThe first line contains two integers $n$ and $m$ ($1 \\le m \\le 5000$; $m < n \\le 2 \\cdot 10^6$) — the number of records in the list and the total number of points you'll get during the game.\n\nThe second line contains $n$ integers $r_1, r_2, \\dots, r_n$ ($-m \\le r_i \\le m$), where $r_i$ encodes the $i$-th record:\n\n- If $r_i = 0$, then the $i$-th record is an acquiring one attribute point. You can spend to level up either Strength or Intelligence;\n- If $r_i > 0$, then it's an Intelligence check: if your Intelligence level is greater than or equal to $|r_i|$, you pass.\n- If $r_i < 0$, then it's a Strength check: if your Strength level is greater than or equal to $|r_i|$, you pass.\n\nAdditional constraint on the input: the sequence $r_1, r_2, \\dots, r_n$ contains exactly $m$ elements equal to $0$.\n\n### Output\n\nPrint one integer — the maximum number of checks you can pass.\n\n### Examples\n\n#### Input #1\n\n```\n\n10 5\n\n0 1 0 2 0 -3 0 -4 0 -5\n\n```\n\n#### Output #1\n\n```\n3\n```\n\n#### Input #2\n\n```\n\n3 1\n\n1 -1 0\n\n```\n\n#### Output #2\n\n```\n0\n```\n\n#### Input #3\n\n```\n\n9 3\n\n0 0 1 0 2 -3 -2 -2 1\n\n```\n\n#### Output #3\n\n```\n4\n```\n\n### Note\n\nIn the first test, it's optimal to spend each point in Strength, so you'll fail $2$ Intelligence checks but pass $3$ Strength checks.\n\nIn the second test, you'll fail both checks, since the first point you get comes after the checks.\n\nIn the third test, one of the optimal strategies is:\n\n1. spend the first point on Intelligence;\n2. spend the second point on Strength;\n3. spend the third point on Strength;\n\nAs a result, you'll pass $2$ Intelligence checks $r_3$ and $r_9$ and $2$ Strength checks $r_7$ and $r_8$.", "cfid": "2025D"}
{"problem_id": "2025A", "problem_title": "A. Two Screens", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2025/A", "problem_statement": "There are two screens which can display sequences of uppercase Latin letters. Initially, both screens display nothing.\n\nIn one second, you can do one of the following two actions:\n\n- choose a screen and an uppercase Latin letter, and append that letter to the end of the sequence displayed on that screen;\n- choose a screen and copy the sequence from it to the other screen, overwriting the sequence that was displayed on the other screen.\n\nYou have to calculate the minimum number of seconds you have to spend so that the first screen displays the sequence $s$, and the second screen displays the sequence $t$.\n\n### Input\n\nThe first line contains one integer $q$ ($1 \\le q \\le 500$) — the number of test cases.\n\nEach test case consists of two lines. The first line contains the string $s$, and the second line contains the string $t$ ($1 \\le |s|, |t| \\le 100$). Both strings consist of uppercase Latin letters.\n\n### Output\n\nFor each test case, print one integer — the minimum possible number of seconds you have to spend so that the first screen displays the sequence $s$, and the second screen displays the sequence $t$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\nGARAGE\n\nGARAGEFORSALE\n\nABCDE\n\nAABCD\n\nTRAINING\n\nDRAINING\n\n```\n\n#### Output #1\n\n```\n14\n10\n16\n```\n\n### Note\n\nIn the first test case, the following sequence of actions is possible:\n\n- spend $6$ seconds to write the sequence GARAGE on the first screen;\n- copy the sequence from the first screen to the second screen;\n- spend $7$ seconds to complete the sequence on the second screen by writing FORSALE.\n\nIn the second test case, the following sequence of actions is possible:\n\n- spend $1$ second to write the sequence A on the second screen;\n- copy the sequence from the second screen to the first screen;\n- spend $4$ seconds to complete the sequence on the first screen by writing BCDE;\n- spend $4$ seconds to complete the sequence on the second screen by writing ABCD.\n\nIn the third test case, the fastest way to display the sequences is to type both of them character by character without copying, and this requires $16$ seconds.", "cfid": "2025A"}
{"problem_id": "2025C", "problem_title": "C. New Game", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2025/C", "problem_statement": "There's a new game Monocarp wants to play. The game uses a deck of $n$ cards, where the $i$-th card has exactly one integer $a_i$ written on it.\n\nAt the beginning of the game, on the first turn, Monocarp can take any card from the deck. During each subsequent turn, Monocarp can take exactly one card that has either the same number as on the card taken on the previous turn or a number that is one greater than the number on the card taken on the previous turn.\n\nIn other words, if on the previous turn Monocarp took a card with the number $x$, then on the current turn he can take either a card with the number $x$ or a card with the number $x + 1$. Monocarp can take any card which meets that condition, regardless of its position in the deck.\n\nAfter Monocarp takes a card on the current turn, it is removed from the deck.\n\nAccording to the rules of the game, the number of distinct numbers written on the cards that Monocarp has taken must not exceed $k$.\n\nIf, after a turn, Monocarp cannot take a card without violating the described rules, the game ends.\n\nYour task is to determine the maximum number of cards that Monocarp can take from the deck during the game, given that on the first turn he can take any card from the deck.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\le k \\le n \\le 200\\,000$) — the number of cards in the deck and the maximum number of distinct numbers that can be written on the cards that Monocarp takes.\n\nThe second line contains a sequence of integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^{9}$), where $a_i$ is the number written on the $i$-th card.\n\nAdditional constraint of the input: the sum of $n$ over all test cases doesn't exceed $200\\,000$.\n\n### Output\n\nFor each test case, print the maximum number of cards that Monocarp can take from the deck during the game, given that on the first turn he can take any card from the deck.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n10 2\n\n5 2 4 3 4 3 4 5 3 2\n\n5 1\n\n10 11 10 11 10\n\n9 3\n\n4 5 4 4 6 5 4 4 6\n\n3 2\n\n1 3 1\n\n```\n\n#### Output #1\n\n```\n6\n3\n9\n2\n```\n\n### Note\n\nIn the first example, Monocarp needs to take any of the cards with the number $3$. On the next two turns, he needs to take the two remaining cards with the number $3$. On the next three turns, he needs to take three cards with the number $4$. After that, Monocarp will not be able to take any more cards from the deck, and he will have $6$ cards.", "cfid": "2025C"}
{"problem_id": "2025B", "problem_title": "B. Binomial Coefficients, Kind Of", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2025/B", "problem_statement": "Recently, akshiM met a task that needed binomial coefficients to solve. He wrote a code he usually does that looked like this:\n\n```\nfor (int n = 0; n < N; n++) { // loop over n from 0 to N-1 (inclusive)\n\nC\\[n\\]\\[0\\] = 1;\n\nC\\[n\\]\\[n\\] = 1;\n\nfor (int k = 1; k < n; k++) // loop over k from 1 to n-1 (inclusive)\n\nC\\[n\\]\\[k\\] = C\\[n\\]\\[k - 1\\] + C\\[n - 1\\]\\[k - 1\\];\n\n}\n\n```\n\nUnfortunately, he made an error, since the right formula is the following:\n\n```\nC\\[n\\]\\[k\\] = C\\[n - 1\\]\\[k\\] + C\\[n - 1\\]\\[k - 1\\]\n\n```\n\nBut his team member keblidA is interested in values that were produced using the wrong formula. Please help him to calculate these coefficients for $t$ various pairs $(n_i, k_i)$. Note that they should be calculated according to the first (wrong) formula.\n\nSince values $C[n_i][k_i]$ may be too large, print them modulo $10^9 + 7$.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^5$) — the number of pairs. Next, $t$ pairs are written in two lines.\n\nThe second line contains $t$ integers $n_1, n_2, \\dots, n_t$ ($2 \\le n_i \\le 10^5$).\n\nThe third line contains $t$ integers $k_1, k_2, \\dots, k_t$ ($1 \\le k_i < n_i$).\n\n### Output\n\nPrint $t$ integers $C[n_i][k_i]$ modulo $10^9 + 7$.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n2 5 5 100000 100000 100000 100000\n\n1 2 3 1 33333 66666 99999\n\n```\n\n#### Output #1\n\n```\n2\n4\n8\n2\n326186014\n984426998\n303861760\n```", "cfid": "2025B"}
{"problem_id": "2022C", "problem_title": "C. Gerrymandering", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2022/C", "problem_statement": "We all steal a little bit. But I have only one hand, while my adversaries have two.\n\nÁlvaro Obregón\n\nÁlvaro and José are the only candidates running for the presidency of Tepito, a rectangular grid of $2$ rows and $n$ columns, where each cell represents a house. It is guaranteed that $n$ is a multiple of $3$.\n\nUnder the voting system of Tepito, the grid will be split into districts, which consist of any $3$ houses that are connected$^{\\text{∗}}$. Each house will belong to exactly one district.\n\nEach district will cast a single vote. The district will vote for Álvaro or José respectively if at least $2$ houses in that district select them. Therefore, a total of $\\frac{2n}{3}$ votes will be cast.\n\nAs Álvaro is the current president, he knows exactly which candidate each house will select. If Álvaro divides the houses into districts optimally, determine the maximum number of votes he can get.\n\n$^{\\text{∗}}$A set of cells is connected if there is a path between any $2$ cells that requires moving only up, down, left and right through cells in the set.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains one integer $n$ ($3 \\le n \\le 10^5$; $n$ is a multiple of $3$) — the number of columns of Tepito.\n\nThe following two lines each contain a string of length $n$. The $i$-th line contains the string $s_i$, consisting of the characters $\\texttt{A}$ and $\\texttt{J}$. If $s_{i,j}=\\texttt{A}$, the house in the $i$-th row and $j$-th column will select Álvaro. Otherwise if $s_{i,j}=\\texttt{J}$, the house will select José.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, output a single integer — the maximum number of districts Álvaro can win by optimally dividing the houses into districts.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3\n\nAAA\n\nAJJ\n\n6\n\nJAJAJJ\n\nJJAJAJ\n\n6\n\nAJJJAJ\n\nAJJAAA\n\n9\n\nAJJJJAJAJ\n\nJAAJJJJJA\n\n```\n\n#### Output #1\n\n```\n2\n2\n3\n2\n```\n\n### Note\n\nThe image below showcases the optimal arrangement of districts Álvaro can use for each test case in the example.\n\n![](https://espresso.codeforces.com/201cafe7ad173f25765de51cfc513d2eb124be57.png)", "cfid": "2022C"}
{"problem_id": "2022A", "problem_title": "A. Bus to Pénjamo", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2022/A", "problem_statement": "Ya vamos llegando a Péeeenjamoo ♫♫♫\n\nThere are $n$ families travelling to Pénjamo to witness Mexico's largest-ever \"walking a chicken on a leash\" marathon. The $i$-th family has $a_i$ family members. All families will travel using a single bus consisting of $r$ rows with $2$ seats each.\n\nA person is considered happy if:\n\n- Another family member is seated in the same row as them, or\n- They are sitting alone in their row (with an empty seat next to them).\n\nDetermine the maximum number of happy people in an optimal seating arrangement. Note that everyone must be seated in the bus.\n\nIt is guaranteed that all family members will fit on the bus. Formally, it is guaranteed that $\\displaystyle\\sum_{i=1}^{n}a_i \\le 2r$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $r$ ($1 \\le n \\le 100$; $1 \\le r \\le 500$) — the number of families and the number of rows in the bus.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10$) — the number of family members in each family.\n\n### Output\n\nFor each test case, output the maximum number of happy people in an optimal seating arrangement.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3 3\n\n2 3 1\n\n3 3\n\n2 2 2\n\n4 5\n\n1 1 2 2\n\n4 5\n\n3 1 1 3\n\n```\n\n#### Output #1\n\n```\n4\n6\n6\n6\n```\n\n### Note\n\nIn the first test case, the two members of the first family can sit together in the first row, while the two members of the second family can sit together in the second row. The remaining member of the second family can sit in the third row along with a member of the third family. This seating arrangement is shown below, where the $4$ happy people are colored green.\n\n$\\color{green}{1}\n\n$$\\color{green}{1}$$\n\ncolor{green}{2}\n\n$$\\color{green}{2}$$\n\n2$$3$\n\nIn the second test case, a possible seating arrangement with $6$ happy people is shown below.\n\n$\\color{green}{3}\n\n$$\\color{green}{3}$$\n\ncolor{green}{1}\n\n$$\\color{green}{1}$$\n\ncolor{green}{2}$$\\color{green}{2}$\n\nIn the third test case, a possible seating arrangement with $6$ happy people is shown below.\n\n$\\color{green}{4}\n\n$$\\color{green}{4}$$\n\ncolor{green}{}\n\n$$\\color{green}{2}$$\n\ncolor{green}{3}\n\n$$\\color{green}{3}$$\n\ncolor{green}{1}\n\n$$\\color{green}{}$$\n\ncolor{green}{}$$\\color{green}{}$", "cfid": "2022A"}
{"problem_id": "2022B", "problem_title": "B. Kar Salesman", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2022/B", "problem_statement": "Karel is a salesman in a car dealership. The dealership has $n$ different models of cars. There are $a_i$ cars of the $i$-th model. Karel is an excellent salesperson and can convince customers to buy up to $x$ cars (of Karel's choice), as long as the cars are from different models.\n\nDetermine the minimum number of customers Karel has to bring in to sell all the cars.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $x$ ($1 \\le n \\le 5 \\cdot 10^5$; $1 \\le x \\le 10$) — the number of different models of cars and the maximum number of cars Karel can convince a customer to buy.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$) — the number of cars of each model.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the minimum possible number of customers needed to sell all the cars.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3 2\n\n3 1 2\n\n3 3\n\n2 1 3\n\n5 3\n\n2 2 1 9 2\n\n7 4\n\n2 5 3 3 5 2 5\n\n```\n\n#### Output #1\n\n```\n3\n3\n9\n7\n```\n\n### Note\n\nFor the first case, Karel only needs to lure in $3$ customers. He will convince the customers to buy the following models of cars:\n\n- Customer $1$ buys $2$ cars with model $1$ and $3$.\n- Customer $2$ buys $2$ cars with model $1$ and $2$.\n- Customer $3$ buys $2$ cars with model $1$ and $3$.\n\nFor the second case, Karel only needs to lure in $3$ customers. He will convince the customers to buy the following models of cars:\n\n- Customer $1$ buys $2$ cars with model $1$ and $3$.\n- Customer $2$ buys $3$ cars with model $1$, $2$ and $3$.\n- Customer $3$ buys $1$ car with model $3$.", "cfid": "2022B"}
{"problem_id": "2021A", "problem_title": "A. Meaning Mean", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2021/A", "problem_statement": "Pak Chanek has an array $a$ of $n$ positive integers. Since he is currently learning how to calculate the floored average of two numbers, he wants to practice it on his array $a$.\n\nWhile the array $a$ has at least two elements, Pak Chanek will perform the following three-step operation:\n\n1. Pick two different indices $i$ and $j$ ($1 \\leq i, j \\leq |a|$; $i \\neq j$), note that $|a|$ denotes the current size of the array $a$.\n2. Append $\\\\lfloor \\\\frac{a\\_i+a\\_j}{2} \\\\rfloor$$^{\\\\text{∗}}$ to the end of the array.\n3. Remove elements $a_i$ and $a_j$ from the array and concatenate the remaining parts of the array.\n\nFor example, suppose that $a=[5,4,3,2,1,1]$. If we choose $i=1$ and $j=5$, the resulting array will be $a=[4,3,2,1,3]$. If we choose $i=4$ and $j=3$, the resulting array will be $a=[5,4,1,1,2]$.\n\nAfter all operations, the array will consist of a single element $x$. Find the maximum possible value of $x$ if Pak Chanek performs the operations optimally.\n\n$^{\\\\text{∗}}$$\\\\lfloor x \\\\rfloor$ denotes the floor function of $x$, which is the greatest integer that is less than or equal to $x$. For example, $\\\\lfloor 6 \\\\rfloor = 6$, $\\\\lfloor 2.5 \\\\rfloor=2$, $\\\\lfloor -3.6 \\\\rfloor=-4$ and $\\\\lfloor \\\\pi \\\\rfloor=3$\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 5000$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n \\le 50$) — the length of the array $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$) — the elements of the array $a$.\n\nDo note that the sum of $n$ over all test cases is not bounded.\n\n### Output\n\nFor each test case, output a single integer: the maximum possible value of $x$ after all numbers have been picked.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n5\n\n1 7 8 4 5\n\n3\n\n2 6 5\n\n5\n\n5 5 5 5 5\n\n```\n\n#### Output #1\n\n```\n6\n4\n5\n```\n\n### Note\n\nIn the first test case, the array is initially $a=[1,7,8,4,5]$. Pak Chanek will perform the following operations:\n\n1. Pick $i=1$ and $j=2$, then $a=[8,4,5,4]$.\n2. Pick $i=3$ and $j=2$, then $a=[8,4,4]$.\n3. Pick $i=2$ and $j=3$, then $a=[8,4]$.\n4. Pick $i=1$ and $j=2$, then $a=[6]$.\n\nAfter all the operations, the array consists of a single element $x=6$. It can be proven that there is no series of operations that results in $x$ greater than $6$ in the end.", "cfid": "2021A"}
{"problem_id": "2021C1", "problem_title": "C1. Adjust The Presentation (Easy Version)", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2021/C1", "problem_statement": "This is the easy version of the problem. In the two versions, the constraints on $q$ and the time limit are different. In this version, $q=0$. You can make hacks only if all the versions of the problem are solved.\n\nA team consisting of $n$ members, numbered from $1$ to $n$, is set to present a slide show at a large meeting. The slide show contains $m$ slides.\n\nThere is an array $a$ of length $n$. Initially, the members are standing in a line in the order of $a_1, a_2, \\ldots, a_n$ from front to back. The slide show will be presented in order from slide $1$ to slide $m$. Each section will be presented by the member at the front of the line. After each slide is presented, you can move the member at the front of the line to any position in the lineup (without changing the order of the rest of the members). For example, suppose the line of members is $[\\color{red}{3},1,2,4]$. After member $3$ presents the current slide, you can change the line of members into either $[\\color{red}{3},1,2,4]$, $[1,\\color{red}{3},2,4]$, $[1,2,\\color{red}{3},4]$ or $[1,2,4,\\color{red}{3}]$.\n\nThere is also an array $b$ of length $m$. The slide show is considered good if it is possible to make member $b_i$ present slide $i$ for all $i$ from $1$ to $m$ under these constraints.\n\nHowever, your annoying boss wants to make $q$ updates to the array $b$. In the $i$-th update, he will choose a slide $s_i$ and a member $t_i$ and set $b_{s_i} := t_i$. Note that these updates are persistent, that is changes made to the array $b$ will apply when processing future updates.\n\nFor each of the $q+1$ states of array $b$, the initial state and after each of the $q$ updates, determine if the slideshow is good.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n$, $m$ and $q$ ($1 \\le n, m \\le 2 \\cdot 10^5$; $q=0$) — the number of members, the number of sections and the number of updates.\n\nThe second line of each test case contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($1 \\le a_i \\le n$) — the initial order of the members from front to back. It is guaranteed that each integer from $1$ to $n$ appears exactly once in $a$.\n\nThe third line of each test case contains $m$ integers $b_1, b_2, \\ldots, b_m$ ($1 \\le b_i \\le n$) — the members who should present each section.\n\nIt is guaranteed that the sum of $n$ and the sum of $m$ over all test cases do not exceed $2 \\cdot 10^5$ respectively.\n\n### Output\n\nFor each test case, output $q+1$ lines corresponding to the $q+1$ states of the array $b$. Output \"YA\" if the slide show is good, and \"TIDAK\" otherwise.\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yA\", \"Ya\", \"ya\", and \"YA\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n4 2 0\n\n1 2 3 4\n\n1 1\n\n3 6 0\n\n1 2 3\n\n1 1 2 3 3 2\n\n4 6 0\n\n3 1 4 2\n\n3 1 1 2 3 4\n\n```\n\n#### Output #1\n\n```\nYA\nYA\nTIDAK\n```\n\n### Note\n\nFor the first test case, you do not need to move the members as both slides are presented by member $1$, who is already at the front of the line.\n\nFor the second test case, the following is a possible way to move members so that the presentation is good:\n\n1. $[1,2,3]$, do not move member $1$.\n2. $[1,2,3]$, move member $1$ after member $3$.\n3. $[2,3,1]$, move member $2$ after member $3$.\n4. $[3,2,1]$, do not move member $3$.\n5. $[3,2,1]$, move member $3$ after member $1$.\n6. $[2,1,3]$, do not move member $2$.", "cfid": "2021C1"}
{"problem_id": "2021B", "problem_title": "B. Maximize Mex", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2021/B", "problem_statement": "You are given an array $a$ of $n$ positive integers and an integer $x$. You can do the following two-step operation any (possibly zero) number of times:\n\n1. Choose an index $i$ ($1 \\leq i \\leq n$).\n2. Increase $a_i$ by $x$, in other words $a_i := a_i + x$.\n\nFind the maximum value of the $\\operatorname{MEX}$ of $a$ if you perform the operations optimally.\n\nThe $\\operatorname{MEX}$ (minimum excluded value) of an array is the smallest non-negative integer that is not in the array. For example:\n\n- The $\\operatorname{MEX}$ of $[2,2,1]$ is $0$ because $0$ is not in the array.\n- The $\\operatorname{MEX}$ of $[3,1,0,1]$ is $2$ because $0$ and $1$ are in the array but $2$ is not.\n- The $\\operatorname{MEX}$ of $[0,3,1,2]$ is $4$ because $0$, $1$, $2$ and $3$ are in the array but $4$ is not.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 5000$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $x$ ($1 \\le n \\le 2 \\cdot 10^5$; $1 \\le x \\le 10^9$) — the length of the array and the integer to be used in the operation.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le 10^9$) — the given array.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer: the maximum $\\operatorname{MEX}$ of $a$ if you perform the operations optimally.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n6 3\n\n0 3 2 1 5 2\n\n6 2\n\n1 3 4 1 0 2\n\n4 5\n\n2 5 10 3\n\n```\n\n#### Output #1\n\n```\n4\n6\n0\n```\n\n### Note\n\nIn the first test case, the $\\operatorname{MEX}$ of $a$ is $4$ without performing any operations, which is the maximum.\n\nIn the second test case, the $\\operatorname{MEX}$ of $a$ is $5$ without performing any operations. If we perform two operations both with $i=1$, we will have the array $a=[5,3,4,1,0,2]$. Then, the $\\operatorname{MEX}$ of $a$ will become $6$, which is the maximum.\n\nIn the third test case, the $\\operatorname{MEX}$ of $a$ is $0$ without performing any operations, which is the maximum.", "cfid": "2021B"}
{"problem_id": "2053I1", "problem_title": "I1. Affectionate Arrays (Easy Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2053/I1", "problem_statement": "You are the beginning of the letter, the development of a poem, and the end of a fairy tale.\n\n— ilem, [Pinky Promise](https://www.bilibili.com/video/BV1Jb411U7u2/)\n\nThis is the easy version of the problem. The difference between the versions is that in this version, you need to compute the minimum length of the arrays. You can hack only if you solved all versions of this problem.\n\nIris treasures an integer array $a_1, a_2, \\ldots, a_n$. She knows this array has an interesting property: the maximum absolute value of all elements is less than or equal to the sum of all elements, that is, $\\max(\\lvert a_i\\rvert) \\leq \\sum a_i$.\n\nIris defines the boredom of an array as its maximum subarray$^{\\text{∗}}$ sum.\n\nIris's birthday is coming, and Victor is going to send her another array $b_1, b_2, \\ldots, b_m$ as a gift. For some seemingly obvious reasons, he decides the array $b_1, b_2, \\ldots, b_m$ should have the following properties.\n\n- $a_1, a_2, \\ldots, a_n$ should be a subsequence$^{\\text{†}}$ of $b_1, b_2, \\ldots, b_m$.\n- The two arrays have the same sum. That is, $\\sum\\limits_{i=1}^n a_i = \\sum\\limits_{i=1}^m b_i$.\n- The boredom of $b_1, b_2, \\ldots, b_m$ is the smallest possible.\n- Among the arrays with the smallest boredom, the length of the array $b$ (i.e., $m$) is the smallest possible. And in this case, Iris will understand his regard as soon as possible!\n\nEven constrained as above, there are still too many possible gifts. So Victor asks you to compute the value of $\\boldsymbol{m}$ of any array $b_1, b_2, \\ldots, b_m$ satisfying all the conditions above. He promises you: if you help him successfully, he will share a bit of Iris's birthday cake with you.\n\nNote: since the input is large, you may need to optimize it for this problem.\n\nFor example, in C++, it is enough to use the following lines at the start of the main() function:\n\n```\n`int main() {<br/>    std::ios::sync_with_stdio(false);<br/>    std::cin.tie(nullptr); std::cout.tie(nullptr);<br/>}<br/>````\n\n$^{\\text{∗}}$An array $c$ is a subarray of an array $d$ if $c$ can be obtained from $d$ by the deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\n$^{\\text{†}}$A sequence $c$ is a subsequence of a sequence $d$ if $c$ can be obtained from $d$ by the deletion of several (possibly, zero or all) element from arbitrary positions.\n\n### Input\n\nEach test contains multiple test cases. The first line of input contains an integer $t$ ($1 \\leq t \\leq 10^5$) — the number of test cases. The description of test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\leq n \\leq 3\\cdot 10^6$) — the length of the array $a_1, a_2, \\ldots, a_n$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($-10^9 \\leq a_i \\leq 10^9$) — the initial array. It is guaranteed that $\\max(\\lvert a_i\\rvert) \\leq \\sum a_i$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $3\\cdot 10^6$.\n\n### Output\n\nFor each test case, output a single line containing an integer: the length $m$ of a valid array $b$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n4\n\n1 2 3 4\n\n4\n\n2 -3 2 2\n\n10\n\n2 -7 6 3 -1 4 2 -5 8 -4\n\n20\n\n4 -2 4 3 -2 1 5 2 3 6 -5 -1 -4 -2 -3 5 -3 1 -4 1\n\n```\n\n#### Output #1\n\n```\n4\n6\n14\n25\n```\n\n### Note\n\nIn the first test case, $a=[1, 2, 3, 4]$. The only array $b$ which satisfies all the properties above is $[1, 2, 3, 4]$, so we should output $4$.\n\nIn the second test case, $a=[2, -3, 2, 2]$. The possible arrays $b$ are $[1, 2, -3, 2, -1, 2]$ and $[2, 1, -3, 2, -1, 2]$, so we should output $6$.", "cfid": "2053I1"}
{"problem_id": "2053E", "problem_title": "E. Resourceful Caterpillar Sequence", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2053/E", "problem_statement": "Endless Repeating 7 Days\n\n— r-906, [Panopticon](https://www.youtube.com/watch?v=_-Vd0ZGB-lo)\n\nThere is a tree consisting of $n$ vertices. Let a caterpillar be denoted by an integer pair $(p, q)$ ($1 \\leq p, q \\leq n$, $p \\neq q$): its head is at vertex $p$, its tail is at vertex $q$, and it dominates all the vertices on the simple path from $p$ to $q$ (including $p$ and $q$). The caterpillar sequence of $(p, q)$ is defined as the sequence consisting only of the vertices on the simple path, sorted in the ascending order of the distance to $p$.\n\nNora and Aron are taking turns moving the caterpillar, with Nora going first. Both players will be using his or her own optimal strategy:\n\n- They will play to make himself or herself win;\n- However, if it is impossible, they will play to prevent the other person from winning (thus, the game will end in a tie).\n\nIn Nora's turn, she must choose a vertex $u$ adjacent to vertex $p$, which is not dominated by the caterpillar, and move all the vertices in it by one edge towards vertex $u$$^{\\\\text{∗}}$. In Aron's turn, he must choose a vertex $v$ adjacent to vertex $q$, which is not dominated by the caterpillar, and move all the vertices in it by one edge towards vertex $v$. Note that the moves allowed to the two players are different.\n\nWhenever $p$ is a leaf$^{\\text{†}}$, Nora wins$^{\\text{‡}}$. Whenever $q$ is a leaf, Aron wins. If either initially both $p$ and $q$ are leaves, or after $10^{100}$ turns the game has not ended, the result is a tie.\n\nPlease count the number of integer pairs $(p, q)$ with $1 \\leq p, q \\leq n$ and $p \\neq q$ such that, if the caterpillar is initially $(p, q)$, Aron wins the game.\n\n$^{\\text{∗}}$In other words: Let the current caterpillar sequence be $c_1, c_2, \\ldots, c_k$, then after the move, the new caterpillar sequence becomes $d(u, c_1), d(u, c_2), \\ldots, d(u, c_k)$. Here, $d(x, y)$ is the next vertex on the simple path from $y$ to $x$.\n\n$^{\\text{†}}$In a tree, a vertex is called a leaf if and only if its degree is $1$.\n\n$^{\\text{‡}}$Therefore, Nora never fails to choose a vertex $u$ when the game has not ended. The same goes for Aron.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\leq t \\leq 2\\cdot 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\leq n \\leq 2\\cdot 10^5$) — the number of vertices in the tree.\n\nThe following $n - 1$ lines each contain two integers $u$ and $v$ ($1 \\leq u, v \\leq n$), denoting an edge between vertices $u$ and $v$. It is guaranteed that the given edges form a tree.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $4\\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single line containing an integer: the number of integer pairs $(p, q)$ which make Aron win.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n2\n\n1 2\n\n5\n\n1 2\n\n1 3\n\n2 4\n\n2 5\n\n12\n\n1 6\n\n11 2\n\n4 8\n\n12 3\n\n2 7\n\n6 12\n\n8 1\n\n2 3\n\n5 12\n\n9 2\n\n10 3\n\n10\n\n1 2\n\n2 3\n\n3 4\n\n4 5\n\n5 6\n\n4 7\n\n6 8\n\n4 9\n\n4 10\n\n25\n\n1 16\n\n11 22\n\n6 14\n\n3 1\n\n20 14\n\n23 17\n\n25 19\n\n10 11\n\n3 18\n\n10 6\n\n2 21\n\n4 5\n\n11 12\n\n4 9\n\n9 13\n\n8 6\n\n6 1\n\n3 7\n\n8 19\n\n10 24\n\n15 13\n\n1 2\n\n3 4\n\n17 8\n\n```\n\n#### Output #1\n\n```\n0\n6\n40\n27\n171\n```\n\n### Note\n\nIn the first test case, all possible caterpillars are $(1, 2)$ and $(2, 1)$, resulting in a tie at the beginning, since both $p$ and $q$ are leaves.\n\nIn the second test case, the caterpillars that allow Aron to win are the following: $(1, 3)$, $(1, 4)$, $(1, 5)$, $(2, 3)$, $(2, 4)$, $(2, 5)$. Let's look at some specific caterpillars.\n\n- For the caterpillar $(1, 5)$: vertex $p = 1$ is not a leaf, but vertex $q = 5$ is, so Aron wins at the beginning.\n- For the caterpillar $(2, 1)$: vertex $p = 2$ is not a leaf, neither is vertex $q = 1$. In Nora's first move, she can choose to move the caterpillar towards vertex $5$, therefore the caterpillar becomes $(5, 2)$, and vertex $p = 5$ is a leaf, so Nora will win.", "cfid": "2053E"}
{"problem_id": "2053F", "problem_title": "F. Earnest Matrix Complement", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2053/F", "problem_statement": "3, 2, 1, ... We are the — RiOI Team!\n\n— Felix & All, [Special Thanks 3](https://www.luogu.com.cn/problem/T351681)\n\n- Peter: Good news: My problem T311013 is approved!\n- $\\delta$: I'm glad my computer had gone out of battery so that I wouldn't have participated in wyrqwq's round and gained a negative delta.\n- Felix: \\[thumbs\\_up\\] The problem statement concerning a removed song!\n- Aquawave: Do I mourn my Chemistry?\n- E.Space: ahh?\n- Trine: Bread.\n- Iris: So why am I always testing problems?\n\nTime will pass, and we might meet again. Looking back at the past, everybody has lived the life they wanted.\n\nAquawave has a matrix $A$ of size $n\\times m$, whose elements can only be integers in the range $[1, k]$, inclusive. In the matrix, some cells are already filled with an integer, while the rest are currently not filled, denoted by $-1$.\n\nYou are going to fill in all the unfilled places in $A$. After that, let $c_{u,i}$ be the number of occurrences of element $u$ in the $i$-th row. Aquawave defines the beauty of the matrix as\n\n\n\n$$\\sum_{u=1}^k \\sum_{i=1}^{n-1} c_{u,i} \\cdot c_{u,i+1}.$$\n\nYou have to find the maximum possible beauty of $A$ after filling in the blanks optimally.\n\n### Input\n\nThe first line of input contains a single integer $t$ ($1 \\leq t \\leq 2\\cdot 10^4$) — the number of test cases. The description of test cases follows.\n\nThe first line of each test case contains three integers $n$, $m$, and $k$ ($2 \\leq n \\leq 2\\cdot 10^5$, $2 \\leq m \\leq 2\\cdot 10^5$, $n \\cdot m \\leq 6\\cdot 10^5$, $1 \\leq k \\leq n\\cdot m$) — the number of rows and columns of the matrix $A$, and the range of the integers in the matrix, respectively.\n\nThen $n$ lines follow, the $i$-th line containing $m$ integers $A_{i,1},A_{i,2},\\ldots,A_{i,m}$ ($1 \\leq A_{i,j} \\leq k$ or $A_{i,j} = -1$) — the elements in $A$.\n\nIt is guaranteed that the sum of $n\\cdot m$ over all test cases does not exceed $6\\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the maximum possible beauty.\n\n### Example\n\n#### Input #1\n\n```\n\n9\n\n3 3 3\n\n1 2 2\n\n3 1 3\n\n3 2 1\n\n2 3 3\n\n-1 3 3\n\n2 2 -1\n\n3 3 6\n\n-1 -1 1\n\n1 2 -1\n\n-1 -1 4\n\n3 4 5\n\n1 3 2 3\n\n-1 -1 2 -1\n\n3 1 5 1\n\n5 3 8\n\n5 -1 2\n\n1 8 -1\n\n-1 5 6\n\n7 7 -1\n\n4 4 4\n\n6 6 5\n\n-1 -1 5 -1 -1 -1\n\n-1 -1 -1 -1 2 -1\n\n-1 1 3 3 -1 -1\n\n-1 1 -1 -1 -1 4\n\n4 2 -1 -1 -1 4\n\n-1 -1 1 2 -1 -1\n\n6 6 4\n\n-1 -1 -1 -1 1 -1\n\n3 -1 2 2 4 -1\n\n3 1 2 2 -1 -1\n\n3 3 3 3 -1 2\n\n-1 3 3 -1 1 3\n\n3 -1 2 2 3 -1\n\n5 5 3\n\n1 1 3 -1 1\n\n2 2 -1 -1 3\n\n-1 -1 -1 2 -1\n\n3 -1 -1 -1 2\n\n-1 1 2 3 -1\n\n6 2 7\n\n-1 7\n\n-1 6\n\n7 -1\n\n-1 -1\n\n-1 -1\n\n2 2\n\n```\n\n#### Output #1\n\n```\n4\n4\n10\n10\n8\n102\n93\n58\n13\n```\n\n### Note\n\nIn the first test case, the matrix $A$ is already determined. Its beauty is\n\n\n\n$$\\sum_{u=1}^k \\sum_{i=1}^{n-1} c_{u,i} \\cdot c_{u,i+1} = c_{1,1}\\cdot c_{1,2} + c_{1,2}\\cdot c_{1,3} + c_{2,1}\\cdot c_{2,2} + c_{2,2}\\cdot c_{2,3} + c_{3,1}\\cdot c_{3,2} + c_{3,2}\\cdot c_{3,3} = 1\\cdot 1 + 1\\cdot 1 + 2\\cdot 0 + 0\\cdot 1 + 0\\cdot 2 + 2\\cdot 1 = 4.$$\n\nIn the second test case, one can fill the matrix as follows:\n\n\n\n$$ \\begin{bmatrix} 2 &3 &3 \\\\ 2 &2 &3 \\end{bmatrix}, $$\n\nand get the value $4$. It can be proven this is the maximum possible answer one can get.\n\nIn the third test case, one of the possible optimal configurations is:\n\n\n\n$$ \\begin{bmatrix} 1 &1 &1 \\\\ 1 &2 &1 \\\\ 1 &1 &4 \\end{bmatrix}. $$\n\nIn the fourth test case, one of the possible optimal configurations is:\n\n\n\n$$ \\begin{bmatrix} 1 &3 &2 &3 \\\\ 1 &3 &2 &1 \\\\ 3 &1 &5 &1 \\end{bmatrix}. $$\n\nIn the fifth test case, one of the possible optimal configurations is:\n\n\n\n$$ \\begin{bmatrix} 5 &5 &2 \\\\ 1 &8 &5 \\\\ 7 &5 &6 \\\\ 7 &7 &4 \\\\ 4 &4 &4 \\end{bmatrix}. $$\n\n", "cfid": "2053F"}
{"problem_id": "2043E", "problem_title": "E. Matrix Transformation", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2043/E", "problem_statement": "You are given two matrices $A$ and $B$ of size $n \\times m$, filled with integers between $0$ and $10^9$. You can perform the following operations on matrix $A$ in any order and any number of times:\n\n- &=: choose two integers $i$ and $x$ ($1 \\le i \\le n$, $x \\ge 0$) and replace each element in row $i$ with the result of the bitwise AND operation between $x$ and that element. Formally, for every $j \\in [1, m]$, the element $A_{i,j}$ is replaced with $A_{i,j} \\text{ & } x$;\n- \\|=: choose two integers $j$ and $x$ ($1 \\le j \\le m$, $x \\ge 0$) and replace each element in column $j$ with the result of the bitwise OR operation between $x$ and that element. Formally, for every $i \\in [1, n]$, the element $A_{i,j}$ is replaced with $A_{i,j} \\text{ | } x$.\n\nThe value of $x$ may be chosen differently for different operations.\n\nDetermine whether it is possible to transform matrix $A$ into matrix $B$ using the given operations any number of times (including zero).\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 100$) — the number of test cases. Then, $t$ test cases follow.\n\nEach test case is given as follows:\n\n- the first line contains two integers $n$ and $m$ ($1 \\le n, m \\le 10^3$; $n \\cdot m \\le 10^3$) — the dimensions of the matrices $A$ and $B$;\n- the following $n$ lines describe the matrix $A$, where the $i$-th line contains $m$ integers $A_{i,1}, A_{i,2}, \\dots, A_{i,m}$ ($0 \\le A_{i,j} \\le 10^9$);\n- the following $n$ lines describe the matrix $B$, where the $i$-th line contains $m$ integers $B_{i,1}, B_{i,2}, \\dots, B_{i,m}$ ($0 \\le B_{i,j} \\le 10^9$).\n\n### Output\n\nFor each test case, output Yes if it is possible to transform the matrix $A$ into the matrix $B$; otherwise, output No. Each letter can be output in any case, upper or lower.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n1 1\n\n12\n\n13\n\n2 2\n\n10 10\n\n42 42\n\n21 21\n\n21 21\n\n2 2\n\n74 10\n\n42 106\n\n21 85\n\n85 21\n\n2 4\n\n1 2 3 4\n\n5 6 7 8\n\n3 2 3 4\n\n1 0 1 0\n\n```\n\n#### Output #1\n\n```\nYes\nYes\nNo\nYes\n```\n\n### Note\n\nLet's consider the second set of input data and show a sequence of operations that transforms matrix $A$ into matrix $B$:\n\nInitially, the matrix looks like this:\n\n$\\begin{bmatrix} 10&10\\\\ 42&42\\\\ \\end{bmatrix}$\n\nApply an operation of the first type with parameters $i = 1$ and $x = 0$. As a result, we get the matrix:\n\n$\\begin{bmatrix} 0&0\\\\ 42&42\\\\ \\end{bmatrix}$\n\nApply an operation of the first type with parameters $i = 2$ and $x = 0$. As a result, we get the matrix:\n\n$\\begin{bmatrix} 0&0\\\\ 0&0\\\\ \\end{bmatrix}$\n\nApply an operation of the second type with parameters $j = 1$ and $x = 21$. As a result, we get the matrix:\n\n$\\begin{bmatrix} 21&0\\\\ 21&0\\\\ \\end{bmatrix}$\n\nApply an operation of the second type with parameters $j = 2$ and $x = 21$. As a result, we get the matrix:\n\n$\\begin{bmatrix} 21&21\\\\ 21&21\\\\ \\end{bmatrix}$\n\nThus, we have transformed matrix $A$ into matrix $B$.", "cfid": "2043E"}
{"problem_id": "2043G", "problem_title": "G. Problem with Queries", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2043/G", "problem_statement": "You are given an array $a$, consisting of $n$ integers. Your task is to process $q$ queries of two types:\n\n- $1~p~x$ — set the value of the element at index $p$ equal to $x$;\n- $2~l~r$ — count the number of pairs of indices $(i, j)$ such that $l \\le i < j \\le r$ and $a_i \\ne a_j$.\n\nNote that the queries in this task are encoded; each subsequent query can only be decoded after calculating the answer to the preceding query of the second type.\n\n### Input\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 10^5$).\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le n$).\n\nThe third line contains a single integer $q$ ($1 \\le q \\le 3 \\cdot 10^5$) — the number of queries.\n\nThe next $q$ lines describe the queries in one of the following formats:\n\n- $1~p'~x'$ ($0 \\le p', x' \\le n-1$);\n- $2~l'~r'$ ($0 \\le l', r' \\le n-1$).\n\nThe queries are encoded as follows: let $\\mathit{last}$ be the answer to the latest processed query of the second type (initially, $\\mathit{last} = 0$).\n\n- if the type of the query is $1$, then $p = ((p' + \\mathit{last}) \\bmod n) + 1$, $x = ((x' + \\mathit{last}) \\bmod n) + 1$.\n- if the type of the query is $2$, $l = ((l' + \\mathit{last}) \\bmod n) + 1$, $r = ((r' + \\mathit{last}) \\bmod n) + 1$. If $l > r$, swap their values.\n\nDon't forget to update the value of $\\mathit{last}$ after answering each query of the second type.\n\nAdditional constraint on the input: there is at least one query of the second type.\n\n### Output\n\nFor each query of the second type, print the answer — the number of pairs of indices $(i, j)$ such that $l \\le i < j \\le r$ and $a_i \\ne a_j$.\n\n### Examples\n\n#### Input #1\n\n```\n\n3\n\n1 2 3\n\n5\n\n2 0 2\n\n1 0 2\n\n2 0 2\n\n1 2 0\n\n2 1 0\n\n```\n\n#### Output #1\n\n```\n3 2 0 ```\n\n#### Input #2\n\n```\n\n7\n\n1 3 4 4 7 1 3\n\n3\n\n2 1 6\n\n2 1 0\n\n2 5 6\n\n```\n\n#### Output #2\n\n```\n13 18 0 ```\n\n### Note\n\nIn the first example, the actual queries (after decoding) are:\n\n- 2 1 3\n- 1 1 3\n- 2 1 3\n- 1 2 3\n- 2 1 3", "cfid": "2043G"}
{"problem_id": "2043F", "problem_title": "F. Nim", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2043/F", "problem_statement": "Recall the rules of the game \"Nim\". There are $n$ piles of stones, where the $i$-th pile initially contains some number of stones. Two players take turns choosing a non-empty pile and removing any positive (strictly greater than $0$) number of stones from it. The player unable to make a move loses the game.\n\nYou are given an array $a$, consisting of $n$ integers. Artem and Ruslan decided to play Nim on segments of this array. Each of the $q$ rounds is defined by a segment $(l_i, r_i)$, where the elements $a_{l_i}, a_{l_i+1}, \\dots, a_{r_i}$ represent the sizes of the piles of stones.\n\nBefore the game starts, Ruslan can remove any number of piles from the chosen segment. However, at least one pile must remain, so in a single round he can remove at most $(r_i - l_i)$ piles. He is allowed to remove $0$ piles. After the removal, the game is played on the remaining piles within the segment.\n\nAll rounds are independent: the changes made in one round do not affect the original array or any other rounds.\n\nRuslan wants to remove as many piles as possible so that Artem, who always makes the first move, loses.\n\nFor each round, determine:\n\n1. the maximum number of piles Ruslan can remove;\n2. the number of ways to choose the maximum number of piles for removal.\n\nTwo ways are considered different if there exists an index $i$ such that the pile at index $i$ is removed in one way but not in the other. Since the number of ways can be large, output it modulo $998\\,244\\,353$.\n\nIf Ruslan cannot ensure Artem's loss in a particular round, output -1 for that round.\n\n### Input\n\nThe first line of input contains two integers $n$ and $q$ ($1 \\le n, q \\le 10^5$) — the size of the array and the number of segments for which the answers need to be calculated.\n\nThe second line of input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($0 \\le a_i \\le 50$) — the elements of the initial array.\n\nThe $i$-th of the next $q$ lines contains two integers $l_i, r_i$ ($1 \\le l_i \\le r_i \\le n$) — the bounds of the segment on which the boys want to play the game during the $i$-th round.\n\n### Output\n\nFor each round:\n\n- if Ruslan can win, print two integers — the maximum number of piles that can be removed, and the number of ways to remove the maximum number of piles, taken modulo $998\\,244\\,353$;\n- otherwise print -1.\n\n### Example\n\n#### Input #1\n\n```\n\n9 5\n\n0 1 2 1 3 4 5 6 0\n\n1 5\n\n2 5\n\n3 5\n\n4 5\n\n1 9\n\n```\n\n#### Output #1\n\n```\n4 1\n2 1\n0 1\n-1\n8 2\n```", "cfid": "2043F"}
{"problem_id": "2051G", "problem_title": "G. Snakes", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2051/G", "problem_statement": "Suppose you play a game where the game field looks like a strip of $1 \\times 10^9$ square cells, numbered from $1$ to $10^9$.\n\nYou have $n$ snakes (numbered from $1$ to $n$) you need to place into some cells. Initially, each snake occupies exactly one cell, and you can't place more than one snake into one cell. After that, the game starts.\n\nThe game lasts for $q$ seconds. There are two types of events that may happen each second:\n\n- snake $s_i$ enlarges: if snake $s_i$ occupied cells $[l, r]$, it enlarges to a segment $[l, r + 1]$;\n- snake $s_i$ shrinks: if snake $s_i$ occupied cells $[l, r]$, it shrinks to a segment $[l + 1, r]$.\n\nEach second, exactly one of the events happens.\n\nIf at any moment of time, any snake runs into some obstacle (either another snake or the end of the strip), you lose. Otherwise, you win with the score equal to the maximum cell occupied by any snake so far.\n\nWhat is the minimum possible score you can achieve?\n\n### Input\n\nThe first line contains two integers $n$ and $q$ ($1 \\le n \\le 20$; $1 \\le q \\le 2 \\cdot 10^5$) — the number of snakes and the number of events. Next $q$ lines contain the description of events — one per line.\n\nThe $i$-th line contains\n\n- either \"$s_i$ +\" ($1 \\le s_i \\le n$) meaning that the $s_i$-th snake enlarges\n- or \"$s_i$ -\" ($1 \\le s_i \\le n$) meaning that the $s_i$-th snake shrinks.\n\nAdditional constraint on the input: the given sequence of events is valid, i. e. a snake of length $1$ never shrinks.\n\n### Output\n\nPrint one integer — the minimum possible score.\n\n### Examples\n\n#### Input #1\n\n```\n\n3 6\n\n1 +\n\n1 -\n\n3 +\n\n3 -\n\n2 +\n\n2 -\n\n```\n\n#### Output #1\n\n```\n4\n```\n\n#### Input #2\n\n```\n\n5 13\n\n5 +\n\n3 +\n\n5 -\n\n2 +\n\n4 +\n\n3 +\n\n5 +\n\n5 -\n\n2 +\n\n3 -\n\n3 +\n\n3 -\n\n2 +\n\n```\n\n#### Output #2\n\n```\n11\n```\n\n### Note\n\nIn the first test, the optimal strategy is to place the second snake at cell $1$, the third snake — at $2$, and the first one — at $3$. The maximum occupied cell is cell $4$, and it's the minimum possible score.\n\nIn the second test, one of the optimal strategies is to place:\n\n- snake $2$ at position $1$;\n- snake $3$ at position $4$;\n- snake $5$ at position $6$;\n- snake $1$ at position $9$;\n- snake $4$ at position $10$.", "cfid": "2051G"}
{"problem_id": "2051F", "problem_title": "F. Joker", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2051/F", "problem_statement": "Consider a deck of $n$ cards. The positions in the deck are numbered from $1$ to $n$ from top to bottom. A joker is located at position $m$.\n\n$q$ operations are applied sequentially to the deck. During the $i$-th operation, you need to take the card at position $a_i$ and move it either to the beginning or to the end of the deck. For example, if the deck is $[2, 1, 3, 5, 4]$, and $a_i=2$, then after the operation the deck will be either $[1, 2, 3, 5, 4]$ (the card from the second position moved to the beginning) or $[2, 3, 5, 4, 1]$ (the card from the second position moved to the end).\n\nYour task is to calculate the number of distinct positions where the joker can be after each operation.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains three integers $n$, $m$, and $q$ ($2 \\le n \\le 10^9$; $1 \\le m \\le n$; $1 \\le q \\le 2 \\cdot 10^5$).\n\nThe second line contains $q$ integers $a_1, a_2, \\dots, a_q$ ($1 \\le a_i \\le n$).\n\nAdditional constraint on the input: the sum of $q$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print $q$ integers — the number of distinct positions where the joker can be after each operation.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n6 5 3\n\n1 2 3\n\n2 1 4\n\n2 1 1 2\n\n5 3 1\n\n3\n\n3 2 4\n\n2 1 1 1\n\n18 15 4\n\n13 15 1 16\n\n```\n\n#### Output #1\n\n```\n2 3 5\n2 2 2 2\n2\n2 3 3 3\n2 4 6 8\n```", "cfid": "2051F"}
{"problem_id": "2049F", "problem_title": "F. MEX OR Mania", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2049/F", "problem_statement": "An integer sequence $b_1, b_2, \\ldots, b_n$ is good if $\\operatorname{mex}(b_1, b_2, \\ldots, b_n) - (b_1 | b_2 | \\ldots | b_n) = 1$. Here, $\\operatorname{mex(c)}$ denotes the MEX$^{\\text{∗}}$ of the collection $c$, and $|$ is the [bitwise OR](https://en.wikipedia.org/wiki/Bitwise_operation#OR) operator.\n\nShohag has an integer sequence $a_1, a_2, \\ldots, a_n$. He will perform the following $q$ updates on $a$:\n\n- $i$ $x$ — increase $a_i$ by $x$.\n\nAfter each update, help him find the length of the longest good subarray$^{\\text{†}}$ of $a$.\n\n$^{\\text{∗}}$The minimum excluded (MEX) of a collection of integers $c_1, c_2, \\ldots, c_k$ is defined as the smallest non-negative integer $y$ which does not occur in the collection $c$.\n\n$^{\\text{†}}$An array $d$ is a subarray of an array $f$ if $d$ can be obtained from $f$ by the deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two space-separated integers $n$ and $q$ ($1 \\le n, q \\le 10^5$).\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le n$).\n\nThe next $q$ lines of each test case are of the following form:\n\n- $i$ $x$ ($1 \\le i, x \\le n$) — it means you should increase $a_i$ by $x$.\n\nIt is guaranteed that the sum of $n$ over all test cases doesn't exceed $10^5$ and the sum of $q$ doesn't exceed $10^5$.\n\n### Output\n\nFor each test case, output $q$ lines — on the $i$-th line output the length of the longest good subarray of $a$ after the $i$-th update.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n6 3\n\n0 0 1 0 1 0\n\n6 1\n\n3 2\n\n6 3\n\n3 1\n\n1 3 1\n\n1 1\n\n```\n\n#### Output #1\n\n```\n6\n3\n2\n0\n```\n\n### Note\n\nIn the first test case, after the first update, the array becomes $[0, 0, 1, 0, 1, 1]$, and here the whole array is good because $\\operatorname{mex}([0, 0, 1, 0, 1, 1]) - (0 | 0 | 1 | 0 | 1 | 1) = 2 - 1 = 1$.\n\nAfter the second update, the array becomes $[0, 0, 3, 0, 1, 1]$, and here the subarray $[0, 1, 1]$ has the maximum length among all the good subarrays.\n\nFinally, after the third update, the array becomes $[0, 0, 3, 0, 1, 4]$, and here the subarrays $[0, 0]$ and $[0, 1]$ both have the maximum length among all the good subarrays.", "cfid": "2049F"}
{"problem_id": "2049D", "problem_title": "D. Shift + Esc", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2049/D", "problem_statement": "After having fun with a certain contraption and getting caught, Evirir the dragon decides to put their magical skills to good use — warping reality to escape fast!\n\nYou are given a grid with $n$ rows and $m$ columns of non-negative integers and an integer $k$. Let $(i, j)$ denote the cell in the $i$-th row from the top and $j$-th column from the left ($1 \\le i \\le n$, $1 \\le j \\le m$). For every cell $(i, j)$, the integer $a_{i, j}$ is written on the cell $(i, j)$.\n\nYou are initially at $(1, 1)$ and want to go to $(n, m)$. You may only move down or right. That is, if you are at $(i, j)$, you can only move to $(i+1, j)$ or $(i, j+1)$ (if the corresponding cell exists).\n\nBefore you begin moving, you may do the following operation any number of times:\n\n- Choose an integer $i$ between $1$ and $n$ and cyclically shift row $i$ to the left by $1$. Formally, simultaneously set $a_{i,j}$ to $a_{i,(j \\bmod m) + 1}$ for all integers $j$ ($1 \\le j \\le m$).\n\nNote that you may not do any operation after you start moving.\n\nAfter moving from $(1, 1)$ to $(n, m)$, let $x$ be the number of operations you have performed before moving, and let $y$ be the sum of the integers written on visited cells (including $(1, 1)$ and $(n, m)$). Then the cost is defined as $kx + y$.\n\nFind the minimum cost to move from $(1, 1)$ to $(n, m)$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line contains three space-separated integers $n$, $m$, and $k$ ($1 \\leq n, m \\leq 200$, $0 \\leq k \\leq 10^9$).\n\nThen, $n$ lines follow. The $i$-th line contains $m$ space-separated integers, $a_{i,1},\\,a_{i,2},\\,\\ldots,\\,a_{i,m}$ ($0 \\leq a_{i,j} \\leq 10^9$).\n\nIt is guaranteed that the sum of $n \\cdot m$ over all test cases does not exceed $5 \\cdot 10^4$.\n\n### Output\n\nFor each test case, output a single integer, the minimum cost to move from $(1, 1)$ to $(n, m)$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3 3 100\n\n3 4 9\n\n5 2 4\n\n0 101 101\n\n3 4 1\n\n10 0 0 10\n\n0 0 10 0\n\n10 10 0 10\n\n1 1 3\n\n4\n\n3 2 3\n\n1 2\n\n3 6\n\n5 4\n\n10 10 14\n\n58 49 25 12 89 69 8 49 71 23\n\n45 27 65 59 36 100 73 23 5 84\n\n82 91 54 92 53 15 43 46 11 65\n\n61 69 71 87 67 72 51 42 55 80\n\n1 64 8 54 61 70 47 100 84 50\n\n86 93 43 51 47 35 56 20 33 61\n\n100 59 5 68 15 55 69 8 8 60\n\n33 61 20 79 69 51 23 24 56 28\n\n67 76 3 69 58 79 75 10 65 63\n\n6 64 73 79 17 62 55 53 61 58\n\n```\n\n#### Output #1\n\n```\n113\n6\n4\n13\n618\n```\n\n### Note\n\nIn the first test case, the minimum cost of $113$ can be achieved as follows:\n\n1. Cyclically shift row 3 once. The grid now becomes \n\n$$\\begin{bmatrix}3 & 4 & 9\\\\5 & 2 & 4\\\\101 & 101 & 0\\end{bmatrix}.$$\n\n2. Move as follows: $(1, 1) \\to (1, 2) \\to (2, 2) \\to (2, 3) \\to (3, 3)$.\n\n$x = 1$ operation is done before moving. The sum of integers on visited cells is $y = 3 + 4 + 2 + 4 + 0 = 13$. Therefore, the cost is $kx + y = 100 \\cdot 1 + 13 = 113$.\n\nIn the second test case, one can shift row 1 once, row 2 twice, and row 3 thrice. Then, the grid becomes \n\n$$\\begin{bmatrix}0 & 0 & 10 & 10\\\\10 & 0 & 0 & 0\\\\10 & 10 & 10 & 0\\end{bmatrix}.$$\n\nx = 6$ operations were done before moving, and there is a path of cost $y = 0$. Therefore, the cost is $6 \\cdot 1 + 0 = 6$.", "cfid": "2049D"}
{"problem_id": "2049E", "problem_title": "E. Broken Queries", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2049/E", "problem_statement": "You, a wizard whose creation was destroyed by a dragon, are determined to hunt it down with a magical AOE tracker. But it seems to be toyed with...\n\nThis is an interactive problem.\n\nThere is a hidden binary array $a$ of length $n$ ($\\mathbf{n}$ is a power of 2) and a hidden integer $k\\ (2 \\le k \\le n - 1)$. The array $a$ contains exactly one 1 (and all other elements are 0). For two integers $l$ and $r$ ($1 \\le l \\le r \\le n$), define the range sum $s(l, r) = a_l + a_{l+1} + \\cdots + a_r$.\n\nYou have a magical device that takes ranges and returns range sums, but it returns the opposite result when the range has length at least $k$. Formally, in one query, you can give it a pair of integers $[l, r]$ where $1 \\le l \\le r \\le n$, and it will return either $0$ or $1$ according to the following rules:\n\n- If $r - l + 1 < k$, it will return $s(l, r)$.\n- If $r - l + 1 \\ge k$, it will return $1 - s(l, r)$.\n\nFind $k$ using at most $33$ queries.\n\nThe device is not adaptive. It means that the hidden $a$ and $k$ are fixed before the interaction and will not change during the interaction.\n\n### Interaction\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 500$). The description of the test cases follows.\n\nThe first line of each test case contains one positive integer $n$ ($4 \\le n \\le 2^{30}$) — the length of the hidden array. It is guaranteed that $\\mathbf{n}$ is a power of 2; that is, $n = 2^m$ for some non-negative integer $m$.\n\nYou can make queries in the following way — print one line of the form \"$\\mathtt{?}\\,l\\,r$\" where $1 \\le l \\le r \\le n$. After that, read a single integer: $0$ or $1$, as described in the statement.\n\nIf you want to print the answer $k$, output \"$\\mathtt{!}\\,k$\". Then, the interaction continues with the next test case.\n\nPrinting the answer does not count towards the number of queries made.\n\nAfter printing each query do not forget to output the end of line and flush$^{\\text{∗}}$ the output. Otherwise, you will get Idleness limit exceeded verdict.\n\nIf, at any interaction step, you read $-1$ instead of valid data, your solution must exit immediately. This means that your solution will receive Wrong answer because of an invalid query or any other mistake. Failing to exit can result in an arbitrary verdict because your solution will continue to read from a closed stream.\n\nHacks\n\nThe format of the hacks should be the following: the first line should contain one integer $t$ ($1 \\le t \\le 100$) — the number of test cases. The description of the test cases should follow.\n\nThe first and only line of each test case should contain three integers $n$, $p$, and $k$ ($4 \\le n \\le 2^{30}$, $1 \\le p \\le n$, $2 \\le k \\le n - 1$) — the length of the hidden array $a$, the position of the only 1 in $a$, and the hidden $k$. $n$ must be a power of $2$.\n\n$^{\\text{∗}}$To flush, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- sys.stdout.flush() in Python;\n- see the documentation for other languages.\n\n### Example\n\n#### Input #1\n\n```\n2\n8\n\n0\n\n0\n\n1\n\n0\n\n4\n\n1\n\n0```\n\n#### Output #1\n\n```\n? 3 5\n\n? 1 8\n\n? 4 8\n\n? 3 8\n\n! 6\n\n? 3 3\n\n? 3 4\n\n! 2\n```\n\n### Note\n\nIn the first test case, $k = 6$ and the 1 in the hidden array is at index 6, so $a = [0, 0, 0, 0, 0, 1, 0, 0]$.\n\n- For the query 3 5, since $5-3+1 = 3 < k$, the device answers correctly. Since 6 is not contained in the range $[3, 5]$, the device answers $0$.\n- For the query 1 8, since $8 - 1 + 1 = 8 \\ge k$, the device answers $0$ incorrectly.\n- For the query 4 8, since $8 - 4 + 1 = 5 < k$, the device answers $1$ correctly.\n- For the query 3 8, since $8 - 3 + 1 = 6 \\ge k$, the device answers $0$ incorrectly.\n\nThe example solution then outputs $6$ as the answer, which is correct.\n\nIn the second test case, $k = 2$ and the 1 in the hidden array is at index 3, so $a = [0, 0, 1, 0]$.\n\nNote that the example solution may not have enough information to determine $k$ above; this is only an example.", "cfid": "2049E"}
{"problem_id": "2048G", "problem_title": "G. Kevin and Matrices", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2048/G", "problem_statement": "Kevin has been transported to Sacred Heart Hospital, which contains all the $ n \\times m $ matrices with integer values in the range $ [1,v] $.\n\nNow, Kevin wants to befriend some matrices, but he is willing to befriend a matrix $ a $ if and only if the following condition is satisfied:\n\n\n\n$$ \\min_{1\\le i\\le n}\\left(\\max_{1\\le j\\le m}a_{i,j}\\right)\\le\\max_{1\\le j\\le m}\\left(\\min_{1\\le i\\le n}a_{i,j}\\right). $$\n\nPlease count how many matrices in Sacred Heart Hospital can be friends with Kevin.\n\nSince Kevin is very friendly, there could be many matrices that meet this condition. Therefore, you only need to output the result modulo $998\\,244\\,353$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $ t $ ($ 1 \\le t \\le 8\\cdot 10^3 $).\n\nThe only line of each test case contains three integers $n$, $m$, $v$ ($ 1 \\le n, v, n \\cdot v \\leq 10^6$, $1 \\le m \\le 10^9 $).\n\nIt is guaranteed that the sum of $ n \\cdot v $ over all test cases doesn't exceed $ 10^6 $.\n\n### Output\n\nFor each test case, output one integer — the number of matrices that can be friends with Kevin modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2 2 2\n\n2 3 4\n\n11 45 14\n\n```\n\n#### Output #1\n\n```\n14\n2824\n883799966\n```\n\n### Note\n\nIn the first test case, besides the matrices $ a=\\begin{bmatrix}1&2\\\\2&1\\end{bmatrix} $ and $ a=\\begin{bmatrix}2&1\\\\1&2\\end{bmatrix} $, which do not satisfy the condition, the remaining $ 2^{2 \\cdot 2} - 2 = 14 $ matrices can all be friends with Kevin.", "cfid": "2048G"}
{"problem_id": "2048F", "problem_title": "F. Kevin and Math Class", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2048/F", "problem_statement": "Kevin is a student from Eversleeping Town, currently attending a math class where the teacher is giving him division exercises.\n\nOn the board, there are two rows of positive integers written, each containing $ n $ numbers. The first row is $ a_1, a_2, \\ldots, a_n $, and the second row is $ b_1, b_2, \\ldots, b_n $.\n\nFor each division exercise, Kevin can choose any segment $ [l, r] $ and find the smallest value $ x $ among $ b_l, b_{l+1}, \\ldots, b_r $. He will then modify each $ a_i $ for $ l \\leq i \\leq r $ to be the ceiling of $ a_i $ divided by $ x $.\n\nFormally, he selects two integers $ 1 \\leq l \\leq r \\leq n $, sets $ x = \\min_{l \\leq i \\leq r} b_i $, and changes all $ a_i $ for $ l \\leq i \\leq r $ to $ \\lceil \\frac{a_i}{x} \\rceil $.\n\nKevin can leave class and go home when all $ a_i $ become $ 1 $. He is eager to leave and wants to know the minimum number of division exercises required to achieve this.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $ t $ ($ 1 \\le t \\le 10^4 $).\n\nThe first line of each test case contains an integer $ n $ ($ 1 \\le n \\leq 2 \\cdot 10^5 $) — the length of the sequence $ a $ and $ b $.\n\nThe second line of each test case contains $ n $ integers $ a_1, a_2, \\ldots, a_n $ ($ 1 \\le a_i \\le 10^{18} $) — the first row of integers on the board.\n\nThe third line of each test case contains $ n $ integers $ b_1, b_2, \\ldots, b_n $ ($ 2 \\le b_i \\le 10^{18} $) — the second row of integers on the board.\n\nIt is guaranteed that the sum of $ n $ over all test cases doesn't exceed $ 2 \\cdot 10^5 $.\n\n### Output\n\nFor each test case, output one integer — the minimum number of division exercises required to leave class.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3\n\n5 4 2\n\n6 3 2\n\n5\n\n3 6 1 3 2\n\n3 5 3 2 2\n\n6\n\n8 3 3 7 5 8\n\n3 2 3 4 2 3\n\n```\n\n#### Output #1\n\n```\n2\n3\n3\n```\n\n### Note\n\nFor the first test case: $ [{\\color{red}{5,4}},2]\\xrightarrow[\\min(b_1,b_2)=3]{\\text{operate segment }[1,2]}[{\\color{red}{2,2,2}}]\\xrightarrow[\\min(b_1,b_2,b_3)=2]{\\text{operate segment }[1,3]}[1,1,1] $.\n\nFor the second test case: $ [{\\color{red}{3,6,1}},3,2]\\xrightarrow[\\min(b_1,b_2,b_3)=3]{\\text{operate segment }[1,3]}[1,{\\color{red}{2,1,3}},2]\\xrightarrow[\\min(b_2,b_3,b_4)=2]{\\text{operate segment }[2,4]}[1,1,1,{\\color{red}{2,2}}]\\xrightarrow[\\min(b_4,b_5)=2]{\\text{operate segment }[4,5]}[1,1,1,1,1] $.", "cfid": "2048F"}
{"problem_id": "2048E", "problem_title": "E. Kevin and Bipartite Graph", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2048/E", "problem_statement": "The Arms Factory needs a poster design pattern and finds Kevin for help.\n\nA poster design pattern is a bipartite graph with $ 2n $ vertices in the left part and $ m $ vertices in the right part, where there is an edge between each vertex in the left part and each vertex in the right part, resulting in a total of $ 2nm $ edges.\n\nKevin must color each edge with a positive integer in the range $ [1, n] $. A poster design pattern is good if there are no monochromatic cycles$^{\\text{∗}}$ in the bipartite graph.\n\nKevin needs your assistance in constructing a good bipartite graph or informing him if it is impossible.\n\n$^{\\text{∗}}$A monochromatic cycle refers to a simple cycle in which all the edges are colored with the same color.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $ t $ ($ 1 \\le t \\le 100 $).\n\nThe only line of each test case contains two integers $ n $ and $ m $ ($ 1 \\le n, m \\leq 10^3 $) — the bipartite graph has $ 2n $ vertices in the left part and $ m $ vertices in the right part.\n\nIt is guaranteed that both the sum of $ n $ and the sum of $ m $ over all test cases do not exceed $ 10^3 $.\n\n### Output\n\nFor each test case, if there is no solution, then output No.\n\nOtherwise, output Yes, and then output $ 2n $ lines, with each line containing $ m $ positive integers. The $ i $-th line's $ j $-th integer represents the color of the edge between the $ i $-th vertex in the left part and the $ j $-th vertex in the right part.\n\nIf there are multiple answers, you can print any of them.\n\nYou can output each letter in any case (for example, the strings yEs, yes, Yes, and YES will be recognized as a positive answer).\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2 2\n\n3 7\n\n5 4\n\n```\n\n#### Output #1\n\n```\nYES\n1 2\n2 1\n2 2\n2 1\nNO\nYES\n1 1 1 1\n1 2 2 2\n1 2 3 3\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n```\n\n### Note\n\nFor the first test case, the graph is shown as follows:\n\n![](https://espresso.codeforces.com/820af5656123195e8f3a7204d13e75d5825110b3.png)\n\nFor the second test case, it can be proven that there is no valid solution.", "cfid": "2048E"}
{"problem_id": "2044F", "problem_title": "F. Easy Demon Problem", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2044/F", "problem_statement": "For an arbitrary grid, Robot defines its beauty to be the sum of elements in the grid.\n\nRobot gives you an array $a$ of length $n$ and an array $b$ of length $m$. You construct a $n$ by $m$ grid $M$ such that $M_{i,j}=a_i\\cdot b_j$ for all $1 \\leq i \\leq n$ and $1 \\leq j \\leq m$.\n\nThen, Robot gives you $q$ queries, each consisting of a single integer $x$. For each query, determine whether or not it is possible to perform the following operation exactly once so that $M$ has a beauty of $x$:\n\n1. Choose integers $r$ and $c$ such that $1 \\leq r \\leq n$ and $1 \\leq c \\leq m$\n2. Set $M_{i,j}$ to be $0$ for all ordered pairs $(i,j)$ such that $i=r$, $j=c$, or both.\n\nNote that queries are not persistent, meaning that you do not actually set any elements to $0$ in the process — you are only required to output if it is possible to find $r$ and $c$ such that if the above operation is performed, the beauty of the grid will be $x$. Also, note that you must perform the operation for each query, even if the beauty of the original grid is already $x$.\n\n### Input\n\nThe first line contains three integers $n$, $m$, and $q$ ($1 \\leq n,m \\leq 2\\cdot 10^5, 1 \\leq q \\leq 5\\cdot 10^4$) — the length of $a$, the length of $b$, and the number of queries respectively.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\leq |a_i| \\leq n$).\n\nThe third line contains $m$ integers $b_1, b_2, \\ldots, b_m$ ($0 \\leq |b_i| \\leq m$).\n\nThe following $q$ lines each contain a single integer $x$ ($1 \\leq |x| \\leq 2\\cdot 10^5$), the beauty of the grid you wish to achieve by setting all elements in a row and a column to $0$.\n\n### Output\n\nFor each testcase, output \"YES\" (without quotes) if there is a way to perform the aforementioned operation such that the beauty is $x$, and \"NO\" (without quotes) otherwise.\n\nYou can output \"YES\" and \"NO\" in any case (for example, strings \"yES\", \"yes\" and \"Yes\" will be recognized as a positive response).\n\n### Examples\n\n#### Input #1\n\n```\n\n3 3 6\n\n-2 3 -3\n\n-2 2 -1\n\n-1\n\n1\n\n-2\n\n2\n\n-3\n\n3\n\n```\n\n#### Output #1\n\n```\nNO\nYES\nNO\nNO\nYES\nNO\n```\n\n#### Input #2\n\n```\n\n5 5 6\n\n1 -2 3 0 0\n\n0 -2 5 0 -3\n\n4\n\n-3\n\n5\n\n2\n\n-1\n\n2\n\n```\n\n#### Output #2\n\n```\nYES\nYES\nYES\nYES\nNO\nYES\n```\n\n### Note\n\nIn the second example, the grid is\n\n0 -2 5 0 -3\n\n0 4 -10 0 6\n\n0 -6 15 0 -9\n\n0 0 0 0 0\n\n0 0 0 0 0\n\nBy performing the operation with $r=4$ and $c=2$, we create the following grid:\n\n0 0 5 0 -3\n\n0 0 -10 0 6\n\n0 0 15 0 -9\n\n0 0 0 0 0\n\n0 0 0 0 0\n\nwhich has beauty $4$. Thus, we output YES.\n\nIn the second query, selecting $r=3$ and $c=5$ creates a grid with beauty $-3$.\n\nIn the third query, selecting $r=3$ and $c=3$ creates a grid with beauty $5$.", "cfid": "2044F"}
{"problem_id": "2044G2", "problem_title": "G2. Medium Demon Problem (hard version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2044/G2", "problem_statement": "This is the hard version of the problem. The key difference between the two versions is highlighted in bold.\n\nA group of $n$ spiders has come together to exchange plushies. Initially, each spider has $1$ plushie. Every year, if spider $i$ has at least one plushie, he will give exactly one plushie to spider $r_i$. Otherwise, he will do nothing. Note that all plushie transfers happen at the same time. In this version, each spider is allowed to have more than 1 plushie at any point in time.\n\nThe process is stable in the current year if each spider has the same number of plushies (before the current year's exchange) as he did the previous year (before the previous year's exchange). Note that year $1$ can never be stable.\n\nFind the first year in which the process becomes stable.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe first line of each test case contains an integer $n$ ($2 \\leq n \\leq 2 \\cdot 10^5$) — the number of spiders.\n\nThe following line contains $n$ integers $r_1, r_2, \\ldots, r_n$ ($1 \\leq r_i \\leq n, r_i \\neq i$) — the recipient of the plushie of each spider.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output an integer on a new line, the first year in which the process becomes stable.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n2\n\n2 1\n\n5\n\n2 3 4 5 1\n\n5\n\n2 1 4 2 3\n\n5\n\n4 1 1 5 4\n\n10\n\n4 3 9 1 6 7 9 10 10 3\n\n```\n\n#### Output #1\n\n```\n2\n2\n5\n5\n5\n```\n\n### Note\n\nFor the second test case:\n\n- At year $1$, the following array shows the number of plushies each spider has: $[1, 1, 1, 1, 1]$. Then, year $1$'s exchange happens.\n- At year $2$, the following array shows the number of plushies each spider has: $[1, 1, 1, 1, 1]$. Since this array is the same as the previous year, this year is stable.\n\nFor the third test case:\n\n- At year $1$, the following array shows the number of plushies each spider has: $[1, 1, 1, 1, 1]$. Then, year $1$'s exchange happens.\n- At year $2$, the following array shows the number of plushies each spider has: $[1, 2, 1, 1, 0]$. Then, year $2$'s exchange happens.\n- At year $3$, the following array shows the number of plushies each spider has: $[1, 3, 0, 1, 0]$. Then, year $3$'s exchange happens.\n- At year $4$, the following array shows the number of plushies each spider has: $[1, 4, 0, 0, 0]$. Then, year $4$'s exchange happens.\n- At year $5$, the following array shows the number of plushies each spider has: $[1, 4, 0, 0, 0]$. Since this array is the same as the previous year, this year is stable.", "cfid": "2044G2"}
{"problem_id": "2044H", "problem_title": "H. Hard Demon Problem", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2044/H", "problem_statement": "Swing is opening a pancake factory! A good pancake factory must be good at flattening things, so Swing is going to test his new equipment on 2D matrices.\n\nSwing is given an $n \\times n$ matrix $M$ containing positive integers. He has $q$ queries to ask you.\n\nFor each query, he gives you four integers $x_1$, $y_1$, $x_2$, $y_2$ and asks you to flatten the submatrix bounded by $(x_1, y_1)$ and $(x_2, y_2)$ into an array $A$. Formally, $A = [M_{(x1,y1)}, M_{(x1,y1+1)}, \\ldots, M_{(x1,y2)}, M_{(x1+1,y1)}, M_{(x1+1,y1+1)}, \\ldots, M_{(x2,y2)}]$.\n\nThe following image depicts the flattening of a submatrix bounded by the red dotted lines. The orange arrows denote the direction that the elements of the submatrix are appended to the back of $A$, and $A$ is shown at the bottom of the image.\n\n![](https://espresso.codeforces.com/b83ac0f3bd1237eacc365e25bc42c255be96bbfb.png)\n\nAfterwards, he asks you for the value of $\\sum_{i=1}^{|A|} A_i \\cdot i$ (sum of $A_i \\cdot i$ over all $i$).\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^3$) — the number of test cases.\n\nThe first line of each test contains two integers $n$ and $q$ ($1 \\leq n \\leq 2000, 1 \\leq q \\leq 10^6$) — the length of $M$ and the number of queries.\n\nThe following $n$ lines contain $n$ integers each, the $i$'th of which contains $M_{(i,1)}, M_{(i,2)}, \\ldots, M_{(i,n)}$ ($1 \\leq M_{(i, j)} \\leq 10^6$).\n\nThe following $q$ lines contain four integers $x_1$, $y_1$, $x_2$, and $y_2$ ($1 \\leq x_1 \\leq x_2 \\leq n, 1 \\leq y_1 \\leq y_2 \\leq n$) — the bounds of the query.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2000$ and the sum of $q$ over all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case, output the results of the $q$ queries on a new line.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n4 3\n\n1 5 2 4\n\n4 9 5 3\n\n4 5 2 3\n\n1 5 5 2\n\n1 1 4 4\n\n2 2 3 3\n\n1 2 4 3\n\n3 3\n\n1 2 3\n\n4 5 6\n\n7 8 9\n\n1 1 1 3\n\n1 3 3 3\n\n2 2 2 2\n\n```\n\n#### Output #1\n\n```\n500 42 168\n14 42 5\n```\n\n### Note\n\nIn the second query of the first test case, $A = [9, 5, 5, 2]$. Therefore, the sum is $1 \\cdot 9 + 2 \\cdot 5 + 3 \\cdot 5 + 4 \\cdot 2 = 42$.", "cfid": "2044H"}
{"problem_id": "2040E", "problem_title": "E. Control of Randomness", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2040/E", "problem_statement": "You are given a tree with $n$ vertices.\n\nLet's place a robot in some vertex $v \\ne 1$, and suppose we initially have $p$ coins. Consider the following process, where in the $i$-th step (starting from $i = 1$):\n\n- If $i$ is odd, the robot moves to an adjacent vertex in the direction of vertex $1$;\n- Else, $i$ is even. You can either pay one coin (if there are some left) and then the robot moves to an adjacent vertex in the direction of vertex $1$, or not pay, and then the robot moves to an adjacent vertex chosen uniformly at random.\n\nThe process stops as soon as the robot reaches vertex $1$. Let $f(v, p)$ be the minimum possible expected number of steps in the process above if we spend our coins optimally.\n\nAnswer $q$ queries, in the $i$-th of which you have to find the value of $f(v_i, p_i)$, modulo$^{\\text{∗}}$ $998\\,244\\,353$.\n\n$^{\\text{∗}}$ Formally, let $M = 998\\,244\\,353$. It can be shown that the answer can be expressed as an irreducible fraction $\\frac{p}{q}$, where $p$ and $q$ are integers and $q \\not \\equiv 0 \\pmod{M}$. Output the integer equal to $p \\cdot q^{-1} \\bmod M$. In other words, output such an integer $x$ that $0 \\le x < M$ and $x \\cdot q \\equiv p \\pmod{M}$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^3$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $q$ ($2 \\le n \\le 2 \\cdot 10^3$; $1 \\le q \\le 2 \\cdot 10^3$) — the number of vertices in the tree and the number of queries.\n\nThe next $n - 1$ lines contain the edges of the tree, one edge per line. The $i$-th line contains two integers $u_i$ and $v_i$ ($1 \\le u_i, v_i \\le n$; $u_i \\neq v_i$), denoting the edge between the nodes $u_i$ and $v_i$.\n\nThe next $q$ lines contain two integers $v_i$ and $p_i$ ($2 \\le v_i \\le n$; $0 \\le p_i \\le n$).\n\nIt's guaranteed that the given edges form a tree.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10 ^ 3$.\n\nIt is guaranteed that the sum of $q$ over all test cases does not exceed $2 \\cdot 10 ^ 3$.\n\n### Output\n\nFor each test case, print $q$ integers: the values of $f(v_i, p_i)$ modulo $998\\,244\\,353$.\n\nFormally, let $M = 998\\,244\\,353$. It can be shown that the answer can be expressed as an irreducible fraction $\\frac{p}{q}$, where $p$ and $q$ are integers and $q \\not \\equiv 0 \\pmod{M}$. Output the integer equal to $p \\cdot q^{-1} \\bmod M$. In other words, output such an integer $x$ that $0 \\le x < M$ and $x \\cdot q \\equiv p \\pmod{M}$.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n4 4\n\n1 2\n\n2 3\n\n2 4\n\n2 0\n\n3 0\n\n4 0\n\n3 1\n\n12 10\n\n1 2\n\n2 3\n\n2 4\n\n1 5\n\n5 6\n\n6 7\n\n6 8\n\n6 9\n\n8 10\n\n10 11\n\n10 12\n\n6 0\n\n9 0\n\n10 0\n\n11 0\n\n3 1\n\n7 1\n\n10 1\n\n12 1\n\n12 2\n\n11 12\n\n```\n\n#### Output #1\n\n```\n1\n6\n6\n2\n4\n9\n8\n15\n2\n3\n6\n9\n5\n5\n```\n\n### Note\n\nThe tree in the first test case:\n\n![](https://espresso.codeforces.com/e4dd6d29016ec239c8901966b682432022feee23.png)\n\nIn the first query, the expected value is equal to $1$, since the robot starts moving from vertex $2$ to vertex $1$ in the first step and the process stops.\n\nLet's calculate the expected value in the second query ($x$ is the number of steps):\n\n- $P(x < 2) = 0$, the distance to vertex $1$ is $2$ and the robot cannot reach it in fewer steps.\n- $P(x = 2) = \\frac{1}{3}$, since there is only one sequence of steps leading to $x = 2$. This is $3 \\rightarrow_{1} 2 \\rightarrow_{0.33} 1$ with probability $1 \\cdot \\frac{1}{3}$.\n- $P(x \\bmod 2 = 1) = 0$, since the robot can reach vertex $1$ by only taking an even number of steps.\n- $P(x = 4) = \\frac{2}{9}$: possible paths $3 \\rightarrow_{1} 2 \\rightarrow_{0.67} [3, 4] \\rightarrow_{1} 2 \\rightarrow_{0.33} 1$.\n- $P(x = 6) = \\frac{4}{27}$: possible paths $3 \\rightarrow_{1} 2 \\rightarrow_{0.67} [3, 4] \\rightarrow_{1} 2 \\rightarrow_{0.67} [3, 4] \\rightarrow_{1} 2 \\rightarrow_{0.33} 1$.\n- $P(x = i \\cdot 2) = \\frac{2^{i - 1}}{3^i}$ in the general case.\n\nAs a result, $f(v, p) = \\sum\\limits_{i=1}^{\\infty}{i \\cdot 2 \\cdot \\frac{2^{i - 1}}{3^i}} = 6$.\n\nThe tree in the second test case:\n\n![](https://espresso.codeforces.com/8a8969f859fff085171f272e9a14ce0d42940506.png)", "cfid": "2040E"}
{"problem_id": "2040F", "problem_title": "F. Number of Cubes", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2040/F", "problem_statement": "Consider a rectangular parallelepiped with sides $a$, $b$, and $c$, that consists of unit cubes of $k$ different colors. We can apply cyclic shifts to the parallelepiped in any of the three directions any number of times$^{\\text{∗}}$.\n\nThere are $d_i$ cubes of the $i$-th color ($1 \\le i \\le k$). How many different parallelepipeds (with the given sides) can be formed from these cubes, no two of which can be made equal by some combination of cyclic shifts?\n\n$^{\\text{∗}}$On the image:\n\n- Top left shows the top view of the original parallelepiped. Lower layers will shift in the same way as the top layer.\n- Top right shows the top view of a parallelepiped shifted to the right by $1$.\n- Bottom left shows the top view of a parallelepiped shifted down by $2$.\n- Bottom right shows the top view of a parallelepiped shifted to the right by $1$ and down by $2$.\n\n![](https://espresso.codeforces.com/57e1e41b75edfb3375b3671eb37702ca81b0c47c.png)\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 100$). The description of the test cases follows.\n\nThe first line of each test case contains four integers: $a$, $b$, $c$, and $k$ ($1 \\le a, b, c \\le 3 \\cdot 10^6$; $a \\cdot b \\cdot c \\le 3 \\cdot 10^6$; $1 \\le k \\le 10^6$) — three sides of the parallelepiped and the number of colors of unit cubes.\n\nThe second line of each test case contains $k$ integers $d_1, d_2, \\ldots, d_k$ ($1 \\le d_1 \\le d_2 \\le \\ldots \\le d_k \\le 3 \\cdot 10^6$) — the elements of the array $d$: the number of cubes of a given color.\n\nIt is guaranteed that in each test case the sum of the elements of the array $d$ is equal to $a \\cdot b \\cdot c$.\n\nIt is guaranteed that the sum of $k$ over all test cases does not exceed $10 ^ 6$.\n\n### Output\n\nFor each test case, print one integer — the number of different parallelepipeds modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n1 1 1 1\n\n1\n\n6 1 1 3\n\n1 2 3\n\n12 1 1 3\n\n2 4 6\n\n3 3 1 2\n\n3 6\n\n2 3 3 2\n\n6 12\n\n72 60 96 4\n\n17280 86400 120960 190080\n\n```\n\n#### Output #1\n\n```\n1\n10\n1160\n12\n1044\n231490207\n```\n\n### Note\n\nIn the first test case, there is only one parallelepiped, which consists of one unit cube.\n\nPossible parallelepipeds in the second test case![](https://espresso.codeforces.com/43a736d0c799ccb60b335c491fc31d86c6a7395d.png)", "cfid": "2040F"}
{"problem_id": "2040D", "problem_title": "D. Non Prime Tree", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2040/D", "problem_statement": "You are given a tree with $n$ vertices.\n\nYou need to construct an array $a_1, a_2, \\ldots, a_n$ of length $n$, consisting of unique integers from $1$ to $2 \\cdot n$, and such that for each edge $u_i \\leftrightarrow v_i$ of the tree, the value $|a_{u_i} - a_{v_i}|$ is not a prime number.\n\nFind any array that satisfies these conditions, or report that there is no such array.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$) — the number of vertices in the tree.\n\nThe next $n - 1$ lines contain the edges of the tree, one edge per line. The $i$-th line contains two integers $u_i$ and $v_i$ ($1 \\le u_i, v_i \\le n$; $u_i \\neq v_i$), denoting the edge between the nodes $u_i$ and $v_i$.\n\nIt's guaranteed that the given edges form a tree.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10 ^ 5$.\n\n### Output\n\nFor each test case, if an array that satisfies the conditions exists, print its elements $a_1, a_2, \\ldots, a_n$. Otherwise, print $-1$.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n5\n\n1 2\n\n2 3\n\n2 4\n\n3 5\n\n7\n\n1 2\n\n1 3\n\n2 4\n\n3 5\n\n3 6\n\n3 7\n\n```\n\n#### Output #1\n\n```\n2 10 1 6 5\n8 7 12 1 4 6 3\n```\n\n### Note\n\nThe possible answers are shown below. Instead of the vertex numbers, the corresponding elements of the array $a$ are written in them.\n\nThe image of the tree in the first test case![](https://espresso.codeforces.com/5ca65da19933368698c761665282cb25069ce311.png)The image of the tree in the second test case![](https://espresso.codeforces.com/b60d252fcad91d0d0847a645925436a7e9ba10b3.png)", "cfid": "2040D"}
{"problem_id": "2050G", "problem_title": "G. Tree Destruction", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2050/G", "problem_statement": "Given a tree$^{\\text{∗}}$ with $n$ vertices. You can choose two vertices $a$ and $b$ once and remove all vertices on the path from $a$ to $b$, including the vertices themselves. If you choose $a=b$, only one vertex will be removed.\n\nYour task is to find the maximum number of connected components$^{\\text{†}}$ that can be formed after removing the path from the tree.\n\n$^{\\text{∗}}$A tree is a connected graph without cycles.\n\n$^{\\text{†}}$A connected component is a set of vertices such that there is a path along the edges from any vertex to any other vertex in the set (and it is not possible to reach vertices not belonging to this set)\n\n### Input\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains one integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$) — the size of the tree.\n\nThe next $n-1$ lines contain two integers $u$ and $v$ ($1 \\le u, v \\le n$, $u \\ne v$) — the vertices connected by an edge. It is guaranteed that the edges form a tree.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output one integer — the maximum number of connected components that can be achieved using the described operation.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n2\n\n1 2\n\n5\n\n1 2\n\n2 3\n\n3 4\n\n3 5\n\n4\n\n1 2\n\n2 3\n\n3 4\n\n5\n\n2 1\n\n3 1\n\n4 1\n\n5 4\n\n6\n\n2 1\n\n3 1\n\n4 1\n\n5 3\n\n6 3\n\n6\n\n2 1\n\n3 2\n\n4 2\n\n5 3\n\n6 4\n\n```\n\n#### Output #1\n\n```\n1\n3\n2\n3\n4\n3\n```", "cfid": "2050G"}
{"problem_id": "2046E1", "problem_title": "E1. Cheops and a Contest (Easy Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2046/E1", "problem_statement": "This is the easy version of the problem. The difference between the versions is that in this version, $m$ equals $2$. You can hack only if you solved all versions of this problem.\n\nThere is a problem-solving competition in Ancient Egypt with $n$ participants, numbered from $1$ to $n$. Each participant comes from a certain city; the cities are numbered from $1$ to $m$. There is at least one participant from each city.\n\nThe $i$-th participant has strength $a_i$, specialization $s_i$, and wisdom $b_i$, so that $b_i \\ge a_i$. Each problem in the competition will have a difficulty $d$ and a unique topic $t$. The $i$-th participant will solve the problem if\n\n- $a_i \\ge d$, i.e., their strength is not less than the problem's difficulty, or\n- $s_i = t$, and $b_i \\ge d$, i.e., their specialization matches the problem's topic, and their wisdom is not less than the problem's difficulty.\n\nCheops wants to choose the problems in such a way that each participant from city $i$ will solve strictly more problems than each participant from city $j$, for all $i < j$.\n\nPlease find a set of at most $5n$ problems, where the topics of all problems are distinct, so that Cheops' will is satisfied, or state that it is impossible.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $T$ ($1 \\le T \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$, $m$ ($2 \\mathbf{=} m \\le n \\le 3 \\cdot {10}^5$) — the number of participants and the number of cities.\n\nThe following $n$ lines describe the participants. The $i$-th line contains three integers —$a_i$, $b_i$, $s_i$ ($0 \\le a_i, b_i, s_i \\le {10}^9$, $a_i \\le b_i$) — strength, wisdom, and specialization of the $i$-th participant, respectively.\n\nThe next $m$ lines describe the cities. In the $i$-th line, the first number is an integer $k_i$ ($1 \\le k_i \\le n$) — the number of participants from the $i$-th city. It is followed by $k_i$ integers $q_{i, 1}, q_{i, 2}, \\ldots, q_{i, k_i}$ — ($1 \\le q_{i, j} \\le n$, $1 \\le j \\le k_i$) — the indices of the participants from this city. It is guaranteed that each participant is mentioned exactly once.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $3 \\cdot 10^5$.\n\n### Output\n\nFor each test case, if there exists a set of problems that satisfies Cheops' conditions, then in the first line output a single integer $p$ ($1 \\le p \\le 5n$) — the number of problems in your solution.\n\nThen output $p$ lines, each containing two integers $d$ and $t$ ($0 \\le d, t \\le {10}^9$) — the difficulty and topic of the respective problem. The topics must be distinct.\n\nIf there is no set of problems that meets Cheops' wishes, print $-1$ instead.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n5 2\n\n5 7 1\n\n6 7 2\n\n3 9 2\n\n5 10 3\n\n4 4 1\n\n2 1 2\n\n3 3 4 5\n\n2 2\n\n1 2 1\n\n1 2 1\n\n1 2\n\n1 1\n\n```\n\n#### Output #1\n\n```\n7\n6 4\n6 5\n5 6\n5 7\n4 8\n4 9\n7 1\n-1\n```", "cfid": "2046E1"}
{"problem_id": "2046C", "problem_title": "C. Adventurers", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2046/C", "problem_statement": "Once, four Roman merchants met in a Roman mansion to discuss their trading plans. They faced the following problem: they traded the same type of goods, and if they traded in the same city, they would inevitably incur losses. They decided to divide up the cities between them where they would trade.\n\nThe map of Rome can be represented in this problem as a plane with certain points marked — the cities of the Roman Empire.\n\nThe merchants decided to choose a certain dividing point $(x_0, y_0)$. Then, in a city with coordinates $(x_i, y_i)$,\n\n- the first merchant sells goods if $x_0 \\le x_i$ and $y_0 \\le y_i$;\n- the second merchant sells goods if $x_0 > x_i$ and $y_0 \\le y_i$;\n- the third merchant sells goods if $x_0 \\le x_i$ and $y_0 > y_i$;\n- the fourth merchant sells goods if $x_0 > x_i$ and $y_0 > y_i$.\n\nThe merchants want to choose $(x_0, y_0)$ in such a way as to maximize the smallest number of cities that any of them gets (i. e., as fair as possible). Please find such a point for them.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($4 \\le n \\le 10^5$) — the number of cities on the map.\n\nEach of the next $n$ lines contains two integers $x_i, y_i$ ($-10^9 \\le x_i, y_i \\le 10^9$) — the coordinates of the cities.\n\nNote that some points may coincide. This is because some cities may be so close that they cannot be distinguished on the map at the given scale.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, in the first line, print a single integer $k$ ($0 \\le k \\le \\frac{n}{4}$) — the maximum possible number of cities that each merchant can get at a minimum.\n\nIn the second line, print two integers $x_0$ and $y_0$ ($|x_0|, |y_0| \\le 10^9$) — the coordinates of the dividing point. If there are multiple suitable points, print any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n4\n\n1 1\n\n1 2\n\n2 1\n\n2 2\n\n4\n\n0 0\n\n0 0\n\n0 0\n\n0 0\n\n8\n\n1 2\n\n2 1\n\n2 -1\n\n1 -2\n\n-1 -2\n\n-2 -1\n\n-2 1\n\n-1 2\n\n7\n\n1 1\n\n1 2\n\n1 3\n\n1 4\n\n2 1\n\n3 1\n\n4 1\n\n```\n\n#### Output #1\n\n```\n1\n2 2\n0\n0 0\n2\n1 0\n0\n0 0\n```", "cfid": "2046C"}
{"problem_id": "2042D", "problem_title": "D. Recommendations", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2042/D", "problem_statement": "Suppose you are working in some audio streaming service. The service has $n$ active users and $10^9$ tracks users can listen to. Users can like tracks and, based on likes, the service should recommend them new tracks.\n\nTracks are numbered from $1$ to $10^9$. It turned out that tracks the $i$-th user likes form a segment $[l_i, r_i]$.\n\nLet's say that the user $j$ is a predictor for user $i$ ($j \\neq i$) if user $j$ likes all tracks the $i$-th user likes (and, possibly, some other tracks too).\n\nAlso, let's say that a track is strongly recommended for user $i$ if the track is not liked by the $i$-th user yet, but it is liked by every predictor for the $i$-th user.\n\nCalculate the number of strongly recommended tracks for each user $i$. If a user doesn't have any predictors, then print $0$ for that user.\n\n### Input\n\nThe first line contains one integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. Next, $t$ cases follow.\n\nThe first line of each test case contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) — the number of users.\n\nThe next $n$ lines contain two integers $l_i$ and $r_i$ per line ($1 \\le l_i \\le r_i \\le 10^9$) — the segment of tracks the $i$-th user likes.\n\nAdditional constraint on the input: the sum of $n$ over all test cases doesn't exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print $n$ integers, where the $i$-th integer is the number of strongly recommended tracks for the $i$-th user (or $0$, if that user doesn't have any predictors).\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3\n\n3 8\n\n2 5\n\n4 5\n\n2\n\n42 42\n\n1 1000000000\n\n3\n\n42 42\n\n1 1000000000\n\n42 42\n\n6\n\n1 10\n\n3 10\n\n3 7\n\n5 7\n\n4 4\n\n1 2\n\n```\n\n#### Output #1\n\n```\n0\n0\n1\n999999999\n0\n0\n0\n0\n0\n2\n3\n2\n4\n8\n```\n\n### Note\n\nIn the first test case:\n\n- the first user has no predictors;\n- the second user has no predictors;\n- the third user has two predictors: users $1$ and $2$; only track $3$ is liked by both of them and not liked by the third user.\n\nIn the second test case, the second user is a predictor for the first user. Therefore, all tracks, except $42$, are strongly recommended for the first user.\n\nIn the third test case, the first user has two predictors: users $2$ and $3$, but there is no track that is liked by them and not liked by the first user himself.", "cfid": "2042D"}
{"problem_id": "2042E", "problem_title": "E. Vertex Pairs", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2042/E", "problem_statement": "You are given a tree consisting of $2n$ vertices. Recall that a tree is a connected undirected graph with no cycles. Each vertex has an integer from $1$ to $n$ written on it. Each value from $1$ to $n$ is written on exactly two different vertices. Each vertex also has a cost —vertex $i$ costs $2^i$.\n\nYou need to choose a subset of vertices of the tree such that:\n\n- the subset is connected; that is, from each vertex in the subset, you can reach every other vertex in the subset by passing only through the vertices in the subset;\n- each value from $1$ to $n$ is written on at least one vertex in the subset.\n\nAmong all such subsets, you need to find the one with the smallest total cost of the vertices in it. Note that you are not required to minimize the number of vertices in the subset.\n\n### Input\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$).\n\nThe second line contains $2n$ integers $a_1, a_2, \\dots, a_{2n}$ ($1 \\le a_i \\le n$). Each value from $1$ to $n$ appears exactly twice.\n\nEach of the next $2n-1$ lines contains two integers $v$ and $u$ ($1 \\le v, u \\le 2n$) — the edges of the tree. These edges form a valid tree.\n\n### Output\n\nIn the first line, print a single integer $k$ — the number of vertices in the subset.\n\nIn the second line, print $k$ distinct integers from $1$ to $2n$ — the indices of the vertices in the chosen subset. The vertices can be printed in an arbitrary order.\n\n### Examples\n\n#### Input #1\n\n```\n\n3\n\n1 1 3 2 3 2\n\n4 2\n\n1 6\n\n6 2\n\n6 3\n\n2 5\n\n```\n\n#### Output #1\n\n```\n3\n2 4 5\n```\n\n#### Input #2\n\n```\n\n3\n\n2 3 1 3 2 1\n\n6 4\n\n2 4\n\n5 2\n\n3 6\n\n3 1\n\n```\n\n#### Output #2\n\n```\n4\n1 3 4 6\n```\n\n#### Input #3\n\n```\n\n6\n\n5 2 3 4 6 4 2 5 6 1 1 3\n\n10 8\n\n2 10\n\n12 7\n\n4 10\n\n5 9\n\n6 2\n\n1 9\n\n3 4\n\n12 6\n\n11 5\n\n4 5\n\n```\n\n#### Output #3\n\n```\n6\n2 3 4 5 8 10\n```\n\n### Note\n\n![](https://espresso.codeforces.com/dbaf0c03e6466f3b077e29f011d0bc2be9d080da.png)\n\nThe images show the answers to the first two examples. The numbers in parentheses are the values written on the vertices.\n\nIn the first example, there are valid subsets such as: $[2, 4, 5]$ (with a cost of $2^2 + 2^4 + 2^5 = 52$), $[2, 4, 5, 6]$ (with a cost of $116$), $[1, 6, 3]$ (with a cost of $74$), $[2, 6, 3]$ (with a cost of $76$), and many others.\n\nIn the second example, the cost of the subset $[4, 6, 3, 1]$ is $90$.", "cfid": "2042E"}
{"problem_id": "2042F", "problem_title": "F. Two Subarrays", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2042/F", "problem_statement": "You are given two integer arrays $a$ and $b$, both of size $n$.\n\nLet's define the cost of the subarray $[l, r]$ as $a_l + a_{l + 1} + \\cdots + a_{r - 1} + a_r + b_l + b_r$. If $l=r$, then the cost of the subarray is $a_l + 2 \\cdot b_l$.\n\nYou have to perform queries of three types:\n\n- \"$1$ $p$ $x$\" — assign $a_{p} := x$;\n- \"$2$ $p$ $x$\" — assign $b_{p} := x$;\n- \"$3$ $l$ $r$\" — find two non-empty non-overlapping subarrays within the segment $[l, r]$ with the maximum total cost and print their total cost.\n\n### Input\n\nThe first line contains a single integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$).\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($-10^9 \\le a_i \\le 10^9$).\n\nThe third line contains $n$ integers $b_1, b_2, \\dots, b_n$ ($-10^9 \\le b_i \\le 10^9$).\n\nThe fourth line contains a single integer $q$ ($1 \\le q \\le 2 \\cdot 10^5$).\n\nThe next $q$ lines contain the queries: one per line. Each query is of one of three types:\n\n- \"$1$ $p$ $x$\" ($1 \\le p \\le n$; $-10^9 \\le x \\le 10^9$);\n- \"$2$ $p$ $x$\" ($1 \\le p \\le n$; $-10^9 \\le x \\le 10^9$);\n- \"$3$ $l$ $r$\" ($1 \\le l < r \\le n$).\n\nIt is guaranteed that there is at least one query of the third type.\n\n### Output\n\nFor each query of the third type, print the maximum possible total cost of two non-empty non-overlapping subarrays within the segment $[l, r]$.\n\n### Examples\n\n#### Input #1\n\n```\n\n7\n\n3 -1 4 -3 2 4 0\n\n0 6 1 0 -3 -2 -1\n\n6\n\n3 1 7\n\n1 2 0\n\n3 3 6\n\n2 5 -3\n\n1 3 2\n\n3 1 5\n\n```\n\n#### Output #1\n\n```\n18\n7\n16\n```\n\n#### Input #2\n\n```\n\n10\n\n2 -1 -3 -2 0 4 5 6 2 5\n\n2 -4 -5 -1 6 2 5 -6 4 2\n\n10\n\n3 6 7\n\n1 10 -2\n\n3 5 7\n\n3 2 8\n\n2 1 -5\n\n2 7 4\n\n3 1 3\n\n3 3 8\n\n3 2 3\n\n1 4 4\n\n```\n\n#### Output #2\n\n```\n23\n28\n28\n-17\n27\n-22\n```", "cfid": "2042F"}
{"problem_id": "2034F1", "problem_title": "F1. Khayyam's Royal Decree (Easy Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2034/F1", "problem_statement": "This is the easy version of the problem. The only differences between the two versions are the constraints on $k$ and the sum of $k$.\n\nIn ancient Persia, [Khayyam](https://en.wikipedia.org/wiki/Omar_Khayyam), a clever merchant and mathematician, is playing a game with his prized treasure chest containing $n$ red rubies worth $2$ dinars each and $m$ blue sapphires worth $1$ dinar each. He also has a satchel, which starts empty, and $k$ scrolls with pairs $(r_1, b_1), (r_2, b_2), \\ldots, (r_k, b_k)$ that describe special conditions.\n\n![](https://espresso.codeforces.com/3576d678d9cd8a4cfa1efad5eb4bc61b9ecbcf4d.webp)\n\nThe game proceeds for $n + m$ turns as follows:\n\n1. Khayyam draws a gem uniformly at random from the chest.\n2. He removes the gem from the chest and places it in his satchel.\n3. If there exists a scroll $i$ ($1 \\leq i \\leq k$) such that the chest contains exactly $r_i$ red rubies and $b_i$ blue sapphires, Khayyam receives a royal decree that doubles the value of all the gems in his satchel as a reward for achieving a special configuration.\n\nNote that the value of some gems might be affected by multiple decrees, and in that case the gems' value is doubled multiple times.\n\nDetermine the expected value of Khayyam's satchel at the end of the game, modulo $998,244,353$.\n\nFormally, let $M = 998,244,353$. It can be shown that the exact answer can be expressed as an irreducible fraction $\\frac{p}{q}$, where $p$ and $q$ are integers and $q \\not \\equiv 0 \\pmod{M}$. Output the integer equal to $p \\cdot q^{-1} \\bmod M$. In other words, output such an integer $x$ that $0 \\le x < M$ and $x \\cdot q \\equiv p \\pmod{M}$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 500$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n$, $m$, and $k$ ($1 \\leq n, m \\leq 2 \\cdot 10^5$, $0 \\leq k \\leq 500$) — the number of red rubies, the number of blue sapphires, and the number of scrolls describing special conditions, respectively.\n\nEach of the next $k$ lines contains two integers $r_i$, $b_i$ ($0 \\leq r_i \\leq n$, $0 \\leq b_i \\leq m$, $1 \\leq r_i + b_i \\leq n+m-1$). It is guaranteed that the pairs $(r_i, b_i)$ are distinct.\n\nIt is guaranteed that the sum of $n$ and the sum of $m$ over all test cases do not exceed $2 \\cdot 10^5$, and the sum of $k$ over all test cases does not exceed $500$.\n\n### Output\n\nFor each test case, print a single integer: the expected value of Khayyam's satchel at the end of the process, modulo $998,244,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3 4 0\n\n1 1 1\n\n1 0\n\n3 3 2\n\n1 1\n\n2 2\n\n3 3 2\n\n2 1\n\n1 2\n\n10 4 5\n\n1 0\n\n8 0\n\n6 4\n\n0 2\n\n7 4\n\n```\n\n#### Output #1\n\n```\n10\n499122180\n798595498\n149736666\n414854846\n```\n\n### Note\n\nIn the first test case, at the end of the process, there will always be $3$ red rubies and $4$ blue sapphires. None of the special conditions described in the scrolls are met, so the value of Khayyam's satchel remains unchanged. The total value of the satchel at the end is always $2 \\cdot 3 + 1 \\cdot 4 = 10$.\n\nIn the second test case, consider the following two cases:\n\n- With probability $1/2$, Khayyam draws a red ruby, and the value of his satchel becomes $2$. Then with probability $1$, he draws a blue sapphire, and the value of his satchel becomes $3$.\n- With probability $1/2$, Khayyam draws a blue sapphire, and the value of his satchel becomes $1$. At this point, the chest contains $r_1 = 1$ red rubies and $b_1 = 0$ blue sapphires, which match the special condition described in a scroll. As a result, the value of the satchel is doubled to $2 \\cdot 1 = 2$. Then with probability $1$, he draws a red ruby, and the value of his satchel becomes $4$.\n\nThus, the expected value at the end is $\\frac{1}{2} \\cdot 3 + \\frac{1}{2} \\cdot 4 = \\frac{7}{2}$, which is $499,122,180$ modulo $998,244,353$.", "cfid": "2034F1"}
{"problem_id": "2034F2", "problem_title": "F2. Khayyam's Royal Decree (Hard Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2034/F2", "problem_statement": "This is the hard version of the problem. The only differences between the two versions are the constraints on $k$ and the sum of $k$.\n\nIn ancient Persia, [Khayyam](https://en.wikipedia.org/wiki/Omar_Khayyam), a clever merchant and mathematician, is playing a game with his prized treasure chest containing $n$ red rubies worth $2$ dinars each and $m$ blue sapphires worth $1$ dinar each. He also has a satchel, which starts empty, and $k$ scrolls with pairs $(r_1, b_1), (r_2, b_2), \\ldots, (r_k, b_k)$ that describe special conditions.\n\n![](https://espresso.codeforces.com/3576d678d9cd8a4cfa1efad5eb4bc61b9ecbcf4d.webp)\n\nThe game proceeds for $n + m$ turns as follows:\n\n1. Khayyam draws a gem uniformly at random from the chest.\n2. He removes the gem from the chest and places it in his satchel.\n3. If there exists a scroll $i$ ($1 \\leq i \\leq k$) such that the chest contains exactly $r_i$ red rubies and $b_i$ blue sapphires, Khayyam receives a royal decree that doubles the value of all the gems in his satchel as a reward for achieving a special configuration.\n\nNote that the value of some gems might be affected by multiple decrees, and in that case the gems' value is doubled multiple times.\n\nDetermine the expected value of Khayyam's satchel at the end of the game, modulo $998,244,353$.\n\nFormally, let $M = 998,244,353$. It can be shown that the exact answer can be expressed as an irreducible fraction $\\frac{p}{q}$, where $p$ and $q$ are integers and $q \\not \\equiv 0 \\pmod{M}$. Output the integer equal to $p \\cdot q^{-1} \\bmod M$. In other words, output such an integer $x$ that $0 \\le x < M$ and $x \\cdot q \\equiv p \\pmod{M}$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 500$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n$, $m$, and $k$ ($1 \\leq n, m \\leq 2 \\cdot 10^5$, $0 \\leq k \\leq 5000$) — the number of red rubies, the number of blue sapphires, and the number of scrolls describing special conditions, respectively.\n\nEach of the next $k$ lines contains two integers $r_i$, $b_i$ ($0 \\leq r_i \\leq n$, $0 \\leq b_i \\leq m$, $1 \\leq r_i + b_i \\leq n+m-1$). It is guaranteed that the pairs $(r_i, b_i)$ are distinct.\n\nIt is guaranteed that the sum of $n$ and the sum of $m$ over all test cases do not exceed $2 \\cdot 10^5$, and the sum of $k$ over all test cases does not exceed $5000$.\n\n### Output\n\nFor each test case, print a single integer: the expected value of Khayyam's satchel at the end of the process, modulo $998,244,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3 4 0\n\n1 1 1\n\n1 0\n\n3 3 2\n\n1 1\n\n2 2\n\n3 3 2\n\n2 1\n\n1 2\n\n10 4 5\n\n1 0\n\n8 0\n\n6 4\n\n0 2\n\n7 4\n\n```\n\n#### Output #1\n\n```\n10\n499122180\n798595498\n149736666\n414854846\n```\n\n### Note\n\nIn the first test case, at the end of the process, there will always be $3$ red rubies and $4$ blue sapphires. None of the special conditions described in the scrolls are met, so the value of Khayyam's satchel remains unchanged. The total value of the satchel at the end is always $2 \\cdot 3 + 1 \\cdot 4 = 10$.\n\nIn the second test case, consider the following two cases:\n\n- With probability $1/2$, Khayyam draws a red ruby, and the value of his satchel becomes $2$. Then with probability $1$, he draws a blue sapphire, and the value of his satchel becomes $3$.\n- With probability $1/2$, Khayyam draws a blue sapphire, and the value of his satchel becomes $1$. At this point, the chest contains $r_1 = 1$ red rubies and $b_1 = 0$ blue sapphires, which match the special condition described in a scroll. As a result, the value of the satchel is doubled to $2 \\cdot 1 = 2$. Then with probability $1$, he draws a red ruby, and the value of his satchel becomes $4$.\n\nThus, the expected value at the end is $\\frac{1}{2} \\cdot 3 + \\frac{1}{2} \\cdot 4 = \\frac{7}{2}$, which is $499,122,180$ modulo $998,244,353$.", "cfid": "2034F2"}
{"problem_id": "2034E", "problem_title": "E. Permutations Harmony", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2034/E", "problem_statement": "Rayan wants to present a gift to Reyhaneh to win her heart. However, Reyhaneh is particular and will only accept a k-harmonic set of permutations.\n\nWe define a k-harmonic set of permutations as a set of $k$ pairwise distinct permutations $p_1, p_2, \\ldots, p_k$ of size $n$ such that for every pair of indices $i$ and $j$ (where $1 \\leq i, j \\leq n$), the following condition holds:\n\n\n\n$$ p_1[i] + p_2[i] + \\ldots + p_k[i] = p_1[j] + p_2[j] + \\ldots + p_k[j] $$\n\nYour task is to help Rayan by either providing a valid k-harmonic set of permutations for given values of $n$ and $k$ or by determining that such a set does not exist.\n\nWe call a sequence of length $n$ a permutation if it contains every integer from $1$ to $n$ exactly once.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\leq t \\leq 1000$), the number of test cases.\n\nEach test case consists of two integers $n$ and $k$ ($1 \\leq n, k \\leq 10^5$). The sum of $n \\cdot k$ over all test cases does not exceed $5 \\cdot 10^5$.\n\n### Output\n\nFor each test case, if a k-harmonic set of permutations exists, print YES on the first line. Then, print $k$ lines, each containing a distinct permutation of the integers from $1$ to $n$.\n\nIf no such set exists, print NO on the first line.\n\nYou can output \"YES\" and \"NO\" in any case (for example, strings \"yEs\", \"yes\", and \"Yes\" will be recognized as a positive response).\n\nIf multiple answers are possible, you can output any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3 3\n\n4 2\n\n5 1\n\n3 2\n\n```\n\n#### Output #1\n\n```\nYES\n1 2 3\n2 3 1\n3 1 2\nYES\n1 2 3 4\n4 3 2 1\nNO\nYES\n1 2 3\n3 2 1\n```\n\n### Note\n\nIn example 1, we have $p_1 = [1, 2, 3]$, $p_2 = [2, 3, 1]$, and $p_3 = [3, 1, 2]$. It's easy to see that $p_1[1] + p_2[1] + p_3[1] = p_1[2] + p_2[2] + p_3[2] = p_1[3] + p_2[3] + p_3[3] = 6$.\n\nIn example 2, we have $p_1 = [1, 2, 3, 4]$ and $p_2 = [4, 3, 2, 1]$. It's easy to see that $p_1[1] + p_2[1] = p_1[2] + p_2[2] = p_1[3] + p_2[3] = p_1[4] + p_2[4] = 5$.\n\nIn example 3, as there are five distinct elements in $p_1$, it's obvious that the answer is \"No\".", "cfid": "2034E"}
{"problem_id": "2039E", "problem_title": "E. Shohag Loves Inversions", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2039/E", "problem_statement": "Shohag has an array $a$ of integers. Initially $a = [0, 1]$. He can repeatedly perform the following operation any number of times:\n\n- Let $k$ be the number of inversions$^{\\text{∗}}$ in the current array $a$.\n- Insert $k$ at any position in $a$, including the beginning or the end.\n\nFor example, if $a = [4, 6, 2, 4]$, then the number of inversions is $k = 3$. So Shohag can obtain the following arrays after the operation: $[\\textbf{3}, 4, 6, 2, 4]$, $[4, \\textbf{3}, 6, 2, 4]$, $[4, 6, \\textbf{3}, 2, 4]$, $[4, 6, 2, \\textbf{3}, 4]$, and $[4, 6, 2, 4, \\textbf{3}]$.\n\nGiven an integer $n$, help Shohag count, modulo $998\\,244\\,353$, the number of distinct arrays of length $n$ that can be obtained after performing the operations.\n\n$^{\\text{∗}}$The number of inversions in an array $a$ is the number of pairs of indices ($i$, $j$) such that $i < j$ and $a_i > a_j$.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first and only line of each test case contains an integer $n$ ($2 \\le n \\le 10^6$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case, output an integer — the number of possible arrays modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n4\n\n2\n\n7\n\n69\n\n```\n\n#### Output #1\n\n```\n5\n1\n682\n325188814\n```\n\n### Note\n\nIn the first test case, the following $5$ arrays can be obtained (the inserted inversion count is shown in bold):\n\n- $[0, 1] \\rightarrow [0, \\textbf{0}, 1] \\rightarrow [0, 0, 1, \\textbf{0}]$,\n- $[0, 1] \\rightarrow [0, \\textbf{0}, 1] \\rightarrow [0, 0, \\textbf{0}, 1]$,\n- $[0, 1] \\rightarrow [0, 1, \\textbf{0}] \\rightarrow [0, 1, 0, \\textbf{1}]$,\n- $[0, 1] \\rightarrow [0, 1, \\textbf{0}] \\rightarrow [0, 1, \\textbf{1}, 0]$,\n- $[0, 1] \\rightarrow [0, 1, \\textbf{0}] \\rightarrow [\\textbf{1}, 0, 1, 0]$.", "cfid": "2039E"}
{"problem_id": "2039F1", "problem_title": "F1. Shohag Loves Counting (Easy Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2039/F1", "problem_statement": "This is the easy version of the problem. The only differences between the two versions of this problem are the constraints on $t$, $m$, and the sum of $m$. You can only make hacks if both versions of the problem are solved.\n\nFor an integer array $a$ of length $n$, define $f(k)$ as the [greatest common divisor (GCD)](https://en.wikipedia.org/wiki/Greatest_common_divisor) of the maximum values of all subarrays$^{\\text{∗}}$ of length $k$. For example, if the array is $[2, 1, 4, 6, 2]$, then $f(3) = \\operatorname{gcd}(\\operatorname{max}([2, 1, 4]), \\operatorname{max}([1, 4, 6]), \\operatorname{max}([4, 6, 2])) = \\operatorname{gcd}(4, 6, 6) = 2$.\n\nAn array is good if $f(i) \\neq f(j)$ is satisfied over all pairs $1 \\le i \\lt j \\le n$.\n\nShohag has an integer $m$. Help him count the number, modulo $998\\,244\\,353$, of non-empty good arrays of arbitrary length such that each element of the array is an integer from $1$ to $m$.\n\n$^{\\text{∗}}$An array $d$ is a subarray of an array $c$ if $d$ can be obtained from $c$ by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first and only line of each test case contains an integer $m$ ($1 \\le m \\le 10^5$).\n\nIt is guaranteed that the sum of $m$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, output an integer — the number of valid arrays modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2\n\n5\n\n9\n\n```\n\n#### Output #1\n\n```\n4\n29\n165\n```\n\n### Note\n\nIn the first test case, the valid arrays are $[1]$, $[1, 2]$, $[2]$, and $[2, 1]$.\n\nIn the second test case, there are a total of $29$ valid arrays. In particular, the array $[2, 1, 4]$ with length $n = 3$ is valid because all elements are from $1$ to $m = 5$ and $f(1)$, $f(2)$ and $f(n = 3)$ all are distinct:\n\n- $f(1) = \\operatorname{gcd}(\\operatorname{max}([2]), \\operatorname{max}([1]), \\operatorname{max}([4])) = \\operatorname{gcd}(2, 1, 4) = 1.$\n- $f(2) = \\operatorname{gcd}(\\operatorname{max}([2, 1]), \\operatorname{max}([1, 4])) = \\operatorname{gcd}(2, 4) = 2.$\n- $f(3) = \\operatorname{gcd}(\\operatorname{max}([2, 1, 4])) = \\operatorname{gcd}(4) = 4.$", "cfid": "2039F1"}
{"problem_id": "2037G", "problem_title": "G. Natlan Exploring", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2037/G", "problem_statement": "You are exploring the stunning region of Natlan! This region consists of $n$ cities, and each city is rated with an attractiveness $a_i$. A directed edge exists from City $i$ to City $j$ if and only if $i < j$ and $\\gcd(a_i,a_j)\\neq 1$, where $\\gcd(x, y)$ denotes the [greatest common divisor (GCD)](https://en.wikipedia.org/wiki/Greatest_common_divisor) of integers $x$ and $y$.\n\nStarting from City $1$, your task is to determine the total number of distinct paths you can take to reach City $n$, modulo $998\\,244\\,353$. Two paths are different if and only if the set of cities visited is different.\n\n### Input\n\nThe first line contains an integer $n$ ($2 \\leq n \\leq 2 \\cdot 10^5$) — the number of cities.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($2 \\leq a_i \\leq 10^6$) — the attractiveness of each city.\n\n### Output\n\nOutput the total number of distinct paths you can take to reach City $n$, modulo $998\\,244\\,353$.\n\n### Examples\n\n#### Input #1\n\n```\n\n5\n\n2 6 3 4 6\n\n```\n\n#### Output #1\n\n```\n5\n```\n\n#### Input #2\n\n```\n\n5\n\n4 196 2662 2197 121\n\n```\n\n#### Output #2\n\n```\n2\n```\n\n#### Input #3\n\n```\n\n7\n\n3 6 8 9 11 12 20\n\n```\n\n#### Output #3\n\n```\n7\n```\n\n#### Input #4\n\n```\n\n2\n\n2 3\n\n```\n\n#### Output #4\n\n```\n0\n```\n\n### Note\n\nIn the first example, the five paths are the following:\n\n- City $1\\rightarrow$ City $5$\n- City $1\\rightarrow$ City $2\\rightarrow$ City $5$\n- City $1\\rightarrow$ City $2\\rightarrow$ City $3\\rightarrow$ City $5$\n- City $1\\rightarrow$ City $2\\rightarrow$ City $4\\rightarrow$ City $5$\n- City $1\\rightarrow$ City $4\\rightarrow$ City $5$\n\nIn the second example, the two paths are the following:\n\n- City $1\\rightarrow$ City $3\\rightarrow$ City $5$\n- City $1\\rightarrow$ City $2\\rightarrow$ City $3\\rightarrow$ City $5$", "cfid": "2037G"}
{"problem_id": "2037F", "problem_title": "F. Ardent Flames", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2037/F", "problem_statement": "You have obtained the new limited event character Xilonen. You decide to use her in combat.\n\nThere are $n$ enemies in a line. The $i$'th enemy from the left has health $h_i$ and is currently at position $x_i$. Xilonen has an attack damage of $m$, and you are ready to defeat the enemies with her.\n\nXilonen has a powerful \"ground stomp\" attack. Before you perform any attacks, you select an integer $p$ and position Xilonen there ($p$ can be any integer position, including a position with an enemy currently). Afterwards, for each attack, she deals $m$ damage to an enemy at position $p$ (if there are any), $m-1$ damage to enemies at positions $p-1$ and $p+1$, $m-2$ damage to enemies at positions $p-2$ and $p+2$, and so on. Enemies that are at least a distance of $m$ away from Xilonen take no damage from attacks.\n\nFormally, if there is an enemy at position $x$, she will deal $\\max(0,m - |p - x|)$ damage to that enemy each hit. Note that you may not choose a different $p$ for different attacks.\n\nOver all possible $p$, output the minimum number of attacks Xilonen must perform to defeat at least $k$ enemies. If it is impossible to find a $p$ such that eventually at least $k$ enemies will be defeated, output $-1$ instead. Note that an enemy is considered to be defeated if its health reaches $0$ or below.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) – the number of test cases.\n\nThe first line of each test case contains three integers $n$, $m$, and $k$ ($1 \\leq k \\leq n \\leq 10^5$, $1 \\leq m \\leq 10^9$).\n\nThe following line contains $n$ integers $h_1, h_2, ..., h_n$ ($1 \\leq h_i \\leq 10^9$).\n\nThe last line of each testcase contains $n$ integers $x_1, x_2, ..., x_n$ ($1\\leq x_i \\leq 10^9$, $x_i < x_{i+1}$ for all $1 \\leq i < n$)\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, output an integer on a new line, the minimum number of attacks that must be performed to defeat at least $k$ enemies. If it is impossible to find a $p$ such that eventually at least $k$ enemies will be defeated, output $-1$ instead.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n5 5 3\n\n7 7 7 7 7\n\n1 2 3 4 5\n\n9 5 9\n\n2 4 6 8 10 8 6 4 2\n\n1 2 3 4 5 6 7 8 9\n\n2 10 2\n\n1 1\n\n1 20\n\n2 10 1\n\n69696969 420420420\n\n1 20\n\n2 10 2\n\n10 15\n\n1 19\n\n2 2 2\n\n1000000000 1\n\n1 3\n\n```\n\n#### Output #1\n\n```\n2\n2\n-1\n6969697\n15\n1000000000\n```\n\n### Note\n\nIn the first testcase, it is optimal to select $p=2$. Each attack, the first enemy takes $5-|2-1|=4$ damage, the second enemy takes $5$ damage, the third enemy takes $4$ damage, the fourth enemy takes $3$ damage, and the fifth enemy takes $2$ damage. After $2$ attacks, the first three enemies will be defeated. It can be shown that it is impossible to defeat $3$ enemies in less than $2$ attacks, no matter which $p$ is selected.\n\nIn the second testcase, we must kill all $9$ enemies. By selecting $p=5$, all nine enemies will be defeated in $2$ attacks.\n\nIn the third testcase, we must kill both enemies. However, it can be shown that no $p$ selected will damage both enemies at the same time, so the answer is $-1$.\n\nIn the fourth testcase, selecting $p=1$ will enable us to defeat the first enemy in $6969697$ attacks.\n\nIn the fifth testcase, selecting $p=10$ will make each enemy take $1$ damage per attack. Both enemies will be defeated in $15$ attacks.", "cfid": "2037F"}
{"problem_id": "2031F", "problem_title": "F. Penchick and Even Medians", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2031/F", "problem_statement": "This is an interactive problem.\n\nReturning from a restful vacation on Australia's Gold Coast, Penchick forgot to bring home gifts for his pet duck Duong Canh! But perhaps a beautiful problem crafted through deep thought on the scenic beaches could be the perfect souvenir.\n\nThere is a hidden permutation$^{\\text{∗}}$ $p$ of length $n$, where $n$ is even. You are allowed to make the following query:\n\n- Choose a subsequence$^{\\text{†}}$ of the permutation $p$ with even length $4\\le k\\le n$. The interactor will return the value of the two medians$^{\\text{‡}}$ in the chosen subsequence.\n\nFind the index of the two medians in permutation $p$ using at most $80$ queries.\n\nNote that the interactor is non-adaptive. This means that the permutation $p$ is fixed at the beginning and will not change based on your queries.\n\n$^{\\text{∗}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n$^{\\text{†}}$A sequence $a$ is a subsequence of a sequence $b$ if $a$ can be obtained from $b$ by the deletion of several (possibly, zero or all) element from arbitrary positions.\n\n$^{\\text{‡}}$The two medians of an array $a$ with even length $k$ are defined as the $\\frac{k}{2}$-th and $\\left(\\frac{k}{2} + 1\\right)$-th smallest element in the array ($1$-indexed).\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$). The description of the test cases follows.\n\nThe only line of each test case contains a single integer $n$ ($6 \\le n \\le 100$, $n$ is even) — the length of the hidden permutation $p$.\n\nFor each test case, after reading the integer $n$, you should begin the interaction and find the answer before reading $n$ for the next test case.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^4$.\n\n### Interaction\n\nTo make a query, print a single line in the following format:\n\n- $\\mathtt{?}\\;k\\;x_1\\;x_2 \\ldots x_{k-1}\\;x_k$ ($4\\le k\\le n$, $k$ is even, $1 \\le x_i \\le n$, $x_i$ is pairwise distinct) — the length of the chosen subsequence followed by the indices of the chosen subsequence.\n\nAfter each query, you should read a line containing two integers $m_1$ and $m_2$ ($1 \\le m_1 < m_2 \\le n$) — the value of the two medians in array $[p_{x_1}, p_{x_2}, \\ldots, p_{x_{k-1}}, p_{x_k}]$.\n\nYou can make at most $80$ such queries in each test case.\n\nTo give the final answer, print a single line in the following format:\n\n- $\\mathtt{!}\\;i_1\\;i_2$ ($1\\le i_1, i_2 \\le n$) — the index of the two medians.\n\nNote that the order in which $i_1$ and $i_2$ is printed does not matter. In other words, your solution is valid as long as $p_{i_1} = \\frac{n}{2}$ and $p_{i_2} = \\frac{n}{2} + 1$, or $p_{i_1} = \\frac{n}{2} + 1$ and $p_{i_2} = \\frac{n}{2}$.\n\nAfter printing each query do not forget to output the end of line and flush$^{\\text{∗}}$ the output. Otherwise, you will get Idleness limit exceeded verdict.\n\nIf, at any interaction step, you read $-1$ instead of valid data, your solution must exit immediately. This means that your solution will receive Wrong answer because of an invalid query or any other mistake. Failing to exit can result in an arbitrary verdict because your solution will continue to read from a closed stream.\n\nHack format\n\nFor hacks, use the following format.\n\nThe first line should contain $t$ — the number of test cases.\n\nThe first line of each test case should contain a single even integer $n$.\n\nThe second line of each test case should contain a permutation $p_1, p_2, \\ldots, p_n$ of length $n$.\n\nAs an example, the hack format for the example input is:\n\n```\n\n2\n\n6\n\n6 2 3 5 1 4\n\n10\n\n10 9 8 7 6 5 4 3 2 1\n\n```\n\n$^{\\text{∗}}$To flush, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- sys.stdout.flush() in Python;\n- see the documentation for other languages.\n\n### Example\n\n#### Input #1\n\n```\n2\n6\n\n3 4\n\n3 4\n\n2 3\n\n10\n\n3 4\n\n6 7\n```\n\n#### Output #1\n\n```\n\n? 6 1 2 3 4 5 6\n\n? 4 3 6 1 5\n\n? 4 3 6 2 5\n\n! 3 6\n\n? 6 1 3 7 8 9 10\n\n? 8 1 2 3 4 5 6 7 8\n\n! 6 5```\n\n### Note\n\nIn the first test case, the hidden permutation is $p = [6, 2, 3, 5, 1, 4]$.\n\n1. The entire permutation was chosen for the first query. The two medians of the entire permutation $p$ are $3$ and $4$.\n2. The indices of the chosen subsequence in the second query are $3$, $6$, $1$, and $5$. The interactor returns the two medians of the subsequence $[p_3, p_6, p_1, p_5] = [3, 4, 6, 1]$, which are $3$ and $4$.\n3. The indices of the chosen subsequence in the second query are $3$, $6$, $2$, and $5$. The interactor returns the two medians of the subsequence $[p_3, p_6, p_2, p_5] = [3, 4, 2, 1]$, which are $2$ and $3$.\n\nThe answer \"! 3 6\" is valid as $p_3 = 3$ and $p_6 = 4$.\n\nIn the second test case, the hidden permutation is $p = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]$.\n\n1. The indices of the chosen subsequence in the second query are $1$, $3$, $7$, $8$, $9$, and $10$. The interactor returns the two medians of the subsequence $[p_1, p_3, p_7, p_8, p_9, p_{10}] = [10, 8, 4, 3, 2, 1]$, which are $3$ and $4$.\n2. The indices of the chosen subsequence in the second query are $1$, $2$, $3$, $4$, $5$, $6$, $7$, and $8$. The interactor returns the two medians of the subsequence $[p_1, p_2, p_3, p_4, p_5, p_6, p_7, p_8] = [10, 9, 8, 7, 6, 5, 4, 3]$, which are $6$ and $7$.\n\nThe answer \"! 5 6\" is valid as $p_5 = 6$ and $p_6 = 5$.", "cfid": "2031F"}
{"problem_id": "2031E", "problem_title": "E. Penchick and Chloe's Trees", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2031/E", "problem_statement": "With just a few hours left until Penchick and Chloe leave for Singapore, they could hardly wait to see the towering trees at the Singapore Botanic Gardens! Attempting to contain their excitement, Penchick crafted a rooted tree to keep Chloe and himself busy.\n\nPenchick has a rooted tree$^{\\text{∗}}$ consisting of $n$ vertices, numbered from $1$ to $n$, with vertex $1$ as the root, and Chloe can select a non-negative integer $d$ to create a perfect binary tree$^{\\text{†}}$ of depth $d$.\n\nSince Penchick and Chloe are good friends, Chloe wants her tree to be isomorphic$^{\\text{‡}}$ to Penchick's tree. To meet this condition, Chloe can perform the following operation on her own tree any number of times:\n\n- Select an edge $(u,v)$, where $u$ is the parent of $v$.\n- Remove vertex $v$ and all the edges connected to $v$, then connect all of $v$'s previous children directly to $u$.\n\nIn particular, doing an operation on an edge $(u, v)$ where $v$ is a leaf will delete vertex $v$ without adding any new edges.\n\nSince constructing a perfect binary tree can be time-consuming, Chloe wants to choose the minimum $d$ such that a perfect binary tree of depth $d$ can be made isomorphic to Penchick's tree using the above operation. Note that she can't change the roots of the trees.\n\n$^{\\text{∗}}$A tree is a connected graph without cycles. A rooted tree is a tree where one vertex is special and called the root. The parent of vertex $v$ is the first vertex on the simple path from $v$ to the root. The root has no parent. A child of vertex $v$ is any vertex $u$ for which $v$ is the parent. A leaf is any vertex without children.\n\n$^{\\text{†}}$A full binary tree is rooted tree, in which each node has $0$ or $2$ children. A perfect binary tree is a full binary tree in which every leaf is at the same distance from the root. The depth of such a tree is the distance from the root to a leaf.\n\n$^{\\text{‡}}$Two rooted trees, rooted at $r_1$ and $r_2$ respectively, are considered isomorphic if there exists a permutation $p$ of the vertices such that an edge $(u, v)$ exists in the first tree if and only if the edge $(p_u, p_v)$ exists in the second tree, and $p_{r_1} = r_2$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^5$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n \\le 10^6$) — the number of vertices in Penchick's tree.\n\nThe second line of each test case contains $n-1$ integers $p_2, p_3, \\ldots, p_n$ ($1 \\leq p_i \\leq i-1$) — the parent of vertex $i$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case, output a single integer on each line: the minimum depth of Chloe's perfect binary tree.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n6\n\n1 2 2 1 1\n\n15\n\n1 1 2 2 3 3 4 4 5 5 6 6 7 7\n\n5\n\n1 2 2 2\n\n7\n\n1 1 2 1 1 2\n\n10\n\n1 1 1 2 2 2 4 3 3\n\n```\n\n#### Output #1\n\n```\n2\n3\n3\n3\n3\n```\n\n### Note\n\nFor the first test case, create a perfect binary tree with depth $2$.\n\n![](https://espresso.codeforces.com/8d42bd7999c3041650dc035cbfa71627f0c6983a.png)\n\nConsider carrying out the operation on edge $AC$. Then the edges $AC$, $CF$, and $CG$ are removed, and edges $AF$ and $AG$ are added.\n\n![](https://espresso.codeforces.com/4c459430fe1a6b01a84920a49fdb9eb61a3d3261.png)\n\nThe resulting tree is isomorphic to the tree given in the input. It can be proven that no sequence of operations carried out on a binary tree of depth less than $2$ can lead to a tree isomorphic to the tree given in the input.\n\nIn the second test case, the tree is already isomorphic to a perfect binary tree of depth $3$.", "cfid": "2031E"}
{"problem_id": "2028F", "problem_title": "F. Alice's Adventures in Addition", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2028/F", "problem_statement": "Note that the memory limit is unusual.\n\nThe Cheshire Cat has a riddle for Alice: given $n$ integers $a\\_1, a\\_2, \\\\ldots, a\\_n$ and a target $m$, is there a way to insert $+$ and $\\\\times$ into the circles of the expression \n\n$$a_1 \\circ a_2 \\circ \\cdots \\circ a_n = m$$\n\nto make it true? We follow the usual order of operations: $\\times$ is done before $+$.\n\nAlthough Alice is excellent at chess, she is not good at math. Please help her so she can find a way out of Wonderland!\n\n### Input\n\nEach test contains multiple test cases. The first line of input contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains two integers $n, m$ ($1\\le n\\le 2\\cdot 10^5$; $1\\le m\\le 10^4$) — the number of integers and the target, respectively.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0\\le a_i\\le 10^4$) — the elements of the array $a$.\n\nThe sum of $n$ over all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, output \"YES\" without quotes if it is possible to get the target by inserting $+$ or $\\times$ and \"NO\" otherwise.\n\nYou can output each letter in any case (for example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as a positive answer).\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n5 4\n\n2 1 1 1 2\n\n5 5\n\n2 1 1 1 2\n\n5 6\n\n2 1 1 1 2\n\n5 7\n\n2 1 1 1 2\n\n5 8\n\n2 1 1 1 2\n\n5 6\n\n2 0 2 2 3\n\n```\n\n#### Output #1\n\n```\nYES\nYES\nYES\nYES\nNO\nYES\n```\n\n### Note\n\nPossible solutions for the first four test cases are shown below. \n\n$$\\begin{align*} 2 \\times 1 + 1 \\times 1 \\times 2 &= 4 \\\\ 2 \\times 1 + 1 + 1 \\times 2 &= 5 \\\\ 2 \\times 1 + 1 + 1 + 2 &= 6 \\\\ 2 + 1 + 1 + 1 + 2 &= 7 \\\\ \\end{align*}$$\n\nIt is impossible to get a result of $8$ in the fifth test case.", "cfid": "2028F"}
{"problem_id": "2028D", "problem_title": "D. Alice's Adventures in Cards", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2028/D", "problem_statement": "Alice is playing cards with the Queen of Hearts, King of Hearts, and Jack of Hearts. There are $n$ different types of cards in their card game. Alice currently has a card of type $1$ and needs a card of type $n$ to escape Wonderland. The other players have one of each kind of card.\n\nIn this card game, Alice can trade cards with the three other players. Each player has different preferences for the $n$ types of cards, which can be described by permutations$^{\\text{∗}}$ $q$, $k$, and $j$ for the Queen, King, and Jack, respectively.\n\nA player values card $a$ more than card $b$ if for their permutation $p$, $p_a > p_b$. Then, this player is willing to trade card $b$ to Alice in exchange for card $a$. Alice's preferences are straightforward: she values card $a$ more than card $b$ if $a > b$, and she will also only trade according to these preferences.\n\nDetermine if Alice can trade up from card $1$ to card $n$ subject to these preferences, and if it is possible, give a possible set of trades to do it.\n\n$^{\\text{∗}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains an integer $n$ ($2\\le n\\le 2\\cdot 10^5$) — the number of card types.\n\nThe next three lines contain the preferences of the Queen, King, and Jack respectively. Each of these lines contains $n$ integers $p_1, p_2, \\ldots, p_n$ ($1\\le p_i\\le n$) — a permutation corresponding to the player's preferences.\n\nThe sum of $n$ over all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, on the first line output a single string \"YES\" or \"NO\" (without the quotes) denoting whether Alice can trade up to card $n$.\n\nIf the first line was \"YES\", then on the next line output $k$ — the number of trades Alice will make. On the next $k$ lines output space separated a character $c\\in \\{\\texttt{q}, \\texttt{k}, \\texttt{j}\\}$ and integer $x$, denoting that Alice trades with player $c$ to get card $x$. It must be the case that on the $k$'th line, $x = n$. If there are multiple solutions, print any of them.\n\nYou can output this answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses. The same goes for the character $c$ denoting the player in the trade ($\\texttt{Q}, \\texttt{K}, \\texttt{J}$ will all be accepted alongside their lowercase variants).\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n3\n\n1 3 2\n\n2 1 3\n\n1 2 3\n\n4\n\n2 3 1 4\n\n1 2 3 4\n\n1 4 2 3\n\n```\n\n#### Output #1\n\n```\nYES\n2\nk 2\nq 3\nNO\n```\n\n### Note\n\nIn the first testcase, Alice can trade with the King to get card $2$. She can then trade with the Queen to get card $3$.\n\nIn the second testcase, even though Alice can trade with the Queen to get card $3$, with the King to get card $2$, and then with the Jack to get card $4$, this is not a valid solution since it doesn't respect Alice's preferences. We can show that there is no way for Alice to get to card $4$.", "cfid": "2028D"}
{"problem_id": "2028E", "problem_title": "E. Alice's Adventures in the Rabbit Hole", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2028/E", "problem_statement": "Alice is at the bottom of the rabbit hole! The rabbit hole can be modeled as a tree$^{\\text{∗}}$ which has an exit at vertex $1$, and Alice starts at some vertex $v$. She wants to get out of the hole, but unfortunately, the Queen of Hearts has ordered her execution.\n\nEach minute, a fair coin is flipped. If it lands heads, Alice gets to move to an adjacent vertex of her current location, and otherwise, the Queen of Hearts gets to pull Alice to an adjacent vertex of the Queen's choosing. If Alice ever ends up on any of the non-root leaves$^{\\text{†}}$ of the tree, Alice loses.\n\nAssuming both of them move optimally, compute the probability that Alice manages to escape for every single starting vertex $1\\le v\\le n$. Since these probabilities can be very small, output them modulo $998\\,244\\,353$.\n\nFormally, let $M = 998\\,244\\,353$. It can be shown that the exact answer can be expressed as an irreducible fraction $\\frac{p}{q}$, where $p$ and $q$ are integers and $q \\not \\equiv 0 \\pmod{M}$. Output the integer equal to $p \\cdot q^{-1} \\bmod M$. In other words, output such an integer $x$ that $0 \\le x < M$ and $x \\cdot q \\equiv p \\pmod{M}$.\n\n$^{\\text{∗}}$A tree is a connected simple graph which has $n$ vertices and $n-1$ edges.\n\n$^{\\text{†}}$A leaf is a vertex that is connected to exactly one edge.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2\\le n\\le 2\\cdot 10^5$) — the number of vertices in the tree.\n\nThe $i$-th of the next $n - 1$ lines contains two integers $x_i$ and $y_i$ ($1 \\le x_i, y_i \\le n$ and $x_i \\neq y_i$) — the edges of the tree. It is guaranteed that the given edges form a tree.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, output $n$ integers on one line — the probabilities of Alice escaping starting from vertex $1, 2, \\ldots, n$. Since these probabilities can be very small, output them modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n5\n\n1 2\n\n1 3\n\n2 4\n\n3 5\n\n9\n\n1 2\n\n2 3\n\n4 5\n\n5 6\n\n7 8\n\n8 9\n\n2 4\n\n5 7\n\n```\n\n#### Output #1\n\n```\n1 499122177 499122177 0 0\n1 499122177 0 332748118 166374059 0 443664157 720954255 0\n```\n\n### Note\n\nFor the first test case:\n\n1. Alice escapes from the root (vertex $1$) by definition with probability $1$.\n2. Alice immediately loses from vertices $4$ and $5$ since they are leaves.\n3. From the other two vertices, Alice escapes with probability $\\frac 12$ since the Queen will pull her to the leaves.", "cfid": "2028E"}
{"problem_id": "2029F", "problem_title": "F. Palindrome Everywhere", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2029/F", "problem_statement": "You are given a cycle with $n$ vertices numbered from $0$ to $n-1$. For each $0\\le i\\le n-1$, there is an undirected edge between vertex $i$ and vertex $((i+1)\\bmod n)$ with the color $c_i$ ($c_i=\\texttt{R}$ or $\\texttt{B}$).\n\nDetermine whether the following condition holds for every pair of vertices $(i,j)$ ($0\\le i<j\\le n-1$):\n\n- There exists a palindrome route between vertex $i$ and vertex $j$. Note that the route may not be simple. Formally, there must exist a sequence $p=[p_0,p_1,p_2,\\ldots,p_m]$ such that:\n  - $p_0=i$, $p_m=j$;\n  - For each $0\\leq x\\le m-1$, either $p_{x+1}=(p_x+1)\\bmod n$ or $p_{x+1}=(p_{x}-1)\\bmod n$;\n  - For each $0\\le x\\le y\\le m-1$ satisfying $x+y=m-1$, the edge between $p_x$ and $p_{x+1}$ has the same color as the edge between $p_y$ and $p_{y+1}$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^5$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains an integer $n$ ($3\\leq n\\leq10^6$) — the number of vertices in the cycle.\n\nThe second line contains a string $c$ of length $n$ ($c_i=\\texttt{R}$ or $\\texttt{B}$) — the color of each edge.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case, print \"YES\" (without quotes) if there is a palindrome route between any pair of nodes, and \"NO\" (without quotes) otherwise.\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n5\n\nRRRRR\n\n5\n\nRRRRB\n\n5\n\nRBBRB\n\n6\n\nRBRBRB\n\n6\n\nRRBBRB\n\n5\n\nRBRBR\n\n12\n\nRRBRRBRRBRRB\n\n```\n\n#### Output #1\n\n```\nYES\nYES\nYES\nNO\nNO\nYES\nNO\n```\n\n### Note\n\nIn the first test case, it is easy to show that there is a palindrome route between any two vertices.\n\nIn the second test case, for any two vertices, there exists a palindrome route with only red edges.\n\nIn the third test case, the cycle is as follows: $0\\color{red}{\\overset{\\texttt{R}}{\\longleftrightarrow}}1\\color{blue}{\\overset{\\texttt{B}}{\\longleftrightarrow}}2\\color{blue}{\\overset{\\texttt{B}}{\\longleftrightarrow}}3\\color{red}{\\overset{\\texttt{R}}{\\longleftrightarrow}}4\\color{blue}{\\overset{\\texttt{B}}{\\longleftrightarrow}}0$. Take $(i,j)=(0,3)$ as an example, then $0\\color{red}{\\overset{\\texttt{R}}{\\longrightarrow}}1\\color{blue}{\\overset{\\texttt{B}}{\\longrightarrow}}2\\color{blue}{\\overset{\\texttt{B}}{\\longrightarrow}}3\\color{red}{\\overset{\\texttt{R}}{\\longrightarrow}}4\\color{blue}{\\overset{\\texttt{B}}{\\longrightarrow}}0\\color{blue}{\\overset{\\texttt{B}}{\\longrightarrow}}4\\color{red}{\\overset{\\texttt{R}}{\\longrightarrow}}3$ is a palindrome route. Thus, the condition holds for $(i,j)=(0,3)$.\n\nIn the fourth test case, when $(i,j)=(0,2)$, there does not exist a palindrome route.", "cfid": "2029F"}
{"problem_id": "2029D", "problem_title": "D. Cool Graph", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2029/D", "problem_statement": "You are given an undirected graph with $n$ vertices and $m$ edges.\n\nYou can perform the following operation at most $2\\cdot \\max(n,m)$ times:\n\n- Choose three distinct vertices $a$, $b$, and $c$, then for each of the edges $(a,b)$, $(b,c)$, and $(c,a)$, do the following:\n  - If the edge does not exist, add it. On the contrary, if it exists, remove it.\n\nA graph is called cool if and only if one of the following holds:\n\n- The graph has no edges, or\n- The graph is a tree.\n\nYou have to make the graph cool by performing the above operations. Note that you can use at most $2\\cdot \\max(n,m)$ operations.\n\nIt can be shown that there always exists at least one solution.\n\n### Input\n\nEach test contains multiple test cases. The first line of input contains a single integer $t$ ($1\\le t\\le 10^4$) — the number of test cases. The description of test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($3\\le n\\le 10^5$, $0\\le m\\le \\min\\left(\\frac{n(n-1)}{2},2\\cdot 10^5\\right)$) — the number of vertices and the number of edges.\n\nThen $m$ lines follow, the $i$-th line contains two integers $u_i$ and $v_i$ ($1\\le u_i,v_i\\le n$) — the two nodes that the $i$-th edge connects.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$, and the sum of $m$ over all test cases does not exceed $2\\cdot 10^5$.\n\nIt is guaranteed that there are no self-loops or multiple-edges in the given graph.\n\n### Output\n\nFor each test case, in the first line output an integer $k$ ($0\\le k\\le 2\\cdot \\max(n, m)$) — the number of operations.\n\nThen output $k$ lines, the $i$-th line containing three distinct integers $a$, $b$, and $c$ ($1\\le a,b,c\\le n$) — the three integers you choose in the $i$-th operation.\n\nIf there are multiple solutions, you can output any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3 0\n\n3 1\n\n1 2\n\n3 2\n\n1 2\n\n2 3\n\n3 3\n\n1 2\n\n2 3\n\n3 1\n\n6 6\n\n1 2\n\n1 6\n\n4 5\n\n3 4\n\n4 6\n\n3 6\n\n```\n\n#### Output #1\n\n```\n0\n1\n1 2 3\n0\n1\n1 2 3\n3\n1 3 6\n2 4 5\n3 4 6\n```\n\n### Note\n\nIn the first test case, the graph is already cool because there are no edges.\n\nIn the second test case, after performing the only operation, the graph becomes a tree, so it is cool.\n\nIn the third test case, the graph is already cool because it is a tree.\n\nIn the fourth test case, after performing the only operation, the graph has no edges, so it is cool.\n\nIn the fifth test case:\n\nOperationGraph before the operationGraph after the operation$1$![](https://espresso.codeforces.com/fd4eac61194ad22fa5129e37a757471cb9ac10f2.png)![](https://espresso.codeforces.com/89717012b3e51d72910fe21834d7d5f6534271ff.png)$2$![](https://espresso.codeforces.com/f3258dfa40ec8d5628e4d9b7607e1f4157011f3f.png)![](https://espresso.codeforces.com/2efac61c8a155a0a12af9f8447b8c9eca77d7806.png)$3$![](https://espresso.codeforces.com/cd203f96b23e807b438451cdec3e99ae905bf7b3.png)![](https://espresso.codeforces.com/c5b3b54fa0fa24e2eb222b8d2c6fb655b1cfa7b8.png)\n\nNote that after the first operation, the graph has already become cool, and there are two extra operations. As the graph is still cool after the two extra operations, this is a valid answer.", "cfid": "2029D"}
{"problem_id": "2029E", "problem_title": "E. Common Generator", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2029/E", "problem_statement": "For two integers $x$ and $y$ ($x,y\\ge 2$), we will say that $x$ is a generator of $y$ if and only if $x$ can be transformed to $y$ by performing the following operation some number of times (possibly zero):\n\n- Choose a divisor $d$ ($d\\ge 2$) of $x$, then increase $x$ by $d$.\n\nFor example,\n\n- $3$ is a generator of $8$ since we can perform the following operations: $3 \\xrightarrow{d = 3} 6 \\xrightarrow{d = 2} 8$;\n- $4$ is a generator of $10$ since we can perform the following operations: $4 \\xrightarrow{d = 4} 8 \\xrightarrow{d = 2} 10$;\n- $5$ is not a generator of $6$ since we cannot transform $5$ into $6$ with the operation above.\n\nNow, Kevin gives you an array $a$ consisting of $n$ pairwise distinct integers ($a_i\\ge 2$).\n\nYou have to find an integer $x\\ge 2$ such that for each $1\\le i\\le n$, $x$ is a generator of $a_i$, or determine that such an integer does not exist.\n\n### Input\n\nEach test contains multiple test cases. The first line of the input contains a single integer $t$ ($1\\le t\\le 10^4$) — the number of test cases. The description of test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1\\le n\\le 10^5$) — the length of the array $a$.\n\nThe second line contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($2\\le a_i\\le 4\\cdot 10^5$) — the elements in the array $a$. It is guaranteed that the elements are pairwise distinct.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, output a single integer $x$ — the integer you found. Print $-1$ if there does not exist a valid $x$.\n\nIf there are multiple answers, you may output any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3\n\n8 9 10\n\n4\n\n2 3 4 5\n\n2\n\n147 154\n\n5\n\n3 6 8 25 100000\n\n```\n\n#### Output #1\n\n```\n2\n-1\n7\n3\n```\n\n### Note\n\nIn the first test case, for $x=2$:\n\n- $2$ is a generator of $8$, since we can perform the following operations: $2 \\xrightarrow{d = 2} 4 \\xrightarrow{d = 4} 8$;\n- $2$ is a generator of $9$, since we can perform the following operations: $2 \\xrightarrow{d = 2} 4 \\xrightarrow{d = 2} 6 \\xrightarrow{d = 3} 9$.\n- $2$ is a generator of $10$, since we can perform the following operations: $2 \\xrightarrow{d = 2} 4 \\xrightarrow{d = 2} 6 \\xrightarrow{d = 2} 8 \\xrightarrow{d = 2} 10$.\n\nIn the second test case, it can be proven that it is impossible to find a common generator of the four integers.", "cfid": "2029E"}
{"problem_id": "2029G", "problem_title": "G. Balanced Problem", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2029/G", "problem_statement": "There is an array $a$ consisting of $n$ integers. Initially, all elements of $a$ are equal to $0$.\n\nKevin can perform several operations on the array. Each operation is one of the following two types:\n\n- Prefix addition — Kevin first selects an index $x$ ($1\\le x\\le n$), and then for each $1\\le j\\le x$, increases $a_j$ by $1$;\n- Suffix addition — Kevin first selects an index $x$ ($1\\le x\\le n$), and then for each $x\\le j\\le n$, increases $a_j$ by $1$.\n\nIn the country of KDOI, people think that the integer $v$ is balanced. Thus, Iris gives Kevin an array $c$ consisting of $n$ integers and defines the beauty of the array $a$ as follows:\n\n- Initially, set $b=0$;\n- For each $1\\le i\\le n$, if $a_i=v$, add $c_i$ to $b$;\n- The beauty of $a$ is the final value of $b$.\n\nKevin wants to maximize the beauty of $a$ after all the operations. However, he had already performed $m$ operations when he was sleepy. Now, he can perform an arbitrary number (possibly zero) of new operations.\n\nYou have to help Kevin find the maximum possible beauty if he optimally performs the new operations.\n\nHowever, to make sure that you are not just rolling the dice, Kevin gives you an integer $V$, and you need to solve the problem for each $1\\le v\\le V$.\n\n### Input\n\nEach test contains multiple test cases. The first line of the input contains a single integer $t$ ($1\\le t\\le 1000$) — the number of test cases. The description of test cases follows.\n\nThe first line of each test case contains three integers $n$, $m$, and $V$ ($1\\le n, m\\le 2\\cdot 10^5$, $1\\le V\\le 2000$) — the length of the array $a$, the number of initial operations, and the number that Kevin gives you.\n\nThe second line contains $n$ integers $c_1, c_2, \\ldots, c_n$ ($1\\le c_i\\le 10^9$) — the elements in the array $c$.\n\nThen $m$ lines follow, the $i$-th line containing a character $op$ and an integer $x$ ($op=\\mathtt{L}$ or $\\mathtt{R}$, $1\\le x\\le n$) — the type of the $i$-th operation and the selected index.\n\n- If $op=\\mathtt{L}$, this operation is a prefix addition on index $x$;\n- If $op=\\mathtt{R}$, this operation is a suffix addition on index $x$.\n\nIt is guaranteed that:\n\n- the sum of $n$ over all test cases does not exceed $2\\cdot 10^5$;\n- the sum of $m$ over all test cases does not exceed $2\\cdot 10^5$;\n- the sum of $V^2$ over all test cases does not exceed $4\\cdot 10^6$.\n\n### Output\n\nFor each test case, output $V$ integers in a single line, the $i$-th integer denoting the maximum possible beauty after Kevin performs some new operations when $v=i$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3 3 2\n\n1 2 4\n\nL 3\n\nR 3\n\nL 1\n\n3 3 2\n\n5 1 4\n\nL 3\n\nR 3\n\nL 1\n\n5 4 5\n\n1 1 1 1 1\n\nL 3\n\nR 2\n\nL 5\n\nL 4\n\n10 12 9\n\n10 9 8 7 6 5 4 3 2 1\n\nL 2\n\nL 4\n\nR 4\n\nR 4\n\nL 6\n\nR 8\n\nL 3\n\nL 2\n\nR 1\n\nR 10\n\nL 8\n\nL 1\n\n1 1 4\n\n1000000000\n\nL 1\n\n```\n\n#### Output #1\n\n```\n2 6\n1 9\n0 1 3 5 5\n0 0 0 6 25 32 35 44 51\n1000000000 1000000000 1000000000 1000000000\n```\n\n### Note\n\nIn the first test case, the array $a$ changes as follows for the initial operations: $[0, 0, 0] \\xrightarrow{\\mathtt{L}\\ 3} [1, 1, 1] \\xrightarrow{\\mathtt{R}\\ 3} [1, 1, 2] \\xrightarrow{\\mathtt{L}\\ 1} [2, 1, 2]$.\n\n- For $v=1$, it is optimal to not perform any new operations, and the beauty is $b=c_2=2$;\n- For $v=2$, it is optimal to perform a prefix addition operation on index $2$. After that, $a$ becomes $[3,2,2]$, and the beauty is $b=c_2+c_3=6$.\n\nIn the second test case, for both $v=1$ and $v=2$, it is optimal to not perform any new operations.", "cfid": "2029G"}
{"problem_id": "2036F", "problem_title": "F. XORificator 3000", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2036/F", "problem_statement": "Alice has been giving gifts to Bob for many years, and she knows that what he enjoys the most is performing [bitwise XOR](http://tiny.cc/xor_wiki_eng) of interesting integers. Bob considers a positive integer $x$ to be interesting if it satisfies $x \\not\\equiv k (\\bmod 2^i)$. Therefore, this year for his birthday, she gifted him a super-powerful \"XORificator 3000\", the latest model.\n\nBob was very pleased with the gift, as it allowed him to instantly compute the XOR of all interesting integers in any range from $l$ to $r$, inclusive. After all, what else does a person need for happiness? Unfortunately, the device was so powerful that at one point it performed XOR with itself and disappeared. Bob was very upset, and to cheer him up, Alice asked you to write your version of the \"XORificator\".\n\n### Input\n\nThe first line of input contains a single integer $t$ $(1 \\leq t \\leq 10^4)$ — the number of XOR queries on the segment. The following $t$ lines contain the queries, each consisting of the integers $l$, $r$, $i$, $k$ $(1 \\leq l \\leq r \\leq 10^{18}$, $0 \\leq i \\leq 30$, $0 \\leq k < 2^i)$.\n\n### Output\n\nFor each query, output a single integer — the XOR of all integers $x$ in the range $[l, r]$ such that $x \\not\\equiv k \\mod 2^i$.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n1 3 1 0\n\n2 28 3 7\n\n15 43 1 0\n\n57 2007 1 0\n\n1010 1993 2 2\n\n1 1000000000 30 1543\n\n```\n\n#### Output #1\n\n```\n2\n2\n13\n0\n4\n1000000519\n```\n\n### Note\n\nIn the first query, the interesting integers in the range $[1, 3]$ are $1$ and $3$, so the answer will be $1 \\oplus 3 = 2$.", "cfid": "2036F"}
{"problem_id": "2036G", "problem_title": "G. Library of Magic", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2036/G", "problem_statement": "This is an interactive problem.\n\nThe Department of Supernatural Phenomena at the Oxenfurt Academy has opened the Library of Magic, which contains the works of the greatest sorcerers of Redania — $n$ ($3 \\leq n \\leq 10^{18}$) types of books, numbered from $1$ to $n$. Each book's type number is indicated on its spine. Moreover, each type of book is stored in the library in exactly two copies! And you have been appointed as the librarian.\n\nOne night, you wake up to a strange noise and see a creature leaving the building through a window. Three thick tomes of different colors were sticking out of the mysterious thief's backpack. Before you start searching for them, you decide to compute the numbers $a$, $b$, and $c$ written on the spines of these books. All three numbers are distinct.\n\nSo, you have an unordered set of tomes, which includes one tome with each of the pairwise distinct numbers $a$, $b$, and $c$, and two tomes for all numbers from $1$ to $n$, except for $a$, $b$, and $c$. You want to find these values $a$, $b$, and $c$.\n\nSince you are not working in a simple library, but in the Library of Magic, you can only use one spell in the form of a query to check the presence of books in their place:\n\n- \"xor l r\" — Bitwise XOR query with parameters $l$ and $r$. Let $k$ be the number of such tomes in the library whose numbers are greater than or equal to $l$ and less than or equal to $r$. You will receive the result of the computation $v_1 \\oplus v_2 \\oplus ... \\oplus v_k$, where $v_1 ... v_k$ are the numbers on the spines of these tomes, and $\\oplus$ denotes the operation of [bitwise exclusive OR](http://tiny.cc/xor_wiki_eng).\n\nSince your magical abilities as a librarian are severely limited, you can make no more than $150$ queries.\n\n### Input\n\nThe first line of input contains an integer $t$ ($1 \\le t \\le 300$) — the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($3 \\leq n \\leq 10^{18}$) — the number of types of tomes.\n\n### Interaction\n\nThe interaction for each test case begins with reading the integer $n$.\n\nThen you can make up to $150$ queries.\n\nTo make a query, output a string in the format \"xor l r\" (without quotes) ($1 \\leq l \\leq r \\leq n$). After each query, read an integer — the answer to your query.\n\nTo report the answer, output a string in the format \"ans a b c\" (without quotes), where $a$, $b$, and $c$ are the numbers you found as the answer to the problem. You can output them in any order.\n\nThe interactor is not adaptive, which means that the answer is known before the participant makes queries and does not depend on the queries made by the participant.\n\nAfter making $150$ queries, the answer to any other query will be $-1$. Upon receiving such an answer, terminate the program to receive a verdict of \"WA\" (Wrong answer).\n\nAfter outputting a query, do not forget to output a newline and flush the output buffer. Otherwise, you will receive a verdict of \"IL\" (Idleness limit exceeded). To flush the buffer, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- flush(output) in Pascal;\n- stdout.flush() in Python;\n- refer to the documentation for other languages.\n\nHacks\n\nTo make a hack, use the following format.\n\nThe first line should contain a single integer $t$ ($1 \\leq t \\leq 300$) — the number of test cases.\n\nThe only line of each test case should contain four integers $n$, $a$, $b$, and $c$ ($3 \\leq n \\leq 10^{18}$, $1 \\le a, b, c \\le n$) — the number of books in the library and the numbers of the stolen tomes. The numbers $a$, $b$, and $c$ must be distinct.\n\n### Example\n\n#### Input #1\n\n```\n2\n6\n\n0\n\n2\n\n3\n\n5\n\n3\n```\n\n#### Output #1\n\n```\n\nxor 1 1\n\nxor 2 2\n\nxor 3 3\n\nxor 4 6\n\nans 2 3 5\n\nans 1 2 3\n```\n\n### Note\n\nIn the first test case, the books in the library after the theft look like this:\n\n![](https://espresso.codeforces.com/68391415c7555737d5c6224fa63d1891c2bd552e.png)\n\nNow consider the answers to the queries:\n\n- For the query \"xor 1 1\", you receive the result $1 \\oplus 1 = 0$. Two tomes satisfy the condition specified in the query — both with the number $1$.\n- For the query \"xor 2 2\", you receive the result $2$, as only one tome satisfies the specified condition.\n- For the query \"xor 3 3\", you receive the result $3$.\n- For the query \"xor 4 6\", you receive the result $4 \\oplus 6 \\oplus 4 \\oplus 5 \\oplus 6 = 5$.\n\nIn the second test case, there are only $3$ types of books, and it is easy to guess that the missing ones have the numbers $1$, $2$, and $3$.", "cfid": "2036G"}
{"problem_id": "2032E", "problem_title": "E. Balanced", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2032/E", "problem_statement": "You are given a cyclic array $a$ with $n$ elements, where $n$ is odd. In each operation, you can do the following:\n\n- Choose an index $1 \\le i \\le n$ and increase $a_{i - 1}$ by $1$, $a_i$ by $2$, and $a_{i + 1}$ by $1$. The element before the first element is the last element because this is a cyclic array.\n\nA cyclic array is called balanced if all its elements are equal to each other.\n\nFind any sequence of operations to make this cyclic array balanced or determine that it is impossible. Please note that you do not have to minimize the number of operations.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 2 \\cdot 10^5$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n < 2 \\cdot 10^5$, $n$ is odd) — the length of the array $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^{6}$) — the elements of the array $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case:\n\n- If it is impossible to make the cyclic array balanced, output $-1$.\n- Otherwise, output $n$ integers $v_1, v_2, \\ldots, v_n$ ($0 \\leq v_i \\leq 10^{18}$) — where $v_i$ denotes the number of operations applied to index $i$. It can be proved that if any solution exists, then there exists a solution under the given constraints. If there are several solutions under the given constraints, output any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n3\n\n2 1 2\n\n3\n\n1 2 3\n\n5\n\n1 2 1 2 1\n\n7\n\n1 2 1 2 1 3 1\n\n9\n\n10000 10000 10000 10000 10000 10001 10002 10001 10000\n\n1\n\n10\n\n```\n\n#### Output #1\n\n```\n0 1 0\n2 1 0\n2 0 3 0 2\n4 2 7 0 8 0 6\n1 1 1 1 1 1 0 1 1\n0\n```\n\n### Note\n\nIn the first test case:\n\n- After $1$ operation applied to index $i = 2$, the array $a = [3, 3, 3]$.\n\nIn the second test case:\n\n- After $2$ operations applied to index $i = 1$, the array $a = [5, 4, 5]$.\n- After $1$ operation applied to index $i = 2$, the array $a = [6, 6, 6]$.\n\nIn the third test case:\n\n- After $2$ operations applied to index $i = 1$, the array $a = [5, 4, 1, 2, 3]$.\n- After $3$ operations applied to index $i = 3$, the array $a = [5, 7, 7, 5, 3]$.\n- After $2$ operations applied to index $i = 5$, the array $a = [7, 7, 7, 7, 7]$.", "cfid": "2032E"}
{"problem_id": "2032F", "problem_title": "F. Peanuts", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2032/F", "problem_statement": "Having the magical beanstalk, Jack has been gathering a lot of peanuts lately. Eventually, he has obtained $n$ pockets of peanuts, conveniently numbered $1$ to $n$ from left to right. The $i$-th pocket has $a_i$ peanuts.\n\nJack and his childhood friend Alice decide to play a game around the peanuts. First, Alice divides the pockets into some boxes; each box will have a non-zero number of consecutive pockets, and each pocket will, obviously, belong to exactly one box. At the same time, Alice does not change the order of the boxes, that is, the boxes are numbered in ascending order of the indices of the pockets in them.\n\nAfter that, Alice and Jack will take turns alternately, with Alice going first.\n\nAt each turn, the current player will remove a positive number of peanuts from exactly one pocket which belongs to the leftmost non-empty box (i.e., the leftmost box containing at least one non-empty pocket). In other words, if we number the boxes from left to right, then each player can only pick peanuts from the pocket in the $j$-th box ($j \\ge 2$) only if the $(j - 1)$-th box has no peanuts left. The player who cannot make a valid move loses.\n\nAlice is sure she will win since she has the advantage of dividing the pockets into boxes herself. Thus, she wanted to know how many ways there are for her to divide the peanuts into boxes at the start of the game so that she will win, assuming both players play optimally. Can you help her with the calculation?\n\nAs the result can be very large, output it modulo $998\\,244\\,353$.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\leq n \\leq 10^6$) — the number of pockets.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$) — the number of peanuts in each pocket.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case, output a single integer — the number of ways for Alice to divide the pockets into boxes at the start of the game to guarantee her win, assuming both players play optimally, modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3\n\n1 2 3\n\n4\n\n1 2 3 1\n\n5\n\n1 1 1 1 1\n\n2\n\n1 1\n\n10\n\n1 2 3 4 5 6 7 8 9 10\n\n```\n\n#### Output #1\n\n```\n1\n4\n16\n0\n205\n```\n\n### Note\n\nIn the first test case, the only way for Alice to win is to divide the pockets into two boxes as follows: $([1, 2], [3])$ (the first box contains the first two pockets and the second box contains the third pocket). Alice wins by taking both peanuts from the second pocket, leaving Jack with $([1], [3])$. Jack is forced to take the only peanut left in the first box, which allows Alice to take the remaining ones in the second box.\n\nIn the second test case, the winning divisions for Alice are $([1], [2, 3, 1])$, $([1, 2, 3, 1])$, $([1, 2], [3], [1])$, and $([1, 2], [3, 1])$.\n\nIn the third test case, Alice always wins no matter how she divides the pockets into boxes.\n\nIn the fourth test case, Alice always loses no matter how she divides the pockets into boxes.", "cfid": "2032F"}
{"problem_id": "2026D", "problem_title": "D. Sums of Segments", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2026/D", "problem_statement": "You are given a sequence of integers $[a_1, a_2, \\dots, a_n]$. Let $s(l,r)$ be the sum of elements from $a_l$ to $a_r$ (i. e. $s(l,r) = \\sum\\limits_{i=l}^{r} a_i$).\n\nLet's construct another sequence $b$ of size $\\frac{n(n+1)}{2}$ as follows: $b = [s(1,1), s(1,2), \\dots, s(1,n), s(2,2), s(2,3), \\dots, s(2,n), s(3,3), \\dots, s(n,n)]$.\n\nFor example, if $a = [1, 2, 5, 10]$, then $b = [1, 3, 8, 18, 2, 7, 17, 5, 15, 10]$.\n\nYou are given $q$ queries. During the $i$-th query, you are given two integers $l_i$ and $r_i$, and you have to calculate $\\sum \\limits_{j=l_i}^{r_i} b_j$.\n\n### Input\n\nThe first line contains one integer $n$ ($1 \\le n \\le 3 \\cdot 10^5$).\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($-10 \\le a_i \\le 10$).\n\nThe third line contains one integer $q$ ($1 \\le q \\le 3 \\cdot 10^5$).\n\nThen $q$ lines follow, the $i$-th of them contains two integers $l_i$ and $r_i$ ($1 \\le l_i \\le r_i \\le \\frac{n(n+1)}{2}$).\n\n### Output\n\nPrint $q$ integers, the $i$-th of which should be equal to $\\sum \\limits_{j=l_i}^{r_i} b_j$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n1 2 5 10\n\n15\n\n1 1\n\n1 2\n\n1 3\n\n1 4\n\n1 5\n\n1 10\n\n5 10\n\n6 10\n\n2 8\n\n3 4\n\n3 10\n\n3 8\n\n5 6\n\n5 5\n\n1 8\n\n```\n\n#### Output #1\n\n```\n1\n4\n12\n30\n32\n86\n56\n54\n60\n26\n82\n57\n9\n2\n61\n```", "cfid": "2026D"}
{"problem_id": "2026F", "problem_title": "F. Bermart Ice Cream", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2026/F", "problem_statement": "In the Bermart chain of stores, a variety of ice cream is sold. Each type of ice cream has two parameters: price and tastiness.\n\nInitially, there is one store numbered $1$, which sells nothing. You have to process $q$ queries of the following types:\n\n- $1~x$ — a new store opens, that sells the same types of ice cream as store $x$. It receives the minimum available positive index. The order of the types of ice cream in the new store is the same as in store $x$.\n- $2~x~p~t$ — a type of ice cream with price $p$ and tastiness $t$ becomes available in store $x$.\n- $3~x$ — a type of ice cream that was available the longest (appeared the earliest) in store $x$ is removed.\n- $4~x~p$ — for store $x$, find the maximum total tastiness of a subset of types of ice cream that are sold there, such that the total price does not exceed $p$ (each type can be used in the subset no more than once).\n\n### Input\n\nThe first line contains a single integer $q$ ($1 \\le q \\le 3 \\cdot 10^4$) — the number of queries.\n\nEach of the following $q$ lines contains a query in the format described in the statement:\n\n- $1~x$;\n- $2~x~p~t$ ($1 \\le p, t \\le 2000$);\n- $3~x$;\n- $4~x~p$ ($1 \\le p \\le 2000$).\n\nAdditional constraints on the input data:\n\n- $x$ in each query does not exceed the current number of stores (that is, $1$ plus the number of type $1$ queries);\n- query type $3$ is not applied to a store that has no types of ice cream;\n- there is at least one query of type $4$.\n\n### Output\n\nFor each query of type $4$, output a single integer — for store $x$, find the maximum total tastiness of a subset of types of ice cream that are sold there, such that the total price does not exceed $p$ (each type can be used in the subset no more than once).\n\n### Example\n\n#### Input #1\n\n```\n\n12\n\n2 1 5 7\n\n2 1 3 4\n\n4 1 4\n\n4 1 8\n\n4 1 2\n\n1 1\n\n2 2 4 10\n\n4 1 9\n\n4 2 9\n\n3 1\n\n4 1 9\n\n4 2 9\n\n```\n\n#### Output #1\n\n```\n4\n11\n0\n11\n17\n4\n17\n```", "cfid": "2026F"}
{"problem_id": "2026E", "problem_title": "E. Best Subsequence", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2026/E", "problem_statement": "Given an integer array $a$ of size $n$.\n\nLet's define the value of the array as its size minus the number of set bits in the bitwise OR of all elements of the array.\n\nFor example, for the array $[1, 0, 1, 2]$, the bitwise OR is $3$ (which contains $2$ set bits), and the value of the array is $4-2=2$.\n\nYour task is to calculate the maximum possible value of some subsequence of the given array.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 100$) — the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 100$).\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\dots, a_n$ ($0 \\le a_i < 2^{60}$).\n\n### Output\n\nFor each test case, print the maximum possible value of some subsequence of the given array.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3\n\n0 0 0\n\n4\n\n1 0 1 2\n\n1\n\n5\n\n8\n\n7 1 48 14 13 8 7 6\n\n```\n\n#### Output #1\n\n```\n3\n2\n0\n3\n```", "cfid": "2026E"}
{"problem_id": "2035F", "problem_title": "F. Tree Operations", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2035/F", "problem_statement": "This really says a lot about our society.\n\nOne day, a turtle gives you a tree with $n$ nodes rooted at node $x$. Each node has an initial nonnegative value; the $i$-th node has starting value $a_i$.\n\nYou want to make the values of all nodes equal to $0$. To do so, you will perform a series of operations on the tree, where each operation will be performed on a certain node. Define an operation on node $u$ as choosing a single node in $u$'s subtree$^{\\text{∗}}$ and incrementing or decrementing its value by $1$. The order in which operations are performed on nodes is as follows:\n\n- For $1 \\le i \\le n$, the $i$-th operation will be performed on node $i$.\n- For $i > n$, the $i$-th operation will be performed on the same node as operation $i - n$.\n\nMore formally, the $i$-th operation will be performed on the $(((i - 1) \\bmod n) + 1)$-th node.$^{\\text{†}}$\n\nNote that you cannot skip over operations; that is, you cannot perform the $i$-th operation without first performing operations $1, 2, \\ldots, i - 1$.\n\nFind the minimum number of operations you must perform before you can make the values of all nodes equal to $0$, assuming you pick operations optimally. If it's impossible to make the values of all nodes equal to $0$ after finite operations, output $-1$.\n\n$^{\\text{∗}}$The subtree of a node $u$ is the set of nodes for which $u$ lies on the shortest path from this node to the root, including $u$ itself.\n\n$^{\\text{†}}$Here, $a \\bmod b$ denotes the remainder from dividing $a$ by $b$.\n\n### Input\n\nThe first line contains a single integer $t$ ($1\\le t\\le 100$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $x$ ($1 \\le n \\le 2000$, $1 \\le x \\le n$) — the number of nodes and the root of the tree.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le 10^9$) — the starting value of each node.\n\nEach of the next $n - 1$ lines of each test case contains two integers $u$ and $v$ ($1 \\le u, v \\le n$, $u \\neq v$) representing an undirected edge from $u$ to $v$. It is guaranteed that the given edges form a tree.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2000$.\n\n### Output\n\nFor each test case, output a single integer denoting the minimum amount of operations needed to make all nodes $0$. If it's impossible to make all nodes $0$, output $-1$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n2 1\n\n1 2\n\n1 2\n\n3 2\n\n2 1 3\n\n2 1\n\n3 2\n\n4 1\n\n1 1 0 1\n\n1 2\n\n2 3\n\n1 4\n\n12 6\n\n14 4 5 6 12 9 5 11 6 2 1 12\n\n3 9\n\n10 6\n\n6 12\n\n4 3\n\n3 1\n\n5 11\n\n9 7\n\n5 6\n\n1 8\n\n2 8\n\n5 1\n\n1 1\n\n0\n\n```\n\n#### Output #1\n\n```\n3\n6\n5\n145\n0\n```\n\n### Note\n\nIn the first test case, you can make the following valid sequence of operations:\n\n- For operation $1$, decrease the value of node $1$. This is valid because $(((1 - 1) \\bmod n) + 1) = 1$, and node $1$ is in the subtree of node $1$.\n- For operation $2$, decrease the value of node $2$. This is valid because $(((2 - 1) \\bmod n) + 1) = 2$, and node $2$ is in the subtree of node $2$.\n- For operation $3$, decrease the value of node $2$. This is valid because $(((3 - 1) \\bmod n) + 1) = 1$, and node $2$ is in the subtree of node $1$.", "cfid": "2035F"}
{"problem_id": "2035E", "problem_title": "E. Monster", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2035/E", "problem_statement": "Man, this Genshin boss is so hard. Good thing they have a top-up of $6$ coins for only $ \\$4.99$. I should be careful and spend no more than I need to, lest my mom catches me...\n\nYou are fighting a monster with $z$ health using a weapon with $d$ damage. Initially, $d=0$. You can perform the following operations.\n\n- Increase $d$ — the damage of your weapon by $1$, costing $x$ coins.\n- Attack the monster, dealing $d$ damage and costing $y$ coins.\n\nYou cannot perform the first operation for more than $k$ times in a row.\n\nFind the minimum number of coins needed to defeat the monster by dealing at least $z$ damage.\n\n### Input\n\nThe first line contains a single integer $t$ ($1\\le t\\le 100$) — the number of test cases.\n\nThe only line of each test case contains 4 integers $x$, $y$, $z$, and $k$ ($1\\leq x, y, z, k\\leq 10^8$) — the first operation's cost, the second operation's cost, the monster's health, and the limitation on the first operation.\n\n### Output\n\nFor each test case, output the minimum number of coins needed to defeat the monster.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2 3 5 5\n\n10 20 40 5\n\n1 60 100 10\n\n60 1 100 10\n\n```\n\n#### Output #1\n\n```\n12\n190\n280\n160\n```\n\n### Note\n\nIn the first test case, $x = 2$, $y = 3$, $z = 5$, and $k = 5$. Here's a strategy that achieves the lowest possible cost of $12$ coins:\n\n- Increase damage by $1$, costing $2$ coins.\n- Increase damage by $1$, costing $2$ coins.\n- Increase damage by $1$, costing $2$ coins.\n- Attack the monster, dealing $3$ damage, costing $3$ coins.\n- Attack the monster, dealing $3$ damage, costing $3$ coins.\n\nYou deal a total of $3 + 3 = 6$ damage, defeating the monster who has $5$ health. The total number of coins you use is $2 + 2 + 2 + 3 + 3 = 12$ coins.\n\nIn the second test case, $x = 10$, $y = 20$, $z = 40$, and $k = 5$. Here's a strategy that achieves the lowest possible cost of $190$ coins:\n\n- Increase damage by $5$, costing $5\\cdot x$ = $50$ coins.\n- Attack the monster once, dealing $5$ damage, costing $20$ coins.\n- Increase damage by $2$, costing $2\\cdot x$ = $20$ coins.\n- Attack the monster $5$ times, dealing $5\\cdot 7 = 35$ damage, costing $5\\cdot y$ = $100$ coins.\n\nYou deal a total of $5 + 35 = 40$ damage, defeating the monster who has exactly $40$ health. The total number of coins you use is $50 + 20 + 20 + 100 = 190$ coins.", "cfid": "2035E"}
{"problem_id": "2027E1", "problem_title": "E1. Bit Game (Easy Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2027/E1", "problem_statement": "This is the easy version of this problem. The only difference is that you need to output the winner of the game in this version, and the number of stones in each pile are fixed. You must solve both versions to be able to hack.\n\nAlice and Bob are playing a familiar game where they take turns removing stones from $n$ piles. Initially, there are $x_i$ stones in the $i$-th pile, and it has an associated value $a_i$. A player can take $d$ stones away from the $i$-th pile if and only if both of the following conditions are met:\n\n- $1 \\le d \\le a_i$, and\n- $x \\, \\& \\, d = d$, where $x$ is the current number of stones in the $i$-th pile and $\\&$ denotes the [bitwise AND operation](https://en.wikipedia.org/wiki/Bitwise_operation#AND).\n\nThe player who cannot make a move loses, and Alice goes first.\n\nYou're given the $a_i$ and $x_i$ values for each pile, please determine who will win the game if both players play optimally.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$). The description of the test cases follows.\n\nThe first line of each test case contains $n$ ($1 \\le n \\le 10^4$) — the number of piles.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i < 2^{30}$).\n\nThe third line of each test case contains $n$ integers $x_1, x_2, \\ldots, x_n$ ($1 \\le x_i < 2^{30}$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^4$.\n\n### Output\n\nPrint a single line with the winner's name. If Alice wins, print \"Alice\", otherwise print \"Bob\" (without quotes).\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n2\n\n1 6\n\n10 7\n\n3\n\n10 8 15\n\n25 4 14\n\n4\n\n8 32 65 64\n\n7 45 126 94\n\n3\n\n20 40 1\n\n23 55 1\n\n5\n\n12345 9876 86419 8641 1\n\n6789 54321 7532 97532 1\n\n2\n\n20 64\n\n44 61\n\n3\n\n57 109 55\n\n69 90 85\n\n```\n\n#### Output #1\n\n```\nBob\nBob\nBob\nBob\nBob\nAlice\nAlice\n```\n\n### Note\n\nIn the first test case, neither player can take any stones from the first pile since there is no value of $d$ satisfying the conditions. For the second pile, to begin with, Alice can remove between $1$ and $6$ stones. No matter which move Alice performs, Bob can remove the rest of the stones on his turn. After Bob's move, there are no more moves that Alice can perform, so Bob wins.\n\nIn the second test case, here is one example of how the game might go. Alice moves first, and she decides to remove from the first pile. She cannot take $17$ stones, because $17 > 10$, which fails the first condition. She cannot take $10$ stones, because $25 \\, \\& \\, 10 = 8$ which fails the second condition. One option is to take $9$ stones; now the pile has $16$ stones left. On Bob's turn he decides to take stones from the second pile; the only option here is to take all $4$. Now, no more stones can be taken from either of the first two piles, so Alice must take some stones from the last pile. She decides to take $12$ stones, and Bob then follows by taking the last $2$ stones on that pile. Since Alice now has no legal moves left, Bob wins. It can be shown that no matter which strategy Alice follows, Bob will always be able to win if he plays optimally.", "cfid": "2027E1"}
{"problem_id": "2027D2", "problem_title": "D2. The Endspeaker (Hard Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2027/D2", "problem_statement": "This is the hard version of this problem. The only difference is that you need to also output the number of optimal sequences in this version. You must solve both versions to be able to hack.\n\nYou're given an array $a$ of length $n$, and an array $b$ of length $m$ ($b_i > b_{i+1}$ for all $1 \\le i < m$). Initially, the value of $k$ is $1$. Your aim is to make the array $a$ empty by performing one of these two operations repeatedly:\n\n- Type $1$ — If the value of $k$ is less than $m$ and the array $a$ is not empty, you can increase the value of $k$ by $1$. This does not incur any cost.\n- Type $2$ — You remove a non-empty prefix of array $a$, such that its sum does not exceed $b_k$. This incurs a cost of $m - k$.\n\nYou need to minimize the total cost of the operations to make array $a$ empty. If it's impossible to do this through any sequence of operations, output $-1$. Otherwise, output the minimum total cost of the operations, and the number of sequences of operations which yield this minimum cost modulo $10^9 + 7$.\n\nTwo sequences of operations are considered different if you choose a different type of operation at any step, or the size of the removed prefix is different at any step.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\le n, m \\le 3 \\cdot 10^5$, $\\boldsymbol{1 \\le n \\cdot m \\le 3 \\cdot 10^5}$).\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$).\n\nThe third line of each test case contains $m$ integers $b_1, b_2, \\ldots, b_m$ ($1 \\le b_i \\le 10^9$).\n\nIt is also guaranteed that $b_i > b_{i+1}$ for all $1 \\le i < m$.\n\nIt is guaranteed that the sum of $\\boldsymbol{n \\cdot m}$ over all test cases does not exceed $3 \\cdot 10^5$.\n\n### Output\n\nFor each test case, if it's possible to make $a$ empty, then output two integers. The first should be the minimum total cost of the operations, and the second should be the number of sequences of operations which achieve this minimum cost, modulo $10^9 + 7$.\n\nIf there is no possible sequence of operations which makes $a$ empty, then output a single integer $-1$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n4 2\n\n9 3 4 3\n\n11 7\n\n1 2\n\n20\n\n19 18\n\n10 2\n\n2 5 2 1 10 3 2 9 9 6\n\n17 9\n\n10 11\n\n2 2 2 2 2 2 2 2 2 2\n\n20 18 16 14 12 10 8 6 4 2 1\n\n1 6\n\n10\n\n32 16 8 4 2 1\n\n```\n\n#### Output #1\n\n```\n1 3\n-1\n2 11\n10 42\n4 1\n```\n\n### Note\n\nIn the first test case, there are $3$ optimal sequences of operations which yield a total cost of $1$:\n\n- All $3$ sequences begin with a type $2$ operation, removing the prefix $[9]$ to make $a = [3, 4, 3]$, incurring a cost of $1$. Then, we perform a type $1$ operation to increase the value of $k$ by $1$. All subsequent operations now incur a cost of $0$.\n- One sequence continues by removing the prefixes $[3, 4]$ then $[3]$.\n- Another sequence continues by removing the prefixes $[3]$ then $[4, 3]$.\n- Another sequence continues by removing the prefixes $[3]$ then $[4]$ then $[3]$.\n\nIn the second test case, it's impossible to remove any prefix of the array since $a_1 > b_1$, so array $a$ cannot be made empty by any sequence of operations.", "cfid": "2027D2"}
{"problem_id": "2033G", "problem_title": "G. Sakurako and Chefir", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2033/G", "problem_statement": "Given a tree with $n$ vertices rooted at vertex $1$. While walking through it with her cat Chefir, Sakurako got distracted, and Chefir ran away.\n\nTo help Sakurako, Kosuke recorded his $q$ guesses. In the $i$-th guess, he assumes that Chefir got lost at vertex $v_i$ and had $k_i$ stamina.\n\nAlso, for each guess, Kosuke assumes that Chefir could move along the edges an arbitrary number of times:\n\n- from vertex $a$ to vertex $b$, if $a$ is an ancestor$^{\\text{∗}}$ of $b$, the stamina will not change;\n- from vertex $a$ to vertex $b$, if $a$ is not an ancestor of $b$, then Chefir's stamina decreases by $1$.\n\nIf Chefir's stamina is $0$, he cannot make a move of the second type.\n\nFor each assumption, your task is to find the distance to the farthest vertex that Chefir could reach from vertex $v_i$, having $k_i$ stamina.\n\n$^{\\text{∗}}$Vertex $a$ is an ancestor of vertex $b$ if the shortest path from $b$ to the root passes through $a$.\n\n### Input\n\nThe first line contains a single integer $t$ ($1\\le t\\le 10^4$) — the number of test cases.\n\nEach test case is described as follows:\n\n- The first line contains a single integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$) — the number of vertices in the tree.\n- The next $n-1$ lines contain the edges of the tree. It is guaranteed that the given edges form a tree.\n- The next line consists of a single integer $q$ $(1\\le q\\le 2 \\cdot 10^5)$, which denotes the number of guesses made by Kosuke.\n- The next $q$ lines describe the guesses made by Kosuke, with two integers $v_i$, $k_i$ $(1\\le v_i \\le n, 0 \\le k_i\\le n)$.\n\nIt is guaranteed that the sum of $n$ and the sum of $q$ across all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case and for each guess, output the maximum distance to the farthest vertex that Chefir could reach from the starting point $v_i$ having $k_i$ stamina.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n5\n\n1 2\n\n2 3\n\n3 4\n\n3 5\n\n3\n\n5 1\n\n3 1\n\n2 0\n\n9\n\n8 1\n\n1 7\n\n1 4\n\n7 3\n\n4 9\n\n3 2\n\n1 5\n\n3 6\n\n7\n\n6 0\n\n2 3\n\n6 2\n\n8 2\n\n2 4\n\n9 2\n\n6 3\n\n6\n\n2 1\n\n2 5\n\n2 4\n\n5 6\n\n4 3\n\n3\n\n3 1\n\n1 3\n\n6 5\n\n```\n\n#### Output #1\n\n```\n2 1 2\n0 5 2 4 5 5 5\n1 3 4\n```\n\n### Note\n\nIn the first example:\n\n- In the first query, you can go from vertex $5$ to vertex $3$ (after which your stamina will decrease by $1$ and become $0$), and then you can go to vertex $4$;\n- In the second query, from vertex $3$ with $1$ stamina, you can only reach vertices $2$, $3$, $4$, and $5$;\n- In the third query, from vertex $2$ with $0$ stamina, you can only reach vertices $2$, $3$, $4$, and $5$;", "cfid": "2033G"}
{"problem_id": "2023D", "problem_title": "D. Many Games", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2023/D", "problem_statement": "Recently, you received a rare ticket to the only casino in the world where you can actually earn something, and you want to take full advantage of this opportunity.\n\nThe conditions in this casino are as follows:\n\n- There are a total of $n$ games in the casino.\n- You can play each game at most once.\n- Each game is characterized by two parameters: $p_i$ ($1 \\le p_i \\le 100$) and $w_i$ — the probability of winning the game in percentage and the winnings for a win.\n- If you lose in any game you decide to play, you will receive nothing at all (even for the games you won).\n\nYou need to choose a set of games in advance that you will play in such a way as to maximize the expected value of your winnings.\n\nIn this case, if you choose to play the games with indices $i_1 < i_2 < \\ldots < i_k$, you will win in all of them with a probability of $\\prod\\limits_{j=1}^k \\frac{p_{i_j}}{100}$, and in that case, your winnings will be equal to $\\sum\\limits_{j=1}^k w_{i_j}$.\n\nThat is, the expected value of your winnings will be $\\left(\\prod\\limits_{j=1}^k \\frac{p_{i_j}}{100}\\right) \\cdot \\left(\\sum\\limits_{j=1}^k w_{i_j}\\right)$.\n\nTo avoid going bankrupt, the casino owners have limited the expected value of winnings for each individual game. Thus, for all $i$ ($1 \\le i \\le n$), it holds that $w_i \\cdot p_i \\le 2 \\cdot 10^5$.\n\nYour task is to find the maximum expected value of winnings that can be obtained by choosing some set of games in the casino.\n\n### Input\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) — the number of games offered to play.\n\nThe $i$-th of the following $n$ lines contains two integers $p_i$ and $w_i$ ($1 \\leq p_i \\leq 100$, $1 \\leq w_i, p_i \\cdot w_i \\leq 2 \\cdot 10^5$) — the probability of winning and the size of the winnings in the $i$-th game.\n\n### Output\n\nOutput a single number — the maximum expected value of winnings in the casino that can be obtained by choosing some subset of games.\n\nYour answer will be accepted if the relative or absolute error does not exceed $10^{-6}$. Formally, if $a$ is your answer and $b$ is the jury's answer, it will be accepted if $\\frac{|a-b|}{\\max(b, 1)} \\le 10^{-6}$.\n\n### Examples\n\n#### Input #1\n\n```\n\n3\n\n80 80\n\n70 100\n\n50 200\n\n```\n\n#### Output #1\n\n```\n112.00000000\n```\n\n#### Input #2\n\n```\n\n2\n\n100 1\n\n100 1\n\n```\n\n#### Output #2\n\n```\n2.00000000\n```\n\n#### Input #3\n\n```\n\n4\n\n1 100\n\n2 1000\n\n2 100\n\n3 1\n\n```\n\n#### Output #3\n\n```\n20.00000000\n```\n\n#### Input #4\n\n```\n\n5\n\n34 804\n\n78 209\n\n99 191\n\n61 439\n\n90 79\n\n```\n\n#### Output #4\n\n```\n395.20423800\n```\n\n### Note\n\nIn the first example, you can choose the first and third games. In this case, the expected value of winnings will be $\\left(\\frac{p_1}{100}\\cdot \\frac{p_3}{100}\\right) \\cdot (w_1 + w_3) = \\left(\\frac{80}{100}\\cdot \\frac{50}{100}\\right) \\cdot (80 + 200) = 112$.\n\nIn the second example, you can choose the first and second games. In this case, the expected value of winnings will be $\\left(\\frac{p_1}{100}\\cdot \\frac{p_2}{100}\\right) \\cdot (w_1 + w_2) = \\left(\\frac{100}{100}\\cdot \\frac{100}{100}\\right) \\cdot (1 + 1) = 2$.\n\nIn the third example, you can choose only the second game. In this case, the expected value of winnings will be $\\frac{p_2}{100} \\cdot w_2 = \\frac{2}{100} \\cdot 1000 = 20$.", "cfid": "2023D"}
{"problem_id": "2023C", "problem_title": "C. C+K+S", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2023/C", "problem_statement": "You are given two strongly connected$^{\\dagger}$ directed graphs, each with exactly $n$ vertices, but possibly different numbers of edges. Upon closer inspection, you noticed an important feature — the length of any cycle in these graphs is divisible by $k$.\n\nEach of the $2n$ vertices belongs to exactly one of two types: incoming or outgoing. For each vertex, its type is known to you.\n\nYou need to determine whether it is possible to draw exactly $n$ directed edges between the source graphs such that the following four conditions are met:\n\n- The ends of any added edge lie in different graphs.\n- From each outgoing vertex, exactly one added edge originates.\n- Into each incoming vertex, exactly one added edge enters.\n- In the resulting graph, the length of any cycle is divisible by $k$.\n\n$^{\\dagger}$A strongly connected graph is a graph in which there is a path from every vertex to every other vertex.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $k$ ($2 \\le k \\le n \\le 2 \\cdot 10^5$) — the number of vertices in each graph and the value by which the length of each cycle is divisible.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($a_i \\in \\{0, 1\\}$). If $a_i = 0$, then vertex $i$ of the first graph is incoming. If $a_i = 1$, then vertex $i$ of the first graph is outgoing.\n\nThe third line of each test case contains a single integer $m_1$ ($1 \\le m_1 \\le 5 \\cdot 10^5$) — the number of edges in the first graph.\n\nThe next $m_1$ lines contain descriptions of the edges of the first graph. The $i$-th of them contains two integers $v_i$ and $u_i$ ($1 \\le v_i, u_i \\le n$) — an edge in the first graph leading from vertex $v_i$ to vertex $u_i$.\n\nNext, in the same format, follows the description of the second graph.\n\nThe next line contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($b_i \\in \\{0, 1\\}$). If $b_i = 0$, then vertex $i$ of the second graph is incoming. If $b_i = 1$, then vertex $i$ of the second graph is outgoing.\n\nThe next line contains a single integer $m_2$ ($1 \\le m_2 \\le 5 \\cdot 10^5$) — the number of edges in the second graph.\n\nThe next $m_2$ lines contain descriptions of the edges of the second graph. The $i$-th of them contains two integers $v_i$ and $u_i$ ($1 \\le v_i, u_i \\le n$) — an edge in the second graph leading from vertex $v_i$ to vertex $u_i$.\n\nIt is guaranteed that both graphs are strongly connected, and the lengths of all cycles are divisible by $k$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$. It is guaranteed that the sum of $m_1$ and the sum of $m_2$ over all test cases does not exceed $5 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output \"YES\" (without quotes) if it is possible to draw $n$ new edges such that all conditions are met, and \"NO\" (without quotes) otherwise.\n\nYou may output the answer in any case (for example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as a positive answer).\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n4 2\n\n1 0 0 1\n\n4\n\n1 2\n\n2 3\n\n3 4\n\n4 1\n\n1 0 0 1\n\n4\n\n1 3\n\n3 2\n\n2 4\n\n4 1\n\n3 3\n\n0 0 0\n\n3\n\n1 2\n\n2 3\n\n3 1\n\n1 1 0\n\n3\n\n1 2\n\n2 3\n\n3 1\n\n4 2\n\n1 1 1 1\n\n4\n\n1 2\n\n2 3\n\n3 4\n\n4 1\n\n0 0 0 0\n\n6\n\n1 2\n\n2 1\n\n1 3\n\n3 1\n\n1 4\n\n4 1\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nYES\n```\n\n### Note\n\nIn the first test case, it is possible to draw edges from the first graph to the second graph as $(1, 3)$ and $(4, 2)$ (the first number in the pair is the vertex number in the first graph, and the second number in the pair is the vertex number in the second graph), and from the second graph to the first graph as $(1, 2)$, $(4, 3)$ (the first number in the pair is the vertex number in the second graph, and the second number in the pair is the vertex number in the first graph).\n\nIn the second test case, there are a total of $4$ incoming vertices and $2$ outgoing vertices, so it is not possible to draw $3$ edges.", "cfid": "2023C"}
{"problem_id": "2030E", "problem_title": "E. MEXimize the Score", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2030/E", "problem_statement": "Suppose we partition the elements of an array $b$ into any number $k$ of non-empty multisets $S_1, S_2, \\ldots, S_k$, where $k$ is an arbitrary positive integer. Define the score of $b$ as the maximum value of $\\\\operatorname{MEX}(S\\_1)\n\n$$^{\\text{∗}}$$\n\noperatorname{MEX}(S\\_2) + \\\\ldots + \\\\operatorname{MEX}(S\\_k)$ over all possible partitions of $b$ for any integer $k$.\n\nEnvy is given an array $a$ of size $n$. Since he knows that calculating the score of $a$ is too easy for you, he instead asks you to calculate the sum of scores of all $2^n - 1$ non-empty subsequences of $a$.$^{\\text{†}}$ Since this answer may be large, please output it modulo $998\\,244\\,353$.\n\n$^{\\\\text{∗}}$$\\\\operatorname{MEX}$ of a collection of integers $c\\_1, c\\_2, \\\\ldots, c\\_k$ is defined as the smallest non-negative integer $x$ that does not occur in the collection $c$. For example, $\\\\operatorname{MEX}(\\[0,1,2,2\\]) = 3$ and $\\\\operatorname{MEX}(\\[1,2,2\\]) = 0$\n\n$^{\\text{†}}$A sequence $x$ is a subsequence of a sequence $y$ if $x$ can be obtained from $y$ by deleting several (possibly, zero or all) elements.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe first line of each test case contains an integer $n$ ($1 \\leq n \\leq 2 \\cdot 10^5$) — the length of $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\leq a_i < n$) — the elements of the array $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the answer, modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3\n\n0 0 1\n\n4\n\n0 0 1 1\n\n5\n\n0 0 1 2 2\n\n4\n\n1 1 1 1\n\n```\n\n#### Output #1\n\n```\n11\n26\n53\n0\n```\n\n### Note\n\nIn the first testcase, we must consider seven subsequences:\n\n- $[0]$: The score is $1$.\n- $[0]$: The score is $1$.\n- $[1]$: The score is $0$.\n- $[0,0]$: The score is $2$.\n- $[0,1]$: The score is $2$.\n- $[0,1]$: The score is $2$.\n- $[0,0,1]$: The score is $3$.\n\nThe answer for the first testcase is $1+1+2+2+2+3=11$.\n\nIn the last testcase, all subsequences have a score of $0$.", "cfid": "2030E"}
{"problem_id": "2030G1", "problem_title": "G1. The Destruction of the Universe (Easy Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2030/G1", "problem_statement": "This is the easy version of the problem. In this version, $n \\leq 5000$. You can only make hacks if both versions of the problem are solved.\n\nOrangutans are powerful beings—so powerful that they only need $1$ unit of time to destroy every vulnerable planet in the universe!\n\nThere are $n$ planets in the universe. Each planet has an interval of vulnerability $[l, r]$, during which it will be exposed to destruction by orangutans. Orangutans can also expand the interval of vulnerability of any planet by $1$ unit.\n\nSpecifically, suppose the expansion is performed on planet $p$ with interval of vulnerability $[l_p, r_p]$. Then, the resulting interval of vulnerability may be either $[l_p - 1, r_p]$ or $[l_p, r_p + 1]$.\n\nGiven a set of planets, orangutans can destroy all planets if the intervals of vulnerability of all planets in the set intersect at least one common point. Let the score of such a set denote the minimum number of expansions that must be performed.\n\nOrangutans are interested in the sum of scores of all non-empty subsets of the planets in the universe. As the answer can be large, output it modulo $998\\,244\\,353$.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 1000$) — the number of test cases.\n\nThe first line of each test case contains an integer $n$ ($1 \\leq n \\leq 5000$) — the number of planets in the universe.\n\nThe following $n$ lines contain two integers $l_i$ and $r_i$ ($1 \\leq l_i \\leq r_i \\leq n$) — the initial interval of vulnerability of the $i$-th planet.\n\nIt is guaranteed that the sum of $n$ does not exceed $5000$ over all test cases.\n\n### Output\n\nFor each test case, output an integer — the sum of scores to destroy all non-empty subsets of the planets in the universe, modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3\n\n1 1\n\n2 3\n\n3 3\n\n4\n\n1 4\n\n2 3\n\n2 4\n\n1 1\n\n5\n\n1 2\n\n2 3\n\n3 4\n\n4 5\n\n1 5\n\n```\n\n#### Output #1\n\n```\n5\n6\n24\n```\n\n### Note\n\nIn the first testcase, there are seven non-empty subsets of planets we must consider:\n\n- For each of the subsets $\\{[1,1]\\}, \\{[2,3]\\}, \\{[3,3]\\}$, the score is $0$.\n- For the subset $\\{[2,3], [3,3]\\}$, the score is $0$, because the point $3$ is already contained in both planets' interval of vulnerability.\n- For the subset $\\{[1,1], [2,3]\\}$, the score is $1$. By using one operation on changing the interval of vulnerability of the second planet to be $[1,3]$, the two planets now both have the point $1$ in their interval.\n- For the subset $\\{[1,1], [3,3]\\}$, the score is $2$. By using two operations on changing the interval of vulnerability of the first planet to be $[1,3]$, the two planets now both have the point $3$ in their interval.\n- For the subset $\\{[1,1], [2,3], [3,3]\\}$, the score is $2$. By using one operation on changing the interval of vulnerability of the first planet to be $[1,2]$ and one operation on changing the interval of vulnerability of the third planet to $[2,3]$, all three planets will have the point $2$ in their interval.\n\nThe sum of scores of all non-empty subsets of the first testcase is $0 \\cdot 4 + 1 \\cdot 1 + 2\\cdot2 = 5$.", "cfid": "2030G1"}
{"problem_id": "2030F", "problem_title": "F. Orangutan Approved Subarrays", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2030/F", "problem_statement": "Suppose you have an array $b$. Initially, you also have a set $S$ that contains all distinct elements of $b$. The array $b$ is called orangutan-approved if it can be emptied by repeatedly performing the following operation:\n\n- In one operation, select indices $l$ and $r$ ($1 \\leq l \\leq r \\leq |b|$) such that $v = b_l = b_{l+1} = \\ldots = b_r$ and $v$ is present in $S$. Remove $v$ from $S$, and simultaneously remove all $b_i$ such that $l \\leq i \\leq r$. Then, reindex the elements $b_{r+1}, b_{r+2}, \\ldots$ as $b_l, b_{l+1}, \\ldots$ accordingly.\n\nYou are given an array $a$ of length $n$ and $q$ queries.\n\nEach query consists of two indices $l$ and $r$ ($1 \\le l \\le r \\le n$), and you need to determine whether or not the subarray $a_{l}, a_{l+1}, \\ldots, a_r$ is orangutan-approved.\n\n### Input\n\nThe first line contains $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe first line of each test case contains integers $n$ and $q$ ($1 \\leq n,q \\leq 2 \\cdot 10^5$) — the size of $a$ and the number of queries, respectively.\n\nThe following line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq n$) — the elements of the array $a$.\n\nThe following $q$ lines contain two integers $l$ and $r$ — the endpoints of the subarray for each query ($1 \\leq l \\leq r \\leq n$).\n\nIt is guaranteed that the sum of $n$ and $q$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each query, output \"YES\" (without quotes) if the subarray from $l$ to $r$ is orangutan-approved, and \"NO\" (without quotes) otherwise.\n\nYou can output \"YES\" and \"NO\" in any case (for example, strings \"yES\", \"yes\" and \"Yes\" will be recognized as a positive response).\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n4 2\n\n1 2 2 1\n\n1 4\n\n1 3\n\n5 3\n\n1 2 1 2 1\n\n2 5\n\n3 5\n\n1 3\n\n8 4\n\n1 2 3 2 1 3 2 3\n\n1 5\n\n2 8\n\n3 5\n\n6 8\n\n```\n\n#### Output #1\n\n```\nYES\nYES\nNO\nYES\nYES\nYES\nNO\nYES\nYES\n```\n\n### Note\n\nIn the first query of the first testcase, the answer is YES.\n\n- Initially, $S=\\{1,2\\}$ and $b=[1,2,2,1]$\n- Select $l=2$ and $r=3$. Since $b_2=b_3=2$ is in $S$, we may erase $b_2$ and $b_3$ from the array, as well as erasing $2$ from $S$. The set $S$ becomes $\\{1\\}$ and the array becomes $[1,1]$.\n- Select $l=1$ and $r=2$. Since $b_1=b_2=1$ is in $S$, we may erase $b_1$ and $b_2$ from the array, as well as erasing $1$ from $S$. The set $S$ becomes $\\{\\}$ and the array becomes $[]$.\n- Since the array is now empty, we can say the original array is orangutan-approved.\n\nIn the first query of the second testcase, the answer is NO, because it can be shown that the subarray $[2,1,2,1]$ cannot become empty through any sequence of valid operations.", "cfid": "2030F"}
{"problem_id": "2025G", "problem_title": "G. Variable Damage", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2025/G", "problem_statement": "Monocarp is gathering an army to fight a dragon in a videogame.\n\nThe army consists of two parts: the heroes and the defensive artifacts. Each hero has one parameter — his health. Each defensive artifact also has one parameter — its durability.\n\nBefore the battle begins, Monocarp distributes artifacts to the heroes so that each hero receives at most one artifact.\n\nThe battle consists of rounds that proceed as follows:\n\n- first, the dragon deals damage equal to $\\frac{1}{a + b}$ (a real number without rounding) to each hero, where $a$ is the number of heroes alive and $b$ is the number of active artifacts;\n- after that, all heroes with health $0$ or less die;\n- finally, some artifacts are deactivated. An artifact with durability $x$ is deactivated when one of the following occurs: the hero holding the artifact either dies or receives $x$ total damage (from the start of the battle). If an artifact is not held by any hero, it is inactive from the beginning of the battle.\n\nThe battle ends when there are no heroes left alive.\n\nInitially, the army is empty. There are $q$ queries: add a hero with health $x$ or an artifact with durability $y$ to the army. After each query, determine the maximum number of rounds that Monocarp can survive if he distributes the artifacts optimally.\n\n### Input\n\nThe first line contains one integer $q$ ($1 \\le q \\le 3 \\cdot 10^5$) — the number of queries.\n\nIn the $i$-th of the following $q$ lines, there are two integers $t_i$ and $v_i$ ($t_i \\in \\{1, 2\\}$; $1 \\le v_i \\le 10^9$) — the type of the query and the value of the query parameter. If the type is $1$, a hero with health $v_i$ is added. If the type is $2$, an artifact with durability $v_i$ is added.\n\n### Output\n\nPrint $q$ integers. After each query, output the maximum number of rounds that Monocarp can survive if he distributes the artifacts optimally.\n\n### Examples\n\n#### Input #1\n\n```\n\n3\n\n2 5\n\n1 4\n\n1 10\n\n```\n\n#### Output #1\n\n```\n0\n8\n19\n```\n\n#### Input #2\n\n```\n\n10\n\n1 9\n\n1 6\n\n2 4\n\n1 8\n\n1 3\n\n2 10\n\n1 3\n\n1 6\n\n1 10\n\n2 6\n\n```\n\n#### Output #2\n\n```\n9\n15\n19\n27\n30\n39\n42\n48\n59\n65\n```\n\n### Note\n\nLet's consider the first example.\n\n- An artifact with durability $5$ is added. Since there are no heroes yet, the battle ends immediately.\n- A hero with health $4$ is added. Monocarp can give him an artifact with durability $5$. First, there are rounds in which the hero takes $\\frac{1}{1 + 1} = \\frac{1}{2}$ damage. After $8$ such rounds, a total of $4$ damage will have been dealt, and the hero will die, while the artifact will deactivate. There are no more heroes alive, so the battle ends after $8$ rounds.\n- A hero with health $10$ is added. Now let the artifact with durability $5$ be with this hero. Then, in the first $12$ rounds, the heroes will take $12 \\cdot \\frac{1}{2 + 1} = 4$ damage, and the first hero will die. The second hero has $6$ health left, and the artifact has $1$ durability. Now the damage is $\\frac{1}{2}$, so after another $2$ rounds, the artifact will deactivate. The second hero has $5$ health left. After another $5$ rounds, the second hero will die. Therefore, the answer is $12 + 2 + 5 = 19$.", "cfid": "2025G"}
{"problem_id": "2025E", "problem_title": "E. Card Game", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2025/E", "problem_statement": "In the most popular card game in Berland, a deck of $n \\times m$ cards is used. Each card has two parameters: suit and rank. Suits in the game are numbered from $1$ to $n$, and ranks are numbered from $1$ to $m$. There is exactly one card in the deck for each combination of suit and rank.\n\nA card with suit $a$ and rank $b$ can beat a card with suit $c$ and rank $d$ in one of two cases:\n\n- $a = 1$, $c \\ne 1$ (a card of suit $1$ can beat a card of any other suit);\n- $a = c$, $b > d$ (a card can beat any other card of the same suit but of a lower rank).\n\nTwo players play the game. Before the game starts, they receive exactly half of the deck each. The first player wins if for every card of the second player, he can choose his card that can beat it, and there is no card that is chosen twice (i. e. there exists a matching of the first player's cards with the second player's cards such that in each pair the first player's card beats the second player's card). Otherwise, the second player wins.\n\nYour task is to calculate the number of ways to distribute the cards so that the first player wins. Two ways are considered different if there exists a card such that in one way it belongs to the first player and in the other way it belongs to the second player. The number of ways can be very large, so print it modulo $998244353$.\n\n### Input\n\nThe only line contains two integers $n$ and $m$ ($1 \\le n, m \\le 500$).\n\nAdditional constraint on the input: $m$ is even.\n\n### Output\n\nPrint a single integer — the number of ways to distribute the cards so that the first player wins, taken modulo $998244353$.\n\n### Examples\n\n#### Input #1\n\n```\n\n1 4\n\n```\n\n#### Output #1\n\n```\n2\n```\n\n#### Input #2\n\n```\n\n2 2\n\n```\n\n#### Output #2\n\n```\n2\n```\n\n#### Input #3\n\n```\n\n3 6\n\n```\n\n#### Output #3\n\n```\n1690\n```\n\n#### Input #4\n\n```\n\n5 4\n\n```\n\n#### Output #4\n\n```\n568\n```\n\n#### Input #5\n\n```\n\n500 500\n\n```\n\n#### Output #5\n\n```\n84693741\n```", "cfid": "2025E"}
{"problem_id": "2025F", "problem_title": "F. Choose Your Queries", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2025/F", "problem_statement": "You are given an array $a$, consisting of $n$ integers (numbered from $1$ to $n$). Initially, they are all zeroes.\n\nYou have to process $q$ queries. The $i$-th query consists of two different integers $x_i$ and $y_i$. During the $i$-th query, you have to choose an integer $p$ (which is either $x_i$ or $y_i$) and an integer $d$ (which is either $1$ or $-1$), and assign $a_p = a_p + d$.\n\nAfter each query, every element of $a$ should be a non-negative integer.\n\nProcess all queries in such a way that the sum of all elements of $a$ after the last query is the minimum possible.\n\n### Input\n\nThe first line contains two integers $n$ and $q$ ($2 \\le n \\le 3 \\cdot 10^5$; $1 \\le q \\le 3 \\cdot 10^5$) — the number of elements in $a$ and the number of queries, respectively.\n\nThen $q$ lines follow. The $i$-th of these lines contains two integers $x_i$ and $y_i$ ($1 \\le x_i, y_i \\le n$; $x_i \\ne y_i$) — the description of the $i$-th query.\n\n### Output\n\nFor each query, print a line containing two characters:\n\n- the first character should be x if you choose $p=x_i$, or y if you choose $p=y_i$;\n- the second character should be + if you choose $d=1$, or - if you choose $d=-1$.\n\nIf there are multiple answers, print any of them.\n\n### Examples\n\n#### Input #1\n\n```\n\n3 4\n\n1 2\n\n3 2\n\n3 1\n\n1 2\n\n```\n\n#### Output #1\n\n```\ny+\nx+\nx-\ny-\n```\n\n#### Input #2\n\n```\n\n4 4\n\n1 2\n\n2 3\n\n3 4\n\n3 2\n\n```\n\n#### Output #2\n\n```\ny+\ny+\nx-\ny-\n```\n\n#### Input #3\n\n```\n\n4 2\n\n2 1\n\n4 3\n\n```\n\n#### Output #3\n\n```\ny+\nx+\n```", "cfid": "2025F"}
{"problem_id": "2022E1", "problem_title": "E1. Billetes MX (Easy Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2022/E1", "problem_statement": "This is the easy version of the problem. In this version, it is guaranteed that $q = 0$. You can make hacks only if both versions of the problem are solved.\n\nAn integer grid $A$ with $p$ rows and $q$ columns is called beautiful if:\n\n- All elements of the grid are integers between $0$ and $2^{30}-1$, and\n- For any subgrid, the XOR of the values at the corners is equal to $0$. Formally, for any four integers $i_1$, $i_2$, $j_1$, $j_2$ ($1 \\le i_1 < i_2 \\le p$; $1 \\le j_1 < j_2 \\le q$), $A_{i_1, j_1} \\oplus A_{i_1, j_2} \\oplus A_{i_2, j_1} \\oplus A_{i_2, j_2} = 0$, where $\\oplus$ denotes the [bitwise XOR operation](https://en.wikipedia.org/wiki/Bitwise_operation#XOR).\n\nThere is a partially filled integer grid $G$ with $n$ rows and $m$ columns where only $k$ cells are filled. Polycarp wants to know how many ways he can assign integers to the unfilled cells so that the grid is beautiful.\n\nHowever, Monocarp thinks that this problem is too easy. Therefore, he will perform $q$ updates on the grid. In each update, he will choose an unfilled cell and assign an integer to it. Note that these updates are persistent. That is, changes made to the grid will apply when processing future updates.\n\nFor each of the $q + 1$ states of the grid, the initial state and after each of the $q$ queries, determine the number of ways Polycarp can assign integers to the unfilled cells so that the grid is beautiful. Since this number can be very large, you are only required to output their values modulo $10^9+7$.\n\n### Input\n\nThe first line contains $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains four integers $n$, $m$, $k$ and $q$ ($2 \\le n, m \\le 10^5$; $0 \\le k \\le 10^5$; $q = 0$) — the number of rows, the number of columns, the number of fixed cells, and the number of updates.\n\nThe following $k$ lines contain three integers $r$, $c$ and $v$ ($1 \\le r \\le n, 1 \\le c \\le m$; $0 \\le v < 2^{30}$) — indicating that $G_{r, c}$ is assigned the integer $v$.\n\nThe following $q$ lines contain three integers $r$, $c$ and $v$ ($1 \\le r \\le n, 1 \\le c \\le m$; $0 \\le v < 2^{30}$) — indicating that $G_{r, c}$ is assigned the integer $v$.\n\nIt is guaranteed that the pairs $(r,c)$ over all assignments are distinct.\n\nIt is guaranteed that the sum of $n$, $m$, $k$ and $q$ over all test cases does not exceed $10^5$ respectively.\n\n### Output\n\nFor each test case, output $q + 1$ lines. The $i$-th line of output should contain the answer of the $i$-th state of the grid modulo $10^9 + 7$.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n3 3 8 0\n\n2 1 6\n\n3 2 12\n\n1 2 6\n\n2 2 0\n\n1 3 10\n\n1 1 0\n\n2 3 12\n\n3 1 10\n\n2 5 2 0\n\n1 1 10\n\n1 2 30\n\n```\n\n#### Output #1\n\n```\n1\n489373567\n```\n\n### Note\n\nIn the first test case of the example, we have the following grid:\n\n$0\n\n$$6$$\n\n10\n\n$$6$$\n\n0\n\n$$12$$\n\n10\n\n$$12$$\n\nIt can be proven that the only valid value for tile $(3, 3)$ is $0$.", "cfid": "2022E1"}
{"problem_id": "2022E2", "problem_title": "E2. Billetes MX (Hard Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2022/E2", "problem_statement": "This is the hard version of the problem. In this version, it is guaranteed that $q \\leq 10^5$. You can make hacks only if both versions of the problem are solved.\n\nAn integer grid $A$ with $p$ rows and $q$ columns is called beautiful if:\n\n- All elements of the grid are integers between $0$ and $2^{30}-1$, and\n- For any subgrid, the XOR of the values at the corners is equal to $0$. Formally, for any four integers $i_1$, $i_2$, $j_1$, $j_2$ ($1 \\le i_1 < i_2 \\le p$; $1 \\le j_1 < j_2 \\le q$), $A_{i_1, j_1} \\oplus A_{i_1, j_2} \\oplus A_{i_2, j_1} \\oplus A_{i_2, j_2} = 0$, where $\\oplus$ denotes the [bitwise XOR operation](https://en.wikipedia.org/wiki/Bitwise_operation#XOR).\n\nThere is a partially filled integer grid $G$ with $n$ rows and $m$ columns where only $k$ cells are filled. Polycarp wants to know how many ways he can assign integers to the unfilled cells so that the grid is beautiful.\n\nHowever, Monocarp thinks that this problem is too easy. Therefore, he will perform $q$ updates on the grid. In each update, he will choose an unfilled cell and assign an integer to it. Note that these updates are persistent. That is, changes made to the grid will apply when processing future updates.\n\nFor each of the $q + 1$ states of the grid, the initial state and after each of the $q$ queries, determine the number of ways Polycarp can assign integers to the unfilled cells so that the grid is beautiful. Since this number can be very large, you are only required to output their values modulo $10^9+7$.\n\n### Input\n\nThe first line contains $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains four integers $n$, $m$, $k$ and $q$ ($2 \\le n, m \\le 10^5$; $0 \\le k, q \\leq 10^5$) — the number of rows, the number of columns, the number of fixed cells, and the number of updates.\n\nThe following $k$ lines contain three integers $r$, $c$ and $v$ ($1 \\le r \\le n, 1 \\le c \\le m$; $0 \\le v < 2^{30}$) indicating that $G_{r, c}$ is assigned the integer $v$.\n\nThe following $q$ lines contain three integers $r$, $c$ and $v$ ($1 \\le r \\le n, 1 \\le c \\le m$; $0 \\le v < 2^{30}$) indicating that $G_{r, c}$ is assigned the integer $v$.\n\nIt is guaranteed that the pairs $(r,c)$ over all assignments are distinct.\n\nIt is guaranteed that the sum of $n$, $m$, $k$ and $q$ over all test cases does not exceed $10^5$ respectively.\n\n### Output\n\nFor each test case, output $q + 1$ lines. The $i$-th line of output should contain the answer of the $i$-th state of the grid modulo $10^9 + 7$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3 3 8 1\n\n2 1 6\n\n3 2 12\n\n1 2 6\n\n2 2 0\n\n1 3 10\n\n1 1 0\n\n2 3 12\n\n3 1 10\n\n3 3 1\n\n2 5 2 0\n\n1 1 10\n\n1 2 30\n\n2 5 0 2\n\n1 1 10\n\n1 2 30\n\n```\n\n#### Output #1\n\n```\n1\n0\n489373567\n651321892\n769740174\n489373567\n```\n\n### Note\n\nIn the first test case of the example, we initially have the following grid:\n\n$0\n\n$$6$$\n\n10\n\n$$6$$\n\n0\n\n$$12$$\n\n10\n\n$$12$$\n\nIt can be proven that the only valid value for tile $(3, 3)$ is $0$, so the first answer is $1$. For the second query, the grid does not satisfy the condition, and thus the answer is $0$.", "cfid": "2022E2"}
{"problem_id": "2022D1", "problem_title": "D1. Asesino (Easy Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2022/D1", "problem_statement": "This is the easy version of the problem. In this version, you can ask at most $n+69$ questions. You can make hacks only if both versions of the problem are solved.\n\nThis is an interactive problem.\n\nIt is a tradition in Mexico's national IOI trainings to play the game \"Asesino\", which is similar to \"Among Us\" or \"Mafia\".\n\nToday, $n$ players, numbered from $1$ to $n$, will play \"Asesino\" with the following three roles:\n\n- Knight: a Knight is someone who always tells the truth.\n- Knave: a Knave is someone who always lies.\n- Impostor: an Impostor is someone everybody thinks is a Knight, but is secretly a Knave.\n\nEach player will be assigned a role in the game. There will be exactly one Impostor but there can be any (possible zero) number of Knights and Knaves.\n\nAs the game moderator, you have accidentally forgotten the roles of everyone, but you need to determine the player who is the Impostor.\n\nTo determine the Impostor, you will ask some questions. In each question, you will pick two players $i$ and $j$ ($1 \\leq i, j \\leq n$; $i \\neq j$) and ask if player $i$ thinks that player $j$ is a Knight. The results of the question is shown in the table below.\n\nKnightKnaveImpostorKnightYesNoYesKnaveNoYesNoImpostorNoYes—The response of the cell in row $a$ and column $b$ is the result of asking a question when $i$ has role $a$ and $j$ has row $b$. For example, the \"Yes\" in the top right cell belongs to row \"Knight\" and column \"Impostor\", so it is the response when $i$ is a Knight and $j$ is an Impostor.\n\nFind the Impostor in at most $n + 69$ questions.\n\nNote: the grader is adaptive: the roles of the players are not fixed in the beginning and may change depending on your questions. However, it is guaranteed that there exists an assignment of roles that is consistent with all previously asked questions under the constraints of this problem.\n\n### Input\n\nThe first line of input contains a single integer $t$ ($1 \\leq t \\leq 10^3$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($3 \\le n \\le 10^5$) — the number of people playing the game.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Interaction\n\nTo ask a question, output a line in the following format:\n\n- \"? i j\" ($1 \\leq i,j \\leq n$; $i \\neq j$) — to ask player $i$ if they think player $j$ is a Knight.\n\nThe jury will output a \"1\" if player $i$ thinks player $j$ is a Knight, and \"0\" otherwise.\n\nWhen you have determined which player the Impostor is, output a line in the following format:\n\n- \"! i\" ($1 \\leq i \\leq n$) — the Impostor is player $i$.\n\nNote that answering does not count to your limit of $n+69$ questions.\n\nIf you have made an invalid output, used more than $n+69$ questions or wrongly determined the Impostor, the jury will respond with \"-1\" and you will receive a Wrong Answer verdict. Upon receiving \"-1\", your program must terminate immediately. Otherwise, you may receive an arbitrary verdict because your solution might be reading from a closed stream.\n\nAfter printing a query do not forget to output the end of the line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- sys.stdout.flush() in Python;\n- std::io::stdout().flush() in Rust;\n- see the documentation for other languages.\n\nHack format\n\nFor hacks, use the following format.\n\nThe first line should contain a single integer $t$ — the number of test cases.\n\nThe first line of each test case should contain the integer $n$ followed by the string \"manual\".\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($-1 \\le a_i \\le 1$) — the roles of each player. $1$ denotes a Knight, $0$ denotes a Knave, and $-1$ dentoes an Impostor. There must be exactly one Impostor, that is there must be exactly one index $i$ such that $a_i=-1$.\n\nAs an example, the hack format for the example input is:\n\n```\n`2<br/>7 manual<br/>0 1 0 -1 0 1 0<br/>4 manual<br/>0 1 -1 0<br/>````\n\n### Example\n\n#### Input #1\n\n```\n2\n7\n\n1\n\n0\n\n0\n\n1\n\n1\n\n0\n\n0\n\n1\n\n4\n\n0\n\n1\n\n1\n\n1\n```\n\n#### Output #1\n\n```\n\n? 1 3\n\n? 7 6\n\n? 2 5\n\n? 6 2\n\n? 4 5\n\n? 4 6\n\n? 1 4\n\n? 2 4\n\n! 4\n\n? 1 2\n\n? 2 3\n\n? 3 4\n\n? 4 1\n\n! 3\n```\n\n### Note\n\nNote that the example test cases do not represent an optimal strategy for asking questions and are only shown for the sake of demonstrating the interaction format. Specifically, we cannot determine which player is the Impostor from the questions asked in the examples.\n\nIn the first test case of the example, players at indices $2$ and $6$ are Knights, players at indices $1$, $3$, $5$, and $7$ are Knaves, and the Impostor is at index $4$. The following is an explanation of the questions asked:\n\n- In the first query, player $i$ is a Knave and player $j$ is a Knave. The answer is \"yes\" since Knaves always lie.\n- In the second query, player $i$ is a Knave and player $j$ is a Knight. The answer is \"no\" since Knaves always lie.\n- In the third query, player $i$ is a Knight and player $j$ is a Knave. The answer is \"no\" since Knights always tell the truth.\n- In the fourth query, player $i$ is a Knight and player $j$ is a Knight. The answer is \"yes\" since Knights always tell the truth.\n- In the fifth query, player $i$ is a Impostor and player $j$ is a Knave. The answer is \"yes\" since the Impostor always lies.\n- In the sixth query, player $i$ is a Impostor and player $j$ is a Knight. The answer is \"no\" since the Impostor always lies.\n- In the seventh query, player $i$ is a Knave and player $j$ is a Impostor. The answer is \"no\" since Knaves always lie and Knaves thinks that the Impostor is a Knight.\n- In the eighth query, player $i$ is a Knight and player $j$ is a Impostor. The answer is \"yes\" since Knights always tell the truth and Knights think that the Impostor is a Knight.", "cfid": "2022D1"}
{"problem_id": "2022D2", "problem_title": "D2. Asesino (Hard Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2022/D2", "problem_statement": "This is the hard version of the problem. In this version, you must use the minimum number of queries possible. You can make hacks only if both versions of the problem are solved.\n\nThis is an interactive problem.\n\nIt is a tradition in Mexico's national IOI trainings to play the game \"Asesino\", which is similar to \"Among Us\" or \"Mafia\".\n\nToday, $n$ players, numbered from $1$ to $n$, will play \"Asesino\" with the following three roles:\n\n- Knight: a Knight is someone who always tells the truth.\n- Knave: a Knave is someone who always lies.\n- Impostor: an Impostor is someone everybody thinks is a Knight, but is secretly a Knave.\n\nEach player will be assigned a role in the game. There will be exactly one Impostor but there can be any (possible zero) number of Knights and Knaves.\n\nAs the game moderator, you have accidentally forgotten the roles of everyone, but you need to determine the player who is the Impostor.\n\nTo determine the Impostor, you will ask some questions. In each question, you will pick two players $i$ and $j$ ($1 \\leq i, j \\leq n$; $i \\neq j$) and ask if player $i$ thinks that player $j$ is a Knight. The results of the question is shown in the table below.\n\nKnightKnaveImpostorKnightYesNoYesKnaveNoYesNoImpostorNoYes—The response of the cell in row $a$ and column $b$ is the result of asking a question when $i$ has role $a$ and $j$ has row $b$. For example, the \"Yes\" in the top right cell belongs to row \"Knight\" and column \"Impostor\", so it is the response when $i$ is a Knight and $j$ is an Impostor.\n\nFind the Impostor in the minimum number of queries possible. That is, let $f(n)$ be the minimum integer such that for $n$ players, there exists a strategy that can determine the Impostor using at most $f(n)$ questions. Then, you should use at most $f(n)$ questions to determine the Impostor.\n\nNote: the grader is adaptive: the roles of the players are not fixed in the beginning and may change depending on your questions. However, it is guaranteed that there exists an assignment of roles that is consistent with all previously asked questions under the constraints of this problem.\n\n### Input\n\nThe first line of input contains a single integer $t$ ($1 \\leq t \\leq 10^3$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($3 \\le n \\le 10^5$) — the number of people playing the game.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Interaction\n\nTo ask a question, output a line in the following format:\n\n- \"? i j\" ($1 \\leq i,j \\leq n$; $i \\neq j$) — to ask player $i$ if they think player $j$ is a Knight.\n\nThe jury will output a \"1\" if player $i$ thinks player $j$ is a Knight, and \"0\" otherwise.\n\nWhen you have determined which player the Impostor is, output a line in the following format:\n\n- \"! i\" ($1 \\leq i \\leq n$) — the Impostor is player $i$.\n\nNote that answering does not count to your limit of $f(n)$ questions.\n\nIf you have made an invalid output, used more than $f(n)$ questions or wrongly determined the Impostor, the jury will respond with \"-1\" and you will receive a Wrong Answer verdict. Upon receiving \"-1\", your program must terminate immediately. Otherwise, you may receive an arbitrary verdict because your solution might be reading from a closed stream.\n\nAfter printing a query do not forget to output the end of the line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- sys.stdout.flush() in Python;\n- std::io::stdout().flush() in Rust;\n- see the documentation for other languages.\n\nHack format\n\nFor hacks, use the following format.\n\nThe first line should contain a single integer $t$ — the number of test cases.\n\nThe first line of each test case should contain the integer $n$ followed by the string \"manual\".\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($-1 \\le a_i \\le 1$) — the roles of each player. $1$ denotes a Knight, $0$ denotes a Knave, and $-1$ dentoes an Impostor. There must be exactly one Impostor, that is there must be exactly one index $i$ such that $a_i=-1$.\n\nAs an example, the hack format for the example input is:\n\n```\n`2<br/>7 manual<br/>0 1 0 -1 0 1 0<br/>4 manual<br/>0 1 -1 0<br/>````\n\n### Example\n\n#### Input #1\n\n```\n2\n7\n\n1\n\n0\n\n0\n\n1\n\n1\n\n0\n\n0\n\n4\n\n0\n\n1\n\n1\n\n1\n```\n\n#### Output #1\n\n```\n\n? 1 3\n\n? 7 6\n\n? 2 5\n\n? 6 2\n\n? 4 5\n\n? 4 6\n\n? 1 4\n\n! 4\n\n? 1 2\n\n? 2 3\n\n? 3 4\n\n? 4 1\n\n! 3\n```\n\n### Note\n\nNote that the example test cases do not represent an optimal strategy for asking questions and are only shown for the sake of demonstrating the interaction format. Specifically, we cannot determine which player is the Impostor from the questions asked in the examples.\n\nIn the first test case of the example, players at indices $2$ and $6$ are Knights, players at indices $1$, $3$, $5$, and $7$ are Knaves, and the Impostor is at index $4$. The following is an explanation of the questions asked:\n\n- In the first query, player $i$ is a Knave and player $j$ is a Knave. The answer is \"yes\" since Knaves always lie.\n- In the second query, player $i$ is a Knave and player $j$ is a Knight. The answer is \"no\" since Knaves always lie.\n- In the third query, player $i$ is a Knight and player $j$ is a Knave. The answer is \"no\" since Knights always tell the truth.\n- In the fourth query, player $i$ is a Knight and player $j$ is a Knight. The answer is \"yes\" since Knights always tell the truth.\n- In the fifth query, player $i$ is a Impostor and player $j$ is a Knave. The answer is \"yes\" since the Impostor always lies.\n- In the sixth query, player $i$ is a Impostor and player $j$ is a Knight. The answer is \"no\" since the Impostor always lies.\n- In the seventh query, player $i$ is a Knave and player $j$ is a Impostor. The answer is \"no\" since Knaves always lie and Knaves thinks that the Impostor is a Knight.", "cfid": "2022D2"}
{"problem_id": "2021E1", "problem_title": "E1. Digital Village (Easy Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2021/E1", "problem_statement": "This is the easy version of the problem. In the three versions, the constraints on $n$ and $m$ are different. You can make hacks only if all the versions of the problem are solved.\n\nPak Chanek is setting up internet connections for the village of Khuntien. The village can be represented as a connected simple graph with $n$ houses and $m$ internet cables connecting house $u_i$ and house $v_i$, each with a latency of $w_i$.\n\nThere are $p$ houses that require internet. Pak Chanek can install servers in at most $k$ of the houses. The houses that need internet will then be connected to one of the servers. However, since each cable has its latency, the latency experienced by house $s_i$ requiring internet will be the maximum latency of the cables between that house and the server it is connected to.\n\nFor each $k = 1,2,\\ldots,n$, help Pak Chanek determine the minimum total latency that can be achieved for all the houses requiring internet.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 100$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n$, $m$, $p$ ($2 \\le n \\le 400$; $n-1 \\le m \\le 400$; $1 \\le p \\le n$) — the number of houses, the number of cables and the number of houses that need internet.\n\nThe second line of each test case contains $p$ integers $s_1, s_2, \\ldots, s_p$ ($1 \\le s_i \\le n$) — the houses that need internet. It is guaranteed that all elements of $s$ are distinct.\n\nThe $i$-th of the next $m$ lines of each test case contains three integers $u_i$, $v_i$, and $w_i$ ($1 \\le u_i < v_i \\le n$; $1 \\le w_i \\le 10^9$) — the internet cable connecting house $u_i$ and house $v_i$ with latency of $w_i$. It is guaranteed that the given edges form a connected simple graph.\n\nIt is guaranteed that the sum of $n^3$ and the sum of $m^3$ do not exceed $10^8$.\n\n### Output\n\nFor each test case, output $n$ integers: the minimum total latency that can be achieved for all the houses requiring internet for each $k = 1,2,\\ldots,n$.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n9 8 5\n\n2 5 6 8 9\n\n1 2 1\n\n1 3 2\n\n3 4 10\n\n4 5 3\n\n4 6 5\n\n1 7 10\n\n7 8 4\n\n7 9 2\n\n3 3 2\n\n3 1\n\n1 2 1\n\n2 3 3\n\n1 3 2\n\n```\n\n#### Output #1\n\n```\n34 19 9 4 0 0 0 0 0\n2 0 0\n```\n\n### Note\n\nIn the first test case for $k=3$, a possible optimal solution is to install servers at vertices $2$, $6$ and $8$ and obtain the following latency:\n\n- $\\text{latency}(2) = 0$\n- $\\text{latency}(5) = \\max(3, 5) = 5$\n- $\\text{latency}(6) = 0$\n- $\\text{latency}(8) = 0$\n- $\\text{latency}(9) = \\max(2, 4) = 4$\n\nSo the total latency is $9$.", "cfid": "2021E1"}
{"problem_id": "2021E3", "problem_title": "E3. Digital Village (Extreme Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2021/E3", "problem_statement": "This is the extreme version of the problem. In the three versions, the constraints on $n$ and $m$ are different. You can make hacks only if all the versions of the problem are solved.\n\nPak Chanek is setting up internet connections for the village of Khuntien. The village can be represented as a connected simple graph with $n$ houses and $m$ internet cables connecting house $u_i$ and house $v_i$, each with a latency of $w_i$.\n\nThere are $p$ houses that require internet. Pak Chanek can install servers in at most $k$ of the houses. The houses that need internet will then be connected to one of the servers. However, since each cable has its latency, the latency experienced by house $s_i$ requiring internet will be the maximum latency of the cables between that house and the server it is connected to.\n\nFor each $k = 1,2,\\ldots,n$, help Pak Chanek determine the minimum total latency that can be achieved for all the houses requiring internet.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains 3 integers $n$, $m$, $p$ ($2 \\le n \\le 2 \\cdot 10^5$; $n-1 \\le m \\le 2 \\cdot 10^5$; $1 \\le p \\le n$) — the number of houses, the number of cables, and the number of houses that need internet.\n\nThe second line of each test case contains $p$ integers $s_1, s_2, \\ldots, s_p$ ($1 \\le s_i \\le n$) — the houses that need internet. It is guaranteed that all elements of $s$ are distinct.\n\nThe $i$-th of the next $m$ lines of each test case contains three integers $u_i$, $v_i$, and $w_i$ ($1 \\le u_i < v_i \\le n$; $1 \\le w_i \\le 10^9$) — the internet cable connecting house $u_i$ and house $v_i$ with latency of $w_i$. It is guaranteed that the given edges form a connected simple graph.\n\nIt is guaranteed that the sum of $n$ and the sum of $m$ do not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output $n$ integers: the minimum total latency that can be achieved for all the houses requiring internet for each $k = 1,2,\\ldots,n$.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n9 8 5\n\n2 5 6 8 9\n\n1 2 1\n\n1 3 2\n\n3 4 10\n\n4 5 3\n\n4 6 5\n\n1 7 10\n\n7 8 4\n\n7 9 2\n\n3 3 2\n\n3 1\n\n1 2 1\n\n2 3 3\n\n1 3 2\n\n```\n\n#### Output #1\n\n```\n34 19 9 4 0 0 0 0 0\n2 0 0\n```\n\n### Note\n\nIn the first test case for $k=3$, a possible optimal solution is to install servers at vertices $2$, $6$ and $8$ and obtain the following latency:\n\n- $\\text{latency}(2) = 0$\n- $\\text{latency}(5) = \\max(3, 5) = 5$\n- $\\text{latency}(6) = 0$\n- $\\text{latency}(8) = 0$\n- $\\text{latency}(9) = \\max(2, 4) = 4$\n\nSo the total latency is $9$.", "cfid": "2021E3"}
{"problem_id": "2021E2", "problem_title": "E2. Digital Village (Hard Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2021/E2", "problem_statement": "This is the hard version of the problem. In the three versions, the constraints on $n$ and $m$ are different. You can make hacks only if all the versions of the problem are solved.\n\nPak Chanek is setting up internet connections for the village of Khuntien. The village can be represented as a connected simple graph with $n$ houses and $m$ internet cables connecting house $u_i$ and house $v_i$, each with a latency of $w_i$.\n\nThere are $p$ houses that require internet. Pak Chanek can install servers in at most $k$ of the houses. The houses that need internet will then be connected to one of the servers. However, since each cable has its latency, the latency experienced by house $s_i$ requiring internet will be the maximum latency of the cables between that house and the server it is connected to.\n\nFor each $k = 1,2,\\ldots,n$, help Pak Chanek determine the minimum total latency that can be achieved for all the houses requiring internet.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 2000$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n$, $m$, $p$ ($2 \\le n \\le 5000$; $n-1 \\le m \\le 5000$; $1 \\le p \\le n$) — the number of houses, the number of cables, and the number of houses that need internet.\n\nThe second line of each test case contains $p$ integers $s_1, s_2, \\ldots, s_p$ ($1 \\le s_i \\le n$) — the houses that need internet. It is guaranteed that all elements of $s$ are distinct.\n\nThe $i$-th of the next $m$ lines of each test case contains three integers $u_i$, $v_i$, and $w_i$ ($1 \\le u_i < v_i \\le n$; $1 \\le w_i \\le 10^9$) — the internet cable connecting house $u_i$ and house $v_i$ with latency of $w_i$. It is guaranteed that the given edges form a connected simple graph.\n\nIt is guaranteed that the sum of $n$ and the sum of $m$ do not exceed $5000$.\n\n### Output\n\nFor each test case, output $n$ integers: the minimum total latency that can be achieved for all the houses requiring internet for each $k = 1,2,\\ldots,n$.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n9 8 5\n\n2 5 6 8 9\n\n1 2 1\n\n1 3 2\n\n3 4 10\n\n4 5 3\n\n4 6 5\n\n1 7 10\n\n7 8 4\n\n7 9 2\n\n3 3 2\n\n3 1\n\n1 2 1\n\n2 3 3\n\n1 3 2\n\n```\n\n#### Output #1\n\n```\n34 19 9 4 0 0 0 0 0\n2 0 0\n```\n\n### Note\n\nIn the first test case for $k=3$, a possible optimal solution is to install servers at vertices $2$, $6$ and $8$ and obtain the following latency:\n\n- $\\text{latency}(2) = 0$\n- $\\text{latency}(5) = \\max(3, 5) = 5$\n- $\\text{latency}(6) = 0$\n- $\\text{latency}(8) = 0$\n- $\\text{latency}(9) = \\max(2, 4) = 4$\n\nSo the total latency is $9$.", "cfid": "2021E2"}
{"problem_id": "2021D", "problem_title": "D. Boss, Thirsty", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2021/D", "problem_statement": "Pak Chanek has a friend who runs a drink stall in a canteen. His friend will sell drinks for $n$ days, numbered from day $1$ to day $n$. There are also $m$ types of drinks, numbered from $1$ to $m$.\n\nThe profit gained from selling a drink on a particular day can vary. On day $i$, the projected profit from selling drink of type $j$ is $A_{i, j}$. Note that $A_{i, j}$ can be negative, meaning that selling the drink would actually incur a loss.\n\nPak Chanek wants to help his friend plan the sales over the $n$ days. On day $i$, Pak Chanek must choose to sell at least one type of drink. Furthermore, the types of drinks sold on a single day must form a subarray. In other words, in each day, Pak Chanek will select $i$ and $j$ such that $1 \\leq i \\leq j \\leq m$. Then all types of drinks between $i$ and $j$ (inclusive) will be sold.\n\nHowever, to ensure that customers from the previous day keep returning, the selection of drink types sold on day $i$ ($i>1$) must meet the following conditions:\n\n- At least one drink type sold on day $i$ must also have been sold on day $i-1$.\n- At least one drink type sold on day $i$ must not have been sold on day $i-1$.\n\nThe daily profit is the sum of the profits from all drink types sold on that day. The total profit from the sales plan is the sum of the profits over $n$ days. What is the maximum total profit that can be achieved if Pak Chanek plans the sales optimally?\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\leq n \\leq 2 \\cdot 10^5$; $3 \\leq m \\leq 2 \\cdot 10^5$; $n \\cdot m \\leq 2 \\cdot 10^5$) — the number of rows and columns in a grid.\n\nThe next $n$ lines of each test case contain $m$ integers each, where the $i$-th line contains the integers $A_{i,1} A_{i,2}, \\ldots, A_{i,m}$ ($-10^9 \\leq A_{i,j} \\leq 10^9$) — project profits of each drink type on the $i$-th day.\n\nIt is guaranteed that the sum of $n \\cdot m$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer: the maximum profit that Pak Chanek can achieve.\n\n### Example\n\n#### Input #1\n\n```\n\n1\n\n3 6\n\n79 20 49 5 -1000 500\n\n-105 9 109 24 -98 -499\n\n14 47 12 39 23 50\n\n```\n\n#### Output #1\n\n```\n475\n```\n\n### Note\n\nHere is Pak Chanek's optimal plan:\n\n![](https://espresso.codeforces.com/ccb42f0d02306295b68f615cb77d068a6269d1d6.png)![](https://espresso.codeforces.com/9d9f5b0cf524cb68580876216c9aab01fbf55f0d.png)![](https://espresso.codeforces.com/d3d6b12faf0449759658f9d1f0e6525a52bf3d93.png)\n\n- On day $1$, Pak Chanek sells drink types $1$ to $3$. Generating a profit of $79+20+49 = 148$.\n- On day $2$, Pak Chanek sells drink types $2$ to $4$. Generating a profit of $9+109+24 = 142$\n- On day $3$, Pak Chanek sells drink types $1$ to $6$. Generating a profit of $185$.\n\nSo, the total profit of Pak Chanek's plan is $148 + 142 + 185 = 475$.", "cfid": "2021D"}
{"problem_id": "2021C2", "problem_title": "C2. Adjust The Presentation (Hard Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2021/C2", "problem_statement": "This is the hard version of the problem. In the two versions, the constraints on $q$ and the time limit are different. In this version, $0 \\leq q \\leq 2 \\cdot 10^5$. You can make hacks only if all the versions of the problem are solved.\n\nA team consisting of $n$ members, numbered from $1$ to $n$, is set to present a slide show at a large meeting. The slide show contains $m$ slides.\n\nThere is an array $a$ of length $n$. Initially, the members are standing in a line in the order of $a_1, a_2, \\ldots, a_n$ from front to back. The slide show will be presented in order from slide $1$ to slide $m$. Each section will be presented by the member at the front of the line. After each slide is presented, you can move the member at the front of the line to any position in the lineup (without changing the order of the rest of the members). For example, suppose the line of members is $[\\color{red}{3},1,2,4]$. After member $3$ presents the current slide, you can change the line of members into either $[\\color{red}{3},1,2,4]$, $[1,\\color{red}{3},2,4]$, $[1,2,\\color{red}{3},4]$ or $[1,2,4,\\color{red}{3}]$.\n\nThere is also an array $b$ of length $m$. The slide show is considered good if it is possible to make member $b_i$ present slide $i$ for all $i$ from $1$ to $m$ under these constraints.\n\nHowever, your annoying boss wants to make $q$ updates to the array $b$. In the $i$-th update, he will choose a slide $s_i$ and a member $t_i$ and set $b_{s_i} := t_i$. Note that these updates are persistent, that is changes made to the array $b$ will apply when processing future updates.\n\nFor each of the $q+1$ states of array $b$, the initial state and after each of the $q$ updates, determine if the slideshow is good.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n$, $m$ and $q$ ($1 \\le n, m \\le 2 \\cdot 10^5$; $0 \\leq q \\leq 2 \\cdot 10^5$) — the number of members and the number of sections.\n\nThe second line of each test case contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($1 \\le a_i \\le n$) — the initial order of the members from front to back. It is guaranteed that each integer from $1$ to $n$ appears exactly once in $a$.\n\nThe third line of each test case contains $m$ integers $b_1, b_2, \\ldots, b_m$ ($1 \\le b_i \\le n$) — the members who should present each section.\n\nEach of the next $q$ lines contains two integers $s_i$ and $t_i$ ($1 \\le s_i \\le m$, $1 \\le t_i \\le n$) — parameters of an update.\n\nIt is guaranteed that the sum of $n$, the sum of $m$ and the sum of $q$ over all test cases do not exceed $2 \\cdot 10^5$ respectively.\n\n### Output\n\nFor each test case, output $q+1$ lines corresponding to the $q+1$ states of the array $b$. Output \"YA\" if the slide show is good, and \"TIDAK\" otherwise.\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yA\", \"Ya\", \"ya\", and \"YA\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n4 2 2\n\n1 2 3 4\n\n1 1\n\n1 2\n\n1 1\n\n3 6 2\n\n1 2 3\n\n1 1 2 3 3 2\n\n3 3\n\n2 2\n\n4 6 2\n\n3 1 4 2\n\n3 1 1 2 3 4\n\n3 4\n\n4 2\n\n```\n\n#### Output #1\n\n```\nYA\nTIDAK\nYA\nYA\nTIDAK\nYA\nTIDAK\nYA\nYA\n```\n\n### Note\n\nFor the first test case, you do not need to move the members as both slides are presented by member $1$, who is already at the front of the line. After that, set $b_1 := 2$, now slide $1$ must be presented by member $2$ which is impossible as member $1$ will present slide $1$ first. Then, set $b_1 = 1$, the $b$ is the same as the initial $b$, making a good presentation possible.", "cfid": "2021C2"}
{"problem_id": "2053H", "problem_title": "H. Delicate Anti-monotonous Operations", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2053/H", "problem_statement": "I shall be looking for you who would be out of Existence.\n\n— HyuN, [Disorder](https://soundcloud.com/k-sounds-studio/g2r2018-hyun-disorder-feat-yuri)\n\nThere are always many repetitive tasks in life. Iris always dislikes them, so she refuses to repeat them. However, time cannot be turned back; we only have to move forward.\n\nFormally, Iris has an integer sequence $a_1, a_2, \\ldots, a_n$, where each number in the sequence is between $1$ and $w$, inclusive. It is guaranteed that $w \\geq 2$.\n\nIris defines an operation as selecting two numbers $a_i, a_{i+1}$ satisfying $a_i = a_{i+1}$, and then changing them to two arbitrary integers within the range $[1, w]$. Iris does not like equality, so she must guarantee that $a_i \\neq a_{i+1}$ after the operation. Two identical pairs $a_i, a_{i+1}$ can be selected multiple times.\n\nIris wants to know the maximum possible sum of all elements of $a$ after several (possible, zero) operations, as well as the minimum number of operations required to achieve this maximum value.\n\n### Input\n\nEach test contains multiple test cases. The first line contains an integer $t$ ($1 \\leq t \\leq 10^5$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $w$ ($1 \\leq n \\leq 2\\cdot 10^5$, $2 \\leq w \\leq 10^8$) — the length of the array, and the maximum allowed value of the elements.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq w$) — the elements in the array.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case, output two integers — the maximum possible sum of all elements of $a$ and the minimum number of operations required, respectively.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n5 8\n\n1 2 3 4 5\n\n7 5\n\n3 1 2 3 4 1 1\n\n```\n\n#### Output #1\n\n```\n15 0\n34 6\n```\n\n### Note\n\nIn the first test case, no operation can be performed so the answers are $\\sum a_i = 15$ and $0$, respectively.\n\nIn the second test case, the operations can be performed as follows:\n\n\n\n$$[3, 1, 2, 3, 4, \\underline{1, 1}] \\rightarrow [3, 1, 2, 3, \\underline{4, 4}, 5] \\rightarrow [3, 1, 2, \\underline{3, 3}, 5, 5] \\rightarrow [3, 1, \\underline{2, 2}, 5, 5, 5] \\rightarrow [3, \\underline{1, 1}, 5, 5, 5, 5] \\rightarrow [\\underline{3, 3}, 5, 5, 5, 5, 5] \\rightarrow [4, 5, 5, 5, 5, 5, 5]$$\n\nIt can be shown this is optimal, so we should output $\\sum a_i = 34$ and the number of operations, $6$, respectively.", "cfid": "2053H"}
{"problem_id": "2053I2", "problem_title": "I2. Affectionate Arrays (Hard Version)", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2053/I2", "problem_statement": "Note that this statement is different to the version used in the official round. The statement has been corrected to a solvable version. In the official round, all submissions to this problem have been removed.\n\nThis is the hard version of the problem. The difference between the versions is that in this version, you need to compute the sum of value of different arrays. You can hack only if you solved all versions of this problem.\n\nIris treasures an integer array $a_1, a_2, \\ldots, a_n$. She knows this array has an interesting property: the maximum absolute value of all elements is less than or equal to the sum of all elements, that is, $\\max(\\lvert a_i\\rvert) \\leq \\sum a_i$.\n\nIris defines the boredom of an array as its maximum subarray$^{\\text{∗}}$ sum.\n\nIris's birthday is coming, and Victor is going to send her another array $b_1, b_2, \\ldots, b_m$ as a gift. For some seemingly obvious reasons, he decides the array $b_1, b_2, \\ldots, b_m$ should have the following properties.\n\n- $a_1, a_2, \\ldots, a_n$ should be a subsequence$^{\\text{†}}$ of $b_1, b_2, \\ldots, b_m$.\n- The two arrays have the same sum. That is, $\\sum\\limits_{i=1}^n a_i = \\sum\\limits_{i=1}^m b_i$.\n- The boredom of $b_1, b_2, \\ldots, b_m$ is the smallest possible.\n- Among the arrays with the smallest boredom, the length of the array $b$ (i.e., $m$) is the smallest possible. And in this case, Iris will understand his regard as soon as possible!\n\nFor a possible array $b_1, b_2, \\ldots, b_m$ satisfying all the conditions above, Victor defines the value of the array as the number of occurrences of array $a$ as subsequences in array $b$. That is, he counts the number of array $c_1, c_2, \\ldots, c_{n}$ that $1\\le c_1< c_2< \\ldots< c_n\\le m$ and for all integer $i$ that $1\\le i\\le n$, $b_{c_{i}}=a_i$ is satisfied, and let this be the value of array $b$.\n\nEven constrained as above, there are still too many possible gifts. So Victor asks you to calculate the sum of value of all possible arrays $b_1, b_2, \\ldots, b_m$. Since the answer may be large, Victor only needs the number modulo $998\\,244\\,353$. He promises you: if you help him successfully, he will share a bit of Iris's birthday cake with you.\n\n$^{\\text{∗}}$An array $c$ is a subarray of an array $d$ if $c$ can be obtained from $d$ by the deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\n$^{\\text{†}}$A sequence $c$ is a subsequence of a sequence $d$ if $c$ can be obtained from $d$ by the deletion of several (possibly, zero or all) element from arbitrary positions.\n\n### Input\n\nEach test contains multiple test cases. The first line of input contains an integer $t$ ($1 \\leq t \\leq 10^5$) — the number of test cases. The description of test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\leq n \\leq 3\\cdot 10^6$) — the length of the array $a_1, a_2, \\ldots, a_n$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($-10^9 \\leq a_i \\leq 10^9$) — the initial array. It is guaranteed that $\\max(\\lvert a_i\\rvert) \\leq \\sum a_i$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $3\\cdot 10^6$.\n\n### Output\n\nFor each test case, output a single line containing an integer: the sum of values of valid arrays $b_1, b_2, \\ldots, b_m$, modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n4\n\n1 2 3 4\n\n4\n\n2 -3 2 2\n\n4\n\n1 -2 2 1\n\n10\n\n2 -7 6 3 -1 4 2 -5 8 -4\n\n20\n\n4 -2 4 3 -2 1 5 2 3 6 -5 -1 -4 -2 -3 5 -3 1 -4 1\n\n```\n\n#### Output #1\n\n```\n1\n2\n2\n20\n1472\n```\n\n### Note\n\nIn the first test case, $a=[1, 2, 3, 4]$. The only possible array $b$ is $[1, 2, 3, 4]$, and its value is $1$.\n\nIn the second test case, $a=[2, -3, 2, 2]$. The possible arrays $b$ are $[1, 2, -3, 2, -1, 2]$ and $[2, 1, -3, 2, -1, 2]$. Both arrays have value $1$.\n\nIn the third test case, $a=[1, -2, 2, 1]$. The only possible array $b$ is $[1, 1, -2, 2, -1, 1]$. It has value $2$, because we can find arrays $c=[1,3,4,6]$ or $[2,3,4,6]$. That is, the array $a$ occurs twice in $b$, so the answer is $2$.", "cfid": "2053I2"}
{"problem_id": "2053G", "problem_title": "G. Naive String Splits", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2053/G", "problem_statement": "And I will: love the world that you've adored; wish the smile that you've longed for. Your hand in mine as we explore, please take me to tomorrow's shore.\n\n— Faye Wong, [As Wished](https://www.youtube.com/watch?v=ZoJCN0pV7Qs)\n\nCocoly has a string $t$ of length $m$, consisting of lowercase English letters, and he would like to split it into parts. He calls a pair of strings $(x, y)$ beautiful if and only if there exists a sequence of strings $a_1, a_2, \\ldots, a_k$, such that:\n\n- $t = a_1 + a_2 + \\ldots + a_k$, where $+$ denotes string concatenation.\n- For each $1 \\leq i \\leq k$, at least one of the following holds: $a_i = x$, or $a_i = y$.\n\nCocoly has another string $s$ of length $n$, consisting of lowercase English letters. Now, for each $1 \\leq i < n$, Cocoly wants you to determine whether the pair of strings $(s_1s_2 \\ldots s_i, \\, s_{i+1}s_{i+2} \\ldots s_n)$ is beautiful.\n\nNote: since the input and output are large, you may need to optimize them for this problem.\n\nFor example, in C++, it is enough to use the following lines at the start of the main() function:\n\n```\n`int main() {<br/>    std::ios::sync_with_stdio(false);<br/>    std::cin.tie(nullptr); std::cout.tie(nullptr);<br/>}<br/>````\n\n### Input\n\nEach test contains multiple test cases. The first line contains an integer $T$ ($1 \\leq T \\leq 10^5$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($2 \\leq n \\leq m \\leq 5 \\cdot 10^6$) — the lengths of $s$ and the length of $t$.\n\nThe second line of each test case contains a single string $s$ of length $n$, consisting only of lowercase English letters.\n\nThe third line of each test case contains a single string $t$ of length $m$, consisting only of lowercase English letters.\n\nIt is guaranteed that the sum of $m$ over all test cases does not exceed $10^7$.\n\n### Output\n\nFor each test case, output a single binary string $r$ of length $n - 1$: for each $1 \\leq i < n$, if the $i$-th pair is beautiful, $r_i=\\texttt{1}$; otherwise, $r_i=\\texttt{0}$. Do not output spaces.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n3 5\n\naba\n\nababa\n\n4 10\n\nczzz\n\nczzzzzczzz\n\n5 14\n\ndream\n\ndredreamamamam\n\n5 18\n\ntcccc\n\ntcctccccctccctcccc\n\n7 11\n\nabababc\n\nabababababc\n\n7 26\n\naaaaaaa\n\naaaaaaaaaaaaaaaaaaaaaaaaaa\n\n19 29\n\nbbbbbbbbbbbbbbbbbbb\n\nbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n\n```\n\n#### Output #1\n\n```\n11\n011\n0010\n0000\n010100\n111111\n110010001100010011\n```\n\n### Note\n\nIn the first test case, $s = \\tt aba$, $t = \\tt ababa$.\n\n- For $i = 1$: Cocoly can split $t = \\texttt{a} + \\texttt{ba} + \\texttt{ba}$, so the string pair $(\\texttt{a}, \\texttt{ba})$ is beautiful.\n- For $i = 2$: Cocoly can split $t = \\texttt{ab} + \\texttt{ab} + \\texttt{a}$, so the string pair $(\\texttt{ab}, \\texttt{a})$ is beautiful.\n\nIn the second test case, $s = \\tt czzz$, $t = \\tt czzzzzczzz$.\n\n- For $i = 1$: It can be proven that there is no solution to give a partition of $t$ using strings $\\texttt{c}$ and $\\texttt{zzz}$.\n- For $i = 2$: Cocoly can split $t$ into $\\texttt{cz} + \\texttt{zz} + \\texttt{zz} + \\texttt{cz} + \\texttt{zz}$.\n- For $i = 3$: Cocoly can split $t$ into $\\texttt{czz} + \\texttt{z} + \\texttt{z} + \\texttt{z} + \\texttt{czz} + \\texttt{z}$.", "cfid": "2053G"}
{"problem_id": "2048H", "problem_title": "H. Kevin and Strange Operation", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2048/H", "problem_statement": "Kevin is exploring problems related to binary strings in Chinatown. When he was at a loss, a stranger approached him and introduced a peculiar operation:\n\n- Suppose the current binary string is $ t $, with a length of $ \\vert t \\vert $. Choose an integer $ 1 \\leq p \\leq \\vert t \\vert $. For all $ 1 \\leq i < p $, simultaneously perform the operation $ t_i = \\max(t_i, t_{i+1}) $, and then delete $ t_p $.\n\nFor example, suppose the current binary string is 01001, and you choose $ p = 4 $. Perform $ t_i = \\max(t_i, t_{i+1}) $ for $t_1$, $t_2$, and $ t_3 $, transforming the string into 11001, then delete $ t_4 $, resulting in 1101.\n\nKevin finds this strange operation quite interesting. Thus, he wants to ask you: Given a binary string $ s $, how many distinct non-empty binary strings can you obtain through any number of operations (possibly zero)?\n\nSince the answer may be very large, you only need to output the result modulo $998\\,244\\,353$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains a single integer $t$ ($1\\le t \\le 10^4$) — the number of test cases.\n\nFor each test case, the only line contains a binary string $ s $ ($ 1 \\le \\lvert s \\rvert \\le 10^6 $).\n\nIt is guaranteed that the sum of $\\lvert s \\rvert$ over all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case, print a single integer in the only line of the output — the number of distinct non-empty binary strings you can obtain, modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n11001\n\n000110111001100\n\n```\n\n#### Output #1\n\n```\n9\n73\n```\n\n### Note\n\nIn the first test case, all the binary strings you can obtain are: 11001, 1001, 1101, 001, 101, 111, 01, 11, and 1. There are $ 9 $ in total.", "cfid": "2048H"}
{"problem_id": "2048I1", "problem_title": "I1. Kevin and Puzzle (Easy Version)", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2048/I1", "problem_statement": "This is the easy version of the problem. The difference between the versions is that in this version, you need to find any one good array. You can hack only if you solved all versions of this problem.\n\nKevin is visiting the Red Church, and he found a puzzle on the wall.\n\nFor an array $ a $, let $ c(l,r) $ indicate how many distinct numbers are among $ a_l, a_{l+1}, \\ldots, a_r $. In particular, if $ l > r $, define $ c(l,r) = 0 $.\n\nYou are given a string $ s $ of length $ n $ consisting of letters $ \\texttt{L} $ and $ \\texttt{R} $ only. Let a non-negative array $ a $ be called good, if the following conditions hold for $ 1 \\leq i \\leq n $:\n\n- if $s_i=\\verb!L!$, then $c(1,i-1)=a_i$;\n- if $s_i=\\verb!R!$, then $c(i+1,n)=a_i$.\n\nIf there is a good array $a$, print any of the good arrays. Otherwise, report that no such arrays exists.\n\n### Input\n\nEach test contains multiple test cases. The first line contains a single integer $t$ ($1\\le t \\le 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2\\leq n\\leq 2\\cdot 10^5$) — the length of string $s$.\n\nThe second line of each test case contains a string $s$ with a length $n$, containing only English uppercase letters $\\verb!L!$ and $\\verb!R!$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, if a good array exists, print $n$ non-negative integers: a good array $a$. Otherwise, print a single integer $-1$.\n\nIf there are multiple arrays $a$ satisfying the conditions, you can output any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3\n\nLLR\n\n3\n\nRRL\n\n4\n\nRRLR\n\n5\n\nLLRLR\n\n```\n\n#### Output #1\n\n```\n0 1 0\n2 1 2\n-1\n0 1 2 3 0```\n\n### Note\n\nIn the first test case, the array $[0,1,0]$ satisfies the conditions because:\n\n- When $i=1$, $s_i=\\verb!L!$, and $c(1,0)=0$;\n- When $i=2$, $s_i=\\verb!L!$, and $c(1,1)=1$, since there is only one distinct number in $a_1$;\n- When $i=3$, $s_i=\\verb!R!$, and $c(4,3)=0$.\n\nIn the second test case, another suitable answer is $[1,1,1]$.\n\nIn the third test case, it can be proven that there's no array satisfying the conditions.", "cfid": "2048I1"}
{"problem_id": "2048I2", "problem_title": "I2. Kevin and Puzzle (Hard Version)", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2048/I2", "problem_statement": "This is the hard version of the problem. The difference between the versions is that in this version, you need to count the number of good arrays. You can hack only if you solved all versions of this problem.\n\nKevin is visiting the Red Church, and he found a puzzle on the wall.\n\nFor an array $ a $, let $ c(l,r) $ indicate how many distinct numbers are among $ a_l, a_{l+1}, \\ldots, a_r $. In particular, if $ l > r $, define $ c(l,r) = 0 $.\n\nYou are given a string $ s $ of length $ n $ consisting of letters $ \\texttt{L} $ and $ \\texttt{R} $ only. Let a non-negative array $ a $ be called good, if the following conditions hold for $ 1 \\leq i \\leq n $:\n\n- if $s_i=\\verb!L!$, then $c(1,i-1)=a_i$;\n- if $s_i=\\verb!R!$, then $c(i+1,n)=a_i$.\n\nYou need to count the number of good arrays $a$. Since the answer may be large, you only need to output the answer modulo $998\\,244\\,353$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains a single integer $t$ ($1\\le t \\le 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2\\leq n\\leq 2\\cdot 10^5$) — the length of string $s$.\n\nThe second line of each test case contains a string $s$ with a length $n$, containing only English uppercase letters $\\verb!L!$ and $\\verb!R!$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, output the number of good arrays modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3\n\nLLR\n\n3\n\nRRL\n\n4\n\nRRLR\n\n5\n\nLLRLR\n\n```\n\n#### Output #1\n\n```\n1\n2\n0\n1\n```\n\n### Note\n\nAll arrays satisfying the conditions can be found in the easy version of this problem.", "cfid": "2048I2"}
{"problem_id": "2046D", "problem_title": "D. For the Emperor!", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2046/D", "problem_statement": "In Ancient Rome, a plan to defeat the barbarians was developed, but for its implementation, each city must be informed about it.\n\nThe northern part of the Roman Empire consists of $n$ cities connected by $m$ one-way roads. Initially, the $i$-th city has $a_i$ messengers, and each messenger can freely move between cities following the existing roads. A messenger can carry a copy of the plan with him and inform the cities he visits, and can make unlimited copies for other messengers in the city he is currently in.\n\nAt the start, you will produce some number of plans and deliver them to messengers of your choice. Your goal is to make sure that every city is visited by a messenger with a plan. Find the smallest number of the plans you need to produce originally, so that the messengers will deliver them to every city, or determine that it is impossible to do so at all.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 100$). The description of the test cases follows.\n\nThe first line contains two integers $n$ and $m$ ($2 \\le n \\le 200$, $1 \\le m \\le 800$) — the number of cities and roads.\n\nThe second line contains $n$ non-negative integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_{i} \\le n$) — the initial number of messengers in each city.\n\nEach of the following $m$ lines contains two integers $u$ and $v$ ($1 \\le u,v \\le n, u \\ne v$), indicating that there is a one-way road from city $u$ to city $v$. The roads may repeat.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $200$. It is guaranteed that the sum of $m$ over all test cases does not exceed $800$.\n\n### Output\n\nOutput a single line containing a single integer — the smallest number of messengers you need to give a copy of the plan in the beginning, or $-1$ if it is not possible to inform all cities.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n7 6\n\n2 1 0 1 2 3 4\n\n1 2\n\n1 3\n\n2 4\n\n2 5\n\n3 6\n\n3 7\n\n4 4\n\n1 1 1 1\n\n1 2\n\n1 3\n\n2 4\n\n3 4\n\n```\n\n#### Output #1\n\n```\n2\n2\n```", "cfid": "2046D"}
{"problem_id": "2046E2", "problem_title": "E2. Cheops and a Contest (Hard Version)", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2046/E2", "problem_statement": "This is the hard version of the problem. The difference between the versions is that in this version, $m$ is arbitrary. You can hack only if you solved all versions of this problem.\n\nThere is a problem-solving competition in Ancient Egypt with $n$ participants, numbered from $1$ to $n$. Each participant comes from a certain city; the cities are numbered from $1$ to $m$. There is at least one participant from each city.\n\nThe $i$-th participant has strength $a_i$, specialization $s_i$, and wisdom $b_i$, so that $b_i \\ge a_i$. Each problem in the competition will have a difficulty $d$ and a unique topic $t$. The $i$-th participant will solve the problem if\n\n- $a_i \\ge d$, i.e., their strength is not less than the problem's difficulty, or\n- $s_i = t$, and $b_i \\ge d$, i.e., their specialization matches the problem's topic, and their wisdom is not less than the problem's difficulty.\n\nCheops wants to choose the problems in such a way that each participant from city $i$ will solve strictly more problems than each participant from city $j$, for all $i < j$.\n\nPlease find a set of at most $5n$ problems, where the topics of all problems are distinct, so that Cheops' will is satisfied, or state that it is impossible.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $T$ ($1 \\le T \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$, $m$ ($2 \\le m \\le n \\le 3 \\cdot {10}^5$) — the number of participants and the number of cities.\n\nThe following $n$ lines describe the participants. The $i$-th line contains three integers —$a_i$, $b_i$, $s_i$ ($0 \\le a_i, b_i, s_i \\le {10}^9$, $a_i \\le b_i$) — strength, wisdom, and specialization of the $i$-th participant, respectively.\n\nThe next $m$ lines describe the cities. In the $i$-th line, the first number is an integer $k_i$ ($1 \\le k_i \\le n$) — the number of participants from the $i$-th city. It is followed by $k_i$ integers $q_{i, 1}, q_{i, 2}, \\ldots, q_{i, k_i}$ — ($1 \\le q_{i, j} \\le n$, $1 \\le j \\le k_i$) — the indices of the participants from this city. It is guaranteed that each participant is mentioned exactly once.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $3 \\cdot 10^5$.\n\n### Output\n\nFor each test case, if there exists a set of problems that satisfies Cheops' conditions, then in the first line output a single integer $p$ ($1 \\le p \\le 5n$) — the number of problems in your solution.\n\nThen output $p$ lines, each containing two integers $d$ and $t$ ($0 \\le d, t \\le {10}^9$) — the difficulty and topic of the respective problem. The topics must be distinct.\n\nIf there is no set of problems that meets Cheops' wishes, print $-1$ instead.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n5 2\n\n5 7 1\n\n6 7 2\n\n3 9 2\n\n5 10 3\n\n4 4 1\n\n2 1 2\n\n3 3 4 5\n\n2 2\n\n1 2 1\n\n1 2 1\n\n1 2\n\n1 1\n\n```\n\n#### Output #1\n\n```\n7\n6 4\n6 5\n5 6\n5 7\n4 8\n4 9\n7 1\n-1\n```", "cfid": "2046E2"}
{"problem_id": "2046F2", "problem_title": "F2. Yandex Cuneiform (Hard Version)", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2046/F2", "problem_statement": "This is the hard version of the problem. The difference between the versions is that in this version, there is no restriction on the number of question marks. You can hack only if you solved all versions of this problem.\n\nFor a long time, no one could decipher Sumerian cuneiform. However, it has finally succumbed to pressure! Today, you have the chance to decipher Yandex cuneiform.\n\nYandex cuneiform is defined by the following rules:\n\n1. An empty string is a Yandex cuneiform.\n2. If you insert exactly one copy of each of the three letters 'Y', 'D', and 'X' into a Yandex cuneiform in such a way that no two adjacent letters become equal after the operation, you obtain a Yandex cuneiform.\n3. If a string can't be obtained using the above rules, it is not a Yandex cuneiform.\n\nYou are given a template. A template is a string consisting of the characters 'Y', 'D', 'X', and '?'.\n\nYou need to check whether there exists a way to replace each question mark with 'Y', 'D', or 'X' to obtain a Yandex cuneiform, and if it exists, output any of the matching options, as well as a sequence of insertion operations to obtain the resulting cuneiform.\n\nIn this version of the problem, the number of question marks in the template can be arbitrary.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 5 \\cdot 10^4$). The description of the test cases follows.\n\nEach test case consists of a single line containing a template of length $n$ ($3 \\leq n < 2 \\cdot 10^5$, $n \\bmod 3 = 0$), consisting only of characters 'Y', 'D', 'X', and '?'.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single line containing 'NO' if it is not possible to obtain a cuneiform from the given template.\n\nOtherwise, output 'YES' on the first line, and on the second line, any obtainable cuneiform. After that, you need to output the sequence of operations that leads to the cuneiform you printed.\n\nA sequence of operations is described by $\\frac{n}{3}$ triples of pairs. A pair has the form c p, where $c$ is one of the letters 'Y', 'D', or 'X', and $p$ is the position at which the letter $c$ should be inserted. The insertion position is the number of letters to skip from the beginning of the string for the insertion. For example, after inserting the character 'D' into the string \"YDX\" with $p=3$, the result is \"YDXD\", and with $p=0$, it is \"DYDX\". Note that the index cannot exceed the current length of the string.\n\nThe operations are applied from top to bottom, left to right. After inserting each triple to the string, there should be no two adjacent identical characters.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n???\n\nY??D?X\n\n???\n\nD??DXYXYX\n\n```\n\n#### Output #1\n\n```\nYES\nYDX\nX 0 D 0 Y 0\nYES\nYDXDYX\nX 0 Y 0 D 1\nX 2 D 3 Y 4\nYES\nYDX\nY 0 D 1 X 2\nNO\n```\n\n### Note\n\nIn the second example, the string is transformed like this: $\"\" \\to \\mathtt{YDX} \\to \\mathtt{YDXDYX}$.", "cfid": "2046F2"}
{"problem_id": "2046F1", "problem_title": "F1. Yandex Cuneiform (Easy Version)", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2046/F1", "problem_statement": "This is the easy version of the problem. The difference between the versions is that in this version, there are no question marks. You can hack only if you solved all versions of this problem.\n\nFor a long time, no one could decipher Sumerian cuneiform. However, it has finally succumbed to pressure! Today, you have the chance to decipher Yandex cuneiform.\n\nYandex cuneiform is defined by the following rules:\n\n1. An empty string is a Yandex cuneiform.\n2. If you insert exactly one copy of each of the three letters 'Y', 'D', and 'X' into a Yandex cuneiform in such a way that no two adjacent letters become equal after the operation, you obtain a Yandex cuneiform.\n3. If a string can't be obtained using the above rules, it is not a Yandex cuneiform.\n\nYou are given a template. A template is a string consisting of the characters 'Y', 'D', 'X', and '?'.\n\nYou need to check whether there exists a way to replace each question mark with 'Y', 'D', or 'X' to obtain a Yandex cuneiform, and if it exists, output any of the matching options, as well as a sequence of insertion operations to obtain the resulting cuneiform.\n\nIn this version of the problem, there are no question marks in the template.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 5 \\cdot 10^4$). The description of the test cases follows.\n\nEach test case consists of a single line containing a template of length $n$ ($3 \\leq n < 2 \\cdot 10^5$, $n \\bmod 3 = 0$), consisting only of characters 'Y', 'D', 'X'.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single line containing 'NO' if it is not possible to obtain a cuneiform from the given template.\n\nOtherwise, output 'YES' on the first line, and on the second line, any obtainable cuneiform. After that, you need to output the sequence of operations that leads to the cuneiform you printed.\n\nA sequence of operations is described by $\\frac{n}{3}$ triples of pairs. A pair has the form c p, where $c$ is one of the letters 'Y', 'D', or 'X', and $p$ is the position at which the letter $c$ should be inserted. The insertion position is the number of letters to skip from the beginning of the string for the insertion. For example, after inserting the character 'D' into the string \"YDX\" with $p=3$, the result is \"YDXD\", and with $p=0$, it is \"DYDX\". Note that the index cannot exceed the current length of the string.\n\nThe operations are applied from top to bottom, left to right. After inserting each triple to the string, there should be no two adjacent identical characters.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\nYDX\n\nYDXDYX\n\nYDX\n\nDYYDXYXYX\n\n```\n\n#### Output #1\n\n```\nYES\nYDX\nX 0 D 0 Y 0\nYES\nYDXDYX\nX 0 Y 0 D 1\nX 2 D 3 Y 4\nYES\nYDX\nY 0 D 1 X 2\nNO```\n\n### Note\n\nIn the second example, the string is transformed like this: $\"\" \\to \\mathtt{YDX} \\to \\mathtt{YDXDYX}$.", "cfid": "2046F1"}
{"problem_id": "2034H", "problem_title": "H. Rayan vs. Rayaneh", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2034/H", "problem_statement": "Rayan makes his final efforts to win Reyhaneh's heart by claiming he is stronger than Rayaneh (i.e., computer in Persian). To test this, Reyhaneh asks [Khwarizmi](https://en.wikipedia.org/wiki/Al-Khwarizmi) for help. Khwarizmi explains that a set is integer linearly independent if no element in the set can be written as an integer linear combination of the others. Rayan is given a set of integers each time and must identify one of the largest possible integer linearly independent subsets.\n\nNote that a single element is always considered an integer linearly independent subset.\n\nAn integer linearly combination of $a_1, \\ldots, a_k$ is any sum of the form $c_1 \\cdot a_1 + c_2 \\cdot a_2 + \\ldots + c_k \\cdot a_k$ where $c_1, c_2, \\ldots, c_k$ are integers (which may be zero, positive, or negative).\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 100$), the number of test cases.\n\nThe first line of each test case contains an integer $n$ ($1 \\leq n \\leq 10^5$), the size of the set. The second line contains $n$ distinct integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^5$).\n\nThe sum of $n$ over all test cases does not exceed $3 \\cdot 10^6$.\n\n### Output\n\nIn the first line of each test case print the size of the largest integer linearly independent subset.\n\nIn the next line, print one such subset in any order. If there are multiple valid subsets, print any one of them.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n5\n\n2 4 6 8 10\n\n5\n\n12 15 21 30 35\n\n3\n\n2 3 6\n\n```\n\n#### Output #1\n\n```\n2\n4 6\n3\n35 21 30\n2\n2 3\n```\n\n### Note\n\nIn example 1, $\\{4, 6\\}$ is an integer linearly independent subset. It can be proven that there is no integer linearly independent subset with at least $3$ elements.\n\nIn example 2, $\\{35, 21, 30\\}$ is an integer linearly independent subset because no integer linear combination of any two elements can create the third. There is no integer linearly independent subset with at least $4$ elements.\n\nIn example 3, $\\{2, 3, 6\\}$ is not an integer linearly independent subset since $6$ can be written as $6 \\cdot 2 + (-2) \\cdot 3$, which is an integer linear combination of $\\{2, 3\\}$.", "cfid": "2034H"}
{"problem_id": "2034G1", "problem_title": "G1. Simurgh's Watch (Easy Version)", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2034/G1", "problem_statement": "The only difference between the two versions of the problem is whether overlaps are considered at all points or only at integer points.\n\nThe legendary [Simurgh](https://www.eavartravel.com/blog/2023/11/3/140727/simurgh/), a mythical bird, is responsible for keeping watch over vast lands, and for this purpose, she has enlisted $n$ vigilant warriors. Each warrior is alert during a specific time segment $[l_i, r_i]$, where $l_i$ is the start time (included) and $r_i$ is the end time (included), both positive integers.\n\n![](https://espresso.codeforces.com/e448e919c3f03a9c212cd45c8dcd8e2bb0be579c.webp)\n\nOne of Simurgh's trusted advisors, [Zal](https://asia-archive.si.edu/learn/shahnama/zal-and-the-simurgh/), is concerned that if multiple warriors are stationed at the same time and all wear the same color, the distinction between them might be lost, causing confusion in the watch. To prevent this, whenever multiple warriors are on guard at the same moment (which can be non-integer), there must be at least one color which is worn by exactly one warrior.\n\nSo the task is to determine the minimum number of colors required and assign a color $c_i$ to each warrior's segment $[l_i, r_i]$ such that, for every (real) time $t$ contained in at least one segment, there exists one color which belongs to exactly one segment containing $t$.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nFor each test case:\n\n- The first line contains an integer $n$ ($1 \\leq n \\leq 2 \\cdot 10^5$) — the number of warriors stationed by Simurgh.\n- The next $n$ lines each contain two integers $l_i$ and $r_i$ ($1 \\leq l_i \\leq r_i \\leq 10^9$) — the start and end times of the warrior's watch segment.\n\nThe sum of $n$ across all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case:\n\n- Output the minimum number of colors $k$ needed.\n- Then, output a line of $n$ integers $c_i$ ($1 \\leq c_i \\leq k$), where each $c_i$ is the color assigned to the $i$-th warrior.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n2\n\n1 2\n\n3 4\n\n2\n\n1 2\n\n2 3\n\n3\n\n1 4\n\n2 5\n\n3 6\n\n5\n\n1 4\n\n2 8\n\n3 7\n\n5 10\n\n6 9\n\n5\n\n1 5\n\n2 6\n\n3 7\n\n4 7\n\n6 7\n\n```\n\n#### Output #1\n\n```\n1\n1 1\n2\n1 2\n2\n1 2 1\n3\n2 3 1 2 1\n3\n2 1 3 1 1\n```\n\n### Note\n\nWe can represent each warrior's watch segment as an interval on the X-axis;\n\nIn test case 1, we have two independent intervals, which can be colored with the same color.\n\nIn test case 2, point 2 is common to two intervals, meaning we cannot color them with the same color.\n\nIn test case 3, the intervals can be colored as shown below (intervals are colored with the selected color; areas are colored if this color occurs exactly once at this point in time):\n\n![](https://espresso.codeforces.com/1eeed6dfbcfe689a12402fd0576537c6eb264ba6.png)\n\nIn test case 4, the intervals can be colored as shown below:\n\n![](https://espresso.codeforces.com/02b07d5906fa80a7ce5d78b298d588ee74fd7901.png)\n\nIn test case 5, the intervals can be colored as shown below. The image on the right demonstrates an example of incorrect coloring for this test case; there is no unique color at the moment $5.5$:\n\n![](https://espresso.codeforces.com/21eeb6213de774e9bd333f733bb2c5f3f256e35c.png)", "cfid": "2034G1"}
{"problem_id": "2034G2", "problem_title": "G2. Simurgh's Watch (Hard Version)", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2034/G2", "problem_statement": "The only difference between the two versions of the problem is whether overlaps are considered at all points or only at integer points.\n\nThe legendary [Simurgh](https://www.eavartravel.com/blog/2023/11/3/140727/simurgh/), a mythical bird, is responsible for keeping watch over vast lands, and for this purpose, she has enlisted $n$ vigilant warriors. Each warrior is alert during a specific time segment $[l_i, r_i]$, where $l_i$ is the start time (included) and $r_i$ is the end time (included), both positive integers.\n\n![](https://espresso.codeforces.com/e448e919c3f03a9c212cd45c8dcd8e2bb0be579c.webp)\n\nOne of Simurgh's trusted advisors, [Zal](https://asia-archive.si.edu/learn/shahnama/zal-and-the-simurgh/), is concerned that if multiple warriors are stationed at the same time and all wear the same color, the distinction between them might be lost, causing confusion in the watch. To prevent this, whenever multiple warriors are on guard at the same integer moment, there must be at least one color which is worn by exactly one warrior.\n\nSo the task is to determine the minimum number of colors required and assign a color $c_i$ to each warrior's segment $[l_i, r_i]$ such that, for every (integer) time $t$ contained in at least one segment, there exists one color which belongs to exactly one segment containing $t$.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nFor each test case:\n\n- The first line contains an integer $n$ ($1 \\leq n \\leq 2 \\cdot 10^5$) — the number of warriors stationed by Simurgh.\n- The next $n$ lines each contain two integers $l_i$ and $r_i$ ($1 \\leq l_i \\leq r_i \\leq 10^9$) — the start and end times of the warrior's watch segment.\n\nThe sum of $n$ across all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case:\n\n- Output the minimum number of colors $k$ needed.\n- Then, output a line of $n$ integers $c_i$ ($1 \\leq c_i \\leq k$), where each $c_i$ is the color assigned to the $i$-th warrior.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n5\n\n1 4\n\n2 8\n\n3 7\n\n5 10\n\n6 9\n\n5\n\n1 5\n\n2 6\n\n3 7\n\n4 7\n\n6 7\n\n5\n\n4 9\n\n8 17\n\n2 15\n\n12 19\n\n6 13\n\n```\n\n#### Output #1\n\n```\n2\n1 2 2 1 2\n2\n1 2 2 2 1\n3\n1 1 2 3 1\n```\n\n### Note\n\nWe can represent each warrior's watch segment as an interval on the X-axis;\n\nIn test case 1, the intervals can be colored as shown below (intervals are colored with the selected color; areas are colored if this color occurs exactly once at this point in time):\n\n![](https://espresso.codeforces.com/80b63ec750df7a5ab4b27f062adbfc97cf959e1f.png)\n\nIn test case 2, the intervals can be colored as shown below:\n\n![](https://espresso.codeforces.com/95b4a26427875e70e36b805f77a4b0b38af8c984.png)\n\nIn test case 3, the intervals can be colored as shown below:\n\n![](https://espresso.codeforces.com/6699aab3b108808e3576916130d839f91a86c1f7.png)", "cfid": "2034G2"}
{"problem_id": "2039F2", "problem_title": "F2. Shohag Loves Counting (Hard Version)", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2039/F2", "problem_statement": "This is the hard version of the problem. The only differences between the two versions of this problem are the constraints on $t$, $m$, and the sum of $m$. You can only make hacks if both versions of the problem are solved.\n\nFor an integer array $a$ of length $n$, define $f(k)$ as the [greatest common divisor (GCD)](https://en.wikipedia.org/wiki/Greatest_common_divisor) of the maximum values of all subarrays$^{\\text{∗}}$ of length $k$. For example, if the array is $[2, 1, 4, 6, 2]$, then $f(3) = \\operatorname{gcd}(\\operatorname{max}([2, 1, 4]), \\operatorname{max}([1, 4, 6]), \\operatorname{max}([4, 6, 2])) = \\operatorname{gcd}(4, 6, 6) = 2$.\n\nAn array is good if $f(i) \\neq f(j)$ is satisfied over all pairs $1 \\le i \\lt j \\le n$.\n\nShohag has an integer $m$. Help him count the number, modulo $998\\,244\\,353$, of non-empty good arrays of arbitrary length such that each element of the array is an integer from $1$ to $m$.\n\n$^{\\text{∗}}$An array $d$ is a subarray of an array $c$ if $d$ can be obtained from $c$ by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 3 \\cdot 10^5$) — the number of test cases.\n\nThe first and only line of each test case contains an integer $m$ ($1 \\le m \\le 10^6$).\n\nNote that there is no limit on the sum of $m$ over all test cases.\n\n### Output\n\nFor each test case, output an integer — the number of valid arrays modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2\n\n5\n\n9\n\n```\n\n#### Output #1\n\n```\n4\n29\n165\n```\n\n### Note\n\nIn the first test case, the valid arrays are $[1]$, $[1, 2]$, $[2]$, and $[2, 1]$.\n\nIn the second test case, there are a total of $29$ valid arrays. In particular, the array $[2, 1, 4]$ with length $n = 3$ is valid because all elements are from $1$ to $m = 5$ and $f(1)$, $f(2)$ and $f(n = 3)$ all are distinct:\n\n- $f(1) = \\operatorname{gcd}(\\operatorname{max}([2]), \\operatorname{max}([1]), \\operatorname{max}([4])) = \\operatorname{gcd}(2, 1, 4) = 1.$\n- $f(2) = \\operatorname{gcd}(\\operatorname{max}([2, 1]), \\operatorname{max}([1, 4])) = \\operatorname{gcd}(2, 4) = 2.$\n- $f(3) = \\operatorname{gcd}(\\operatorname{max}([2, 1, 4])) = \\operatorname{gcd}(4) = 4.$", "cfid": "2039F2"}
{"problem_id": "2039H2", "problem_title": "H2. Cool Swap Walk (Hard Version)", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2039/H2", "problem_statement": "This is the hard version of the problem. The only difference is the maximum number of operations you can perform. You can only make hacks if both versions are solved.\n\nYou are given an array $a$ of size $n$.\n\nA cool swap walk is the following process:\n\n- In an $n \\times n$ grid, we note the cells in row $i$ and column $j$ as $(i, j)$. You need to walk from $(1,1)$ to $(n,n)$, taking only steps to the right or down.\n- Formally, if you are in $(x,y)$ currently, you can step to either $(x+1,y)$ or $(x,y+1)$, but you can not step beyond the boundaries of the grid.\n- When you step in $(i,j)$, you must swap $a_i$ and $a_j$ when $i \\neq j$.\n\nYou can perform at most $n+4$ cool swap walks. Sort the array $a_1, a_2, \\ldots, a_n$ in non-decreasing order. We can show that it's always possible to do so.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains an integer $n$ ($2 \\leq n \\leq 500$) — the size of the array.\n\nThe second line of each test case contains $n$ integers $a_1,a_2,\\ldots ,a_n$ ($1 \\le a_i \\le n$) — the elements of the array.\n\nIt is guaranteed that the sum of $n^2$ over all test cases does not exceed $2.5 \\cdot 10^5$.\n\n### Output\n\nFor each test case, your output should consist of several lines:\n\n- The first line contains an integer $k$ ($0 \\leq k \\leq n+4$), representing the number of cool swap walks you perform.\n- Each of the next $k$ lines contains a string $s$ of length $2n-2$ consisting only of R and D, representing the path (letters are case sensitive). For all $1 \\le i \\le 2n-2$, if $s_i=$ R, you walk right in the $i$-th step, otherwise you walk down in the $i$-th step.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2\n\n1 2\n\n3\n\n2 1 3\n\n4\n\n3 2 3 4\n\n```\n\n#### Output #1\n\n```\n0\n2\nRRDD\nDRDR\n3\nRRDRDD\nDRDDRR\nDDRRRD\n```\n\n### Note\n\nIn the first test case, the array $a$ is already non-decreasing, so you don't need to perform any walk.\n\nIn the second test case, $a=[2,1,3]$ initially.\n\nIn the first walk:\n\n- In the $1$-st step, you step right to $(1,2)$. Then, $a=[1,2,3]$. Note that although the array $a$ is already non-decreasing, you can not stop until you reach $(n,n)$.\n\n- In the $2$-nd step, you step right to $(1,3)$. Then, $a=[3,2,1]$.\n\n- In the $3$-rd step, you step down to $(2,3)$. Then, $a=[3,1,2]$.\n\n- In the $4$-th step, you step down to $(3,3)$. Then, $a=[3,1,2]$.\n\nIn the second walk:\n\n- In the $1$-st step, you step down to $(2,1)$. Then, $a=[1,3,2]$.\n\n- In the $2$-nd step, you step right to $(2,2)$. Then, $a=[1,3,2]$.\n\n- In the $3$-rd step, you step down to $(3,2)$. Then, $a=[1,2,3]$.\n\n- In the $4$-th step, you step down to $(3,3)$. Then, $a=[1,2,3]$.\n\nAfter the two cool swap walks above, we get $a=[1,2,3]$, which is non-decreasing.", "cfid": "2039H2"}
{"problem_id": "2039H1", "problem_title": "H1. Cool Swap Walk (Easy Version)", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2039/H1", "problem_statement": "This is the easy version of the problem. The only difference is the maximum number of operations you can perform. You can only make hacks if both versions are solved.\n\nYou are given an array $a$ of size $n$.\n\nA cool swap walk is the following process:\n\n- In an $n \\times n$ grid, we note the cells in row $i$ and column $j$ as $(i, j)$. You need to walk from $(1,1)$ to $(n,n)$, taking only steps to the right or down.\n- Formally, if you are in $(x,y)$ currently, you can step to either $(x+1,y)$ or $(x,y+1)$, but you can not step beyond the boundaries of the grid.\n- When you step in $(i,j)$, you must swap $a_i$ and $a_j$ when $i \\neq j$.\n\nYou can perform at most $2n+4$ cool swap walks. Sort the array $a_1, a_2, \\ldots, a_n$ in non-decreasing order. We can show that it's always possible to do so.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains an integer $n$ ($2 \\leq n \\leq 500$) — the size of the array.\n\nThe second line of each test case contains $n$ integers $a_1,a_2,\\ldots ,a_n$ ($1 \\le a_i \\le n$) — the elements of the array.\n\nIt is guaranteed that the sum of $n^2$ over all test cases does not exceed $2.5 \\cdot 10^5$.\n\n### Output\n\nFor each test case, your output should consist of several lines:\n\n- The first line contains an integer $k$ ($0 \\leq k \\leq 2n+4$), representing the number of cool swap walks you perform.\n- Each of the next $k$ lines contains a string $s$ of length $2n-2$ consisting only of R and D, representing the path (letters are case sensitive). For all $1 \\le i \\le 2n-2$, if $s_i=$ R, you walk right in the $i$-th step, otherwise you walk down in the $i$-th step.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2\n\n1 2\n\n3\n\n2 1 3\n\n4\n\n3 2 3 4\n\n```\n\n#### Output #1\n\n```\n0\n2\nRRDD\nDRDR\n3\nRRDRDD\nDRDDRR\nDDRRRD\n```\n\n### Note\n\nIn the first test case, the array $a$ is already non-decreasing, so you don't need to perform any walk.\n\nIn the second test case, $a=[2,1,3]$ initially.\n\nIn the first walk:\n\n- In the $1$-st step, you step right to $(1,2)$. Then, $a=[1,2,3]$. Note that although the array $a$ is already non-decreasing, you can not stop until you reach $(n,n)$.\n\n- In the $2$-nd step, you step right to $(1,3)$. Then, $a=[3,2,1]$.\n\n- In the $3$-rd step, you step down to $(2,3)$. Then, $a=[3,1,2]$.\n\n- In the $4$-th step, you step down to $(3,3)$. Then, $a=[3,1,2]$.\n\nIn the second walk:\n\n- In the $1$-st step, you step down to $(2,1)$. Then, $a=[1,3,2]$.\n\n- In the $2$-nd step, you step right to $(2,2)$. Then, $a=[1,3,2]$.\n\n- In the $3$-rd step, you step down to $(3,2)$. Then, $a=[1,2,3]$.\n\n- In the $4$-th step, you step down to $(3,3)$. Then, $a=[1,2,3]$.\n\nAfter the two cool swap walks above, we get $a=[1,2,3]$, which is non-decreasing.", "cfid": "2039H1"}
{"problem_id": "2039G", "problem_title": "G. Shohag Loves Pebae", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2039/G", "problem_statement": "Shohag has a tree with $n$ nodes.\n\nPebae has an integer $m$. She wants to assign each node a value — an integer from $1$ to $m$. So she asks Shohag to count the number, modulo $998\\,244\\,353$, of assignments such that following conditions are satisfied:\n\n- For each pair $1 \\le u \\lt v \\le n$, the [least common multiple (LCM)](https://en.wikipedia.org/wiki/Least_common_multiple) of the values of the nodes in the unique simple path from $u$ to $v$ is not divisible by the number of nodes in the path.\n- The [greatest common divisor (GCD)](https://en.wikipedia.org/wiki/Greatest_common_divisor) of the values of all nodes from $1$ to $n$ is $1$.\n\nBut this problem is too hard for Shohag to solve. As Shohag loves Pebae, he has to solve the problem. Please save Shohag!\n\n### Input\n\nThe first line contains two space-separated integers $n$ and $m$ ($2 \\le n \\le 10^6$, $1 \\le m \\le 10^{9}$).\n\nEach of the next $n - 1$ lines contains two integers $u$ and $v$ ($1 \\le u, v \\le n$) indicating there is an edge between vertices $u$ and $v$. It is guaranteed that the given edges form a tree.\n\n### Output\n\nPrint a single integer — the number of valid ways to assign each vertex a value, modulo $998\\,244\\,353$.\n\n### Examples\n\n#### Input #1\n\n```\n\n6 6\n\n1 2\n\n2 3\n\n3 4\n\n4 5\n\n3 6\n\n```\n\n#### Output #1\n\n```\n2\n```\n\n#### Input #2\n\n```\n\n2 5\n\n1 2\n\n```\n\n#### Output #2\n\n```\n7\n```\n\n#### Input #3\n\n```\n\n12 69\n\n3 5\n\n1 4\n\n2 3\n\n4 5\n\n5 6\n\n8 9\n\n7 3\n\n4 8\n\n9 10\n\n1 11\n\n12 1\n\n```\n\n#### Output #3\n\n```\n444144548\n```\n\n### Note\n\nIn the first test case, the valid assignments are $[1, 1, 1, 1, 1, 1]$ and $[1, 1, 1, 1, 1, 5]$.\n\nIn the second test case, the valid assignments are $[1, 1]$, $[1, 3]$, $[1, 5]$, $[3, 1]$, $[3, 5]$, $[5, 1]$ and $[5, 3]$.", "cfid": "2039G"}
{"problem_id": "2029I", "problem_title": "I. Variance Challenge", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2029/I", "problem_statement": "Kevin has recently learned the definition of variance. For an array $a$ of length $n$, the variance of $a$ is defined as follows:\n\n- Let $x=\\dfrac{1}{n}\\displaystyle\\sum_{i=1}^n a_i$, i.e., $x$ is the mean of the array $a$;\n- Then, the variance of $a$ is \n\n$$ V(a)=\\frac{1}{n}\\sum_{i=1}^n(a_i-x)^2. $$\n\nNow, Kevin gives you an array $a$ consisting of $n$ integers, as well as an integer $k$. You can perform the following operation on $a$:\n\n- Select an interval $[l,r]$ ($1\\le l\\le r\\le n$), then for each $l\\le i\\le r$, increase $a_i$ by $k$.\n\nFor each $1\\le p\\le m$, you have to find the minimum possible variance of $a$ after exactly $p$ operations are performed, independently for each $p$.\n\nFor simplicity, you only need to output the answers multiplied by $n^2$. It can be proven that the results are always integers.\n\n### Input\n\nEach test contains multiple test cases. The first line of the input contains a single integer $t$ ($1\\le t\\le 100$) — the number of test cases. The description of test cases follows.\n\nThe first line of each test case contains three integers $n$, $m$, and $k$ ($1\\le n,m\\le 5000$, $\\color{red}{n\\cdot m\\le 2\\cdot 10^4}$, $1\\le k\\le 10^5$) — the length of the array $a$, the maximum number of operations, and the number you add to $a_i$ each time, respectively.\n\nThe second line contains $n$ integers $a_1,a_2,\\ldots, a_n$ ($1\\le a_i\\le 10^5$) — the elements of the array $a$.\n\nIt is guaranteed that the sum of $n\\cdot m$ over all tests does not exceed $2\\cdot 10^4$.\n\n### Output\n\nFor each test case, output $m$ integers in a single line, the $p$-th integer denoting the minimum possible variance of $a$ when exactly $p$ operations are performed, multiplied by $n^2$.\n\n### Example\n\n#### Input #1\n\n```\n\n9\n\n3 2 1\n\n1 2 2\n\n3 2 2\n\n1 2 2\n\n10 2 1\n\n10 1 1 1 1 10 1 1 1 1\n\n6 8 2\n\n1 1 4 5 1 3\n\n8 8 7\n\n20 43 24 2 4 3 20 43\n\n8 8 3\n\n20 43 24 2 4 3 20 43\n\n10 12 1\n\n5 3 3 5 4 1 8 1 1 1\n\n13 10 100000\n\n1 2 3 4 5 6 7 8 9 10 11 5 4\n\n10 5 10000\n\n2308 9982 4435 3310 100000 9 7 8100 1919 100000\n\n```\n\n#### Output #1\n\n```\n0 0\n2 2\n1161 1024\n53 21 21 5 5 5 5 5\n10608 6912 4448 3104 1991 1312 535 304\n13248 11184 9375 7815 6447 5319 4383 3687\n385 316 269 224 181 156 124 101 80 56 41 29\n1486 1486 1486 1486 1486 1486 1486 1486 1486 1486\n134618047140 119919447140 107020847140 93922247140 82623647140\n```\n\n### Note\n\nIn the first test case:\n\n- For $p = 1$, you can perform the operation on $[1, 1]$, changing $a$ from $[1, 2, 2]$ to $[2, 2, 2]$. Since all of the elements are equal, the variance is equal to $0$.\n- For $p = 2$, you can perform the operation on $[1, 3]$ and then $[1, 1]$, changing $a$ from $[1, 2, 2]$ to $[2, 3, 3]$ to $[3, 3, 3]$. Since all of the elements are equal, the variance is equal to $0$.\n\nIn the second test case, some possible optimal choices are:\n\n- $p=1$: $[\\underline{1,}\\,2,2]\\to [3,2,2]$;\n- $p=2$: $[1,\\underline{2,2}] \\to [\\underline{1,}\\,4,4] \\to [3,4,4]$.\n\nIn the third test case, some possible optimal choices are:\n\n- $p=1$: $[10,\\underline{1,1,1,1,10,1,1,1,1}]\\to[10,2,2,2,2,11,2,2,2,2]$;\n- $p=2$: $[10,1,1,1,1,10,\\underline{1,1,1,1}] \\to [10,\\underline{1,1,1,1},10,2,2,2,2] \\to [10,2,2,2,2,10,2,2,2,2]$.\n\nIn the eighth test case, the optimal choice for all $p$ is to perform the operation on the whole array $p$ times.", "cfid": "2029I"}
{"problem_id": "2029H", "problem_title": "H. Message Spread", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2029/H", "problem_statement": "Given is an undirected graph with $n$ vertices and $m$ edges. Each edge connects two vertices $(u, v)$ and has a probability of $\\frac{p}{q}$ of appearing each day.\n\nInitially, vertex $1$ has a message. At the end of the day, a vertex has a message if and only if itself or at least one of the vertices adjacent to it had the message the day before. Note that each day, each edge chooses its appearance independently.\n\nCalculate the expected number of days before all the vertices have the message, modulo $998\\,244\\,353$.\n\n### Input\n\nThe first line contains two integers $n$ and $m$ ($1\\leq n\\leq 21$, $n-1\\leq m\\leq\\frac{n(n-1)}{2}$).\n\nThen $m$ lines follow, each containing four integers $u$, $v$, $p$, and $q$ ($1\\leq u\\neq v\\leq n$, $1\\leq p<q<998\\,244\\,353$, $\\gcd(p,q)=1$) — there is an undirected edge between $u$ and $v$, and it has a probability of appearance of $\\frac{p}{q}$ each day.\n\nIt is guaranteed that there are no self-loops or multiple-edges in the graph and that the graph is connected if all of the edges appear.\n\nAdditional constraint in the input: Let $g\\_{i,j}$ be the probability of appearance of the edge between $i$ and $j$ ($g\\_{i,j}=0$ if there is no edge between $i$ and $j$). It is guaranteed that for any $S\\\\subseteq\\\\{1,2,\\\\ldots,n\\\\}$ ($\\|S\\|\\\\ge 1$), \n\n$$ \\prod_{i\\in S}\\left(\\prod_{j\\in\\{1,2,\\ldots,n\\}\\setminus S}(1-g_{i,j})\\right)\\not\\equiv1\\pmod{998\\,244\\,353}. $$\n\nOutput\n\nPrint a single integer in the only line of the output — the expected number of days, modulo $998\\,244\\,353$.\n\nFormally, let $M = 998\\,244\\,353$. It can be shown that the exact answer can be expressed as an irreducible fraction $\\frac{p}{q}$, where $p$ and $q$ are integers and $q \\not \\equiv 0 \\pmod{M}$. Output the integer equal to $p \\cdot q^{-1} \\bmod M$. In other words, output such an integer $x$ that $0 \\le x < M$ and $x \\cdot q \\equiv p \\pmod{M}$.\n\n### Examples\n\n#### Input #1\n\n```\n\n2 1\n\n1 2 1 10\n\n```\n\n#### Output #1\n\n```\n10```\n\n#### Input #2\n\n```\n\n3 3\n\n1 2 1 2\n\n1 3 1 2\n\n2 3 1 2\n\n```\n\n#### Output #2\n\n```\n887328316```\n\n#### Input #3\n\n```\n\n1 0\n\n```\n\n#### Output #3\n\n```\n0```\n\n#### Input #4\n\n```\n\n5 8\n\n1 2 1 11\n\n1 3 2 11\n\n1 4 3 11\n\n1 5 4 11\n\n2 4 5 11\n\n2 5 6 11\n\n3 4 7 11\n\n4 5 8 11\n\n```\n\n#### Output #4\n\n```\n469993557```\n\n#### Input #5\n\n```\n\n21 22\n\n1 2 3 4\n\n2 3 4 5\n\n3 4 5 6\n\n5 6 7 8\n\n6 7 8 9\n\n7 8 9 10\n\n8 9 2 3\n\n9 10 3 4\n\n10 11 4 5\n\n11 12 5 6\n\n12 13 6 7\n\n13 14 7 8\n\n14 15 8 9\n\n15 16 9 10\n\n16 17 2 3\n\n17 18 3 4\n\n18 19 4 5\n\n19 20 5 6\n\n20 21 6 7\n\n1 10 100 1001\n\n15 4 147 220\n\n4 11 1 998244352\n\n```\n\n#### Output #5\n\n```\n299529765```\n\n### Note\n\nIn the first test, the answer is equal to the expected number of days before the only edge in the graph first appears, and that is $\\frac{1}{0.1}=10$.\n\nIn the second test, the answer is equal to $\\frac{20}{9}$ before it is taken modulo $998\\,244\\,353$.\n\nIn the third test, the only vertex already has the message, so the answer is $0$.", "cfid": "2029H"}
{"problem_id": "2035H", "problem_title": "H. Peak Productivity Forces", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2035/H", "problem_statement": "I'm peakly productive and this is deep.\n\nYou are given two permutations$^{\\text{∗}}$ $a$ and $b$, both of length $n$.\n\nYou can perform the following three-step operation on permutation $a$:\n\n1. Choose an index $i$ ($1 \\le i \\le n$).\n2. Cyclic shift $a_1, a_2, \\ldots, a_{i-1}$ by $1$ to the right. If you had chosen $i = 1$, then this range doesn't exist, and you cyclic shift nothing.\n3. Cyclic shift $a_{i + 1}, a_{i + 2}, \\ldots, a_n$ by $1$ to the right. If you had chosen $i = n$, then this range doesn't exist, and you cyclic shift nothing.\n\nAfter the operation, $a_1,a_2,\\ldots, a_{i-2},a_{i-1},a_i,a_{i + 1}, a_{i + 2},\\ldots,a_{n-1}, a_n$ is transformed into $a_{i-1},a_1,\\ldots,a_{i-3},a_{i-2},a_i,a_n, a_{i + 1},\\ldots,a_{n-2}, a_{n-1}$.\n\nHere are some examples of operations done on the identity permutation $[1,2,3,4,5,6,7]$ of length $7$:\n\n- If we choose $i = 3$, it will become $[2, 1, 3, 7, 4, 5, 6]$.\n- If we choose $i = 1$, it will become $[1, 7, 2, 3, 4, 5, 6]$.\n- If we choose $i = 7$, it will become $[6, 1, 2, 3, 4, 5, 7]$.\n\nNotably, position $i$ is not shifted.\n\nFind a construction using at most $2n$ operations to make $a$ equal to $b$ or print $-1$ if it is impossible. The number of operations does not need to be minimized. It can be shown that if it is possible to make $a$ equal to $b$, it is possible to do this within $2n$ operations.\n\n$^{\\text{∗}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 5 \\cdot 10^4$) — the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 5 \\cdot 10^5$) — the lengths of permutations $a$ and $b$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le n$) — the values of permutation $a$.\n\nThe third line of each test case contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($1 \\le b_i \\le n$) — the values of permutation $b$.\n\nIt is guaranteed that the sum of $n$ over all test cases will not exceed $5 \\cdot 10^5$.\n\n### Output\n\nFor each test case:\n\nIf there is a sequence of operations to transform $a$ into $b$, output a single integer $q$ ($0\\le q\\le 2n$) — the number of operations in the first line and $q$ integers with the $i$-th number representing the index of the $i$-th operation in the second line.\n\nIf there is no sequence of operations, output $-1$ in the only line.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n1\n\n1\n\n1\n\n2\n\n1 2\n\n2 1\n\n3\n\n2 1 3\n\n3 2 1\n\n8\n\n7 8 3 5 4 6 1 2\n\n2 1 6 4 5 3 8 7\n\n```\n\n#### Output #1\n\n```\n0\n\n-1\n2\n1 3\n7\n3 4 5 1 2 1 1\n```\n\n### Note\n\nIn the first case, you can do no operation since $a=b$.\n\nIn the second case, it can be proved $a$ can not be transformed into $b$.\n\nIn the third case, $a$ is transformed into $[2,3,1]$ after the first operation and into $b$ after the second operation.", "cfid": "2035H"}
{"problem_id": "2035G2", "problem_title": "G2. Go Learn! (Hard Version)", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2035/G2", "problem_statement": "The differences between the easy and hard versions are the constraints on $n$ and the sum of $n$. In this version, $n \\leq 3\\cdot 10^5$ and the sum of $n$ does not exceed $10^6$. You can only make hacks if both versions are solved.\n\nWell, well, well, let's see how Bessie is managing her finances. She seems to be in the trenches! Fortunately, she is applying for a job at Moogle to resolve this issue. Moogle interviews require intensive knowledge of obscure algorithms and complex data structures, but Bessie received a tip-off from an LGM on exactly what she has to go learn.\n\nBessie wrote the following code to binary search for a certain element $k$ in a possibly unsorted array $[a_1, a_2,\\ldots,a_n]$ with $n$ elements.\n\n```\n`let l = 1<br/>let h = n<br/><br/>while l < h:<br/>  let m = floor((l + h) / 2)<br/><br/>  if a[m] < k:<br/>    l = m + 1<br/>  else:<br/>    h = m<br/><br/>return l<br/>````\n\nBessie submitted her code to Farmer John's problem with $m$ ($1 \\leq m \\leq n$) tests. The $i$-th test is of the form $(x_i, k_i)$ ($1 \\leq x, k \\leq n$). It is guaranteed all the $x_i$ are distinct and all the $k_i$ are distinct.\n\nTest $i$ is correct if the following hold:\n\n1. The $x_i$-th element in the array is $k_i$.\n2. If Bessie calls the binary search as shown in the above code for $k_i$, it will return $x_i$.\n\nIt might not be possible for all $m$ tests to be correct on the same array, so Farmer John will remove some of them so Bessie can AC. Let $r$ be the minimum of tests removed so that there exists an array $[a_1, a_2,\\ldots,a_n]$ with $1 \\leq a_i \\leq n$ so that all remaining tests are correct.\n\nIn addition to finding $r$, Farmer John wants you to count the number of arrays $[a_1, a_2,\\ldots,a_n]$ with $1 \\leq a_i \\leq n$ such that there exists a way to remove exactly $r$ tests so that all the remaining tests are correct. Since this number may be very large, please find it modulo $998\\,244\\,353$.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\leq m \\leq n \\leq 3 \\cdot 10^5$) denoting the number of the array and the number of tests.\n\nThe following $m$ lines each contain two integers, describing the tests. The $i$-th line contains two integers $x_i$ and $k_i$ ($1 \\leq x_i, k_i \\leq n$) denoting the index and value of the test. It is guaranteed all $x_i$ are distinct and all $k_i$ are distinct.\n\nIt is guaranteed the sum of $n$ across all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case, output two integers, $r$ — the minimum of tests removed so that there exists an array so that all remaining tests are correct, and the number of arrays such that it is possible to remove $r$ tests to make all remaining tests correct modulo $998\\,244\\,353$.\n\n### Examples\n\n#### Input #1\n\n```\n\n2\n\n5 4\n\n1 1\n\n2 2\n\n4 3\n\n5 4\n\n5 4\n\n5 4\n\n2 5\n\n1 2\n\n3 3\n\n```\n\n#### Output #1\n\n```\n0 1\n1 3\n```\n\n#### Input #2\n\n```\n\n3\n\n6 6\n\n1 3\n\n2 5\n\n3 1\n\n4 2\n\n5 4\n\n6 6\n\n30 8\n\n19 22\n\n6 12\n\n12 1\n\n28 27\n\n3 4\n\n14 25\n\n29 14\n\n11 15\n\n300000 1\n\n5 10\n\n```\n\n#### Output #2\n\n```\n3 78\n3 839271911\n0 702730519\n```\n\n### Note\n\nConsider the first example.\n\nIn the first test case, the array $[1,2,2,3,4]$ satisfies all $m$ tests, so the minimum number of tests Bessie has to remove is $0$. Note that this is also the only array that satisfies all $m$ tests.\n\nIn the second test case, the minimum number of tests Bessie has to remove is $1$. The only test Bessie can remove is $(2,5)$. If Bessie removes test $(2,5)$, then the arrays satisfying the remaining $m-1$ tests are $[2,2,3,1,4]$, $[2,2,3,2,4]$, $[2,2,3,3,4]$.", "cfid": "2035G2"}
{"problem_id": "2035G1", "problem_title": "G1. Go Learn! (Easy Version)", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2035/G1", "problem_statement": "The differences between the easy and hard versions are the constraints on $n$ and the sum of $n$. In this version, $n \\leq 3000$ and the sum of $n$ does not exceed $10^4$. You can only make hacks if both versions are solved.\n\nWell, well, well, let's see how Bessie is managing her finances. She seems to be in the trenches! Fortunately, she is applying for a job at Moogle to resolve this issue. Moogle interviews require intensive knowledge of obscure algorithms and complex data structures, but Bessie received a tip-off from an LGM on exactly what she has to go learn.\n\nBessie wrote the following code to binary search for a certain element $k$ in a possibly unsorted array $[a_1, a_2,\\ldots,a_n]$ with $n$ elements.\n\n```\n`let l = 1<br/>let h = n<br/><br/>while l < h:<br/>  let m = floor((l + h) / 2)<br/><br/>  if a[m] < k:<br/>    l = m + 1<br/>  else:<br/>    h = m<br/><br/>return l<br/>````\n\nBessie submitted her code to Farmer John's problem with $m$ ($1 \\leq m \\leq n$) tests. The $i$-th test is of the form $(x_i, k_i)$ ($1 \\leq x, k \\leq n$). It is guaranteed all the $x_i$ are distinct and all the $k_i$ are distinct.\n\nTest $i$ is correct if the following hold:\n\n1. The $x_i$-th element in the array is $k_i$.\n2. If Bessie calls the binary search as shown in the above code for $k_i$, it will return $x_i$.\n\nIt might not be possible for all $m$ tests to be correct on the same array, so Farmer John will remove some of them so Bessie can AC. Let $r$ be the minimum of tests removed so that there exists an array $[a_1, a_2,\\ldots,a_n]$ with $1 \\leq a_i \\leq n$ so that all remaining tests are correct.\n\nIn addition to finding $r$, Farmer John wants you to count the number of arrays $[a_1, a_2,\\ldots,a_n]$ with $1 \\leq a_i \\leq n$ such that there exists a way to remove exactly $r$ tests so that all the remaining tests are correct. Since this number may be very large, please find it modulo $998\\,244\\,353$.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\leq m \\leq n \\leq 3000$) denoting the number of the array and the number of tests.\n\nThe following $m$ lines each contain two integers, describing the tests. The $i$-th line contains two integers $x_i$ and $k_i$ ($1 \\leq x_i, k_i \\leq n$) denoting the index and value of the test. It is guaranteed all $x_i$ are distinct and all $k_i$ are distinct.\n\nIt is guaranteed the sum of $n$ across all test cases does not exceed $10^4$.\n\n### Output\n\nFor each test case, output two integers, $r$ — the minimum of tests removed so that there exists an array so that all remaining tests are correct, and the number of arrays such that it is possible to remove $r$ tests to make all remaining tests correct modulo $998\\,244\\,353$.\n\n### Examples\n\n#### Input #1\n\n```\n\n2\n\n5 4\n\n1 1\n\n2 2\n\n4 3\n\n5 4\n\n5 4\n\n5 4\n\n2 5\n\n1 2\n\n3 3\n\n```\n\n#### Output #1\n\n```\n0 1\n1 3\n```\n\n#### Input #2\n\n```\n\n2\n\n6 6\n\n1 3\n\n2 5\n\n3 1\n\n4 2\n\n5 4\n\n6 6\n\n30 8\n\n19 22\n\n6 12\n\n12 1\n\n28 27\n\n3 4\n\n14 25\n\n29 14\n\n11 15\n\n```\n\n#### Output #2\n\n```\n3 78\n3 839271911\n```\n\n### Note\n\nConsider the first example.\n\nIn the first test case, the array $[1,2,2,3,4]$ satisfies all $m$ tests, so the minimum number of tests Bessie has to remove is $0$. Note that this is also the only array that satisfies all $m$ tests.\n\nIn the second test case, the minimum number of tests Bessie has to remove is $1$. The only test Bessie can remove is $(2,5)$. If Bessie removes test $(2,5)$, then the arrays satisfying the remaining $m-1$ tests are $[2,2,3,1,4]$, $[2,2,3,2,4]$, $[2,2,3,3,4]$.", "cfid": "2035G1"}
{"problem_id": "2027E2", "problem_title": "E2. Bit Game (Hard Version)", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2027/E2", "problem_statement": "This is the hard version of this problem. The only difference is that you need to output the number of choices of games where Bob wins in this version, where the number of stones in each pile are not fixed. You must solve both versions to be able to hack.\n\nAlice and Bob are playing a familiar game where they take turns removing stones from $n$ piles. Initially, there are $x_i$ stones in the $i$-th pile, and it has an associated value $a_i$. A player can take $d$ stones away from the $i$-th pile if and only if both of the following conditions are met:\n\n- $1 \\le d \\le a_i$, and\n- $x \\, \\& \\, d = d$, where $x$ is the current number of stones in the $i$-th pile and $\\&$ denotes the [bitwise AND operation](https://en.wikipedia.org/wiki/Bitwise_operation#AND).\n\nThe player who cannot make a move loses, and Alice goes first.\n\nYou're given the $a_i$ values of each pile, but the number of stones in the $i$-th pile has not been determined yet. For the $i$-th pile, $x_i$ can be any integer between $1$ and $b_i$, inclusive. That is, you can choose an array $x_1, x_2, \\ldots, x_n$ such that the condition $1 \\le x_i \\le b_i$ is satisfied for all piles.\n\nYour task is to count the number of games where Bob wins if both players play optimally. Two games are considered different if the number of stones in any pile is different, i.e., the arrays of $x$ differ in at least one position.\n\nSince the answer can be very large, please output the result modulo $10^9 + 7$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$). The description of the test cases follows.\n\nThe first line of each test case contains $n$ ($1 \\le n \\le 10^4$) — the number of piles.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i < 2^{30}$).\n\nThe third line of each test case contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($1 \\le b_i < 2^{30}$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^4$.\n\n### Output\n\nOutput a single integer, the number of games where Bob wins, modulo $10^9 + 7$.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n3\n\n1 2 3\n\n3 2 2\n\n1\n\n13\n\n45\n\n5\n\n5 4 7 8 6\n\n4 4 5 5 5\n\n4\n\n6 4 8 8\n\n12 13 14 12\n\n3\n\n92856133 46637598 12345678\n\n29384774 73775896 87654321\n\n2\n\n65 12\n\n110 31\n\n4\n\n677810235 275091182 428565855 720629731\n\n74522416 889934149 3394714 230851724\n\n```\n\n#### Output #1\n\n```\n4\n4\n0\n6552\n722019507\n541\n665443265\n```\n\n### Note\n\nIn the first test case, no matter which values of $x_2$ and $x_3$ we choose, the second and third piles will always be chosen exactly once before no more stones can be taken from them. If $x_1 = 2$, then no stones can be taken from it, so Bob will make the last move. If $x_1 = 1$ or $x_1 = 3$, then exactly one move can be made on that pile, so Alice will make the last move. So Bob wins when $x = [2, 1, 1]$ or $x = [2, 1, 2]$ or $x = [2, 2, 1]$ or $x = [2, 2, 2]$.\n\nIn the second test case, Bob wins when $x_1 = 14$ or $x_1 = 30$ by removing $14 - k$ stones, where $k$ is the number of stones Alice removes on her turn. Bob also wins when $x_1 = 16$ or $x_1 = 32$ since Alice does not have any moves to begin with.", "cfid": "2027E2"}
{"problem_id": "2023E", "problem_title": "E. Tree of Life", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2023/E", "problem_statement": "In the heart of an ancient kingdom grows the legendary Tree of Life — the only one of its kind and the source of magical power for the entire world. The tree consists of $n$ nodes. Each node of this tree is a magical source, connected to other such sources through magical channels (edges). In total, there are $n-1$ channels in the tree, with the $i$-th channel connecting nodes $v_i$ and $u_i$. Moreover, there exists a unique simple path through the channels between any two nodes in the tree.\n\nHowever, the magical energy flowing through these channels must be balanced; otherwise, the power of the Tree of Life may disrupt the natural order and cause catastrophic consequences. The sages of the kingdom discovered that when two magical channels converge at a single node, a dangerous \"magical resonance vibration\" occurs between them. To protect the Tree of Life and maintain its balance, it is necessary to select several paths and perform special rituals along them. A path is a sequence of distinct nodes $v_1, v_2, \\ldots, v_k$, where each pair of adjacent nodes $v_i$ and $v_{i+1}$ is connected by a channel. When the sages perform a ritual along such a path, the resonance vibration between the channels $(v_i, v_{i+1})$ and $(v_{i+1}, v_{i+2})$ is blocked for each $1 \\leq i \\leq k - 2$.\n\nThe sages' task is to select the minimum number of paths and perform rituals along them to block all resonance vibrations. This means that for every pair of channels emanating from a single node, there must exist at least one selected path that contains both of these channels.\n\nHelp the sages find the minimum number of such paths so that the magical balance of the Tree of Life is preserved, and its power continues to nourish the entire world!\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\leq t \\leq 4 \\cdot 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\leq n \\leq 5 \\cdot 10^5$) — the number of nodes in the Tree of Life.\n\nThe $i$-th of the following $n - 1$ lines of each test case contains two integers $v_i$ and $u_i$ ($1 \\leq v_i < u_i \\leq n$) — the channel connecting nodes $v_i$ and $u_i$.\n\nIt is guaranteed that there exists a unique simple path through the channels between any two nodes.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the minimum number of paths that the sages need to select to prevent a catastrophe.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n4\n\n1 2\n\n2 3\n\n3 4\n\n2\n\n1 2\n\n4\n\n1 2\n\n1 3\n\n1 4\n\n8\n\n3 7\n\n2 4\n\n1 2\n\n2 5\n\n3 6\n\n1 3\n\n3 8\n\n6\n\n2 3\n\n1 2\n\n3 6\n\n1 5\n\n1 4\n\n```\n\n#### Output #1\n\n```\n1\n0\n3\n7\n3\n```\n\n### Note\n\nIn the first test case, there are two pairs of channels emanating from a single node: $(1, 2)$ and $(2, 3)$, $(2, 3)$ and $(3, 4)$. It is sufficient to perform the ritual along the path $1-2-3-4$. Thus, the answer is $1$.\n\nIn the second test case, there are no pairs of channels emanating from a single node, so the answer is $0$.\n\nIn the third test case, rituals can be performed along the paths $2-1-3$, $2-1-4$, and $3-1-4$.", "cfid": "2023E"}
{"problem_id": "2023F", "problem_title": "F. Hills and Pits", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2023/F", "problem_statement": "In a desert city with a hilly landscape, the city hall decided to level the road surface by purchasing a dump truck. The road is divided into $n$ sections, numbered from $1$ to $n$ from left to right. The height of the surface in the $i$-th section is equal to $a_i$. If the height of the $i$-th section is greater than $0$, then the dump truck must take sand from the $i$-th section of the road, and if the height of the $i$-th section is less than $0$, the dump truck must fill the pit in the $i$-th section of the road with sand. It is guaranteed that the initial heights are not equal to $0$.\n\nWhen the dump truck is in the $i$-th section of the road, it can either take away $x$ units of sand, in which case the height of the surface in the $i$-th section will decrease by $x$, or it can fill in $x$ units of sand (provided that it currently has at least $x$ units of sand in its bed), in which case the height of the surface in the $i$-th section of the road will increase by $x$.\n\nThe dump truck can start its journey from any section of the road. Moving to an adjacent section on the left or right takes $1$ minute, and the time for loading and unloading sand can be neglected. The dump truck has an infinite capacity and is initially empty.\n\nYou need to find the minimum time required for the dump truck to level the sand so that the height in each section becomes equal to $0$. Note that after all movements, the dump truck may still have sand left in its bed. You need to solve this problem independently for the segments numbered from $l_i$ to $r_i$. Sand outside the segment cannot be used.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $q$ ($1 \\le n, q \\le 3 \\cdot 10^5$) — the number of sections and the number of queries.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($-10^9 \\le a_i \\le 10^9$, $a_i \\neq 0$) — the initial height in each section.\n\nThe $i$-th of the following $q$ lines contains two integers $l_i$ and $r_i$ ($1 \\le l_i \\le r_i \\le n$) — the boundaries of the segment of sections for which the minimum time needs to be determined.\n\nIt is guaranteed that the sum of $n$ over all test cases and the sum of $q$ over all test cases do not exceed $3 \\cdot 10^5$.\n\n### Output\n\nFor each query, output the minimum time required to level the sand in the segment $[l_i, r_i]$, or $-1$ if it is impossible.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n1 1\n\n-179\n\n1 1\n\n5 3\n\n-2 2 -1 3 -1\n\n2 4\n\n1 5\n\n1 3\n\n7 1\n\n1 1 1 -4 1 1 1\n\n1 7\n\n7 2\n\n2 -2 2 -2 1 2 -1\n\n1 7\n\n2 7\n\n4 4\n\n1000000000 1000000000 999999999 -1000000000\n\n2 4\n\n3 4\n\n2 3\n\n1 3\n\n```\n\n#### Output #1\n\n```\n-1\n2\n5\n-1\n8\n6\n6\n2\n-1\n1\n2\n```\n\n### Note\n\nIn the first test case, $179$ units of sand need to be added to the only section. However, there is nowhere to take it from, so this is impossible.\n\nIn the second test case:\n\n- In the first query, the dump truck can start its journey at the second section. It can take $2$ units of sand, after which the height in the second section will become $0$. Then the dump truck can move to the third section. It can pour $1$ unit of sand there, after which the height in the third section will become $0$. Then the dump truck can move to the fourth section. There it can take $3$ units of sand, after which the height in the fourth section will become $0$. In total, the dump truck will spend $2$ minutes on movements.\n- In the second query, the dump truck can start its journey at the fourth section. It can take $3$ units of sand, after which the height in the fourth section will become $0$. Then the dump truck can move to the fifth section. It can pour $1$ unit of sand there, after which the height in the fifth section will become $0$. Then the dump truck can move back to the fourth section and then to the third. It can pour $1$ unit of sand there, after which the height in the third section will become $0$. Then the dump truck can move to the second section. It can take $2$ units of sand. Then it can move to the first section. It can pour $2$ units of sand there, after which the height in the first section will become $0$. In total, the dump truck will spend $5$ minutes on movements.\n- In the third query, the dump truck will not be able to make the height in each section equal to $0$.", "cfid": "2023F"}
{"problem_id": "2030G2", "problem_title": "G2. The Destruction of the Universe (Hard Version)", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2030/G2", "problem_statement": "This is the hard version of the problem. In this version, $n \\leq 10^6$. You can only make hacks if both versions of the problem are solved.\n\nOrangutans are powerful beings—so powerful that they only need $1$ unit of time to destroy every vulnerable planet in the universe!\n\nThere are $n$ planets in the universe. Each planet has an interval of vulnerability $[l, r]$, during which it will be exposed to destruction by orangutans. Orangutans can also expand the interval of vulnerability of any planet by $1$ unit.\n\nSpecifically, suppose the expansion is performed on planet $p$ with interval of vulnerability $[l_p, r_p]$. Then, the resulting interval of vulnerability may be either $[l_p - 1, r_p]$ or $[l_p, r_p + 1]$.\n\nGiven a set of planets, orangutans can destroy all planets if the intervals of vulnerability of all planets in the set intersect at least one common point. Let the score of such a set denote the minimum number of expansions that must be performed.\n\nOrangutans are interested in the sum of scores of all non-empty subsets of the planets in the universe. As the answer can be large, output it modulo $998\\,244\\,353$.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe first line of each test case contains an integer $n$ ($1 \\leq n \\leq 10^6$) — the number of planets in the universe.\n\nThe following $n$ lines contain two integers $l_i$ and $r_i$ ($1 \\leq l_i \\leq r_i \\leq n$) — the initial interval of vulnerability of the $i$-th planet.\n\nIt is guaranteed that the sum of $n$ does not exceed $10^6$ over all test cases.\n\n### Output\n\nFor each test case, output an integer — the sum of scores to destroy all non-empty subsets of the planets in the universe, modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3\n\n1 1\n\n2 3\n\n3 3\n\n4\n\n1 4\n\n2 3\n\n2 4\n\n1 1\n\n5\n\n1 2\n\n2 3\n\n3 4\n\n4 5\n\n1 5\n\n```\n\n#### Output #1\n\n```\n5\n6\n24\n```\n\n### Note\n\nIn the first testcase, there are seven non-empty subsets of planets we must consider:\n\n- For each of the subsets $\\{[1,1]\\}, \\{[2,3]\\}, \\{[3,3]\\}$, the score is $0$.\n- For the subset $\\{[2,3], [3,3]\\}$, the score is $0$, because the point $3$ is already contained in both planets' interval of vulnerability.\n- For the subset $\\{[1,1], [2,3]\\}$, the score is $1$. By using one operation on changing the interval of vulnerability of the second planet to be $[1,3]$, the two planets now both have the point $1$ in their interval.\n- For the subset $\\{[1,1], [3,3]\\}$, the score is $2$. By using two operations on changing the interval of vulnerability of the first planet to be $[1,3]$, the two planets now both have the point $3$ in their interval.\n- For the subset $\\{[1,1], [2,3], [3,3]\\}$, the score is $2$. By using one operation on changing the interval of vulnerability of the first planet to be $[1,2]$ and one operation on changing the interval of vulnerability of the third planet to $[2,3]$, all three planets will have the point $2$ in their interval.\n\nThe sum of scores of all non-empty subsets of the first testcase is $0 \\cdot 4 + 1 \\cdot 1 + 2\\cdot2 = 5$.", "cfid": "2030G2"}
{"problem_id": "2053B", "problem_title": "B. Outstanding Impressionist", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2053/B", "problem_statement": "If it was so, then let's make it a deal...\n\n— MayDay, [Gentleness](https://www.youtube.com/watch?v=mtAc_bMYBsM&list=PLj6NQzHFCvkHKIm0Vnk9LH3odqTIBRZ1Q&index=15)\n\nEven after copying the paintings from famous artists for ten years, unfortunately, Eric is still unable to become a skillful impressionist painter. He wants to forget something, but the white bear phenomenon just keeps hanging over him.\n\nEric still remembers $n$ pieces of impressions in the form of an integer array. He records them as $w_1, w_2, \\ldots, w_n$. However, he has a poor memory of the impressions. For each $1 \\leq i \\leq n$, he can only remember that $l_i \\leq w_i \\leq r_i$.\n\nEric believes that impression $i$ is unique if and only if there exists a possible array $w_1, w_2, \\ldots, w_n$ such that $w_i \\neq w_j$ holds for all $1 \\leq j \\leq n$ with $j \\neq i$.\n\nPlease help Eric determine whether impression $i$ is unique for every $1 \\leq i \\leq n$, independently for each $i$. Perhaps your judgment can help rewrite the final story.\n\n### Input\n\nEach test contains multiple test cases. The first line of the input contains a single integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases. The description of test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\leq n \\leq 2\\cdot 10^5$) — the number of impressions.\n\nThen $n$ lines follow, the $i$-th containing two integers $l_i$ and $r_i$ ($1 \\leq l_i \\leq r_i \\leq 2\\cdot n$) — the minimum possible value and the maximum possible value of $w_i$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, output a binary string $s$ of length $n$: for each $1 \\leq i \\leq n$, if impression $i$ is unique, $s_i=\\texttt{1}$; otherwise, $s_i=\\texttt{0}$. Do not output spaces.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n2\n\n1 1\n\n1 1\n\n4\n\n1 3\n\n1 3\n\n1 3\n\n1 3\n\n6\n\n3 6\n\n2 2\n\n1 2\n\n1 1\n\n3 4\n\n2 2\n\n7\n\n3 4\n\n4 4\n\n4 4\n\n1 3\n\n2 5\n\n1 4\n\n2 2\n\n3\n\n4 5\n\n4 4\n\n5 5\n\n```\n\n#### Output #1\n\n```\n00\n1111\n100110\n1001111\n011\n```\n\n### Note\n\nIn the first test case, the only possible array $w$ is $[1, 1]$, making neither impression $1$ nor $2$ unique (since $w_1 = w_2$).\n\nIn the second test case, all impressions can be made unique:\n\n- For $i = 1$, we can set $w$ to $[1, 3, 2, 3]$, in which $w_1 \\neq w_2$, $w_1 \\neq w_3$, and $w_1 \\neq w_4$;\n- For $i = 2$, we can set $w$ to $[2, 3, 1, 2]$, in which $w_2 \\neq w_1$, $w_2 \\neq w_3$, and $w_2 \\neq w_4$;\n- For $i = 3$, we can set $w$ to $[1, 1, 3, 1]$;\n- For $i = 4$, we can set $w$ to $[2, 3, 3, 1]$.\n\nIn the third test case, for $i = 4$, we can set $w$ to $[3, 2, 2, 1, 3, 2]$. Thus, impression $4$ is unique.", "cfid": "2053B"}
{"problem_id": "2053A", "problem_title": "A. Tender Carpenter", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2053/A", "problem_statement": "I would use a firework to announce, a wave to bid farewell, and a bow to say thanks: bygones are bygones; not only on the following path will I be walking leisurely and joyfully, but also the footsteps won't halt as time never leaves out flowing; for in the next year, we will meet again.\n\n— Cocoly1990, [Goodbye 2022](https://www.luogu.com.cn/problem/P8941)\n\nIn his dream, Cocoly would go on a long holiday with no worries around him. So he would try out for many new things, such as... being a carpenter. To learn it well, Cocoly decides to become an apprentice of Master, but in front of him lies a hard task waiting for him to solve.\n\nCocoly is given an array $a_1, a_2,\\ldots, a_n$. Master calls a set of integers $S$ stable if and only if, for any possible $u$, $v$, and $w$ from the set $S$ (note that $u$, $v$, and $w$ do not necessarily have to be pairwise distinct), sticks of length $u$, $v$, and $w$ can form a non-degenerate triangle$^{\\text{∗}}$.\n\nCocoly is asked to partition the array $a$ into several (possibly, $1$ or $n$) non-empty continuous subsegments$^{\\text{†}}$, such that: for each of the subsegments, the set containing all the elements in it is stable.\n\nMaster wants Cocoly to partition $a$ in at least two different$^{\\text{‡}}$ ways. You have to help him determine whether it is possible.\n\n$^{\\text{∗}}$A triangle with side lengths $x$, $y$, and $z$ is called non-degenerate if and only if:\n\n- $x + y > z$,\n- $y + z > x$, and\n- $z + x > y$.\n\n$^{\\text{†}}$A sequence $b$ is a subsegment of a sequence $c$ if $b$ can be obtained from $c$ by the deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\n$^{\\text{‡}}$Two partitions are considered different if and only if at least one of the following holds:\n\n- the numbers of continuous subsegments split in two partitions are different;\n- there is an integer $k$ such that the lengths of the $k$-th subsegment in two partitions are different.\n\n### Input\n\nEach test contains multiple test cases. The first line of the input contains a single integer $t$ ($1 \\leq t \\leq 200$) — the number of test cases. The description of test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\leq n \\leq 200$) — the length of the array $a$.\n\nThe second line contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($1 \\leq a_i \\leq 10^5$) — the elements in the array $a$.\n\n### Output\n\nFor each test case, print $\\texttt{YES}$ if there are at least two ways to partition $a$, and $\\texttt{NO}$ otherwise.\n\nYou can output the answer in any case (upper or lower). For example, the strings $\\texttt{yEs}$, $\\texttt{yes}$, $\\texttt{Yes}$, and $\\texttt{YES}$ will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n4\n\n2 3 5 7\n\n4\n\n115 9 2 28\n\n5\n\n8 4 1 6 2\n\n6\n\n1 5 4 1 4 7\n\n2\n\n100000 100000\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nNO\nYES\nYES\n```\n\n### Note\n\nIn the first test case, here are two possible partitions:\n\n- $[2, 3], [5, 7]$, since\n  - $[2, 3]$ is stable because sticks of lengths $(2, 2, 2), (2, 2, 3), (2, 3, 3), (3, 3, 3)$ respectively can all form non-degenerate triangles.\n  - $[5, 7]$ is stable because sticks of lengths $(5, 5, 5), (5, 5, 7), (5, 7, 7), (7, 7, 7)$ respectively can all form non-degenerate triangles.\n- and $[2], [3, 5], [7]$, since\n  - $[2]$ is stable because sticks of lengths $(2, 2, 2)$ respectively can form a non-degenerate triangle.\n  - $[3, 5]$ is stable because sticks of lengths $(3, 3, 3), (3, 3, 5), (3, 5, 5), (5, 5, 5)$ respectively can all form non-degenerate triangles.\n  - $[7]$ is stable because sticks of lengths $(7, 7, 7)$ respectively can form a non-degenerate triangle.\n\nNote that some other partitions also satisfy the constraints, such as $[2], [3], [5], [7]$ and $[2], [3], [5, 7]$.\n\nIn the second test case, Cocoly can only partition each element as a single subsegment, resulting in $[115], [9], [2], [28]$. Since we only have one possible partition, the answer is $\\texttt{NO}$.\n\nIn the third test case, please note that the partition $[8, 4], [1], [6], [2]$ does not satisfy the constraints, because $\\{8, 4\\}$ is not a stable set: sticks of lengths $4$, $4$, and $8$ cannot form a non-degenerate triangle.", "cfid": "2053A"}
{"problem_id": "2053C", "problem_title": "C. Bewitching Stargazer", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2053/C", "problem_statement": "I'm praying for owning a transparent heart; as well as eyes with tears more than enough...\n\n— Escape Plan, [Brightest Star in the Dark](https://www.youtube.com/watch?v=GPnymcrXgX0)\n\nIris looked at the stars and a beautiful problem emerged in her mind. She is inviting you to solve it so that a meteor shower is believed to form.\n\nThere are $n$ stars in the sky, arranged in a row. Iris has a telescope, which she uses to look at the stars.\n\nInitially, Iris observes stars in the segment $[1, n]$, and she has a lucky value of $0$. Iris wants to look for the star in the middle position for each segment $[l, r]$ that she observes. So the following recursive procedure is used:\n\n- First, she will calculate $m = \\left\\lfloor \\frac{l+r}{2} \\right\\rfloor$.\n- If the length of the segment (i.e. $r - l + 1$) is even, Iris will divide it into two equally long segments $[l, m]$ and $[m+1, r]$ for further observation.\n- Otherwise, Iris will aim the telescope at star $m$, and her lucky value will increase by $m$; subsequently, if $l \\neq r$, Iris will continue to observe two segments $[l, m-1]$ and $[m+1, r]$.\n\nIris is a bit lazy. She defines her laziness by an integer $k$: as the observation progresses, she will not continue to observe any segment $[l, r]$ with a length strictly less than $k$. In this case, please predict her final lucky value.\n\n### Input\n\nEach test contains multiple test cases. The first line of input contains a single integer $t$ ($1 \\leq t \\leq 10^5$) — the number of test cases. The description of test cases follows.\n\nThe only line of each test case contains two integers $n$ and $k$ ($1 \\leq k \\leq n \\leq 2\\cdot 10^9$).\n\n### Output\n\nFor each test case, output a single integer — the final lucky value.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n7 2\n\n11 3\n\n55 13\n\n5801 6\n\n8919 64\n\n8765432 1\n\n```\n\n#### Output #1\n\n```\n12\n18\n196\n1975581\n958900\n38416403456028\n```\n\n### Note\n\nIn the first test case, at the beginning, Iris observes $[1, 7]$. Since $[1, 7]$ has an odd length, she aims at star $4$ and therefore increases her lucky value by $4$. Then it is split into $2$ new segments: $[1, 3]$ and $[5, 7]$. The segment $[1, 3]$ again has an odd length, so Iris aims at star $2$ and increases her lucky value by $2$. Then it is split into $2$ new segments: $[1, 1]$ and $[3, 3]$, both having a length less than $2$, so no further observation is conducted. For range $[5, 7]$, the progress is similar and the lucky value eventually increases by $6$. Therefore, the final lucky value is $4 + 2 + 6 = 12$.\n\nIn the last test case, Iris finally observes all the stars and the final lucky value is $1 + 2 + \\cdots + 8\\,765\\,432 = 38\\,416\\,403\\,456\\,028$.", "cfid": "2053C"}
{"problem_id": "2053D", "problem_title": "D. Refined Product Optimality", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2053/D", "problem_statement": "As a tester, when my solution has a different output from the example during testing, I suspect the author first.\n\n— Chris, [a comment](https://codeforces.com/blog/entry/133116?#comment-1190579)\n\nAlthough Iris occasionally sets a problem where the solution is possibly wrong, she still insists on creating problems with her imagination; after all, everyone has always been on the road with their stubbornness... And like ever before, Iris has set a problem to which she gave a wrong solution, but Chris is always supposed to save it! You are going to play the role of Chris now:\n\n- Chris is given two arrays $a$ and $b$, both consisting of $n$ integers.\n- Iris is interested in the largest possible value of $P = \\prod\\limits_{i=1}^n \\min(a_i, b_i)$ after an arbitrary rearrangement of $b$. Note that she only wants to know the maximum value of $P$, and no actual rearrangement is performed on $b$.\n- There will be $q$ modifications. Each modification can be denoted by two integers $o$ and $x$ ($o$ is either $1$ or $2$, $1 \\leq x \\leq n$). If $o = 1$, then Iris will increase $a_x$ by $1$; otherwise, she will increase $b_x$ by $1$.\n- Iris asks Chris the maximum value of $P$ for $q + 1$ times: once before any modification, then after every modification.\n- Since $P$ might be huge, Chris only needs to calculate it modulo $998\\,244\\,353$.\n\nChris soon worked out this problem, but he was so tired that he fell asleep. Besides saying thanks to Chris, now it is your turn to write a program to calculate the answers for given input data.\n\nNote: since the input and output are large, you may need to optimize them for this problem.\n\nFor example, in C++, it is enough to use the following lines at the start of the main() function:\n\n```\n`int main() {<br/>    std::ios::sync_with_stdio(false);<br/>    std::cin.tie(nullptr); std::cout.tie(nullptr);<br/>}<br/>````\n\n### Input\n\nEach test contains multiple test cases. The first line of input contains a single integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases. The description of test cases follows.\n\nThe first line of each test case contains two integers $n$ and $q$ ($1 \\leq n \\leq 2\\cdot 10^5$, $1 \\leq q \\leq 2\\cdot 10^5$) — the length of the array and the number of operations.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 5\\cdot 10^8$) — the array $a$.\n\nThe third line of each test case contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($1 \\leq b_i \\leq 5\\cdot 10^8$) — the array $b$.\n\nThen $q$ lines follow, each line contains two integers $o$ and $x$ ($o \\in \\{1, 2\\}$, $1 \\leq x \\leq n$), representing an operation.\n\nIt's guaranteed that the sum of $n$ and the sum of $q$ over all test cases does not exceed $4\\cdot 10^5$, respectively.\n\n### Output\n\nFor each test case, output $q + 1$ integers in a line, representing the answers that Chris will calculate, modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3 4\n\n1 1 2\n\n3 2 1\n\n1 3\n\n2 3\n\n1 1\n\n2 1\n\n6 8\n\n1 4 2 7 3 5\n\n7 6 5 6 3 3\n\n2 5\n\n1 6\n\n1 5\n\n1 5\n\n1 5\n\n2 3\n\n2 3\n\n1 6\n\n13 8\n\n7 7 6 6 5 5 5 2 2 3 4 5 1\n\n1 4 1 9 6 6 9 1 5 1 3 8 4\n\n2 2\n\n2 11\n\n2 4\n\n2 4\n\n1 7\n\n1 1\n\n2 12\n\n1 5\n\n5 3\n\n10000000 20000000 30000000 40000000 50000000\n\n10000000 20000000 30000000 40000000 50000000\n\n1 1\n\n2 2\n\n2 1\n\n```\n\n#### Output #1\n\n```\n2 3 3 6 6\n840 840 1008 1344 1680 2016 2016 2016 2352\n2116800 2646000 3528000 3528000 3528000 4233600 4838400 4838400 4838400\n205272023 205272023 205272023 264129429\n```\n\n### Note\n\nIn the first test case:\n\n- Before the modifications, Chris can rearrange $b$ to $[1, 2, 3]$ so that $P = \\prod\\limits_{i=1}^n \\min(a_i, b_i) = 1 \\cdot 1 \\cdot 2 = 2$. We can prove that this is the maximum possible value. For example, if Chris rearranges $b = [2, 3, 1]$, $P$ will be equal $1 \\cdot 1 \\cdot 1 = 1 < 2$, which is not optimal.\n- After the first modification, Chris can rearrange $b$ to $[1, 2, 3]$ so that $P = 1 \\cdot 1 \\cdot 3 = 3$, which is maximized.\n- After the second modification, Chris can rearrange $b$ to $[2, 2, 3]$ so that $P = 1 \\cdot 1 \\cdot 3 = 3$, which is maximized.\n- After the third modification, Chris can rearrange $b$ to $[2, 2, 3]$ so that $P = 6$, which is maximized.\n- After the fourth modification, Chris can rearrange $b$ to $[2, 2, 4]$ so that $P = 6$, which is maximized.", "cfid": "2053D"}
{"problem_id": "2043B", "problem_title": "B. Digits", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2043/B", "problem_statement": "Artem wrote the digit $d$ on the board exactly $n!$ times in a row. So, he got the number $dddddd \\dots ddd$ (exactly $n!$ digits).\n\nNow he is curious about which odd digits from $1$ to $9$ divide the number written on the board.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 100$) — the number of test cases. The next $t$ test cases follow.\n\nEach test case consists of a single line containing two integers $n$ and $d$ ($2 \\le n \\le 10^9$, $1 \\le d \\le 9$).\n\n### Output\n\nFor each test case, output the odd digits in ascending order that divide the number written on the board.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2 6\n\n7 1\n\n8 5\n\n```\n\n#### Output #1\n\n```\n1 3\n1 3 7 9\n1 3 5 7 9\n```\n\n### Note\n\nThe factorial of a positive integer $n$ ($n!$) is the product of all integers from $1$ to $n$. For example, the factorial of $5$ is $1 \\cdot 2 \\cdot 3 \\cdot 4 \\cdot 5 = 120$.", "cfid": "2043B"}
{"problem_id": "2043D", "problem_title": "D. Problem about GCD", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2043/D", "problem_statement": "Given three integers $l$, $r$, and $G$, find two integers $A$ and $B$ ($l \\le A \\le B \\le r$) such that their greatest common divisor (GCD) equals $G$ and the distance $|A - B|$ is maximized.\n\nIf there are multiple such pairs, choose the one where $A$ is minimized. If no such pairs exist, output \"-1 -1\".\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^3$) — the number of test cases. Then, $t$ test cases follow.\n\nEach test case consists of a single line containing three integers $l, r, G$ ($1 \\le l \\le r \\le 10^{18}$; $1 \\le G \\le 10^{18}$) — the range boundaries and the required GCD.\n\n### Output\n\nFor each test case, output two integers $A$ and $B$ — the solution to the problem, or \"-1 -1\" if no such pair exists.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n4 8 2\n\n4 8 3\n\n4 8 4\n\n5 7 6\n\n```\n\n#### Output #1\n\n```\n4 6\n-1 -1\n4 8\n6 6\n```", "cfid": "2043D"}
{"problem_id": "2043C", "problem_title": "C. Sums on Segments", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2043/C", "problem_statement": "You are given an array $a$ of $n$ integers, where all elements except for at most one are equal to $-1$ or $1$. The remaining element $x$ satisfies $-10^9 \\le x \\le 10^9$.\n\nFind all possible sums of subarrays of $a$, including the empty subarray, whose sum is defined as $0$. In other words, find all integers $x$ such that the array $a$ has at least one subarray (possibly empty) with sum equal to $x$. A subarray is a contiguous subsegment of an array.\n\nOutput these sums in ascending order. Each sum should be printed only once, even if it is achieved by multiple subarrays.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. Then, $t$ test cases follow.\n\nEach test case consists of two lines:\n\n- The first line contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) — the size of the array.\n- The second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($-10^9 \\le a_i \\le 10^9$) — the elements of the array $a$. In the array $a$, there is at most one element that is neither $1$ nor $-1$.\n\nAdditional constraint on the input: the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output two lines:\n\n- In the first line, print a single integer — the number of distinct subarray sums.\n- In the second line, print these sums in ascending order.\n\nEach sum should be printed only once, even if it is produced by multiple subarrays.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n5\n\n1 -1 10 1 1\n\n5\n\n-1 -1 -1 -1 -1\n\n2\n\n-1 2\n\n2\n\n7 1\n\n3\n\n1 4 -1\n\n```\n\n#### Output #1\n\n```\n8\n-1 0 1 2 9 10 11 12\n6\n-5 -4 -3 -2 -1 0\n4\n-1 0 1 2\n4\n0 1 7 8\n6\n-1 0 1 3 4 5\n```\n\n### Note\n\nLet's define $a[i,j]$ as the subarray of $a$ from position $i$ to position $j$.\n\nConsider the first test case of the example:\n\n- $-1$ is produced by $a[2,2]$;\n- $0$ is produced by the empty subarray;\n- $1$ is produced by $a[4,4]$;\n- $2$ is produced by $a[4,5]$;\n- $9$ is produced by $a[2,3]$;\n- $10$ is produced by $a[1,3]$;\n- $11$ is produced by $a[3,4]$;\n- $12$ is produced by $a[3,5]$.", "cfid": "2043C"}
{"problem_id": "2043A", "problem_title": "A. Coin Transformation", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2043/A", "problem_statement": "Initially, you have a coin with value $n$. You can perform the following operation any number of times (possibly zero):\n\n- transform one coin with value $x$, where $x$ is greater than $3$ ($x>3$), into two coins with value $\\lfloor \\frac{x}{4} \\rfloor$.\n\nWhat is the maximum number of coins you can have after performing this operation any number of times?\n\n### Input\n\nThe first line contains one integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nEach test case consists of one line containing one integer $n$ ($1 \\le n \\le 10^{18}$).\n\n### Output\n\nFor each test case, print one integer — the maximum number of coins you can have after performing the operation any number of times.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n1\n\n5\n\n16\n\n1000000000000000000\n\n```\n\n#### Output #1\n\n```\n1\n2\n4\n536870912\n```\n\n### Note\n\nIn the first example, you have a coin of value $1$, and you can't do anything with it. So, the answer is $1$.\n\nIn the second example, you can transform a coin of value $5$ into two coins with value $1$.\n\nIn the third example, you can transform a coin of value $16$ into two coins with value $4$. Each of the resulting coins can be transformed into two coins with value $1$.", "cfid": "2043A"}
{"problem_id": "2051B", "problem_title": "B. Journey", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2051/B", "problem_statement": "Monocarp decided to embark on a long hiking journey.\n\nHe decided that on the first day he would walk $a$ kilometers, on the second day he would walk $b$ kilometers, on the third day he would walk $c$ kilometers, on the fourth day, just like on the first, he would walk $a$ kilometers, on the fifth day, just like on the second, he would walk $b$ kilometers, on the sixth day, just like on the third, he would walk $c$ kilometers, and so on.\n\nMonocarp will complete his journey on the day when he has walked at least $n$ kilometers in total. Your task is to determine the day on which Monocarp will complete his journey.\n\n### Input\n\nThe first line contains one integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nEach test case consists of one line containing four integers $n$, $a$, $b$, $c$ ($1 \\le n \\le 10^9$; $1 \\le a, b, c \\le 10^6$).\n\n### Output\n\nFor each test case, output one integer — the day on which Monocarp will have walked at least $n$ kilometers in total and will complete his journey.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n12 1 5 3\n\n6 6 7 4\n\n16 3 4 1\n\n1000000000 1 1 1\n\n```\n\n#### Output #1\n\n```\n5\n1\n6\n1000000000\n```\n\n### Note\n\nIn the first example, over the first four days, Monocarp will cover $1 + 5 + 3 + 1 = 10$ kilometers. On the fifth day, he will cover another $5$ kilometers, meaning that in total over five days he will have covered $10 + 5 = 15$ kilometers. Since $n = 12$, Monocarp will complete his journey on the fifth day.\n\nIn the second example, Monocarp will cover $6$ kilometers on the first day. Since $n = 6$, Monocarp will complete his journey on the very first day.\n\nIn the third example, Monocarp will cover $3 + 4 + 1 + 3 + 4 + 1 = 16$ kilometers over the first six days. Since $n = 16$, Monocarp will complete his journey on the sixth day.", "cfid": "2051B"}
{"problem_id": "2051C", "problem_title": "C. Preparing for the Exam", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2051/C", "problem_statement": "Monocarp is preparing for his first exam at the university. There are $n$ different questions which can be asked during the exam, numbered from $1$ to $n$. There are $m$ different lists of questions; each list consists of exactly $n-1$ different questions. Each list $i$ is characterized by one integer $a_i$, which is the index of the only question which is not present in the $i$-th list. For example, if $n = 4$ and $a_i = 3$, the $i$-th list contains questions $[1, 2, 4]$.\n\nDuring the exam, Monocarp will receive one of these $m$ lists of questions. Then, the professor will make Monocarp answer all questions from the list. So, Monocarp will pass only if he knows all questions from the list.\n\nMonocarp knows the answers for $k$ questions $q_1, q_2, \\dots, q_k$. For each list, determine if Monocarp will pass the exam if he receives that list.\n\n### Input\n\nThe first line contains one integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nEach test case consists of three lines:\n\n- the first line contains three integers $n$, $m$ and $k$ ($2 \\le n \\le 3 \\cdot 10^5$; $1 \\le m, k \\le n$);\n- the second line contains $m$ distinct integers $a_1, a_2, \\dots, a_m$ ($1 \\le a_i \\le n$; $a_i < a_{i+1}$);\n- the third line contains $k$ distinct integers $q_1, q_2, \\dots, q_k$ ($1 \\le q_i \\le n$; $q_i < q_{i+1}$).\n\nAdditional constraints on the input:\n\n- the sum of $n$ over all test cases does not exceed $3 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print a string of $m$ characters. The $i$-th character should be 1 if Monocarp passes the exam if he receives the $i$-th question list, 0 if Monocarp won't pass.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n4 4 3\n\n1 2 3 4\n\n1 3 4\n\n5 4 3\n\n1 2 3 4\n\n1 3 4\n\n4 4 4\n\n1 2 3 4\n\n1 2 3 4\n\n2 2 1\n\n1 2\n\n2\n\n```\n\n#### Output #1\n\n```\n0100\n0000\n1111\n10\n```\n\n### Note\n\nIn the first test case, Monocarp knows the questions $[1, 3, 4]$. Let's consider all the question lists:\n\n- the first list consists of questions $[2, 3, 4]$. Monocarp doesn't know the $2$-nd question, so he won't pass;\n- the second list consists of questions $[1, 3, 4]$. Monocarp knows all these questions, so he will pass;\n- the third list consists of questions $[1, 2, 4]$. Monocarp doesn't know the $2$-nd question, so he won't pass;\n- the fourth list consists of questions $[1, 2, 3]$. Monocarp doesn't know the $2$-nd question, so he won't pass.", "cfid": "2051C"}
{"problem_id": "2051D", "problem_title": "D. Counting Pairs", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2051/D", "problem_statement": "You are given a sequence $a$, consisting of $n$ integers, where the $i$-th element of the sequence is equal to $a_i$. You are also given two integers $x$ and $y$ ($x \\le y$).\n\nA pair of integers $(i, j)$ is considered interesting if the following conditions are met:\n\n- $1 \\le i < j \\le n$;\n- if you simultaneously remove the elements at positions $i$ and $j$ from the sequence $a$, the sum of the remaining elements is at least $x$ and at most $y$.\n\nYour task is to determine the number of interesting pairs of integers for the given sequence $a$.\n\n### Input\n\nThe first line contains one integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nEach test case consists of two lines:\n\n- The first line contains three integers $n, x, y$ ($3 \\le n \\le 2 \\cdot 10^5$, $1 \\le x \\le y \\le 2 \\cdot 10^{14}$);\n- The second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^{9}$).\n\nAdditional constraint on the input: the sum of $n$ across all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output one integer — the number of interesting pairs of integers for the given sequence $a$.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n4 8 10\n\n4 6 3 6\n\n6 22 27\n\n4 9 6 3 4 5\n\n3 8 10\n\n3 2 1\n\n3 1 1\n\n2 3 4\n\n3 3 6\n\n3 2 1\n\n4 4 12\n\n3 3 2 1\n\n6 8 8\n\n1 1 2 2 2 3\n\n```\n\n#### Output #1\n\n```\n4\n7\n0\n0\n1\n5\n6\n```\n\n### Note\n\nIn the first example, there are $4$ interesting pairs of integers:\n\n1. $(1, 2)$;\n2. $(1, 4)$;\n3. $(2, 3)$;\n4. $(3, 4)$.", "cfid": "2051D"}
{"problem_id": "2051E", "problem_title": "E. Best Price", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2051/E", "problem_statement": "A batch of Christmas trees has arrived at the largest store in Berland. $n$ customers have already come to the store, wanting to buy them.\n\nBefore the sales begin, the store needs to determine the price for one tree (the price is the same for all customers). To do this, the store has some information about each customer.\n\nFor the $i$-th customer, two integers $a_i$ and $b_i$ are known, which define their behavior:\n\n- if the price of the product is at most $a_i$, the customer will buy a tree and leave a positive review;\n- otherwise, if the price of the product is at most $b_i$, the customer will buy a tree but leave a negative review;\n- otherwise, the customer will not buy a tree at all.\n\nYour task is to calculate the maximum possible earnings for the store, given that it can receive no more than $k$ negative reviews.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\le n \\le 2 \\cdot 10^5$; $0 \\le k \\le n$).\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 2 \\cdot 10^9$).\n\nThe third line contains $n$ integers $b_1, b_2, \\dots, b_n$ ($1 \\le b_i \\le 2 \\cdot 10^9$; $a_i < b_i$).\n\nAdditional constraint on the input: the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print a single integer — the maximum possible earnings for the store, given that it can receive no more than $k$ negative reviews.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n2 0\n\n2 1\n\n3 4\n\n1 1\n\n2\n\n5\n\n3 3\n\n1 5 2\n\n3 6 4\n\n4 3\n\n2 3 2 8\n\n3 7 3 9\n\n3 1\n\n2 9 5\n\n12 14 9\n\n```\n\n#### Output #1\n\n```\n2\n5\n9\n14\n15\n```\n\n### Note\n\nConsider the example from the statement:\n\n- In the first test case, the price should be set to $1$. Then both customers will buy one tree each and leave no negative reviews;\n- In the second test case, the price should be set to $5$. Then the only customer will buy a tree and leave a negative review;\n- In the third test case, the price should be set to $3$. Then all customers will buy one tree each, and the store will receive two negative reviews.\n- In the fourth test case, the price should be set to $7$. Then two customers will buy one tree each, and the store will receive one negative review.", "cfid": "2051E"}
{"problem_id": "2051A", "problem_title": "A. Preparing for the Olympiad", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2051/A", "problem_statement": "Monocarp and Stereocarp are preparing for the Olympiad. There are $n$ days left until the Olympiad. On the $i$-th day, if Monocarp plans to practice, he will solve $a_i$ problems. Similarly, if Stereocarp plans to practice on the same day, he will solve $b_i$ problems.\n\nMonocarp can train on any day he wants. However, Stereocarp watches Monocarp and follows a different schedule: if Monocarp trained on day $i$ and $i < n$, then Stereocarp will train on day $(i+1)$.\n\nMonocarp wants to organize his training process in a way that the difference between the number of problems he solves and the number of problems Stereocarp solves is as large as possible. Formally, Monocarp wants to maximize the value of $(m-s)$, where $m$ is the number of problems he solves, and $s$ is the number of problems Stereocarp solves. Help Monocarp determine the maximum possible difference in the number of solved problems between them.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^3$) — the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 100$).\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$).\n\nThe third line contains $n$ integers $b_1, b_2, \\dots, b_n$ ($1 \\le b_i \\le 100$).\n\n### Output\n\nFor each test case, print a single integer — the maximum possible difference between the number of problems Monocarp solves and the number of problems Stereocarp solves.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2\n\n3 2\n\n2 1\n\n1\n\n5\n\n8\n\n3\n\n1 1 1\n\n2 2 2\n\n6\n\n8 2 5 6 2 6\n\n8 2 7 4 3 4\n\n```\n\n#### Output #1\n\n```\n4\n5\n1\n16\n```\n\n### Note\n\nLet's analyze the example from the statement:\n\n- In the first test case, it is optimal for Monocarp to train both days; then Stereocarp will train on day $2$.\n- In the second test case, it is optimal for Monocarp to train on the only day, and Stereocarp will not train at all.\n- In the third test case, it is optimal for Monocarp to train on the last day (and only on that day).\n- In the fourth test case, it is optimal for Monocarp to train on days $1, 3, 4, 6$; then Stereocarp will train on days $2, 4, 5$.", "cfid": "2051A"}
{"problem_id": "2049A", "problem_title": "A. MEX Destruction", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2049/A", "problem_statement": "Evirir the dragon snuck into a wizard's castle and found a mysterious contraption, and their playful instincts caused them to play with (destroy) it...\n\nEvirir the dragon found an array $a_1, a_2, \\ldots, a_n$ of $n$ non-negative integers.\n\nIn one operation, they can choose a non-empty subarray$^{\\\\text{∗}}$ $b$ of $a$ and replace it with the integer $\\\\operatorname{mex}(b)$$^{\\\\text{†}}$. They want to use this operation any number of times to make $a$ only contain zeros. It can be proven that this is always possible under the problem constraints.\n\nWhat is the minimum number of operations needed?\n\n$^{\\text{∗}}$An array $c$ is a subarray of an array $d$ if $c$ can be obtained from $d$ by the deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\n$^{\\text{†}}$The minimum excluded (MEX) of a collection of integers $f_1, f_2, \\ldots, f_k$ is defined as the smallest non-negative integer $x$ which does not occur in the collection $f$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 200$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 50$), the length of $a$.\n\nThe second line of each test case contains $n$ space-separated integers, $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le 100$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $500$.\n\n### Output\n\nFor each test case, output a single integer on a line, the minimum number of operations needed to make $a$ contain only zeros.\n\n### Example\n\n#### Input #1\n\n```\n\n10\n\n4\n\n0 1 2 3\n\n6\n\n0 0 0 0 0 0\n\n5\n\n1 0 1 0 1\n\n5\n\n3 1 4 1 5\n\n4\n\n3 2 1 0\n\n7\n\n9 100 0 89 12 2 3\n\n4\n\n0 3 9 0\n\n7\n\n0 7 0 2 0 7 0\n\n1\n\n0\n\n2\n\n0 1\n\n```\n\n#### Output #1\n\n```\n1\n0\n2\n1\n1\n2\n1\n2\n0\n1\n```\n\n### Note\n\nIn the first test case, Evirir can choose the subarray $b = [1, 2, 3]$ and replace it with $\\operatorname{mex}(1, 2, 3) = 0$, changing $a$ from $[0, \\underline{1, 2, 3}]$ to $[0, 0]$ (where the chosen subarray is underlined). Therefore, the answer is $1$.\n\nIn the second test case, $a$ already contains only $0$s, so no operation is needed.\n\nIn the third test case, Evirir can change $a$ as follows: $[1, \\underline{0, 1, 0, 1}] \\to [\\underline{1, 2}] \\to [0]$. Here, $\\operatorname{mex}(0, 1, 0, 1) = 2$ and $\\operatorname{mex}(1, 2) = 0$.\n\nIn the fourth test case, Evirir can choose $b$ to be the entire array $a$, changing $a$ from $[\\underline{3, 1, 4, 1, 5}]$ to $[0]$.", "cfid": "2049A"}
{"problem_id": "2049B", "problem_title": "B. pspspsps", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2049/B", "problem_statement": "Cats are attracted to pspspsps, but Evirir, being a dignified dragon, is only attracted to pspspsps with oddly specific requirements...\n\nGiven a string $s = s_1s_2\\ldots s_n$ of length $n$ consisting of characters p, s, and . (dot), determine whether a permutation$^{\\text{∗}}$ $p$ of length $n$ exists, such that for all integers $i$ ($1 \\le i \\le n$):\n\n- If $s_i$ is p, then $[p_1, p_2, \\ldots, p_i]$ forms a permutation (of length $i$);\n- If $s_i$ is s, then $[p_i, p_{i+1}, \\ldots, p_{n}]$ forms a permutation (of length $n-i+1$);\n- If $s_i$ is ., then there is no additional restriction.\n\n$^{\\text{∗}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 500$), the length of $s$.\n\nThe second line of each test case contains a string $s$ of length $n$ that consists of the characters p, s, and ..\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5000$.\n\n### Output\n\nFor each test case, output YES or NO on a line. Output YES if there is such a permutation and NO otherwise.\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n9\n\n4\n\ns.sp\n\n6\n\npss..s\n\n5\n\nppppp\n\n2\n\nsp\n\n4\n\n.sp.\n\n8\n\npsss....\n\n1\n\n.\n\n8\n\npspspsps\n\n20\n\n....................\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nYES\nYES\nNO\nNO\nYES\nNO\nYES\n```\n\n### Note\n\nFor the first test case, one permutation that works is $p = [3, 4, 1, 2]$. The restrictions are as follows:\n\n- $s_1 =$ s: $[p_1, p_2, p_3, p_4] = [3, 4, 1, 2]$ forms a permutation.\n- $s_2 =$ .: No additional restriction.\n- $s_3 =$ s: $[p_3, p_4] = [1, 2]$ forms a permutation.\n- $s_4 =$ p: $[p_1, p_2, p_3, p_4] = [3, 4, 1, 2]$ forms a permutation.\n\nFor the second test case, it can be proven that there is no permutation that satisfies all restrictions.\n\nFor the third test case, one permutation that satisfies the constraints is $p = [1, 2, 3, 4, 5]$.", "cfid": "2049B"}
{"problem_id": "2049C", "problem_title": "C. MEX Cycle", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2049/C", "problem_statement": "Evirir the dragon has many friends. They have 3 friends! That is one more than the average dragon.\n\nYou are given integers $n$, $x$, and $y$. There are $n$ dragons sitting in a circle. The dragons are numbered $1, 2, \\ldots, n$. For each $i$ ($1 \\le i \\le n$), dragon $i$ is friends with dragon $i - 1$ and $i + 1$, where dragon $0$ is defined to be dragon $n$ and dragon $n + 1$ is defined to be dragon $1$. Additionally, dragons $x$ and $y$ are friends with each other (if they are already friends, this changes nothing). Note that all friendships are mutual.\n\nOutput $n$ non-negative integers $a_1, a_2, \\ldots, a_n$ such that for each dragon $i$ ($1 \\le i \\le n$), the following holds:\n\n- Let $f_1, f_2, \\ldots, f_k$ be the friends of dragon $i$. Then $a_i = \\operatorname{mex}(a_{f_1}, a_{f_2}, \\ldots, a_{f_k})$.$^{\\text{∗}}$\n\n$^{\\text{∗}}$The minimum excluded (MEX) of a collection of integers $c_1, c_2, \\ldots, c_m$ is defined as the smallest non-negative integer $t$ which does not occur in the collection $c$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first and only line of each test case contains three integers $n$, $x$, $y$ ($3 \\le n \\le 2 \\cdot 10^5$, $1 \\le x < y \\le n$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output $n$ space-separated non-negative integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le 10^9$) on a line that satisfy the condition in the statement. If there are multiple solutions, print any of them. It can be proven that under the problem constraints, a solution with $0 \\le a_i \\le 10^9$ always exists.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n5 1 3\n\n4 2 4\n\n6 3 5\n\n7 3 6\n\n3 2 3\n\n5 1 5\n\n6 2 5\n\n```\n\n#### Output #1\n\n```\n0 2 1 0 1\n1 2 1 0\n1 2 0 1 2 0\n0 1 2 0 1 0 1\n2 0 1\n1 0 2 1 0\n0 1 2 0 2 1\n```\n\n### Note\n\nFor the first test case:\n\n- $i = 1$: Dragon $1$'s friends are dragons $2, 3, 5$. $\\operatorname{mex}(a_2, a_3, a_5) = \\operatorname{mex}(2, 1, 1) = 0 = a_1$, so the condition for dragon $1$ is satisfied.\n- $i = 2$: Dragon $2$'s friends are dragons $1, 3$. $\\operatorname{mex}(a_1, a_3) = \\operatorname{mex}(0, 1) = 2 = a_2$.\n- $i = 3$: Dragon $3$'s friends are dragons $1, 2, 4$. $\\operatorname{mex}(a_1, a_2, a_4) = \\operatorname{mex}(0, 2, 0) = 1 = a_3$.\n- $i = 4$: Dragon $4$'s friends are dragons $3, 5$. $\\operatorname{mex}(a_3, a_5) = \\operatorname{mex}(1, 1) = 0 = a_4$.\n- $i = 5$: Dragon $5$'s friends are dragons $1, 4$. $\\operatorname{mex}(a_1, a_4) = \\operatorname{mex}(0, 0) = 1 = a_5$.", "cfid": "2049C"}
{"problem_id": "2048B", "problem_title": "B. Kevin and Permutation", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2048/B", "problem_statement": "Kevin is a master of permutation-related problems. You are taking a walk with Kevin in Darkwoods, and during your leisure time, he wants to ask you the following question.\n\nGiven two positive integers $ n $ and $ k $, construct a permutation$^{\\text{∗}}$ $ p $ of length $ n $ to minimize the sum of the minimum values of all subarrays$^{\\text{†}}$ of length $ k $. Formally, you need to minimize\n\n\n\n$$ \\sum_{i=1}^{n-k+1}\\left( \\min_{j=i}^{i+k-1} p_j\\right). $$\n\ntext{∗}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n$^{\\text{†}}$An array $a$ is a subarray of an array $b$ if $a$ can be obtained from $b$ by the deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end. Two subarrays are considered different if the sets of positions of the deleted elements are different.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^3$).\n\nThe only line of each test case contains two integers $ n $ and $ k $ ($ 1\\le k\\le n\\le 10^5 $).\n\nIt is guaranteed that the sum of $ n $ over all test cases doesn't exceed $ 10^5 $.\n\n### Output\n\nFor each test case, output $ n $ integers on a single line — the permutation $ p $ you constructed.\n\nIf there are multiple answers, you can print any of them.\n\n### Example\n\n#### Input #1\n\n```\n3\n4 2\n6 1\n8 3\n```\n\n#### Output #1\n\n```\n3 1 2 4\n5 2 1 6 4 3\n4 6 2 8 3 1 5 7\n```\n\n### Note\n\nIn the first test case, with $ k=2 $, consider all subarrays of length $ 2 $: the minimum value of $ p_1,p_2 $ is $ 1 $, the minimum value of $ p_2,p_3 $ is $ 1 $, and the minimum value of $ p_3,p_4 $ is $ 2 $. The sum $ 1+1+2=4 $ is the smallest among all possible permutations.\n\nIn the second test case, all subarrays of length $ 1 $ have minimum values of $ 5, 2, 1, 6, 4, 3 $, and the sum $ 5+2+1+6+4+3=21 $ is proven to be the smallest.", "cfid": "2048B"}
{"problem_id": "2048A", "problem_title": "A. Kevin and Combination Lock", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2048/A", "problem_statement": "Kevin is trapped in Lakeside Village by Grace. At the exit of the village, there is a combination lock that can only be unlocked if Kevin solves it.\n\nThe combination lock starts with an integer $ x $. Kevin can perform one of the following two operations zero or more times:\n\n1. If $ x \\neq 33 $, he can select two consecutive digits $ 3 $ from $ x $ and remove them simultaneously. For example, if $ x = 13\\,323 $, he can remove the second and third $ 3 $, changing $ x $ to $ 123 $.\n2. If $ x \\geq 33 $, he can change $ x $ to $ x - 33 $. For example, if $ x = 99 $, he can choose this operation to change $ x $ to $ 99 - 33 = 66 $.\n\nWhen the value of $ x $ on the combination lock becomes $ 0 $, Kevin can unlock the lock and escape from Lakeside Village. Please determine whether it is possible for Kevin to unlock the combination lock and escape.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$).\n\nThe only line of each test case contains a positive integer $x$ ($1\\leq x\\leq 10^9$).\n\n### Output\n\nFor each test case, output \"YES\" or \"NO\" (without quotes) in one line, representing whether Kevin can unlock the combination lock and escape. You can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n165\n\n6369\n\n666\n\n114514\n\n133333332\n\n```\n\n#### Output #1\n\n```\nYES\nYES\nNO\nNO\nYES\n```\n\n### Note\n\nFor the first test case, $165\\xrightarrow{-33}132\\xrightarrow{-33}99\\xrightarrow{-33}66\\xrightarrow{-33}33\\xrightarrow{-33}0$.\n\nFor the second test case, $6369\\xrightarrow{-33}6{\\color{red}{33}}6\\xrightarrow{\\text{remove \"33\"}}66\\xrightarrow{-33}33\\xrightarrow{-33}0$.\n\nFor the third test case, it can be proven that, regardless of the operations performed, $666$ cannot be transformed into $0$.", "cfid": "2048A"}
{"problem_id": "2048C", "problem_title": "C. Kevin and Binary Strings", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2048/C", "problem_statement": "Kevin discovered a binary string $s$ that starts with 1 in the river at Moonlit River Park and handed it over to you. Your task is to select two non-empty substrings$^{\\text{∗}}$ of $s$ (which can be overlapped) to maximize the XOR value of these two substrings.\n\nThe XOR of two binary strings $a$ and $b$ is defined as the result of the $\\oplus$ operation applied to the two numbers obtained by interpreting $a$ and $b$ as binary numbers, with the leftmost bit representing the highest value. Here, $\\oplus$ denotes the [bitwise XOR operation](https://en.wikipedia.org/wiki/Bitwise_operation#XOR).\n\nThe strings you choose may have leading zeros.\n\n$^{\\text{∗}}$A string $a$ is a substring of a string $b$ if $a$ can be obtained from $b$ by the deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^3$).\n\nThe only line of each test case contains a binary string $s$ that starts with 1 ($1\\le\\lvert s\\rvert\\le 5000$).\n\nIt is guaranteed that the sum of $\\lvert s\\rvert$ over all test cases doesn't exceed $5000$.\n\n### Output\n\nFor each test case, output four integers $l_1, r_1, l_2, r_2$ ($1 \\le l_1 \\le r_1 \\le |s|$, $1 \\le l_2 \\le r_2 \\le |s|$) — in the case the two substrings you selected are $s_{l_1} s_{l_1 + 1} \\ldots s_{r_1}$ and $s_{l_2} s_{l_2 + 1} \\ldots s_{r_2}$.\n\nIf there are multiple solutions, print any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n111\n\n1000\n\n10111\n\n11101\n\n1100010001101\n\n```\n\n#### Output #1\n\n```\n2 2 1 3\n1 3 1 4\n1 5 1 4\n3 4 1 5\n1 13 1 11\n```\n\n### Note\n\nIn the first test case, we can choose $ s_2=\\texttt{1} $ and $ s_1 s_2 s_3=\\texttt{111} $, and $ \\texttt{1}\\oplus\\texttt{111}=\\texttt{110} $. It can be proven that it is impossible to obtain a larger result. Additionally, $ l_1=3$, $r_1=3$, $l_2=1$, $r_2=3 $ is also a valid solution.\n\nIn the second test case, $ s_1 s_2 s_3=\\texttt{100} $, $ s_1 s_2 s_3 s_4=\\texttt{1000} $, the result is $ \\texttt{100}\\oplus\\texttt{1000}=\\texttt{1100} $, which is the maximum.", "cfid": "2048C"}
{"problem_id": "2048D", "problem_title": "D. Kevin and Competition Memories", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2048/D", "problem_statement": "Kevin used to get into Rio's Memories, and in Rio's Memories, a series of contests was once held. Kevin remembers all the participants and all the contest problems from that time, but he has forgotten the specific rounds, the distribution of problems, and the exact rankings.\n\nThere are $ m $ problems in total, with the $ i $-th problem having a difficulty of $ b_i $. Let each contest consist of $ k $ problems, resulting in a total of $ \\lfloor \\frac{m}{k} \\rfloor $ contests. This means that you select exactly $ \\lfloor \\frac{m}{k} \\rfloor \\cdot k $ problems for the contests in any combination you want, with each problem being selected at most once, and the remaining $m\\bmod k$ problems are left unused. For example, if $m = 17$ and $k = 3$, you should create exactly $5$ contests consisting of $3$ problems each, and exactly $2$ problems will be left unused.\n\nThere are $ n $ participants in the contests, with Kevin being the $1$-st participant. The $ i $-th participant has a rating of $ a_i $. During the contests, each participant solves all problems with a difficulty not exceeding their rating, meaning the $ i $-th participant solves the $ j $-th problem if and only if $ a_i \\geq b_j $. In each contest, Kevin's rank is one plus the number of participants who solve more problems than he does.\n\nFor each $ k = 1, 2, \\ldots, m $, Kevin wants to know the minimum sum of his ranks across all $ \\lfloor \\frac{m}{k} \\rfloor $ contests. In other words, for some value of $k$, after selecting the problems for each contest, you calculate the rank of Kevin in each contest and sum up these ranks over all $ \\lfloor \\frac{m}{k} \\rfloor $ contests. Your goal is to minimize this value.\n\nNote that contests for different values of $k$ are independent. It means that for different values of $k$, you can select the distribution of problems into the contests independently.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $ t $ ($ 1 \\le t \\le 5\\cdot 10^4 $).\n\nThe first line of each test case contains two integers $ n $ and $ m $ ($ 1 \\le n, m \\leq 3\\cdot 10^5 $) — the number of participants and the number of problems.\n\nThe second line of each test case contains $ n $ integers $ a_1, a_2, \\ldots, a_n $ ($ 0 \\le a_i \\le 10^9 $) — the rating of each participant.\n\nThe third line of each test case contains $ m $ integers $ b_1, b_2, \\ldots, b_m $ ($ 0 \\le b_i \\le 10^9 $) — the difficulty of each problem.\n\nIt is guaranteed that both the sum of $ n $ and the sum of $ m $ over all test cases do not exceed $ 3 \\cdot 10^5 $.\n\n### Output\n\nFor each test case, output $m$ integers — the minimum sum of Kevin's ranks for each $ k = 1, 2, \\ldots, m$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n4 4\n\n4 3 7 5\n\n2 5 4 6\n\n5 5\n\n5 0 4 8 6\n\n1 3 9 2 7\n\n6 7\n\n1 1 4 5 1 4\n\n1 9 1 9 8 1 0\n\n7 6\n\n1 9 1 9 8 1 0\n\n1 1 4 5 1 4\n\n```\n\n#### Output #1\n\n```\n7 4 2 3\n6 2 1 1 2\n7 3 2 1 1 1 1\n15 9 5 4 4 4\n```\n\n### Note\n\nFor the first test case:\n\nWhen $k=1$, since each contest only contains one problem, the distribution is in fact unique. For example, in the contest which only includes the third problem (which has a difficulty of $4$), all participants except the $2$-nd can solve it. Since no one solves strictly more problems than Kevin, his ranking in this contest is $1$. Similarly, in all $4$ contests, Kevin's rankings are $1,3,1,2$, and the sum is $7$.\n\nWhen $k=2$, one optimal way is to choose the $1$-st and the $3$-rd problem to form a contest, while the $2$-nd and $4$-th for another. In the former contest, $4$ participants respectively solve $2,1,2,2$ problems, so Kevin's ranking is $1$; in the latter one, they respectively solve $0,0,2,1$, since there are $2$ participants ($3$-rd and $4$-th) solve more problems than Kevin, his ranking is $1+2=3$. Thus the answer is $1+3=4$. It can be proven that there's no way to achieve a lower sum.\n\nWhen $k=3$, we can simply choose the $1$-st, the $3$-rd, and the $4$-th problem to make a contest, and Kevin has a ranking of $2$, which is optimal.\n\nWhen $k=4$, since there's only one contest, the distribution is also unique, and Kevin's ranking is $3$.", "cfid": "2048D"}
{"problem_id": "2044B", "problem_title": "B. Normal Problem", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2044/B", "problem_statement": "A string consisting of only characters 'p', 'q', and 'w' is painted on a glass window of a store. Ship walks past the store, standing directly in front of the glass window, and observes string $a$. Ship then heads inside the store, looks directly at the same glass window, and observes string $b$.\n\nShip gives you string $a$. Your job is to find and output $b$.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 100$) — the number of test cases.\n\nThe only line of each test case contains a string $a$ ($1 \\leq |a| \\leq 100$) — the string Ship observes from outside the store. It is guaranteed that $a$ only contains characters 'p', 'q', and 'w'.\n\n### Output\n\nFor each test case, output string $b$, the string Ship observes from inside the store, on a new line.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\nqwq\n\nppppp\n\npppwwwqqq\n\nwqpqwpqwwqp\n\npqpqpqpq\n\n```\n\n#### Output #1\n\n```\npwp\nqqqqq\npppwwwqqq\nqpwwpqwpqpw\npqpqpqpq\n```", "cfid": "2044B"}
{"problem_id": "2044D", "problem_title": "D. Harder Problem", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2044/D", "problem_statement": "Given a sequence of positive integers, a positive integer is called a mode of the sequence if it occurs the maximum number of times that any positive integer occurs. For example, the mode of $[2,2,3]$ is $2$. Any of $9$, $8$, or $7$ can be considered to be a mode of the sequence $[9,9,8,8,7,7]$.\n\nYou gave UFO an array $a$ of length $n$. To thank you, UFO decides to construct another array $b$ of length $n$ such that $a_i$ is a mode of the sequence $[b_1, b_2, \\ldots, b_i]$ for all $1 \\leq i \\leq n$.\n\nHowever, UFO doesn't know how to construct array $b$, so you must help her. Note that $1 \\leq b_i \\leq n$ must hold for your array for all $1 \\leq i \\leq n$.\n\n### Input\n\nThe first line contains $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe first line of each test case contains an integer $n$ ($1 \\leq n \\leq 2 \\cdot 10^5$) — the length of $a$.\n\nThe following line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq n$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output $n$ numbers $b_1, b_2, \\ldots, b_n$ ($1 \\leq b_i \\leq n$) on a new line. It can be shown that $b$ can always be constructed. If there are multiple possible arrays, you may print any.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2\n\n1 2\n\n4\n\n1 1 1 2\n\n8\n\n4 5 5 5 1 1 2 1\n\n10\n\n1 1 2 2 1 1 3 3 1 1\n\n```\n\n#### Output #1\n\n```\n1 2\n1 1 2 2\n4 5 5 1 1 2 2 3\n1 8 2 2 1 3 3 9 1 1\n```\n\n### Note\n\nLet's verify the correctness for our sample output in test case $2$.\n\n- At $i = 1$, $1$ is the only possible mode of $[1]$.\n- At $i = 2$, $1$ is the only possible mode of $[1, 1]$.\n- At $i = 3$, $1$ is the only possible mode of $[1, 1, 2]$.\n- At $i = 4$, $1$ or $2$ are both modes of $[1, 1, 2, 2]$. Since $a_i = 2$, this array is valid.", "cfid": "2044D"}
{"problem_id": "2044G1", "problem_title": "G1. Medium Demon Problem (easy version)", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2044/G1", "problem_statement": "This is the easy version of the problem. The key difference between the two versions is highlighted in bold.\n\nA group of $n$ spiders has come together to exchange plushies. Initially, each spider has $1$ plushie. Every year, if spider $i$ has at least one plushie, he will give exactly one plushie to spider $r_i$. Otherwise, he will do nothing. Note that all plushie transfers happen at the same time. In this version, if any spider has more than $1$ plushie at any point in time, they will throw all but $1$ away.\n\nThe process is stable in the current year if each spider has the same number of plushies (before the current year's exchange) as he did the previous year (before the previous year's exchange). Note that year $1$ can never be stable.\n\nFind the first year in which the process becomes stable.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe first line of each test case contains an integer $n$ ($2 \\leq n \\leq 2 \\cdot 10^5$) — the number of spiders.\n\nThe following line contains $n$ integers $r_1, r_2, \\ldots, r_n$ ($1 \\leq r_i \\leq n, r_i \\neq i$) — the recipient of the plushie of each spider.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output an integer on a new line, the first year in which the process becomes stable.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n2\n\n2 1\n\n5\n\n2 3 4 5 1\n\n5\n\n2 1 4 2 3\n\n5\n\n4 1 1 5 4\n\n10\n\n4 3 9 1 6 7 9 10 10 3\n\n```\n\n#### Output #1\n\n```\n2\n2\n5\n4\n5\n```\n\n### Note\n\nFor the second test case:\n\n- At year $1$, the following array shows the number of plushies each spider has: $[1, 1, 1, 1, 1]$. Then, year $1$'s exchange happens.\n- At year $2$, the following array shows the number of plushies each spider has: $[1, 1, 1, 1, 1]$. Since this array is the same as the previous year, this year is stable.\n\nFor the third test case:\n\n- At year $1$, the following array shows the number of plushies each spider has: $[1, 1, 1, 1, 1]$. Then, year $1$'s exchange happens.\n- At year $2$, the following array shows the number of plushies each spider has: $[1, 1, 1, 1, 0]$. Then, year $2$'s exchange happens. Note that even though two spiders gave spider $2$ plushies, spider $2$ may only keep one plushie.\n- At year $3$, the following array shows the number of plushies each spider has: $[1, 1, 0, 1, 0]$. Then, year $3$'s exchange happens.\n- At year $4$, the following array shows the number of plushies each spider has: $[1, 1, 0, 0, 0]$. Then, year $4$'s exchange happens.\n- At year $5$, the following array shows the number of plushies each spider has: $[1, 1, 0, 0, 0]$. Since this array is the same as the previous year, this year is stable.", "cfid": "2044G1"}
{"problem_id": "2044A", "problem_title": "A. Easy Problem", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2044/A", "problem_statement": "Cube is given an integer $n$. She wants to know how many ordered pairs of positive integers $(a,b)$ there are such that $a=n-b$. Since Cube is not very good at math, please help her!\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 99$) — the number of test cases.\n\nThe only line of each test case contains an integer $n$ ($2 \\leq n \\leq 100$).\n\n### Output\n\nFor each test case, output the number of ordered pairs $(a, b)$ on a new line.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2\n\n4\n\n6\n\n```\n\n#### Output #1\n\n```\n1\n3\n5\n```\n\n### Note\n\nIn the first test case, the only ordered pair that works is $(a,b)=(1,1)$.\n\nIn the second test case, the three ordered pairs of $(a,b)$ that work are $(3,1), (2,2), (1,3)$.", "cfid": "2044A"}
{"problem_id": "2044E", "problem_title": "E. Insane Problem", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2044/E", "problem_statement": "Wave is given five integers $k$, $l_1$, $r_1$, $l_2$, and $r_2$. Wave wants you to help her count the number of ordered pairs $(x, y)$ such that all of the following are satisfied:\n\n- $l_1 \\leq x \\leq r_1$.\n- $l_2 \\leq y \\leq r_2$.\n- There exists a non-negative integer $n$ such that $\\frac{y}{x} = k^n$.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe only line of each test case contains five integers $k$, $l_1$, $r_1$, $l_2$, and $r_2$ ($2 \\leq k \\leq 10^9, 1 \\leq l_1 \\leq r_1 \\leq 10^9, 1 \\leq l_2 \\leq r_2 \\leq 10^9$).\n\n### Output\n\nFor each test case, output the number of matching ordered pairs $(x, y)$ on a new line.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n2 2 6 2 12\n\n2 1 1000000000 1 1000000000\n\n3 5 7 15 63\n\n1000000000 1 5 6 1000000000\n\n15 17 78 2596 20914861\n\n```\n\n#### Output #1\n\n```\n12\n1999999987\n6\n1\n197\n```\n\n### Note\n\nIn the third test case, the matching ordered pairs are the following:\n\n- $(5,15)$\n- $(5,45)$\n- $(6,18)$\n- $(6,54)$\n- $(7,21)$\n- $(7,63)$\n\nIn the fourth test case, the only valid ordered pair is $(1,1\\,000\\,000\\,000)$", "cfid": "2044E"}
{"problem_id": "2044C", "problem_title": "C. Hard Problem", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2044/C", "problem_statement": "Ball is the teacher in Paperfold University. The seats of his classroom are arranged in $2$ rows with $m$ seats each.\n\nBall is teaching $a + b + c$ monkeys, and he wants to assign as many monkeys to a seat as possible. Ball knows that $a$ of them only want to sit in row $1$, $b$ of them only want to sit in row $2$, and $c$ of them have no preference. Only one monkey may sit in each seat, and each monkey's preference must be followed if it is seated.\n\nWhat is the maximum number of monkeys that Ball can seat?\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nEach test case contains four integers $m$, $a$, $b$, and $c$ ($1 \\leq m, a, b, c \\leq 10^8$).\n\n### Output\n\nFor each test case, output the maximum number of monkeys you can seat.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n10 5 5 10\n\n3 6 1 1\n\n15 14 12 4\n\n1 1 1 1\n\n420 6 9 69\n\n```\n\n#### Output #1\n\n```\n20\n5\n30\n2\n84\n```\n\n### Note\n\nIn the second test case, $6$ monkeys want to sit in the front row, but only $3$ seats are available. The monkeys that have no preference and the monkeys who prefer sitting in the second row can sit in the second row together. Thus, the answer is $3+2=5$.", "cfid": "2044C"}
{"problem_id": "2040C", "problem_title": "C. Ordered Permutations", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2040/C", "problem_statement": "Consider a permutation$^{\\text{∗}}$ $p_1, p_2, \\ldots, p_n$ of integers from $1$ to $n$. We can introduce the following sum for it$^{\\text{†}}$:\n\n\n\n$$S(p) = \\sum_{1 \\le l \\le r \\le n} \\min(p_l, p_{l + 1}, \\ldots, p_r)$$\n\nLet us consider all permutations of length $n$ with the maximum possible value of $S(p)$. Output the $k$-th of them in lexicographical$^{\\text{‡}}$order, or report that there are less than $k$ of them.\n\n$^{\\text{∗}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n$^{\\text{†}}$For example:\n\n- For the permutation $[1, 2, 3]$ the value of $S(p)$ is equal to $\\min(1) + \\min(1, 2) + \\min(1, 2, 3) + \\min(2) + \\min(2, 3) + \\min(3) =$ $1 + 1 + 1 + 2 + 2 + 3 = 10$\n- For the permutation $[2, 4, 1, 3]$ the value of $S(p)$ is equal to $\\min(2) + \\min(2, 4) + \\min(2, 4, 1) + \\min(2, 4, 1, 3) \\ +$ $ \\min(4) + \\min(4, 1) + \\min(4, 1, 3) \\ +$ $\\min(1) + \\min(1, 3) \\ +$ $\\min(3) =$ $2 + 2 + 1 + 1 + 4 + 1 + 1 + 1 + 1 + 3 = 17$.\n\n$^{\\text{‡}}$An array $a$ is lexicographically smaller than an array $b$ if and only if one of the following holds:\n\n- $a$ is a prefix of $b$, but $a \\ne b$; or\n- in the first position where $a$ and $b$ differ, the array $a$ has a smaller element than the corresponding element in $b$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe only line of each test case contains two integers $n$ and $k$ ($1 \\le n \\le 2 \\cdot 10^5$; $1 \\le k \\le 10^{12}$) — the length of the permutation and the index number of the desired permutation.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10 ^ 5$.\n\n### Output\n\nFor each test case, if there are less than $k$ suitable permutations, print $-1$.\n\nOtherwise, print the $k$-th suitable permutation.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n3 2\n\n3 3\n\n4 11\n\n4 6\n\n6 39\n\n7 34\n\n```\n\n#### Output #1\n\n```\n1 3 2\n2 3 1\n-1\n2 4 3 1\n-1\n2 3 4 5 7 6 1\n```\n\n### Note\n\nLet us calculate the required sum for all permutations of length $3$ (ordered lexicographically):\n\nPermutationValue of $S(p)\n\n$$[1, 2, 3]$$\n\n10\n\n$$[1, 3, 2]$$\n\n10\n\n$$[2, 1, 3]$$\n\n9\n\n$$[2, 3, 1]$$\n\n10\n\n$$[3, 1, 2]$$\n\n9\n\n$$[3, 2, 1]$$\n\n10$\n\nIn the first test case, you have to print the second suitable permutation of length $3$. Looking at the table, we see that it is the permutation $[1, 3, 2]$.\n\nIn the second test case, you have to print the third suitable permutation of length $3$. Looking at the table, we see that it is the permutation $[2, 3, 1]$.", "cfid": "2040C"}
{"problem_id": "2040B", "problem_title": "B. Paint a Strip", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2040/B", "problem_statement": "You have an array of zeros $a_1, a_2, \\ldots, a_n$ of length $n$.\n\nYou can perform two types of operations on it:\n\n1. Choose an index $i$ such that $1 \\le i \\le n$ and $a_i = 0$, and assign $1$ to $a_i$;\n2. Choose a pair of indices $l$ and $r$ such that $1 \\le l \\le r \\le n$, $a_l = 1$, $a_r = 1$, $a_l + \\ldots + a_r \\ge \\lceil\\frac{r - l + 1}{2}\\rceil$, and assign $1$ to $a_i$ for all $l \\le i \\le r$.\n\nWhat is the minimum number of operations of the first type needed to make all elements of the array equal to one?\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe only line of each test case contains one integer $n$ ($1 \\le n \\le 10^5$) — the length of the array.\n\nNote that there is no limit on the sum of $n$ over all test cases.\n\n### Output\n\nFor each test case, print one integer — the minimum number of needed operations of first type.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n1\n\n2\n\n4\n\n20\n\n```\n\n#### Output #1\n\n```\n1\n2\n2\n4\n```\n\n### Note\n\nIn the first test case, you can perform an operation of the $1$st type with $i = 1$.\n\nIn the second test case, you can perform the following sequence of operations:\n\n1. Operation of $1$st type, $i = 1$. After performing this operation, the array will look like this: $[1, 0]$.\n2. Operation of $1$st type, $i = 2$. After performing this operation, the array will look like this: $[1, 1]$.\n\nThe sequence of operations in the second test case![](https://espresso.codeforces.com/ecf02679535327fda085e7f1b907288a051b3fb0.png)\n\nIn the third test case, you can perform the following sequence of operations:\n\n1. Operation of $1$st type, $i = 1$. After performing this operation, the array will look like this: $[1, 0, 0, 0]$.\n2. Operation of $1$st type, $i = 4$. After performing this operation, the array will look like this: $[1, 0, 0, 1]$.\n3. Operation of $2$nd type, $l = 1$, $r = 4$. On this segment, $a_l + \\ldots + a_r = a_1 + a_2 + a_3 + a_4 = 2$, which is not less than $\\lceil\\frac{r - l + 1}{2}\\rceil = 2$. After performing this operation, the array will look like this: $[1, 1, 1, 1]$.\n\nThe sequence of operations in the third test case![](https://espresso.codeforces.com/d3efd70fa3bf233db7f264ab6039a169081d8cf5.png)", "cfid": "2040B"}
{"problem_id": "2040A", "problem_title": "A. Game of Division", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2040/A", "problem_statement": "You are given an array of integers $a_1, a_2, \\ldots, a_n$ of length $n$ and an integer $k$.\n\nTwo players are playing a game. The first player chooses an index $1 \\le i \\le n$. Then the second player chooses a different index $1 \\le j \\le n, i \\neq j$. The first player wins if $|a_i - a_j|$ is not divisible by $k$. Otherwise, the second player wins.\n\nWe play as the first player. Determine whether it is possible to win, and if so, which index $i$ should be chosen.\n\nThe absolute value of a number $x$ is denoted by $|x|$ and is equal to $x$ if $x \\ge 0$, and $-x$ otherwise.\n\n### Input\n\nEach test contains multiple test cases. The first line of input contains a single integer $t$ ($1 \\le t \\le 100$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\le n \\le 100$; $1 \\le k \\le 100$) — the length of the array and the number $k$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 100$) — the elements of the array $a$.\n\n### Output\n\nFor each test case, if it is impossible for the first player to win, print \"NO\" (without quotes).\n\nOtherwise, print \"YES\" (without quotes) and on the next line the appropriate index $1 \\le i \\le n$. If there are multiple solutions, print any of them.\n\nYou can output each letter in any case (lowercase or uppercase). For example, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will be recognized as a positive answer.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n3 2\n\n1 2 3\n\n4 2\n\n1 2 4 5\n\n5 3\n\n10 7 3 4 5\n\n5 3\n\n1 31 15 55 36\n\n2 1\n\n17 17\n\n2 2\n\n17 18\n\n1 3\n\n6\n\n```\n\n#### Output #1\n\n```\nYES\n2\nNO\nYES\n3\nNO\nNO\nYES\n2\nYES\n1\n```\n\n### Note\n\nIn the first test case, the first player can choose $a_2 = 2$. Then:\n\n- If the second player chooses $a_1 = 1$, the resulting difference is $|2 - 1| = 1$ which is not divisible by $k = 2$.\n- If the second player chooses $a_3 = 3$, the resulting difference is $|2 - 3| = 1$ which is not divisible by $k = 2$.\n\nIn the second test case:\n\n- If the first player chooses $a_1 = 1$ and then the second player chooses $a_4 = 5$, the resulting difference is $|1 - 5| = 4$ which is divisible by $k = 2$.\n- If the first player chooses $a_2 = 2$ and then the second player chooses $a_3 = 4$, the resulting difference is $|2 - 4| = 2$ which is divisible by $k = 2$.\n- If the first player chooses $a_3 = 4$ and then the second player chooses $a_2 = 2$, the resulting difference is $|4 - 2| = 2$ which is divisible by $k = 2$.\n- If the first player chooses $a_4 = 5$ and then the second player chooses $a_1 = 1$, the resulting difference is $|5 - 1| = 4$ which is divisible by $k = 2$.\n\nIn any case, the second player wins.", "cfid": "2040A"}
{"problem_id": "2050D", "problem_title": "D. Digital string maximization", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2050/D", "problem_statement": "You are given a string $s$, consisting of digits from $0$ to $9$. In one operation, you can pick any digit in this string, except for $0$ or the leftmost digit, decrease it by $1$, and then swap it with the digit left to the picked.\n\nFor example, in one operation from the string $1023$, you can get $1103$ or $1022$.\n\nFind the lexicographically maximum string you can obtain after any number of operations.\n\n### Input\n\nThe first line of the input consists of an integer $t$ ($1 \\le t \\le 10^4$)  — the number of test cases.\n\nEach test case consists of a single line consisting of a digital string $s$ ($1 \\le |s| \\le 2\\cdot 10^5$), where $|s|$ denotes the length of $s$. The string does not contain leading zeroes.\n\nIt is guaranteed that the sum of $|s|$ of all test cases doesn't exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, print the answer on a separate line.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n19\n\n1709\n\n11555\n\n51476\n\n9876543210\n\n5891917899\n\n```\n\n#### Output #1\n\n```\n81\n6710\n33311\n55431\n9876543210\n7875567711\n```\n\n### Note\n\nIn the first example, the following sequence of operations is suitable: $19 \\rightarrow 81$.\n\nIn the second example, the following sequence of operations is suitable: $1709 \\rightarrow 1780 \\rightarrow 6180 \\rightarrow 6710$.\n\nIn the fourth example, the following sequence of operations is suitable: $51476 \\rightarrow 53176 \\rightarrow 53616 \\rightarrow 53651 \\rightarrow 55351 \\rightarrow 55431$.", "cfid": "2050D"}
{"problem_id": "2050E", "problem_title": "E. Three Strings", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2050/E", "problem_statement": "You are given three strings: $a$, $b$, and $c$, consisting of lowercase Latin letters. The string $c$ was obtained in the following way:\n\n1. At each step, either string $a$ or string $b$ was randomly chosen, and the first character of the chosen string was removed from it and appended to the end of string $c$, until one of the strings ran out. After that, the remaining characters of the non-empty string were added to the end of $c$.\n2. Then, a certain number of characters in string $c$ were randomly changed.\n\nFor example, from the strings $a=\\color{red}{\\text{abra}}$ and $b=\\color{blue}{\\text{cada}}$, without character replacements, the strings $\\color{blue}{\\text{ca}}\\color{red}{\\text{ab}}\\color{blue}{\\text{d}}\\color{red}{\\text{ra}}\\color{blue}{\\text{a}}$, $\\color{red}{\\text{abra}}\\color{blue}{\\text{cada}}$, $\\color{red}{\\text{a}}\\color{blue}{\\text{cada}}\\color{red}{\\text{bra}}$ could be obtained.\n\nFind the minimum number of characters that could have been changed in string $c$.\n\n### Input\n\nThe first line of the input contains a single integer $t$ ($1 \\le t \\le 10^3$) — the number of test cases.\n\nThe first line of each test case contains one string of lowercase Latin letters $a$ ($1 \\leq |a| \\leq 10^3$) — the first string, where $|a|$ denotes the length of string $a$.\n\nThe second line of each test case contains one string of lowercase Latin letters $b$ ($1 \\leq |b| \\leq 10^3$) — the second string, where $|b|$ denotes the length of string $b$.\n\nThe third line of each test case contains one string of lowercase Latin letters $c$ ($|c| = |a| + |b|$) — the third string.\n\nIt is guaranteed that the sum of $|a|$ across all test cases does not exceed $2 \\cdot 10^3$. Also, the sum of $|b|$ across all test cases does not exceed $2 \\cdot 10^3$.\n\n### Output\n\nFor each test case, output a single integer — the minimum number of characters that could have been changed in string $c$.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\na\n\nb\n\ncb\n\nab\n\ncd\n\nacbd\n\nab\n\nba\n\naabb\n\nxxx\n\nyyy\n\nxyxyxy\n\na\n\nbcd\n\ndecf\n\ncodes\n\nhorse\n\ncodeforces\n\negg\n\nannie\n\negaegaeg\n\n```\n\n#### Output #1\n\n```\n1\n0\n2\n0\n3\n2\n3\n```", "cfid": "2050E"}
{"problem_id": "2050F", "problem_title": "F. Maximum modulo equality", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2050/F", "problem_statement": "You are given an array $a$ of length $n$ and $q$ queries $l$, $r$.\n\nFor each query, find the maximum possible $m$, such that all elements $a_l$, $a_{l+1}$, ..., $a_r$ are equal modulo $m$. In other words, $a_l \\bmod m = a_{l+1} \\bmod m = \\dots = a_r \\bmod m$, where $a \\bmod b$ — is the remainder of division $a$ by $b$. In particular, when $m$ can be infinite, print $0$.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$, $q$ ($1 \\le n, q \\le 2\\cdot 10^5$) — the length of the array and the number of queries.\n\nThe second line of each test case contains $n$ integers $a_i$ ($1 \\le a_i \\le 10^9$) — the elements of the array.\n\nIn the following $q$ lines of each test case, two integers $l$, $r$ are provided ($1 \\le l \\le r \\le n$) — the range of the query.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2\\cdot 10^5$, and the sum of $q$ does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each query, output the maximum value $m$ described in the statement.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n5 5\n\n5 14 2 6 3\n\n4 5\n\n1 4\n\n2 4\n\n3 5\n\n1 1\n\n1 1\n\n7\n\n1 1\n\n3 2\n\n1 7 8\n\n2 3\n\n1 2\n\n```\n\n#### Output #1\n\n```\n3 1 4 1 0\n0\n1 6\n```\n\n### Note\n\nIn the first query of the first sample, $6 \\bmod 3 = 3 \\bmod 3 = 0$. It can be shown that for greater $m$, the required condition will not be fulfilled.\n\nIn the third query of the first sample, $14 \\bmod 4 = 2 \\bmod 4 = 6 \\bmod 4 = 2$. It can be shown that for greater $m$, the required condition will not be fulfilled.", "cfid": "2050F"}
{"problem_id": "2050B", "problem_title": "B. Transfusion", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2050/B", "problem_statement": "You are given an array $a$ of length $n$. In one operation, you can pick an index $i$ from $2$ to $n-1$ inclusive, and do one of the following actions:\n\n- Decrease $a_{i-1}$ by $1$, then increase $a_{i+1}$ by $1$.\n\n- Decrease $a_{i+1}$ by $1$, then increase $a_{i-1}$ by $1$.\n\nAfter each operation, all the values must be non-negative. Can you make all the elements equal after any number of operations?\n\n### Input\n\nFirst line of input consists of one integer $t$ ($1 \\le t \\le 10^4$)  — the number of test cases.\n\nFirst line of each test case consists of one integer $n$ ($3 \\le n \\le 2\\cdot 10^5$).\n\nSecond line of each test case consists of $n$ integers $a_i$ ($1 \\le a_i \\le 10^9$).\n\nIt is guaranteed that the sum of $n$ of all test cases doesn't exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, print \"YES\" without quotation marks if it is possible to make all the elements equal after any number of operations; otherwise, print \"NO\" without quotation marks.\n\nYou can print answers in any register: \"yes\", \"YeS\", \"nO\"  — will also be considered correct.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n3\n\n3 2 1\n\n3\n\n1 1 3\n\n4\n\n1 2 5 4\n\n4\n\n1 6 6 1\n\n5\n\n6 2 1 4 2\n\n4\n\n1 4 2 1\n\n5\n\n3 1 2 1 3\n\n3\n\n2 4 2\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nYES\nNO\nYES\nNO\nNO\nNO\n```", "cfid": "2050B"}
{"problem_id": "2050C", "problem_title": "C. Uninteresting Number", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2050/C", "problem_statement": "You are given a number $n$ with a length of no more than $10^5$.\n\nYou can perform the following operation any number of times: choose one of its digits, square it, and replace the original digit with the result. The result must be a digit (that is, if you choose the digit $x$, then the value of $x^2$ must be less than $10$).\n\nIs it possible to obtain a number that is divisible by $9$ through these operations?\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe only line of each test case contains the number $n$, without leading zeros. The length of the number does not exceed $10^5$.\n\nIt is guaranteed that the sum of the lengths of the numbers across all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, output \"YES\" if it is possible to obtain a number divisible by $9$ using the described operations, and \"NO\" otherwise.\n\nYou can output each letter in any case (lowercase or uppercase). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be accepted as a positive answer.\n\n### Example\n\n#### Input #1\n\n```\n\n9\n\n123\n\n322\n\n333333333333\n\n9997\n\n5472778912773\n\n1234567890\n\n23\n\n33\n\n52254522632\n\n```\n\n#### Output #1\n\n```\nNO\nYES\nYES\nNO\nNO\nYES\nNO\nYES\nYES\n```\n\n### Note\n\nIn the first example, from the integer $123$, it is possible to obtain only $123$, $143$, $129$, and $149$, none of which are divisible by $9$.\n\nIn the second example, you need to replace the second digit with its square; then $n$ will equal $342 = 38 \\cdot 9$.\n\nIn the third example, the integer is already divisible by $9$.", "cfid": "2050C"}
{"problem_id": "2050A", "problem_title": "A. Line Breaks", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2050/A", "problem_statement": "Kostya has a text $s$ consisting of $n$ words made up of Latin alphabet letters. He also has two strips on which he must write the text. The first strip can hold $m$ characters, while the second can hold as many as needed.\n\nKostya must choose a number $x$ and write the first $x$ words from $s$ on the first strip, while all the remaining words are written on the second strip. To save space, the words are written without gaps, but each word must be entirely on one strip.\n\nSince space on the second strip is very valuable, Kostya asks you to choose the maximum possible number $x$ such that all words $s_1, s_2, \\dots, s_x$ fit on the first strip of length $m$.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\le t \\le 1000$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\le n \\le 50$; $1 \\le m \\le 500$) — the number of words in the list and the maximum number of characters that can be on the first strip.\n\nThe next $n$ lines contain one word $s_i$ of lowercase Latin letters, where the length of $s_i$ does not exceed $10$.\n\n### Output\n\nFor each test case, output the maximum number of words $x$ such that the first $x$ words have a total length of no more than $m$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3 1\n\na\n\nb\n\nc\n\n2 9\n\nalpha\n\nbeta\n\n4 12\n\nhello\n\nworld\n\nand\n\ncodeforces\n\n3 2\n\nab\n\nc\n\nd\n\n3 2\n\nabc\n\nab\n\na\n\n```\n\n#### Output #1\n\n```\n1\n2\n2\n1\n0\n```", "cfid": "2050A"}
{"problem_id": "2047A", "problem_title": "A. Alyona and a Square Jigsaw Puzzle", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2047/A", "problem_statement": "Alyona assembles an unusual square Jigsaw Puzzle. She does so in $n$ days in the following manner:\n\n- On the first day, she starts by placing the central piece in the center of the table.\n- On each day after the first one, she places a certain number of pieces around the central piece in clockwise order, always finishing each square layer completely before starting a new one.\n\nFor example, she places the first $14$ pieces in the following order:\n\n![](https://espresso.codeforces.com/0bf6bf6b73e87a48f211b53722a2e082fe0d198f.png)The colors denote the layers. The third layer is still unfinished.\n\nAlyona is happy if at the end of the day the assembled part of the puzzle does not have any started but unfinished layers. Given the number of pieces she assembles on each day, find the number of days Alyona is happy on.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 500$). The description of the test cases follows.\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 100$), the number of days.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 100$, $a_1 = 1$), where $a_i$ is the number of pieces Alyona assembles on the $i$-th day.\n\nIt is guaranteed in each test case that at the end of the $n$ days, there are no unfinished layers.\n\n### Output\n\nFor each test case, print a single integer: the number of days when Alyona is happy.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n1\n\n1\n\n2\n\n1 8\n\n5\n\n1 3 2 1 2\n\n7\n\n1 2 1 10 2 7 2\n\n14\n\n1 10 10 100 1 1 10 1 10 2 10 2 10 1\n\n```\n\n#### Output #1\n\n```\n1\n2\n2\n2\n3\n```\n\n### Note\n\nIn the first test case, in the only day Alyona finishes the only layer.\n\nIn the second test case, on the first day, Alyona finishes the first layer, and on the second day, she finishes the second layer.\n\nIn the third test case, she finishes the second layer in a few days.\n\nIn the fourth test case, she finishes the second layer and immediately starts the next one on the same day, therefore, she is not happy on that day. She is only happy on the first and last days.\n\nIn the fifth test case, Alyona is happy on the first, fourth, and last days.", "cfid": "2047A"}
{"problem_id": "2046B", "problem_title": "B. Move Back at a Cost", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2046/B", "problem_statement": "You are given an array of integers $a$ of length $n$. You can perform the following operation zero or more times:\n\n- In one operation choose an index $i$ ($1 \\le i \\le n$), assign $a_i := a_i + 1$, and then move $a_i$ to the back of the array (to the rightmost position). For example, if $a = [3, 5, 1, 9]$, and you choose $i = 2$, the array becomes $[3, 1, 9, 6]$.\n\nFind the lexicographically smallest$^{\\text{∗}}$ array you can get by performing these operations.\n\n$^{\\text{∗}}$An array $c$ is lexicographically smaller than an array $d$ if and only if one of the following holds:\n\n- $c$ is a prefix of $d$, but $c \\ne d$; or\n- in the first position where $c$ and $d$ differ, the array $c$ has a smaller element than the corresponding element in $d$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 10^5$), the length of the array.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$), the elements of the array.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, print the lexicographically smallest array you can get.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3\n\n2 1 3\n\n5\n\n1 2 2 1 4\n\n6\n\n1 2 3 6 5 4\n\n```\n\n#### Output #1\n\n```\n1 3 3\n1 1 3 3 5\n1 2 3 4 6 7\n```", "cfid": "2046B"}
{"problem_id": "2047B", "problem_title": "B. Replace Character", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2047/B", "problem_statement": "You're given a string $s$ of length $n$, consisting of only lowercase English letters.\n\nYou must do the following operation exactly once:\n\n- Choose any two indices $i$ and $j$ ($1 \\le i, j \\le n$). You can choose $i = j$.\n- Set $s_i := s_j$.\n\nYou need to minimize the number of distinct permutations$^\\dagger$ of $s$. Output any string with the smallest number of distinct permutations after performing exactly one operation.\n\n$^\\dagger$ A permutation of the string is an arrangement of its characters into any order. For example, \"bac\" is a permutation of \"abc\" but \"bcc\" is not.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 500$). The description of the test cases follows.\n\nThe first line of each test case contains $n$ ($1 \\le n \\le 10$) — the length of string $s$.\n\nThe second line of each test case contains $s$ of length $n$. The string contains only lowercase English letters.\n\n### Output\n\nFor each test case, output the required $s$ after applying exactly one operation. If there are multiple solutions, print any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n3\n\nabc\n\n4\n\nxyyx\n\n8\n\nalphabet\n\n1\n\nk\n\n10\n\naabbccddee\n\n6\n\nttbddq\n\n```\n\n#### Output #1\n\n```\ncbc\nyyyx\nalphaaet\nk\neabbccddee\ntttddq\n```\n\n### Note\n\nIn the first test case, we can obtain the following strings in one operation: \"abc\", \"bbc\", \"cbc\", \"aac\", \"acc\", \"aba\", and \"abb\".\n\nThe string \"abc\" has $6$ distinct permutations: \"abc\", \"acb\", \"bac\", \"bca\", \"cab\", and \"cba\".\n\nThe string \"cbc\" has $3$ distinct permutations: \"bcc\", \"cbc\", and \"ccb\", which is the lowest of all the obtainable strings. In fact, all obtainable strings except \"abc\" have $3$ permutations, so any of them would be accepted.", "cfid": "2047B"}
{"problem_id": "2046A", "problem_title": "A. Swap Columns and Find a Path", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2046/A", "problem_statement": "There is a matrix consisting of $2$ rows and $n$ columns. The rows are numbered from $1$ to $2$ from top to bottom; the columns are numbered from $1$ to $n$ from left to right. Let's denote the cell on the intersection of the $i$-th row and the $j$-th column as $(i,j)$. Each cell contains an integer; initially, the integer in the cell $(i,j)$ is $a_{i,j}$.\n\nYou can perform the following operation any number of times (possibly zero):\n\n- choose two columns and swap them (i. e. choose two integers $x$ and $y$ such that $1 \\le x < y \\le n$, then swap $a_{1,x}$ with $a_{1,y}$, and then swap $a_{2,x}$ with $a_{2,y}$).\n\nAfter performing the operations, you have to choose a path from the cell $(1,1)$ to the cell $(2,n)$. For every cell $(i,j)$ in the path except for the last, the next cell should be either $(i+1,j)$ or $(i,j+1)$. Obviously, the path cannot go outside the matrix.\n\nThe cost of the path is the sum of all integers in all $(n+1)$ cells belonging to the path. You have to perform the operations and choose a path so that its cost is maximum possible.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 5000$). The description of the test cases follows.\n\nEach test case consists of three lines:\n\n- the first line contains one integer $n$ ($1 \\le n \\le 5000$) — the number of columns in the matrix;\n- the second line contains $n$ integers $a_{1,1}, a_{1,2}, \\ldots, a_{1,n}$ ($-10^5 \\le a_{i,j} \\le 10^5$) — the first row of the matrix;\n- the third line contains $n$ integers $a_{2,1}, a_{2,2}, \\ldots, a_{2,n}$ ($-10^5 \\le a_{i,j} \\le 10^5$) — the second row of the matrix.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5000$.\n\n### Output\n\nFor each test case, print one integer — the maximum cost of a path you can obtain.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n1\n\n-10\n\n5\n\n3\n\n1 2 3\n\n10 -5 -3\n\n4\n\n2 8 5 3\n\n1 10 3 4\n\n```\n\n#### Output #1\n\n```\n-5\n16\n29\n```\n\n### Note\n\nHere are the explanations of the first three test cases of the example. The left matrix is the matrix given in the input, the right one is the state of the matrix after several column swaps (possibly zero). The optimal path is highlighted in green.\n\n![](https://espresso.codeforces.com/e7b0e0b73deafdd300cca5214c9e7584889e20ad.png)", "cfid": "2046A"}
{"problem_id": "2042A", "problem_title": "A. Greedy Monocarp", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2042/A", "problem_statement": "There are $n$ chests; the $i$-th chest initially contains $a_i$ coins. For each chest, you can choose any non-negative ($0$ or greater) number of coins to add to that chest, with one constraint: the total number of coins in all chests must become at least $k$.\n\nAfter you've finished adding coins to the chests, greedy Monocarp comes, who wants the coins. He will take the chests one by one, and since he is greedy, he will always choose the chest with the maximum number of coins. Monocarp will stop as soon as the total number of coins in chests he takes is at least $k$.\n\nYou want Monocarp to take as few coins as possible, so you have to add coins to the chests in such a way that, when Monocarp stops taking chests, he will have exactly $k$ coins. Calculate the minimum number of coins you have to add.\n\n### Input\n\nThe first line contains one integer $t$ ($1 \\le t \\le 1000$) — the number of test cases.\n\nEach test case consists of two lines:\n\n- the first line contains two integers $n$ and $k$ ($1 \\le n \\le 50$; $1 \\le k \\le 10^7$);\n- the second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le k$).\n\n### Output\n\nFor each test case, print one integer — the minimum number of coins you have to add so that, when Monocarp stops taking the chests, he has exactly $k$ coins. It can be shown that under the constraints of the problem, it is always possible.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n5 4\n\n4 1 2 3 2\n\n5 10\n\n4 1 2 3 2\n\n2 10\n\n1 1\n\n3 8\n\n3 3 3\n\n```\n\n#### Output #1\n\n```\n0\n1\n8\n2\n```\n\n### Note\n\nIn the first test case of the example, you don't have to add any coins. When Monocarp arrives, he will take the chest with $4$ coins, so he will have exactly $4$ coins.\n\nIn the second test case of the example, you can add $1$ coin to the $4$-th chest, so, when Monocarp arrives, he will take a chest with $4$ coins, then another chest with $4$ coins, and a chest with $2$ coins.\n\nIn the third test case of the example, you can add $3$ coins to the $1$-st chest and $5$ coins to the $2$-nd chest.\n\nIn the fourth test case of the example, you can add $1$ coin to the $1$-st chest and $1$ coin to the $3$-rd chest.", "cfid": "2042A"}
{"problem_id": "2042C", "problem_title": "C. Competitive Fishing", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2042/C", "problem_statement": "Alice and Bob participate in a fishing contest! In total, they caught $n$ fishes, numbered from $1$ to $n$ (the bigger the fish, the greater its index). Some of these fishes were caught by Alice, others — by Bob.\n\nTheir performance will be evaluated as follows. First, an integer $m$ will be chosen, and all fish will be split into $m$ non-empty groups. The first group should contain several (at least one) smallest fishes, the second group — several (at least one) next smallest fishes, and so on. Each fish should belong to exactly one group, and each group should be a contiguous subsegment of fishes. Note that the groups are numbered in exactly that order; for example, the fishes from the second group cannot be smaller than the fishes from the first group, since the first group contains the smallest fishes.\n\nThen, each fish will be assigned a value according to its group index: each fish in the first group gets value equal to $0$, each fish in the second group gets value equal to $1$, and so on. So, each fish in the $i$-th group gets value equal to $(i-1)$.\n\nThe score of each contestant is simply the total value of all fishes that contestant caught.\n\nYou want Bob's score to exceed Alice's score by at least $k$ points. What is the minimum number of groups ($m$) you have to split the fishes into? If it is impossible, you should report that.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $k$ ($2 \\le n \\le 2 \\cdot 10^5$; $1 \\le k \\le 10^9$).\n\nThe second line contains a string, consisting of exactly $n$ characters. The $i$-th character is either 0 (denoting that the $i$-th fish was caught by Alice) or 1 (denoting that the $i$-th fish was caught by Bob).\n\nAdditional constraint on the input: the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print a single integer — the minimum number of groups you have to split the fishes into; or -1 if it's impossible.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n4 1\n\n1001\n\n4 1\n\n1010\n\n4 1\n\n0110\n\n4 2\n\n0110\n\n6 3\n\n001110\n\n10 20\n\n1111111111\n\n5 11\n\n11111\n\n```\n\n#### Output #1\n\n```\n2\n-1\n2\n-1\n3\n4\n-1\n```\n\n### Note\n\nIn the first test case of the example, you can split the fishes into groups as follows: the first three fishes form the $1$-st group, the last fish forms the $2$-nd group. Then, Bob's score will be $1$, and Alice's score will be $0$.\n\nIn the third test case of the example, you can split the fishes into groups as follows: the first fish forms the $1$-st group, the last three fishes form the $2$-nd group. Then, Bob's score will be $2$, and Alice's score will be $1$.", "cfid": "2042C"}
{"problem_id": "2042B", "problem_title": "B. Game with Colored Marbles", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2042/B", "problem_statement": "Alice and Bob play a game. There are $n$ marbles, the $i$-th of them has color $c_i$. The players take turns; Alice goes first, then Bob, then Alice again, then Bob again, and so on.\n\nDuring their turn, a player must take one of the remaining marbles and remove it from the game. If there are no marbles left (all $n$ marbles have been taken), the game ends.\n\nAlice's score at the end of the game is calculated as follows:\n\n- she receives $1$ point for every color $x$ such that she has taken at least one marble of that color;\n- additionally, she receives $1$ point for every color $x$ such that she has taken all marbles of that color (of course, only colors present in the game are considered).\n\nFor example, suppose there are $5$ marbles, their colors are $[1, 3, 1, 3, 4]$, and the game goes as follows: Alice takes the $1$-st marble, then Bob takes the $3$-rd marble, then Alice takes the $5$-th marble, then Bob takes the $2$-nd marble, and finally, Alice takes the $4$-th marble. Then, Alice receives $4$ points: $3$ points for having at least one marble for colors $1$, $3$ and $4$, and $1$ point for having all marbles of color $4$. Note that this strategy is not necessarily optimal for both players.\n\nAlice wants to maximize her score at the end of the game. Bob wants to minimize it. Both players play optimally (i. e. Alice chooses a strategy which allows her to get as many points as possible, and Bob chooses a strategy which minimizes the amount of points Alice can get).\n\nCalculate Alice's score at the end of the game.\n\n### Input\n\nThe first line contains one integer $t$ ($1 \\le t \\le 1000$) — the number of test cases.\n\nEach test case consists of two lines:\n\n- the first line contains one integer $n$ ($1 \\le n \\le 1000$) — the number of marbles;\n- the second line contains $n$ integers $c_1, c_2, \\dots, c_n$ ($1 \\le c_i \\le n$) — the colors of the marbles.\n\nAdditional constraint on the input: the sum of $n$ over all test cases does not exceed $1000$.\n\n### Output\n\nFor each test case, print one integer — Alice's score at the end of the game, assuming that both players play optimally.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n5\n\n1 3 1 3 4\n\n3\n\n1 2 3\n\n4\n\n4 4 4 4\n\n```\n\n#### Output #1\n\n```\n4\n4\n1\n```\n\n### Note\n\nIn the second test case of the example, the colors of all marbles are distinct, so, no matter how the players act, Alice receives $4$ points for having all marbles of two colors, and no marbles of the third color.\n\nIn the third test case of the example, the colors of all marbles are the same, so, no matter how the players act, Alice receives $1$ point for having at least one (but not all) marble of color $4$.", "cfid": "2042B"}
{"problem_id": "2034D", "problem_title": "D. Darius' Wisdom", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2034/D", "problem_statement": "[Darius the Great](https://en.wikipedia.org/wiki/Darius_the_Great) is constructing $n$ stone columns, each consisting of a base and between $0$, $1$, or $2$ inscription pieces stacked on top.\n\nIn each move, Darius can choose two columns $u$ and $v$ such that the difference in the number of inscriptions between these columns is exactly $1$, and transfer one inscription from the column with more inscriptions to the other one. It is guaranteed that at least one column contains exactly $1$ inscription.\n\n![](https://espresso.codeforces.com/d4cdf6815b1220ffe2be57e8bcb7d42bfa773cfc.webp)\n\nSince beauty is the main pillar of historical buildings, Darius wants the columns to have ascending heights. To avoid excessive workers' efforts, he asks you to plan a sequence of at most $n$ moves to arrange the columns in non-decreasing order based on the number of inscriptions. Minimizing the number of moves is not required.\n\n### Input\n\nThe first line contains an integer $t$ — the number of test cases. ($1 \\leq t \\leq 3000$)\n\nThe first line of each test case contains an integer $n$ — the number of stone columns. ($1 \\leq n \\leq 2 \\cdot 10^5$)\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$, where $a_i \\in \\{0,1,2\\}$ represents the initial number of inscriptions in the $i$-th column. It is guaranteed that at least one column has exactly $1$ inscription.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output an integer $k$ — the number of moves used to sort the columns. ($0 \\leq k \\leq n$)\n\nThen, output $k$ lines, each containing two integers $u_i$ and $v_i$ ($1 \\leq u_i, v_i \\leq n$), representing the indices of the columns involved in the $i$-th move. During each move, it must hold that $|a_{u_i} - a_{v_i}| = 1$, and one inscription is transferred from the column with more inscriptions to the other.\n\nIt can be proven that a valid solution always exists under the given constraints.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n4\n\n0 2 0 1\n\n3\n\n1 2 0\n\n6\n\n0 1 1 2 2 2\n\n```\n\n#### Output #1\n\n```\n2\n2 4\n2 3\n2\n3 1\n2 3\n0\n```\n\n### Note\n\nColumns state in the first test case:\n\n- Initial: $0, 2, 0, 1$\n- After the first move: $0, 1, 0, 2$\n- After the second move: $0, 0, 1, 2$\n\nColumns state in the second test case:\n\n- Initial: $1, 2, 0$\n- After the first move: $0, 2, 1$\n- After the second move: $0, 1, 2$\n\nIn the third test case, the column heights are already sorted in ascending order.", "cfid": "2034D"}
{"problem_id": "2034A", "problem_title": "A. King Keykhosrow's Mystery", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2034/A", "problem_statement": "There is a tale about the wise [King Keykhosrow](https://en.wikipedia.org/wiki/Kay_Khosrow) who owned a grand treasury filled with treasures from across the Persian Empire. However, to prevent theft and ensure the safety of his wealth, King Keykhosrow's vault was sealed with a magical lock that could only be opened by solving a riddle.\n\n![](https://espresso.codeforces.com/02ff1013de2c71e8f78fd7d74b43bd365dcc6a3b.webp)\n\nThe riddle involves two sacred numbers $a$ and $b$. To unlock the vault, the challenger must determine the smallest key number $m$ that satisfies two conditions:\n\n- $m$ must be greater than or equal to at least one of $a$ and $b$.\n- The remainder when $m$ is divided by $a$ must be equal to the remainder when $m$ is divided by $b$.\n\nOnly by finding the smallest correct value of $m$ can one unlock the vault and access the legendary treasures!\n\n### Input\n\nThe first line of the input contains an integer $t$ ($1 \\leq t \\leq 100$), the number of test cases.\n\nEach test case consists of a single line containing two integers $a$ and $b$ ($1 \\leq a, b \\leq 1000$).\n\n### Output\n\nFor each test case, print the smallest integer $m$ that satisfies the conditions above.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n4 6\n\n472 896\n\n```\n\n#### Output #1\n\n```\n12\n52864\n```\n\n### Note\n\nIn the first test case, you can see that:\n\n- $4 \\bmod 4 = 0$ but $4 \\bmod 6 = 4$\n- $5 \\bmod 4 = 1$ but $5 \\bmod 6 = 5$\n- $6 \\bmod 4 = 2$ but $6 \\bmod 6 = 0$\n- $7 \\bmod 4 = 3$ but $7 \\bmod 6 = 1$\n- $8 \\bmod 4 = 0$ but $8 \\bmod 6 = 2$\n- $9 \\bmod 4 = 1$ but $9 \\bmod 6 = 3$\n- $10 \\bmod 4 = 2$ but $10 \\bmod 6 = 4$\n- $11 \\bmod 4 = 3$ but $11 \\bmod 6 = 5$\n\nso no integer less than $12$ satisfies the desired properties.", "cfid": "2034A"}
{"problem_id": "2034C", "problem_title": "C. Trapped in the Witch's Labyrinth", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2034/C", "problem_statement": "In the [fourth labor of Rostam](https://www.gathertales.com/story/the-tale-of-the-haft-khan-seven-labors-of-rostam/sid-604), the legendary hero from the [Shahnameh](https://en.wikipedia.org/wiki/Shahnameh), an old witch has created a magical maze to trap him. The maze is a rectangular grid consisting of $n$ rows and $m$ columns. Each cell in the maze points in a specific direction: up, down, left, or right. The witch has enchanted Rostam so that whenever he is in a cell, he will move to the next cell in the direction indicated by that cell.\n\n![](https://espresso.codeforces.com/fe31b399bb2207f13616c91f5553e04c54d77805.webp)\n\nIf Rostam eventually exits the maze, he will be freed from the witch's enchantment and will defeat her. However, if he remains trapped within the maze forever, he will never escape.\n\nThe witch has not yet determined the directions for all the cells. She wants to assign directions to the unspecified cells in such a way that the number of starting cells from which Rostam will be trapped forever is maximized. Your task is to find the maximum number of starting cells which make Rostam trapped.\n\n### Input\n\nThe first line of the input contains an integer $t$ ($1 \\leq t \\leq 10^4$), the number of test cases.\n\nFor each test case:\n\n- The first line contains two integers $n$ and $m$ ($1 \\leq n, m \\leq 1000$), representing the number of rows and columns in the maze.\n- Each of the next $n$ lines contains a string of $m$ characters representing the directions in the maze. Each character is one of the following:\n  - U (up)\n  - D (down)\n  - L (left)\n  - R (right)\n  - ? (unspecified direction)\n\nIt's guaranteed that the sum of $n \\cdot m$ over all test cases is at most $10^6$.\n\n### Output\n\nFor each test case, print a single integer, the maximum number of starting cells from which Rostam will be trapped forever after assigning directions to the unspecified cells optimally.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3 3\n\nUUU\n\nL?R\n\nDDD\n\n2 3\n\n???\n\n???\n\n3 3\n\n?U?\n\nR?L\n\nRDL\n\n```\n\n#### Output #1\n\n```\n0\n6\n5\n```\n\n### Note\n\nIn the first test case, all of the cells will be good no matter what you do.\n\nIn the second test case, if you assign the ?s like the picture below, all of the cells will be bad:\n\n![](https://espresso.codeforces.com/c667fb00a6b0c8bcc1f533cb121685a1542afcf7.png)\n\nIn the third test case, if you assign the ?s like the picture below, you will have $5$ bad cells (red-shaded cells):\n\n![](https://espresso.codeforces.com/f2e2c3b844c4b7a8643622146bdf82e54c8ec8e3.png)", "cfid": "2034C"}
{"problem_id": "2034B", "problem_title": "B. Rakhsh's Revival", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2034/B", "problem_statement": "[Rostam](https://en.wikipedia.org/wiki/Rostam)'s loyal horse, [Rakhsh](https://en.wikipedia.org/wiki/Rakhsh), has seen better days. Once powerful and fast, Rakhsh has grown weaker over time, struggling to even move. Rostam worries that if too many parts of Rakhsh's body lose strength at once, Rakhsh might stop entirely. To keep his companion going, Rostam decides to strengthen Rakhsh, bit by bit, so no part of his body is too frail for too long.\n\n![](https://espresso.codeforces.com/ace389a4376151924b6a103ba086e314fbadc855.webp)\n\nImagine Rakhsh's body as a line of spots represented by a binary string $s$ of length $n$, where each $0$ means a weak spot and each $1$ means a strong one. Rostam's goal is to make sure that no interval of $m$ consecutive spots is entirely weak (all $0$s).\n\nLuckily, Rostam has a special ability called Timar, inherited from his mother [Rudabeh](https://en.wikipedia.org/wiki/Rudaba) at birth. With Timar, he can select any segment of length $k$ and instantly strengthen all of it (changing every character in that segment to $1$). The challenge is to figure out the minimum number of times Rostam needs to use Timar to keep Rakhsh moving, ensuring there are no consecutive entirely weak spots of length $m$.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10^4$), the number of test cases.\n\nThe first line of each test case contains three numbers $n$, $m$, $k$ ($1 \\le m, k \\le n \\le 2 \\cdot 10^5$). The second line of each test case contains a binary string $s$ of $n$ characters $s_1s_2 \\ldots s_n$. ($s_i \\in \\{$0,1$\\}$ for $1 \\le i \\le n$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the minimum number of times Rostam needs to use Timar to keep Rakhsh moving, ensuring there are no consecutive entirely weak spots of length $m$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n5 1 1\n\n10101\n\n5 2 1\n\n10101\n\n6 3 2\n\n000000\n\n```\n\n#### Output #1\n\n```\n2\n0\n1\n```\n\n### Note\n\nIn the first test case, we should apply an operation on each 0.\n\nIn the second test case, $s$ is already ok.\n\nIn the third test case, we can perform an operation on interval $[3,4]$ to get 001100.", "cfid": "2034B"}
{"problem_id": "2039D", "problem_title": "D. Shohag Loves GCD", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2039/D", "problem_statement": "Shohag has an integer $n$ and a set $S$ of $m$ unique integers. Help him find the lexicographically largest$^{\\\\text{∗}}$ integer array $a\\_1, a\\_2, \\\\ldots, a\\_n$ such that $a\\_i \\\\in S$ for each $1 \\\\le i \\\\le n$ and $a\\_{\\\\operatorname{gcd}(i, j)} \\\\neq \\\\operatorname{gcd}(a\\_i, a\\_j)$$^{\\\\text{†}}$ is satisfied over all pairs $1 \\\\le i \\\\lt j \\\\le n$, or state that no such array exists.\n\n$^{\\text{∗}}$An array $a$ is lexicographically larger than an array $b$ of the same length if $a \\ne b$, and in the first position where $a$ and $b$ differ, the array $a$ has a larger element than the corresponding element in $b$.\n\n$^{\\\\text{†}}$$\\\\gcd(x, y)$ denotes the [greatest common divisor (GCD)](https://en.wikipedia.org/wiki/Greatest_common_divisor) of integers $x$ and $y$.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\le m \\le n \\le 10^5$).\n\nThe second line contains $m$ unique integers in increasing order, representing the elements of the set $S$ ($1 \\le x \\le n$ for each $x \\in S$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $3 \\cdot 10^5$.\n\n### Output\n\nFor each test case, if there is no solution print $-1$, otherwise print $n$ integers — the lexicographically largest integer array that satisfies the conditions.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n6 3\n\n3 4 6\n\n1 1\n\n1\n\n2 1\n\n2\n\n```\n\n#### Output #1\n\n```\n6 4 4 3 4 3\n1\n-1\n```\n\n### Note\n\nIn the first test case, every element in the array belongs to the given set $S = \\{3, 4, 6\\}$, and all pairs of indices of the array satisfy the necessary conditions. In particular, for pair $(2, 3)$, $a_{\\operatorname{gcd}(2, 3)} = a_1 = 6$ and $\\operatorname{gcd}(a_2, a_3) = \\operatorname{gcd}(4, 4) = 4$, so they are not equal. There are other arrays that satisfy the conditions as well but this one is the lexicographically largest among them.\n\nIn the third test case, there is no solution possible because we are only allowed to use $a = [2, 2]$ but for this array, for pair $(1, 2)$, $a_{\\operatorname{gcd}(1, 2)} = a_1 = 2$ and $\\operatorname{gcd}(a_1, a_2) = \\operatorname{gcd}(2, 2) = 2$, so they are equal which is not allowed!", "cfid": "2039D"}
{"problem_id": "2039C1", "problem_title": "C1. Shohag Loves XOR (Easy Version)", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2039/C1", "problem_statement": "This is the easy version of the problem. The differences between the two versions are highlighted in bold. You can only make hacks if both versions of the problem are solved.\n\nShohag has two integers $x$ and $m$. Help him count the number of integers $1 \\le y \\le m$ such that $\\mathbf{x \\neq y}$ and $x \\oplus y$ is a divisor$^{\\text{∗}}$ of either $x$, $y$, or both. Here $\\oplus$ is the [bitwise XOR](https://en.wikipedia.org/wiki/Bitwise_operation#XOR) operator.\n\n$^{\\text{∗}}$The number $b$ is a divisor of the number $a$ if there exists an integer $c$ such that $a = b \\cdot c$.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first and only line of each test case contains two space-separated integers $x$ and $m$ ($1 \\le x \\le 10^6$, $1 \\le m \\le 10^{18}$).\n\nIt is guaranteed that the sum of $x$ over all test cases does not exceed $10^7$.\n\n### Output\n\nFor each test case, print a single integer — the number of suitable $y$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n6 9\n\n5 7\n\n2 3\n\n6 4\n\n4 1\n\n```\n\n#### Output #1\n\n```\n3\n2\n1\n1\n0\n```\n\n### Note\n\nIn the first test case, for $x = 6$, there are $3$ valid values for $y$ among the integers from $1$ to $m = 9$, and they are $4$, $5$, and $7$.\n\n- $y = 4$ is valid because $x \\oplus y = 6 \\oplus 4 = 2$ and $2$ is a divisor of both $x = 6$ and $y = 4$.\n- $y = 5$ is valid because $x \\oplus y = 6 \\oplus 5 = 3$ and $3$ is a divisor of $x = 6$.\n- $y = 7$ is valid because $x \\oplus y = 6 \\oplus 7 = 1$ and $1$ is a divisor of both $x = 6$ and $y = 7$.\n\nIn the second test case, for $x = 5$, there are $2$ valid values for $y$ among the integers from $1$ to $m = 7$, and they are $4$ and $6$.\n\n- $y = 4$ is valid because $x \\oplus y = 5 \\oplus 4 = 1$ and $1$ is a divisor of both $x = 5$ and $y = 4$.\n- $y = 6$ is valid because $x \\oplus y = 5 \\oplus 6 = 3$ and $3$ is a divisor of $y = 6$.", "cfid": "2039C1"}
{"problem_id": "2039B", "problem_title": "B. Shohag Loves Strings", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2039/B", "problem_statement": "For a string $p$, let $f(p)$ be the number of distinct non-empty substrings$^{\\text{∗}}$ of $p$.\n\nShohag has a string $s$. Help him find a non-empty string $p$ such that $p$ is a substring of $s$ and $f(p)$ is even or state that no such string exists.\n\n$^{\\text{∗}}$A string $a$ is a substring of a string $b$ if $a$ can be obtained from $b$ by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first and only line of each test case contains a string $s$ ($1 \\le |s| \\le 10^5$) consisting of lowercase English letters.\n\nIt is guaranteed that the sum of the length of $s$ over all test cases doesn't exceed $3 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print a non-empty string that satisfies the conditions mentioned in the statement, or $-1$ if no such string exists. If there are multiple solutions, output any.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\ndcabaac\n\na\n\nyouknowwho\n\ncodeforces\n\nbangladesh\n\n```\n\n#### Output #1\n\n```\nabaa\n-1\nyouknowwho\neforce\nbang\n```\n\n### Note\n\nIn the first test case, we can set $p = $ abaa because it is a substring of $s$ and the distinct non-empty substrings of $p$ are a, b, aa, ab, ba, aba, baa and abaa, so it has a total of $8$ distinct substrings which is even.\n\nIn the second test case, we can only set $p = $ a but it has one distinct non-empty substring but this number is odd, so not valid.\n\nIn the third test case, the whole string contains $52$ distinct non-empty substrings, so the string itself is a valid solution.", "cfid": "2039B"}
{"problem_id": "2039C2", "problem_title": "C2. Shohag Loves XOR (Hard Version)", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2039/C2", "problem_statement": "This is the hard version of the problem. The differences between the two versions are highlighted in bold. You can only make hacks if both versions of the problem are solved.\n\nShohag has two integers $x$ and $m$. Help him count the number of integers $1 \\le y \\le m$ such that $x \\oplus y$ is divisible$^{\\text{∗}}$ by either $x$, $y$, or both. Here $\\oplus$ is the [bitwise XOR](https://en.wikipedia.org/wiki/Bitwise_operation#XOR) operator.\n\n$^{\\text{∗}}$The number $a$ is divisible by the number $b$ if there exists an integer $c$ such that $a = b \\cdot c$.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first and only line of each test case contains two space-separated integers $x$ and $m$ ($1 \\le x \\le 10^6$, $1 \\le m \\le 10^{18}$).\n\nIt is guaranteed that the sum of $x$ over all test cases does not exceed $10^7$.\n\n### Output\n\nFor each test case, print a single integer — the number of suitable $y$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n7 10\n\n2 3\n\n6 4\n\n1 6\n\n4 1\n\n```\n\n#### Output #1\n\n```\n3\n2\n2\n6\n1\n```\n\n### Note\n\nIn the first test case, for $x = 7$, there are $3$ valid values for $y$ among the integers from $1$ to $m = 10$, and they are $1$, $7$, and $9$.\n\n- $y = 1$ is valid because $x \\oplus y = 7 \\oplus 1 = 6$ and $6$ is divisible by $y = 1$.\n- $y = 7$ is valid because $x \\oplus y = 7 \\oplus 7 = 0$ and $0$ is divisible by both $x = 7$ and $y = 7$.\n- $y = 9$ is valid because $x \\oplus y = 7 \\oplus 9 = 14$ and $14$ is divisible by $x = 7$.", "cfid": "2039C2"}
{"problem_id": "2039A", "problem_title": "A. Shohag Loves Mod", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2039/A", "problem_statement": "Shohag has an integer $n$. Please help him find an increasing integer sequence $1 \\le a_1 \\lt a_2 \\lt \\ldots \\lt a_n \\le 100$ such that $a_i \\bmod i \\neq a_j \\bmod j$ $^{\\text{∗}}$ is satisfied over all pairs $1 \\le i \\lt j \\le n$.\n\nIt can be shown that such a sequence always exists under the given constraints.\n\n$^{\\\\text{∗}}$$a \\\\bmod b$ denotes the remainder of $a$ after division by $b$. For example, $7 \\\\bmod 3 = 1, 8 \\\\bmod 4 = 0$ and $69 \\\\bmod 10 = 9$.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 50$) — the number of test cases.\n\nThe first and only line of each test case contains an integer $n$ ($2 \\le n \\le 50$).\n\n### Output\n\nFor each test case, print $n$ integers — the integer sequence that satisfies the conditions mentioned in the statement. If there are multiple such sequences, output any.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n3\n\n6\n\n```\n\n#### Output #1\n\n```\n2 7 8\n2 3 32 35 69 95\n```\n\n### Note\n\nIn the first test case, the sequence is increasing, values are from $1$ to $100$ and each pair of indices satisfies the condition mentioned in the statement:\n\n- For pair $(1, 2)$, $a_1 \\bmod 1 = 2 \\bmod 1 = 0$, and $a_2 \\bmod 2 = 7 \\bmod 2 = 1$. So they are different.\n- For pair $(1, 3)$, $a_1 \\bmod 1 = 2 \\bmod 1 = 0$, and $a_3 \\bmod 3 = 8 \\bmod 3 = 2$. So they are different.\n- For pair $(2, 3)$, $a_2 \\bmod 2 = 7 \\bmod 2 = 1$, and $a_3 \\bmod 3 = 8 \\bmod 3 = 2$. So they are different.\n\nNote that you do not necessarily have to print the exact same sequence, you can print any other sequence as long as it satisfies the necessary conditions.", "cfid": "2039A"}
{"problem_id": "2037C", "problem_title": "C. Superultra's Favorite Permutation", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2037/C", "problem_statement": "Superultra, a little red panda, desperately wants primogems. In his dreams, a voice tells him that he must solve the following task to obtain a lifetime supply of primogems. Help Superultra!\n\nConstruct a permutation$^{\\text{∗}}$ $p$ of length $n$ such that $p_i + p_{i+1}$ is composite$^{\\text{†}}$ over all $1 \\leq i \\leq n - 1$. If it's not possible, output $-1$.\n\n$^{\\text{∗}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n$^{\\text{†}}$An integer $x$ is composite if it has at least one other divisor besides $1$ and $x$. For example, $4$ is composite because $2$ is a divisor.\n\n### Input\n\nThe first line contains $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nEach test case contains an integer $n$ ($2 \\leq n \\leq 2 \\cdot 10^5$) — the length of the permutation.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, if it's not possible to construct $p$, output $-1$ on a new line. Otherwise, output $n$ integers $p_1, p_2, \\ldots, p_n$ on a new line.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n3\n\n8\n\n```\n\n#### Output #1\n\n```\n-1\n1 8 7 3 6 2 4 5```\n\n### Note\n\nIn the first example, it can be shown that all permutation of size $3$ contain two adjacent elements whose sum is prime. For example, in the permutation $[2,3,1]$ the sum $2+3=5$ is prime.\n\nIn the second example, we can verify that the sample output is correct because $1+8$, $8+7$, $7+3$, $3+6$, $6+2$, $2+4$, and $4+5$ are all composite. There may be other constructions that are correct.", "cfid": "2037C"}
{"problem_id": "2037E", "problem_title": "E. Kachina's Favorite Binary String", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2037/E", "problem_statement": "This is an interactive problem.\n\nKachina challenges you to guess her favorite binary string$^{\\text{∗}}$ $s$ of length $n$. She defines $f(l, r)$ as the number of subsequences$^{\\text{†}}$ of $\\texttt{01}$ in $s_l s_{l+1} \\ldots s_r$. Two subsequences are considered different if they are formed by deleting characters from different positions in the original string, even if the resulting subsequences consist of the same characters.\n\nTo determine $s$, you can ask her some questions. In each question, you can choose two indices $l$ and $r$ ($1 \\leq l < r \\leq n$) and ask her for the value of $f(l, r)$.\n\nDetermine and output $s$ after asking Kachina no more than $n$ questions. However, it may be the case that $s$ is impossible to be determined. In this case, you would need to report $\\texttt{IMPOSSIBLE}$ instead.\n\nFormally, $s$ is impossible to be determined if after asking $n$ questions, there are always multiple possible strings for $s$, regardless of what questions are asked. Note that if you report $\\texttt{IMPOSSIBLE}$ when there exists a sequence of at most $n$ queries that will uniquely determine the binary string, you will get the Wrong Answer verdict.\n\n$^{\\text{∗}}$A binary string only contains characters $\\texttt{0}$ and $\\texttt{1}$.\n\n$^{\\text{†}}$A sequence $a$ is a subsequence of a sequence $b$ if $a$ can be obtained from $b$ by the deletion of several (possibly, zero or all) elements. For example, subsequences of $\\mathtt{1011101}$ are $\\mathtt{0}$, $\\mathtt{1}$, $\\mathtt{11111}$, $\\mathtt{0111}$, but not $\\mathtt{000}$ nor $\\mathtt{11100}$.\n\n### Input\n\nThe first line of input contains a single integer $t$ ($1 \\leq t \\leq 10^3$) — the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($2 \\leq n \\leq 10^4$) — the length of $s$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^4$.\n\n### Interaction\n\nTo ask a question, output a line in the following format (do not include quotes)\n\n- \"$\\texttt{? l r}$\" ($1 \\leq l < r \\leq n$)\n\nThe jury will return an integer $f(l, r)$.\n\nWhen you are ready to print the answer, output a single line in the following format\n\n- If $s$ is impossible to be determined, output \"$\\texttt{! IMPOSSIBLE}$\"\n- Otherwise, output \"$\\texttt{! s}$\"\n\nAfter that, proceed to process the next test case or terminate the program if it was the last test case. Printing the answer does not count as a query.\n\nThe interactor is not adaptive, meaning that the answer is known before the participant asks the queries and doesn't depend on the queries asked by the participant.\n\nIf your program makes more than $n$ queries for one test case, your program should immediately terminate to receive the verdict Wrong Answer. Otherwise, you can get an arbitrary verdict because your solution will continue to read from a closed stream.\n\nAfter printing a query do not forget to output the end of line and flush the output. Otherwise, you may get Idleness limit exceeded verdict. To do this, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- flush(output) in Pascal;\n- stdout.flush() in Python;\n- see the documentation for other languages.\n\nHacks\n\nTo make a hack, use the following format.\n\nThe first line should contain a single integer $t$ ($1 \\leq t \\leq 10^3$) – the number of test cases.\n\nThe first line of each test case should contain an integer $n$ ($2 \\leq n \\leq 10^4$) — the length of $s$.\n\nThe following line should contain $s$, a binary string of length $n$.\n\nThe sum of $n$ over all test cases should not exceed $10^4$.\n\n### Example\n\n#### Input #1\n\n```\n2\n5\n\n4\n\n0\n\n1\n\n2\n\n2\n\n0```\n\n#### Output #1\n\n```\n? 1 5\n\n? 2 4\n\n? 4 5\n\n? 3 5\n\n! 01001\n\n? 1 2\n\n! IMPOSSIBLE```\n\n### Note\n\nIn the first test case:\n\nIn the first query, you ask Kachina for the value of $f(1, 5)$, and she responds with $4$ in the input stream.\n\nIn the second query, you ask Kachina for the value of $f(2, 4)$. Because there are no subsequences of $\\texttt{01}$ in the string $\\texttt{100}$, she responds with $0$ in the input stream.\n\nAfter asking $4$ questions, you report $\\texttt{01001}$ as $s$, and it is correct.\n\nIn the second test case:\n\nIn the first query, you ask Kachina for the value of $f(1, 2)$, and she responds with $0$ in the input stream. Notice that this is the only distinct question you can ask.\n\nHowever, notice that the strings $00$ and $11$ both have an answer of $0$, and it is impossible to differentiate between the two. Therefore, we report IMPOSSIBLE.\n\nPlease note that this example only serves to demonstrate the interaction format. It is not guaranteed the queries provided are optimal or uniquely determine the answer. However, it can be shown there exists a sequence of at most $5$ queries that does uniquely determine sample test case $1$.", "cfid": "2037E"}
{"problem_id": "2037D", "problem_title": "D. Sharky Surfing", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2037/D", "problem_statement": "Mualani loves surfing on her sharky surfboard!\n\nMualani's surf path can be modeled by a number line. She starts at position $1$, and the path ends at position $L$. When she is at position $x$ with a jump power of $k$, she can jump to any integer position in the interval $[x, x+k]$. Initially, her jump power is $1$.\n\nHowever, her surf path isn't completely smooth. There are $n$ hurdles on her path. Each hurdle is represented by an interval $[l, r]$, meaning she cannot jump to any position in the interval $[l, r]$.\n\nThere are also $m$ power-ups at certain positions on the path. Power-up $i$ is located at position $x_i$ and has a value of $v_i$. When Mualani is at position $x_i$, she has the option to collect the power-up to increase her jump power by $v_i$. There may be multiple power-ups at the same position. When she is at a position with some power-ups, she may choose to take or ignore each individual power-up. No power-up is in the interval of any hurdle.\n\nWhat is the minimum number of power-ups she must collect to reach position $L$ to finish the path? If it is not possible to finish the surf path, output $-1$.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe first line of each test case contains three integers $n$, $m$, and $L$ ($1 \\leq n, m \\leq 2 \\cdot 10^5, 3 \\leq L \\leq 10^9$) — the number of hurdles, the number of power-ups, and the position of the end.\n\nThe following $n$ lines contain two integers $l_i$ and $r_i$ ($2 \\leq l_i \\leq r_i \\leq L-1$) — the bounds of the interval for the $i$'th hurdle. It is guaranteed that $r_i + 1 < l_{i+1}$ for all $1 \\leq i < n$ (i.e. all hurdles are non-overlapping, sorted by increasing positions, and the end point of a previous hurdle is not consecutive with the start point of the next hurdle).\n\nThe following $m$ lines contain two integers $x_i$ and $v_i$ ($1 \\leq x_i, v_i \\leq L$) — the position and the value for the $i$'th power-up. There may be multiple power-ups with the same $x$. It is guaranteed that $x_i \\leq x_{i+1}$ for all $1 \\leq i < m$ (i.e. the power-ups are sorted by non-decreasing position) and no power-up is in the interval of any hurdle.\n\nIt is guaranteed the sum of $n$ and the sum of $m$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the minimum number of power-ups she must collect to reach position $L$. If it is not possible, output $-1$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2 5 50\n\n7 14\n\n30 40\n\n2 2\n\n3 1\n\n3 5\n\n18 2\n\n22 32\n\n4 3 50\n\n4 6\n\n15 18\n\n20 26\n\n34 38\n\n1 2\n\n8 2\n\n10 2\n\n1 4 17\n\n10 14\n\n1 6\n\n1 2\n\n1 2\n\n16 9\n\n1 2 10\n\n5 9\n\n2 3\n\n2 2\n\n```\n\n#### Output #1\n\n```\n4\n-1\n1\n2\n```\n\n### Note\n\nIn the first test case, she can collect power-ups $1$, $2$, $3$, and $5$ to clear all hurdles.\n\nIn the second test case, she cannot jump over the first hurdle.\n\nIn the fourth test case, by collecting both power-ups, she can jump over the hurdle.", "cfid": "2037D"}
{"problem_id": "2037A", "problem_title": "A. Twice", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2037/A", "problem_statement": "Kinich wakes up to the start of a new day. He turns on his phone, checks his mailbox, and finds a mysterious present. He decides to unbox the present.\n\nKinich unboxes an array $a$ with $n$ integers. Initially, Kinich's score is $0$. He will perform the following operation any number of times:\n\n- Select two indices $i$ and $j$ $(1 \\leq i < j \\leq n)$ such that neither $i$ nor $j$ has been chosen in any previous operation and $a_i = a_j$. Then, add $1$ to his score.\n\nOutput the maximum score Kinich can achieve after performing the aforementioned operation any number of times.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 500$) — the number of test cases.\n\nThe first line of each test case contains an integer $n$ ($1 \\leq n \\leq 20$) — the length of $a$.\n\nThe following line of each test case contains $n$ space-separated integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq n$).\n\n### Output\n\nFor each test case, output the maximum score achievable on a new line.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n1\n\n1\n\n2\n\n2 2\n\n2\n\n1 2\n\n4\n\n1 2 3 1\n\n6\n\n1 2 3 1 2 3\n\n```\n\n#### Output #1\n\n```\n0\n1\n0\n1\n3\n```\n\n### Note\n\nIn the first and third testcases, Kinich cannot perform any operations.\n\nIn the second testcase, Kinich can perform one operation with $i=1$ and $j=2$.\n\nIn the fourth testcase, Kinich can perform one operation with $i=1$ and $j=4$.", "cfid": "2037A"}
{"problem_id": "2037B", "problem_title": "B. Intercepted Inputs", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2037/B", "problem_statement": "To help you prepare for your upcoming Codeforces contest, Citlali set a grid problem and is trying to give you a $n$ by $m$ grid through your input stream. Specifically, your input stream should contain the following:\n\n- The first line contains two integers $n$ and $m$ — the dimensions of the grid.\n- The following $n$ lines contain $m$ integers each — the values of the grid.\n\nHowever, someone has intercepted your input stream, shuffled all given integers, and put them all on one line! Now, there are $k$ integers all on one line, and you don't know where each integer originally belongs. Instead of asking Citlali to resend the input, you decide to determine the values of $n$ and $m$ yourself.\n\nOutput any possible value of $n$ and $m$ that Citlali could have provided.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe first line of each test case contains an integer $k$ ($3 \\leq k \\leq 2 \\cdot 10^5$) — the total number of inputs in your input stream.\n\nThe following line of each test case contains $k$ integers $a_1, a_2, \\ldots, a_k$ ($1 \\leq a_i \\leq k$) — the shuffled inputs of your input stream. It is guaranteed that $n$ and $m$ are contained within the $k$ integers.\n\nIt is guaranteed that the sum of $k$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output two integers, one possible value of $n$ and $m$. If multiple possible answers exist, output any.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3\n\n1 1 2\n\n11\n\n3 3 4 5 6 7 8 9 9 10 11\n\n8\n\n8 4 8 3 8 2 8 1\n\n6\n\n2 1 4 5 3 3\n\n8\n\n1 2 6 3 8 5 5 3\n\n```\n\n#### Output #1\n\n```\n1 1\n3 3\n2 3\n4 1\n1 6```\n\n### Note\n\nIn the first test case, the initial input could have been the following:\n\n1 1\n\n2\n\nIn the second test case, the initial input could have been the following:\n\n3 3\n\n4 5 6\n\n7 8 9\n\n9 10 11", "cfid": "2037B"}
{"problem_id": "2031D", "problem_title": "D. Penchick and Desert Rabbit", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2031/D", "problem_statement": "Dedicated to pushing himself to his limits, Penchick challenged himself to survive the midday sun in the Arabian Desert!\n\nWhile trekking along a linear oasis, Penchick spots a desert rabbit preparing to jump along a line of palm trees. There are $n$ trees, each with a height denoted by $a_i$.\n\nThe rabbit can jump from the $i$-th tree to the $j$-th tree if exactly one of the following conditions is true:\n\n- $j < i$ and $a_j > a_i$: the rabbit can jump backward to a taller tree.\n- $j > i$ and $a_j < a_i$: the rabbit can jump forward to a shorter tree.\n\nFor each $i$ from $1$ to $n$, determine the maximum height among all trees that the rabbit can reach if it starts from the $i$-th tree.\n\n### Input\n\nThe first line contains the number of test cases $t$ ($1 \\le t \\le 5 \\cdot 10^5$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\leq n \\leq 5 \\cdot 10^5$) — the number of trees.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le n$) — the height of the trees.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output $n$ integers. The $i$-th integer should contain the maximum height among all trees that the rabbit can reach if it starts from the $i$-th tree.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n4\n\n2 3 1 4\n\n5\n\n5 4 3 2 1\n\n4\n\n2 1 1 3\n\n4\n\n1 1 3 1\n\n8\n\n2 4 1 6 3 8 5 7\n\n```\n\n#### Output #1\n\n```\n3 3 3 4\n5 5 5 5 5\n2 2 2 3\n1 1 3 3\n8 8 8 8 8 8 8 8\n```\n\n### Note\n\nIn the first test case, the initial heights of trees are $a = [2, 3, 1, 4]$.\n\n- If the rabbit starts from the first tree, it can jump to the third tree as $3 > 1$ and $1 < 2$. Then, the rabbit can jump to the second tree as $2 < 3$ and $3 > 1$. It can be proved that the rabbit cannot reach the fourth tree; hence, the maximum height of the tree that the rabbit can reach is $a_2 = 3$.\n- If the rabbit starts from the fourth tree, it does not need to jump anywhere as it is already at the highest tree.\n\nIn the second test case, the rabbit can jump to the first tree regardless of which tree it starts from.\n\nIn the fifth test case, if the rabbit starts from the fifth tree, it can jump to the fourth tree. Then the rabbit can jump to the seventh tree and finally reach the sixth tree. Therefore, the maximum height of the tree that the rabbit can reach is $8$.", "cfid": "2031D"}
{"problem_id": "2031C", "problem_title": "C. Penchick and BBQ Buns", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2031/C", "problem_statement": "Penchick loves two things: square numbers and Hong Kong-style BBQ buns! For his birthday, Kohane wants to combine them with a gift: $n$ BBQ buns arranged from left to right. There are $10^6$ available fillings of BBQ buns, numbered from $1$ to $10^6$. To ensure that Penchick would love this gift, Kohane has a few goals:\n\n- No filling is used exactly once; that is, each filling must either not appear at all or appear at least twice.\n- For any two buns $i$ and $j$ that have the same filling, the distance between them, which is $|i-j|$, must be a perfect square$^{\\text{∗}}$.\n\nHelp Kohane find a valid way to choose the filling of the buns, or determine if it is impossible to satisfy her goals! If there are multiple solutions, print any of them.\n\n$^{\\text{∗}}$A positive integer $x$ is a perfect square if there exists a positive integer $y$ such that $x = y^2$. For example, $49$ and $1$ are perfect squares because $49 = 7^2$ and $1 = 1^2$ respectively. On the other hand, $5$ is not a perfect square as no integer squared equals $5$\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 2\\cdot 10^5$). The description of the test cases follows.\n\nThe only line of each test case contains a single integer $n$ ($1\\le n\\le 2\\cdot 10^5$) — the number of BBQ buns.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, if no valid choice of fillings exists, output $-1$. Otherwise, output $n$ integers, where the $i$-th integer represents the filling of the $i$-th BBQ bun. If there are multiple solutions, print any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n3\n\n12\n\n```\n\n#### Output #1\n\n```\n-1\n1 2 3 6 10 2 7 6 10 1 7 3\n```\n\n### Note\n\nIn the first test case, the choice of fillings \"1 1 1\" is not allowed because buns $1$ and $3$ have the same filling, but are distance $2$ apart, which is not a perfect square. The choice of fillings \"1 1 2\" is also not allowed as filling $2$ is only used once.\n\nIn the second test case, the solution is valid because no filling is used exactly once, and any two buns with the same filling are spaced at a distance equal to a perfect square. For example, buns $1$ and $10$ both have filling $1$ and are spaced at a distance of $9=3^2$. Similarly, buns $5$ and $9$ both have filling $10$ and are spaced at a distance of $4=2^2$.", "cfid": "2031C"}
{"problem_id": "2031B", "problem_title": "B. Penchick and Satay Sticks", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2031/B", "problem_statement": "Penchick and his friend Kohane are touring Indonesia, and their next stop is in Surabaya!\n\nIn the bustling food stalls of Surabaya, Kohane bought $n$ satay sticks and arranged them in a line, with the $i$-th satay stick having length $p_i$. It is given that $p$ is a permutation$^{\\text{∗}}$ of length $n$.\n\nPenchick wants to sort the satay sticks in increasing order of length, so that $p_i=i$ for each $1\\le i\\le n$. For fun, they created a rule: they can only swap neighboring satay sticks whose lengths differ by exactly $1$. Formally, they can perform the following operation any number of times (including zero):\n\n- Select an index $i$ ($1\\le i\\le n-1$) such that $|p_{i+1}-p_i|=1$;\n- Swap $p_i$ and $p_{i+1}$.\n\nDetermine whether it is possible to sort the permutation $p$, thus the satay sticks, by performing the above operation.\n\n$^{\\text{∗}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 2\\cdot 10^5$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 2\\cdot 10^5$) — the number of satay sticks.\n\nThe second line of each test case contains $n$ integers $p_1, p_2, \\ldots, p_n$ ($1 \\le p_i \\le n$) — the permutation $p$ representing the length of the satay sticks.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, output \"YES\" if it is possible to sort permutation $p$ by performing the operation. Otherwise, output \"NO\".\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n4\n\n2 1 3 4\n\n4\n\n4 2 3 1\n\n```\n\n#### Output #1\n\n```\nYES\nNO\n```\n\n### Note\n\nIn the first test case, we can sort permutation $p = [2, 1, 3, 4]$ by performing an operation on index $1$ ($|p_2 - p_1| = |1 - 2| = 1$), resulting in $p = [1, 2, 3, 4]$.\n\nIn the second test case, it can be proven that it is impossible to sort permutation $p = [4, 2, 3, 1]$ by performing the operation. Here is an example of a sequence of operations that can be performed on the permutation:\n\n- Select $i = 2$ ($|p_3 - p_2| = |3 - 2| = 1$). This results in $p = [4, 3, 2, 1]$.\n- Select $i = 1$ ($|p_2 - p_1| = |3 - 4| = 1$). This results in $p = [3, 4, 2, 1]$.\n- Select $i = 3$ ($|p_4 - p_3| = |1 - 2| = 1$). This results in $p = [3, 4, 1, 2]$.\n\nUnfortunately, permutation $p$ remains unsorted after performing the operations.", "cfid": "2031B"}
{"problem_id": "2031A", "problem_title": "A. Penchick and Modern Monument", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2031/A", "problem_statement": "Amidst skyscrapers in the bustling metropolis of Metro Manila, the newest Noiph mall in the Philippines has just been completed! The construction manager, Penchick, ordered a state-of-the-art monument to be built with $n$ pillars.\n\nThe heights of the monument's pillars can be represented as an array $h$ of $n$ positive integers, where $h_i$ represents the height of the $i$-th pillar for all $i$ between $1$ and $n$.\n\nPenchick wants the heights of the pillars to be in non-decreasing order, i.e. $h_i \\le h_{i + 1}$ for all $i$ between $1$ and $n - 1$. However, due to confusion, the monument was built such that the heights of the pillars are in non-increasing order instead, i.e. $h_i \\ge h_{i + 1}$ for all $i$ between $1$ and $n - 1$.\n\nLuckily, Penchick can modify the monument and do the following operation on the pillars as many times as necessary:\n\n- Modify the height of a pillar to any positive integer. Formally, choose an index $1\\le i\\le n$ and a positive integer $x$. Then, assign $h_i := x$.\n\nHelp Penchick determine the minimum number of operations needed to make the heights of the monument's pillars non-decreasing.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\leq n \\leq 50$) — the number of pillars.\n\nThe second line of each test case contains $n$ integers $h_1, h_2, \\ldots, h_n$ ($1 \\le h_i \\le n$ and $h_i\\ge h_{i+1}$) — the height of the pillars.\n\nPlease take note that the given array $h$ is non-increasing.\n\nNote that there are no constraints on the sum of $n$ over all test cases.\n\n### Output\n\nFor each test case, output a single integer representing the minimum number of operations needed to make the heights of the pillars non-decreasing.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n5\n\n5 4 3 2 1\n\n3\n\n2 2 1\n\n1\n\n1\n\n```\n\n#### Output #1\n\n```\n4\n1\n0\n```\n\n### Note\n\nIn the first test case, the initial heights of pillars are $h = [5, 4, 3, 2, 1]$.\n\n- In the first operation, Penchick changes the height of pillar $1$ to $h_1 := 2$.\n- In the second operation, he changes the height of pillar $2$ to $h_2 := 2$.\n- In the third operation, he changes the height of pillar $4$ to $h_4 := 4$.\n- In the fourth operation, he changes the height of pillar $5$ to $h_5 := 4$.\n\nAfter the operation, the heights of the pillars are $h = [2, 2, 3, 4, 4]$, which is non-decreasing. It can be proven that it is not possible for Penchick to make the heights of the pillars non-decreasing in fewer than $4$ operations.\n\nIn the second test case, Penchick can make the heights of the pillars non-decreasing by modifying the height of pillar $3$ to $h_3 := 2$.\n\nIn the third test case, the heights of pillars are already non-decreasing, so no operations are required.", "cfid": "2031A"}
{"problem_id": "2028C", "problem_title": "C. Alice's Adventures in Cutting Cake", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2028/C", "problem_statement": "Alice is at the Mad Hatter's tea party! There is a long sheet cake made up of $n$ sections with tastiness values $a_1, a_2, \\ldots, a_n$. There are $m$ creatures at the tea party, excluding Alice.\n\nAlice will cut the cake into $m + 1$ pieces. Formally, she will partition the cake into $m + 1$ subarrays, where each subarray consists of some number of adjacent sections. The tastiness of a piece is the sum of tastiness of its sections. Afterwards, she will divvy these $m + 1$ pieces up among the $m$ creatures and herself (her piece can be empty). However, each of the $m$ creatures will only be happy when the tastiness of its piece is $v$ or more.\n\nAlice wants to make sure every creature is happy. Limited by this condition, she also wants to maximize the tastiness of her own piece. Can you help Alice find the maximum tastiness her piece can have? If there is no way to make sure every creature is happy, output $-1$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n, m, v$ ($1\\le m\\le n\\le 2\\cdot 10^5$; $1\\le v\\le 10^9$) — the number of sections, the number of creatures, and the creatures' minimum requirement for tastiness, respectively.\n\nThe next line contains $n$ space separated integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$) — the tastinesses of the sections.\n\nThe sum of $n$ over all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, output the maximum tastiness Alice can achieve for her piece, or $-1$ if there is no way to make sure every creature is happy.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n6 2 1\n\n1 1 10 1 1 10\n\n6 2 2\n\n1 1 10 1 1 10\n\n6 2 3\n\n1 1 10 1 1 10\n\n6 2 10\n\n1 1 10 1 1 10\n\n6 2 11\n\n1 1 10 1 1 10\n\n6 2 12\n\n1 1 10 1 1 10\n\n6 2 12\n\n1 1 1 1 10 10\n\n```\n\n#### Output #1\n\n```\n22\n12\n2\n2\n2\n0\n-1\n```\n\n### Note\n\nFor the first test case, Alice can give the first and second section as their own pieces, and then take the remaining $10 + 1 + 1 + 10 = 22$ tastiness for herself. We can show that she cannot do any better.\n\nFor the second test case, Alice could give the first and second section as one piece, and the sixth section as one piece. She can then take the remaining $10 + 1 + 1 = 12$ tastiness for herself. We can show that she cannot do any better.\n\nFor the seventh test case, Alice cannot give each creature a piece of at least $12$ tastiness.", "cfid": "2028C"}
{"problem_id": "2028A", "problem_title": "A. Alice's Adventures in \"Chess\"", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2028/A", "problem_statement": "Alice is trying to meet up with the Red Queen in the countryside! Right now, Alice is at position $(0, 0)$, and the Red Queen is at position $(a, b)$. Alice can only move in the four cardinal directions (north, east, south, west).\n\nMore formally, if Alice is at the point $(x, y)$, she will do one of the following:\n\n- go north (represented by N), moving to $(x, y+1)$;\n- go east (represented by E), moving to $(x+1, y)$;\n- go south (represented by S), moving to $(x, y-1)$; or\n- go west (represented by W), moving to $(x-1, y)$.\n\nAlice's movements are predetermined. She has a string $s$ representing a sequence of moves that she performs from left to right. Once she reaches the end of the sequence, she repeats the same pattern of moves forever.\n\nCan you help Alice figure out if she will ever meet the Red Queen?\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 500$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n$, $a$, $b$ ($1 \\le n$, $a$, $b \\le 10$) — the length of the string and the initial coordinates of the Red Queen.\n\nThe second line contains a string $s$ of length $n$ consisting only of the characters N, E, S, or W.\n\n### Output\n\nFor each test case, output a single string \"YES\" or \"NO\" (without the quotes) denoting whether Alice will eventually meet the Red Queen.\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n2 2 2\n\nNE\n\n3 2 2\n\nNNE\n\n6 2 1\n\nNNEESW\n\n6 10 10\n\nNNEESW\n\n3 4 2\n\nNEE\n\n4 5 5\n\nNEWS\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nYES\nYES\nYES\nNO\n```\n\n### Note\n\nIn the first test case, Alice follows the path $(0,0) \\xrightarrow[\\texttt{N}]{} (0,1) \\xrightarrow[\\texttt{E}]{} (1,1) \\xrightarrow[\\texttt{N}]{} (1,2) \\xrightarrow[\\texttt{E}]{} (2,2)$.\n\nIn the second test case, Alice can never reach the Red Queen.", "cfid": "2028A"}
{"problem_id": "2028B", "problem_title": "B. Alice's Adventures in Permuting", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2028/B", "problem_statement": "Alice mixed up the words transmutation and permutation! She has an array $a$ specified via three integers $n$, $b$, $c$: the array $a$ has length $n$ and is given via $a_i = b\\cdot (i - 1) + c$ for $1\\le i\\le n$. For example, if $n=3$, $b=2$, and $c=1$, then $a=[2 \\cdot 0 + 1, 2 \\cdot 1 + 1, 2 \\cdot 2 + 1] = [1, 3, 5]$.\n\nNow, Alice really enjoys permutations of $\\[0, \\\\ldots, n-1\\]\n\n$$^{\\text{∗}}$ and would like to transform $a$ into a permutation. In one operation, Alice replaces the maximum element of $a$ with the $\\operatorname{MEX}$$\n\ntext{†}}$ of $a$. If there are multiple maximum elements in $a$, Alice chooses the leftmost one to replace.\n\nCan you help Alice figure out how many operations she has to do for $a$ to become a permutation for the first time? If it is impossible, you should report it.\n\n$^{\\text{∗}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $0$ to $n-1$ in arbitrary order. Please note, this is slightly different from the usual definition of a permutation. For example, $[1,2,0,4,3]$ is a permutation, but $[0,1,1]$ is not a permutation ($1$ appears twice in the array), and $[0,2,3]$ is also not a permutation ($n=3$ but there is $3$ in the array).\n\n$^{\\text{†}}$The $\\operatorname{MEX}$ of an array is the smallest non-negative integer that does not belong to the array. For example, the $\\operatorname{MEX}$ of $[0, 3, 1, 3]$ is $2$ and the $\\operatorname{MEX}$ of $[5]$ is $0$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^5$). The description of the test cases follows.\n\nThe only line of each test case contains three integers $n$, $b$, $c$ ($1\\le n\\le 10^{18}$; $0\\le b$, $c\\le 10^{18}$) — the parameters of the array.\n\n### Output\n\nFor each test case, if the array can never become a permutation, output $-1$. Otherwise, output the minimum number of operations for the array to become a permutation.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n10 1 0\n\n1 2 3\n\n100 2 1\n\n3 0 1\n\n3 0 0\n\n1000000000000000000 0 0\n\n1000000000000000000 1000000000000000000 1000000000000000000\n\n```\n\n#### Output #1\n\n```\n0\n1\n50\n2\n-1\n-1\n1000000000000000000\n```\n\n### Note\n\nIn the first test case, the array is already $[0, 1, \\ldots, 9]$, so no operations are required.\n\nIn the third test case, the starting array is $[1, 3, 5, \\ldots, 199]$. After the first operation, the $199$ gets transformed into a $0$. In the second operation, the $197$ gets transformed into a $2$. If we continue this, it will take exactly $50$ operations to get the array $[0, 1, 2, 3, \\ldots, 99]$.\n\nIn the fourth test case, two operations are needed: $[1,1,1] \\to [0,1,1] \\to [0,2,1]$.\n\nIn the fifth test case, the process is $[0,0,0] \\to [1,0,0] \\to [2,0,0] \\to [1,0,0] \\to [2,0,0]$. This process repeats forever, so the array is never a permutation and the answer is $-1$.", "cfid": "2028B"}
{"problem_id": "2029B", "problem_title": "B. Replacement", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2029/B", "problem_statement": "You have a binary string$^{\\text{∗}}$ $s$ of length $n$, and Iris gives you another binary string $r$ of length $n-1$.\n\nIris is going to play a game with you. During the game, you will perform $n-1$ operations on $s$. In the $i$-th operation ($1 \\le i \\le n-1$):\n\n- First, you choose an index $k$ such that $1\\le k\\le |s| - 1$ and $s_{k} \\neq s_{k+1}$. If it is impossible to choose such an index, you lose;\n- Then, you replace $s_ks_{k+1}$ with $r_i$. Note that this decreases the length of $s$ by $1$.\n\nIf all the $n-1$ operations are performed successfully, you win.\n\nDetermine whether it is possible for you to win this game.\n\n$^{\\text{∗}}$A binary string is a string where each character is either $\\mathtt{0}$ or $\\mathtt{1}$.\n\n### Input\n\nEach test contains multiple test cases. The first line of the input contains a single integer $t$ ($1\\le t\\le 10^4$) — the number of test cases. The description of test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2\\le n\\le 10^5$) — the length of $s$.\n\nThe second line contains the binary string $s$ of length $n$ ($s_i=\\mathtt{0}$ or $\\mathtt{1}$).\n\nThe third line contains the binary string $r$ of length $n-1$ ($r_i=\\mathtt{0}$ or $\\mathtt{1}$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, print \"YES\" (without quotes) if you can win the game, and \"NO\" (without quotes) otherwise.\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n2\n\n11\n\n0\n\n2\n\n01\n\n1\n\n4\n\n1101\n\n001\n\n6\n\n111110\n\n10000\n\n6\n\n010010\n\n11010\n\n8\n\n10010010\n\n0010010\n\n```\n\n#### Output #1\n\n```\nNO\nYES\nYES\nNO\nYES\nNO\n```\n\n### Note\n\nIn the first test case, you cannot perform the first operation. Thus, you lose the game.\n\nIn the second test case, you can choose $k=1$ in the only operation, and after that, $s$ becomes equal to $\\mathtt{1}$. Thus, you win the game.\n\nIn the third test case, you can perform the following operations: $\\mathtt{1}\\underline{\\mathtt{10}}\\mathtt{1}\\xrightarrow{r_1=\\mathtt{0}} \\mathtt{1}\\underline{\\mathtt{01}} \\xrightarrow{r_2=\\mathtt{0}} \\underline{\\mathtt{10}} \\xrightarrow{r_3=\\mathtt{1}} \\mathtt{1}$.", "cfid": "2029B"}
{"problem_id": "2029A", "problem_title": "A. Set", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2029/A", "problem_statement": "You are given a positive integer $k$ and a set $S$ of all integers from $l$ to $r$ (inclusive).\n\nYou can perform the following two-step operation any number of times (possibly zero):\n\n1. First, choose a number $x$ from the set $S$, such that there are at least $k$ multiples of $x$ in $S$ (including $x$ itself);\n2. Then, remove $x$ from $S$ (note that nothing else is removed).\n\nFind the maximum possible number of operations that can be performed.\n\n### Input\n\nEach test contains multiple test cases. The first line of the input contains a single integer $t$ ($1\\le t\\le 10^4$) — the number of test cases. The description of test cases follows.\n\nThe only line of each test case contains three integers $l$, $r$, and $k$ ($1\\le l\\le r\\leq 10^9$, $1\\leq k\\le r-l+1$) — the minimum integer in $S$, the maximum integer in $S$, and the parameter $k$.\n\n### Output\n\nFor each test case, output a single integer — the maximum possible number of operations that can be performed.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n3 9 2\n\n4 9 1\n\n7 9 2\n\n2 10 2\n\n154 220 2\n\n147 294 2\n\n998 24435 3\n\n1 1000000000 2\n\n```\n\n#### Output #1\n\n```\n2\n6\n0\n4\n0\n1\n7148\n500000000\n```\n\n### Note\n\nIn the first test case, initially, $S = \\{3,4,5,6,7,8,9\\}$. One possible optimal sequence of operations is:\n\n1. Choose $x = 4$ for the first operation, since there are two multiples of $4$ in $S$: $4$ and $8$. $S$ becomes equal to $\\{3,5,6,7,8,9\\}$;\n2. Choose $x = 3$ for the second operation, since there are three multiples of $3$ in $S$: $3$, $6$, and $9$. $S$ becomes equal to $\\{5,6,7,8,9\\}$.\n\nIn the second test case, initially, $S=\\{4,5,6,7,8,9\\}$. One possible optimal sequence of operations is:\n\n1. Choose $x = 5$, $S$ becomes equal to $\\{4,6,7,8,9\\}$;\n2. Choose $x = 6$, $S$ becomes equal to $\\{4,7,8,9\\}$;\n3. Choose $x = 4$, $S$ becomes equal to $\\{7,8,9\\}$;\n4. Choose $x = 8$, $S$ becomes equal to $\\{7,9\\}$;\n5. Choose $x = 7$, $S$ becomes equal to $\\{9\\}$;\n6. Choose $x = 9$, $S$ becomes equal to $\\{\\}$.\n\nIn the third test case, initially, $S=\\{7,8,9\\}$. For each $x$ in $S$, no multiple of $x$ other than $x$ itself can be found in $S$. Since $k = 2$, you can perform no operations.\n\nIn the fourth test case, initially, $S=\\{2,3,4,5,6,7,8,9,10\\}$. One possible optimal sequence of operations is:\n\n1. Choose $x = 2$, $S$ becomes equal to $\\{3,4,5,6,7,8,9,10\\}$;\n2. Choose $x = 4$, $S$ becomes equal to $\\{3,5,6,7,8,9,10\\}$;\n3. Choose $x = 3$, $S$ becomes equal to $\\{5,6,7,8,9,10\\}$;\n4. Choose $x = 5$, $S$ becomes equal to $\\{6,7,8,9,10\\}$.", "cfid": "2029A"}
{"problem_id": "2029C", "problem_title": "C. New Rating", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2029/C", "problem_statement": "Hello, Codeforces Forcescode!\n\nKevin used to be a participant of Codeforces. Recently, the KDOI Team has developed a new Online Judge called Forcescode.\n\nKevin has participated in $n$ contests on Forcescode. In the $i$-th contest, his performance rating is $a_i$.\n\nNow he has hacked into the backend of Forcescode and will select an interval $[l,r]$ ($1\\le l\\le r\\le n$), then skip all of the contests in this interval. After that, his rating will be recalculated in the following way:\n\n- Initially, his rating is $x=0$;\n- For each $1\\le i\\le n$, after the $i$-th contest,\n  - If $l\\le i\\le r$, this contest will be skipped, and the rating will remain unchanged;\n  - Otherwise, his rating will be updated according to the following rules:\n    - If $a_i>x$, his rating $x$ will increase by $1$;\n    - If $a_i=x$, his rating $x$ will remain unchanged;\n    - If $a_i<x$, his rating $x$ will decrease by $1$.\n\nYou have to help Kevin to find his maximum possible rating after the recalculation if he chooses the interval $[l,r]$ optimally. Note that Kevin has to skip at least one contest.\n\n### Input\n\nEach test contains multiple test cases. The first line of the input contains a single integer $t$ ($1\\le t\\le 5\\cdot 10^4$) — the number of test cases. The description of test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1\\le n\\le 3\\cdot 10^5$) — the number of contests.\n\nThe second line contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($1\\le a_i\\le n$) — the performance ratings in the contests.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $3 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the maximum possible rating after the recalculation if Kevin chooses the interval optimally.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n6\n\n1 2 3 4 5 6\n\n7\n\n1 2 1 1 1 3 4\n\n1\n\n1\n\n9\n\n9 9 8 2 4 4 3 5 3\n\n10\n\n1 2 3 4 1 3 2 1 1 10\n\n```\n\n#### Output #1\n\n```\n5\n4\n0\n4\n5\n```\n\n### Note\n\nIn the first test case, Kevin must skip at least one contest. If he chooses any interval of length $1$, his rating after the recalculation will be equal to $5$.\n\nIn the second test case, Kevin's optimal choice is to select the interval $[3,5]$. During the recalculation, his rating changes as follows:\n\n\n\n$$ 0 \\xrightarrow{a_1=1} 1 \\xrightarrow{a_2=2} 2 \\xrightarrow{\\mathtt{skip}} 2 \\xrightarrow{\\mathtt{skip}} 2 \\xrightarrow{\\mathtt{skip}} 2 \\xrightarrow{a_6=3} 3 \\xrightarrow{a_7=4} 4 $$\n\nIn the third test case, Kevin must skip the only contest, so his rating will remain at the initial value of $0$.\n\nIn the fourth test case, Kevin's optimal choice is to select the interval $[7,9]$. During the recalculation, his rating changes as follows:\n\n\n\n$$ 0 \\xrightarrow{a_1=9} 1 \\xrightarrow{a_2=9} 2 \\xrightarrow{a_3=8} 3 \\xrightarrow{a_4=2} 2 \\xrightarrow{a_5=4} 3 \\xrightarrow{a_6=4} 4 \\xrightarrow{\\mathtt{skip}} 4 \\xrightarrow{\\mathtt{skip}} 4 \\xrightarrow{\\mathtt{skip}} 4 $$\n\nIn the fifth test case, Kevin's optimal choice is to select the interval $[5,9]$.", "cfid": "2029C"}
{"problem_id": "2036B", "problem_title": "B. Startup", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2036/B", "problem_statement": "Arseniy came up with another business plan — to sell soda from a vending machine! For this, he purchased a machine with $n$ shelves, as well as $k$ bottles, where the $i$-th bottle is characterized by the brand index $b_i$ and the cost $c_i$.\n\nYou can place any number of bottles on each shelf, but all bottles on the same shelf must be of the same brand.\n\nArseniy knows that all the bottles he puts on the shelves of the machine will be sold. Therefore, he asked you to calculate the maximum amount he can earn.\n\n### Input\n\nThe first line contains one integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\le n, k \\le 2 \\cdot 10^5$), where $n$ is the number of shelves in the machine, and $k$ is the number of bottles available to Arseniy.\n\nThe next $k$ lines contain two integers $b_i$ and $c_i$ ($1 \\le b_i \\le k, 1 \\le c_i \\le 1000$) — the brand and cost of the $i$-th bottle.\n\nIt is also guaranteed that the sum of $n$ across all test cases does not exceed $2 \\cdot 10^5$ and that the sum of $k$ across all test cases also does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output one integer — the maximum amount that Arseniy can earn.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3 3\n\n2 6\n\n2 7\n\n1 15\n\n1 3\n\n2 6\n\n2 7\n\n1 15\n\n6 2\n\n1 7\n\n2 5\n\n190000 1\n\n1 1000\n\n```\n\n#### Output #1\n\n```\n28\n15\n12\n1000\n```\n\n### Note\n\nIn the first test case, Arseniy has $3$ shelves in the vending machine. He can place, for example, two bottles of the brand $2$ on the first shelf and a bottle of the brand $1$ on the second shelf. Then the total cost of the bottles would be $6 + 7 + 15 = 28$.\n\nIn the second test case, he has only one shelf. It is not difficult to show that the optimal option is to place a bottle of the brand $1$ on it. Then the total cost will be $15$.\n\nIn the third test case, he has as many as $6$ shelves, so he can place all available bottles with a total cost of $7 + 5 = 12$.", "cfid": "2036B"}
{"problem_id": "2036A", "problem_title": "A. Quintomania", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2036/A", "problem_statement": "Boris Notkin composes melodies. He represents them as a sequence of notes, where each note is encoded as an integer from $0$ to $127$ inclusive. The interval between two notes $a$ and $b$ is equal to $|a - b|$ semitones.\n\nBoris considers a melody perfect if the interval between each two adjacent notes is either $5$ semitones or $7$ semitones.\n\nAfter composing his latest melodies, he enthusiastically shows you his collection of works. Help Boris Notkin understand whether his melodies are perfect.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 1000$) — the number of melodies.\n\nEach melody is described by two lines.\n\nThe first line contains an integer $n$ ($2 \\leq n \\leq 50$) — the number of notes in the melody.\n\nThe second line contains $n$ integers $a_{1}, a_{2}, \\dots, a_{n}$ ($0 \\leq a_{i} \\leq 127$) — the notes of the melody.\n\n### Output\n\nFor each melody, output \"YES\", if it is perfect; otherwise, output \"NO\".\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n2\n\n114 109\n\n2\n\n17 10\n\n3\n\n76 83 88\n\n8\n\n38 45 38 80 85 92 99 106\n\n5\n\n63 58 65 58 65\n\n8\n\n117 124 48 53 48 43 54 49\n\n5\n\n95 102 107 114 121\n\n10\n\n72 77 82 75 70 75 68 75 68 75\n\n```\n\n#### Output #1\n\n```\nYES\nYES\nYES\nNO\nYES\nNO\nYES\nYES\n```", "cfid": "2036A"}
{"problem_id": "2036C", "problem_title": "C. Anya and 1100", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2036/C", "problem_statement": "While rummaging through things in a distant drawer, Anya found a beautiful string $s$ consisting only of zeros and ones.\n\nNow she wants to make it even more beautiful by performing $q$ operations on it.\n\nEach operation is described by two integers $i$ ($1 \\le i \\le |s|$) and $v$ ($v \\in \\{0, 1\\}$) and means that the $i$-th character of the string is assigned the value $v$ (that is, the assignment $s_i = v$ is performed).\n\nBut Anya loves the number $1100$, so after each query, she asks you to tell her whether the substring \"1100\" is present in her string (i.e. there exist such $1 \\le i \\le |s| - 3$ that $s_{i}s_{i + 1}s_{i + 2}s_{i + 3} = \\texttt{1100}$).\n\n### Input\n\nThe first line contains one integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe first line of the test case contains the string $s$ ($1 \\leq |s| \\leq 2 \\cdot 10^5$), consisting only of the characters \"0\" and \"1\". Here $|s|$ denotes the length of the string $s$.\n\nThe next line contains an integer $q$ ($1 \\leq q \\leq 2 \\cdot 10^5$) — the number of queries.\n\nThe following $q$ lines contain two integers $i$ ($1 \\leq i \\leq |s|$) and $v$ ($v \\in \\{0, 1\\}$), describing the query.\n\nIt is guaranteed that the sum of $|s|$ across all test cases does not exceed $2 \\cdot 10^5$. It is also guaranteed that the sum of $q$ across all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each query, output \"YES\", if \"1100\" is present in Anya's string; otherwise, output \"NO\".\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n100\n\n4\n\n1 1\n\n2 0\n\n2 0\n\n3 1\n\n1100000\n\n3\n\n6 1\n\n7 1\n\n4 1\n\n111010\n\n4\n\n1 1\n\n5 0\n\n4 1\n\n5 0\n\n0100\n\n4\n\n3 1\n\n1 1\n\n2 0\n\n2 1\n\n```\n\n#### Output #1\n\n```\nNO\nNO\nNO\nNO\nYES\nYES\nNO\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nNO\n```", "cfid": "2036C"}
{"problem_id": "2036E", "problem_title": "E. Reverse the Rivers", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2036/E", "problem_statement": "A conspiracy of ancient sages, who decided to redirect rivers for their own convenience, has put the world on the brink. But before implementing their grand plan, they decided to carefully think through their strategy — that's what sages do.\n\nThere are $n$ countries, each with exactly $k$ regions. For the $j$-th region of the $i$-th country, they calculated the value $a_{i,j}$, which reflects the amount of water in it.\n\nThe sages intend to create channels between the $j$-th region of the $i$-th country and the $j$-th region of the $(i + 1)$-th country for all $1 \\leq i \\leq (n - 1)$ and for all $1 \\leq j \\leq k$.\n\nSince all $n$ countries are on a large slope, water flows towards the country with the highest number. According to the sages' predictions, after the channel system is created, the new value of the $j$-th region of the $i$-th country will be $b_{i,j} = a_{1,j} | a_{2,j} | ... | a_{i,j}$, where $|$ denotes the [bitwise \"OR\"](http://tiny.cc/bitwise_or) operation.\n\nAfter the redistribution of water, the sages aim to choose the most suitable country for living, so they will send you $q$ queries for consideration.\n\nEach query will contain $m$ requirements.\n\nEach requirement contains three parameters: the region number $r$, the sign $o$ (either \"$<$\" or \"$>$\"), and the value $c$. If $o$ = \"$<$\", then in the $r$-th region of the country you choose, the new value must be strictly less than the limit $c$, and if $o$ = \"$>$\", it must be strictly greater.\n\nIn other words, the chosen country $i$ must satisfy all $m$ requirements. If in the current requirement $o$ = \"$<$\", then it must hold that $b_{i,r} < c$, and if $o$ = \"$>$\", then $b_{i,r} > c$.\n\nIn response to each query, you should output a single integer — the number of the suitable country. If there are multiple such countries, output the smallest one. If no such country exists, output $-1$.\n\n### Input\n\nThe first line contains three integers $n$, $k$, and $q$ ($1 \\leq n, k, q \\leq 10^5$) — the number of countries, regions, and queries, respectively.\n\nNext, there are $n$ lines, where the $i$-th line contains $k$ integers $a_{i,1}, a_{i,2}, \\dots, a_{i,k}$ ($1 \\leq a_{i,j} \\leq 10^9$), where $a_{i,j}$ is the value of the $j$-th region of the $i$-th country.\n\nThen, $q$ queries are described.\n\nThe first line of each query contains a single integer $m$ ($1 \\leq m \\leq 10^5$) — the number of requirements.\n\nThen follow $m$ lines, each containing an integer $r$, a character $o$, and an integer $c$ ($1 \\leq r \\leq k$, $0 \\leq c \\leq 2 \\cdot 10^9$), where $r$ and $c$ are the region number and the value, and $o$ is either \"$<$\" or \"$>$\" — the sign.\n\nIt is guaranteed that $n \\cdot k$ does not exceed $10^5$ and that the sum of $m$ across all queries also does not exceed $10^5$.\n\n### Output\n\nFor each query, output a single integer on a new line — the smallest number of the suitable country, or $-1$ if no such country exists.\n\n### Example\n\n#### Input #1\n\n```\n\n3 4 4\n\n1 3 5 9\n\n4 6 5 3\n\n2 1 2 7\n\n3\n\n1 > 4\n\n2 < 8\n\n1 < 6\n\n2\n\n1 < 8\n\n2 > 8\n\n1\n\n3 > 5\n\n2\n\n4 > 8\n\n1 < 8\n\n```\n\n#### Output #1\n\n```\n2\n-1\n3\n1\n```\n\n### Note\n\nIn the example, the initial values of the regions are as follows:\n\n$1\n\n$$3$$\n\n5\n\n$$9$$\n\n4\n\n$$6$$\n\n5\n\n$$3$$\n\n2\n\n$$1$$\n\n2$$7$\n\nAfter creating the channels, the new values will look like this:\n\n$1\n\n$$3$$\n\n5\n\n$$9$$\n\n1 | 4\n\n$$3 | 6$$\n\n5 | 5\n\n$$9 | 3$$\n\n1 | 4 | 2\n\n$$3 | 6 | 1$$\n\n5 | 5 | 2\n\n$$9 | 3 | 7$ $\\downarrow$ $1$$\n\n3\n\n$$5$$\n\n9\n\n$$5$$\n\n7\n\n$$5$$\n\n11\n\n$$7$$\n\n7\n\n$$7$$\n\n15$\n\nIn the first query, it is necessary to output the minimum country number (i.e., row) where, after the redistribution of water in the first region (i.e., column), the new value will be greater than four and less than six, and in the second region it will be less than eight. Only the country with number $2$ meets these requirements.\n\nIn the second query, there are no countries that meet the specified requirements.\n\nIn the third query, only the country with number $3$ is suitable.\n\nIn the fourth query, all three countries meet the conditions, so the answer is the smallest number $1$.", "cfid": "2036E"}
{"problem_id": "2036D", "problem_title": "D. I Love 1543", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2036/D", "problem_statement": "One morning, Polycarp woke up and realized that $1543$ is the most favorite number in his life.\n\nThe first thing that Polycarp saw that day as soon as he opened his eyes was a large wall carpet of size $n$ by $m$ cells; $n$ and $m$ are even integers. Each cell contains one of the digits from $0$ to $9$.\n\nPolycarp became curious about how many times the number $1543$ would appear in all layers$^{\\text{∗}}$ of the carpet when traversed clockwise.\n\n$^{\\text{∗}}$The first layer of a carpet of size $n \\times m$ is defined as a closed strip of length $2 \\cdot (n+m-2)$ and thickness of $1$ element, surrounding its outer part. Each subsequent layer is defined as the first layer of the carpet obtained by removing all previous layers from the original carpet.\n\n### Input\n\nThe first line of the input contains a single integer $t$ ($1 \\leq t \\leq 100$) — the number of test cases. The following lines describe the test cases.\n\nThe first line of each test case contains a pair of numbers $n$ and $m$ ($2 \\leq n, m \\leq 10^3$, $n, m$ — even integers).\n\nThis is followed by $n$ lines of length $m$, consisting of digits from $0$ to $9$ — the description of the carpet.\n\nIt is guaranteed that the sum of $n \\cdot m$ across all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case, output a single number — the total number of times $1543$ appears in all layers of the carpet in the order of traversal clockwise.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n2 4\n\n1543\n\n7777\n\n2 4\n\n7154\n\n8903\n\n2 4\n\n3451\n\n8888\n\n2 2\n\n54\n\n13\n\n2 2\n\n51\n\n43\n\n2 6\n\n432015\n\n512034\n\n4 4\n\n5431\n\n1435\n\n5518\n\n7634\n\n6 4\n\n5432\n\n1152\n\n4542\n\n2432\n\n2302\n\n5942\n\n```\n\n#### Output #1\n\n```\n1\n1\n0\n1\n0\n2\n2\n2\n```\n\n### Note\n\n![](https://espresso.codeforces.com/376751b0f30c54602e78b686b24d2749f7484632.png)Occurrences of $1543$ in the seventh example. Different layers are colored in different colors.", "cfid": "2036D"}
{"problem_id": "2032B", "problem_title": "B. Medians", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2032/B", "problem_statement": "You are given an array $a = [1, 2, \\ldots, n]$, where $n$ is odd, and an integer $k$.\n\nYour task is to choose an odd positive integer $m$ and to split $a$ into $m$ subarrays$^{\\dagger}$ $b_1, b_2, \\ldots, b_m$ such that:\n\n- Each element of the array $a$ belongs to exactly one subarray.\n- For all $1 \\le i \\le m$, $|b_i|$ is odd, i.e., the length of each subarray is odd.\n- $\\operatorname{median}([\\operatorname{median}(b_1), \\operatorname{median}(b_2), \\ldots, \\operatorname{median}(b_m)]) = k$, i.e., the median$^{\\ddagger}$ of the array of medians of all subarrays must equal $k$. $\\operatorname{median}(c)$ denotes the median of the array $c$.\n\n$^{\\dagger}$A subarray of the array $a$ of length $n$ is the array $[a_l, a_{l + 1}, \\ldots, a_r]$ for some integers $1 \\le l \\le r \\le n$.\n\n$^{\\ddagger}$A median of the array of odd length is the middle element after the array is sorted in non-decreasing order. For example: $\\operatorname{median}([1,2,5,4,3]) = 3$, $\\operatorname{median}([3,2,1]) = 2$, $\\operatorname{median}([2,1,2,1,2,2,2]) = 2$.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 5000$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\le k \\le n < 2 \\cdot 10^5$, $n$ is odd) — the length of array $a$ and the desired median of the array of medians of all subarrays.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case:\n\n- If there is no suitable partition, output $-1$ in a single line.\n- Otherwise, in the first line, output an odd integer $m$ ($1 \\le m \\le n$), and in the second line, output $m$ distinct integers $p_1, p_2 , p_3 , \\ldots, p_m$ ($1 = p_1 < p_2 < p_3 < \\ldots < p_m \\le n$) — denoting the left borders of each subarray.\n\nIn detail, for a valid answer $[p_1, p_2, \\ldots, p_m]$:\n\n- $b_1 = \\left[ a_{p_1}, a_{p_1 + 1}, \\ldots, a_{p_2 - 1} \\right]$\n- $b_2 = \\left[ a_{p_2}, a_{p_2 + 1}, \\ldots, a_{p_3 - 1} \\right]$\n- $\\ldots$\n- $b_m = \\left[ a_{p_m}, a_{p_m + 1}, \\ldots, a_n \\right]$.\n\nIf there are multiple solutions, you can output any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n1 1\n\n3 2\n\n3 3\n\n15 8\n\n```\n\n#### Output #1\n\n```\n1\n1\n3\n1 2 3\n-1\n5\n1 4 7 10 13\n```\n\n### Note\n\nIn the first test case, the given partition has $m = 1$ and $b_1 = [1]$. It is obvious that $\\operatorname{median}([\\operatorname{median}([1])]) = \\operatorname{median}([1]) = 1$.\n\nIn the second test case, the given partition has $m = 3$ and:\n\n- $b_1 = [1]$\n- $b_2 = [2]$\n- $b_3 = [3]$\n\nTherefore, $\\operatorname{median}([\\operatorname{median}([1]), \\operatorname{median}([2]), \\operatorname{median}([3])]) = \\operatorname{median}([1, 2, 3]) = 2$.\n\nIn the third test case, there is no valid partition for $k = 3$.\n\nIn the fourth test case, the given partition has $m = 5$ and:\n\n- $b_1 = [1, 2, 3]$\n- $b_2 = [4, 5, 6]$\n- $b_3 = [7, 8, 9]$\n- $b_4 = [10, 11, 12]$\n- $b_5 = [13, 14, 15]$\n\nTherefore, $\\operatorname{median}([\\operatorname{median}([1, 2, 3]), \\operatorname{median}([4, 5, 6]), \\operatorname{median}([7, 8, 9]), \\operatorname{median}([10, 11, 12]), \\operatorname{median}([13, 14, 15])]) = \\operatorname{median}([2, 5, 8, 11, 14]) = 8$.", "cfid": "2032B"}
{"problem_id": "2032D", "problem_title": "D. Genokraken", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2032/D", "problem_statement": "This is an interactive problem.\n\nUpon clearing the Waterside Area, Gretel has found a monster named Genokraken, and she's keeping it contained for her scientific studies.\n\nThe monster's nerve system can be structured as a tree$^{\\dagger}$ of $n$ nodes (really, everything should stop resembling trees all the time$\\ldots$), numbered from $0$ to $n-1$, with node $0$ as the root.\n\nGretel's objective is to learn the exact structure of the monster's nerve system — more specifically, she wants to know the values $p_1, p_2, \\ldots, p_{n-1}$ of the tree, where $p_i$ ($0 \\le p_i < i$) is the direct parent node of node $i$ ($1 \\le i \\le n - 1$).\n\nShe doesn't know exactly how the nodes are placed, but she knows a few convenient facts:\n\n- If we remove root node $0$ and all adjacent edges, this tree will turn into a forest consisting of only paths$^{\\ddagger}$. Each node that was initially adjacent to the node $0$ will be the end of some path.\n- The nodes are indexed in a way that if $1 \\le x \\le y \\le n - 1$, then $p_x \\le p_y$.\n- Node $1$ has exactly two adjacent nodes (including the node $0$).\n\n![](https://espresso.codeforces.com/79c0eaeb33c28c383838ac1d3ffe56a98aad0308.png)![](https://espresso.codeforces.com/cc25c204cfe251a488b90fa52b493218ec9a53b2.png)![](https://espresso.codeforces.com/e015305db3354f0fc63350fca12a2e243b01e727.png)The tree in this picture does not satisfy the condition, because if we remove node $0$, then node $2$ (which was initially adjacent to the node $0$) will not be the end of the path $4-2-5$.The tree in this picture does not satisfy the condition, because $p_3 \\le p_4$ must hold.The tree in this picture does not satisfy the condition, because node $1$ has only one adjacent node.\n\nGretel can make queries to the containment cell:\n\n- \"? a b\" ($1 \\le a, b < n$, $a \\ne b$) — the cell will check if the simple path between nodes $a$ and $b$ contains the node $0$.\n\nHowever, to avoid unexpected consequences by overstimulating the creature, Gretel wants to query at most $2n - 6$ times. Though Gretel is gifted, she can't do everything all at once, so can you give her a helping hand?\n\n$^{\\dagger}$A tree is a connected graph where every pair of distinct nodes has exactly one simple path connecting them.\n\n$^{\\ddagger}$A path is a tree whose vertices can be listed in the order $v_1, v_2, \\ldots, v_k$ such that the edges are $(v_i, v_{i+1})$ ($1 \\le i < k$).\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 500$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($4 \\le n \\le 10^4$) — the number of nodes in Genokraken's nerve system.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^4$.\n\n### Interaction\n\nFor each test case, interaction starts by reading the integer $n$.\n\nThen you can make queries of the following type:\n\n- \"? a b\" (without quotes) ($1 \\le a, b < n$, $a \\ne b$).\n\nAfter the query, read an integer $r$ — the answer to your query. You are allowed to use at most $2n - 6$ queries of this type.\n\n- If the simple path between nodes $a$ and $b$ does not contain node $0$, you will get $r = 0$.\n- If the simple path between nodes $a$ and $b$ contains node $0$, you will get $r = 1$.\n- In case you make more than $2n-6$ queries or make an invalid query, you will get $r = -1$. You will need to terminate after this to get the \"Wrong answer\" verdict. Otherwise, you can get an arbitrary verdict because your solution will continue to read from a closed stream.\n\nWhen you find out the structure, output a line in the format \"! $p_1 \\space p_2 \\ldots p_{n-1}$\" (without quotes), where $p_i$ ($0 \\le p_i < i$) denotes the index of the direct parent of node $i$. This query is not counted towards the $2n - 6$ queries limit.\n\nAfter solving one test case, the program should immediately move on to the next one. After solving all test cases, the program should be terminated immediately.\n\nAfter printing any query do not forget to output an end of line and flush the output buffer. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- flush(output) in Pascal;\n- stdout.flush() in Python;\n- see documentation for other languages.\n\nThe interactor is non-adaptive. The tree does not change during the interaction.\n\nHacks\n\nFor hack, use the following format:\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 500$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($4 \\le n \\le 10^4$) — the number of nodes in Genokraken's nerve system.\n\nThe second line of each test case contains $n-1$ integers $p_1, p_2, \\ldots, p_{n-1}$ ($0 \\le p_1 \\le p_2 \\le \\ldots \\le p_{n-1} \\le n - 2$, $0 \\le p_i < i$) — the direct parents of node $1$, $2$, ..., $n-1$ in the system, respectively.\n\nIn each test case, the values $p_1, p_2, \\ldots, p_{n-1}$ must ensure the following in the tree:\n\n- If we remove root node $0$ and all adjacent edges, this tree will turn into a forest consisting of only paths. Each node that was initially adjacent to the node $0$ will be the end of some path.\n- Node $1$ has exactly two adjacent nodes (including the node $0$).\n\nThe sum of $n$ over all test cases must not exceed $10^4$.\n\n### Example\n\n#### Input #1\n\n```\n3\n4\n\n1\n\n5\n\n1\n\n0\n\n9\n\n```\n\n#### Output #1\n\n```\n\n? 2 3\n\n! 0 0 1\n\n? 2 3\n\n? 2 4\n\n! 0 0 1 2\n\n! 0 0 0 1 3 5 6 7```\n\n### Note\n\nIn the first test case, Genokraken's nerve system forms the following tree:\n\n![](https://espresso.codeforces.com/991d6cb5d94abfd9a93a3612cadccb312faff58d.png)\n\n- The answer to \"? 2 3\" is $1$. This means that the simple path between nodes $2$ and $3$ contains node $0$.\n\nIn the second test case, Genokraken's nerve system forms the following tree:\n\n![](https://espresso.codeforces.com/f22633acb2e8fdafa664ba724b2b918559788075.png)\n\n- The answer to \"? 2 3\" is $1$. This means that the simple path between nodes $2$ and $3$ contains node $0$.\n- The answer to \"? 2 4\" is $0$. This means that the simple path between nodes $2$ and $4$ doesn't contain node $0$.\n\nIn the third test case, Genokraken's nerve system forms the following tree:\n\n![](https://espresso.codeforces.com/ba3efbe4d8cdb7afca29eb95512d7497d5e9507f.png)", "cfid": "2032D"}
{"problem_id": "2032C", "problem_title": "C. Trinity", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2032/C", "problem_statement": "You are given an array $a$ of $n$ elements $a_1, a_2, \\ldots, a_n$.\n\nYou can perform the following operation any number (possibly $0$) of times:\n\n- Choose two integers $i$ and $j$, where $1 \\le i, j \\le n$, and assign $a_i := a_j$.\n\nFind the minimum number of operations required to make the array $a$ satisfy the condition:\n\n- For every pairwise distinct triplet of indices $(x, y, z)$ ($1 \\le x, y, z \\le n$, $x \\ne y$, $y \\ne z$, $x \\ne z$), there exists a non-degenerate triangle with side lengths $a_x$, $a_y$ and $a_z$, i.e. $a_x + a_y > a_z$, $a_y + a_z > a_x$ and $a_z + a_x > a_y$.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($3 \\le n \\le 2 \\cdot 10^5$) — the number of elements in the array $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$) — the elements of the array $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the minimum number of operations required.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n7\n\n1 2 3 4 5 6 7\n\n3\n\n1 3 2\n\n3\n\n4 5 3\n\n15\n\n9 3 8 1 6 5 3 8 2 1 4 2 9 4 7\n\n```\n\n#### Output #1\n\n```\n3\n1\n0\n8\n```\n\n### Note\n\nIn the first test case, one of the possible series of operations would be:\n\n- Assign $a_1 := a_4 = 4$. The array will become $[4, 2, 3, 4, 5, 6, 7]$.\n- Assign $a_2 := a_5 = 5$. The array will become $[4, 5, 3, 4, 5, 6, 7]$.\n- Assign $a_7 := a_1 = 4$. The array will become $[4, 5, 3, 4, 5, 6, 4]$.\n\nIt can be proven that any triplet of elements with pairwise distinct indices in the final array forms a non-degenerate triangle, and there is no possible answer using less than $3$ operations.\n\nIn the second test case, we can assign $a_1 := a_2 = 3$ to make the array $a = [3, 3, 2]$.\n\nIn the third test case, since $3$, $4$ and $5$ are valid side lengths of a triangle, we don't need to perform any operation to the array.", "cfid": "2032C"}
{"problem_id": "2032A", "problem_title": "A. Circuit", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2032/A", "problem_statement": "Alice has just crafted a circuit with $n$ lights and $2n$ switches. Each component (a light or a switch) has two states: on or off. The lights and switches are arranged in a way that:\n\n- Each light is connected to exactly two switches.\n- Each switch is connected to exactly one light. It's unknown which light each switch is connected to.\n- When all switches are off, all lights are also off.\n- If a switch is toggled (from on to off, or vice versa), the state of the light connected to it will also toggle.\n\nAlice brings the circuit, which shows only the states of the $2n$ switches, to her sister Iris and gives her a riddle: what is the minimum and maximum number of lights that can be turned on?\n\nKnowing her little sister's antics too well, Iris takes no more than a second to give Alice a correct answer. Can you do the same?\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 500$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 50$) — the number of lights in the circuit.\n\nThe second line of each test case contains $2n$ integers $a_1, a_2, \\ldots, a_{2n}$ ($0 \\le a_i \\le 1$) — the states of the switches in the circuit. $a_i = 0$ means the $i$-th switch is off, and $a_i = 1$ means the $i$-th switch is on.\n\n### Output\n\nFor each test case, output two integers — the minimum and maximum number of lights, respectively, that can be turned on.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n1\n\n0 0\n\n1\n\n0 1\n\n1\n\n1 1\n\n3\n\n0 0 1 0 1 0\n\n3\n\n0 1 1 1 0 0\n\n```\n\n#### Output #1\n\n```\n0 0\n1 1\n0 0\n0 2\n1 3\n```\n\n### Note\n\nIn the first test case, there is only one light in the circuit, and no switch is on, so the light is certainly off.\n\nIn the second test case, there is only one light in the circuit, but one switch connected to it is on, so the light is on.\n\nIn the third test case, there is only one light in the circuit, and both switches are on, so the light is off as it was toggled twice.\n\nIn the fourth test case, to have no lights on, the switches can be arranged in this way:\n\n- Switch $1$ and switch $4$ are connected to light $1$. Since both switches are off, light $1$ is also off.\n- Switch $2$ and switch $6$ are connected to light $2$. Since both switches are off, light $2$ is also off.\n- Switch $3$ and switch $5$ are connected to light $3$. Both switches are on, so light $3$ is toggled twice from its initial off state, and thus also stays off.\n\nAnd to have $2$ lights on, the switches can be arranged in this way:\n\n- Switch $1$ and switch $2$ are connected to light $1$. Since both switches are off, light $1$ is also off.\n- Switch $3$ and switch $4$ are connected to light $2$. Since switch $3$ is on and switch $4$ is off, light $2$ is toggled once from its initial off state, so it is on.\n- Switch $5$ and switch $6$ are connected to light $3$. Since switch $5$ is on and switch $6$ is off, light $3$ is toggled once from its initial off state, so it is on.", "cfid": "2032A"}
{"problem_id": "2026C", "problem_title": "C. Action Figures", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2026/C", "problem_statement": "There is a shop that sells action figures near Monocarp's house. A new set of action figures will be released shortly; this set contains $n$ figures, the $i$-th figure costs $i$ coins and is available for purchase from day $i$ to day $n$.\n\nFor each of the $n$ days, Monocarp knows whether he can visit the shop.\n\nEvery time Monocarp visits the shop, he can buy any number of action figures which are sold in the shop (of course, he cannot buy an action figure that is not yet available for purchase). If Monocarp buys at least two figures during the same day, he gets a discount equal to the cost of the most expensive figure he buys (in other words, he gets the most expensive of the figures he buys for free).\n\nMonocarp wants to buy exactly one $1$-st figure, one $2$-nd figure, ..., one $n$-th figure from the set. He cannot buy the same figure twice. What is the minimum amount of money he has to spend?\n\n### Input\n\nThe first line contains one integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nEach test case consists of two lines:\n\n- the first line contains one integer $n$ ($1 \\le n \\le 4 \\cdot 10^5$) — the number of figures in the set (and the number of days);\n- the second line contains a string $s$ ($|s| = n$, each $s_i$ is either 0 or 1). If Monocarp can visit the shop on the $i$-th day, then $s_i$ is 1; otherwise, $s_i$ is 0.\n\nAdditional constraints on the input:\n\n- in each test case, $s_n$ is 1, so Monocarp is always able to buy all figures during the $n$-th day;\n- the sum of $n$ over all test cases does not exceed $4 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print one integer — the minimum amount of money Monocarp has to spend.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n1\n\n1\n\n6\n\n101101\n\n7\n\n1110001\n\n5\n\n11111\n\n```\n\n#### Output #1\n\n```\n1\n8\n18\n6\n```\n\n### Note\n\nIn the first test case, Monocarp buys the $1$-st figure on the $1$-st day and spends $1$ coin.\n\nIn the second test case, Monocarp can buy the $1$-st and the $3$-rd figure on the $3$-rd day, the $2$-nd and the $4$-th figure on the $4$-th day, and the $5$-th and the $6$-th figure on the $6$-th day. Then, he will spend $1+2+5=8$ coins.\n\nIn the third test case, Monocarp can buy the $2$-nd and the $3$-rd figure on the $3$-rd day, and all other figures on the $7$-th day. Then, he will spend $1+2+4+5+6 = 18$ coins.", "cfid": "2026C"}
{"problem_id": "2026B", "problem_title": "B. Black Cells", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2026/B", "problem_statement": "You are given a strip divided into cells, numbered from left to right from $0$ to $10^{18}$. Initially, all cells are white.\n\nYou can perform the following operation: choose two white cells $i$ and $j$, such that $i \\ne j$ and $|i - j| \\le k$, and paint them black.\n\nA list $a$ is given. All cells from this list must be painted black. Additionally, at most one cell that is not in this list can also be painted black. Your task is to determine the minimum value of $k$ for which this is possible.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 500$) — the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 2000$).\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($0 < a_i < 10^{18}$; $a_i < a_{i + 1}$).\n\nAdditional constraint on the input: the sum of $n$ across all test cases does not exceed $2000$.\n\n### Output\n\nFor each test case, print a single integer — the minimum value of $k$ for which it is possible to paint all the given cells black.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2\n\n1 2\n\n1\n\n7\n\n3\n\n2 4 9\n\n5\n\n1 5 8 10 13\n\n```\n\n#### Output #1\n\n```\n1\n1\n2\n3\n```\n\n### Note\n\nIn the first example, with $k=1$, it is possible to paint the cells $(1, 2)$.\n\nIn the second example, with $k=1$, it is possible to paint the cells $(7, 8)$.\n\nIn the third example, with $k=2$, it is possible to paint the cells $(2, 4)$ and $(8, 9)$.\n\nIn the fourth example, with $k=3$, it is possible to paint the cells $(0, 1)$, $(5, 8)$ and $(10, 13)$.", "cfid": "2026B"}
{"problem_id": "2026A", "problem_title": "A. Perpendicular Segments", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2026/A", "problem_statement": "You are given a coordinate plane and three integers $X$, $Y$, and $K$. Find two line segments $AB$ and $CD$ such that\n\n1. the coordinates of points $A$, $B$, $C$, and $D$ are integers;\n2. $0 \\le A_x, B_x, C_x, D_x \\le X$ and $0 \\le A_y, B_y, C_y, D_y \\le Y$;\n3. the length of segment $AB$ is at least $K$;\n4. the length of segment $CD$ is at least $K$;\n5. segments $AB$ and $CD$ are perpendicular: if you draw lines that contain $AB$ and $CD$, they will cross at a right angle.\n\nNote that it's not necessary for segments to intersect. Segments are perpendicular as long as the lines they induce are perpendicular.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 5000$) — the number of test cases. Next, $t$ cases follow.\n\nThe first and only line of each test case contains three integers $X$, $Y$, and $K$ ($1 \\le X, Y \\le 1000$; $1 \\le K \\le 1414$).\n\nAdditional constraint on the input: the values of $X$, $Y$, and $K$ are chosen in such a way that the answer exists.\n\n### Output\n\nFor each test case, print two lines. The first line should contain $4$ integers $A_x$, $A_y$, $B_x$, and $B_y$ — the coordinates of the first segment.\n\nThe second line should also contain $4$ integers $C_x$, $C_y$, $D_x$, and $D_y$ — the coordinates of the second segment.\n\nIf there are multiple answers, print any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n1 1 1\n\n3 4 1\n\n4 3 3\n\n3 4 4\n\n```\n\n#### Output #1\n\n```\n0 0 1 0\n0 0 0 1\n2 4 2 2\n0 1 1 1\n0 0 1 3\n1 2 4 1\n0 1 3 4\n0 3 3 0\n```\n\n### Note\n\nThe answer for the first test case is shown below:\n\n![](https://espresso.codeforces.com/8ff10475ccf3403c6de83da01703883f8a912f68.png) The answer for the second test case: ![](https://espresso.codeforces.com/f5d07d5cf35872fb3871f0fdbc299a6bf02f4c41.png) The answer for the third test case: ![](https://espresso.codeforces.com/8bb04be50b98e98df8bafec057d0479b6f4fcde0.png) The answer for the fourth test case: ![](https://espresso.codeforces.com/9cf56bcca6e135737bc885eecb651d8ca3e5adcf.png)", "cfid": "2026A"}
{"problem_id": "2035A", "problem_title": "A. Sliding", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2035/A", "problem_statement": "Red was ejected. They were not the imposter.\n\nThere are $n$ rows of $m$ people. Let the position in the $r$-th row and the $c$-th column be denoted by $(r, c)$. Number each person starting from $1$ in row-major order, i.e., the person numbered $(r-1)\\cdot m+c$ is initially at $(r,c)$.\n\nThe person at $(r, c)$ decides to leave. To fill the gap, let the person who left be numbered $i$. Each person numbered $j>i$ will move to the position where the person numbered $j-1$ is initially at. The following diagram illustrates the case where $n=2$, $m=3$, $r=1$, and $c=2$.\n\n![](https://espresso.codeforces.com/b24389738aac41115cbf116d0cb49065a5710c74.png)\n\nCalculate the sum of the Manhattan distances of each person's movement. If a person was initially at $(r_0, c_0)$ and then moved to $(r_1, c_1)$, the Manhattan distance is $|r_0-r_1|+|c_0-c_1|$.\n\n### Input\n\nThe first line contains a single integer $t$ ($1\\le t\\le 10^4$) — the number of test cases.\n\nThe only line of each testcase contains $4$ integers $n$, $m$, $r$, and $c$ ($1\\le r\\le n\\le 10^6$, $1 \\le c \\le m \\le 10^6$), where $n$ is the number of rows, $m$ is the number of columns, and $(r,c)$ is the position where the person who left is initially at.\n\n### Output\n\nFor each test case, output a single integer denoting the sum of the Manhattan distances.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2 3 1 2\n\n2 2 2 1\n\n1 1 1 1\n\n1000000 1000000 1 1\n\n```\n\n#### Output #1\n\n```\n6\n1\n0\n1999998000000\n```\n\n### Note\n\nFor the first test case, the person numbered $2$ leaves, and the distances of the movements of the person numbered $3$, $4$, $5$, and $6$ are $1$, $3$, $1$, and $1$, respectively. So the answer is $1+3+1+1=6$.\n\nFor the second test case, the person numbered $3$ leaves, and the person numbered $4$ moves. The answer is $1$.", "cfid": "2035A"}
{"problem_id": "2035C", "problem_title": "C. Alya and Permutation", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2035/C", "problem_statement": "Alya has been given a hard problem. Unfortunately, she is too busy running for student council. Please solve this problem for her.\n\nGiven an integer $n$, construct a permutation $p$ of integers $1, 2, \\ldots, n$ that maximizes the value of $k$ (which is initially $0$) after the following process.\n\nPerform $n$ operations, on the $i$-th operation ($i=1, 2, \\dots, n$),\n\n- If $i$ is odd, $k=k\\,\\&\\,p_i$, where $\\&$ denotes the [bitwise AND operation](https://en.wikipedia.org/wiki/Bitwise_operation#AND).\n- If $i$ is even, $k=k\\,|\\,p_i$, where $|$ denotes the [bitwise OR operation](https://en.wikipedia.org/wiki/Bitwise_operation#OR).\n\n### Input\n\nThe first line contains a single integer $t$ ($1\\le t\\le 500$) — the number of test cases.\n\nThe only line of each test case contains a single integer $n$ ($5\\le n\\le 2 \\cdot 10^5$) — the length of the permutation.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the maximum value of $k$ in the first line and output the permutation $p_1, p_2,\\ldots, p_n$ in the second line.\n\nIf there are multiple such permutations, output any.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n```\n\n#### Output #1\n\n```\n5\n2 1 3 4 5\n7\n1 2 4 6 5 3\n7\n2 4 5 1 3 6 7\n15\n2 4 5 1 3 6 7 8\n9\n2 4 5 6 7 1 3 8 9\n15\n1 2 3 4 5 6 8 10 9 7\n```\n\n### Note\n\nFor the first test case, the value of $k$ is determined as follows:\n\n$k = 0$ initially.\n\n- On the $1$st operation, $1$ is odd, so Alya sets $k$ to be $k\\&p_1 = 0\\&2 = 0$.\n- On the $2$nd operation, $2$ is even, so Alya sets $k$ to be $k|p_2 = 0|1 = 1$.\n- On the $3$rd operation, $3$ is odd, so Alya sets $k$ to be $k\\&p_3 = 1\\&3 = 1$.\n- On the $4$th operation, $4$ is even, so Alya sets $k$ to be $k|p_4 = 1|4 = 5$.\n- On the $5$th operation, $5$ is odd, so Alya sets $k$ to be $k\\&p_5 = 5\\&5 = 5$.\n\nThe final value of $k$ is $5$. It can be shown that the final value of $k$ is at most $5$ for all permutations of length $5$. Another valid output is $[2, 3, 1, 4, 5]$.\n\nFor the second test case, the final value of $k$ is $7$. It can be shown that the final value of $k$ is at most $7$ for all permutations of length $6$. Other valid outputs include $[2, 4, 1, 6, 3, 5]$ and $[5, 2, 6, 1, 3, 4]$.", "cfid": "2035C"}
{"problem_id": "2035D", "problem_title": "D. Yet Another Real Number Problem", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2035/D", "problem_statement": "Three r there are's in strawberry.\n\nYou are given an array $b$ of length $m$. You can perform the following operation any number of times (possibly zero):\n\n- Choose two distinct indices $i$ and $j$ where $\\bf{1\\le i < j\\le m}$ and $b_i$ is even, divide $b_i$ by $2$ and multiply $b_j$ by $2$.\n\nYour task is to maximize the sum of the array after performing any number of such operations. Since it could be large, output this sum modulo $10^9+7$.\n\nSince this problem is too easy, you are given an array $a$ of length $n$ and need to solve the problem for each prefix of $a$.\n\nIn other words, denoting the maximum sum of $b$ after performing any number of such operations as $f(b)$, you need to output $f([a_1])$, $f([a_1,a_2])$, $\\ldots$, $f([a_1,a_2,\\ldots,a_n])$ modulo $10^9+7$ respectively.\n\n### Input\n\nThe first line contains a single integer $t$ ($1\\le t\\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) — the length of $a$.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$) — the starting values of array $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases will not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output $n$ integers representing the answer for each prefix of $a$ modulo $10^9+7$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n10\n\n1 2 3 4 5 6 7 8 9 10\n\n11\n\n1 6 9 4 7 4 4 10 3 2 3\n\n4\n\n527792568 502211460 850237282 374773208\n\n```\n\n#### Output #1\n\n```\n1 3 8 13 46 59 126 149 1174 1311\n1 7 22 26 70 74 150 1303 1306 1308 1568\n527792568 83665723 399119771 773892979\n```\n\n### Note\n\nFor each prefix in the first example, a possible array after operations is:\n\n- $[1]$ and the sum is $1$;\n- $[1, 2]$ and the sum is $3$;\n- $[1, 1, 6]$ and the sum is $8$;\n- $[1, 1, 3, 8]$ and the sum is $13$;\n- $[1, 1, 3, 1, 40]$ and the sum is $46$;\n- $[1, 1, 3, 1, 5, 48]$ and the sum is $59$;\n- $[1, 1, 3, 1, 5, 3, 112]$ and the sum is $126$;\n- $[1, 1, 3, 1, 5, 3, 7, 128]$ and the sum is $149$;\n- $[1, 1, 3, 1, 5, 3, 7, 1, 1152]$ and the sum is $1174$;\n- $[1, 1, 3, 1, 5, 3, 7, 1, 9, 1280]$ and the sum is $1311$.", "cfid": "2035D"}
{"problem_id": "2035B", "problem_title": "B. Everyone Loves Tres", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2035/B", "problem_statement": "There are 3 heroes and 3 villains, so 6 people in total.\n\nGiven a positive integer $n$. Find the smallest integer whose decimal representation has length $n$ and consists only of $3$s and $6$s such that it is divisible by both $33$ and $66$. If no such integer exists, print $-1$.\n\n### Input\n\nThe first line contains a single integer $t$ ($1\\le t\\le 500$) — the number of test cases.\n\nThe only line of each test case contains a single integer $n$ ($1\\le n\\le 500$) — the length of the decimal representation.\n\n### Output\n\nFor each test case, output the smallest required integer if such an integer exists and $-1$ otherwise.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n1\n\n2\n\n3\n\n4\n\n5\n\n7\n\n```\n\n#### Output #1\n\n```\n-1\n66\n-1\n3366\n36366\n3336366\n```\n\n### Note\n\nFor $n=1$, no such integer exists as neither $3$ nor $6$ is divisible by $33$.\n\nFor $n=2$, $66$ consists only of $6$s and it is divisible by both $33$ and $66$.\n\nFor $n=3$, no such integer exists. Only $363$ is divisible by $33$, but it is not divisible by $66$.\n\nFor $n=4$, $3366$ and $6666$ are divisible by both $33$ and $66$, and $3366$ is the smallest.", "cfid": "2035B"}
{"problem_id": "2027B", "problem_title": "B. Stalin Sort", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2027/B", "problem_statement": "Stalin Sort is a humorous sorting algorithm designed to eliminate elements which are out of place instead of bothering to sort them properly, lending itself to an $\\mathcal{O}(n)$ time complexity.\n\nIt goes as follows: starting from the second element in the array, if it is strictly smaller than the previous element (ignoring those which have already been deleted), then delete it. Continue iterating through the array until it is sorted in non-decreasing order. For example, the array $[1, 4, 2, 3, 6, 5, 5, 7, 7]$ becomes $[1, 4, 6, 7, 7]$ after a Stalin Sort.\n\nWe define an array as vulnerable if you can sort it in non-increasing order by repeatedly applying a Stalin Sort to any of its subarrays$^{\\text{∗}}$, as many times as is needed.\n\nGiven an array $a$ of $n$ integers, determine the minimum number of integers which must be removed from the array to make it vulnerable.\n\n$^{\\text{∗}}$An array $a$ is a subarray of an array $b$ if $a$ can be obtained from $b$ by the deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\n### Input\n\nEach test consists of several test cases. The first line contains a single integer $t$ ($1 \\le t \\le 500$) — the number of test cases. This is followed by descriptions of the test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 2000$) — the size of the array.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2000$.\n\n### Output\n\nFor each test case, output a single integer — the minimum number of integers which must be removed from the array to make it vulnerable.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n7\n\n3 6 4 9 2 5 2\n\n5\n\n5 4 4 2 2\n\n8\n\n2 2 4 4 6 6 10 10\n\n1\n\n1000\n\n9\n\n6 8 9 10 12 9 7 5 4\n\n7\n\n300000000 600000000 400000000 900000000 200000000 400000000 200000000\n\n```\n\n#### Output #1\n\n```\n2\n0\n6\n0\n4\n2\n```\n\n### Note\n\nIn the first test case, the optimal answer is to remove the numbers $3$ and $9$. Then we are left with $a = [6, 4, 2, 5, 2]$. To show this array is vulnerable, we can first apply a Stalin Sort on the subarray $[4, 2, 5]$ to get $a = [6, 4, 5, 2]$ and then apply a Stalin Sort on the subarray $[6, 4, 5]$ to get $a = [6, 2]$, which is non-increasing.\n\nIn the second test case, the array is already non-increasing, so we don't have to remove any integers.", "cfid": "2027B"}
{"problem_id": "2027A", "problem_title": "A. Rectangle Arrangement", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2027/A", "problem_statement": "You are coloring an infinite square grid, in which all cells are initially white. To do this, you are given $n$ stamps. Each stamp is a rectangle of width $w_i$ and height $h_i$.\n\nYou will use each stamp exactly once to color a rectangle of the same size as the stamp on the grid in black. You cannot rotate the stamp, and for each cell, the stamp must either cover it fully or not cover it at all. You can use the stamp at any position on the grid, even if some or all of the cells covered by the stamping area are already black.\n\nWhat is the minimum sum of the perimeters of the connected regions of black squares you can obtain after all the stamps have been used?\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 500$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 100$).\n\nThe $i$-th of the next $n$ lines contains two integers $w_i$ and $h_i$ ($1 \\le w_i, h_i \\le 100$).\n\n### Output\n\nFor each test case, output a single integer — the minimum sum of the perimeters of the connected regions of black squares you can obtain after all the stamps have been used.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n5\n\n1 5\n\n2 4\n\n3 3\n\n4 2\n\n5 1\n\n3\n\n2 2\n\n1 1\n\n1 2\n\n1\n\n3 2\n\n3\n\n100 100\n\n100 100\n\n100 100\n\n4\n\n1 4\n\n2 3\n\n1 5\n\n3 2\n\n```\n\n#### Output #1\n\n```\n20\n8\n10\n400\n16\n```\n\n### Note\n\nIn the first test case, the stamps can be used as shown on the left. Each stamp is highlighted in its own color for clarity.\n\n![](https://espresso.codeforces.com/e5cb3a60d3f4edae5433009de214eeef86376690.png)\n\nAfter all these stamps are used, there is one black region (as shown on the right), and its perimeter is $20$. It can be shown that there is no way of using the stamps that yields a lower total perimeter.\n\nIn the second test case, the second and third stamps can be used entirely inside the first one, so the minimum perimeter is equal to $8$.", "cfid": "2027A"}
{"problem_id": "2027C", "problem_title": "C. Add Zeros", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2027/C", "problem_statement": "You're given an array $a$ initially containing $n$ integers. In one operation, you must do the following:\n\n- Choose a position $i$ such that $1 < i \\le |a|$ and $a_i = |a| + 1 - i$, where $|a|$ is the current size of the array.\n- Append $i - 1$ zeros onto the end of $a$.\n\nAfter performing this operation as many times as you want, what is the maximum possible length of the array $a$?\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$). The description of the test cases follows.\n\nThe first line of each test case contains $n$ ($1 \\le n \\le 3 \\cdot 10^5$) — the length of the array $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^{12}$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $3 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the maximum possible length of $a$ after performing some sequence of operations.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n5\n\n2 4 6 2 5\n\n5\n\n5 4 4 5 1\n\n4\n\n6 8 2 3\n\n1\n\n1\n\n```\n\n#### Output #1\n\n```\n10\n11\n10\n1\n```\n\n### Note\n\nIn the first test case, we can first choose $i = 4$, since $a_4 = 5 + 1 - 4 = 2$. After this, the array becomes $[2, 4, 6, 2, 5, 0, 0, 0]$. We can then choose $i = 3$ since $a_3 = 8 + 1 - 3 = 6$. After this, the array becomes $[2, 4, 6, 2, 5, 0, 0, 0, 0, 0]$, which has a length of $10$. It can be shown that no sequence of operations will make the final array longer.\n\nIn the second test case, we can choose $i=2$, then $i=3$, then $i=4$. The final array will be $[5, 4, 4, 5, 1, 0, 0, 0, 0, 0, 0]$, with a length of $11$.", "cfid": "2027C"}
{"problem_id": "2027D1", "problem_title": "D1. The Endspeaker (Easy Version)", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2027/D1", "problem_statement": "This is the easy version of this problem. The only difference is that you only need to output the minimum total cost of operations in this version. You must solve both versions to be able to hack.\n\nYou're given an array $a$ of length $n$, and an array $b$ of length $m$ ($b_i > b_{i+1}$ for all $1 \\le i < m$). Initially, the value of $k$ is $1$. Your aim is to make the array $a$ empty by performing one of these two operations repeatedly:\n\n- Type $1$ — If the value of $k$ is less than $m$ and the array $a$ is not empty, you can increase the value of $k$ by $1$. This does not incur any cost.\n- Type $2$ — You remove a non-empty prefix of array $a$, such that its sum does not exceed $b_k$. This incurs a cost of $m - k$.\n\nYou need to minimize the total cost of the operations to make array $a$ empty. If it's impossible to do this through any sequence of operations, output $-1$. Otherwise, output the minimum total cost of the operations.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\le n, m \\le 3 \\cdot 10^5$, $\\boldsymbol{1 \\le n \\cdot m \\le 3 \\cdot 10^5}$).\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$).\n\nThe third line of each test case contains $m$ integers $b_1, b_2, \\ldots, b_m$ ($1 \\le b_i \\le 10^9$).\n\nIt is also guaranteed that $b_i > b_{i+1}$ for all $1 \\le i < m$.\n\nIt is guaranteed that the sum of $\\boldsymbol{n \\cdot m}$ over all test cases does not exceed $3 \\cdot 10^5$.\n\n### Output\n\nFor each test case, if it's possible to make $a$ empty, then output the minimum total cost of the operations.\n\nIf there is no possible sequence of operations which makes $a$ empty, then output a single integer $-1$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n4 2\n\n9 3 4 3\n\n11 7\n\n1 2\n\n20\n\n19 18\n\n10 2\n\n2 5 2 1 10 3 2 9 9 6\n\n17 9\n\n10 11\n\n2 2 2 2 2 2 2 2 2 2\n\n20 18 16 14 12 10 8 6 4 2 1\n\n1 6\n\n10\n\n32 16 8 4 2 1\n\n```\n\n#### Output #1\n\n```\n1\n-1\n2\n10\n4\n```\n\n### Note\n\nIn the first test case, one optimal sequence of operations which yields a total cost of $1$ is as follows:\n\n- Perform an operation of type $2$. Choose the prefix to be $[9]$. This incurs a cost of $1$.\n- Perform an operation of type $1$. The value of $k$ is now $2$. This incurs no cost.\n- Perform an operation of type $2$. Choose the prefix to be $[3, 4]$. This incurs a cost of $0$.\n- Perform an operation of type $2$. Choose the prefix to be $[3]$. This incurs a cost of $0$.\n- The array $a$ is now empty, and the total cost of all operations is $1$.\n\nIn the second test case, it's impossible to remove any prefix of the array since $a_1 > b_1$, so array $a$ cannot be made empty by any sequence of operations.", "cfid": "2027D1"}
{"problem_id": "2033C", "problem_title": "C. Sakurako's Field Trip", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2033/C", "problem_statement": "Even in university, students need to relax. That is why Sakurakos teacher decided to go on a field trip. It is known that all of the students will be walking in one line. The student with index $i$ has some topic of interest which is described as $a_i$. As a teacher, you want to minimise the disturbance of the line of students.\n\nThe disturbance of the line is defined as the number of neighbouring people with the same topic of interest. In other words, disturbance is the number of indices $j$ ($1 \\le j < n$) such that $a_j = a_{j + 1}$.\n\nIn order to do this, you can choose index $i$ ($1\\le i\\le n$) and swap students at positions $i$ and $n-i+1$. You can perform any number of swaps.\n\nYour task is to determine the minimal amount of disturbance that you can achieve by doing the operation described above any number of times.\n\n### Input\n\nThe first line contains one integer $t$ ($1\\le t\\le 10^4$) — the number of test cases.\n\nEach test case is described by two lines.\n\n- The first line contains one integer $n$ ($2 \\le n \\le 10^5$) — the length of the line of students.\n- The second line contains $n$ integers $a_i$ ($1\\le a_i\\le n$) — the topics of interest of students in line.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, output the minimal possible disturbance of the line that you can achieve.\n\n### Example\n\n#### Input #1\n\n```\n\n9\n\n5\n\n1 1 1 2 3\n\n6\n\n2 1 2 2 1 1\n\n4\n\n1 2 1 1\n\n6\n\n2 1 1 2 2 4\n\n4\n\n2 1 2 3\n\n6\n\n1 2 2 1 2 1\n\n5\n\n4 5 5 1 5\n\n7\n\n1 4 3 5 1 1 3\n\n7\n\n3 1 3 2 2 3 3\n\n```\n\n#### Output #1\n\n```\n1\n2\n1\n0\n0\n1\n1\n0\n2\n```\n\n### Note\n\nIn the first example, it is necessary to apply the operation to $i=2$, thus the array will become $[1, \\textbf{2}, 1, \\textbf{1}, 3]$, with the bold elements indicating those that have swapped places. The disturbance of this array is equal to $1$.\n\nIn the fourth example, it is sufficient to apply the operation to $i=3$, thus the array will become $[2, 1, \\textbf{2}, \\textbf{1}, 2, 4]$. The disturbance of this array is equal to $0$.\n\nIn the eighth example, it is sufficient to apply the operation to $i=3$, thus the array will become $[1, 4, \\textbf{1}, 5, \\textbf{3}, 1, 3]$. The disturbance of this array is equal to $0$.", "cfid": "2033C"}
{"problem_id": "2033E", "problem_title": "E. Sakurako, Kosuke, and the Permutation", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2033/E", "problem_statement": "Sakurako's exams are over, and she did excellently. As a reward, she received a permutation $p$. Kosuke was not entirely satisfied because he failed one exam and did not receive a gift. He decided to sneak into her room (thanks to the code for her lock) and spoil the permutation so that it becomes simple.\n\nA permutation $p$ is considered simple if for every $i$ $(1\\le i \\le n)$ one of the following conditions holds:\n\n- $p_i=i$\n- $p_{p_i}=i$\n\nFor example, the permutations $[1, 2, 3, 4]$, $[5, 2, 4, 3, 1]$, and $[2, 1]$ are simple, while $[2, 3, 1]$ and $[5, 2, 1, 4, 3]$ are not.\n\nIn one operation, Kosuke can choose indices $i,j$ $(1\\le i,j\\le n)$ and swap the elements $p_i$ and $p_j$.\n\nSakurako is about to return home. Your task is to calculate the minimum number of operations that Kosuke needs to perform to make the permutation simple.\n\n### Input\n\nThe first line contains one integer $t$ ($1\\le t\\le 10^4$) — the number of test cases.\n\nEach test case is described by two lines.\n\n- The first line contains one integer $n$ ($1\\le n \\le 10^6$) — the length of the permutation $p$.\n- The second line contains $n$ integers $p_i$ ($1\\le p_i\\le n$) — the elements of the permutation $p$.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $10^6$.\n\nIt is guaranteed that $p$ is a permutation.\n\n### Output\n\nFor each test case, output the minimum number of operations that Kosuke needs to perform to make the permutation simple.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n5\n\n1 2 3 4 5\n\n5\n\n5 4 3 2 1\n\n5\n\n2 3 4 5 1\n\n4\n\n2 3 4 1\n\n3\n\n1 3 2\n\n7\n\n2 3 1 5 6 7 4\n\n```\n\n#### Output #1\n\n```\n0\n0\n2\n1\n0\n2\n```\n\n### Note\n\nIn the first and second examples, the permutations are already simple.\n\nIn the fourth example, it is sufficient to swap $p_2$ and $p_4$. Thus, the permutation will become $[2, 1, 4, 3]$ in $1$ operation.", "cfid": "2033E"}
{"problem_id": "2033F", "problem_title": "F. Kosuke's Sloth", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2033/F", "problem_statement": "Kosuke is too lazy. He will not give you any legend, just the task:\n\nFibonacci numbers are defined as follows:\n\n- $f(1)=f(2)=1$.\n- $f(n)=f(n-1)+f(n-2)$ $(3\\le n)$\n\nWe denote $G(n,k)$ as an index of the $n$-th Fibonacci number that is divisible by $k$. For given $n$ and $k$, compute $G(n,k)$.\n\nAs this number can be too big, output it by modulo $10^9+7$.\n\nFor example: $G(3,2)=9$ because the $3$-rd Fibonacci number that is divisible by $2$ is $34$. $[1,1,\\textbf{2},3,5,\\textbf{8},13,21,\\textbf{34}]$.\n\n### Input\n\nThe first line of the input data contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first and only line contains two integers $n$ and $k$ ($1 \\le n \\le 10^{18}$, $1 \\le k \\le 10^5$).\n\nIt is guaranteed that the sum of $k$ across all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case, output the only number: the value $G(n,k)$ taken by modulo $10^9+7$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3 2\n\n100 1\n\n1000000000000 1377\n\n```\n\n#### Output #1\n\n```\n9\n100\n999244007\n```", "cfid": "2033F"}
{"problem_id": "2033A", "problem_title": "A. Sakurako and Kosuke", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2033/A", "problem_statement": "Sakurako and Kosuke decided to play some games with a dot on a coordinate line. The dot is currently located in position $x=0$. They will be taking turns, and Sakurako will be the one to start.\n\nOn the $i$-th move, the current player will move the dot in some direction by $2\\cdot i-1$ units. Sakurako will always be moving the dot in the negative direction, whereas Kosuke will always move it in the positive direction.\n\nIn other words, the following will happen:\n\n1. Sakurako will change the position of the dot by $-1$, $x = -1$ now\n2. Kosuke will change the position of the dot by $3$, $x = 2$ now\n3. Sakurako will change the position of the dot by $-5$, $x = -3$ now\n4. $\\cdots$\n\nThey will keep on playing while the absolute value of the coordinate of the dot does not exceed $n$. More formally, the game continues while $-n\\le x\\le n$. It can be proven that the game will always end.\n\nYour task is to determine who will be the one who makes the last turn.\n\n### Input\n\nThe first line contains one integer $t$ ($1\\le t\\le 100$) — the number of games that Sakurako and Kosuke played.\n\nEach game is described by one number $n$ ($1 \\le n\\le 100$) — the number that defines the condition when the game ends.\n\n### Output\n\nFor each of the $t$ games, output a line with the result of that game. If Sakurako makes the last turn, output \"Sakurako\" (without quotes); else output \"Kosuke\".\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n1\n\n6\n\n3\n\n98\n\n```\n\n#### Output #1\n\n```\nKosuke\nSakurako\nKosuke\nSakurako\n```", "cfid": "2033A"}
{"problem_id": "2033B", "problem_title": "B. Sakurako and Water", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2033/B", "problem_statement": "During her journey with Kosuke, Sakurako and Kosuke found a valley that can be represented as a matrix of size $n \\times n$, where at the intersection of the $i$-th row and the $j$-th column is a mountain with a height of $a_{i,j}$. If $a_{i,j} < 0$, then there is a lake there.\n\nKosuke is very afraid of water, so Sakurako needs to help him:\n\n- With her magic, she can select a square area of mountains and increase the height of each mountain on the main diagonal of that area by exactly one.\n\nMore formally, she can choose a submatrix with the upper left corner located at $(i, j)$ and the lower right corner at $(p, q)$, such that $p-i=q-j$. She can then add one to each element at the intersection of the $(i + k)$-th row and the $(j + k)$-th column, for all $k$ such that $0 \\le k \\le p-i$.\n\nDetermine the minimum number of times Sakurako must use her magic so that there are no lakes.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 200$) — the number of test cases.\n\nEach test case is described as follows:\n\n- The first line of each test case consists of a single number $n$ ($1 \\le n \\le 500$).\n- Each of the following $n$ lines consists of $n$ integers separated by spaces, which correspond to the heights of the mountains in the valley $a$ ($-10^5 \\le a_{i,j} \\le 10^5$).\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $1000$.\n\n### Output\n\nFor each test case, output the minimum number of times Sakurako will have to use her magic so that all lakes disappear.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n1\n\n1\n\n2\n\n-1 2\n\n3 0\n\n3\n\n1 2 3\n\n-2 1 -1\n\n0 0 -1\n\n5\n\n1 1 -1 -1 3\n\n-3 1 4 4 -4\n\n-1 -1 3 0 -5\n\n4 5 3 -3 -1\n\n3 1 -3 -1 5\n\n```\n\n#### Output #1\n\n```\n0\n1\n4\n19\n```", "cfid": "2033B"}
{"problem_id": "2033D", "problem_title": "D. Kousuke's Assignment", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2033/D", "problem_statement": "After a trip with Sakurako, Kousuke was very scared because he forgot about his programming assignment. In this assignment, the teacher gave him an array $a$ of $n$ integers and asked him to calculate the number of non-overlapping segments of the array $a$, such that each segment is considered beautiful.\n\nA segment $[l,r]$ is considered beautiful if $a_l + a_{l+1} + \\dots + a_{r-1} + a_r=0$.\n\nFor a fixed array $a$, your task is to compute the maximum number of non-overlapping beautiful segments.\n\n### Input\n\nThe first line of input contains the number $t$ ($1 \\le t \\le 10^4$) — the number of test cases. Each test case consists of $2$ lines.\n\n- The first line contains one integer $n$ ($1 \\le n \\le 10^5$) — the length of the array.\n- The second line contains $n$ integers $a_i$ ($-10^5 \\le a_i \\le 10^5$) — the elements of the array $a$.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $3\\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer: the maximum number of non-overlapping beautiful segments.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n5\n\n2 1 -3 2 1\n\n7\n\n12 -4 4 43 -3 -5 8\n\n6\n\n0 -4 0 3 0 1\n\n```\n\n#### Output #1\n\n```\n1\n2\n3\n```", "cfid": "2033D"}
{"problem_id": "2024A", "problem_title": "A. Profitable Interest Rate", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2024/A", "problem_statement": "Alice has $a$ coins. She can open a bank deposit called \"Profitable\", but the minimum amount required to open this deposit is $b$ coins.\n\nThere is also a deposit called \"Unprofitable\", which can be opened with any amount of coins. Alice noticed that if she opens the \"Unprofitable\" deposit with $x$ coins, the minimum amount required to open the \"Profitable\" deposit decreases by $2x$ coins. However, these coins cannot later be deposited into the \"Profitable\" deposit.\n\nHelp Alice determine the maximum number of coins she can deposit into the \"Profitable\" deposit if she first deposits some amount of coins (possibly $0$) into the \"Unprofitable\" deposit. If Alice can never open the \"Profitable\" deposit, output $0$.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. The description of the test cases follows.\n\nA single line of each test case contains two integers $a$ and $b$ ($1 \\le a, b \\le 10^9$) — the number of coins Alice has and the initial minimum amount required to open the \"Profitable\" deposit.\n\n### Output\n\nFor each test case, output a single integer — the maximum number of coins that Alice can deposit into the \"Profitable\" deposit. If Alice can never open the \"Profitable\" deposit, output $0$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n10 5\n\n7 9\n\n5 100\n\n1 1\n\n1 2\n\n```\n\n#### Output #1\n\n```\n10\n5\n0\n1\n0\n```\n\n### Note\n\nIn the first test case, $a \\ge b$, so Alice can immediately open the \"Profitable\" deposit with all $10$ coins.\n\nIn the second test case, Alice can open the \"Unprofitable\" deposit with $2$ coins. Then she will have $5$ coins left, but the minimum amount required to open the \"Profitable\" deposit will decrease by $4$ coins, making it equal to $5$ coins. Thus, Alice will be able to open the \"Profitable\" deposit with $5$ coins.\n\nIn the third test case, Alice will not be able to open the \"Profitable\" deposit.", "cfid": "2024A"}
{"problem_id": "2023A", "problem_title": "A. Concatenation of Arrays", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2023/A", "problem_statement": "You are given $n$ arrays $a_1$, $\\ldots$, $a_n$. The length of each array is two. Thus, $a_i = [a_{i, 1}, a_{i, 2}]$. You need to concatenate the arrays into a single array of length $2n$ such that the number of inversions$^{\\dagger}$ in the resulting array is minimized. Note that you do not need to count the actual number of inversions.\n\nMore formally, you need to choose a permutation$^{\\ddagger}$ $p$ of length $n$, so that the array $b = [a_{p_1,1}, a_{p_1,2}, a_{p_2, 1}, a_{p_2, 2}, \\ldots, a_{p_n,1}, a_{p_n,2}]$ contains as few inversions as possible.\n\n$^{\\dagger}$The number of inversions in an array $c$ is the number of pairs of indices $i$ and $j$ such that $i < j$ and $c_i > c_j$.\n\n$^{\\ddagger}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 10^5$) — the number of arrays.\n\nEach of the following $n$ lines contains two integers $a_{i,1}$ and $a_{i,2}$ ($1 \\le a_{i,j} \\le 10^9$) — the elements of the $i$-th array.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, output $2n$ integers — the elements of the array you obtained. If there are multiple solutions, output any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2\n\n1 4\n\n2 3\n\n3\n\n3 2\n\n4 3\n\n2 1\n\n5\n\n5 10\n\n2 3\n\n9 6\n\n4 1\n\n8 7\n\n1\n\n10 20\n\n```\n\n#### Output #1\n\n```\n2 3 1 4\n2 1 3 2 4 3\n4 1 2 3 5 10 8 7 9 6\n10 20\n```\n\n### Note\n\nIn the first test case, we concatenated the arrays in the order $2, 1$. Let's consider the inversions in the resulting array $b = [2, 3, 1, 4]$:\n\n- $i = 1$, $j = 3$, since $b_1 = 2 > 1 = b_3$;\n- $i = 2$, $j = 3$, since $b_2 = 3 > 1 = b_3$.\n\nThus, the number of inversions is $2$. It can be proven that this is the minimum possible number of inversions.\n\nIn the second test case, we concatenated the arrays in the order $3, 1, 2$. Let's consider the inversions in the resulting array $b = [2, 1, 3, 2, 4, 3]$:\n\n- $i = 1$, $j = 2$, since $b_1 = 2 > 1 = b_2$;\n- $i = 3$, $j = 4$, since $b_3 = 3 > 2 = b_4$;\n- $i = 5$, $j = 6$, since $b_5 = 4 > 3 = b_6$.\n\nThus, the number of inversions is $3$. It can be proven that this is the minimum possible number of inversions.\n\nIn the third test case, we concatenated the arrays in the order $4, 2, 1, 5, 3$.", "cfid": "2023A"}
{"problem_id": "2024B", "problem_title": "B. Buying Lemonade", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2024/B", "problem_statement": "There is a vending machine that sells lemonade. The machine has a total of $n$ slots. You know that initially, the $i$-th slot contains $a_i$ cans of lemonade. There are also $n$ buttons on the machine, each button corresponds to a slot, with exactly one button corresponding to each slot. Unfortunately, the labels on the buttons have worn off, so you do not know which button corresponds to which slot.\n\nWhen you press the button corresponding to the $i$-th slot, one of two events occurs:\n\n- If there is a can of lemonade in the $i$-th slot, it will drop out and you will take it. At this point, the number of cans in the $i$-th slot decreases by $1$.\n- If there are no cans of lemonade left in the $i$-th slot, nothing will drop out.\n\nAfter pressing, the can drops out so quickly that it is impossible to track from which slot it fell. The contents of the slots are hidden from your view, so you cannot see how many cans are left in each slot. The only thing you know is the initial number of cans in the slots: $a_1, a_2, \\ldots, a_n$.\n\nDetermine the minimum number of button presses needed to guarantee that you receive at least $k$ cans of lemonade.\n\nNote that you can adapt your strategy during the button presses based on whether you received a can or not. It is guaranteed that there are at least $k$ cans of lemonade in total in the machine. In other words, $k \\leq a_1 + a_2 + \\ldots + a_n$.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\le n \\le 2 \\cdot 10^5$, $1 \\leq k \\leq 10^9$) — the number of slots in the machine and the required number of cans of lemonade.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$) — the number of cans in the slots.\n\nIt is guaranteed that $k \\leq a_1 + a_2 + \\ldots + a_n$, meaning there are at least $k$ cans of lemonade in the machine.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the minimum number of button presses needed to guarantee that you receive at least $k$ cans of lemonade.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n2 1\n\n1 1\n\n2 2\n\n1 2\n\n3 4\n\n2 1 3\n\n10 50\n\n1 1 3 8 8 9 12 13 27 27\n\n2 1000000000\n\n1000000000 500000000\n\n```\n\n#### Output #1\n\n```\n1\n2\n5\n53\n1000000000\n```\n\n### Note\n\nIn the first test case, we can simply press the first button and receive one can of lemonade.\n\nIn the second test case, we can press each button once and guarantee that we receive $2$ cans of lemonade. Note that if we simply press one button twice, we might not be lucky, and that button could correspond to the first slot, in which case we would only receive $1$ can of lemonade for two presses.\n\nIn the third test case, one of the optimal strategies is as follows:\n\nPress the first button twice. After the first press, a can of lemonade will definitely drop out. Then there are two options:\n\n- If no can of lemonade drops after the second press, we know that this button must correspond to the second slot, since $a_2 = 1$ and $a_1, a_3 > 1$. Then we can press the second button twice and the third button once. Since $a_1, a_3 \\geq 2$, we will definitely receive three cans of lemonade for these three presses. Thus, after $5$ presses, we will have $4$ cans of lemonade.\n- If a can of lemonade drops after the second press, we can make one press on the second button and one press on the third button. After each of these presses, we will definitely receive a can of lemonade. Thus, after $4$ presses, we will have $4$ cans of lemonade.\n\nIt can be shown that it is impossible to guarantee receiving $4$ cans of lemonade with only $4$ presses, so the answer is $5$.", "cfid": "2024B"}
{"problem_id": "2023B", "problem_title": "B. Skipping", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2023/B", "problem_statement": "It is already the year $3024$, ideas for problems have long run out, and the olympiad now takes place in a modified individual format. The olympiad consists of $n$ problems, numbered from $1$ to $n$. The $i$-th problem has its own score $a_i$ and a certain parameter $b_i$ ($1 \\le b_i \\le n$).\n\nInitially, the testing system gives the participant the first problem. When the participant is given the $i$-th problem, they have two options:\n\n- They can submit the problem and receive $a_i$ points;\n- They can skip the problem, in which case they will never be able to submit it.\n\nThen, the testing system selects the next problem for the participant from problems with indices $j$, such that:\n\n- If he submitted the $i$-th problem, it looks at problems with indices $j < i$;\n- If he skipped the $i$-th problem, it looks at problems with indices $j \\leq b_i$.\n\nAmong these problems, it selects the problem with the maximum index that it has not previously given to the participant (he has neither submitted nor skipped it before). If there is no such problem, then the competition for the participant ends, and their result is equal to the sum of points for all submitted problems. In particular, if the participant submits the first problem, then the competition for them ends. Note that the participant receives each problem at most once.\n\nProkhor has prepared thoroughly for the olympiad, and now he can submit any problem. Help him determine the maximum number of points he can achieve.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\leq t \\leq 10^5$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\leq n \\leq 4 \\cdot 10^5$) — the number of problems in the olympiad.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$) — the scores of the problems.\n\nThe third line of each test case contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($1 \\leq b_i \\leq n$) — the parameters of the problems.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $4 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the maximum number of points that Prokhor can achieve.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2\n\n15 16\n\n2 1\n\n5\n\n10 10 100 100 1000\n\n3 4 1 1 1\n\n3\n\n100 49 50\n\n3 2 2\n\n4\n\n100 200 300 1000\n\n2 3 4 1\n\n```\n\n#### Output #1\n\n```\n16\n200\n100\n1000\n```\n\n### Note\n\nIn the first test case, Prokhor can skip the first problem; then he will receive the problem with index $b_1 = 2$. Prokhor can submit it and receive $a_2 = 16$ points. After that, the competition will end because Prokhor has already received all problems. Note that if Prokhor submits the first problem, he will receive $a_1 = 15$ points, but the competition will end immediately.\n\nIn the second test case, Prokhor can skip the first problem; then he will receive the problem with index $b_1 = 3$. Prokhor can submit it and receive $a_3 = 100$ points. After that, Prokhor will receive the second problem, which he can skip to receive the problem with index $b_2 = 4$. Prokhor can submit the fourth problem and receive another $a_4 = 100$ points. After that, the competition ends because Prokhor has already received all problems with indices not exceeding $4$. Thus, Prokhor will receive a total of $200$ points.\n\nIn the third test case, Prokhor can submit the first problem and receive $100$ points, after which the competition will end immediately.", "cfid": "2023B"}
{"problem_id": "2030D", "problem_title": "D. QED's Favorite Permutation", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2030/D", "problem_statement": "QED is given a permutation$^{\\text{∗}}$ $p$ of length $n$. He also has a string $s$ of length $n$ containing only characters $\\texttt{L}$ and $\\texttt{R}$. QED only likes permutations that are sorted in non-decreasing order. To sort $p$, he can select any of the following operations and perform them any number of times:\n\n- Choose an index $i$ such that $s_i = \\texttt{L}$. Then, swap $p_i$ and $p_{i-1}$. It is guaranteed that $s_1 \\neq \\texttt{L}$.\n- Choose an index $i$ such that $s_i = \\texttt{R}$. Then, swap $p_i$ and $p_{i+1}$. It is guaranteed that $s_n \\neq \\texttt{R}$.\n\nHe is also given $q$ queries. In each query, he selects an index $i$ and changes $s_i$ from $\\texttt{L}$ to $\\texttt{R}$ (or from $\\texttt{R}$ to $\\texttt{L}$). Note that the changes are persistent.\n\nAfter each query, he asks you if it is possible to sort $p$ in non-decreasing order by performing the aforementioned operations any number of times. Note that before answering each query, the permutation $p$ is reset to its original form.\n\n$^{\\text{∗}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n### Input\n\nThe first line contains $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $q$ ($3 \\leq n \\leq 2 \\cdot 10^5$, $1 \\leq q \\leq 2 \\cdot 10^5$) – the length of the permutation and the number of queries.\n\nThe following line contains $n$ integers $p_1, p_2, \\ldots, p_n$ ($1 \\leq p_i \\leq n$, $p$ is a permutation).\n\nThe following line contains $n$ characters $s_1s_2 \\ldots s_n$. It is guaranteed that $s_i$ is either $\\texttt{L}$ or $\\texttt{R}$, $s_1 = \\texttt{R}$, and $s_n = \\texttt{L}$.\n\nThe following $q$ lines contain an integer $i$ ($2 \\leq i \\leq n-1$), denoting that $s_i$ is changed from $\\texttt{L}$ to $\\texttt{R}$ (or from $\\texttt{R}$ to $\\texttt{L}$).\n\nIt is guaranteed that the sum of $n$ and $q$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each query, output \"YES\" (without quotes) if it is possible, and \"NO\" (without quotes) otherwise.\n\nYou can output \"YES\" and \"NO\" in any case (for example, strings \"yES\", \"yes\" and \"Yes\" will be recognized as a positive response).\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n5 3\n\n1 4 2 5 3\n\nRLRLL\n\n2\n\n4\n\n3\n\n8 5\n\n1 5 2 4 8 3 6 7\n\nRRLLRRRL\n\n4\n\n3\n\n5\n\n3\n\n4\n\n6 2\n\n1 2 3 4 5 6\n\nRLRLRL\n\n4\n\n5\n\n```\n\n#### Output #1\n\n```\nYES\nYES\nNO\nNO\nYES\nNO\nNO\nNO\nYES\nYES\n```\n\n### Note\n\nIn the first testcase, $s = \\texttt{RRRLL}$ after the first query. QED may sort $p$ using the following operations:\n\n- Initially, $p = [1,4,2,5,3]$.\n- Select $i = 2$ and swap $p_2$ with $p_{3}$. Now, $p = [1,2,4,5,3]$.\n- Select $i = 5$ and swap $p_5$ with $p_{4}$. Now, $p = [1,2,4,3,5]$.\n- Select $i = 4$ and swap $p_4$ with $p_{3}$. Now, $p = [1,2,3,4,5]$, which is in non-decreasing order.\n\nIt can be shown that it is impossible to sort the array after all three updates of the first testcase.", "cfid": "2030D"}
{"problem_id": "2030C", "problem_title": "C. A TRUE Battle", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2030/C", "problem_statement": "Alice and Bob are playing a game. There is a list of $n$ booleans, each of which is either true or false, given as a binary string $^{\\text{∗}}$ of length $n$ (where $\\texttt{1}$ represents true, and $\\texttt{0}$ represents false). Initially, there are no operators between the booleans.\n\nAlice and Bob will take alternate turns placing and or or between the booleans, with Alice going first. Thus, the game will consist of $n-1$ turns since there are $n$ booleans. Alice aims for the final statement to evaluate to true, while Bob aims for it to evaluate to false. Given the list of boolean values, determine whether Alice will win if both players play optimally.\n\nTo evaluate the final expression, repeatedly perform the following steps until the statement consists of a single true or false:\n\n- If the statement contains an and operator, choose any one and replace the subexpression surrounding it with its evaluation.\n- Otherwise, the statement contains an or operator. Choose any one and replace the subexpression surrounding the or with its evaluation.\n\nFor example, the expression true or false and false is evaluated as true or (false and false) $=$ true or false $=$ true. It can be shown that the result of any compound statement is unique.\n\n$^{\\text{∗}}$A binary string is a string that only consists of characters $\\texttt{0}$ and $\\texttt{1}$\n\n### Input\n\nThe first line contains $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe first line of each test case contains an integer $n$ ($2 \\leq n \\leq 2 \\cdot 10^5$) — the length of the string.\n\nThe second line contains a binary string of length $n$, consisting of characters $\\texttt{0}$ and $\\texttt{1}$ — the list of boolean values.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each testcase, output \"YES\" (without quotes) if Alice wins, and \"NO\" (without quotes) otherwise.\n\nYou can output \"YES\" and \"NO\" in any case (for example, strings \"yES\", \"yes\" and \"Yes\" will be recognized as a positive response).\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n2\n\n11\n\n3\n\n010\n\n12\n\n101111111100\n\n10\n\n0111111011\n\n8\n\n01000010\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nYES\nYES\nNO\n```\n\n### Note\n\nIn the first testcase, Alice can place and between the two booleans. The game ends as there are no other places to place operators, and Alice wins because true and true is true.\n\nIn the second testcase, Alice can place or between the middle true and the left false. Bob can place and between the middle true and the right false. The statement false or true and false is false.\n\nNote that these examples may not be the best strategies for either Alice or Bob.", "cfid": "2030C"}
{"problem_id": "2030A", "problem_title": "A. A Gift From Orangutan", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2030/A", "problem_statement": "While exploring the jungle, you have bumped into a rare orangutan with a bow tie! You shake hands with the orangutan and offer him some food and water. In return...\n\nThe orangutan has gifted you an array $a$ of length $n$. Using $a$, you will construct two arrays $b$ and $c$, both containing $n$ elements, in the following manner:\n\n- $b_i = \\min(a_1, a_2, \\ldots, a_i)$ for each $1 \\leq i \\leq n$.\n- $c_i = \\max(a_1, a_2, \\ldots, a_i)$ for each $1 \\leq i \\leq n$.\n\nDefine the score of $a$ as $\\sum_{i=1}^n c_i - b_i$ (i.e. the sum of $c_i - b_i$ over all $1 \\leq i \\leq n$). Before you calculate the score, you can shuffle the elements of $a$ however you want.\n\nFind the maximum score that you can get if you shuffle the elements of $a$ optimally.\n\n### Input\n\nThe first line contains $t$ ($1 \\leq t \\leq 100$) — the number of test cases.\n\nThe first line of each test case contains an integer $n$ ($1 \\leq n \\leq 1000$) — the number of elements in $a$.\n\nThe following line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 1000$) — the elements of the array $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $1000$.\n\n### Output\n\nFor each test case, output the maximum score that you can get.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n1\n\n69\n\n3\n\n7 6 5\n\n5\n\n1 1 1 2 2\n\n```\n\n#### Output #1\n\n```\n0\n4\n4\n```\n\n### Note\n\nIn the first test case, there is no other way to rearrange $a$. So, $b = [69]$ and $c = [69]$. The only possible score is $69 - 69 = 0$.\n\nIn the second test case, you can rearrange $a$ as $[7, 5, 6]$. Here, $b = [7, 5, 5]$ and $c = [7, 7, 7]$. The score in this case is $(7 - 7) + (7 - 5) + (7 - 5) = 4$. It can be shown this is the maximum possible score.", "cfid": "2030A"}
{"problem_id": "2030B", "problem_title": "B. Minimise Oneness", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2030/B", "problem_statement": "For an arbitrary binary string $t$$^{\\\\text{∗}}$, let $f(t)$ be the number of non-empty subsequences$^{\\\\text{†}}$ of $t$ that contain only $\\\\mathtt{0}$, and let $g(t)$ be the number of non-empty subsequences of $t$ that contain at least one $\\\\mathtt{1}$.\n\nNote that for $f(t)$ and for $g(t)$, each subsequence is counted as many times as it appears in $t$. E.g., $f(\\mathtt{000}) = 7, g(\\mathtt{100}) = 4$.\n\nWe define the oneness of the binary string $t$ to be $|f(t)-g(t)|$, where for an arbitrary integer $z$, $|z|$ represents the absolute value of $z$.\n\nYou are given a positive integer $n$. Find a binary string $s$ of length $n$ such that its oneness is as small as possible. If there are multiple strings, you can print any of them.\n\n$^{\\text{∗}}$A binary string is a string that only consists of characters $\\texttt{0}$ and $\\texttt{1}$.\n\n$^{\\text{†}}$A sequence $a$ is a subsequence of a sequence $b$ if $a$ can be obtained from $b$ by the deletion of several (possibly, zero or all) elements. For example, subsequences of $\\mathtt{1011101}$ are $\\mathtt{0}$, $\\mathtt{1}$, $\\mathtt{11111}$, $\\mathtt{0111}$, but not $\\mathtt{000}$ nor $\\mathtt{11100}$.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe only line of each test case contains an integer $n$ ($1 \\leq n \\leq 2\\cdot10^5$) — the length of $s$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2\\cdot10^5$.\n\n### Output\n\nFor each test case, output $s$ on a new line. If multiple answers exist, output any.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n1\n\n2\n\n3\n\n```\n\n#### Output #1\n\n```\n0\n01\n010\n```\n\n### Note\n\nIn the first test case, for the example output, $f(t)=1$ because there is one subsequence that contains only $\\mathtt{0}$ ($\\mathtt{0}$), and $g(t)=0$ because there are no subsequences that contain at least one $1$. The oneness is $|1-0|=1$. The output $\\mathtt{1}$ is correct as well because its oneness is $|0-1|=1$.\n\nFor the example output of the second test case, $f(t)=1$ because there is one non-empty subsequence that contains only $\\mathtt{0}$, and $g(t)=2$ because there are two non-empty subsequences that contain at least one $\\mathtt{1}$ ($\\mathtt{01}$ and $\\mathtt{1}$). The oneness is thus $|1-2|=1$. It can be shown that $1$ is the minimum possible value of its oneness over all possible binary strings of size $2$.", "cfid": "2030B"}
{"problem_id": "2025C", "problem_title": "C. New Game", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2025/C", "problem_statement": "There's a new game Monocarp wants to play. The game uses a deck of $n$ cards, where the $i$-th card has exactly one integer $a_i$ written on it.\n\nAt the beginning of the game, on the first turn, Monocarp can take any card from the deck. During each subsequent turn, Monocarp can take exactly one card that has either the same number as on the card taken on the previous turn or a number that is one greater than the number on the card taken on the previous turn.\n\nIn other words, if on the previous turn Monocarp took a card with the number $x$, then on the current turn he can take either a card with the number $x$ or a card with the number $x + 1$. Monocarp can take any card which meets that condition, regardless of its position in the deck.\n\nAfter Monocarp takes a card on the current turn, it is removed from the deck.\n\nAccording to the rules of the game, the number of distinct numbers written on the cards that Monocarp has taken must not exceed $k$.\n\nIf, after a turn, Monocarp cannot take a card without violating the described rules, the game ends.\n\nYour task is to determine the maximum number of cards that Monocarp can take from the deck during the game, given that on the first turn he can take any card from the deck.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\le k \\le n \\le 200\\,000$) — the number of cards in the deck and the maximum number of distinct numbers that can be written on the cards that Monocarp takes.\n\nThe second line contains a sequence of integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^{9}$), where $a_i$ is the number written on the $i$-th card.\n\nAdditional constraint of the input: the sum of $n$ over all test cases doesn't exceed $200\\,000$.\n\n### Output\n\nFor each test case, print the maximum number of cards that Monocarp can take from the deck during the game, given that on the first turn he can take any card from the deck.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n10 2\n\n5 2 4 3 4 3 4 5 3 2\n\n5 1\n\n10 11 10 11 10\n\n9 3\n\n4 5 4 4 6 5 4 4 6\n\n3 2\n\n1 3 1\n\n```\n\n#### Output #1\n\n```\n6\n3\n9\n2\n```\n\n### Note\n\nIn the first example, Monocarp needs to take any of the cards with the number $3$. On the next two turns, he needs to take the two remaining cards with the number $3$. On the next three turns, he needs to take three cards with the number $4$. After that, Monocarp will not be able to take any more cards from the deck, and he will have $6$ cards.", "cfid": "2025C"}
{"problem_id": "2025A", "problem_title": "A. Two Screens", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2025/A", "problem_statement": "There are two screens which can display sequences of uppercase Latin letters. Initially, both screens display nothing.\n\nIn one second, you can do one of the following two actions:\n\n- choose a screen and an uppercase Latin letter, and append that letter to the end of the sequence displayed on that screen;\n- choose a screen and copy the sequence from it to the other screen, overwriting the sequence that was displayed on the other screen.\n\nYou have to calculate the minimum number of seconds you have to spend so that the first screen displays the sequence $s$, and the second screen displays the sequence $t$.\n\n### Input\n\nThe first line contains one integer $q$ ($1 \\le q \\le 500$) — the number of test cases.\n\nEach test case consists of two lines. The first line contains the string $s$, and the second line contains the string $t$ ($1 \\le |s|, |t| \\le 100$). Both strings consist of uppercase Latin letters.\n\n### Output\n\nFor each test case, print one integer — the minimum possible number of seconds you have to spend so that the first screen displays the sequence $s$, and the second screen displays the sequence $t$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\nGARAGE\n\nGARAGEFORSALE\n\nABCDE\n\nAABCD\n\nTRAINING\n\nDRAINING\n\n```\n\n#### Output #1\n\n```\n14\n10\n16\n```\n\n### Note\n\nIn the first test case, the following sequence of actions is possible:\n\n- spend $6$ seconds to write the sequence GARAGE on the first screen;\n- copy the sequence from the first screen to the second screen;\n- spend $7$ seconds to complete the sequence on the second screen by writing FORSALE.\n\nIn the second test case, the following sequence of actions is possible:\n\n- spend $1$ second to write the sequence A on the second screen;\n- copy the sequence from the second screen to the first screen;\n- spend $4$ seconds to complete the sequence on the first screen by writing BCDE;\n- spend $4$ seconds to complete the sequence on the second screen by writing ABCD.\n\nIn the third test case, the fastest way to display the sequences is to type both of them character by character without copying, and this requires $16$ seconds.", "cfid": "2025A"}
{"problem_id": "2025D", "problem_title": "D. Attribute Checks", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2025/D", "problem_statement": "Imagine a game where you play as a character that has two attributes: \"Strength\" and \"Intelligence\", that are at zero level initially.\n\nDuring the game, you'll acquire $m$ attribute points that allow you to increase your attribute levels — one point will increase one of the attributes by one level. But sometimes, you'll encounter a so-called \"Attribute Checks\": if your corresponding attribute is high enough, you'll pass it; otherwise, you'll fail it.\n\nSpending some time, you finally prepared a list which contains records of all points you got and all checks you've met. And now you're wondering: what is the maximum number of attribute checks you can pass in a single run if you'd spend points wisely?\n\nNote that you can't change the order of records.\n\n### Input\n\nThe first line contains two integers $n$ and $m$ ($1 \\le m \\le 5000$; $m < n \\le 2 \\cdot 10^6$) — the number of records in the list and the total number of points you'll get during the game.\n\nThe second line contains $n$ integers $r_1, r_2, \\dots, r_n$ ($-m \\le r_i \\le m$), where $r_i$ encodes the $i$-th record:\n\n- If $r_i = 0$, then the $i$-th record is an acquiring one attribute point. You can spend to level up either Strength or Intelligence;\n- If $r_i > 0$, then it's an Intelligence check: if your Intelligence level is greater than or equal to $|r_i|$, you pass.\n- If $r_i < 0$, then it's a Strength check: if your Strength level is greater than or equal to $|r_i|$, you pass.\n\nAdditional constraint on the input: the sequence $r_1, r_2, \\dots, r_n$ contains exactly $m$ elements equal to $0$.\n\n### Output\n\nPrint one integer — the maximum number of checks you can pass.\n\n### Examples\n\n#### Input #1\n\n```\n\n10 5\n\n0 1 0 2 0 -3 0 -4 0 -5\n\n```\n\n#### Output #1\n\n```\n3\n```\n\n#### Input #2\n\n```\n\n3 1\n\n1 -1 0\n\n```\n\n#### Output #2\n\n```\n0\n```\n\n#### Input #3\n\n```\n\n9 3\n\n0 0 1 0 2 -3 -2 -2 1\n\n```\n\n#### Output #3\n\n```\n4\n```\n\n### Note\n\nIn the first test, it's optimal to spend each point in Strength, so you'll fail $2$ Intelligence checks but pass $3$ Strength checks.\n\nIn the second test, you'll fail both checks, since the first point you get comes after the checks.\n\nIn the third test, one of the optimal strategies is:\n\n1. spend the first point on Intelligence;\n2. spend the second point on Strength;\n3. spend the third point on Strength;\n\nAs a result, you'll pass $2$ Intelligence checks $r_3$ and $r_9$ and $2$ Strength checks $r_7$ and $r_8$.", "cfid": "2025D"}
{"problem_id": "2025B", "problem_title": "B. Binomial Coefficients, Kind Of", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2025/B", "problem_statement": "Recently, akshiM met a task that needed binomial coefficients to solve. He wrote a code he usually does that looked like this:\n\n```\nfor (int n = 0; n < N; n++) { // loop over n from 0 to N-1 (inclusive)\n\nC\\[n\\]\\[0\\] = 1;\n\nC\\[n\\]\\[n\\] = 1;\n\nfor (int k = 1; k < n; k++) // loop over k from 1 to n-1 (inclusive)\n\nC\\[n\\]\\[k\\] = C\\[n\\]\\[k - 1\\] + C\\[n - 1\\]\\[k - 1\\];\n\n}\n\n```\n\nUnfortunately, he made an error, since the right formula is the following:\n\n```\nC\\[n\\]\\[k\\] = C\\[n - 1\\]\\[k\\] + C\\[n - 1\\]\\[k - 1\\]\n\n```\n\nBut his team member keblidA is interested in values that were produced using the wrong formula. Please help him to calculate these coefficients for $t$ various pairs $(n_i, k_i)$. Note that they should be calculated according to the first (wrong) formula.\n\nSince values $C[n_i][k_i]$ may be too large, print them modulo $10^9 + 7$.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^5$) — the number of pairs. Next, $t$ pairs are written in two lines.\n\nThe second line contains $t$ integers $n_1, n_2, \\dots, n_t$ ($2 \\le n_i \\le 10^5$).\n\nThe third line contains $t$ integers $k_1, k_2, \\dots, k_t$ ($1 \\le k_i < n_i$).\n\n### Output\n\nPrint $t$ integers $C[n_i][k_i]$ modulo $10^9 + 7$.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n2 5 5 100000 100000 100000 100000\n\n1 2 3 1 33333 66666 99999\n\n```\n\n#### Output #1\n\n```\n2\n4\n8\n2\n326186014\n984426998\n303861760\n```", "cfid": "2025B"}
{"problem_id": "2022C", "problem_title": "C. Gerrymandering", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2022/C", "problem_statement": "We all steal a little bit. But I have only one hand, while my adversaries have two.\n\nÁlvaro Obregón\n\nÁlvaro and José are the only candidates running for the presidency of Tepito, a rectangular grid of $2$ rows and $n$ columns, where each cell represents a house. It is guaranteed that $n$ is a multiple of $3$.\n\nUnder the voting system of Tepito, the grid will be split into districts, which consist of any $3$ houses that are connected$^{\\text{∗}}$. Each house will belong to exactly one district.\n\nEach district will cast a single vote. The district will vote for Álvaro or José respectively if at least $2$ houses in that district select them. Therefore, a total of $\\frac{2n}{3}$ votes will be cast.\n\nAs Álvaro is the current president, he knows exactly which candidate each house will select. If Álvaro divides the houses into districts optimally, determine the maximum number of votes he can get.\n\n$^{\\text{∗}}$A set of cells is connected if there is a path between any $2$ cells that requires moving only up, down, left and right through cells in the set.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains one integer $n$ ($3 \\le n \\le 10^5$; $n$ is a multiple of $3$) — the number of columns of Tepito.\n\nThe following two lines each contain a string of length $n$. The $i$-th line contains the string $s_i$, consisting of the characters $\\texttt{A}$ and $\\texttt{J}$. If $s_{i,j}=\\texttt{A}$, the house in the $i$-th row and $j$-th column will select Álvaro. Otherwise if $s_{i,j}=\\texttt{J}$, the house will select José.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, output a single integer — the maximum number of districts Álvaro can win by optimally dividing the houses into districts.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3\n\nAAA\n\nAJJ\n\n6\n\nJAJAJJ\n\nJJAJAJ\n\n6\n\nAJJJAJ\n\nAJJAAA\n\n9\n\nAJJJJAJAJ\n\nJAAJJJJJA\n\n```\n\n#### Output #1\n\n```\n2\n2\n3\n2\n```\n\n### Note\n\nThe image below showcases the optimal arrangement of districts Álvaro can use for each test case in the example.\n\n![](https://espresso.codeforces.com/201cafe7ad173f25765de51cfc513d2eb124be57.png)", "cfid": "2022C"}
{"problem_id": "2022A", "problem_title": "A. Bus to Pénjamo", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2022/A", "problem_statement": "Ya vamos llegando a Péeeenjamoo ♫♫♫\n\nThere are $n$ families travelling to Pénjamo to witness Mexico's largest-ever \"walking a chicken on a leash\" marathon. The $i$-th family has $a_i$ family members. All families will travel using a single bus consisting of $r$ rows with $2$ seats each.\n\nA person is considered happy if:\n\n- Another family member is seated in the same row as them, or\n- They are sitting alone in their row (with an empty seat next to them).\n\nDetermine the maximum number of happy people in an optimal seating arrangement. Note that everyone must be seated in the bus.\n\nIt is guaranteed that all family members will fit on the bus. Formally, it is guaranteed that $\\displaystyle\\sum_{i=1}^{n}a_i \\le 2r$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $r$ ($1 \\le n \\le 100$; $1 \\le r \\le 500$) — the number of families and the number of rows in the bus.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10$) — the number of family members in each family.\n\n### Output\n\nFor each test case, output the maximum number of happy people in an optimal seating arrangement.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3 3\n\n2 3 1\n\n3 3\n\n2 2 2\n\n4 5\n\n1 1 2 2\n\n4 5\n\n3 1 1 3\n\n```\n\n#### Output #1\n\n```\n4\n6\n6\n6\n```\n\n### Note\n\nIn the first test case, the two members of the first family can sit together in the first row, while the two members of the second family can sit together in the second row. The remaining member of the second family can sit in the third row along with a member of the third family. This seating arrangement is shown below, where the $4$ happy people are colored green.\n\n$\\color{green}{1}\n\n$$\\color{green}{1}$$\n\ncolor{green}{2}\n\n$$\\color{green}{2}$$\n\n2$$3$\n\nIn the second test case, a possible seating arrangement with $6$ happy people is shown below.\n\n$\\color{green}{3}\n\n$$\\color{green}{3}$$\n\ncolor{green}{1}\n\n$$\\color{green}{1}$$\n\ncolor{green}{2}$$\\color{green}{2}$\n\nIn the third test case, a possible seating arrangement with $6$ happy people is shown below.\n\n$\\color{green}{4}\n\n$$\\color{green}{4}$$\n\ncolor{green}{}\n\n$$\\color{green}{2}$$\n\ncolor{green}{3}\n\n$$\\color{green}{3}$$\n\ncolor{green}{1}\n\n$$\\color{green}{}$$\n\ncolor{green}{}$$\\color{green}{}$", "cfid": "2022A"}
{"problem_id": "2022B", "problem_title": "B. Kar Salesman", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2022/B", "problem_statement": "Karel is a salesman in a car dealership. The dealership has $n$ different models of cars. There are $a_i$ cars of the $i$-th model. Karel is an excellent salesperson and can convince customers to buy up to $x$ cars (of Karel's choice), as long as the cars are from different models.\n\nDetermine the minimum number of customers Karel has to bring in to sell all the cars.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $x$ ($1 \\le n \\le 5 \\cdot 10^5$; $1 \\le x \\le 10$) — the number of different models of cars and the maximum number of cars Karel can convince a customer to buy.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$) — the number of cars of each model.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the minimum possible number of customers needed to sell all the cars.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3 2\n\n3 1 2\n\n3 3\n\n2 1 3\n\n5 3\n\n2 2 1 9 2\n\n7 4\n\n2 5 3 3 5 2 5\n\n```\n\n#### Output #1\n\n```\n3\n3\n9\n7\n```\n\n### Note\n\nFor the first case, Karel only needs to lure in $3$ customers. He will convince the customers to buy the following models of cars:\n\n- Customer $1$ buys $2$ cars with model $1$ and $3$.\n- Customer $2$ buys $2$ cars with model $1$ and $2$.\n- Customer $3$ buys $2$ cars with model $1$ and $3$.\n\nFor the second case, Karel only needs to lure in $3$ customers. He will convince the customers to buy the following models of cars:\n\n- Customer $1$ buys $2$ cars with model $1$ and $3$.\n- Customer $2$ buys $3$ cars with model $1$, $2$ and $3$.\n- Customer $3$ buys $1$ car with model $3$.", "cfid": "2022B"}
{"problem_id": "2021A", "problem_title": "A. Meaning Mean", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2021/A", "problem_statement": "Pak Chanek has an array $a$ of $n$ positive integers. Since he is currently learning how to calculate the floored average of two numbers, he wants to practice it on his array $a$.\n\nWhile the array $a$ has at least two elements, Pak Chanek will perform the following three-step operation:\n\n1. Pick two different indices $i$ and $j$ ($1 \\leq i, j \\leq |a|$; $i \\neq j$), note that $|a|$ denotes the current size of the array $a$.\n2. Append $\\\\lfloor \\\\frac{a\\_i+a\\_j}{2} \\\\rfloor$$^{\\\\text{∗}}$ to the end of the array.\n3. Remove elements $a_i$ and $a_j$ from the array and concatenate the remaining parts of the array.\n\nFor example, suppose that $a=[5,4,3,2,1,1]$. If we choose $i=1$ and $j=5$, the resulting array will be $a=[4,3,2,1,3]$. If we choose $i=4$ and $j=3$, the resulting array will be $a=[5,4,1,1,2]$.\n\nAfter all operations, the array will consist of a single element $x$. Find the maximum possible value of $x$ if Pak Chanek performs the operations optimally.\n\n$^{\\\\text{∗}}$$\\\\lfloor x \\\\rfloor$ denotes the floor function of $x$, which is the greatest integer that is less than or equal to $x$. For example, $\\\\lfloor 6 \\\\rfloor = 6$, $\\\\lfloor 2.5 \\\\rfloor=2$, $\\\\lfloor -3.6 \\\\rfloor=-4$ and $\\\\lfloor \\\\pi \\\\rfloor=3$\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 5000$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n \\le 50$) — the length of the array $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$) — the elements of the array $a$.\n\nDo note that the sum of $n$ over all test cases is not bounded.\n\n### Output\n\nFor each test case, output a single integer: the maximum possible value of $x$ after all numbers have been picked.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n5\n\n1 7 8 4 5\n\n3\n\n2 6 5\n\n5\n\n5 5 5 5 5\n\n```\n\n#### Output #1\n\n```\n6\n4\n5\n```\n\n### Note\n\nIn the first test case, the array is initially $a=[1,7,8,4,5]$. Pak Chanek will perform the following operations:\n\n1. Pick $i=1$ and $j=2$, then $a=[8,4,5,4]$.\n2. Pick $i=3$ and $j=2$, then $a=[8,4,4]$.\n3. Pick $i=2$ and $j=3$, then $a=[8,4]$.\n4. Pick $i=1$ and $j=2$, then $a=[6]$.\n\nAfter all the operations, the array consists of a single element $x=6$. It can be proven that there is no series of operations that results in $x$ greater than $6$ in the end.", "cfid": "2021A"}
{"problem_id": "2021B", "problem_title": "B. Maximize Mex", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2021/B", "problem_statement": "You are given an array $a$ of $n$ positive integers and an integer $x$. You can do the following two-step operation any (possibly zero) number of times:\n\n1. Choose an index $i$ ($1 \\leq i \\leq n$).\n2. Increase $a_i$ by $x$, in other words $a_i := a_i + x$.\n\nFind the maximum value of the $\\operatorname{MEX}$ of $a$ if you perform the operations optimally.\n\nThe $\\operatorname{MEX}$ (minimum excluded value) of an array is the smallest non-negative integer that is not in the array. For example:\n\n- The $\\operatorname{MEX}$ of $[2,2,1]$ is $0$ because $0$ is not in the array.\n- The $\\operatorname{MEX}$ of $[3,1,0,1]$ is $2$ because $0$ and $1$ are in the array but $2$ is not.\n- The $\\operatorname{MEX}$ of $[0,3,1,2]$ is $4$ because $0$, $1$, $2$ and $3$ are in the array but $4$ is not.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 5000$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $x$ ($1 \\le n \\le 2 \\cdot 10^5$; $1 \\le x \\le 10^9$) — the length of the array and the integer to be used in the operation.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le 10^9$) — the given array.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer: the maximum $\\operatorname{MEX}$ of $a$ if you perform the operations optimally.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n6 3\n\n0 3 2 1 5 2\n\n6 2\n\n1 3 4 1 0 2\n\n4 5\n\n2 5 10 3\n\n```\n\n#### Output #1\n\n```\n4\n6\n0\n```\n\n### Note\n\nIn the first test case, the $\\operatorname{MEX}$ of $a$ is $4$ without performing any operations, which is the maximum.\n\nIn the second test case, the $\\operatorname{MEX}$ of $a$ is $5$ without performing any operations. If we perform two operations both with $i=1$, we will have the array $a=[5,3,4,1,0,2]$. Then, the $\\operatorname{MEX}$ of $a$ will become $6$, which is the maximum.\n\nIn the third test case, the $\\operatorname{MEX}$ of $a$ is $0$ without performing any operations, which is the maximum.", "cfid": "2021B"}
{"problem_id": "2021C1", "problem_title": "C1. Adjust The Presentation (Easy Version)", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2021/C1", "problem_statement": "This is the easy version of the problem. In the two versions, the constraints on $q$ and the time limit are different. In this version, $q=0$. You can make hacks only if all the versions of the problem are solved.\n\nA team consisting of $n$ members, numbered from $1$ to $n$, is set to present a slide show at a large meeting. The slide show contains $m$ slides.\n\nThere is an array $a$ of length $n$. Initially, the members are standing in a line in the order of $a_1, a_2, \\ldots, a_n$ from front to back. The slide show will be presented in order from slide $1$ to slide $m$. Each section will be presented by the member at the front of the line. After each slide is presented, you can move the member at the front of the line to any position in the lineup (without changing the order of the rest of the members). For example, suppose the line of members is $[\\color{red}{3},1,2,4]$. After member $3$ presents the current slide, you can change the line of members into either $[\\color{red}{3},1,2,4]$, $[1,\\color{red}{3},2,4]$, $[1,2,\\color{red}{3},4]$ or $[1,2,4,\\color{red}{3}]$.\n\nThere is also an array $b$ of length $m$. The slide show is considered good if it is possible to make member $b_i$ present slide $i$ for all $i$ from $1$ to $m$ under these constraints.\n\nHowever, your annoying boss wants to make $q$ updates to the array $b$. In the $i$-th update, he will choose a slide $s_i$ and a member $t_i$ and set $b_{s_i} := t_i$. Note that these updates are persistent, that is changes made to the array $b$ will apply when processing future updates.\n\nFor each of the $q+1$ states of array $b$, the initial state and after each of the $q$ updates, determine if the slideshow is good.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n$, $m$ and $q$ ($1 \\le n, m \\le 2 \\cdot 10^5$; $q=0$) — the number of members, the number of sections and the number of updates.\n\nThe second line of each test case contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($1 \\le a_i \\le n$) — the initial order of the members from front to back. It is guaranteed that each integer from $1$ to $n$ appears exactly once in $a$.\n\nThe third line of each test case contains $m$ integers $b_1, b_2, \\ldots, b_m$ ($1 \\le b_i \\le n$) — the members who should present each section.\n\nIt is guaranteed that the sum of $n$ and the sum of $m$ over all test cases do not exceed $2 \\cdot 10^5$ respectively.\n\n### Output\n\nFor each test case, output $q+1$ lines corresponding to the $q+1$ states of the array $b$. Output \"YA\" if the slide show is good, and \"TIDAK\" otherwise.\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yA\", \"Ya\", \"ya\", and \"YA\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n4 2 0\n\n1 2 3 4\n\n1 1\n\n3 6 0\n\n1 2 3\n\n1 1 2 3 3 2\n\n4 6 0\n\n3 1 4 2\n\n3 1 1 2 3 4\n\n```\n\n#### Output #1\n\n```\nYA\nYA\nTIDAK\n```\n\n### Note\n\nFor the first test case, you do not need to move the members as both slides are presented by member $1$, who is already at the front of the line.\n\nFor the second test case, the following is a possible way to move members so that the presentation is good:\n\n1. $[1,2,3]$, do not move member $1$.\n2. $[1,2,3]$, move member $1$ after member $3$.\n3. $[2,3,1]$, move member $2$ after member $3$.\n4. $[3,2,1]$, do not move member $3$.\n5. $[3,2,1]$, move member $3$ after member $1$.\n6. $[2,1,3]$, do not move member $2$.", "cfid": "2021C1"}
{"problem_id": "2020A", "problem_title": "A. Find Minimum Operations", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2020/A", "problem_statement": "You are given two integers $n$ and $k$.\n\nIn one operation, you can subtract any power of $k$ from $n$. Formally, in one operation, you can replace $n$ by $(n-k^x)$ for any non-negative integer $x$.\n\nFind the minimum number of operations required to make $n$ equal to $0$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe only line of each test case contains two integers $n$ and $k$ ($1 \\le n, k \\le 10^9$).\n\n### Output\n\nFor each test case, output the minimum number of operations on a new line.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n5 2\n\n3 5\n\n16 4\n\n100 3\n\n6492 10\n\n10 1\n\n```\n\n#### Output #1\n\n```\n2\n3\n1\n4\n21\n10\n```\n\n### Note\n\nIn the first test case, $n = 5$ and $k = 2$. We can perform the following sequence of operations:\n\n1. Subtract $2^0 = 1$ from $5$. The current value of $n$ becomes $5 - 1 = 4$.\n2. Subtract $2^2 = 4$ from $4$. The current value of $n$ becomes $4 - 4 = 0$.\n\nIt can be shown that there is no way to make $n$ equal to $0$ in less than $2$ operations. Thus, $2$ is the answer.\n\nIn the second test case, $n = 3$ and $k = 5$. We can perform the following sequence of operations:\n\n1. Subtract $5^0 = 1$ from $3$. The current value of $n$ becomes $3 - 1 = 2$.\n2. Subtract $5^0 = 1$ from $2$. The current value of $n$ becomes $2 - 1 = 1$.\n3. Subtract $5^0 = 1$ from $1$. The current value of $n$ becomes $1 - 1 = 0$.\n\nIt can be shown that there is no way to make $n$ equal to $0$ in less than $3$ operations. Thus, $3$ is the answer.", "cfid": "2020A"}
{"problem_id": "2020C", "problem_title": "C. Bitwise Balancing", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2020/C", "problem_statement": "You are given three non-negative integers $b$, $c$, and $d$.\n\nPlease find a non-negative integer $a \\in [0, 2^{61}]$ such that $(a\\, |\\, b)-(a\\, \\&\\, c)=d$, where $|$ and $\\&$ denote the [bitwise OR operation](https://en.wikipedia.org/wiki/Bitwise_operation#OR) and the [bitwise AND operation](https://en.wikipedia.org/wiki/Bitwise_operation#AND), respectively.\n\nIf such an $a$ exists, print its value. If there is no solution, print a single integer $-1$. If there are multiple solutions, print any of them.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^5$). The description of the test cases follows.\n\nThe only line of each test case contains three positive integers $b$, $c$, and $d$ ($0 \\le b, c, d \\le 10^{18}$).\n\n### Output\n\nFor each test case, output the value of $a$, or $-1$ if there is no solution. Please note that $a$ must be non-negative and cannot exceed $2^{61}$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2 2 2\n\n4 2 6\n\n10 2 14\n\n```\n\n#### Output #1\n\n```\n0\n-1\n12\n```\n\n### Note\n\nIn the first test case, $(0\\,|\\,2)-(0\\,\\&\\,2)=2-0=2$. So, $a = 0$ is a correct answer.\n\nIn the second test case, no value of $a$ satisfies the equation.\n\nIn the third test case, $(12\\,|\\,10)-(12\\,\\&\\,2)=14-0=14$. So, $a = 12$ is a correct answer.", "cfid": "2020C"}
{"problem_id": "2020B", "problem_title": "B. Brightness Begins", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2020/B", "problem_statement": "Imagine you have $n$ light bulbs numbered $1, 2, \\ldots, n$. Initially, all bulbs are on. To flip the state of a bulb means to turn it off if it used to be on, and to turn it on otherwise.\n\nNext, you do the following:\n\n- for each $i = 1, 2, \\ldots, n$, flip the state of all bulbs $j$ such that $j$ is divisible by $i^\\dagger$.\n\nAfter performing all operations, there will be several bulbs that are still on. Your goal is to make this number exactly $k$.\n\nFind the smallest suitable $n$ such that after performing the operations there will be exactly $k$ bulbs on. We can show that an answer always exists.\n\n$^\\dagger$ An integer $x$ is divisible by $y$ if there exists an integer $z$ such that $x = y\\cdot z$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe only line of each test case contains a single integer $k$ ($1 \\le k \\le 10^{18}$).\n\n### Output\n\nFor each test case, output $n$ — the minimum number of bulbs.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n1\n\n3\n\n8\n\n```\n\n#### Output #1\n\n```\n2\n5\n11\n```\n\n### Note\n\nIn the first test case, the minimum number of bulbs is $2$. Let's denote the state of all bulbs with an array, where $1$ corresponds to a turned on bulb, and $0$ corresponds to a turned off bulb. Initially, the array is $[1, 1]$.\n\n- After performing the operation with $i = 1$, the array becomes $[\\underline{0}, \\underline{0}]$.\n- After performing the operation with $i = 2$, the array becomes $[0, \\underline{1}]$.\n\nIn the end, there are $k = 1$ bulbs on. We can also show that the answer cannot be less than $2$.\n\nIn the second test case, the minimum number of bulbs is $5$. Initially, the array is $[1, 1, 1, 1, 1]$.\n\n- After performing the operation with $i = 1$, the array becomes $[\\underline{0}, \\underline{0}, \\underline{0}, \\underline{0}, \\underline{0}]$.\n- After performing the operation with $i = 2$, the array becomes $[0, \\underline{1}, 0, \\underline{1}, 0]$.\n- After performing the operation with $i = 3$, the array becomes $[0, 1, \\underline{1}, 1, 0]$.\n- After performing the operation with $i = 4$, the array becomes $[0, 1, 1, \\underline{0}, 0]$.\n- After performing the operation with $i = 5$, the array becomes $[0, 1, 1, 0, \\underline{1}]$.\n\nIn the end, there are $k = 3$ bulbs on. We can also show that the answer cannot be smaller than $5$.", "cfid": "2020B"}
{"problem_id": "2020D", "problem_title": "D. Connect the Dots", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2020/D", "problem_statement": "One fine evening, Alice sat down to play the classic game \"Connect the Dots\", but with a twist.\n\nTo play the game, Alice draws a straight line and marks $n$ points on it, indexed from $1$ to $n$. Initially, there are no arcs between the points, so they are all disjoint. After that, Alice performs $m$ operations of the following type:\n\n- She picks three integers $a_i$, $d_i$ ($1 \\le d_i \\le 10$), and $k_i$.\n- She selects points $a_i, a_i+d_i, a_i+2d_i, a_i+3d_i, \\ldots, a_i+k_i\\cdot d_i$ and connects each pair of these points with arcs.\n\nAfter performing all $m$ operations, she wants to know the number of connected components$^\\dagger$ these points form. Please help her find this number.\n\n$^\\dagger$ Two points are said to be in one connected component if there is a path between them via several (possibly zero) arcs and other points.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^5$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\le n \\le 2 \\cdot 10^5$, $1 \\le m \\le 2 \\cdot 10^5$).\n\nThe $i$-th of the following $m$ lines contains three integers $a_i$, $d_i$, and $k_i$ ($1 \\le a_i \\le a_i + k_i\\cdot d_i \\le n$, $1 \\le d_i \\le 10$, $0 \\le k_i \\le n$).\n\nIt is guaranteed that both the sum of $n$ and the sum of $m$ over all test cases do not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the number of connected components.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n10 2\n\n1 2 4\n\n2 2 4\n\n100 1\n\n19 2 4\n\n100 3\n\n1 2 5\n\n7 2 6\n\n17 2 31\n\n```\n\n#### Output #1\n\n```\n2\n96\n61\n```\n\n### Note\n\nIn the first test case, there are $n = 10$ points. The first operation joins the points $1$, $3$, $5$, $7$, and $9$. The second operation joins the points $2$, $4$, $6$, $8$, and $10$. There are thus two connected components: $\\{1, 3, 5, 7, 9\\}$ and $\\{2, 4, 6, 8, 10\\}$.\n\nIn the second test case, there are $n = 100$ points. The only operation joins the points $19$, $21$, $23$, $25$, and $27$. Now all of them form a single connected component of size $5$. The other $95$ points form single-point connected components. Thus, the answer is $1 + 95 = 96$.\n\nIn the third test case, there are $n = 100$ points. After the operations, all odd points from $1$ to $79$ will be in one connected component of size $40$. The other $60$ points form single-point connected components. Thus, the answer is $1 + 60 = 61$.", "cfid": "2020D"}
{"problem_id": "2018C", "problem_title": "C. Tree Pruning", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2018/C", "problem_statement": "[t+pazolite, ginkiha, Hommarju - Paved Garden](https://soundcloud.com/fractalex-gd/ginkiha-paved-garden-little)\n\n⠀\n\nYou are given a tree with $n$ nodes, rooted at node $1$. In this problem, a leaf is a non-root node with degree $1$.\n\nIn one operation, you can remove a leaf and the edge adjacent to it (possibly, new leaves appear). What is the minimum number of operations that you have to perform to get a tree, also rooted at node $1$, where all the leaves are at the same distance from the root?\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($3 \\leq n \\leq 5 \\cdot 10^5$) — the number of nodes.\n\nEach of the next $n-1$ lines contains two integers $u$, $v$ ($1 \\leq u, v \\leq n$, $u \\neq v$), describing an edge that connects $u$ and $v$. It is guaranteed that the given edges form a tree.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer: the minimum number of operations needed to achieve your goal.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n7\n\n1 2\n\n1 3\n\n2 4\n\n2 5\n\n4 6\n\n4 7\n\n7\n\n1 2\n\n1 3\n\n1 4\n\n2 5\n\n3 6\n\n5 7\n\n15\n\n12 9\n\n1 6\n\n6 14\n\n9 11\n\n8 7\n\n3 5\n\n13 5\n\n6 10\n\n13 15\n\n13 6\n\n14 12\n\n7 2\n\n8 1\n\n1 4\n\n```\n\n#### Output #1\n\n```\n2\n2\n5\n```\n\n### Note\n\nIn the first two examples, the tree is as follows:\n\n![](https://espresso.codeforces.com/a428c7bdf3ba5490a44914a039d11603cfb1c9df.png)\n\nIn the first example, by removing edges $(1, 3)$ and $(2, 5)$, the resulting tree has all leaves (nodes $6$ and $7$) at the same distance from the root (node $1$), which is $3$. The answer is $2$, as it is the minimum number of edges that need to be removed to achieve the goal.\n\nIn the second example, removing edges $(1, 4)$ and $(5, 7)$ results in a tree where all leaves (nodes $4$ and $5$) are at the same distance from the root (node $1$), which is $2$.", "cfid": "2018C"}
{"problem_id": "2018A", "problem_title": "A. Cards Partition", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2018/A", "problem_statement": "[DJ Genki vs Gram - Einherjar Joker](https://soundcloud.com/leon-hwang-368077289/einherjar-joker-dj-genki-vs-gram)\n\n⠀\n\nYou have some cards. An integer between $1$ and $n$ is written on each card: specifically, for each $i$ from $1$ to $n$, you have $a_i$ cards which have the number $i$ written on them.\n\nThere is also a shop which contains unlimited cards of each type. You have $k$ coins, so you can buy at most $k$ new cards in total, and the cards you buy can contain any integer between $\\mathbf{1}$ and $\\mathbf{n}$, inclusive.\n\nAfter buying the new cards, you must partition all your cards into decks, according to the following rules:\n\n- all the decks must have the same size;\n- there are no pairs of cards with the same value in the same deck.\n\nFind the maximum possible size of a deck after buying cards and partitioning them optimally.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$, $k$ ($1 \\leq n \\leq 2 \\cdot 10^5$, $0 \\leq k \\leq 10^{16}$) — the number of distinct types of cards and the number of coins.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\leq a_i \\leq 10^{10}$, $\\sum a_i \\geq 1$) — the number of cards of type $i$ you have at the beginning, for each $1 \\leq i \\leq n$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer: the maximum possible size of a deck if you operate optimally.\n\n### Example\n\n#### Input #1\n\n```\n\n9\n\n3 1\n\n3 2 2\n\n5 4\n\n2 6 1 2 4\n\n2 100\n\n1410065408 10000000000\n\n10 8\n\n7 4 6 6 9 3 10 2 8 7\n\n2 12\n\n2 2\n\n2 70\n\n0 1\n\n1 0\n\n1\n\n3 0\n\n2 1 2\n\n3 1\n\n0 3 3\n\n```\n\n#### Output #1\n\n```\n2\n3\n1\n7\n2\n2\n1\n1\n2\n```\n\n### Note\n\nIn the first test case, you can buy one card with the number $1$, and your cards become $[1, 1, 1, 1, 2, 2, 3, 3]$. You can partition them into the decks $[1, 2], [1, 2], [1, 3], [1, 3]$: they all have size $2$, and they all contain distinct values. You can show that you cannot get a partition with decks of size greater than $2$, so the answer is $2$.\n\nIn the second test case, you can buy two cards with the number $1$ and one card with the number $3$, and your cards become $[1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 4, 4, 5, 5, 5, 5]$, which can be partitioned into $[1, 2, 3], [1, 2, 4], [1, 2, 5], [1, 2, 5], [2, 3, 5], [2, 4, 5]$. You can show that you cannot get a partition with decks of size greater than $3$, so the answer is $3$.", "cfid": "2018A"}
{"problem_id": "2019B", "problem_title": "B. All Pairs Segments", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2019/B", "problem_statement": "[Shirobon - FOX](https://soundcloud.com/shirobon/fox?in=mart_207/sets/fav)\n\n⠀\n\nYou are given $n$ points on the $x$ axis, at increasing positive integer coordinates $x_1 < x_2 < \\ldots < x_n$.\n\nFor each pair $(i, j)$ with $1 \\leq i < j \\leq n$, you draw the segment $[x_i, x_j]$. The segments are closed, i.e., a segment $[a, b]$ contains the points $a, a+1, \\ldots, b$.\n\nYou are given $q$ queries. In the $i$-th query, you are given a positive integer $k_i$, and you have to determine how many points with integer coordinates are contained in exactly $k_i$ segments.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$, $q$ ($2 \\le n \\le 10^5$, $1 \\le q \\le 10^5$) — the number of points and the number of queries.\n\nThe second line of each test case contains $n$ integers $x_1, x_2, \\ldots, x_n$ ($1 \\leq x_1 < x_2 < \\ldots < x_n \\leq 10^9$) — the coordinates of the $n$ points.\n\nThe third line of each test case contains $q$ integers $k_1, k_2, \\ldots, k_q$ ($1 \\leq k_i \\leq 10^{18}$) — the parameters of the $q$ queries.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$, and the sum of $q$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, output a single line with $q$ integers: the $i$-th integer is the answer to the $i$-th query.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2 2\n\n101 200\n\n2 1\n\n6 15\n\n1 2 3 5 6 7\n\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\n\n5 8\n\n254618033 265675151 461318786 557391198 848083778\n\n6 9 15 10 6 9 4 4294967300\n\n```\n\n#### Output #1\n\n```\n0 100\n0 0 0 0 2 0 0 0 3 0 2 0 0 0 0\n291716045 0 0 0 291716045 0 301749698 0\n```\n\n### Note\n\nIn the first example, you only draw the segment $[101, 200]$. No point is contained in exactly $2$ segments, and the $100$ points $101, 102, \\ldots, 200$ are contained in exactly $1$ segment.\n\nIn the second example, you draw $15$ segments: $[1, 2], [1, 3], [1, 5], [1, 6], [1, 7], [2, 3], [2, 5], [2, 6], [2, 7], [3, 5], [3, 6], [3, 7], [5, 6], [5, 7], [6, 7]$. Points $1, 7$ are contained in exactly $5$ segments; points $2, 4, 6$ are contained in exactly $9$ segments; points $3, 5$ are contained in exactly $11$ segments.", "cfid": "2019B"}
{"problem_id": "2019A", "problem_title": "A. Max Plus Size", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2019/A", "problem_statement": "[EnV - Dynasty](https://soundcloud.com/envyofficial/env-dynasty)\n\n⠀\n\nYou are given an array $a_1, a_2, \\ldots, a_n$ of positive integers.\n\nYou can color some elements of the array red, but there cannot be two adjacent red elements (i.e., for $1 \\leq i \\leq n-1$, at least one of $a_i$ and $a_{i+1}$ must not be red).\n\nYour score is the maximum value of a red element plus the number of red elements. Find the maximum score you can get.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 500$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 100$) — the length of the array.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 1000$) — the given array.\n\n### Output\n\nFor each test case, output a single integer: the maximum possible score you can get after coloring some elements red according to the statement.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3\n\n5 4 5\n\n3\n\n4 5 4\n\n10\n\n3 3 3 3 4 1 2 3 4 5\n\n9\n\n17 89 92 42 29 92 14 70 45\n\n```\n\n#### Output #1\n\n```\n7\n6\n10\n97\n```\n\n### Note\n\nIn the first test case, you can color the array as follows: $[\\color{red}{5}, 4, \\color{red}{5}]$. Your score is $\\max([5, 5]) + \\text{size}([5, 5]) = 5+2 = 7$. This is the maximum score you can get.\n\nIn the second test case, you can color the array as follows: $[\\color{red}{4}, 5, \\color{red}{4}]$. Your score is $\\max([4, 4]) + \\text{size}([4, 4]) = 4+2 = 6$. This is the maximum score you can get.\n\nIn the third test case, you can color the array as follows: $[\\color{red}{3}, 3, \\color{red}{3}, 3, \\color{red}{4}, 1, 2, \\color{red}{3}, 4, \\color{red}{5}]$. Your score is $\\max([3, 3, 4, 3, 5]) + \\text{size}([3, 3, 4, 3, 5]) = 5+5 = 10$. This is the maximum score you can get.", "cfid": "2019A"}
{"problem_id": "2014B", "problem_title": "B. Robin Hood and the Major Oak", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2014/B", "problem_statement": "In Sherwood, the trees are our shelter, and we are all children of the forest.\n\nThe Major Oak in Sherwood is known for its majestic foliage, which provided shelter to Robin Hood and his band of merry men and women.\n\nThe Major Oak grows $i^i$ new leaves in the $i$-th year. It starts with $1$ leaf in year $1$.\n\nLeaves last for $k$ years on the tree. In other words, leaves grown in year $i$ last between years $i$ and $i+k-1$ inclusive.\n\nRobin considers even numbers lucky. Help Robin determine whether the Major Oak will have an even number of leaves in year $n$.\n\n### Input\n\nThe first line of the input contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nEach test case consists of two integers $n$, $k$ ($1 \\le n \\le 10^9$, $1 \\le k \\le n$) — the requested year and the number of years during which the leaves remain.\n\n### Output\n\nFor each test case, output one line, \"YES\" if in year $n$ the Major Oak will have an even number of leaves and \"NO\" otherwise.\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n1 1\n\n2 1\n\n2 2\n\n3 2\n\n4 4\n\n```\n\n#### Output #1\n\n```\nNO\nYES\nNO\nNO\nYES\n```\n\n### Note\n\nIn the first test case, there is only $1$ leaf.\n\nIn the second test case, $k=1$, so in the $2$-nd year there will be $2^2=4$ leaves.\n\nIn the third test case, $k=2$, so in the $2$-nd year there will be $1+2^2=5$ leaves.\n\nIn the fourth test case, $k=2$, so in the $3$-rd year there will be $2^2 + 3^3 = 4 + 27 = 31$ leaves.", "cfid": "2014B"}
{"problem_id": "2014D", "problem_title": "D. Robert Hood and Mrs Hood", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2014/D", "problem_statement": "Impress thy brother, yet fret not thy mother.\n\nRobin's brother and mother are visiting, and Robin gets to choose the start day for each visitor.\n\nAll days are numbered from $1$ to $n$. Visitors stay for $d$ continuous days, all of those $d$ days must be between day $1$ and $n$ inclusive.\n\nRobin has a total of $k$ risky 'jobs' planned. The $i$-th job takes place between days $l_i$ and $r_i$ inclusive, for $1 \\le i \\le k$. If a job takes place on any of the $d$ days, the visit overlaps with this job (the length of overlap is unimportant).\n\nRobin wants his brother's visit to overlap with the maximum number of distinct jobs, and his mother's the minimum.\n\nFind suitable start days for the visits of Robin's brother and mother. If there are multiple suitable days, choose the earliest one.\n\n### Input\n\nThe first line of the input contains a single integer $t$ ($1\\leq t \\leq 10^4$) — the number of test cases.\n\nThe first line of each test case consists of three integers $n$, $d$, $k$ ($1 \\le n \\le 10^5, 1 \\le d, k \\le n$) — the number of total days, duration of the visits, and the number of jobs.\n\nThen follow $k$ lines of each test case, each with two integers $l_i$ and $r_i$ ($1 \\le l_i \\le r_i \\le n$) — the start and end day of each job.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output two integers, the best starting days of Robin's brother and mother respectively. Both visits must fit between day $1$ and $n$ inclusive.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n2 1 1\n\n1 2\n\n4 1 2\n\n1 2\n\n2 4\n\n7 2 3\n\n1 2\n\n1 3\n\n6 7\n\n5 1 2\n\n1 2\n\n3 5\n\n9 2 1\n\n2 8\n\n9 2 4\n\n7 9\n\n4 8\n\n1 3\n\n2 3\n\n```\n\n#### Output #1\n\n```\n1 1\n2 1\n1 4\n1 1\n1 1\n3 4\n```\n\n### Note\n\nIn the first test case, the only job fills all $2$ days, both should visit on day $1$.\n\nIn the second test case, day $2$ overlaps with $2$ jobs and day $1$ overlaps with only $1$.\n\nIn the third test case, Robert visits for days $[1,2]$, Mrs. Hood visits for days $[4,5]$.", "cfid": "2014D"}
{"problem_id": "2014C", "problem_title": "C. Robin Hood in Town", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2014/C", "problem_statement": "In Sherwood, we judge a man not by his wealth, but by his merit.\n\nLook around, the rich are getting richer, and the poor are getting poorer. We need to take from the rich and give to the poor. We need Robin Hood!\n\nThere are $n$ people living in the town. Just now, the wealth of the $i$-th person was $a_i$ gold. But guess what? The richest person has found an extra pot of gold!\n\nMore formally, find an $a_j=max(a_1, a_2, \\dots, a_n)$, change $a_j$ to $a_j+x$, where $x$ is a non-negative integer number of gold found in the pot. If there are multiple maxima, it can be any one of them.\n\nA person is unhappy if their wealth is strictly less than half of the average wealth$^{\\text{∗}}$.\n\nIf strictly more than half of the total population $n$ are unhappy, Robin Hood will appear by popular demand.\n\nDetermine the minimum value of $x$ for Robin Hood to appear, or output $-1$ if it is impossible.\n\n$^{\\text{∗}}$The average wealth is defined as the total wealth divided by the total population $n$, that is, $\\frac{\\sum a_i}{n}$, the result is a real number.\n\n### Input\n\nThe first line of input contains one integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains an integer $n$ ($1 \\le n \\le 2\\cdot10^5$) — the total population.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^6$) — the wealth of each person.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output one integer — the minimum number of gold that the richest person must find for Robin Hood to appear. If it is impossible, output $-1$ instead.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n1\n\n2\n\n2\n\n2 19\n\n3\n\n1 3 20\n\n4\n\n1 2 3 4\n\n5\n\n1 2 3 4 5\n\n6\n\n1 2 1 1 1 25\n\n```\n\n#### Output #1\n\n```\n-1\n-1\n0\n15\n16\n0\n```\n\n### Note\n\nIn the first test case, it is impossible for a single person to be unhappy.\n\nIn the second test case, there is always $1$ happy person (the richest).\n\nIn the third test case, no additional gold are required, so the answer is $0$.\n\nIn the fourth test case, after adding $15$ gold, the average wealth becomes $\\frac{25}{4}$, and half of this average is $\\frac{25}{8}$, resulting in $3$ people being unhappy.\n\nIn the fifth test case, after adding $16$ gold, the average wealth becomes $\\frac{31}{5}$, resulting in $3$ people being unhappy.", "cfid": "2014C"}
{"problem_id": "2014E", "problem_title": "E. Rendez-vous de Marian et Robin", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2014/E", "problem_statement": "In the humble act of meeting, joy doth unfold like a flower in bloom.\n\nAbsence makes the heart grow fonder. Marian sold her last ware at the Market at the same time Robin finished training at the Major Oak. They couldn't wait to meet, so they both start without delay.\n\nThe travel network is represented as $n$ vertices numbered from $1$ to $n$ and $m$ edges. The $i$-th edge connects vertices $u_i$ and $v_i$, and takes $w_i$ seconds to travel (all $w_i$ are even). Marian starts at vertex $1$ (Market) and Robin starts at vertex $n$ (Major Oak).\n\nIn addition, $h$ of the $n$ vertices each has a single horse available. Both Marian and Robin are capable riders, and could mount horses in no time (i.e. in $0$ seconds). Travel times are halved when riding. Once mounted, a horse lasts the remainder of the travel. Meeting must take place on a vertex (i.e. not on an edge). Either could choose to wait on any vertex.\n\nOutput the earliest time Robin and Marian can meet. If vertices $1$ and $n$ are disconnected, output $-1$ as the meeting is cancelled.\n\n### Input\n\nThe first line of the input contains a single integer $t$ ($1\\leq t \\leq 10^4$) — the number of test cases.\n\nThe first line of each test case consists of three integers $n$, $m$, $h$ ($2 \\le n \\le 2 \\cdot 10^5, \\;1 \\le m \\le 2 \\cdot 10^5, \\; 1 \\le h \\le n$) — the number of vertices, the number of edges and the number of vertices that have a single horse.\n\nThe second line of each test case contains $h$ distinct integers $a_1, a_2, \\ldots, a_h$ ($1 \\le a_i \\le n$) — the vertices that have a single horse available.\n\nThen follow $m$ lines of each test case, each with three integers $u_i$, $v_i$, $w_i$ ($1\\le u_i,v_i \\le n, \\; 2\\le w_i \\le 10^6$) — meaning that there is an edge between vertices $u_i$ and $v_i$ with travel cost $w_i$ seconds without a horse.\n\nThere are no self loops or multiple edges. By good fortune, all $w_i$ are even integers.\n\nIt is guaranteed that the sums of both $n$ and $m$ over all test cases do not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer, the earliest time Robin and Marian can meet. If it is impossible for them to meet, output $-1$.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n2 1 1\n\n1\n\n1 2 10\n\n3 1 2\n\n2 3\n\n1 2 10\n\n3 3 1\n\n2\n\n1 2 4\n\n1 3 10\n\n2 3 6\n\n4 3 2\n\n2 3\n\n1 2 10\n\n2 3 18\n\n3 4 16\n\n3 2 1\n\n2\n\n1 2 4\n\n1 3 16\n\n7 7 1\n\n3\n\n1 5 2\n\n2 6 12\n\n1 2 12\n\n6 4 8\n\n7 3 4\n\n6 3 4\n\n7 6 4\n\n```\n\n#### Output #1\n\n```\n5\n-1\n6\n19\n14\n12\n```\n\n### Note\n\nIn the first test case, Marian rides from vertex $1$ to vertex $2$, Robin waits.\n\nIn the second test case, vertices $1$ and $3$ are not connected.\n\nIn the third test case, both Marian and Robin travel to vertex $2$ to meet.\n\nIn the fourth test case, Marian travels to vertex $2$ without a horse, mounts the horse at vertex $2$ and rides to vertex $3$ to meet Robin.\n\nIn the fifth test case, Marian travels to vertex $2$ without a horse, mounts the horse at vertex $2$ and rides back to vertex $1$ and then to vertex $3$. Robin waits.", "cfid": "2014E"}
{"problem_id": "2014A", "problem_title": "A. Robin Helps", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2014/A", "problem_statement": "There is a little bit of the outlaw in everyone, and a little bit of the hero too.\n\nThe heroic outlaw Robin Hood is famous for taking from the rich and giving to the poor.\n\nRobin encounters $n$ people starting from the $1$-st and ending with the $n$-th. The $i$-th person has $a_i$ gold. If $a_i \\ge k$, Robin will take all $a_i$ gold, and if $a_i=0$, Robin will give $1$ gold if he has any. Robin starts with $0$ gold.\n\nFind out how many people Robin gives gold to.\n\n### Input\n\nThe first line of the input contains a single integer $t$ ($1\\leq t \\leq 10^4$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$, $k$ ($1 \\le n \\le 50, 1 \\le k \\le 100$) — the number of people and the threshold at which Robin Hood takes the gold.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le 100$) — the gold of each person.\n\n### Output\n\nFor each test case, output a single integer, the number of people that will get gold from Robin Hood.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2 2\n\n2 0\n\n3 2\n\n3 0 0\n\n6 2\n\n0 3 0 0 0 0\n\n2 5\n\n5 4\n\n```\n\n#### Output #1\n\n```\n1\n2\n3\n0\n```\n\n### Note\n\nIn the first test case, Robin takes $2$ gold from the first person and gives a gold to the second person.\n\nIn the second test case, Robin takes $3$ gold and gives $1$ gold to each of the next $2$ people.\n\nIn the third test case, Robin takes $3$ gold and so only gives gold to $3$ other people.", "cfid": "2014A"}
{"problem_id": "2013A", "problem_title": "A. Zhan's Blender", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2013/A", "problem_statement": "Today, a club fair was held at \"NSPhM\". In order to advertise his pastry club, Zhan decided to demonstrate the power of his blender.\n\nTo demonstrate the power of his blender, Zhan has $n$ fruits.\n\nThe blender can mix up to $x$ fruits per second.\n\nIn each second, Zhan can put up to $y$ fruits into the blender. After that, the blender will blend $\\min(x, c)$ fruits, where $c$ is the number of fruits inside the blender. After blending, blended fruits are removed from the blender.\n\nHelp Zhan determine the minimum amount of time required for Zhan to blend all fruits.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$). The description of the test cases follows.\n\nThe first line of each test case contains one integer $n$ ($0 \\le n \\le 10^9$) — the number of fruits Zhan has.\n\nThe second line of each test case contains two integers $x$ and $y$ ($1 \\le x, y \\le 10^9$) — the number of fruits the blender can blend per second and the number of fruits Zhan can put into the blender per second.\n\n### Output\n\nFor each testcase, output a single integer — the minimum number of seconds to blend all fruits.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n5\n\n3 4\n\n3\n\n1 2\n\n6\n\n4 3\n\n100\n\n4 3\n\n9\n\n3 3\n\n```\n\n#### Output #1\n\n```\n2\n3\n2\n34\n3\n```\n\n### Note\n\nIn the first example, you can first put $2$ fruits in the blender. After that, the blender will mix these $2$ fruits, and in the end, there will be $0$ fruits left in the blender. Then you can put $3$ fruits into the blender, after which the blender will mix these $3$ fruits.\n\nIn the second example, you can put $1$ fruit into the blender $3$ times.\n\nIn the third example, you can first put $3$ fruits into the blender, then add another $3$ fruits.", "cfid": "2013A"}
{"problem_id": "2013C", "problem_title": "C. Password Cracking", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2013/C", "problem_statement": "Dimash learned that Mansur wrote something very unpleasant about him to a friend, so he decided to find out his password at all costs and discover what exactly he wrote.\n\nBelieving in the strength of his password, Mansur stated that his password — is a binary string of length $n$. He is also ready to answer Dimash's questions of the following type:\n\nDimash says a binary string $t$, and Mansur replies whether it is true that $t$ is a substring of his password.\n\nHelp Dimash find out the password in no more than $2n$ operations; otherwise, Mansur will understand the trick and stop communicating with him.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 100$). The description of the test cases follows.\n\n### Interaction\n\nAt the beginning of each test case, first read $n$ ($1 \\le n \\le 100$) — the size of the binary string. Then proceed to guessing it.\n\nTo guess each string $s$, you can make no more than $2n$ queries of the following type:\n\n- \"? t\", where $t$ is a binary string such that ($1 \\le |t| \\le n$).\n\nIn response to this query, you will receive $1$ if $t$ is a substring of $s$, and $0$ otherwise.\n\nOnce you receive the answer, output a single string in the following format:\n\n- \"! s\", where $s$ is a binary string of size $n$.\n\nAfter that, proceed to solve the next test case.\n\nIf you make an incorrect attempt or exceed the limit of $2n$ attempts, you will receive $-1$ instead of an answer and get the verdict Wrong answer. In this case, your program should terminate immediately to avoid undefined verdicts.\n\nAfter outputting the queries, do not forget to output a newline character and flush the output buffer. Otherwise, you will receive the verdict Solution \"hung\". To flush the buffer, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- flush(output) in Pascal;\n- stdout.flush() in Python;\n- refer to the documentation for other languages.\n\nHacks:\n\nTo use hacks, use the following format of tests:\n\nThe first line should contain a single integer $t$ ($1\\le t\\le 100$) — the number of test cases.\n\nThe first line of each test case should contain a single number $n$ ($1 \\le n \\le 100$) — the length of the string. The second line should contain a binary string of size $n$.\n\n### Example\n\n#### Input #1\n\n```\n4\n3\n\n0\n\n0\n\n1\n\n4\n\n4\n\n2```\n\n#### Output #1\n\n```\n\n? 00\n\n? 000\n\n? 010\n\n! 010\n\n! 1100\n\n! 0110\n\n! 10```\n\n### Note\n\nIn the first example, the string $010$ is given. Therefore, the answers to the queries are as follows:\n\n\"? 00\" $00$ is not a substring of $010$, so the answer is $0$.\n\n\"? 000\" $000$ is not a substring, so the answer is $0$.\n\n\"? 010\" $010$ is a substring, so the answer is $1$.\n\nIn the second example, the string is $1100$, in the third $0110$, and in the fourth $10$.", "cfid": "2013C"}
{"problem_id": "2013B", "problem_title": "B. Battle for Survive", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2013/B", "problem_statement": "Eralim, being the mafia boss, manages a group of $n$ fighters. Fighter $i$ has a rating of $a_i$.\n\nEralim arranges a tournament of $n - 1$ battles, in each of which two not yet eliminated fighters $i$ and $j$ ($1 \\le i < j \\le n$) are chosen, and as a result of the battle, fighter $i$ is eliminated from the tournament, and the rating of fighter $j$ is reduced by the rating of fighter $i$. That is, $a_j$ is decreased by $a_i$. Note that fighter $j$'s rating can become negative. The fighters indexes do not change.\n\nEralim wants to know what maximum rating the last remaining fighter can preserve if he chooses the battles optimally.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$) — the number of fighters.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots a_n$ ($1 \\le a_i \\le 10^9$) — the ratings of the fighters.\n\nThe sum of $n$ over all testcases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each testcase, output a single integer — the maximum rating that the last remaining fighter can preserve.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n2\n\n2 1\n\n3\n\n2 2 8\n\n4\n\n1 2 4 3\n\n5\n\n1 2 3 4 5\n\n5\n\n3 2 4 5 4\n\n```\n\n#### Output #1\n\n```\n-1\n8\n2\n7\n8\n```\n\n### Note\n\nIn the first example, you can arrange a fight between fighters with indices $1$ and $2$, where the fighter with index $2$ will win. The rating of the last fighter, that is, the fighter with index $2$, will be $1 - 2 = -1$.\n\nIn the second example, you can first conduct a fight between fighters with indices $1$ and $2$, where the fighter with index $2$ will win, and then conduct a fight between fighters with indices $2$ and $3$, where the fighter with index $3$ will win.\n\nThe rating of the fighter with index $2$ after the first fight will be $2 - 2 = 0$. The rating of the fighter with index $3$ after the second fight will be $8 - 0 = 8$.", "cfid": "2013B"}
{"problem_id": "2005C", "problem_title": "C. Lazy Narek", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2005/C", "problem_statement": "Narek is too lazy to create the third problem of this contest. His friend Artur suggests that he should use ChatGPT. ChatGPT creates $n$ problems, each consisting of $m$ letters, so Narek has $n$ strings. To make the problem harder, he combines the problems by selecting some of the $n$ strings possibly none and concatenating them without altering their order. His chance of solving the problem is defined as $score_n - score_c$, where $score_n$ is Narek's score and $score_c$ is ChatGPT's score.\n\nNarek calculates $score_n$ by examining the selected string (he moves from left to right). He initially searches for the letter $\\texttt{\"n\"}$, followed by $\\texttt{\"a\"}$, $\\texttt{\"r\"}$, $\\texttt{\"e\"}$, and $\\texttt{\"k\"}$. Upon finding all occurrences of these letters, he increments $score_n$ by $5$ and resumes searching for $\\texttt{\"n\"}$ again (he doesn't go back, and he just continues from where he left off).\n\nAfter Narek finishes, ChatGPT scans through the array and increments $score_c$ by $1$ for each letter $\\texttt{\"n\"}$, $\\texttt{\"a\"}$, $\\texttt{\"r\"}$, $\\texttt{\"e\"}$, or $\\texttt{\"k\"}$ that Narek fails to utilize (note that if Narek fails to complete the last occurrence by finding all of the $5$ letters, then all of the letters he used are counted in ChatGPT's score $score_c$, and Narek doesn't get any points if he doesn't finish finding all the 5 letters).\n\nNarek aims to maximize the value of $score_n - score_c$ by selecting the most optimal subset of the initial strings.\n\n### Input\n\nIn the first line of the input, you're given a single integer $t$ ($1 \\le t \\le 10^5$), the number of test cases. Then the description of each test case follows.\n\nIn the first line of each test case, you're given two integers $n, m$ ($1 \\le n, m \\le 10^3$), the number of strings and the length of each string.\n\nIn the next $n$ lines, you're given $n$ strings, each having a length of $m$. The strings only contain lowercase letters of the English alphabet.\n\nThe sum of values of $n \\cdot m$ over all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case, output a single integer: the maximal possible value of $score_n - score_c$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n5 2\n\nnn\n\naa\n\nrr\n\nee\n\nkk\n\n1 5\n\nnarek\n\n1 4\n\nnare\n\n5 7\n\nnrrarek\n\nnrnekan\n\nuuuuuuu\n\nppppppp\n\nnkarekz\n\n```\n\n#### Output #1\n\n```\n0\n5\n0\n7\n```\n\n### Note\n\nIn the first test case, one of the optimal answers is when Narek doesn't choose any of the strings, so the answer is $0$. He can alternatively choose all the strings. In this case, the full string becomes \"nnaarreekk\". Narek can choose the first appearances of all letters and add $5$ to the score. His opponent will add $1$ for all second appearances, which will be $5$ in total. So the answer will be $5 - 5 = 0$.\n\nIn the third test case, the only optimal answer is when Narek doesn't choose the string. Note that if he were to choose the string, he wouldn't be able to find the last letter \"k\", so his score would stay at $0$ instead of becoming $5$. Then ChatGPT would add $4$ for all of the $4$ letters, and the answer would become $0 - 4 = -4$.\n\nIn the last test case, Narek needs to choose the first and the last strings. After putting these two next to each other, he gets \"${\\color{red}{n}}rr{\\color{red}{a}}{\\color{red}{r}}{\\color{red}{e}}{\\color{red}{k}}{\\color{red}{n}}k{\\color{red}{a}}{\\color{red}{r}}{\\color{red}{e}}{\\color{red}{k}}{\\color{blue}{z}}$\". Narek can choose the letters marked with red and add $10$ to his score. Since the black colored letters Narek left behind are eligible for the opponent to claim (they are used in the word \"narek\"), the opponent adds all other letters to the score and gets a score of $3$. Therefore, the answer is $10 - 3 = 7$.", "cfid": "2005C"}
{"problem_id": "2005B1", "problem_title": "B1. The Strict Teacher (Easy Version)", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2005/B1", "problem_statement": "This is the easy version of the problem. The only differences between the two versions are the constraints on $m$ and $q$. In this version, $m=2$ and $q=1$. You can make hacks only if both versions of the problem are solved.\n\nNarek and Tsovak were busy preparing this round, so they have not managed to do their homework and decided to steal David's homework. Their strict teacher noticed that David has no homework and now wants to punish him. She hires other teachers to help her catch David. And now $m$ teachers together are chasing him. Luckily, the classroom is big, so David has many places to hide.\n\nThe classroom can be represented as a one-dimensional line with cells from $1$ to $n$, inclusive.\n\nAt the start, all $m$ teachers and David are in distinct cells. Then they make moves. During each move\n\n- David goes to an adjacent cell or stays at the current one.\n- Then, each of the $m$ teachers simultaneously goes to an adjacent cell or stays at the current one.\n\nThis continues until David is caught. David is caught if any of the teachers (possibly more than one) is located in the same cell as David. Everyone sees others' moves, so they all act optimally.\n\nYour task is to find how many moves it will take for the teachers to catch David if they all act optimally.\n\nActing optimally means the student makes his moves in a way that maximizes the number of moves the teachers need to catch him; and the teachers coordinate with each other to make their moves in a way that minimizes the number of moves they need to catch the student.\n\nAlso, as Narek and Tsovak think this task is easy, they decided to give you $q$ queries on David's position. Note: this is the easy version, and you are given only one query.\n\n### Input\n\nIn the first line of the input, you are given a single integer $t$ ($1 \\le t \\le 10^5$) — the number of test cases. The description of each test case follows.\n\nIn the first line of each test case, you are given three integers $n$, $m$, and $q$ ($3 \\le n \\le 10^9$, $m=2$, $q=1$) — the number of cells on the line, the number of teachers, and the number of queries.\n\nIn the second line of each test case, you are given $m$ distinct integers $b_1, b_2, \\ldots, b_m$ ($1 \\le b_i \\le n$) — the cell numbers of the teachers.\n\nIn the third line of each test case, you are given $q$ integers $a_1, a_2, \\ldots, a_q$ ($1 \\le a_i \\le n$) — David's cell number for every query.\n\nIt is guaranteed that for any $i$, $j$ such that $1 \\le i \\le m$ and $1 \\le j \\le q$, $b_i \\neq a_j$.\n\n### Output\n\nFor each test case, output $q$ lines, the $i$-th of them containing the answer of the $i$-th query.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n10 2 1\n\n1 4\n\n2\n\n8 2 1\n\n3 6\n\n1\n\n8 2 1\n\n3 6\n\n8\n\n```\n\n#### Output #1\n\n```\n1\n2\n2\n```\n\n### Note\n\nIn the first example, the student can just stay at cell $2$. The teacher, initially located in cell $1$, can reach cell $2$ in one move. Therefore, the answer is $1$.\n\nIn the second example, the student should just stay at cell $1$. The teacher, initially located in cell $3$, can reach cell $1$ in two moves. Therefore, the answer is $2$.", "cfid": "2005B1"}
{"problem_id": "2005A", "problem_title": "A. Simple Palindrome", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2005/A", "problem_statement": "Narek has to spend 2 hours with some 2-year-old kids at the kindergarten. He wants to teach them competitive programming, and their first lesson is about palindromes.\n\nNarek found out that the kids only know the vowels of the English alphabet (the letters $\\mathtt{a}$, $\\mathtt{e}$, $\\mathtt{i}$, $\\mathtt{o}$, and $\\mathtt{u}$), so Narek needs to make a string that consists of vowels only. After making the string, he'll ask the kids to count the number of subsequences that are palindromes. Narek wants to keep it simple, so he's looking for a string such that the amount of palindrome subsequences is minimal.\n\nHelp Narek find a string of length $n$, consisting of lowercase English vowels only (letters $\\mathtt{a}$, $\\mathtt{e}$, $\\mathtt{i}$, $\\mathtt{o}$, and $\\mathtt{u}$), which minimizes the amount of palindrome$^{\\dagger}$ subsequences$^{\\ddagger}$ in it.\n\n$^{\\dagger}$ A string is called a palindrome if it reads the same from left to right and from right to left.\n\n$^{\\ddagger}$ String $t$ is a subsequence of string $s$ if $t$ can be obtained from $s$ by removing several (possibly, zero or all) characters from $s$ and concatenating the remaining ones, without changing their order. For example, $\\mathtt{odocs}$ is a subsequence of $\\texttt{c}{\\color{red}{\\texttt{od}}}\\texttt{ef}{\\color{red}{\\texttt{o}}}\\texttt{r}{\\color{red}{\\texttt{c}}}\\texttt{e}{\\color{red}{\\texttt{s}}}$.\n\n### Input\n\nThe first line of the input contains a single integer $t$ ($1 \\le t \\le 100$) — the number of test cases. Subsequently, the description of each test case follows.\n\nThe only line of each test case contains a single integer $n$ ($1 \\le n \\le 100$) — the size of the string.\n\n### Output\n\nFor each test case, output any string of length $n$ that satisfies the above conditions.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2\n\n3\n\n6\n\n```\n\n#### Output #1\n\n```\nuo\niae\noeiiua\n```\n\n### Note\n\nIn the first example, $\\texttt{uo}$ has only three palindrome subsequences: $\\texttt{u}$, $\\texttt{o}$, and the empty string. It can be shown that there is no better answer.\n\nIn the third example, $\\texttt{oeiiua}$ has only eight palindrome subsequences: $\\texttt{o}$, $\\texttt{e}$, $\\texttt{i}$, $\\texttt{i}$, $\\texttt{u}$, $\\texttt{a}$, $\\texttt{ii}$, and the empty string. It can be shown that there is no better answer.", "cfid": "2005A"}
{"problem_id": "2005B2", "problem_title": "B2. The Strict Teacher (Hard Version)", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2005/B2", "problem_statement": "This is the hard version of the problem. The only differences between the two versions are the constraints on $m$ and $q$. In this version, $m, q \\le 10^5$. You can make hacks only if both versions of the problem are solved.\n\nNarek and Tsovak were busy preparing this round, so they have not managed to do their homework and decided to steal David's homework. Their strict teacher noticed that David has no homework and now wants to punish him. She hires other teachers to help her catch David. And now $m$ teachers together are chasing him. Luckily, the classroom is big, so David has many places to hide.\n\nThe classroom can be represented as a one-dimensional line with cells from $1$ to $n$, inclusive.\n\nAt the start, all $m$ teachers and David are in distinct cells. Then they make moves. During each move\n\n- David goes to an adjacent cell or stays at the current one.\n- Then, each of the $m$ teachers simultaneously goes to an adjacent cell or stays at the current one.\n\nThis continues until David is caught. David is caught if any of the teachers (possibly more than one) is located in the same cell as David. Everyone sees others' moves, so they all act optimally.\n\nYour task is to find how many moves it will take for the teachers to catch David if they all act optimally.\n\nActing optimally means the student makes his moves in a way that maximizes the number of moves the teachers need to catch him; and the teachers coordinate with each other to make their moves in a way that minimizes the number of moves they need to catch the student.\n\nAlso, as Narek and Tsovak think this task is easy, they decided to give you $q$ queries on David's position.\n\n### Input\n\nIn the first line of the input, you are given a single integer $t$ ($1 \\le t \\le 10^5$) — the number of test cases. The description of each test case follows.\n\nIn the first line of each test case, you are given three integers $n$, $m$, and $q$ ($3 \\le n \\le 10^9$, $1 \\le m, q \\le 10^5$) — the number of cells on the line, the number of teachers, and the number of queries.\n\nIn the second line of each test case, you are given $m$ distinct integers $b_1, b_2, \\ldots, b_m$ ($1 \\le b_i \\le n$) — the cell numbers of the teachers.\n\nIn the third line of each test case, you are given $q$ integers $a_1, a_2, \\ldots, a_q$ ($1 \\le a_i \\le n$) — David's cell number for every query.\n\nIt is guaranteed that for any $i$, $j$ such that $1 \\le i \\le m$ and $1 \\le j \\le q$, $b_i \\neq a_j$.\n\nIt is guaranteed that the sum of values of $m$ over all test cases does not exceed $2 \\cdot 10^5$.\n\nIt is guaranteed that the sum of values of $q$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output $q$ lines, the $i$-th of them containing the answer of the $i$-th query.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n8 1 1\n\n6\n\n3\n\n10 3 3\n\n1 4 8\n\n2 3 10\n\n```\n\n#### Output #1\n\n```\n5\n1\n1\n2\n```\n\n### Note\n\nIn the only query of the first example, the student can run to cell $1$. It will take the teacher five moves to reach from cell $6$ to cell $1$, so the answer is $5$.\n\nIn the second query of the second example, the student can just stay at cell $3$. The teacher, initially located in cell $4$, can reach cell $3$ in one move. Therefore, the answer is $1$.", "cfid": "2005B2"}
{"problem_id": "2008C", "problem_title": "C. Longest Good Array", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2008/C", "problem_statement": "Today, Sakurako was studying arrays. An array $a$ of length $n$ is considered good if and only if:\n\n- the array $a$ is increasing, meaning $a_{i - 1} < a_i$ for all $2 \\le i \\le n$;\n- the differences between adjacent elements are increasing, meaning $a_i - a_{i-1} < a_{i+1} - a_i$ for all $2 \\le i < n$.\n\nSakurako has come up with boundaries $l$ and $r$ and wants to construct a good array of maximum length, where $l \\le a_i \\le r$ for all $a_i$.\n\nHelp Sakurako find the maximum length of a good array for the given $l$ and $r$.\n\n### Input\n\nThe first line contains a single integer $t$ ($1\\le t\\le 10^4$)  — the number of test cases.\n\nThe only line of each test case contains two integers $l$ and $r$ ($1\\le l\\le r\\le 10^9$).\n\n### Output\n\nFor each test case, output a single integer  — the length of the longest good array Sakurako can form given $l$ and $r$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n1 2\n\n1 5\n\n2 2\n\n10 20\n\n1 1000000000\n\n```\n\n#### Output #1\n\n```\n2\n3\n1\n5\n44721\n```\n\n### Note\n\nFor $l=1$ and $r=5$, one possible array could be $(1,2,5)$. It can be proven that an array of length $4$ does not exist for the given $l$ and $r$.\n\nFor $l=2$ and $r=2$, the only possible array is $(2)$.\n\nFor $l=10$ and $r=20$, the only possible array is $(10,11,13,16,20)$.", "cfid": "2008C"}
{"problem_id": "2008G", "problem_title": "G. Sakurako's Task", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2008/G", "problem_statement": "Sakurako has prepared a task for you:\n\nShe gives you an array of $n$ integers and allows you to choose $i$ and $j$ such that $i \\neq j$ and $a_i \\ge a_j$, and then assign $a_i = a_i - a_j$ or $a_i = a_i + a_j$. You can perform this operation any number of times for any $i$ and $j$, as long as they satisfy the conditions.\n\nSakurako asks you what is the maximum possible value of $mex\\_k$$^{\\\\text{∗}}$ of the array after any number of operations.\n\n$^{\\\\text{∗}}$$mex\\_k$ is the $k$-th non-negative integer that is absent in the array. For example, $mex\\_1(\\\\{1,2,3 \\\\})=0$, since $0$ is the first element that is not in the array, and $mex\\_2(\\\\{0,2,4 \\\\})=3$, since $3$ is the second element that is not in the array.\n\n### Input\n\nThe first line contains a single integer $t$ ($1\\le t\\le 10^4$)  — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1\\le n\\le 2\\cdot 10^5,1\\le k\\le 10^9$)  — the number of elements in the array and the value $k$ for $mex_k$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\dots,a_n$ ($1\\le a_i\\le 10^9$)  — the elements of the array.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, output the maximum $mex_k$ that can be achieved through the operations.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n1 3\n\n3\n\n2 10\n\n1 1\n\n3 1\n\n1 2 3\n\n3 2\n\n1 2 4\n\n4 5\n\n2 2 2 16\n\n4 5\n\n2 2 2 3\n\n```\n\n#### Output #1\n\n```\n2\n11\n3\n4\n8\n8\n```", "cfid": "2008G"}
{"problem_id": "2008B", "problem_title": "B. Square or Not", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2008/B", "problem_statement": "A beautiful binary matrix is a matrix that has ones on its edges and zeros inside.\n\n![](https://espresso.codeforces.com/6d30253d95b27c27218c489816dcd1544a00ee58.png)Examples of four beautiful binary matrices.\n\nToday, Sakurako was playing with a beautiful binary matrix of size $r \\times c$ and created a binary string $s$ by writing down all the rows of the matrix, starting from the first and ending with the $r$-th. More formally, the element from the matrix in the $i$-th row and $j$-th column corresponds to the $((i-1)*c+j)$-th element of the string.\n\nYou need to check whether the beautiful matrix from which the string $s$ was obtained could be squared. In other words, you need to check whether the string $s$ could have been build from a square beautiful binary matrix (i.e., one where $r=c$).\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$) — the length of the string.\n\nThe second line of each test case contains the string $s$ of length $n$. The string is always the result of writing out the strings of a beautiful matrix.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nPrint \"Yes\", if the original matrix could have been square, and \"No\" otherwise.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n2\n\n11\n\n4\n\n1111\n\n9\n\n111101111\n\n9\n\n111111111\n\n12\n\n111110011111\n\n```\n\n#### Output #1\n\n```\nNo\nYes\nYes\nNo\nNo\n```\n\n### Note\n\nFor the second test case, string 1111 can be obtained from the matrix:\n\n$1\n\n$$1$$\n\n1$$1$\n\nFor the third test case, string 111101111 can be obtained from the matrix:\n\n$1\n\n$$1$$\n\n1\n\n$$1$$\n\n0\n\n$$1$$\n\n1\n\n$$1$$\n\n1$\n\nThere is no square matrix in the fourth case, such that the string can be obtained from it.", "cfid": "2008B"}
{"problem_id": "2008E", "problem_title": "E. Alternating String", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2008/E", "problem_statement": "Sakurako really loves alternating strings. She calls a string $s$ of lowercase Latin letters an alternating string if characters in the even positions are the same, if characters in the odd positions are the same, and the length of the string is even.\n\nFor example, the strings 'abab' and 'gg' are alternating, while the strings 'aba' and 'ggwp' are not.\n\nAs a good friend, you decided to gift such a string, but you couldn't find one. Luckily, you can perform two types of operations on the string:\n\n1. Choose an index $i$ and delete the $i$-th character from the string, which will reduce the length of the string by $1$. This type of operation can be performed no more than $1$ time;\n2. Choose an index $i$ and replace $s_i$ with any other letter.\n\nSince you are in a hurry, you need to determine the minimum number of operations required to make the string an alternating one.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$)  — the number of test cases.\n\nThe first line of each test case contains a single number $n$ ($1 \\le n\\le 2\\cdot 10^5$)  — the length of the string.\n\nThe second line of each test case contains a string $s$, consisting of lowercase Latin letters.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the minimum number of operations required to turn the string $s$ into an alternating one.\n\n### Example\n\n#### Input #1\n\n```\n\n10\n\n1\n\na\n\n2\n\nca\n\n3\n\naab\n\n5\n\nababa\n\n6\n\nacdada\n\n9\n\nejibmyyju\n\n6\n\nbbccbc\n\n6\n\nabacba\n\n5\n\nbcbca\n\n5\n\ndcbdb\n\n```\n\n#### Output #1\n\n```\n1\n0\n1\n1\n2\n6\n2\n3\n1\n1\n```\n\n### Note\n\nFor the string ababa, you can delete the first character to get baba, which is an alternating string.\n\nFor the string acdada, you can change the first two characters to get dadada, which is an alternating string.", "cfid": "2008E"}
{"problem_id": "2008D", "problem_title": "D. Sakurako's Hobby", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2008/D", "problem_statement": "For a certain permutation $p$$^{\\\\text{∗}}$ Sakurako calls an integer $j$ reachable from an integer $i$ if it is possible to make $i$ equal to $j$ by assigning $i=p\\_i$ a certain number of times.\n\nIf $p=[3,5,6,1,2,4]$, then, for example, $4$ is reachable from $1$, because: $i=1$ $\\rightarrow$ $i=p_1=3$ $\\rightarrow$ $i=p_3=6$ $\\rightarrow$ $i=p_6=4$. Now $i=4$, so $4$ is reachable from $1$.\n\nEach number in the permutation is colored either black or white.\n\nSakurako defines the function $F(i)$ as the number of black integers that are reachable from $i$.\n\nSakurako is interested in $F(i)$ for each $1\\le i\\le n$, but calculating all values becomes very difficult, so she asks you, as her good friend, to compute this.\n\n$^{\\text{∗}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation (the number $2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$, but the array contains $4$).\n\n### Input\n\nThe first line contains a single integer $t$ ($1\\le t\\le 10^4$)  — the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($1\\le n\\le 2\\cdot 10^5$)  — the number of elements in the array.\n\nThe second line of each test case contains $n$ integers $p_1, p_2, \\dots, p_n$ ($1\\le p_i\\le n$)  — the elements of the permutation.\n\nThe third line of each test case contains a string $s$ of length $n$, consisting of '0' and '1'. If $s_i=0$, then the number $p_i$ is colored black; if $s_i=1$, then the number $p_i$ is colored white.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, output $n$ integers $F(1), F(2), \\dots, F(n)$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n1\n\n1\n\n0\n\n5\n\n1 2 4 5 3\n\n10101\n\n5\n\n5 4 1 3 2\n\n10011\n\n6\n\n3 5 6 1 2 4\n\n010000\n\n6\n\n1 2 3 4 5 6\n\n100110\n\n```\n\n#### Output #1\n\n```\n1\n0 1 1 1 1\n2 2 2 2 2\n4 1 4 4 1 4\n0 1 1 0 0 1\n```", "cfid": "2008D"}
{"problem_id": "2008A", "problem_title": "A. Sakurako's Exam", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2008/A", "problem_statement": "Today, Sakurako has a math exam. The teacher gave the array, consisting of $a$ ones and $b$ twos.\n\nIn an array, Sakurako must place either a '+' or a '-' in front of each element so that the sum of all elements in the array equals $0$.\n\nSakurako is not sure if it is possible to solve this problem, so determine whether there is a way to assign signs such that the sum of all elements in the array equals $0$.\n\n### Input\n\nThe first line contains a single integer $t$ ($1\\le t\\le 100$)  — the number of test cases.\n\nThe only line of each test case contains two integers $a$ and $b$ ($0\\le a,b<10$)  — the number of '1's and the number of '2's in the array.\n\n### Output\n\nFor each test case, output \"Yes\" if you can make the sum of the entire array equal to $0$, and \"No\" otherwise.\n\nYou can output each letter in any case (lowercase or uppercase). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be accepted as a positive answer.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n0 1\n\n0 3\n\n2 0\n\n2 3\n\n3 1\n\n```\n\n#### Output #1\n\n```\nNO\nNO\nYES\nYES\nNO\n```\n\n### Note\n\n1. $a=0$, $b=1$: This means the array is $[2]$ — it is impossible to add the signs '+' or '-' to get $0$ as a result;\n2. $a=0$, $b=3$: This means the array is $[2, 2, 2]$ — it is impossible to add the signs '+' or '-' to get $0$ as a result;\n3. $a=2$, $b=0$: This means the array is $[1, 1]$ — it is possible to add the signs '+' or '-' to get $0$ as a result ($+1-1=0$);\n4. $a=2$, $b=3$: This means the array is $[1, 1, 2, 2, 2]$ — it is possible to add the signs '+' or '-' to get $0$ as a result ($+1+1-2-2+2=0$);", "cfid": "2008A"}
{"problem_id": "2008F", "problem_title": "F. Sakurako's Box", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2008/F", "problem_statement": "Sakurako has a box with $n$ balls. Each ball has it's value. She wants to bet with her friend that if the friend randomly picks two balls from the box (it could be two distinct balls, but they may have the same value), the product of their values will be the same as the number that Sakurako guessed.\n\nSince Sakurako has a PhD in probability, she knows that the best number to pick is [the expected value](http://tiny.cc/matozh_en), but she forgot how to calculate it. Help Sakurako and find the expected value of the product of two elements from the array.\n\nIt can be shown that the expected value has the form $\\frac{P}{Q}$, where $P$ and $Q$ are non-negative integers, and $Q \\ne 0$. Report the value of $P \\cdot Q^{-1}(\\bmod 10^9+7)$.\n\n### Input\n\nThe first line contains a single integer $t$ ($1\\le t\\le 10^4$)  — the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($2\\le n\\le 2\\cdot 10^5$)  — the number of elements in the array.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\dots, a_n$ ($0\\le a_i\\le 10^9$)  — the elements of the array.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, output the value of $P \\cdot Q^{-1}(\\bmod 10^9+7)$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3\n\n3 2 3\n\n4\n\n2 2 2 4\n\n5\n\n1 2 3 4 5\n\n```\n\n#### Output #1\n\n```\n7\n6\n500000012\n```\n\n### Note\n\nFor the first test, Sakurako's friend can pick these pairs of balls: $(a_1,a_2)$, $(a_1,a_3)$, $(a_2,a_3)$. Their products equal to $3\\cdot 2=6$ , $3\\cdot 3=9$ , $3\\cdot 2=6$ respectively, so the expected value is $\\frac{6+9+6}{3}=7$.\n\nFor the second test, Sakurako's friend can pick these pairs of balls: $(a_1,a_2)$, $(a_1,a_3)$, $(a_1,a_4)$, $(a_2,a_3)$, $(a_2,a_4)$, $(a_3,a_4)$. Their products equal to $2\\cdot 2=4$ , $2\\cdot 2=4$ , $2\\cdot 4=8$, $2\\cdot 2=4$, $2\\cdot 4=8$, $2\\cdot 4=8$ respectively, so the expected value is $\\frac{4+4+8+4+8+8}{6}=\\frac{36}{6}=6$.", "cfid": "2008F"}
{"problem_id": "2006B", "problem_title": "B. Iris and the Tree", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2006/B", "problem_statement": "Given a rooted tree with the root at vertex $1$. For any vertex $i$ ($1 < i \\leq n$) in the tree, there is an edge connecting vertices $i$ and $p_i$ ($1 \\leq p_i < i$), with a weight equal to $t_i$.\n\nIris does not know the values of $t_i$, but she knows that $\\displaystyle\\sum_{i=2}^n t_i = w$ and each of the $t_i$ is a non-negative integer.\n\nThe vertices of the tree are numbered in a special way: the numbers of the vertices in each subtree are consecutive integers. In other words, the vertices of the tree are numbered in the order of a depth-first search.\n\n![](https://espresso.codeforces.com/c53597917688d1e86df6f20595426add06443d73.png)The tree in this picture satisfies the condition. For example, in the subtree of vertex $2$, the vertex numbers are $2, 3, 4, 5$, which are consecutive integers.![](https://espresso.codeforces.com/249e1cedae07afe70702d71e906e8399a568757e.png)The tree in this picture does not satisfy the condition, as in the subtree of vertex $2$, the vertex numbers $2$ and $4$ are not consecutive integers.\n\nWe define $\\operatorname{dist}(u, v)$ as the length of the simple path between vertices $u$ and $v$ in the tree.\n\nNext, there will be $n - 1$ events:\n\n- Iris is given integers $x$ and $y$, indicating that $t_x = y$.\n\nAfter each event, Iris wants to know the maximum possible value of $\\operatorname{dist}(i, i \\bmod n + 1)$ independently for each $i$ ($1\\le i\\le n$). She only needs to know the sum of these $n$ values. Please help Iris quickly get the answers.\n\nNote that when calculating the maximum possible values of $\\operatorname{dist}(i, i \\bmod n + 1)$ and $\\operatorname{dist}(j, j \\bmod n + 1)$ for $i \\ne j$, the unknown edge weights may be different.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $w$ ($2 \\le n \\le 2 \\cdot 10^5$, $0 \\leq w \\leq 10^{12}$) — the number of vertices in the tree and the sum of the edge weights.\n\nThe second line of each test case contains $n - 1$ integers $p_2, p_3, \\ldots, p_n$ ($1 \\leq p_i < i$) — the description of the edges of the tree.\n\nThen follow $n-1$ lines indicating the events. Each line contains two integers $x$ and $y$ ($2 \\leq x \\leq n$, $0 \\leq y \\leq w$), indicating that $t_x = y$.\n\nIt is guaranteed that all $x$ in the events are distinct. It is also guaranteed that the sum of all $y$ equals $w$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output one line containing $n-1$ integers, each representing the answer after each event.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2 1000000000000\n\n1\n\n2 1000000000000\n\n4 9\n\n1 1 1\n\n2 2\n\n4 4\n\n3 3\n\n6 100\n\n1 2 3 2 1\n\n6 17\n\n3 32\n\n2 4\n\n4 26\n\n5 21\n\n10 511\n\n1 2 2 4 2 1 1 8 8\n\n3 2\n\n6 16\n\n10 256\n\n9 128\n\n2 1\n\n5 8\n\n8 64\n\n4 4\n\n7 32\n\n```\n\n#### Output #1\n\n```\n2000000000000\n25 18 18\n449 302 247 200 200\n4585 4473 2681 1567 1454 1322 1094 1022 1022\n```\n\n### Note\n\nIn the first test case, $\\operatorname{dist}(1, 2) = \\operatorname{dist}(2, 1) = t_2 = w = 10^{12}$, so $\\operatorname{dist}(1, 2) + \\operatorname{dist}(2, 1) = 2 \\cdot 10^{12}$.\n\nIn the second test case, the tree after Iris found out all $t_x$ is shown below:\n\n![](https://espresso.codeforces.com/8027ae51514357a8dba716cac1a33023d6b13436.png)\n\n$\\operatorname{dist}(1, 2) = t_2$, $\\operatorname{dist}(2, 3) = t_2 + t_3$, $\\operatorname{dist}(3, 4) = t_3 + t_4$, $\\operatorname{dist}(4, 1) = t_4$. After the first event, she found out that $t_2 = 2$, so $\\operatorname{dist}(1, 2) = 2$. At the same time:\n\n- $\\operatorname{dist}(2, 3)$ is maximized if $t_3 = 7$, $t_4 = 0$. Then $\\operatorname{dist}(2, 3) = 9$.\n- $\\operatorname{dist}(3, 4)$ and $\\operatorname{dist}(4, 1)$ are maximized if $t_3 = 0$, $t_4 = 7$. Then $\\operatorname{dist}(3, 4) = \\operatorname{dist}(4, 1) = 7$.\n\nThus, the answer is $2 + 9 + 7 + 7 = 25$.\n\nAfter the second event, she found out that $t_4 = 4$, then $t_3 = w - t_2 - t_4 = 4$. $\\operatorname{dist}(1, 2) = 2$, $\\operatorname{dist}(2, 3) = 2 + 3 = 5$, $\\operatorname{dist}(3, 4) = 3 + 4 = 7$, $\\operatorname{dist}(4, 1) = 4$. Thus, the answer is $2 + 5 + 7 + 4 = 18$.", "cfid": "2006B"}
{"problem_id": "2006A", "problem_title": "A. Iris and Game on the Tree", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2006/A", "problem_statement": "Iris has a tree rooted at vertex $1$. Each vertex has a value of $\\mathtt 0$ or $\\mathtt 1$.\n\nLet's consider a leaf of the tree (the vertex $1$ is never considered a leaf) and define its weight. Construct a string formed by the values of the vertices on the path starting at the root and ending in this leaf. Then the weight of the leaf is the difference between the number of occurrences of $\\mathtt{10}$ and $\\mathtt{01}$ substrings in it.\n\nTake the following tree as an example. Green vertices have a value of $\\mathtt 1$ while white vertices have a value of $\\mathtt 0$.\n\n![](https://espresso.codeforces.com/d9350fda5ff8865950ffe82ce845754501957e88.png)\n\n- Let's calculate the weight of the leaf $5$: the formed string is $\\mathtt{10110}$. The number of occurrences of substring $\\mathtt{10}$ is $2$, the number of occurrences of substring $\\mathtt{01}$ is $1$, so the difference is $2 - 1 = 1$.\n- Let's calculate the weight of the leaf $6$: the formed string is $\\mathtt{101}$. The number of occurrences of substring $\\mathtt{10}$ is $1$, the number of occurrences of substring $\\mathtt{01}$ is $1$, so the difference is $1 - 1 = 0$.\n\nThe score of a tree is defined as the number of leaves with non-zero weight in the tree.\n\nBut the values of some vertices haven't been decided and will be given to you as $\\texttt{?}$. Filling the blanks would be so boring, so Iris is going to invite Dora to play a game. On each turn, one of the girls chooses any of the remaining vertices with value $\\texttt{?}$ and changes its value to $\\mathtt{0}$ or $\\mathtt{1}$, with Iris going first. The game continues until there are no vertices with value $\\mathtt{?}$ left in the tree. Iris aims to maximize the score of the tree, while Dora aims to minimize that.\n\nAssuming that both girls play optimally, please determine the final score of the tree.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\leq t \\leq 5\\cdot 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\leq n \\leq 10^5$) — the number of vertices in the tree.\n\nThe following $n - 1$ lines each contain two integers $u$ and $v$ ($1 \\leq u, v \\leq n$) — denoting an edge between vertices $u$ and $v$.\n\nIt's guaranteed that the given edges form a tree.\n\nThe last line contains a string $s$ of length $n$. The $i$-th character of $s$ represents the value of vertex $i$. It's guaranteed that $s$ only contains characters $\\mathtt{0}$, $\\mathtt{1}$ and $\\mathtt{?}$.\n\nIt is guaranteed that the sum of $n$ over all test cases doesn't exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the final score of the tree.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n4\n\n1 2\n\n1 3\n\n4 1\n\n0101\n\n4\n\n1 2\n\n3 2\n\n2 4\n\n???0\n\n5\n\n1 2\n\n1 3\n\n2 4\n\n2 5\n\n?1?01\n\n6\n\n1 2\n\n2 3\n\n3 4\n\n5 3\n\n3 6\n\n?0????\n\n5\n\n1 2\n\n1 3\n\n1 4\n\n1 5\n\n11?1?\n\n2\n\n2 1\n\n??\n\n```\n\n#### Output #1\n\n```\n2\n1\n1\n2\n1\n0\n```\n\n### Note\n\nIn the first test case, all the values of the vertices have been determined. There are three different paths from the root to a leaf:\n\n- From vertex $1$ to vertex $2$. The string formed by the path is $\\mathtt{01}$, so the weight of the leaf is $0-1=-1$.\n- From vertex $1$ to vertex $3$. The string formed by the path is $\\mathtt{00}$, so the weight of the leaf is $0-0=0$.\n- From vertex $1$ to vertex $4$. The string formed by the path is $\\mathtt{01}$, so the weight of the leaf is $0-1=-1$.\n\nThus, there are two leaves with non-zero weight, so the score of the tree is $2$.\n\nIn the second test case, one of the sequences of optimal choices for the two players can be:\n\n- Iris chooses to change the value of the vertex $3$ to $\\mathtt 1$.\n- Dora chooses to change the value of the vertex $1$ to $\\mathtt 0$.\n- Iris chooses to change the value of the vertex $2$ to $\\mathtt 0$.\n\nThe final tree is as follows:\n\n![](https://espresso.codeforces.com/e0dfb0666ab640a4b73dd23d5176bbf71153cf68.png)\n\nThe only leaf with non-zero weight is $3$, so the score of the tree is $1$. Note that this may not be the only sequence of optimal choices for Iris and Dora.", "cfid": "2006A"}
{"problem_id": "2007C", "problem_title": "C. Dora and C++", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2007/C", "problem_statement": "Dora has just learned the programming language C++!\n\nHowever, she has completely misunderstood the meaning of C++. She considers it as two kinds of adding operations on the array $c$ with $n$ elements. Dora has two integers $a$ and $b$. In one operation, she can choose one of the following things to do.\n\n- Choose an integer $i$ such that $1 \\leq i \\leq n$, and increase $c_i$ by $a$.\n- Choose an integer $i$ such that $1 \\leq i \\leq n$, and increase $c_i$ by $b$.\n\nNote that $a$ and $b$ are constants, and they can be the same.\n\nLet's define a range of array $d$ as $\\max(d_i) - \\min(d_i)$. For instance, the range of the array $[1, 2, 3, 4]$ is $4 - 1 = 3$, the range of the array $[5, 2, 8, 2, 2, 1]$ is $8 - 1 = 7$, and the range of the array $[3, 3, 3]$ is $3 - 3 = 0$.\n\nAfter any number of operations (possibly, $0$), Dora calculates the range of the new array. You need to help Dora minimize this value, but since Dora loves exploring all by herself, you only need to tell her the minimized value.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases. The description of test cases follows.\n\nThe first line of each test case contains three integers $n$, $a$, and $b$ ($1 \\leq n \\leq 10^5$, $1 \\leq a, b \\leq 10^9$) — the length of the array $c$ and the constant values, respectively.\n\nThe second line of each test case contains $n$ integers $c_1, c_2, \\ldots, c_n$ ($1 \\leq c_i \\leq 10^9$) — the initial elements of the array $c$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, output a single integer — the minimum possible range of the array after any number of operations.\n\n### Example\n\n#### Input #1\n\n```\n\n10\n\n4 5 5\n\n1 3 4 4\n\n4 2 3\n\n1 3 4 6\n\n4 7 7\n\n1 1 2 6\n\n3 15 9\n\n1 9 5\n\n3 18 12\n\n1 4 5\n\n7 27 36\n\n33 13 23 12 35 24 41\n\n10 6 9\n\n15 5 6 9 8 2 12 15 3 8\n\n2 1 1000000000\n\n1 1000000000\n\n6 336718728 709848696\n\n552806726 474775724 15129785 371139304 178408298 13106071\n\n6 335734893 671469786\n\n138885253 70095920 456876775 9345665 214704906 375508929\n\n```\n\n#### Output #1\n\n```\n3\n0\n3\n2\n3\n5\n1\n0\n17\n205359241\n```\n\n### Note\n\nIn the first test case, we can increase $c_1 = 1$ by $a = 5$. The array $c$ will become $[6, 3, 4, 4]$, and the range is $3$. Note that there is more than one way to reach the answer.\n\nIn the second test case, we can increase $c_1 = 1$ by $a = 2$ and then increase $c_1 = 3$ by $b = 3$. Also, we can increase $c_2 = 3$ by $b = 3$ and increase $c_3 = 4$ by $a = 2$. The array $c$ will become $[6, 6, 6, 6]$, and the range is $0$.", "cfid": "2007C"}
{"problem_id": "2007B", "problem_title": "B. Index and Maximum Value", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2007/B", "problem_statement": "After receiving yet another integer array $a_1, a_2, \\ldots, a_n$ at her birthday party, Index decides to perform some operations on it.\n\nFormally, there are $m$ operations that she is going to perform in order. Each of them belongs to one of the two types:\n\n- $\\texttt{+ l r}$. Given two integers $l$ and $r$, for all $1 \\leq i \\leq n$ such that $l \\leq a_i \\leq r$, set $a_i := a_i + 1$.\n- $\\texttt{- l r}$. Given two integers $l$ and $r$, for all $1 \\leq i \\leq n$ such that $l \\leq a_i \\leq r$, set $a_i := a_i - 1$.\n\nFor example, if the initial array $a = [7, 1, 3, 4, 3]$, after performing the operation $\\texttt{+} \\space 2 \\space 4$, the array $a = [7, 1, 4, 5, 4]$. Then, after performing the operation $\\texttt{-} \\space 1 \\space 10$, the array $a = [6, 0, 3, 4, 3]$.\n\nIndex is curious about the maximum value in the array $a$. Please help her find it after each of the $m$ operations.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\leq t \\leq 2 \\cdot 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\leq n \\leq 10^5$, $1 \\leq m \\leq 10^5$) — the length of the array and the number of operations.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$) — the initial array $a$.\n\nThen $m$ lines follow, each line corresponds to the operation, in the following format: $\\texttt{c l r}$ ($c \\in \\{\\texttt +, \\texttt -\\}$, $l$ and $r$ are integers, $1 \\leq l \\leq r \\leq 10^9$) — the description of the operation.\n\nNote that the elements $a_i$ may not satisfy $1\\le a_i\\le 10^9$ after some operations, as it is shown in the example.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$, and the sum of $m$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, output one single line containing $m$ integers, with the $i$-th of them describing the maximum value of the array after the $i$-th operation.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n5 5\n\n1 2 3 2 1\n\n\\+ 1 3\n\n\\- 2 3\n\n\\+ 1 2\n\n\\+ 2 4\n\n\\- 6 8\n\n5 5\n\n1 3 3 4 5\n\n\\+ 1 4\n\n\\+ 2 3\n\n\\- 4 5\n\n\\- 3 3\n\n\\- 2 6\n\n5 5\n\n1 1 1 1 1\n\n\\+ 2 3\n\n\\- 4 5\n\n\\+ 1 6\n\n\\- 2 5\n\n\\+ 1 8\n\n1 1\n\n1\n\n\\- 1 1\n\n1 1\n\n1000000000\n\n\\+ 1000000000 1000000000\n\n```\n\n#### Output #1\n\n```\n4 4 4 5 5\n5 5 4 4 3\n1 1 2 1 2\n0\n1000000001\n```\n\n### Note\n\nIn the first test case, the process of the operations is listed below:\n\n- After the first operation, the array becomes equal $[2,3,4,3,2]$. The maximum value is $4$.\n- After the second operation, the array becomes equal $[1,2,4,2,1]$. The maximum value is $4$.\n- After the third operation, the array becomes equal $[2,3,4,3,2]$. The maximum value is $4$.\n- After the fourth operation, the array becomes equal $[3,4,5,4,3]$. The maximum value is $5$.\n- After the fifth operation, the array becomes equal $[3,4,5,4,3]$. The maximum value is $5$.\n\nIn the second test case, the process of the operations is listed below:\n\n- After the first operation, the array becomes equal $[2,4,4,5,5]$. The maximum value is $5$.\n- After the second operation, the array becomes equal $[3,4,4,5,5]$. The maximum value is $5$.\n- After the third operation, the array becomes equal $[3,3,3,4,4]$. The maximum value is $4$.\n- After the fourth operation, the array becomes equal $[2,2,2,4,4]$. The maximum value is $4$.\n- After the fifth operation, the array becomes equal $[1,1,1,3,3]$. The maximum value is $3$.", "cfid": "2007B"}
{"problem_id": "2007A", "problem_title": "A. Dora's Set", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2007/A", "problem_statement": "Dora has a set $s$ containing integers. In the beginning, she will put all integers in $[l, r]$ into the set $s$. That is, an integer $x$ is initially contained in the set if and only if $l \\leq x \\leq r$. Then she allows you to perform the following operations:\n\n- Select three distinct integers $a$, $b$, and $c$ from the set $s$, such that $\\gcd(a, b) = \\gcd(b, c) = \\gcd(a, c) = 1^\\dagger$.\n- Then, remove these three integers from the set $s$.\n\nWhat is the maximum number of operations you can perform?\n\n$^\\dagger$Recall that $\\gcd(x, y)$ means the [greatest common divisor](https://en.wikipedia.org/wiki/Greatest_common_divisor) of integers $x$ and $y$.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\leq t \\leq 500$) — the number of test cases. The description of the test cases follows.\n\nThe only line of each test case contains two integers $l$ and $r$ ($1 \\leq l \\leq r \\leq 1000$) — the range of integers in the initial set.\n\n### Output\n\nFor each test case, output a single integer — the maximum number of operations you can perform.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n1 3\n\n3 7\n\n10 21\n\n2 8\n\n51 60\n\n2 15\n\n10 26\n\n1 1000\n\n```\n\n#### Output #1\n\n```\n1\n1\n3\n1\n2\n3\n4\n250\n```\n\n### Note\n\nIn the first test case, you can choose $a = 1$, $b = 2$, $c = 3$ in the only operation, since $\\gcd(1, 2) = \\gcd(2, 3) = \\gcd(1, 3) = 1$, and then there are no more integers in the set, so no more operations can be performed.\n\nIn the second test case, you can choose $a = 3$, $b = 5$, $c = 7$ in the only operation.\n\nIn the third test case, you can choose $a = 11$, $b = 19$, $c = 20$ in the first operation, $a = 13$, $b = 14$, $c = 15$ in the second operation, and $a = 10$, $b = 17$, $c = 21$ in the third operation. After the three operations, the set $s$ contains the following integers: $12$, $16$, $18$. It can be proven that it's impossible to perform more than $3$ operations.", "cfid": "2007A"}
{"problem_id": "2003C", "problem_title": "C. Turtle and Good Pairs", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2003/C", "problem_statement": "Turtle gives you a string $s$, consisting of lowercase Latin letters.\n\nTurtle considers a pair of integers $(i, j)$ ($1 \\le i < j \\le n$) to be a pleasant pair if and only if there exists an integer $k$ such that $i \\le k < j$ and both of the following two conditions hold:\n\n- $s_k \\ne s_{k + 1}$;\n- $s_k \\ne s_i$ or $s_{k + 1} \\ne s_j$.\n\nBesides, Turtle considers a pair of integers $(i, j)$ ($1 \\le i < j \\le n$) to be a good pair if and only if $s_i = s_j$ or $(i, j)$ is a pleasant pair.\n\nTurtle wants to reorder the string $s$ so that the number of good pairs is maximized. Please help him!\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$) — the length of the string.\n\nThe second line of each test case contains a string $s$ of length $n$, consisting of lowercase Latin letters.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the string $s$ after reordering so that the number of good pairs is maximized. If there are multiple answers, print any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3\n\nabc\n\n5\n\nedddf\n\n6\n\nturtle\n\n8\n\npppppppp\n\n10\n\ncodeforces\n\n```\n\n#### Output #1\n\n```\nacb\nddedf\nurtlet\npppppppp\ncodeforces\n```\n\n### Note\n\nIn the first test case, $(1, 3)$ is a good pair in the reordered string. It can be seen that we can't reorder the string so that the number of good pairs is greater than $1$. bac and cab can also be the answer.\n\nIn the second test case, $(1, 2)$, $(1, 4)$, $(1, 5)$, $(2, 4)$, $(2, 5)$, $(3, 5)$ are good pairs in the reordered string. efddd can also be the answer.", "cfid": "2003C"}
{"problem_id": "2003A", "problem_title": "A. Turtle and Good Strings", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2003/A", "problem_statement": "Turtle thinks a string $s$ is a good string if there exists a sequence of strings $t_1, t_2, \\ldots, t_k$ ($k$ is an arbitrary integer) such that:\n\n- $k \\ge 2$.\n- $s = t_1 + t_2 + \\ldots + t_k$, where $+$ represents the concatenation operation. For example, $\\texttt{abc} = \\texttt{a} + \\texttt{bc}$.\n- For all $1 \\le i < j \\le k$, the first character of $t_i$ isn't equal to the last character of $t_j$.\n\nTurtle is given a string $s$ consisting of lowercase Latin letters. Please tell him whether the string $s$ is a good string!\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 500$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n \\le 100$) — the length of the string.\n\nThe second line of each test case contains a string $s$ of length $n$, consisting of lowercase Latin letters.\n\n### Output\n\nFor each test case, output \"YES\" if the string $s$ is a good string, and \"NO\" otherwise.\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2\n\naa\n\n3\n\naba\n\n4\n\nabcb\n\n12\n\nabcabcabcabc\n\n```\n\n#### Output #1\n\n```\nNo\nnO\nYes\nYES\n```\n\n### Note\n\nIn the first test case, the sequence of strings $\\texttt{a}, \\texttt{a}$ satisfies the condition $s = t_1 + t_2 + \\ldots + t_k$, but the first character of $t_1$ is equal to the last character of $t_2$. It can be seen that there doesn't exist any sequence of strings which satisfies all of the conditions, so the answer is \"NO\".\n\nIn the third test case, the sequence of strings $\\texttt{ab}, \\texttt{cb}$ satisfies all of the conditions.\n\nIn the fourth test case, the sequence of strings $\\texttt{abca}, \\texttt{bcab}, \\texttt{cabc}$ satisfies all of the conditions.", "cfid": "2003A"}
{"problem_id": "2003D1", "problem_title": "D1. Turtle and a MEX Problem (Easy Version)", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2003/D1", "problem_statement": "The two versions are different problems. In this version of the problem, you can choose the same integer twice or more. You can make hacks only if both versions are solved.\n\nOne day, Turtle was playing with $n$ sequences. Let the length of the $i$-th sequence be $l_i$. Then the $i$-th sequence was $a_{i, 1}, a_{i, 2}, \\ldots, a_{i, l_i}$.\n\nPiggy gave Turtle a problem to solve when Turtle was playing. The statement of the problem was:\n\n- There was a non-negative integer $x$ at first. Turtle would perform an arbitrary number (possibly zero) of operations on the integer.\n- In each operation, Turtle could choose an integer $i$ such that $1 \\le i \\le n$, and set $x$ to $\\text{mex}^{\\dagger}(x, a_{i, 1}, a_{i, 2}, \\ldots, a_{i, l_i})$.\n- Turtle was asked to find the answer, which was the maximum value of $x$ after performing an arbitrary number of operations.\n\nTurtle solved the above problem without difficulty. He defined $f(k)$ as the answer to the above problem when the initial value of $x$ was $k$.\n\nThen Piggy gave Turtle a non-negative integer $m$ and asked Turtle to find the value of $\\sum\\limits_{i = 0}^m f(i)$ (i.e., the value of $f(0) + f(1) + \\ldots + f(m)$). Unfortunately, he couldn't solve this problem. Please help him!\n\n$^{\\dagger}\\text{mex}(c_1, c_2, \\ldots, c_k)$ is defined as the smallest non-negative integer $x$ which does not occur in the sequence $c$. For example, $\\text{mex}(2, 2, 0, 3)$ is $1$, $\\text{mex}(1, 2)$ is $0$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n, m$ ($1 \\le n \\le 2 \\cdot 10^5, 0 \\le m \\le 10^9$).\n\nEach of the following $n$ lines contains several integers. The first integer $l_i$ ($1 \\le l_i \\le 2 \\cdot 10^5$) represents the length of the $i$-th sequence, and the following $l_i$ integers $a_{i, 1}, a_{i, 2}, \\ldots, a_{i, l_i}$ ($0 \\le a_{i, j} \\le 10^9$) represent the elements of the $i$-th sequence.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$, and the sum of $\\sum l_i$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the value of $\\sum\\limits_{i = 0}^m f(i)$.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n3 4\n\n2 0 2\n\n3 2 3 3\n\n4 7 0 1 5\n\n3 4\n\n5 0 2 0 4 11\n\n1 1\n\n5 1 3 0 3 3\n\n2 50\n\n2 1 2\n\n2 1 2\n\n1 1\n\n7 1 2 4 1 4 9 5\n\n4 114514\n\n2 2 2\n\n5 7 3 6 0 3\n\n3 0 1 1\n\n5 0 9 2 1 5\n\n5 1919810\n\n1 2\n\n2 324003 0\n\n3 1416324 2 1460728\n\n4 1312631 2 0 1415195\n\n5 1223554 192248 2 1492515 725556\n\n```\n\n#### Output #1\n\n```\n16\n20\n1281\n6\n6556785365\n1842836177961\n```\n\n### Note\n\nIn the first test case, when $x$ is initially $2$, Turtle can choose $i = 3$ and set $x$ to $\\text{mex}(x, a_{3, 1}, a_{3, 2}, a_{3, 3}, a_{3, 4}) = \\text{mex}(2, 7, 0, 1, 5) = 3$. It can be proved that Turtle can't make the value of $x$ greater than $3$, so $f(2) = 3$.\n\nIt can be seen that $f(0) = 3$, $f(1) = 3$, $f(2) = 3$, $f(3) = 3$, and $f(4) = 4$. So $f(0) + f(1) + f(2) + f(3) + f(4) = 3 + 3 + 3 + 3 + 4 = 16$.\n\nIn the second test case, when $x$ is initially $1$, Turtle can choose $i = 3$ and set $x$ to $\\text{mex}(x, a_{3, 1}, a_{3, 2}, a_{3, 3}, a_{3, 4}, a_{3, 5}) = \\text{mex}(1, 1, 3, 0, 3, 3) = 2$, and choose $i = 3$ and set $x$ to $\\text{mex}(x, a_{3, 1}, a_{3, 2}, a_{3, 3}, a_{3, 4}, a_{3, 5}) = \\text{mex}(2, 1, 3, 0, 3, 3) = 4$. It can be proved that Turtle can't make the value of $x$ greater than $4$, so $f(1) = 4$.\n\nIt can be seen that $f(0) = 4$, $f(1) = 4$, $f(2) = 4$, $f(3) = 4$, and $f(4) = 4$. So $f(0) + f(1) + f(2) + f(3) + f(4) = 4 + 4 + 4 + 4 + 4 = 20$.\n\nIn the fourth test case, it can be seen that $f(0) = 3$ and $f(1) = 3$. So $f(0) + f(1) = 3 + 3 = 6$.", "cfid": "2003D1"}
{"problem_id": "2003B", "problem_title": "B. Turtle and Piggy Are Playing a Game 2", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2003/B", "problem_statement": "Turtle and Piggy are playing a game on a sequence. They are given a sequence $a_1, a_2, \\ldots, a_n$, and Turtle goes first. Turtle and Piggy alternate in turns (so, Turtle does the first turn, Piggy does the second, Turtle does the third, etc.).\n\nThe game goes as follows:\n\n- Let the current length of the sequence be $m$. If $m = 1$, the game ends.\n- If the game does not end and it's Turtle's turn, then Turtle must choose an integer $i$ such that $1 \\le i \\le m - 1$, set $a_i$ to $\\max(a_i, a_{i + 1})$, and remove $a_{i + 1}$.\n- If the game does not end and it's Piggy's turn, then Piggy must choose an integer $i$ such that $1 \\le i \\le m - 1$, set $a_i$ to $\\min(a_i, a_{i + 1})$, and remove $a_{i + 1}$.\n\nTurtle wants to maximize the value of $a_1$ in the end, while Piggy wants to minimize the value of $a_1$ in the end. Find the value of $a_1$ in the end if both players play optimally.\n\nYou can refer to notes for further clarification.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n \\le 10^5$) — the length of the sequence.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^5$) — the elements of the sequence $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, output a single integer — the value of $a_1$ in the end if both players play optimally.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n2\n\n1 2\n\n3\n\n1 1 2\n\n3\n\n1 2 3\n\n5\n\n3 1 2 2 3\n\n10\n\n10 2 5 2 7 9 2 5 10 7\n\n```\n\n#### Output #1\n\n```\n2\n1\n2\n2\n7\n```\n\n### Note\n\nIn the first test case, initially $a = [1, 2]$. Turtle can only choose $i = 1$. Then he will set $a_1$ to $\\max(a_1, a_2) = 2$ and remove $a_2$. The sequence $a$ becomes $[2]$. Then the length of the sequence becomes $1$, and the game will end. The value of $a_1$ is $2$, so you should output $2$.\n\nIn the second test case, one of the possible game processes is as follows:\n\n- Initially $a = [1, 1, 2]$.\n- Turtle can choose $i = 2$. Then he will set $a_2$ to $\\max(a_2, a_3) = 2$ and remove $a_3$. The sequence $a$ will become $[1, 2]$.\n- Piggy can choose $i = 1$. Then he will set $a_1$ to $\\min(a_1, a_2) = 1$ and remove $a_2$. The sequence $a$ will become $[1]$.\n- The length of the sequence becomes $1$, so the game will end. The value of $a_1$ will be $1$ in the end.\n\nIn the fourth test case, one of the possible game processes is as follows:\n\n- Initially $a = [3, 1, 2, 2, 3]$.\n- Turtle can choose $i = 4$. Then he will set $a_4$ to $\\max(a_4, a_5) = 3$ and remove $a_5$. The sequence $a$ will become $[3, 1, 2, 3]$.\n- Piggy can choose $i = 3$. Then he will set $a_3$ to $\\min(a_3, a_4) = 2$ and remove $a_4$. The sequence $a$ will become $[3, 1, 2]$.\n- Turtle can choose $i = 2$. Then he will set $a_2$ to $\\max(a_2, a_3) = 2$ and remove $a_3$. The sequence $a$ will become $[3, 2]$.\n- Piggy can choose $i = 1$. Then he will set $a_1$ to $\\min(a_1, a_2) = 2$ and remove $a_2$. The sequence $a$ will become $[2]$.\n- The length of the sequence becomes $1$, so the game will end. The value of $a_1$ will be $2$ in the end.", "cfid": "2003B"}
{"problem_id": "2001B", "problem_title": "B. Generate Permutation", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2001/B", "problem_statement": "There is an integer sequence $a$ of length $n$, where each element is initially $-1$.\n\nMisuki has two typewriters where the first one writes letters from left to right, with a pointer initially pointing to $1$, and another writes letters from right to left with a pointer initially pointing to $n$.\n\nMisuki would choose one of the typewriters and use it to perform the following operations until $a$ becomes a permutation of $[1, 2, \\ldots, n]$\n\n- write number: write the minimum positive integer that isn't present in the array $a$ to the element $a_i$, $i$ is the position where the pointer points at. Such operation can be performed only when $a_i = -1$.\n- carriage return: return the pointer to its initial position (i.e. $1$ for the first typewriter, $n$ for the second)\n- move pointer: move the pointer to the next position, let $i$ be the position the pointer points at before this operation, if Misuki is using the first typewriter, $i := i + 1$ would happen, and $i := i - 1$ otherwise. Such operation can be performed only if after the operation, $1 \\le i \\le n$ holds.\n\nYour task is to construct any permutation $p$ of length $n$, such that the minimum number of carriage return operations needed to make $a = p$ is the same no matter which typewriter Misuki is using.\n\n### Input\n\nEach test contains multiple test cases. The first line of input contains a single integer $t$ ($1 \\le t \\le 500$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) — the length of the permutation.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a line of $n$ integers, representing the permutation $p$ of length $n$ such that the minimum number of carriage return operations needed to make $a = p$ is the same no matter which typewriter Misuki is using, or $-1$ if it is impossible to do so.\n\nIf there are multiple valid permutations, you can output any of them.\n\n### Example\n\n#### Input #1\n\n```\n3\n1\n2\n3\n```\n\n#### Output #1\n\n```\n1\n-1\n3 1 2```\n\n### Note\n\nIn the first testcase, it's possible to make $a = p = [1]$ using $0$ carriage return operations.\n\nIn the second testcase, it is possible to make $a = p = [1, 2]$ with the minimal number of carriage returns as follows:\n\nIf Misuki is using the first typewriter:\n\n- Write number: write $1$ to $a_1$, $a$ becomes $[1, -1]$\n- Move pointer: move the pointer to the next position. (i.e. $2$)\n- Write number: write $2$ to $a_2$, $a$ becomes $[1, 2]$\n\nIf Misuki is using the second typewriter:\n\n- Move pointer: move the pointer to the next position. (i.e. $1$)\n- Write number: write $1$ to $a_1$, $a$ becomes $[1, -1]$\n- Carriage return: return the pointer to $2$.\n- Write number: write $2$ to $a_2$, $a$ becomes $[1, 2]$\n\nIt can be proven that the minimum number of carriage returns needed to transform $a$ into $p$ when using the first typewriter is $0$ and it is $1$ when using the second one, so this permutation is not valid.\n\nSimilarly, $p = [2, 1]$ is also not valid, so there is no solution for $n = 2$.\n\nIn the third testcase, it is possibile to make $a = p = [3, 1, 2]$ with $1$ carriage return with both the first and the second typewriter. It can be proven that, for both typewriters, it is impossible to write $p$ with $0$ carriage returns.\n\nWith the first typewriter it is possible to:\n\n- Move pointer: move the pointer to the next position. (i.e. $2$)\n- Write number: write $1$ to $a_2$, $a$ becomes $[-1, 1, -1]$\n- Move pointer: move the pointer to the next position. (i.e. $3$)\n- Write number: write $2$ to $a_3$, $a$ becomes $[-1, 1, 2]$\n- Carriage return: return the pointer to $1$.\n- Write number: write $3$ to $a_1$, $a$ becomes $[3,1,2]$\n\nWith the second typewriter it is possible to:\n\n- Move pointer: move the pointer to the next position. (i.e. $2$)\n- Write number: write $1$ to $a_2$, $a$ becomes $[-1, 1, -1]$\n- Carriage return: return the pointer to $3$.\n- Write number: write $2$ to $a_3$, $a$ becomes $[-1, 1, 2]$\n- Move pointer: move the pointer to the next position. (i.e. $2$)\n- Move pointer: move the pointer to the next position. (i.e. $1$)\n- Write number: write $3$ to $a_1$, $a$ becomes $[3, 1, 2]$", "cfid": "2001B"}
{"problem_id": "2001A", "problem_title": "A. Make All Equal", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2001/A", "problem_statement": "You are given a cyclic array $a_1, a_2, \\ldots, a_n$.\n\nYou can perform the following operation on $a$ at most $n - 1$ times:\n\n- Let $m$ be the current size of $a$, you can choose any two adjacent elements where the previous one is no greater than the latter one (In particular, $a_m$ and $a_1$ are adjacent and $a_m$ is the previous one), and delete exactly one of them. In other words, choose an integer $i$ ($1 \\leq i \\leq m$) where $a_i \\leq a_{(i \\bmod m) + 1}$ holds, and delete exactly one of $a_i$ or $a_{(i \\bmod m) + 1}$ from $a$.\n\nYour goal is to find the minimum number of operations needed to make all elements in $a$ equal.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 500$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 100$) — the length of the array $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le n$) — the elements of array $a$.\n\n### Output\n\nFor each test case, output a single line containing an integer: the minimum number of operations needed to make all elements in $a$ equal.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n1\n\n1\n\n3\n\n1 2 3\n\n3\n\n1 2 2\n\n5\n\n5 4 3 2 1\n\n6\n\n1 1 2 2 3 3\n\n8\n\n8 7 6 3 8 7 6 3\n\n6\n\n1 1 4 5 1 4\n\n```\n\n#### Output #1\n\n```\n0\n2\n1\n4\n4\n6\n3\n```\n\n### Note\n\nIn the first test case, there is only one element in $a$, so we can't do any operation.\n\nIn the second test case, we can perform the following operations to make all elements in $a$ equal:\n\n- choose $i = 2$, delete $a_3$, then $a$ would become $[1, 2]$.\n- choose $i = 1$, delete $a_1$, then $a$ would become $[2]$.\n\nIt can be proven that we can't make all elements in $a$ equal using fewer than $2$ operations, so the answer is $2$.", "cfid": "2001A"}
{"problem_id": "2001C", "problem_title": "C. Guess The Tree", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2001/C", "problem_statement": "This is an interactive problem.\n\nMisuki has chosen a secret tree with $n$ nodes, indexed from $1$ to $n$, and asked you to guess it by using queries of the following type:\n\n- \"? a b\" — Misuki will tell you which node $x$ minimizes $|d(a,x) - d(b,x)|$, where $d(x,y)$ is the distance between nodes $x$ and $y$. If more than one such node exists, Misuki will tell you the one which minimizes $d(a,x)$.\n\nFind out the structure of Misuki's secret tree using at most $15n$ queries!\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 200$) — the number of test cases.\n\nEach test case consists of a single line with an integer $n$ ($2 \\le n \\le 1000$), the number of nodes in the tree.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $1000$.\n\n### Interaction\n\nThe interaction begins by reading the integer $n$.\n\nThen you can make up to $15n$ queries.\n\nTo make a query, output a line in the format \"? a b\" (without quotes) ($1 \\le a,b \\le n$). After each query, read an integer — the answer to your query.\n\nTo report the answer, output a line in the format \"! $a_1$ $b_1$ $a_2$ $b_2$ ... $a_{n-1}$ $b_{n-1}$\" (without quotes), meaning that there is an edge between nodes $a_i$ and $b_i$, for each $1 \\le i \\le n-1$. You can print the edges in any order.\n\nAfter $15n$ queries have been made, the response to any other query will be $-1$. Once you receive such a response, terminate the program to receive the Wrong Answer verdict.\n\nAfter printing each line, do not forget to output the end of line and flush the output buffer. Otherwise, you will receive the Idleness limit exceeded verdict. To flush, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- flush(output) in Pascal;\n- stdout.flush() in Python;\n- see the documentation for other languages.\n\nHacks\n\nFor hacks, use the following format: The first line contains an integer $t$ ($1 \\le t \\le 200$) — the number of test cases.\n\nThe first line of each test contains an integer $n$ — the number of nodes in the hidden tree.\n\nThen $n-1$ lines follow. The $i$-th of them contains two integers $a_i$ and $b_i$ ($1 \\le a_i, b_i \\le n$), meaning that there is an edge between $a_i$ and $b_i$ in the hidden tree.\n\nThe sum of $n$ over all test cases must not exceed $1000$.\n\n### Example\n\n#### Input #1\n\n```\n1\n4\n1\n1\n3```\n\n#### Output #1\n\n```\n? 1 2\n\n? 1 3\n\n? 1 4\n\n! 1 2 1 3 3 4```\n\n### Note\n\nA tree is an undirected acyclic connected graph. A tree with $n$ nodes will always have $n-1$ edges.\n\nIn the example case, the answer to \"? 1 2\" is $1$. This means that there is an edge between nodes $1$ and $2$.\n\nThe answer to \"? 1 3\" is $1$. This means that there is an edge between nodes $1$ and $3$.\n\nThe answer to \"? 1 4\" is $3$. It can be proven that this can only happen if node $3$ is connected to both node $1$ and $4$.\n\nThe edges of the tree are hence $(1,2)$, $(1,3)$ and $(3,4)$.", "cfid": "2001C"}
{"problem_id": "2004B", "problem_title": "B. Game with Doors", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2004/B", "problem_statement": "There are $100$ rooms arranged in a row and $99$ doors between them; the $i$-th door connects rooms $i$ and $i+1$. Each door can be either locked or unlocked. Initially, all doors are unlocked.\n\nWe say that room $x$ is reachable from room $y$ if all doors between them are unlocked.\n\nYou know that:\n\n- Alice is in some room from the segment $[l, r]$;\n- Bob is in some room from the segment $[L, R]$;\n- Alice and Bob are in different rooms.\n\nHowever, you don't know the exact rooms they are in.\n\nYou don't want Alice and Bob to be able to reach each other, so you are going to lock some doors to prevent that. What's the smallest number of doors you have to lock so that Alice and Bob cannot meet, regardless of their starting positions inside the given segments?\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains two integers $l$ and $r$ ($1 \\le l < r \\le 100$) — the bounds of the segment of rooms where Alice is located.\n\nThe second line of each test case contains two integers $L$ and $R$ ($1 \\le L < R \\le 100$) — the bounds of the segment of rooms where Bob is located.\n\n### Output\n\nFor each test case, print a single integer — the smallest number of doors you have to lock so that Alice and Bob cannot meet, regardless of their starting positions inside the given segments.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n1 2\n\n3 4\n\n2 5\n\n2 5\n\n3 7\n\n6 7\n\n4 5\n\n2 8\n\n```\n\n#### Output #1\n\n```\n1\n3\n2\n3\n```\n\n### Note\n\nIn the first test case, it is sufficient to lock the door between rooms $2$ and $3$.\n\nIn the second test case, the following doors have to be locked: $(2,3)$, $(3,4)$, $(4,5)$.\n\nIn the third test case, the following doors have to be locked: $(5, 6)$ and $(6,7)$.", "cfid": "2004B"}
{"problem_id": "2004A", "problem_title": "A. Closest Point", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2004/A", "problem_statement": "Consider a set of points on a line. The distance between two points $i$ and $j$ is $|i - j|$.\n\nThe point $i$ from the set is the closest to the point $j$ from the set, if there is no other point $k$ in the set such that the distance from $j$ to $k$ is strictly less than the distance from $j$ to $i$. In other words, all other points from the set have distance to $j$ greater or equal to $|i - j|$.\n\nFor example, consider a set of points $\\{1, 3, 5, 8\\}$:\n\n- for the point $1$, the closest point is $3$ (other points have distance greater than $|1-3| = 2$);\n- for the point $3$, there are two closest points: $1$ and $5$;\n- for the point $5$, the closest point is $3$ (but not $8$, since its distance is greater than $|3-5|$);\n- for the point $8$, the closest point is $5$.\n\nYou are given a set of points. You have to add an integer point into this set in such a way that it is different from every existing point in the set, and it becomes the closest point to every point in the set. Is it possible?\n\n### Input\n\nThe first line contains one integer $t$ ($1 \\le t \\le 1000$) — the number of test cases.\n\nEach test case consists of two lines:\n\n- the first line contains one integer $n$ ($2 \\le n \\le 40$) — the number of points in the set;\n- the second line contains $n$ integers $x_1, x_2, \\dots, x_n$ ($1 \\le x_1 < x_2 < \\dots < x_n \\le 100$) — the points from the set.\n\n### Output\n\nFor each test case, print YES if it is possible to add a new point according to the conditions from the statement. Otherwise, print NO.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2\n\n3 8\n\n2\n\n5 6\n\n6\n\n1 2 3 4 5 10\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nNO\n```\n\n### Note\n\nIn the first example, the point $7$ will be the closest to both $3$ and $8$.\n\nIn the second example, it is impossible to add an integer point so that it becomes the closest to both $5$ and $6$, and is different from both of them.", "cfid": "2004A"}
{"problem_id": "2004C", "problem_title": "C. Splitting Items", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2004/C", "problem_statement": "Alice and Bob have $n$ items they'd like to split between them, so they decided to play a game. All items have a cost, and the $i$-th item costs $a_i$. Players move in turns starting from Alice.\n\nIn each turn, the player chooses one of the remaining items and takes it. The game goes on until no items are left.\n\nLet's say that $A$ is the total cost of items taken by Alice and $B$ is the total cost of Bob's items. The resulting score of the game then will be equal to $A - B$.\n\nAlice wants to maximize the score, while Bob wants to minimize it. Both Alice and Bob will play optimally.\n\nBut the game will take place tomorrow, so today Bob can modify the costs a little. He can increase the costs $a_i$ of several (possibly none or all) items by an integer value (possibly, by the same value or by different values for each item). However, the total increase must be less than or equal to $k$. Otherwise, Alice may suspect something. Note that Bob can't decrease costs, only increase.\n\nWhat is the minimum possible score Bob can achieve?\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 5000$) — the number of test cases. Then $t$ cases follow.\n\nThe first line of each test case contains two integers $n$ and $k$ ($2 \\le n \\le 2 \\cdot 10^5$; $0 \\le k \\le 10^9$) — the number of items and the maximum total increase Bob can make.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$) — the initial costs of the items.\n\nIt's guaranteed that the sum of $n$ over all test cases doesn't exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print a single integer — the minimum possible score $A - B$ after Bob increases the costs of several (possibly none or all) items.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2 5\n\n1 10\n\n3 0\n\n10 15 12\n\n4 6\n\n3 1 2 4\n\n2 4\n\n6 9\n\n```\n\n#### Output #1\n\n```\n4\n13\n0\n0\n```\n\n### Note\n\nIn the first test case, Bob can increase $a_1$ by $5$, making costs equal to $[6, 10]$. Tomorrow, Alice will take $10$ and Bob will take $6$. The total score will be equal to $10 - 6 = 4$, and it's the minimum possible.\n\nIn the second test case, Bob can't change costs. So the score will be equal to $(15 + 10) - 12 = 13$, since Alice will take $15$, Bob will take $12$, and Alice — $10$.\n\nIn the third test case, Bob, for example, can increase $a_1$ by $1$, $a_2$ by $3$, and $a_3$ by $2$. The total change is equal to $1 + 3 + 2 \\le 6$ and costs will be equal to $[4, 4, 4, 4]$. Obviously, the score will be equal to $(4 + 4) - (4 + 4) = 0$.\n\nIn the fourth test case, Bob can increase $a_1$ by $3$, making costs equal to $[9, 9]$. The score will be equal to $9 - 9 = 0$.", "cfid": "2004C"}
{"problem_id": "2004D", "problem_title": "D. Colored Portals", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2004/D", "problem_statement": "There are $n$ cities located on a straight line. The cities are numbered from $1$ to $n$.\n\nPortals are used to move between cities. There are $4$ colors of portals: blue, green, red, and yellow. Each city has portals of two different colors. You can move from city $i$ to city $j$ if they have portals of the same color (for example, you can move between a \"blue-red\" city and a \"blue-green\" city). This movement costs $|i-j|$ coins.\n\nYour task is to answer $q$ independent queries: calculate the minimum cost to move from city $x$ to city $y$.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $q$ ($1 \\le n, q \\le 2 \\cdot 10^5$) — the number of cities and the number of queries, respectively.\n\nThe second line contains $n$ strings of the following types: BG, BR, BY, GR, GY, or RY; the $i$-th of them describes the portals located in the $i$-th city; the symbol B indicates that there is a blue portal in the city, G — green, R — red, and Y — yellow.\n\nThe $j$-th of the next $q$ lines contains two integers $x_j$ and $y_j$ ($1 \\le x_j, y_j \\le n$) — the description of the $j$-th query.\n\nAdditional constraints on the input:\n\n- the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$;\n- the sum of $q$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each query, print a single integer — the minimum cost to move from city $x$ to city $y$ (or $-1$ if it is impossible).\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n4 5\n\nBR BR GY GR\n\n1 2\n\n3 1\n\n4 4\n\n1 4\n\n4 2\n\n2 1\n\nBG RY\n\n1 2\n\n```\n\n#### Output #1\n\n```\n1\n4\n0\n3\n2\n-1\n```", "cfid": "2004D"}
{"problem_id": "2000A", "problem_title": "A. Primary Task", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2000/A", "problem_statement": "Dmitry wrote down $t$ integers on the board, and that is good. He is sure that he lost an important integer $n$ among them, and that is bad.\n\nThe integer $n$ had the form $\\text{10^x}$ ($x \\ge 2$), where the symbol '$\\text{^}$' denotes exponentiation.. Something went wrong, and Dmitry missed the symbol '$\\text{^}$' when writing the important integer. For example, instead of the integer $10^5$, he would have written $105$, and instead of $10^{19}$, he would have written $1019$.\n\nDmitry wants to understand which of the integers on the board could have been the important integer and which could not.\n\n### Input\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) — the number of integers on the board.\n\nThe next $t$ lines each contain an integer $a$ ($1 \\le a \\le 10000$) — the next integer from the board.\n\n### Output\n\nFor each integer on the board, output \"YES\" if it could have been the important integer and \"NO\" otherwise.\n\nYou may output each letter in any case (lowercase or uppercase). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be accepted as a positive answer.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n100\n\n1010\n\n101\n\n105\n\n2033\n\n1019\n\n1002\n\n```\n\n#### Output #1\n\n```\nNO\nYES\nNO\nYES\nNO\nYES\nNO\n```", "cfid": "2000A"}
{"problem_id": "2000D", "problem_title": "D. Right Left Wrong", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2000/D", "problem_statement": "Vlad found a strip of $n$ cells, numbered from left to right from $1$ to $n$. In the $i$-th cell, there is a positive integer $a_i$ and a letter $s_i$, where all $s_i$ are either 'L' or 'R'.\n\nVlad invites you to try to score the maximum possible points by performing any (possibly zero) number of operations.\n\nIn one operation, you can choose two indices $l$ and $r$ ($1 \\le l < r \\le n$) such that $s_l$ = 'L' and $s_r$ = 'R' and do the following:\n\n- add $a_l + a_{l + 1} + \\dots + a_{r - 1} + a_r$ points to the current score;\n- replace $s_i$ with '.' for all $l \\le i \\le r$, meaning you can no longer choose these indices.\n\nFor example, consider the following strip:\n\n$3\n\n$$5$$\n\n1\n\n$$4$$\n\n3$$2$LRLLLR\n\nYou can first choose $l = 1$, $r = 2$ and add $3 + 5 = 8$ to your score.\n\n$3\n\n$$5$$\n\n1\n\n$$4$$\n\n3$$2$..LLLR\n\nThen choose $l = 3$, $r = 6$ and add $1 + 4 + 3 + 2 = 10$ to your score.\n\n$3\n\n$$5$$\n\n1\n\n$$4$$\n\n3$$2$......\n\nAs a result, it is impossible to perform another operation, and the final score is $18$.\n\nWhat is the maximum score that can be achieved?\n\n### Input\n\nThe first line contains one integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains one integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$) — the length of the strip.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^5$) — the numbers written on the strip.\n\nThe third line of each test case contains a string $s$ of $n$ characters 'L' and 'R'.\n\nIt is guaranteed that the sum of the values of $n$ across all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output one integer — the maximum possible number of points that can be scored.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n6\n\n3 5 1 4 3 2\n\nLRLLLR\n\n2\n\n2 8\n\nLR\n\n2\n\n3 9\n\nRL\n\n5\n\n1 2 3 4 5\n\nLRLRR\n\n```\n\n#### Output #1\n\n```\n18\n10\n0\n22\n```", "cfid": "2000D"}
{"problem_id": "2000B", "problem_title": "B. Seating in a Bus", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2000/B", "problem_statement": "In Berland, a bus consists of a row of $n$ seats numbered from $1$ to $n$. Passengers are advised to always board the bus following these rules:\n\n- If there are no occupied seats in the bus, a passenger can sit in any free seat;\n- Otherwise, a passenger should sit in any free seat that has at least one occupied neighboring seat. In other words, a passenger can sit in a seat with index $i$ ($1 \\le i \\le n$) only if at least one of the seats with indices $i-1$ or $i+1$ is occupied.\n\nToday, $n$ passengers boarded the bus. The array $a$ chronologically records the seat numbers they occupied. That is, $a_1$ contains the seat number where the first passenger sat, $a_2$ — the seat number where the second passenger sat, and so on.\n\nYou know the contents of the array $a$. Determine whether all passengers followed the recommendations.\n\nFor example, if $n = 5$, and $a$ = \\[$5, 4, 2, 1, 3$\\], then the recommendations were not followed, as the $3$-rd passenger sat in seat number $2$, while the neighboring seats with numbers $1$ and $3$ were free.\n\n### Input\n\nThe first line of input contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe following describes the input test cases.\n\nThe first line of each test case contains exactly one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) — the number of seats in the bus and the number of passengers who boarded the bus.\n\nThe second line of each test case contains $n$ distinct integers $a_i$ ($1 \\le a_i \\le n$) — the seats that the passengers occupied in chronological order.\n\nIt is guaranteed that the sum of $n$ values across all test cases does not exceed $2 \\cdot 10^5$, and that no passenger sits in an already occupied seat.\n\n### Output\n\nFor each test case, output on a separate line:\n\n- \"YES\", if all passengers followed the recommendations;\n- \"NO\" otherwise.\n\nYou may output the answer in any case (for example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as a positive answer).\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n5\n\n5 4 2 1 3\n\n3\n\n2 3 1\n\n4\n\n2 3 1 4\n\n5\n\n1 2 3 5 4\n\n```\n\n#### Output #1\n\n```\nNO\nYES\nYES\nNO```\n\n### Note\n\nThe first test case is explained in the problem statement.", "cfid": "2000B"}
{"problem_id": "2000C", "problem_title": "C. Numeric String Template", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2000/C", "problem_statement": "Kristina has an array $a$, called a template, consisting of $n$ integers. She also has $m$ strings, each consisting only of lowercase Latin letters. The strings are numbered from $1$ to $m$. She wants to check which strings match the template.\n\nA string $s$ is considered to match the template if all of the following conditions are simultaneously satisfied:\n\n- The length of the string $s$ is equal to the number of elements in the array $a$.\n- The same numbers from $a$ correspond to the same symbols from $s$. So, if $a_i = a_j$, then $s_i = s_j$ for ($1 \\le i, j \\le n$).\n- The same symbols from $s$ correspond to the same numbers from $a$. So, if $s_i = s_j$, then $a_i = a_j$ for ($1 \\le i, j \\le n$).\n\nIn other words, there must be a one-to-one correspondence between the characters of the string and the elements of the array.\n\nFor example, if $a$ = \\[$3, 5, 2, 1, 3$\\], then the string \"abfda\" matches the template, while the string \"afbfa\" does not, since the character \"f\" corresponds to both numbers $1$ and $5$.\n\n### Input\n\nThe first line of input contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe following descriptions are for the test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) — the number of elements in the array $a$.\n\nThe second line of each test case contains exactly $n$ integers $a_i$ ($-10^9 \\le a_i \\le 10^9$) — the elements of the array $a$.\n\nThe third line of each test case contains a single integer $m$ ($1 \\le m \\le 2 \\cdot 10^5$) — the number of strings to check for template matching.\n\nFollowing are $m$ strings, each containing a non-empty string $s_j$ ($1 \\le |s_j| \\le 2 \\cdot 10^5$), consisting of lowercase Latin letters.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2 \\cdot 10^5$, and that the sum of the lengths of all strings does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output $m$ lines. On the $i$-th line ($1 \\le i \\le m$) output:\n\n- \"YES\", if the string with index $i$ matches the template;\n- \"NO\" otherwise.\n\nYou may output the answer in any case (for example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as a positive answer).\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n5\n\n3 5 2 1 3\n\n2\n\nabfda\n\nafbfa\n\n2\n\n1 2\n\n3\n\nab\n\nabc\n\naa\n\n4\n\n5 -3 5 -3\n\n4\n\naaaa\n\nbcbc\n\naba\n\ncbcb\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nYES\nNO\nNO\nNO\nYES\nNO\nYES```\n\n### Note\n\nThe first test case is explained in the problem statement.", "cfid": "2000C"}
{"problem_id": "2000E", "problem_title": "E. Photoshoot for Gorillas", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2000/E", "problem_statement": "You really love gorillas, so you decided to organize a photoshoot for them. Gorillas live in the jungle. The jungle is represented as a grid of $n$ rows and $m$ columns. $w$ gorillas agreed to participate in the photoshoot, and the gorilla with index $i$ ($1 \\le i \\le w$) has a height of $a_i$. You want to place all the gorillas in the cells of the grid such that there is no more than one gorilla in each cell.\n\nThe spectacle of the arrangement is equal to the sum of the spectacles of all sub-squares of the grid with a side length of $k$.\n\nThe spectacle of a sub-square is equal to the sum of the heights of the gorillas in it.\n\nFrom all suitable arrangements, choose the arrangement with the maximumspectacle.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10^3$) — the number of test cases.\n\nThe descriptions of the test cases follow.\n\nThe first line contains integers $n$, $m$, $k$ ($1 \\le n, m \\le 2 \\cdot 10^5$, $1 \\le n \\cdot m \\le 2 \\cdot 10^5$, $1 \\le k \\le \\min(n, m)$) — the dimensions of the grid and the side length of the square.\n\nThe second line contains an integer $w$ ($1 \\le w \\le n \\cdot m$) — the number of gorillas.\n\nThe third line contains $w$ integers $a_1, a_2, \\ldots, a_w$ ($1 \\le a_i \\le 10^9$) — the heights of the gorillas.\n\nIt is guaranteed that the sum of $n \\cdot m$ across all test cases does not exceed $2 \\cdot 10^5$. The same guarantee applies to $w$.\n\n### Output\n\nFor each test case, output a single integer — the maximumspectacle of a suitable arrangement.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3 4 2\n\n9\n\n1 1 1 1 1 1 1 1 1\n\n2 1 1\n\n2\n\n5 7\n\n20 15 7\n\n9\n\n4 1 4 5 6 1 1000000000 898 777\n\n1984 1 1\n\n4\n\n5 4 1499 2004\n\n9 5 5\n\n6\n\n6 7 14 16 16 6\n\n```\n\n#### Output #1\n\n```\n21\n12\n49000083104\n3512\n319\n```\n\n### Note\n\nIn the first test case of the first input set, the spectacle of the following sub-squares is summed:\n\n![](https://espresso.codeforces.com/fcecb8349be690c7d5ebb99bd46d5ef17ce8ac3e.png)Yellow color corresponds to the sub-squares, green — to the rest of the grid squares.\n\nThe picture shows the optimal arrangement of the gorillas. The spectacle of the arrangement is $4 + 4 + 3 + 3 + 4 + 3 = 21$.", "cfid": "2000E"}
{"problem_id": "2002C", "problem_title": "C. Black Circles", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2002/C", "problem_statement": "There are $n$ circles on a two-dimensional plane. The $i$-th circle is centered at $(x_i,y_i)$. Initially, all circles have a radius of $0$.\n\nThe circles' radii increase at a rate of $1$ unit per second.\n\nYou are currently at $(x_s,y_s)$; your goal is to reach $(x_t,y_t)$ without touching the circumference of any circle (including the moment you reach $(x_t,y_t)$). You can move in any direction you want. However, your speed is limited to $1$ unit per second.\n\nPlease determine whether this is possible.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1\\le t\\le10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1\\le n\\le10^5$) — the number of circles.\n\nThe next $n$ lines each contain two integers $x_i$, $y_i$ ($1\\le x_i,y_i\\le10^9$) — the center of each circle.\n\nThe final line contains four integers $x_s$, $y_s$, $x_t$, $y_t$ ($1\\le x_s,y_s,x_t,y_t\\le10^9$) — the coordinates of the starting point and the goal, respectively.\n\nIt is guaranteed that these $n+2$ points are distinct.\n\nIt is guaranteed that the sum of $n$ over all testcases does not exceed $10^5$.\n\n### Output\n\nFor each test case, output $\\texttt{YES}$ if it is possible to reach the goal without touching the circle boundaries, and output $\\texttt{NO}$ otherwise.\n\nYou can output $\\texttt{Yes}$ and $\\texttt{No}$ in any case (for example, strings $\\texttt{yEs}$, $\\texttt{yes}$, $\\texttt{Yes}$, and $\\texttt{YES}$ will be recognized as a positive response).\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n3\n\n2 5\n\n2 14\n\n10 13\n\n4 9 9 7\n\n3\n\n10 11\n\n6 9\n\n12 12\n\n14 13 4 8\n\n1\n\n5 7\n\n12 6 11 13\n\n2\n\n1000000000 2\n\n2 1000000000\n\n1 1 2 2\n\n1\n\n999999998 1000000000\n\n999999999 999999999 1 1\n\n1\n\n1000000000 1\n\n1 1000000000 1 1\n\n10\n\n989237121 2397081\n\n206669655 527238537\n\n522705783 380636165\n\n532545346 320061691\n\n207818728 199485303\n\n884520552 315781807\n\n992311437 802563521\n\n205138355 324818663\n\n223575704 395073023\n\n281560523 236279118\n\n216941610 572010615 323956540 794523071\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nYES\nYES\nYES\nNO\nYES\n```\n\n### Note\n\nIn the first test case, a feasible way of movement is as follows.\n\n![](https://espresso.codeforces.com/44e6932b7c975d247fecdc471ff7f6c1fa344b13.png)", "cfid": "2002C"}
{"problem_id": "2002A", "problem_title": "A. Distanced Coloring", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2002/A", "problem_statement": "You received an $n\\times m$ grid from a mysterious source. The source also gave you a magic positive integer constant $k$.\n\nThe source told you to color the grid with some colors, satisfying the following condition:\n\n- If $(x_1,y_1)$, $(x_2,y_2)$ are two distinct cells with the same color, then $\\max(|x_1-x_2|,|y_1-y_2|)\\ge k$.\n\nYou don't like using too many colors. Please find the minimum number of colors needed to color the grid.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1\\le t\\le1000$). The description of the test cases follows.\n\nThe only line of each test case consists of three positive integers $n$, $m$, $k$ ($1\\le n,m,k\\le10^4$) — the dimensions of the grid and the magic constant.\n\n### Output\n\nFor each test case, print a single integer — the minimum number of colors needed to color the grid.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n3 3 2\n\n5 1 10000\n\n7 3 4\n\n3 2 7\n\n8 9 6\n\n2 5 4\n\n```\n\n#### Output #1\n\n```\n4\n5\n12\n6\n36\n8\n```\n\n### Note\n\nIn the first test case, one of the optimal constructions is:\n\n![](https://espresso.codeforces.com/c168a84807ca605cdc35f5a02f92961ad180041e.png)\n\nIn the second test case, the color of all cells must be pairwise different, so the answer is $5$.", "cfid": "2002A"}
{"problem_id": "2002B", "problem_title": "B. Removals Game", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2002/B", "problem_statement": "Alice got a permutation $a_1, a_2, \\ldots, a_n$ of $[1,2,\\ldots,n]$, and Bob got another permutation $b_1, b_2, \\ldots, b_n$ of $[1,2,\\ldots,n]$. They are going to play a game with these arrays.\n\nIn each turn, the following events happen in order:\n\n- Alice chooses either the first or the last element of her array and removes it from the array;\n- Bob chooses either the first or the last element of his array and removes it from the array.\n\nThe game continues for $n-1$ turns, after which both arrays will have exactly one remaining element: $x$ in the array $a$ and $y$ in the array $b$.\n\nIf $x=y$, Bob wins; otherwise, Alice wins. Find which player will win if both players play optimally.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1\\le t\\le10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1\\le n\\le 3\\cdot 10^5$).\n\nThe next line contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($1\\le a_i\\le n$, all $a_i$ are distinct) — the permutation of Alice.\n\nThe next line contains $n$ integers $b_1,b_2,\\ldots,b_n$ ($1\\le b_i\\le n$, all $b_i$ are distinct) — the permutation of Bob.\n\nIt is guaranteed that the sum of all $n$ does not exceed $3\\cdot 10^5$.\n\n### Output\n\nFor each test case, print a single line with the name of the winner, assuming both players play optimally. If Alice wins, print $\\texttt{Alice}$; otherwise, print $\\texttt{Bob}$.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n2\n\n1 2\n\n1 2\n\n3\n\n1 2 3\n\n2 3 1\n\n```\n\n#### Output #1\n\n```\nBob\nAlice\n```\n\n### Note\n\nIn the first test case, Bob can win the game by deleting the same element as Alice did.\n\nIn the second test case, Alice can delete $3$ in the first turn, and then in the second turn, delete the element that is different from the one Bob deleted in the first turn to win the game.", "cfid": "2002B"}
{"problem_id": "1998A", "problem_title": "A. Find K Distinct Points with Fixed Center", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1998/A", "problem_statement": "I couldn't think of a good title for this problem, so I decided to learn from LeetCode.\n\n— Sun Tzu, The Art of War\n\nYou are given three integers $x_c$, $y_c$, and $k$ ($-100 \\leq x_c, y_c \\leq 100$, $1 \\leq k \\leq 1000$).\n\nYou need to find $k$ distinct points ($x_1, y_1$), ($x_2, y_2$), $\\ldots$, ($x_k, y_k$), having integer coordinates, on the 2D coordinate plane such that:\n\n- their center$^{\\text{∗}}$ is ($x_c, y_c$)\n- $-10^9 \\leq x_i, y_i \\leq 10^9$ for all $i$ from $1$ to $k$\n\nIt can be proven that at least one set of $k$ distinct points always exists that satisfies these conditions.\n\n$^{\\text{∗}}$The center of $k$ points ($x_1, y_1$), ($x_2, y_2$), $\\ldots$, ($x_k, y_k$) is $\\left( \\frac{x_1 + x_2 + \\ldots + x_k}{k}, \\frac{y_1 + y_2 + \\ldots + y_k}{k} \\right)$.\n\n### Input\n\nThe first line contains $t$ ($1 \\leq t \\leq 100$) — the number of test cases.\n\nEach test case contains three integers $x_c$, $y_c$, and $k$ ($-100 \\leq x_c, y_c \\leq 100$, $1 \\leq k \\leq 1000$) — the coordinates of the center and the number of distinct points you must output.\n\nIt is guaranteed that the sum of $k$ over all test cases does not exceed $1000$.\n\n### Output\n\nFor each test case, output $k$ lines, the $i$-th line containing two space separated integers, $x_i$ and $y_i$, ($-10^9 \\leq x_i, y_i \\leq 10^9$) — denoting the position of the $i$-th point.\n\nIf there are multiple answers, print any of them. It can be shown that a solution always exists under the given constraints.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n10 10 1\n\n0 0 3\n\n-5 -8 8\n\n4 -5 3\n\n```\n\n#### Output #1\n\n```\n10 10\n-1 -1\n5 -1\n-4 2\n-6 -7\n-5 -7\n-4 -7\n-4 -8\n-4 -9\n-5 -9\n-6 -9\n-6 -8\n1000 -1000\n-996 995\n8 -10```\n\n### Note\n\nFor the first test case, $\\left( \\frac{10}{1}, \\frac{10}{1} \\right) = (10, 10)$.\n\nFor the second test case, $\\left( \\frac{-1 + 5 - 4}{3}, \\frac{-1 -1 + 2}{3} \\right) = (0, 0)$.", "cfid": "1998A"}
{"problem_id": "1998B", "problem_title": "B. Minimize Equal Sum Subarrays", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1998/B", "problem_statement": "It is known that [Farmer John likes Permutations](https://usaco.org/index.php?page=viewproblem2&cpid=1421), but I like them too!\n\n— Sun Tzu, The Art of Constructing Permutations\n\nYou are given a permutation$^{\\text{∗}}$ $p$ of length $n$.\n\nFind a permutation $q$ of length $n$ that minimizes the number of pairs ($i, j$) ($1 \\leq i \\leq j \\leq n$) such that $p_i + p_{i+1} + \\ldots + p_j = q_i + q_{i+1} + \\ldots + q_j$.\n\n$^{\\text{∗}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n### Input\n\nThe first line contains $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe first line of each test case contains $n$ ($1 \\leq n \\leq 2 \\cdot 10^5$).\n\nThe following line contains $n$ space-separated integers $p_1, p_2, \\ldots, p_n$ ($1 \\leq p_i \\leq n$) — denoting the permutation $p$ of length $n$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output one line containing any permutation of length $n$ (the permutation $q$) such that $q$ minimizes the number of pairs.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2\n\n1 2\n\n5\n\n1 2 3 4 5\n\n7\n\n4 7 5 1 2 6 3\n\n```\n\n#### Output #1\n\n```\n2 1\n3 5 4 2 1\n6 2 1 4 7 3 5```\n\n### Note\n\nFor the first test, there exists only one pair ($i, j$) ($1 \\leq i \\leq j \\leq n$) such that $p_i + p_{i+1} + \\ldots + p_j = q_i + q_{i+1} + \\ldots + q_j$, which is ($1, 2$). It can be proven that no such $q$ exists for which there are no pairs.", "cfid": "1998B"}
{"problem_id": "1999E", "problem_title": "E. Triple Operations", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1999/E", "problem_statement": "On the board Ivy wrote down all integers from $l$ to $r$, inclusive.\n\nIn an operation, she does the following:\n\n- pick two numbers $x$ and $y$ on the board, erase them, and in their place write the numbers $3x$ and $\\lfloor \\frac{y}{3} \\rfloor$. (Here $\\lfloor \\bullet \\rfloor$ denotes rounding down to the nearest integer).\n\nWhat is the minimum number of operations Ivy needs to make all numbers on the board equal $0$? We have a proof that this is always possible.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe only line of each test case contains two integers $l$ and $r$ ($1 \\leq l < r \\leq 2 \\cdot 10^5$).\n\n### Output\n\nFor each test case, output a single integer — the minimum number of operations needed to make all numbers on the board equal $0$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n1 3\n\n2 4\n\n199999 200000\n\n19 84\n\n```\n\n#### Output #1\n\n```\n5\n6\n36\n263\n```\n\n### Note\n\nIn the first test case, we can perform $5$ operations as follows: \n\n$$ 1,2,3 \\xrightarrow[x=1,\\,y=2]{} 3,0,3 \\xrightarrow[x=0,\\,y=3]{} 1,0,3 \\xrightarrow[x=0,\\,y=3]{} 1,0,1 \\xrightarrow[x=0,\\,y=1]{} 0,0,1 \\xrightarrow[x=0,\\,y=1]{} 0,0,0 .$$\n\n", "cfid": "1999E"}
{"problem_id": "1999A", "problem_title": "A. A+B Again?", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1999/A", "problem_statement": "Given a two-digit positive integer $n$, find the sum of its digits.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 90$) — the number of test cases.\n\nThe only line of each test case contains a single two-digit positive integer $n$ ($10 \\leq n \\leq 99$).\n\n### Output\n\nFor each test case, output a single integer — the sum of the digits of $n$.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n77\n\n21\n\n40\n\n34\n\n19\n\n84\n\n10\n\n99\n\n```\n\n#### Output #1\n\n```\n14\n3\n4\n7\n10\n12\n1\n18\n```", "cfid": "1999A"}
{"problem_id": "1999C", "problem_title": "C. Showering", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1999/C", "problem_statement": "As a computer science student, Alex faces a hard challenge — showering. He tries to shower daily, but despite his best efforts there are always challenges. He takes $s$ minutes to shower and a day only has $m$ minutes!\n\nHe already has $n$ tasks planned for the day. Task $i$ is represented as an interval $(l_i$, $r_i)$, which means that Alex is busy and can not take a shower in that time interval (at any point in time strictly between $l_i$ and $r_i$). No two tasks overlap.\n\nGiven all $n$ time intervals, will Alex be able to shower that day? In other words, will Alex have a free time interval of length at least $s$?\n\n![](https://espresso.codeforces.com/555dc2bc8c4fc246d7de951a4c88791c8f382b59.png)\n\nIn the first test case, Alex can shower for the first $3$ minutes of the day and not miss any of the tasks.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe first line of each test case contains three integers $n$, $s$, and $m$ ($1 \\leq n \\leq 2 \\cdot 10^5$; $1 \\leq s, m \\leq 10^9$) — the number of time intervals Alex already has planned, the amount of time Alex takes to take a shower, and the amount of minutes a day has.\n\nThen $n$ lines follow, the $i$-th of which contains two integers $l_i$ and $r_i$ ($0 \\leq l_i < r_i \\leq m$) — the time interval of the $i$-th task. No two tasks overlap.\n\nAdditional constraint on the input: $l_i > r_{i-1}$ for every $i > 1$.\n\nThe sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case output \"YES\" (without quotes) if Alex can take a shower for that given test case, and \"NO\" (also without quotes) otherwise.\n\nYou can output \"YES\" and \"NO\" in any case (for example, strings \"yEs\", \"yes\", and \"Yes\" will be recognized as a positive response).\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3 3 10\n\n3 5\n\n6 8\n\n9 10\n\n3 3 10\n\n1 2\n\n3 5\n\n6 7\n\n3 3 10\n\n1 2\n\n3 5\n\n6 8\n\n3 4 10\n\n1 2\n\n6 7\n\n8 9\n\n```\n\n#### Output #1\n\n```\nYES\nYES\nNO\nYES\n```", "cfid": "1999C"}
{"problem_id": "1999B", "problem_title": "B. Card Game", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1999/B", "problem_statement": "Suneet and Slavic play a card game. The rules of the game are as follows:\n\n- Each card has an integer value between $1$ and $10$.\n- Each player receives $2$ cards which are face-down (so a player doesn't know their cards).\n- The game is turn-based and consists exactly of two turns. In a round, both players pick a random unflipped card and flip it. The player who flipped a card with a strictly greater number wins the round. In case of equality, no one wins the round.\n- A player wins a game if he wins the most number of rounds (i.e. strictly greater than the other player). In case of equality, no one wins the game.\n\nSince Suneet and Slavic aren't best friends, you need to calculate the number of ways the game could happen that Suneet would end up as the winner.\n\nFor a better understanding, please check the notes section.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe first and only line of each test case contains $4$ integers $a_1$, $a_2$, $b_1$, $b_2$ ($1 \\leq a_1, a_2, b_1, b_2 \\leq 10$) where $a_1$ and $a_2$ represent the cards Suneet has, and $b_1$ and $b_2$ represent the cards Slavic has, respectively.\n\n### Output\n\nFor each test case, output a single integer — the number of games Suneet would win considering all possible games.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3 8 2 6\n\n1 1 1 1\n\n10 10 2 2\n\n1 1 10 10\n\n3 8 7 2\n\n```\n\n#### Output #1\n\n```\n2\n0\n4\n0\n2\n```\n\n### Note\n\nConsider the first test case when Slavic starts with the cards that have the values $2$ and $6$, and Suneet starts with cards that have the values $3$ and $8$. The game could happen in $4$ different ways:\n\n- Suneet flips $3$ and Slavic flips $2$. Suneet wins the first round. Then, Suneet flips $8$ and Slavic flips $6$. Suneet wins the second round as well. Since Suneet won $2$ rounds, he wins the game.\n\n- Suneet flips $3$ and Slavic flips $6$. Slavic wins the first round. Then, Suneet flips $8$ and Slavic flips $2$. Suneet wins the second round. Nobody wins since both players won an equal amount of rounds.\n\n- Suneet flips $8$ and Slavic flips $6$. Suneet wins the first round. Then, Suneet flips $3$ and Slavic flips $2$. Suneet wins the second round as well. Since Suneet won $2$ rounds, he wins the game.\n\n- Suneet flips $8$ and Slavic flips $2$. Suneet wins the first round. Then, Suneet flips $3$ and Slavic flips $6$. Slavic wins the round. Nobody wins since both players won an equal amount of rounds.", "cfid": "1999B"}
{"problem_id": "1999G2", "problem_title": "G2. Ruler (hard version)", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1999/G2", "problem_statement": "This is the hard version of the problem. The only difference between the two versions is that in this version, you can make at most $\\mathbf{7}$ queries.\n\nThis is an interactive problem. If you are unsure how interactive problems work, then it is recommended to read [the guide for participants](https://codeforces.com/blog/entry/45307).\n\nWe have a secret ruler that is missing one number $x$ ($2 \\leq x \\leq 999$). When you measure an object of length $y$, the ruler reports the following values:\n\n- If $y < x$, the ruler (correctly) measures the object as having length $y$.\n- If $y \\geq x$, the ruler incorrectly measures the object as having length $y+1$.\n\n![](https://espresso.codeforces.com/a98908c8e65eba44622cf7a3ee2ee84099990643.png)\n\nThe ruler above is missing the number $4$, so it correctly measures the first segment as length $3$ but incorrectly measures the second segment as length $6$ even though it is actually $5$.\n\nYou need to find the value of $x$. To do that, you can make queries of the following form:\n\n- $\\texttt{?}~a~b$ — in response, we will measure the side lengths of an $a \\times b$ rectangle with our ruler and multiply the results, reporting the measured area of the rectangle back to you. For example, if $x=4$ and you query a $3 \\times 5$ rectangle, we will measure its side lengths as $3 \\times 6$ and report $18$ back to you.\n\nFind the value of $x$. You can ask at most $\\mathbf{7}$ queries.\n\n### Input\n\nEach test contains multiple test cases. The first line of input contains a single integer $t$ ($1 \\leq t \\leq 1000$) — the number of test cases.\n\n### Interaction\n\nThere is no initial input for each test case. You should begin the interaction by asking a query.\n\nTo make a query, output a single line of the form $\\texttt{?}~a~b$ ($1 \\leq a, b \\leq 1000$). In response, you will be told the measured area of the rectangle, according to our secret ruler.\n\nWhen you are ready to print the answer, output a single line of the form $\\texttt{!}~x$ ($2 \\leq x \\leq 999$). After that, proceed to process the next test case or terminate the program if it was the last test case. Printing the answer does not count as a query.\n\nThe interactor is not adaptive, meaning that the answer is known before the participant asks the queries and doesn't depend on the queries asked by the participant.\n\nIf your program makes more than $7$ queries for one set of input data, makes an invalid query, or prints the wrong value of $x$, then the response to the query will be $-1$. After receiving such a response, your program should immediately terminate to receive the verdict Wrong Answer. Otherwise, you can get an arbitrary verdict because your solution will continue to read from a closed stream.\n\nAfter printing a query do not forget to output the end of line and flush the output. Otherwise, you may get Idleness limit exceeded verdict. To do this, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- flush(output) in Pascal;\n- stdout.flush() in Python;\n- see the documentation for other languages.\n\nHacks\n\nTo make a hack, use the following format.\n\nThe first line should contain a single integer $t$ ($1 \\leq t \\leq 1000$) — the number of test cases.\n\nThe only line of each test case should contain a single integer $x$ ($2 \\leq x \\leq 999$) — the missing number on the ruler.\n\n### Example\n\n#### Input #1\n\n```\n2\n\n18\n\n25\n\n9999```\n\n#### Output #1\n\n```\n? 3 5\n\n? 4 4\n\n! 4\n? 99 100\n\n! 100```\n\n### Note\n\nIn the first test, the interaction proceeds as follows.\n\nSolutionJuryExplanation$\\texttt{2}$There are 2 test cases.$\\texttt{? 3 5}\n\n$$\\texttt{18}$Secretly, the jury picked $x=4$. The solution requests the $3 \\times 5$ rectangle, and the jury responds with $3 \\times 6 = 18$, as described in the statement.$\\texttt{? 4 4}$$\n\ntexttt{25}$The solution requests the $4 \\times 4$ rectangle, which the jury measures as $5 \\times 5$ and responds with $25$.$\\texttt{! 4}$The solution has somehow determined that $x=4$, and outputs it. Since the output is correct, the jury continues to the next test case.$\\texttt{? 99 100}$$\\texttt{1}$Secretly, the jury picked $x=100$. The solution requests the $99 \\times 100$ rectangle, which the jury measures as $99 \\times 101$ and responds with $9999$.$\\texttt{! 100}$The solution has somehow determined that $x=100$, and outputs it. Since the output is correct and there are no more test cases, the jury and the solution exit.\n\nNote that the line breaks in the example input and output are for the sake of clarity, and do not occur in the real interaction.", "cfid": "1999G2"}
{"problem_id": "1999G1", "problem_title": "G1. Ruler (easy version)", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1999/G1", "problem_statement": "This is the easy version of the problem. The only difference between the two versions is that in this version, you can make at most $\\mathbf{10}$ queries.\n\nThis is an interactive problem. If you are unsure how interactive problems work, then it is recommended to read [the guide for participants](https://codeforces.com/blog/entry/45307).\n\nWe have a secret ruler that is missing one number $x$ ($2 \\leq x \\leq 999$). When you measure an object of length $y$, the ruler reports the following values:\n\n- If $y < x$, the ruler (correctly) measures the object as having length $y$.\n- If $y \\geq x$, the ruler incorrectly measures the object as having length $y+1$.\n\n![](https://espresso.codeforces.com/a98908c8e65eba44622cf7a3ee2ee84099990643.png)\n\nThe ruler above is missing the number $4$, so it correctly measures the first segment as length $3$ but incorrectly measures the second segment as length $6$ even though it is actually $5$.\n\nYou need to find the value of $x$. To do that, you can make queries of the following form:\n\n- $\\texttt{?}~a~b$ — in response, we will measure the side lengths of an $a \\times b$ rectangle with our ruler and multiply the results, reporting the measured area of the rectangle back to you. For example, if $x=4$ and you query a $3 \\times 5$ rectangle, we will measure its side lengths as $3 \\times 6$ and report $18$ back to you.\n\nFind the value of $x$. You can ask at most $\\mathbf{10}$ queries.\n\n### Input\n\nEach test contains multiple test cases. The first line of input contains a single integer $t$ ($1 \\leq t \\leq 1000$) — the number of test cases.\n\n### Interaction\n\nThere is no initial input for each test case. You should begin the interaction by asking a query.\n\nTo make a query, output a single line of the form $\\texttt{?}~a~b$ ($1 \\leq a, b \\leq 1000$). In response, you will be told the measured area of the rectangle, according to our secret ruler.\n\nWhen you are ready to print the answer, output a single line of the form $\\texttt{!}~x$ ($2 \\leq x \\leq 999$). After that, proceed to process the next test case or terminate the program if it was the last test case. Printing the answer does not count as a query.\n\nThe interactor is not adaptive, meaning that the answer is known before the participant asks the queries and doesn't depend on the queries asked by the participant.\n\nIf your program makes more than $10$ queries for one set of input data, makes an invalid query, or prints the wrong value of $x$, then the response to the query will be $-1$. After receiving such a response, your program should immediately terminate to receive the verdict Wrong Answer. Otherwise, you can get an arbitrary verdict because your solution will continue to read from a closed stream.\n\nAfter printing a query do not forget to output the end of line and flush the output. Otherwise, you may get Idleness limit exceeded verdict. To do this, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- flush(output) in Pascal;\n- stdout.flush() in Python;\n- see the documentation for other languages.\n\nHacks\n\nTo make a hack, use the following format.\n\nThe first line should contain a single integer $t$ ($1 \\leq t \\leq 1000$) — the number of test cases.\n\nThe only line of each test case should contain a single integer $x$ ($2 \\leq x \\leq 999$) — the missing number on the ruler.\n\n### Example\n\n#### Input #1\n\n```\n2\n\n18\n\n25\n\n9999```\n\n#### Output #1\n\n```\n? 3 5\n\n? 4 4\n\n! 4\n? 99 100\n\n! 100```\n\n### Note\n\nIn the first test, the interaction proceeds as follows.\n\nSolutionJuryExplanation$\\texttt{2}$There are 2 test cases.$\\texttt{? 3 5}\n\n$$\\texttt{18}$Secretly, the jury picked $x=4$. The solution requests the $3 \\times 5$ rectangle, and the jury responds with $3 \\times 6 = 18$, as described in the statement.$\\texttt{? 4 4}$$\n\ntexttt{25}$The solution requests the $4 \\times 4$ rectangle, which the jury measures as $5 \\times 5$ and responds with $25$.$\\texttt{! 4}$The solution has somehow determined that $x=4$, and outputs it. Since the output is correct, the jury continues to the next test case.$\\texttt{? 99 100}$$\\texttt{1}$Secretly, the jury picked $x=100$. The solution requests the $99 \\times 100$ rectangle, which the jury measures as $99 \\times 101$ and responds with $9999$.$\\texttt{! 100}$The solution has somehow determined that $x=100$, and outputs it. Since the output is correct and there are no more test cases, the jury and the solution exit.\n\nNote that the line breaks in the example input and output are for the sake of clarity, and do not occur in the real interaction.", "cfid": "1999G1"}
{"problem_id": "1999F", "problem_title": "F. Expected Median", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1999/F", "problem_statement": "Arul has a binary array$^{\\text{∗}}$ $a$ of length $n$.\n\nHe will take all subsequences$^{\\text{†}}$ of length $k$ ($k$ is odd) of this array and find their median.$^{\\text{‡}}$\n\nWhat is the sum of all these values?\n\nAs this sum can be very large, output it modulo $10^9 + 7$. In other words, print the remainder of this sum when divided by $10^9 + 7$.\n\n$^{\\text{∗}}$A binary array is an array consisting only of zeros and ones.\n\n$^{\\text{†}}$An array $b$ is a subsequence of an array $a$ if $b$ can be obtained from $a$ by the deletion of several (possibly, zero or all) elements. Subsequences don't have to be contiguous.\n\n$^{\\text{‡}}$The median of an array of odd length $k$ is the $\\frac{k+1}{2}$-th element when sorted.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\leq k \\leq n \\leq 2 \\cdot 10^5$, $k$ is odd) — the length of the array and the length of the subsequence, respectively.\n\nThe second line of each test case contains $n$ integers $a_i$ ($0 \\leq a_i \\leq 1$) — the elements of the array.\n\nIt is guaranteed that sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print the sum modulo $10^9 + 7$.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n4 3\n\n1 0 0 1\n\n5 1\n\n1 1 1 1 1\n\n5 5\n\n0 1 0 1 0\n\n6 3\n\n1 0 1 0 1 1\n\n4 3\n\n1 0 1 1\n\n5 3\n\n1 0 1 1 0\n\n2 1\n\n0 0\n\n34 17\n\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n\n```\n\n#### Output #1\n\n```\n2\n5\n0\n16\n4\n7\n0\n333606206\n```\n\n### Note\n\nIn the first test case, there are four subsequences of $[1,0,0,1]$ with length $k=3$:\n\n- $[1,0,0]$: median $= 0$.\n- $[1,0,1]$: median $= 1$.\n- $[1,0,1]$: median $= 1$.\n- $[0,0,1]$: median $= 0$.\n\nThe sum of the results is $0+1+1+0=2$.\n\nIn the second test case, all subsequences of length $1$ have median $1$, so the answer is $5$.", "cfid": "1999F"}
{"problem_id": "1999D", "problem_title": "D. Slavic's Exam", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1999/D", "problem_statement": "Slavic has a very tough exam and needs your help in order to pass it. Here is the question he is struggling with:\n\nThere exists a string $s$, which consists of lowercase English letters and possibly zero or more \"?\".\n\nSlavic is asked to change each \"?\" to a lowercase English letter such that string $t$ becomes a subsequence (not necessarily continuous) of the string $s$.\n\nOutput any such string, or say that it is impossible in case no string that respects the conditions exists.\n\n### Input\n\nThe first line contains a single integer $T$ ($1 \\leq T \\leq 10^4$) — the number of test cases.\n\nThe first line of each test case contains a single string $s$ ($1 \\leq |s| \\leq 2 \\cdot 10^5$, and $s$ consists only of lowercase English letters and \"?\"-s)  – the original string you have.\n\nThe second line of each test case contains a single string $t$ ($1 \\leq |t| \\leq |s|$, and $t$ consists only of lowercase English letters)  – the string that should be a subsequence of string $s$.\n\nThe sum of $|s|$ over all test cases doesn't exceed $2 \\cdot 10^5$, where $|x|$ denotes the length of the string $x$.\n\n### Output\n\nFor each test case, if no such string exists as described in the statement, output \"NO\" (without quotes).\n\nOtherwise, output \"YES\" (without quotes). Then, output one line — the string that respects all conditions.\n\nYou can output \"YES\" and \"NO\" in any case (for example, strings \"yEs\", \"yes\", and \"Yes\" will be recognized as a positive response).\n\nIf multiple answers are possible, you can output any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n?????\n\nxbx\n\nab??e\n\nabcde\n\nayy?x\n\na\n\nab??e\n\ndac\n\npaiu\n\nmom\n\n```\n\n#### Output #1\n\n```\nYES\nxabax\nYES\nabcde\nYES\nayyyx\nNO\nNO\n```", "cfid": "1999D"}
{"problem_id": "1993A", "problem_title": "A. Question Marks", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1993/A", "problem_statement": "Tim is doing a test consisting of $4n$ questions; each question has $4$ options: 'A', 'B', 'C', and 'D'. For each option, there are exactly $n$ correct answers corresponding to that option — meaning there are $n$ questions with the answer 'A', $n$ questions with the answer 'B', $n$ questions with the answer 'C', and $n$ questions with the answer 'D'.\n\nFor each question, Tim wrote his answer on the answer sheet. If he could not figure out the answer, he would leave a question mark '?' for that question.\n\nYou are given his answer sheet of $4n$ characters. What is the maximum number of correct answers Tim can get?\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 1000$) — the number of test cases.\n\nThe first line of each test case contains an integer $n$ ($1 \\le n \\le 100$).\n\nThe second line of each test case contains a string $s$ of $4n$ characters ($s_i \\in \\{\\texttt{A}, \\texttt{B}, \\texttt{C}, \\texttt{D}, \\texttt{?}\\}$) — Tim's answers for the questions.\n\n### Output\n\nFor each test case, print a single integer — the maximum score that Tim can achieve.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n1\n\nABCD\n\n2\n\nAAAAAAAA\n\n2\n\nAAAABBBB\n\n2\n\n????????\n\n3\n\nABCABCABCABC\n\n5\n\nACADC??ACAC?DCAABC?C\n\n```\n\n#### Output #1\n\n```\n4\n2\n4\n0\n9\n13\n```\n\n### Note\n\nIn the first test case, there is exactly one question with each answer 'A', 'B', 'C', and 'D'; so it's possible that Tim gets all his answers correct.\n\nIn the second test case, there are only two correct answers 'A' which makes him get exactly $2$ points in any case.\n\nIn the third test case, Tim can get at most $2$ correct answers with option 'A' and $2$ correct answers with option 'B'. For example, he would get $4$ points if the answers were 'AACCBBDD'.\n\nIn the fourth test case, he refuses to answer any question at all, which makes him get $0$ points.", "cfid": "1993A"}
{"problem_id": "1993B", "problem_title": "B. Parity and Sum", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1993/B", "problem_statement": "Given an array $a$ of $n$ positive integers.\n\nIn one operation, you can pick any pair of indexes $(i, j)$ such that $a_i$ and $a_j$ have distinct parity, then replace the smaller one with the sum of them. More formally:\n\n- If $a_i < a_j$, replace $a_i$ with $a_i + a_j$;\n- Otherwise, replace $a_j$ with $a_i + a_j$.\n\nFind the minimum number of operations needed to make all elements of the array have the same parity.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$).\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$) — the elements of array $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the minimum number of operations required.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n5\n\n1 3 5 7 9\n\n4\n\n4 4 4 4\n\n3\n\n2 3 4\n\n4\n\n3 2 2 8\n\n6\n\n4 3 6 1 2 1\n\n6\n\n3 6 1 2 1 2\n\n5\n\n999999996 999999997 999999998 999999999 1000000000\n\n```\n\n#### Output #1\n\n```\n0\n0\n2\n4\n3\n3\n3\n```\n\n### Note\n\nIn the first test case, all integers already have the same parity. Therefore, no operation is needed.\n\nIn the third test case, we can perform two operations $(1, 2)$ and $(1, 3)$. The array $a$ transforms as follows: $a = [\\color{red}2, \\color{red}3, 4] \\longrightarrow [\\color{red}5, 3, \\color{red}4] \\longrightarrow [5, 3, 9]$.\n\nIn the fourth test case, an example of an optimal sequence of operations is $(1, 2)$, $(1, 3)$, $(1, 4)$, and $(1, 4)$. The array $a$ transforms as follows: $a = [\\color{red}3, \\color{red}2, 2, 8] \\longrightarrow [\\color{red}3, 5, \\color{red}2, 8] \\longrightarrow [\\color{red}3, 5, 5, \\color{red}8] \\longrightarrow [\\color{red}{11}, 5, 5, \\color{red}8] \\longrightarrow [11, 5, 5, 19]$.", "cfid": "1993B"}
{"problem_id": "1993C", "problem_title": "C. Light Switches", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1993/C", "problem_statement": "There is an apartment consisting of $n$ rooms, each with its light initially turned off.\n\nTo control the lights in these rooms, the owner of the apartment decided to install chips in the rooms so that each room has exactly one chip, and the chips are installed at different times. Specifically, these times are represented by the array $a_1, a_2, \\ldots, a_n$, where $a_i$ is the time (in minutes) at which a chip is installed in the $i$-th room.\n\nAs soon as a chip is installed, it changes the room's light status every $k$ minutes — it turns on the light for $k$ minutes, then turns it off for the next $k$ minutes, then turns it back on for the next $k$ minutes, and so on. In other words, the light status is changed by the chip at minute $a_i$, $a_i + k$, $a_i + 2k$, $a_i + 3k$, $\\ldots$ for the $i$-th room.\n\nWhat is the earliest moment when all rooms in the apartment have their lights turned on?\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\le k \\le n \\le 2 \\cdot 10^5$) — the number of rooms in the apartment and the period of the chips.\n\nThe second line contains $n$ distinct integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$) — the moments when the chips are installed.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print a single integer — the answer to the question (in minutes). If there is no such moment that the lights are turned on in all the rooms, print $-1$ instead.\n\n### Example\n\n#### Input #1\n\n```\n\n9\n\n4 4\n\n2 3 4 5\n\n4 3\n\n2 3 4 5\n\n4 3\n\n3 4 8 9\n\n3 3\n\n6 2 1\n\n1 1\n\n1\n\n7 5\n\n14 34 6 25 46 7 17\n\n6 5\n\n40 80 99 60 90 50\n\n6 5\n\n64 40 50 68 70 10\n\n2 1\n\n1 1000000000\n\n```\n\n#### Output #1\n\n```\n5\n-1\n10\n8\n1\n47\n100\n-1\n-1\n```\n\n### Note\n\nIn the first test case, all lights will be on by the minute $5$ without any of them being turned off by the chips. The answer is $5$.\n\nIn the second test case, due to $k=3$, the $1$-st light will be on at minutes $2, 3, 4, 8, 9, 10, 14, \\ldots$; meanwhile, the $4$-th light will be on at minutes $5, 6, 7, 11, 12, 13, 17, \\ldots$. These two sequences don't have any number in common, so they will never be on at the same time.\n\nIn the third test case, it can be seen that the $1$-st and $2$-nd lights will be turned off at minutes $6$ and $7$, but the chips will turn them back on at minutes $9$ and $10$. The $3$-rd and $4$-th lights will also be on at minute $10$, so the answer is $10$.", "cfid": "1993C"}
{"problem_id": "1997C", "problem_title": "C. Even Positions", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1997/C", "problem_statement": "Monocarp had a regular bracket sequence $s$ of length $n$ ($n$ is even). He even came up with his own way to calculate its cost.\n\nHe knows that in a regular bracket sequence (RBS), each opening bracket is paired up with the corresponding closing bracket. So he decided to calculate the cost of RBS as the sum of distances between pairs of corresponding bracket pairs.\n\nFor example, let's look at RBS (())(). It has three pairs of brackets:\n\n- (\\_\\_)\\_\\_: the distance between brackets at position $1$ and at $4$ is $4 - 1 = 3$;\n- \\_()\\_\\_\\_: the distance is $3 - 2 = 1$;\n- \\_\\_\\_\\_(): the distance is $6 - 5 = 1$.\n\nSo the cost of (())() is $3 + 1 + 1 = 5$.\n\nUnfortunately, due to data corruption, Monocarp lost all characters on odd positions $s_1, s_3, \\dots, s_{n-1}$. Only characters on even positions ($s_2, s_4, \\dots, s_{n}$) remain. For example, (())() turned to \\_(\\_)\\_).\n\nMonocarp wants to restore his RBS by placing brackets on the odd positions. But since the restored RBS may not be unique, he wants to choose one with minimum cost. It's too hard to do for Monocarp alone, so can you help him?\n\nReminder: A regular bracket sequence is a string consisting of only brackets, such that this sequence, when inserted 1-s and +-s, gives a valid mathematical expression. For example, (), (()) or (()())() are RBS, while ), ()( or ())(() are not.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 5000$) — the number of test cases. Next $t$ cases follow.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$; $n$ is even) — the length of string $s$.\n\nThe second line of each test case contains a string $s$ of length $n$, where all characters on the odd positions are '\\_' and all characters on the even positions are either '(' or ')'.\n\nAdditional constraints:\n\n- $s$ can be restored to at least one regular bracket sequence;\n- the total sum of $n$ over all test cases doesn't exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print one integer — the minimum cost of the regular bracket sequence that can be obtained from $s$ by replacing '\\_'-s with brackets.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n6\n\n\\_(\\_)\\_)\n\n2\n\n\\_)\n\n8\n\n\\_)\\_)\\_)\\_)\n\n8\n\n\\_(\\_)\\_(\\_)\n\n```\n\n#### Output #1\n\n```\n5\n1\n4\n8\n```\n\n### Note\n\nIn the first test case, it's optimal to make $s$ equal to (())(). The cost of $s$ will be equal to $3 + 1 + 1 = 5$.\n\nIn the second test case, the only option is to make $s$ equal to () with cost $1$.\n\nIn the third test case, the only possible RBS is ()()()() with cost $1 + 1 + 1 + 1 = 4$.\n\nIn the fourth test case, it's optimal to make $s$ equal to (())(()) with cost $3 + 1 + 3 + 1 = 8$.", "cfid": "1997C"}
{"problem_id": "1997D", "problem_title": "D. Maximize the Root", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1997/D", "problem_statement": "You are given a rooted tree, consisting of $n$ vertices. The vertices in the tree are numbered from $1$ to $n$, and the root is the vertex $1$. The value $a_i$ is written at the $i$-th vertex.\n\nYou can perform the following operation any number of times (possibly zero): choose a vertex $v$ which has at least one child; increase $a_v$ by $1$; and decrease $a_u$ by $1$ for all vertices $u$ that are in the subtree of $v$ (except $v$ itself). However, after each operation, the values on all vertices should be non-negative.\n\nYour task is to calculate the maximum possible value written at the root using the aforementioned operation.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$) — the number of vertices in the tree.\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($0 \\le a_i \\le 10^9$) — the initial values written at vertices.\n\nThe third line contains $n-1$ integers $p_2, p_3, \\dots, p_n$ ($1 \\le p_i \\le n$), where $p_i$ is the parent of the $i$-th vertex in the tree. Vertex $1$ is the root.\n\nAdditional constraint on the input: the sum of $n$ over all test cases doesn't exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print a single integer — the maximum possible value written at the root using the aforementioned operation.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n4\n\n0 1 0 2\n\n1 1 3\n\n2\n\n3 0\n\n1\n\n5\n\n2 5 3 9 6\n\n3 1 5 2\n\n```\n\n#### Output #1\n\n```\n1\n3\n6\n```\n\n### Note\n\nIn the first test case, the following sequence of operations is possible:\n\n- perform the operation on $v=3$, then the values on the vertices will be $[0, 1, 1, 1]$;\n- perform the operation on $v=1$, then the values on the vertices will be $[1, 0, 0, 0]$.", "cfid": "1997D"}
{"problem_id": "1997B", "problem_title": "B. Make Three Regions", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1997/B", "problem_statement": "There is a grid, consisting of $2$ rows and $n$ columns. Each cell of the grid is either free or blocked.\n\nA free cell $y$ is reachable from a free cell $x$ if at least one of these conditions holds:\n\n- $x$ and $y$ share a side;\n- there exists a free cell $z$ such that $z$ is reachable from $x$ and $y$ is reachable from $z$.\n\nA connected region is a set of free cells of the grid such that all cells in it are reachable from one another, but adding any other free cell to the set violates this rule.\n\nFor example, consider the following layout, where white cells are free, and dark grey cells are blocked:\n\n![](https://espresso.codeforces.com/aedd15634fe9e1556defb3420dad68714321bc34.png)\n\nThere are $3$ regions in it, denoted with red, green and blue color respectively:\n\n![](https://espresso.codeforces.com/681c37e72094b7fd357b26d25fde1c8e8dee01cb.png)\n\nThe given grid contains at most $1$ connected region. Your task is to calculate the number of free cells meeting the following constraint:\n\n- if this cell is blocked, the number of connected regions becomes exactly $3$.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) — the number of columns.\n\nThe $i$-th of the next two lines contains a description of the $i$-th row of the grid — the string $s_i$, consisting of $n$ characters. Each character is either . (denoting a free cell) or x (denoting a blocked cell).\n\nAdditional constraint on the input:\n\n- the given grid contains at most $1$ connected region;\n- the sum of $n$ over all test cases doesn't exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print a single integer — the number of cells such that the number of connected regions becomes $3$ if this cell is blocked.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n8\n\n.......x\n\n.x.xx...\n\n2\n\n..\n\n..\n\n3\n\nxxx\n\nxxx\n\n9\n\n..x.x.x.x\n\nx.......x\n\n```\n\n#### Output #1\n\n```\n1\n0\n0\n2\n```\n\n### Note\n\nIn the first test case, if the cell $(1, 3)$ is blocked, the number of connected regions becomes $3$ (as shown in the picture from the statement).", "cfid": "1997B"}
{"problem_id": "1997A", "problem_title": "A. Strong Password", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1997/A", "problem_statement": "Monocarp's current password on Codeforces is a string $s$, consisting of lowercase Latin letters. Monocarp thinks that his current password is too weak, so he wants to insert exactly one lowercase Latin letter into the password to make it stronger. Monocarp can choose any letter and insert it anywhere, even before the first character or after the last character.\n\nMonocarp thinks that the password's strength is proportional to the time it takes him to type the password. The time it takes to type the password is calculated as follows:\n\n- the time to type the first character is $2$ seconds;\n- for each character other than the first, the time it takes to type it is $1$ second if it is the same as the previous character, or $2$ seconds otherwise.\n\nFor example, the time it takes to type the password abacaba is $14$; the time it takes to type the password a is $2$; the time it takes to type the password aaabacc is $11$.\n\nYou have to help Monocarp — insert a lowercase Latin letter into his password so that the resulting password takes the maximum possible amount of time to type.\n\n### Input\n\nThe first line contains one integer $t$ ($1 \\le t \\le 1000$) — the number of test cases.\n\nEach test case consists of one line containing the string $s$ ($1 \\le |s| \\le 10$), consisting of lowercase Latin letters.\n\n### Output\n\nFor each test case, print one line containing the new password — a string which can be obtained from $s$ by inserting one lowercase Latin letter. The string you print should have the maximum possible required time to type it. If there are multiple answers, print any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\na\n\naaa\n\nabb\n\npassword\n\n```\n\n#### Output #1\n\n```\nwa\naada\nabcb\npastsword\n```", "cfid": "1997A"}
{"problem_id": "1991C", "problem_title": "C. Absolute Zero", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1991/C", "problem_statement": "You are given an array $a$ of $n$ integers.\n\nIn one operation, you will perform the following two-step move:\n\n1. Choose an integer $x$ ($0 \\le x \\le 10^{9}$).\n2. Replace each $a_i$ with $|a_i - x|$, where $|v|$ denotes the [absolute value](https://en.wikipedia.org/wiki/Absolute_value) of $v$.\n\nFor example, by choosing $x = 8$, the array $[5, 7, 10]$ will be changed into $[|5-8|, |7-8|, |10-8|] = [3,1,2]$.\n\nConstruct a sequence of operations to make all elements of $a$ equal to $0$ in at most $40$ operations or determine that it is impossible. You do not need to minimize the number of operations.\n\n### Input\n\nEach test contains multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. The description of test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) — the length of the array $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le 10^9$) — the elements of the array $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer $-1$ if it is impossible to make all array elements equal to $0$ in at most $40$ operations.\n\nOtherwise, output two lines. The first line of output should contain a single integer $k$ ($0 \\le k \\le 40$) — the number of operations. The second line of output should contain $k$ integers $x_1, x_2, \\ldots, x_k$ ($0 \\le x_i \\le 10^{9}$) — the sequence of operations, denoting that on the $i$-th operation, you chose $x=x_i$.\n\nIf there are multiple solutions, output any of them.\n\nYou do not need to minimize the number of operations.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n1\n\n5\n\n2\n\n0 0\n\n3\n\n4 6 8\n\n4\n\n80 40 20 10\n\n5\n\n1 2 3 4 5\n\n```\n\n#### Output #1\n\n```\n1\n5\n0\n\n3\n6 1 1\n7\n60 40 20 10 30 25 5\n-1```\n\n### Note\n\nIn the first test case, we can perform only one operation by choosing $x = 5$, changing the array from $[5]$ to $[0]$.\n\nIn the second test case, no operations are needed because all elements of the array are already $0$.\n\nIn the third test case, we can choose $x = 6$ to change the array from $[4, 6, 8]$ to $[2, 0, 2]$, then choose $x = 1$ to change it to $[1, 1, 1]$, and finally choose $x = 1$ again to change the array into $[0, 0, 0]$.\n\nIn the fourth test case, we can make all elements $0$ by following the operation sequence $(60, 40, 20, 10, 30, 25, 5)$.\n\nIn the fifth test case, it can be shown that it is impossible to make all elements $0$ in at most $40$ operations. Therefore, the output is $-1$.", "cfid": "1991C"}
{"problem_id": "1991A", "problem_title": "A. Maximize the Last Element", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1991/A", "problem_statement": "You are given an array $a$ of $n$ integers, where $n$ is odd.\n\nIn one operation, you will remove two adjacent elements from the array $a$, and then concatenate the remaining parts of the array. For example, given the array $[4,7,4,2,9]$, we can obtain the arrays $[4,2,9]$ and $[4,7,9]$ by the operations $[\\underline{4,7}, 4,2,9] \\to [4,2,9]$ and $[4,7,\\underline{4,2},9] \\to [4,7,9]$ respectively. However, we cannot obtain the array $[7,2,9]$ as it requires deleting non-adjacent elements $[\\underline{4},7,\\underline{4},2,9]$.\n\nYou will repeatedly perform this operation until exactly one element remains in $a$.\n\nFind the maximum possible value of the remaining element in $a$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 1000$) — the number of test cases. The description of test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 99$; $n$ is odd) — the length of the array $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 100$) — the elements of the array $a$.\n\nNote that there is no bound on the sum of $n$ over all test cases.\n\n### Output\n\nFor each test case, output a single integer — the maximum possible value of the remaining element in $a$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n1\n\n6\n\n3\n\n1 3 2\n\n5\n\n4 7 4 2 9\n\n7\n\n3 1 4 1 5 9 2\n\n```\n\n#### Output #1\n\n```\n6\n2\n9\n5\n```\n\n### Note\n\nIn the first test case, the array $a$ is $[6]$. Since there is only one element, no operations are needed. The maximum possible value of the remaining element is $6$.\n\nIn the second test case, the array $a$ is $[1, 3, 2]$. We can remove the first two elements $[\\underline{1, 3}, 2] \\to [2]$, or remove the last two elements $[1, \\underline{3, 2}] \\to [1]$. Therefore, the maximum possible value of the remaining element is $2$.\n\nIn the third test case, the array $a$ is $[4, 7, 4, 2, 9]$. One way to maximize the remaining element is $[4, \\underline{7, 4}, 2, 9] \\to [\\underline{4, 2}, 9] \\to [9]$. Therefore, the maximum possible value of the remaining element is $9$.\n\nIn the fourth test case, the array $a$ is $[3, 1, 4, 1, 5, 9, 2]$. It can be shown that the maximum possible value of the remaining element is $5$.", "cfid": "1991A"}
{"problem_id": "1991B", "problem_title": "B. AND Reconstruction", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1991/B", "problem_statement": "You are given an array $b$ of $n - 1$ integers.\n\nAn array $a$ of $n$ integers is called good if $b_i = a_i \\, \\& \\, a_{i + 1}$ for $1 \\le i \\le n-1$, where $\\&$ denotes the [bitwise AND operator](https://en.wikipedia.org/wiki/Bitwise_operation#AND).\n\nConstruct a good array, or report that no good arrays exist.\n\n### Input\n\nEach test contains multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. The description of test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n \\le 10^5$) — the length of the array $a$.\n\nThe second line of each test case contains $n - 1$ integers $b_1, b_2, \\ldots, b_{n - 1}$ ($0 \\le b_i < 2^{30}$) — the elements of the array $b$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, output a single integer $-1$ if no good arrays exist.\n\nOtherwise, output $n$ space-separated integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i < 2^{30}$) — the elements of a good array $a$.\n\nIf there are multiple solutions, you may output any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2\n\n1\n\n3\n\n2 0\n\n4\n\n1 2 3\n\n5\n\n3 5 4 2\n\n```\n\n#### Output #1\n\n```\n5 3\n3 2 1\n-1\n3 7 5 6 3\n```\n\n### Note\n\nIn the first test case, $b = [1]$. A possible good array is $a=[5, 3]$, because $a_1 \\, \\& \\, a_2 = 5 \\, \\& \\, 3 = 1 = b_1$.\n\nIn the second test case, $b = [2, 0]$. A possible good array is $a=[3, 2, 1]$, because $a_1 \\, \\& \\, a_2 = 3 \\, \\& \\, 2 = 2 = b_1$ and $a_2 \\, \\& \\, a_3 = 2 \\, \\& \\, 1 = 0 = b_2$.\n\nIn the third test case, $b = [1, 2, 3]$. It can be shown that no good arrays exist, so the output is $-1$.\n\nIn the fourth test case, $b = [3, 5, 4, 2]$. A possible good array is $a=[3, 7, 5, 6, 3]$.", "cfid": "1991B"}
{"problem_id": "1996B", "problem_title": "B. Scale", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1996/B", "problem_statement": "Tina has a square grid with $n$ rows and $n$ columns. Each cell in the grid is either $0$ or $1$.\n\nTina wants to reduce the grid by a factor of $k$ ($k$ is a divisor of $n$). To do this, Tina splits the grid into $k \\times k$ nonoverlapping blocks of cells such that every cell belongs to exactly one block.\n\nTina then replaces each block of cells with a single cell equal to the value of the cells in the block. It is guaranteed that every cell in the same block has the same value.\n\nFor example, the following demonstration shows a grid being reduced by factor of $3$.\n\nOriginal grid$0\n\n$$0$$\n\n0\n\n$$1$$\n\n1\n\n$$1$$\n\n0\n\n$$0$$\n\n0\n\n$$1$$\n\n1\n\n$$1$$\n\n0\n\n$$0$$\n\n0\n\n$$1$$\n\n1\n\n$$1$$\n\n1\n\n$$1$$\n\n1\n\n$$0$$\n\n0\n\n$$0$$\n\n1\n\n$$1$$\n\n1\n\n$$0$$\n\n0\n\n$$0$$\n\n1\n\n$$1$$\n\n1\n\n$$0$$\n\n0\n\n$$0$Reduced grid$0$$\n\n1\n\n$$1$$\n\n0$\n\nHelp Tina reduce the grid by a factor of $k$.\n\n### Input\n\nThe first line contains $t$ ($1 \\leq t \\leq 100$) – the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\leq n \\leq 1000$, $1 \\le k \\le n$, $k$ is a divisor of $n$) — the number of rows and columns of the grid, and the factor that Tina wants to reduce the grid by.\n\nEach of the following $n$ lines contain $n$ characters describing the cells of the grid. Each character is either $0$ or $1$. It is guaranteed every $k$ by $k$ block has the same value.\n\nIt is guaranteed the sum of $n$ over all test cases does not exceed $1000$.\n\n### Output\n\nFor each test case, output the grid reduced by a factor of $k$ on a new line.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n4 4\n\n0000\n\n0000\n\n0000\n\n0000\n\n6 3\n\n000111\n\n000111\n\n000111\n\n111000\n\n111000\n\n111000\n\n6 2\n\n001100\n\n001100\n\n111111\n\n111111\n\n110000\n\n110000\n\n8 1\n\n11111111\n\n11111111\n\n11111111\n\n11111111\n\n11111111\n\n11111111\n\n11111111\n\n11111111\n\n```\n\n#### Output #1\n\n```\n0\n01\n10\n010\n111\n100\n11111111\n11111111\n11111111\n11111111\n11111111\n11111111\n11111111\n11111111\n```", "cfid": "1996B"}
{"problem_id": "1996A", "problem_title": "A. Legs", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1996/A", "problem_statement": "It's another beautiful day on Farmer John's farm.\n\nAfter Farmer John arrived at his farm, he counted $n$ legs. It is known only chickens and cows live on the farm, and a chicken has $2$ legs while a cow has $4$.\n\nWhat is the minimum number of animals Farmer John can have on his farm assuming he counted the legs of all animals?\n\n### Input\n\nThe first line contains single integer $t$ ($1 \\leq t \\leq 10^3$) — the number of test cases.\n\nEach test case contains an integer $n$ ($2 \\leq n \\leq 2 \\cdot 10^3$, $n$ is even).\n\n### Output\n\nFor each test case, output an integer, the minimum number of animals Farmer John can have on his farm.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2\n\n6\n\n8\n\n```\n\n#### Output #1\n\n```\n1\n2\n2\n```", "cfid": "1996A"}
{"problem_id": "1996E", "problem_title": "E. Decode", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1996/E", "problem_statement": "In a desperate attempt to obtain your waifu favorite character, you have hacked into the source code of the game. After days of struggling, you finally find the binary string that encodes the gacha system of the game. In order to decode it, you must first solve the following problem.\n\nYou are given a binary string $s$ of length $n$. For each pair of integers $(l, r)$ $(1 \\leq l \\leq r \\leq n)$, count the number of pairs $(x, y)$ $(l \\leq x \\leq y \\leq r)$ such that the amount of $\\mathtt{0}$ equals the amount of $\\mathtt{1}$ in the substring $s_xs_{x+1}...s_y$.\n\nOutput the sum of counts over all possible $(l, r)$ modulo $10^9+7$.\n\n### Input\n\nThe first line contains $t$ ($1 \\leq t \\leq 1000$) — the number of test cases.\n\nEach test case contains a binary string $s$ ($1 \\leq |s| \\leq 2 \\cdot 10^5$). It is guaranteed $s$ only contains characters $\\mathtt{0}$ and $\\mathtt{1}$.\n\nIt is guaranteed the sum of $|s|$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output an integer, the answer modulo $10^9+7$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n0000\n\n01010101\n\n1100111001\n\n11000000111\n\n```\n\n#### Output #1\n\n```\n0\n130\n147\n70\n```", "cfid": "1996E"}
{"problem_id": "1996C", "problem_title": "C. Sort", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1996/C", "problem_statement": "You are given two strings $a$ and $b$ of length $n$. Then, you are (forced against your will) to answer $q$ queries.\n\nFor each query, you are given a range bounded by $l$ and $r$. In one operation, you can choose an integer $i$ ($l \\leq i \\leq r$) and set $a_i = x$ where $x$ is any character you desire. Output the minimum number of operations you must perform such that $\\texttt{sorted(a[l..r])} = \\texttt{sorted(b[l..r])}$. The operations you perform on one query does not affect other queries.\n\nFor an arbitrary string $c$, $\\texttt{sorted(c[l..r])}$ denotes the substring consisting of characters $c_l, c_{l+1}, ... , c_r$ sorted in lexicographical order.\n\n### Input\n\nThe first line contains $t$ ($1 \\leq t \\leq 1000$) – the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $q$ ($1 \\leq n, q \\leq 2 \\cdot 10^5$) – the length of both strings and the number of queries.\n\nThe following line contains $a$ of length $n$. It is guaranteed $a$ only contains lowercase latin letters.\n\nThe following line contains $b$ of length $n$. It is guaranteed $b$ only contains lowercase latin letters.\n\nThe following $q$ lines contain two integers $l$ and $r$ ($1 \\leq l \\leq r \\leq n$) – the range of the query.\n\nIt is guaranteed the sum of $n$ and $q$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each query, output an integer, the minimum number of operations you need to perform in a new line.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n5 3\n\nabcde\n\nedcba\n\n1 5\n\n1 4\n\n3 3\n\n4 2\n\nzzde\n\nazbe\n\n1 3\n\n1 4\n\n6 3\n\nuwuwuw\n\nwuwuwu\n\n2 4\n\n1 3\n\n1 6\n\n```\n\n#### Output #1\n\n```\n0\n1\n0\n2\n2\n1\n1\n0\n```\n\n### Note\n\nFor the first query, $\\texttt{sorted(a[1..5])} =$ abcde and $\\texttt{sorted(b[1..5])} =$ abcde, so no operations are necessary.\n\nFor the second query, you need to set $a_1 = $ e. Then, $\\texttt{sorted(a[1..4])} = \\texttt{sorted(b[1..4])} = $ bcde.", "cfid": "1996C"}
{"problem_id": "1996D", "problem_title": "D. Fun", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1996/D", "problem_statement": "Counting is Fun!\n\n— satyam343\n\nGiven two integers $n$ and $x$, find the number of triplets ($a,b,c$) of positive integers such that $ab + ac + bc \\le n$ and $a + b + c \\le x$.\n\nNote that order matters (e.g. ($1, 1, 2$) and ($1, 2, 1$) are treated as different) and $a$, $b$, $c$ must be strictly greater than $0$.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\leq t \\leq 10^4$)  — the number of test cases.\n\nEach test case contains two integers $n$ and $x$ ($1 \\leq n,x \\leq 10^6$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^6$ and that the sum of $x$ over all test cases does not exceed $10^6$.\n\n### Output\n\nOutput a single integer — the number of triplets ($a,b,c$) of positive integers such that $ab + ac + bc \\le n$ and $a + b + c \\le x$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n7 4\n\n10 5\n\n7 1000\n\n900000 400000\n\n```\n\n#### Output #1\n\n```\n4\n10\n7\n1768016938\n```\n\n### Note\n\nIn the first test case, the triplets are ($1, 1, 1$), ($1, 1, 2$), ($1, 2, 1$), and ($2, 1, 1$).\n\nIn the second test case, the triplets are ($1, 1, 1$), ($1, 1, 2$), ($1, 1, 3$), ($1, 2, 1$), ($1, 2, 2$), ($1, 3, 1$), ($2, 1, 1$), ($2, 1, 2$), ($2, 2, 1$), and ($3, 1, 1$).", "cfid": "1996D"}
{"problem_id": "1995B2", "problem_title": "B2. Bouquet (Hard Version)", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1995/B2", "problem_statement": "This is the hard version of the problem. The only difference is that in this version, instead of listing the number of petals for each flower, the number of petals and the quantity of flowers in the store is set for all types of flowers.\n\nA girl is preparing for her birthday and wants to buy the most beautiful bouquet. There are a total of $n$ different types of flowers in the store, each of which is characterized by the number of petals and the quantity of this type of flower. A flower with $k$ petals costs $k$ coins. The girl has decided that the difference in the number of petals between any two flowers she will use to decorate her cake should not exceed one. At the same time, the girl wants to assemble a bouquet with the maximum possible number of petals. Unfortunately, she only has $m$ coins, and she cannot spend more. What is the maximum total number of petals she can assemble in the bouquet?\n\n### Input\n\nEach test consists of several test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10\\,000$) — the number of test cases. This is followed by descriptions of the test cases.\n\nThe first line of each test case contains two integers $n$, $m$ ($1 \\le n \\le 2 \\cdot 10^5, 1 \\le m \\le 10^{18}$) — the number of types of flowers in the store and the number of coins the girl possesses, respectively. The second line of each test case contains $n$ different integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$), where $a_i$ is the number of petals of the $i$-th flower type in the store (for different indexes $i \\neq j$, it must be $a_i \\neq a_j$). The third line of each test case contains $n$ integers $c_1, c_2, \\ldots, c_n$ ($1 \\le c_i \\le 10^9$), where $c_i$ is the quantity of the $i$-th flower type in the store.\n\nThe sum of $n$ over all test cases does not exceed $2 \\cdot {10}^5$.\n\n### Output\n\nFor each test case, print one integer — the maximum possible number of petals in a bouquet that a girl can collect, observing all the conditions listed above.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n3 10\n\n1 2 3\n\n2 2 1\n\n3 1033\n\n206 207 1000\n\n3 4 1\n\n6 20\n\n4 2 7 5 6 1\n\n1 2 1 3 1 7\n\n8 100000\n\n239 30 610 122 24 40 8 2\n\n12 13123 112 1456 124 100 123 10982\n\n6 13\n\n2 4 11 1 3 5\n\n2 2 1 2 2 1\n\n8 10330\n\n206 210 200 201 198 199 222 1000\n\n9 10 11 12 13 14 15 16\n\n2 10000000000\n\n11 12\n\n87312315 753297050\n\n```\n\n#### Output #1\n\n```\n7\n1033\n19\n99990\n13\n10000\n9999999999\n```\n\n### Note\n\nIn the first test case, some valid bouquets are $(1, 1, 2, 2), (2, 2, 3), (1, 1), (2, 2)$. The maximum over all valid bouquets not greater than $10$ is $7$ for $(2, 2, 3)$. In the second test case, you can assemble a valid bouquet with $(206, 206, 207, 207, 207)$ with a sum of $1033$, which is the maximum number of petals the girl can buy. In the third test case, you can assemble a valid bouquet with $(5, 5, 5, 4)$ with a sum of $19$. It can be seen that no valid bouquet can have $20$ petals.", "cfid": "1995B2"}
{"problem_id": "1995A", "problem_title": "A. Diagonals", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1995/A", "problem_statement": "Vitaly503 is given a checkered board with a side of $n$ and $k$ chips. He realized that all these $k$ chips need to be placed on the cells of the board (no more than one chip can be placed on a single cell).\n\nLet's denote the cell in the $i$-th row and $j$-th column as $(i ,j)$. A diagonal is the set of cells for which the value $i + j$ is the same. For example, cells $(3, 1)$, $(2, 2)$, and $(1, 3)$ lie on the same diagonal, but $(1, 2)$ and $(2, 3)$ do not. A diagonal is called occupied if it contains at least one chip.\n\nDetermine what is the minimum possible number of occupied diagonals among all placements of $k$ chips.\n\n### Input\n\nEach test consists of several sets of input data. The first line contains a single integer $t$ ($1 \\le t \\le 500$) — the number of sets of input data. Then follow the descriptions of the sets of input data.\n\nThe only line of each set of input data contains two integers $n$, $k$ ($1 \\le n \\le 100, 0 \\le k \\le n^2$) — the side of the checkered board and the number of available chips, respectively.\n\n### Output\n\nFor each set of input data, output a single integer — the minimum number of occupied diagonals with at least one chip that he can get after placing all $k$ chips.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n1 0\n\n2 2\n\n2 3\n\n2 4\n\n10 50\n\n100 239\n\n3 9\n\n```\n\n#### Output #1\n\n```\n0\n1\n2\n3\n6\n3\n5\n```\n\n### Note\n\nIn the first test case, there are no chips, so 0 diagonals will be occupied. In the second test case, both chips can be placed on diagonal $(2, 1), (1, 2)$, so the answer is 1. In the third test case, 3 chips can't be placed on one diagonal, but placing them on $(1, 2), (2, 1), (1, 1)$ makes 2 diagonals occupied. In the 7th test case, chips will occupy all 5 diagonals in any valid placing.", "cfid": "1995A"}
{"problem_id": "1995B1", "problem_title": "B1. Bouquet (Easy Version)", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1995/B1", "problem_statement": "This is the easy version of the problem. The only difference is that in this version, the flowers are specified by enumeration.\n\nA girl is preparing for her birthday and wants to buy the most beautiful bouquet. There are a total of $n$ flowers in the store, each of which is characterized by the number of petals, and a flower with $k$ petals costs $k$ coins. The girl has decided that the difference in the number of petals between any two flowers she will use in her bouquet should not exceed one. At the same time, the girl wants to assemble a bouquet with the maximum possible number of petals. Unfortunately, she only has $m$ coins, and she cannot spend more. What is the maximum total number of petals she can assemble in the bouquet?\n\n### Input\n\nEach test consists of several test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10\\,000$) — the number of test cases. This is followed by descriptions of the test cases.\n\nThe first line of each test case contains two integers $n$, $m$ ($1 \\le n \\le 2 \\cdot 10^5, 1 \\le m \\le 10^{18}$) — the number of flowers in the store and the number of coins the girl possesses, respectively. The second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$), where $a_i$ is the number of petals of the $i$-th flower in the store.\n\nThe sum of $n$ over all test cases does not exceed $2 \\cdot {10}^5$.\n\n### Output\n\nFor each test case, output a single integer — the maximum possible number of petals in the bouquet that the girl can assemble while meeting all the conditions listed above.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n5 10\n\n1 1 2 2 3\n\n8 20\n\n4 2 7 5 6 1 1 1\n\n8 100000\n\n239 30 610 122 24 40 8 2\n\n11 13\n\n2 4 11 1 1 2 3 5 4 3 2\n\n8 1033\n\n206 206 206 207 207 207 207 1000\n\n```\n\n#### Output #1\n\n```\n7\n13\n610\n13\n1033\n```\n\n### Note\n\nIn the first test case, you can assemble a bouquet with $(1, 1, 2, 2), (2, 2, 3), (1, 1), (2, 2)$. The maximum over all valid bouquets not greater than $10$ is $7$ for $(2, 2, 3)$. In the third test case, you can assemble a bouquet with only one flower of any type, so the answer is $610$. In the fourth test case, you can assemble a bouquet with $(4, 4, 5)$, which gives you $13$ petals, and it is the maximum amount of petals that the girl can buy.", "cfid": "1995B1"}
{"problem_id": "1995C", "problem_title": "C. Squaring", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1995/C", "problem_statement": "ikrpprpp found an array $a$ consisting of integers. He likes justice, so he wants to make $a$ fair — that is, make it non-decreasing. To do that, he can perform an act of justice on an index $1 \\le i \\le n$ of the array, which will replace $a_i$ with $a_i ^ 2$ (the element at position $i$ with its square). For example, if $a = [2,4,3,3,5,3]$ and ikrpprpp chooses to perform an act of justice on $i = 4$, $a$ becomes $[2,4,3,9,5,3]$.\n\nWhat is the minimum number of acts of justice needed to make the array non-decreasing?\n\n### Input\n\nFirst line contains an integer $t$ ($1 \\le t \\le 1000$) — the number of test cases. It is followed by the description of test cases.\n\nFor each test case, the first line contains an integer $n$ — size of the array $a$. The second line contains $n$ ($1 \\le n \\le 2 \\cdot 10 ^5$) integers $a_1, a_2,\\ldots, a_n$ ($1 \\le a_i \\le 10 ^ 6$).\n\nThe sum of $n$ over all test cases does not exceed $2 \\cdot {10}^5$.\n\n### Output\n\nFor each testcase, print an integer — minimum number of acts of justice required to make the array $a$ non-decreasing. If it is impossible to do that, print $-1$.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n3\n\n1 2 3\n\n2\n\n3 2\n\n3\n\n3 1 5\n\n4\n\n1 1 2 3\n\n3\n\n4 3 2\n\n9\n\n16 2 4 2 256 2 4 2 8\n\n11\n\n10010 10009 10008 10007 10006 10005 10004 10003 10002 10001 10000\n\n```\n\n#### Output #1\n\n```\n0\n1\n-1\n0\n3\n15\n55\n```\n\n### Note\n\nIn the first test case, there's no need to perform acts of justice. The array is fair on its own!\n\nIn the third test case, it can be proven that the array cannot become non-decreasing.\n\nIn the fifth test case, ikrpprppp can perform an act of justice on index 3, then an act of justice on index 2, and finally yet another act of justice on index 3. After that, $a$ will become $[4, 9, 16]$.", "cfid": "1995C"}
{"problem_id": "1990D", "problem_title": "D. Grid Puzzle", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1990/D", "problem_statement": "You are given an array $a$ of size $n$.\n\nThere is an $n \\times n$ grid. In the $i$-th row, the first $a_i$ cells are black and the other cells are white. In other words, note $(i,j)$ as the cell in the $i$-th row and $j$-th column, cells $(i,1), (i,2), \\ldots, (i,a_i)$ are black, and cells $(i,a_i+1), \\ldots, (i,n)$ are white.\n\nYou can do the following operations any number of times in any order:\n\n- Dye a $2 \\times 2$ subgrid white;\n- Dye a whole row white. Note you can not dye a whole column white.\n\nFind the minimum number of operations to dye all cells white.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nFor each test case:\n\n- The first line contains an integer $n$ ($1 \\leq n \\leq 2 \\cdot 10^5$) — the size of the array $a$.\n- The second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\leq a_i \\leq n$).\n\nIt's guaranteed that the sum of $n$ over all test cases will not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the minimum number of operations to dye all cells white.\n\n### Example\n\n#### Input #1\n\n```\n\n10\n\n1\n\n0\n\n4\n\n2 4 4 2\n\n4\n\n3 2 1 0\n\n3\n\n0 3 0\n\n3\n\n0 1 3\n\n3\n\n3 1 0\n\n4\n\n3 1 0 3\n\n4\n\n0 2 2 2\n\n6\n\n1 3 4 2 0 4\n\n8\n\n2 2 5 2 3 4 2 4\n\n```\n\n#### Output #1\n\n```\n0\n3\n2\n1\n2\n2\n3\n2\n4\n6\n```\n\n### Note\n\nIn the first test case, you don't need to do any operation.\n\nIn the second test case, you can do:\n\n- Dye $(1,1), (1,2), (2,1)$, and $(2,2)$ white;\n- Dye $(2,3), (2,4), (3,3)$, and $(3,4)$ white;\n- Dye $(3,1), (3,2), (4,1)$, and $(4,2)$ white.\n\nIt can be proven $3$ is the minimum number of operations.\n\nIn the third test case, you can do:\n\n- Dye the first row white;\n- Dye $(2,1), (2,2), (3,1)$, and $(3,2)$ white.\n\nIt can be proven $2$ is the minimum number of operations.", "cfid": "1990D"}
{"problem_id": "1990B", "problem_title": "B. Array Craft", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1990/B", "problem_statement": "For an array $b$ of size $m$, we define:\n\n- the maximum prefix position of $b$ is the smallest index $i$ that satisfies $b_1+\\ldots+b_i=\\max_{j=1}^{m}(b_1+\\ldots+b_j)$;\n- the maximum suffix position of $b$ is the largest index $i$ that satisfies $b_i+\\ldots+b_m=\\max_{j=1}^{m}(b_j+\\ldots+b_m)$.\n\nYou are given three integers $n$, $x$, and $y$ ($x > y$). Construct an array $a$ of size $n$ satisfying:\n\n- $a_i$ is either $1$ or $-1$ for all $1 \\le i \\le n$;\n- the maximum prefix position of $a$ is $x$;\n- the maximum suffix position of $a$ is $y$.\n\nIf there are multiple arrays that meet the conditions, print any. It can be proven that such an array always exists under the given conditions.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nFor each test case:\n\n- The only line contains three integers $n$, $x$, and $y$ ($2 \\leq n \\leq 10^5, 1 \\le y \\lt x \\le n)$.\n\nIt is guaranteed that the sum of $n$ over all test cases will not exceed $10^5$.\n\n### Output\n\nFor each test case, output $n$ space-separated integers $a_1, a_2, \\ldots, a_n$ in a new line.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2 2 1\n\n4 4 3\n\n6 5 1\n\n```\n\n#### Output #1\n\n```\n1 1\n1 -1 1 1\n1 1 -1 1 1 -1```\n\n### Note\n\nIn the second test case,\n\n- $i=x=4$ is the smallest index that satisfies $a_1+\\ldots +a_i=\\max_{j=1}^{n}(a_1+\\ldots+a_j)=2$;\n- $i=y=3$ is the greatest index that satisfies $a_i+\\ldots +a_n=\\max_{j=1}^{n}(a_j+\\ldots+a_n)=2$.\n\nThus, the array $a=[1,-1,1,1]$ is considered correct.", "cfid": "1990B"}
{"problem_id": "1990A", "problem_title": "A. Submission Bait", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1990/A", "problem_statement": "Alice and Bob are playing a game in an array $a$ of size $n$.\n\nThey take turns to do operations, with Alice starting first. The player who can not operate will lose. At first, a variable $mx$ is set to $0$.\n\nIn one operation, a player can do:\n\n- Choose an index $i$ ($1 \\le i \\le n$) such that $a_{i} \\geq mx$ and set $mx$ to $a_{i}$. Then, set $a_{i}$ to $0$.\n\nDetermine whether Alice has a winning strategy.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^3$) — the number of test cases.\n\nFor each test case:\n\n- The first line contains an integer $n$ ($2 \\leq n \\leq 50$) — the size of the array.\n- The second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq n$) — the elements of the array.\n\n### Output\n\nFor each test case, if Alice has a winning strategy, output \"YES\". Otherwise, output \"NO\".\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n2\n\n2 1\n\n2\n\n1 1\n\n3\n\n3 3 3\n\n4\n\n3 3 4 4\n\n4\n\n1 2 2 2\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nYES\nNO\nYES\n```\n\n### Note\n\nIn the first test case, Alice can choose $i=1$ since $a_1=2 \\ge mx=0$.\n\nAfter Alice's operation, $a=[0,1]$ and $mx=2$. Bob can not do any operation. Alice wins.\n\nIn the second test case, Alice doesn't have a winning strategy.\n\nFor example, if Alice chooses $i=1$, after Alice's operation: $a=[0,1]$ and $mx=1$. Then, Bob can choose $i=2$ since $a_2=1 \\ge mx=1$. After Bob's operation: $a=[0,0]$ and $mx=1$. Alice can not do any operation. Bob wins.", "cfid": "1990A"}
{"problem_id": "1990C", "problem_title": "C. Mad MAD Sum", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1990/C", "problem_statement": "We define the $\\operatorname{MAD}$ (Maximum Appearing Duplicate) in an array as the largest number that appears at least twice in the array. Specifically, if there is no number that appears at least twice, the $\\operatorname{MAD}$ value is $0$.\n\nFor example, $\\operatorname{MAD}([1, 2, 1]) = 1$, $\\operatorname{MAD}([2, 2, 3, 3]) = 3$, $\\operatorname{MAD}([1, 2, 3, 4]) = 0$.\n\nYou are given an array $a$ of size $n$. Initially, a variable $sum$ is set to $0$.\n\nThe following process will be executed in a sequential loop until all numbers in $a$ become $0$:\n\n1. Set $sum := sum + \\sum_{i=1}^{n} a_i$;\n2. Let $b$ be an array of size $n$. Set $b_i :=\\ \\operatorname{MAD}([a_1, a_2, \\ldots, a_i])$ for all $1 \\le i \\le n$, and then set $a_i := b_i$ for all $1 \\le i \\le n$.\n\nFind the value of $sum$ after the process.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 2 \\cdot 10^4$) — the number of test cases.\n\nFor each test case:\n\n- The first line contains an integer $n$ ($1 \\leq n \\leq 2 \\cdot 10^5$) — the size of the array $a$;\n- The second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq n$) — the elements of the array.\n\nIt is guaranteed that the sum of $n$ over all test cases will not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the value of $sum$ in a new line.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n1\n\n1\n\n3\n\n2 2 3\n\n4\n\n2 1 1 2\n\n4\n\n4 4 4 4\n\n```\n\n#### Output #1\n\n```\n1\n13\n9\n40\n```\n\n### Note\n\nIn the first test case, $a=[1]$ initially.\n\nIn the first loop:\n\n1. Set $sum := sum + a_1 = 0+1=1$;\n2. Set $b_1 :=\\ \\operatorname{MAD}([a_1])=\\ \\operatorname{MAD}([1])=0$, and then set $a_1 := b_1$.\n\nAfter the first loop, $a=[0]$ and the process ends. The value of $sum$ after the process is $1$.\n\nIn the second test case, $a=[2,2,3]$ initially.\n\nAfter the first loop, $a=[0,2,2]$ and $sum=7$.\n\nAfter the second loop, $a=[0,0,2]$ and $sum=11$.\n\nAfter the third loop, $a=[0,0,0]$ and $sum=13$. Then the process ends.\n\nThe value of $sum$ after the process is $13$.", "cfid": "1990C"}
{"problem_id": "1994A", "problem_title": "A. Diverse Game", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1994/A", "problem_statement": "Petr, watching Sergey's stream, came up with a matrix $a$, consisting of $n$ rows and $m$ columns (the number in the $i$-th row and $j$-th column is denoted as $a_{i, j}$), which contains all integers from $1$ to $n \\cdot m$. But he didn't like the arrangement of the numbers, and now he wants to come up with a new matrix $b$, consisting of $n$ rows and $m$ columns, which will also contain all integers from $1$ to $n \\cdot m$, such that for any $1 \\leq i \\leq n, 1 \\leq j \\leq m$ it holds that $a_{i, j} \\ne b_{i, j}$.\n\nYou are given the matrix $a$, construct any matrix $b$ that meets Petr's requirements, or determine that it is impossible.\n\nHurry up! Otherwise, he will donate all his money to the stream in search of an answer to his question.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains an integer $t$ ($1 \\leq t \\leq 10^3$) — the number of test cases. Then follows the description of the test cases.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\leq n, m \\leq 10$) — the number of rows and columns of matrix $a$.\n\nThe next $n$ lines contain $m$ integers each, describing matrix $a$. The $i$-th of these lines contains the elements of matrix $a_{i, 1}, a_{i, 2}, \\ldots, a_{i, m}$.\n\nIt is guaranteed that all numbers in matrix $a$ are distinct and $1 \\leq a_{i, j} \\leq n \\cdot m$.\n\nIt is guaranteed that the sum of $n \\cdot m$ over all test cases does not exceed $5 \\cdot 10^4$.\n\n### Output\n\nFor each test case, output $n \\cdot m$ integers — any suitable matrix $b$, or $-1$ if such a matrix does not exist.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n1 1\n\n1\n\n2 1\n\n2\n\n1\n\n1 5\n\n2 4 5 3 1\n\n2 4\n\n1 2 3 4\n\n5 6 7 8\n\n3 3\n\n4 2 1\n\n9 8 3\n\n6 7 5\n\n```\n\n#### Output #1\n\n```\n-1\n1\n2\n4 5 3 1 2\n6 7 8 5\n2 3 4 1\n8 3 9\n7 5 6\n2 1 4\n```\n\n### Note\n\nIn the first test case, there is only one element in the matrix, so matrix $b$ is the only matrix and it does not fit.\n\nIn the second test case $a_{1, 1} = 2 \\neq 1 = b_{1, 1}$, $a_{2, 1} = 1 \\neq 2 = b_{2, 1}$.", "cfid": "1994A"}
{"problem_id": "1994C", "problem_title": "C. Hungry Games", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1994/C", "problem_statement": "Yaroslav is playing a computer game, and at one of the levels, he encountered $n$ mushrooms arranged in a row. Each mushroom has its own level of toxicity; the $i$-th mushroom from the beginning has a toxicity level of $a_i$. Yaroslav can choose two integers $1 \\le l \\le r \\le n$, and then his character will take turns from left to right to eat mushrooms from this subsegment one by one, i.e., the mushrooms with numbers $l, l+1, l+2, \\ldots, r$.\n\nThe character has a toxicity level $g$, initially equal to $0$. The computer game is defined by the number $x$ — the maximum toxicity level at any given time. When eating a mushroom with toxicity level $k$, the following happens:\n\n1. The toxicity level of the character is increased by $k$.\n2. If $g \\leq x$, the process continues; otherwise, $g$ becomes zero and the process continues.\n\nYaroslav became interested in how many ways there are to choose the values of $l$ and $r$ such that the final value of $g$ is not zero. Help Yaroslav find this number!\n\n### Input\n\nEach test consists of multiple test cases. The first line contains an integer $t$ ($1 \\le t \\le 10^{4}$) — the number of test cases. Then follows the description of the test cases.\n\nThe first line of each test case contains two integers $n$, $x$ ($1 \\leq n \\leq 2 \\cdot 10^5, 1 \\le x \\le 10^9$) — the number of mushrooms and the maximum toxicity level.\n\nThe second line of each test case contains $n$ numbers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single number — the number of subsegments such that the final value of $g$ will not be zero.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n4 2\n\n1 1 1 1\n\n3 2\n\n1 2 3\n\n1 6\n\n10\n\n6 3\n\n1 2 1 4 3 8\n\n5 999999999\n\n999999999 999999998 1000000000 1000000000 500000000\n\n```\n\n#### Output #1\n\n```\n8\n2\n0\n10\n7\n```\n\n### Note\n\nIn the first test case, the subsegments $(1, 1)$, $(1, 2)$, $(1, 4)$, $(2, 2)$, $(2, 3)$, $(3, 3)$, $(3, 4)$ and $(4, 4)$ are suitable.\n\nIn the second test case, non-zero $g$ will remain only on the subsegments $(1, 1)$ and $(2, 2)$.\n\nIn the third test case, on the only possible subsegment, $g$ will be zero.", "cfid": "1994C"}
{"problem_id": "1994B", "problem_title": "B. Fun Game", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1994/B", "problem_statement": "Vova really loves the [XOR](https://en.wikipedia.org/wiki/Bitwise_operation#XOR) operation (denoted as $\\oplus$). Recently, when he was going to sleep, he came up with a fun game.\n\nAt the beginning of the game, Vova chooses two binary sequences $s$ and $t$ of length $n$ and gives them to Vanya. A binary sequence is a sequence consisting only of the numbers $0$ and $1$. Vanya can choose integers $l, r$ such that $1 \\leq l \\leq r \\leq n$, and for all $l \\leq i \\leq r$ simultaneously replace $s_i$ with $s_i \\oplus s_{i - l + 1}$, where $s_i$ is the $i$-th element of the sequence $s$.\n\nIn order for the game to be interesting, there must be a possibility to win. Vanya wins if, with an unlimited number of actions, he can obtain the sequence $t$ from the sequence $s$. Determine if the game will be interesting for the sequences $s$ and $t$.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains an integer $q$ ($1 \\le q \\le 10^{4}$) — the number of test cases. Then follows the description of the test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\leq n \\leq 2 \\cdot 10^5$) — the length of the sequences $s$ and $t$.\n\nThe second line of each test case contains a binary sequence $s$ of length $n$.\n\nThe third line of each test case contains a binary sequence $t$ of length $n$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output \"Yes\" if the game will be interesting, otherwise output \"No\".\n\nYou can output each letter in any case (for example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as a positive answer).\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n1\n\n0\n\n1\n\n7\n\n0110100\n\n0110100\n\n9\n\n100101010\n\n101111110\n\n4\n\n0011\n\n1011\n\n4\n\n0100\n\n0001\n\n8\n\n10110111\n\n01100000\n\n```\n\n#### Output #1\n\n```\nNO\nYES\nYES\nNO\nYES\nYES\n```\n\n### Note\n\nIn the first test case, Vanya will not be able to change the sequence $s$ with the only possible action of choosing $l = r = 1$.\n\nIn the second test case, the sequences $s$ and $t$ are already equal.\n\nIn the third test case, Vanya can act as follows:\n\n1. Choose $l = 3$ and $r = 5$, then $s$ will become $\\mathtt{101101010}$.\n2. Choose $l = 5$ and $r = 6$, then $s$ will become $\\mathtt{101111010}$.\n3. Choose $l = 7$ and $r = 7$, then $s$ will become $\\mathtt{101111110}$.", "cfid": "1994B"}
{"problem_id": "1988B", "problem_title": "B. Make Majority", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1988/B", "problem_statement": "You are given a sequence $[a_1,\\ldots,a_n]$ where each element $a_i$ is either $0$ or $1$. You can apply several (possibly zero) operations to the sequence. In each operation, you select two integers $1\\le l\\le r\\le |a|$ (where $|a|$ is the current length of $a$) and replace $[a_l,\\ldots,a_r]$ with a single element $x$, where $x$ is the majority of $[a_l,\\ldots,a_r]$.\n\nHere, the majority of a sequence consisting of $0$ and $1$ is defined as follows: suppose there are $c_0$ zeros and $c_1$ ones in the sequence, respectively.\n\n- If $c_0\\ge c_1$, the majority is $0$.\n- If $c_0<c_1$, the majority is $1$.\n\nFor example, suppose $a=[1,0,0,0,1,1]$. If we select $l=1,r=2$, the resulting sequence will be $[0,0,0,1,1]$. If we select $l=4,r=6$, the resulting sequence will be $[1,0,0,1]$.\n\nDetermine if you can make $a=[1]$ with a finite number of operations.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 4\\cdot 10^4$). Description of the test cases follows.\n\nThe first line of each testcase contains one integer $n$ ($1\\le n\\le 2\\cdot 10^5$).\n\nThe second line of each testcase contains a string consisting of $0$ and $1$, describing the sequence $a$.\n\nIt's guaranteed that the sum of $n$ over all testcases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each testcase, if it's possible to make $a=[1]$, print YES. Otherwise, print NO. You can output the answer in any case (upper or lower). For example, the strings yEs, yes, Yes, and YES will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n1\n\n0\n\n1\n\n1\n\n2\n\n01\n\n9\n\n100000001\n\n9\n\n000011000\n\n```\n\n#### Output #1\n\n```\nNo\nYes\nNo\nYes\nNo\n```\n\n### Note\n\nIn the fourth testcase of the example, initially $a=[1,0,0,0,0,0,0,0,1]$. A valid sequence of operations is:\n\n1. Select $l=2,r=8$ and apply the operation. $a$ becomes $[1,0,1]$.\n2. Select $l=1,r=3$ and apply the operation. $a$ becomes $[1]$.", "cfid": "1988B"}
{"problem_id": "1988A", "problem_title": "A. Split the Multiset", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1988/A", "problem_statement": "A multiset is a set of numbers in which there can be equal elements, and the order of the numbers does not matter. For example, $\\{2,2,4\\}$ is a multiset.\n\nYou have a multiset $S$. Initially, the multiset contains only one positive integer $n$. That is, $S=\\{n\\}$. Additionally, there is a given positive integer $k$.\n\nIn one operation, you can select any positive integer $u$ in $S$ and remove one copy of $u$ from $S$. Then, insert no more than $k$ positive integers into $S$ so that the sum of all inserted integers is equal to $u$.\n\nFind the minimum number of operations to make $S$ contain $n$ ones.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$). Description of the test cases follows.\n\nThe only line of each testcase contains two integers $n,k$ ($1\\le n\\le 1000,2\\le k\\le 1000$).\n\n### Output\n\nFor each testcase, print one integer, which is the required answer.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n1 5\n\n5 2\n\n6 3\n\n16 4\n\n```\n\n#### Output #1\n\n```\n0\n4\n3\n5\n```\n\n### Note\n\nFor the first test case, initially $S=\\{1\\}$, already satisfying the requirement. Therefore, we need zero operations.\n\nFor the second test case, initially $S=\\{5\\}$. We can apply the following operations:\n\n- Select $u=5$, remove $u$ from $S$, and insert $2,3$ into $S$. Now, $S=\\{2,3\\}$.\n- Select $u=2$, remove $u$ from $S$, and insert $1,1$ into $S$. Now, $S=\\{1,1,3\\}$.\n- Select $u=3$, remove $u$ from $S$, and insert $1,2$ into $S$. Now, $S=\\{1,1,1,2\\}$.\n- Select $u=2$, remove $u$ from $S$, and insert $1,1$ into $S$. Now, $S=\\{1,1,1,1,1\\}$.\n\nUsing $4$ operations in total, we achieve the goal.\n\nFor the third test case, initially $S=\\{6\\}$. We can apply the following operations:\n\n- Select $u=6$, remove $u$ from $S$, and insert $1,2,3$ into $S$. Now, $S=\\{1,2,3\\}$.\n- Select $u=2$, remove $u$ from $S$, and insert $1,1$ into $S$. Now, $S=\\{1,1,1,3\\}$.\n- Select $u=3$, remove $u$ from $S$, and insert $1,1,1$ into $S$. Now, $S=\\{1,1,1,1,1,1\\}$.\n\nUsing $3$ operations in total, we achieve the goal.\n\nFor the fourth test case, initially $S=\\{16\\}$. We can apply the following operations:\n\n- Select $u=16$, remove $u$ from $S$, and insert $4,4,4,4$ into $S$. Now, $S=\\{4,4,4,4\\}$.\n- Repeat for $4$ times: select $u=4$, remove $u$ from $S$, and insert $1,1,1,1$ into $S$.\n\nUsing $5$ operations in total, we achieve the goal.", "cfid": "1988A"}
{"problem_id": "1988C", "problem_title": "C. Increasing Sequence with Fixed OR", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1988/C", "problem_statement": "You are given a positive integer $n$. Find the longest sequence of positive integers $a=[a_1,a_2,\\ldots,a_k]$ that satisfies the following conditions, and print the sequence:\n\n- $a_i\\le n$ for all $1\\le i\\le k$.\n- $a$ is strictly increasing. That is, $a_i>a_{i-1}$ for all $2\\le i\\le k$.\n- $a_i\\,|\\,a_{i-1}=n$ for all $2\\le i\\le k$, where $|$ denotes the [bitwise OR operation](https://en.wikipedia.org/wiki/Bitwise_operation#OR).\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$). Description of the test cases follows.\n\nThe only line of each test case contains one integer $n$ ($1\\le n\\le 10^{18}$).\n\nIt's guaranteed that the sum of lengths of the longest valid sequences does not exceed $5\\cdot 10^5$.\n\n### Output\n\nFor each testcase, print two lines. In the first line, print the length of your constructed sequence, $k$. In the second line, print $k$ positive integers, denoting the sequence. If there are multiple longest sequences, you can print any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n1\n\n3\n\n14\n\n23\n\n```\n\n#### Output #1\n\n```\n1\n1\n3\n1 2 3\n4\n4 10 12 14\n5\n7 18 21 22 23```", "cfid": "1988C"}
{"problem_id": "1992E", "problem_title": "E. Novice's Mistake", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1992/E", "problem_statement": "One of the first programming problems by K1o0n looked like this: \"Noobish\\_Monk has $n$ $(1 \\le n \\le 100)$ friends. Each of them gave him $a$ $(1 \\le a \\le 10000)$ apples for his birthday. Delighted with such a gift, Noobish\\_Monk returned $b$ $(1 \\le b \\le \\min(10000, a \\cdot n))$ apples to his friends. How many apples are left with Noobish\\_Monk?\"\n\nK1o0n wrote a solution, but accidentally considered the value of $n$ as a string, so the value of $n \\cdot a - b$ was calculated differently. Specifically:\n\n- when multiplying the string $n$ by the integer $a$, he will get the string $s=\\underbrace{n + n + \\dots + n + n}_{a\\ \\text{times}}$\n- when subtracting the integer $b$ from the string $s$, the last $b$ characters will be removed from it. If $b$ is greater than or equal to the length of the string $s$, it will become empty.\n\nLearning about this, ErnKor became interested in how many pairs $(a, b)$ exist for a given $n$, satisfying the constraints of the problem, on which K1o0n's solution gives the correct answer.\n\n\"The solution gives the correct answer\" means that it outputs a non-empty string, and this string, when converted to an integer, equals the correct answer, i.e., the value of $n \\cdot a - b$.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 100$)  — the number of test cases.\n\nFor each test case, a single line of input contains an integer $n$ ($1 \\le n \\le 100$).\n\nIt is guaranteed that in all test cases, $n$ is distinct.\n\n### Output\n\nFor each test case, output the answer in the following format:\n\nIn the first line, output the integer $x$ — the number of bad tests for the given $n$.\n\nIn the next $x$ lines, output two integers $a_i$ and $b_i$ — such integers that K1o0n's solution on the test \"$n$ $a_i$ $b_i$\" gives the correct answer.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2\n\n3\n\n10\n\n```\n\n#### Output #1\n\n```\n3\n20 18\n219 216\n2218 2214\n1\n165 162\n1\n1262 2519\n```\n\n### Note\n\nIn the first example, $a = 20$, $b = 18$ are suitable, as \"$\\text{2}$\" $\\cdot 20 - 18 =$ \"$\\text{22222222222222222222}$\"$- 18 = 22 = 2 \\cdot 20 - 18$", "cfid": "1992E"}
{"problem_id": "1992B", "problem_title": "B. Angry Monk", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1992/B", "problem_statement": "To celebrate his recovery, k1o0n has baked an enormous $n$ metres long potato casserole.\n\nTurns out, Noobish\\_Monk just can't stand potatoes, so he decided to ruin k1o0n's meal. He has cut it into $k$ pieces, of lengths $a_1, a_2, \\dots, a_k$ meters.\n\nk1o0n wasn't keen on that. Luckily, everything can be fixed. In order to do that, k1o0n can do one of the following operations:\n\n- Pick a piece with length $a_i \\ge 2$ and divide it into two pieces with lengths $1$ and $a_i - 1$. As a result, the number of pieces will increase by $1$;\n- Pick a slice $a_i$ and another slice with length $a_j=1$ ($i \\ne j$) and merge them into one piece with length $a_i+1$. As a result, the number of pieces will decrease by $1$.\n\nHelp k1o0n to find the minimum number of operations he needs to do in order to merge the casserole into one piece with length $n$.\n\nFor example, if $n=5$, $k=2$ and $a = [3, 2]$, it is optimal to do the following:\n\n1. Divide the piece with length $2$ into two pieces with lengths $2-1=1$ and $1$, as a result $a = [3, 1, 1]$.\n2. Merge the piece with length $3$ and the piece with length $1$, as a result $a = [4, 1]$.\n3. Merge the piece with length $4$ and the piece with length $1$, as a result $a = [5]$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$).\n\nDescription of each test case consists of two lines. The first line contains two integers $n$ and $k$ ($2 \\le n \\le 10^9$, $2 \\le k \\le 10^5$) — length of casserole and the number of pieces.\n\nThe second line contains $k$ integers $a_1, a_2, \\ldots, a_k$ ($1 \\le a_i \\le n - 1$, $\\sum a_i = n$) — lengths of pieces of casserole, which Noobish\\_Monk has cut.\n\nIt is guaranteed that the sum of $k$ over all $t$ test cases doesn't exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the minimum number of operations K1o0n needs to restore his pie after the terror of Noobish\\_Monk.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n5 3\n\n3 1 1\n\n5 2\n\n3 2\n\n11 4\n\n2 3 1 5\n\n16 6\n\n1 6 1 1 1 6\n\n```\n\n#### Output #1\n\n```\n2\n3\n9\n15\n```", "cfid": "1992B"}
{"problem_id": "1992A", "problem_title": "A. Only Pluses", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1992/A", "problem_statement": "Kmes has written three integers $a$, $b$ and $c$ in order to remember that he has to give Noobish\\_Monk $a \\times b \\times c$ bananas.\n\nNoobish\\_Monk has found these integers and decided to do the following at most $5$ times:\n\n- pick one of these integers;\n- increase it by $1$.\n\nFor example, if $a = 2$, $b = 3$ and $c = 4$, then one can increase $a$ three times by one and increase $b$ two times. After that $a = 5$, $b = 5$, $c = 4$. Then the total number of bananas will be $5 \\times 5 \\times 4 = 100$.\n\nWhat is the maximum value of $a \\times b \\times c$ Noobish\\_Monk can achieve with these operations?\n\n### Input\n\nEach test contains multiple test cases. The first line of input contains a single integer $t$ ($1 \\le t \\le 1000$) — the number of test cases. The description of the test cases follows.\n\nThe first and only line of each test case contains three integers $a$, $b$ and $c$ ($1 \\le a, b, c \\le 10$) — Kmes's integers.\n\n### Output\n\nFor each test case, output a single integer — the maximum amount of bananas Noobish\\_Monk can get.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n2 3 4\n\n10 1 10\n\n```\n\n#### Output #1\n\n```\n100\n600\n```", "cfid": "1992A"}
{"problem_id": "1992C", "problem_title": "C. Gorilla and Permutation", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1992/C", "problem_statement": "Gorilla and Noobish\\_Monk found three numbers $n$, $m$, and $k$ ($m < k$). They decided to construct a permutation$^{\\dagger}$ of length $n$.\n\nFor the permutation, Noobish\\_Monk came up with the following function: $g(i)$ is the sum of all the numbers in the permutation on a prefix of length $i$ that are not greater than $m$. Similarly, Gorilla came up with the function $f$, where $f(i)$ is the sum of all the numbers in the permutation on a prefix of length $i$ that are not less than $k$. A prefix of length $i$ is a subarray consisting of the first $i$ elements of the original array.\n\nFor example, if $n = 5$, $m = 2$, $k = 5$, and the permutation is $[5, 3, 4, 1, 2]$, then:\n\n- $f(1) = 5$, because $5 \\ge 5$; $g(1) = 0$, because $5 > 2$;\n- $f(2) = 5$, because $3 < 5$; $g(2) = 0$, because $3 > 2$;\n- $f(3) = 5$, because $4 < 5$; $g(3) = 0$, because $4 > 2$;\n- $f(4) = 5$, because $1 < 5$; $g(4) = 1$, because $1 \\le 2$;\n- $f(5) = 5$, because $2 < 5$; $g(5) = 1 + 2 = 3$, because $2 \\le 2$.\n\nHelp them find a permutation for which the value of $\\left(\\sum_{i=1}^n f(i) - \\sum_{i=1}^n g(i)\\right)$ is maximized.\n\n$^{\\dagger}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in any order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation (as $2$ appears twice in the array) and $[1,3,4]$ is also not a permutation (as $n=3$, but $4$ appears in the array).\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$)  — the number of test cases.\n\nThe only line of each case contains three integers $n$, $m$, $k$ ($2\\le n \\le 10^5$; $1 \\le m < k \\le n$) — the size of the permutation to be constructed and two integers.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the permutation  — a set of numbers that satisfies the conditions of the problem. If there are multiple solutions, output any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n5 2 5\n\n3 1 3\n\n10 3 8\n\n```\n\n#### Output #1\n\n```\n5 3 4 1 2\n3 2 1\n10 9 8 4 7 5 6 1 2 3```\n\n### Note\n\nIn the first example, $\\left(\\sum_{i=1}^n f(i) - \\sum_{i=1}^n g(i)\\right) = 5 \\cdot 5 - (0 \\cdot 3 + 1 + 3) = 25 - 4 = 21$", "cfid": "1992C"}
{"problem_id": "1992D", "problem_title": "D. Test of Love", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1992/D", "problem_statement": "ErnKor is ready to do anything for Julen, even to swim through crocodile-infested swamps. We decided to test this love. ErnKor will have to swim across a river with a width of $1$ meter and a length of $n$ meters.\n\nThe river is very cold. Therefore, in total (that is, throughout the entire swim from $0$ to $n+1$) ErnKor can swim in the water for no more than $k$ meters. For the sake of humanity, we have added not only crocodiles to the river, but also logs on which he can jump. Our test is as follows:\n\nInitially, ErnKor is on the left bank and needs to reach the right bank. They are located at the $0$ and $n+1$ meters respectively. The river can be represented as $n$ segments, each with a length of $1$ meter. Each segment contains either a log 'L', a crocodile 'C', or just water 'W'. ErnKor can move as follows:\n\n- If he is on the surface (i.e., on the bank or on a log), he can jump forward for no more than $m$ ($1 \\le m \\le 10$) meters (he can jump on the bank, on a log, or in the water).\n- If he is in the water, he can only swim to the next river segment (or to the bank if he is at the $n$-th meter).\n- ErnKor cannot land in a segment with a crocodile in any way.\n\nDetermine if ErnKor can reach the right bank.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$)  — the number of test cases.\n\nThe first line of each test case contains three numbers $n, m, k$ ($0 \\le k \\le 2 \\cdot 10^5$, $1 \\le n \\le 2 \\cdot 10^5$, $1 \\le m \\le 10$) — the length of the river, the distance ErnKor can jump, and the number of meters ErnKor can swim without freezing.\n\nThe second line of each test case contains a string $a$ of length $n$. $a_i$ denotes the object located at the $i$-th meter. ($a_i \\in \\{$'W','C','L'$\\}$)\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output \"YES\" if ErnKor can pass the test, and output \"NO\" otherwise.\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n6 2 0\n\nLWLLLW\n\n6 1 1\n\nLWLLLL\n\n6 1 1\n\nLWLLWL\n\n6 2 15\n\nLWLLCC\n\n6 10 0\n\nCCCCCC\n\n6 6 1\n\nWCCCCW\n\n```\n\n#### Output #1\n\n```\nYES\nYES\nNO\nNO\nYES\nYES\n```\n\n### Note\n\nLet's consider examples:\n\n- First example: We jump from the shore to the first log ($0 \\rightarrow 1$), from the first log to the second ($1 \\rightarrow 3$), from the second to the fourth ($3 \\rightarrow 5$), and from the last log to the shore ($5 \\rightarrow 7$). So, we have $0 \\rightarrow 1 \\rightarrow 3 \\rightarrow 5 \\rightarrow 7$. Since we did not encounter a crocodile and swam no more than k meters, the answer is «YES».\n- Second example: $0 \\rightarrow 1$, we jump into the water from the first log ($1 \\rightarrow 2$), swim a cell to the log ($2 \\leadsto 3$), $3 \\rightarrow 4 \\rightarrow 5 \\rightarrow 6 \\rightarrow 7$. Since we did not encounter a crocodile and swam no more than k meters, the answer is «YES».\n- In the third example, ErnKor needs to swim two cells 'W', but can only swim one. Therefore, the answer is «NO».\n- Sixth example: We jump from the shore into the water ($0 \\rightarrow 6$) and swim one cell in the water ($6 \\leadsto 7$). Since we did not encounter a crocodile and swam no more than k meters, the answer is «YES».", "cfid": "1992D"}
{"problem_id": "1983B", "problem_title": "B. Corner Twist", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1983/B", "problem_statement": "You are given two grids of numbers $a$ and $b$, with $n$ rows and $m$ columns. All the values in the grid are $0$, $1$ or $2$.\n\nYou can perform the following operation on $a$ any number of times:\n\n- Pick any subrectangle in the grid with length and width $\\ge 2$. You are allowed to choose the entire grid as a subrectangle.\n- The subrectangle has four corners. Take any pair of diagonally opposite corners of the chosen subrectangle and add $1$ to their values modulo $3$.\n- For the pair of corners not picked, add $2$ to their values modulo $3$.\n\nNote that the operation only changes the values of the corners of the picked subrectangle.\n\nIs it possible to convert the grid $a$ into grid $b$ by applying the above operation any number of times (possibly zero)?\n\n### Input\n\nThe first line contains an integer $t$, the number of testcases ($1 \\le t \\le 250$).\n\nFor each testcase:\n\nThe first line contains two integers $n$ and $m$, the number of rows and columns in the grid ($2 \\le n,m \\le 500$).\n\nEach of the next n lines contain m characters — the $j$-th character of the $i$-th line represents $a_{i,j}$.\n\nEach of the next n lines contain m characters — the $j$-th character of the $i$-th line represents $b_{i,j}$ ($0 \\le a_{i,j}, b_{i,j} \\le 2$).\n\nIt is guaranteed that the sum of $n$ over all test cases and the sum of $m$ over all test cases do not exceed $500$.\n\n### Output\n\nFor each test case print \"YES\" (without quotes) if it is possible to convert grid $a$ into grid $b$ and \"NO\" (without quotes) otherwise.\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n3 3\n\n000\n\n000\n\n000\n\n111\n\n111\n\n111\n\n4 4\n\n0000\n\n0000\n\n0000\n\n0000\n\n2100\n\n1200\n\n0012\n\n0021\n\n4 4\n\n1020\n\n1200\n\n1210\n\n0000\n\n0000\n\n1200\n\n2200\n\n0000\n\n3 3\n\n012\n\n012\n\n012\n\n010\n\n111\n\n011\n\n8 8\n\n00000000\n\n00000000\n\n00000000\n\n00000000\n\n00000000\n\n00000000\n\n00000000\n\n10000000\n\n00000000\n\n01200000\n\n02010000\n\n00102000\n\n00020100\n\n00001020\n\n00000210\n\n10000000\n\n2 7\n\n0000000\n\n0000000\n\n2220111\n\n0111222\n\n2 7\n\n0000000\n\n0100010\n\n2220111\n\n1210202\n\n```\n\n#### Output #1\n\n```\nYES\nYES\nYES\nNO\nYES\nNO\nYES\n```\n\n### Note\n\nIn the first testcase, grid $a$ can be converted into $b$ in the following manner:\n\n$\\begin{matrix}\\fbox{0} & 0 & \\fbox{0}\\\\ 0 & 0 & 0\\\\ \\fbox{0} & 0 & \\fbox{0}\\end{matrix} \\Rightarrow \\begin{matrix}1 & 0 & 2\\\\ 0 & \\fbox{0} & \\fbox{0}\\\\ 2 & \\fbox{0} & \\fbox{1}\\end{matrix} \\Rightarrow \\begin{matrix}1 & 0 & 2\\\\ \\fbox{0} & \\fbox{1} & 2\\\\ \\fbox{2} & \\fbox{2} & 2\\end{matrix} \\Rightarrow \\begin{matrix}1 & \\fbox{0} & \\fbox{2}\\\\ 1 & 0 & 2\\\\ 1 & \\fbox{0} & \\fbox{2}\\end{matrix} \\Rightarrow \\begin{matrix}1 & 1 & 1\\\\ 1 & \\fbox{0} & \\fbox{2}\\\\ 1 & \\fbox{2} & \\fbox{0}\\end{matrix} \\Rightarrow \\begin{matrix}1 & 1 & 1\\\\ 1 & 1 & 1\\\\ 1 & 1 & 1\\end{matrix}$\n\nHere, in each operation, the top-right and bottom-left corners highlighted by a box are incremented by $2$ modulo $3$, while the top-left and bottom-right corners are incremented by $1$ modulo $3$.\n\nIn the fourth testcase, it can be proven that it is not possible to convert grid $a$ into grid $b$ using the above-mentioned operations any number of times.", "cfid": "1983B"}
{"problem_id": "1983C", "problem_title": "C. Have Your Cake and Eat It Too", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1983/C", "problem_statement": "Alice, Bob and Charlie want to share a rectangular cake cut into $n$ pieces. Each person considers every piece to be worth a different value. The $i$-th piece is considered to be of value $a_i$ by Alice, $b_i$ by Bob and $c_i$ by Charlie.\n\nThe sum over all $a_i$, all $b_i$ and all $c_i$ individually is the same, equal to $tot$.\n\nGiven the values of each piece of the cake for each person, you need to give each person a contiguous slice of cake. In other words, the indices at the left and right ends of these subarrays (the slices given to each person) can be represented as $(l_a, r_a)$, $(l_b, r_b)$ and $(l_c, r_c)$ respectively for Alice, Bob and Charlie. The division needs to satisfy the following constraints:\n\n- No piece is assigned to more than one person, i.e., no two subarrays among $[l_a,\\ldots,r_a]$, $[l_b, \\ldots, r_b]$ and $[l_c, \\ldots, r_c]$ intersect.\n- $ \\sum_{i = l_a}^{r_a} a_i, \\sum_{i = l_b}^{r_b} b_i, \\sum_{i = l_c}^{r_c} c_i \\geq \\lceil \\frac{tot}{3} \\rceil$.\n\nHere, the notation $\\lceil \\frac{a}{b} \\rceil$ represents ceiling division. It is defined as the smallest integer greater than or equal to the exact division of $a$ by $b$. In other words, it rounds up the division result to the nearest integer. For instance $\\lceil \\frac{10}{3} \\rceil = 4$ and $\\lceil \\frac{15}{3} \\rceil = 5$.\n\n### Input\n\nThe first line contains an integer $t$, the number of testcases, ($1 \\le t \\le 10^4$)\n\nFor each testcase:\n\nThe first line contains the integer $n$ ($3 \\le n \\le 2 \\cdot 10^5$).\n\nThe following three lines contain $n$ integers each:\n\nOne line with $n$ integers $a_1, a_2, \\ldots, a_n$ represents the values for Alice ($1 \\le a_i \\le 10^6$).\n\nThe next line with $n$ integers $b_1, b_2, \\ldots, b_n$ represents the values for Bob ($1 \\le b_i \\le 10^6$).\n\nThe next line with $n$ integers $c_1, c_2, \\ldots, c_n$ represents the values for Charlie ($1 \\le c_i \\le 10^6$).\n\nIt is guaranteed that $ \\sum_{i = 1}^{n} a_i = \\sum_{i = 1}^{n} b_i = \\sum_{i = 1}^{n} c_i$.\n\nThe sum of $n$ over all testcases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each testcase, output $-1$ if the required condition is impossible.\n\nOtherwise, output six numbers – $l_a, r_a, l_b, r_b, l_c, r_c$, the respective starting and ending indices ($1$-indexed) of the subarrays for Alice, Bob and Charlie, respectively.\n\n### Example\n\n#### Input #1\n\n```\n\n10\n\n5\n\n5 1 1 1 1\n\n1 1 5 1 1\n\n1 1 1 1 5\n\n6\n\n1 2 3 4 5 6\n\n5 6 1 2 3 4\n\n3 4 5 6 1 2\n\n4\n\n4 4 4 4\n\n4 4 4 4\n\n4 4 4 4\n\n5\n\n5 10 5 2 10\n\n9 6 9 7 1\n\n10 7 10 2 3\n\n3\n\n4 5 2\n\n6 1 4\n\n1 8 2\n\n3\n\n10 4 10\n\n8 7 9\n\n10 4 10\n\n7\n\n57113 65383 19795 53580 74452 3879 23255\n\n12917 16782 89147 93107 27365 15044 43095\n\n33518 63581 33565 34112 46774 44151 41756\n\n6\n\n6 3 1 8 7 1\n\n10 2 6 2 2 4\n\n10 9 2 1 2 2\n\n5\n\n5 5 4 5 5\n\n1 6 3 8 6\n\n2 4 1 9 8\n\n10\n\n1 1 1 1 1001 1 1 1001 1 1\n\n1 1 1 1 1 1 2001 1 1 1\n\n1 1 1 1 1 1001 1 1 1 1001\n\n```\n\n#### Output #1\n\n```\n1 1 2 3 4 5\n5 6 1 2 3 4\n-1\n-1\n1 1 3 3 2 2\n-1\n1 2 3 4 5 7\n3 6 1 1 2 2\n1 2 3 4 5 5\n1 5 6 7 8 10\n```\n\n### Note\n\nIn the first testcase, the sum of either of the three arrays is $9$. Each person needs a cake slice corresponding to a subarray with a total value of at least $\\lceil \\frac{9}{3} \\rceil = 3$.\n\nIf we assign the subarray ($1$,$1$) to Alice, its total value to her is $5$, which is $\\ge 3$; the subarray ($2$,$3$) to Bob, its total value to him is $1 + 5 = 6$, which is $\\ge 3$; and the subarray ($4$,$5$) to Charlie, its total value to him $1 + 5 = 6$, which is also $\\ge 3$. Each person gets their own separate pieces of the cake, and no piece is common to two or more people.\n\nIt can be shown that for the third test case, it is not possible to give slices of the cake in a way that satisfies the given constraints.", "cfid": "1983C"}
{"problem_id": "1983A", "problem_title": "A. Array Divisibility", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1983/A", "problem_statement": "An array of integers $a_1,a_2,\\cdots,a_n$ is beautiful subject to an integer $k$ if it satisfies the following:\n\n- The sum of $a_{j}$ over all $j$ such that $j$ is a multiple of $k$ and $1 \\le j \\le n $, itself, is a multiple of $k$.\n- More formally, if $\\sum_{k | j} a_{j}$ is divisible by $k$ for all $1 \\le j \\le n$ then the array $a$ is beautiful subject to $k$. Here, the notation ${k|j}$ means $k$ divides $j$, that is, $j$ is a multiple of $k$.\n\nGiven $n$, find an array of positive nonzero integers, with each element less than or equal to $10^5$ that is beautiful subject to all $1 \\le k \\le n$.\n\nIt can be shown that an answer always exists.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 100$). The description of the test cases follows.\n\nThe first and only line of each test case contains a single integer $n$ ($1 \\le n \\le 100$) — the size of the array.\n\n### Output\n\nFor each test case, print the required array as described in the problem statement.\n\n### Example\n\n#### Input #1\n\n```\n3\n3\n6\n7\n```\n\n#### Output #1\n\n```\n4 22 18\n10 6 15 32 125 54\n23 18 27 36 5 66 7```\n\n### Note\n\nIn the second test case, when $n = 6$, for all integers $k$ such that $1 \\le k \\le 6$, let $S$ be the set of all indices of the array that are divisible by $k$.\n\n- When $k = 1$, $S = \\{1, 2, 3,4,5,6\\}$ meaning $a_1+a_2+a_3+a_4+a_5+a_6=242$ must be divisible by $1$.\n- When $k = 2$, $S = \\{2,4,6\\}$ meaning $a_2+a_4+a_6=92$ must be divisible by $2$.\n- When $k = 3$, $S = \\{3,6\\}$ meaning $a_3+a_6=69$ must divisible by $3$.\n- When $k = 4$, $S = \\{4\\}$ meaning $a_4=32$ must divisible by $4$.\n- When $k = 5$, $S = \\{5\\}$ meaning $a_5=125$ must divisible by $5$.\n- When $k = 6$, $S = \\{6\\}$ meaning $a_6=54$ must divisible by $6$.\n\nThe array $a = [10, 6, 15, 32, 125, 54]$ satisfies all of the above conditions. Hence, $a$ is a valid array.", "cfid": "1983A"}
{"problem_id": "1983D", "problem_title": "D. Swap Dilemma", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1983/D", "problem_statement": "Given two arrays of distinct positive integers $a$ and $b$ of length $n$, we would like to make both the arrays the same. Two arrays $x$ and $y$ of length $k$ are said to be the same when for all $1 \\le i \\le k$, $x_i = y_i$.\n\nNow in one move, you can choose some index $l$ and $r$ in $a$ ($l \\le r$) and swap $a_l$ and $a_r$, then choose some $p$ and $q$ ($p \\le q$) in $b$ such that $r-l=q-p$ and swap $b_p$ and $b_q$.\n\nIs it possible to make both arrays the same?\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 2 \\cdot 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 10^5$) — the length of the arrays $a$ and $b$.\n\nThe second line of each test case contains $n$ distinct integers $a_1,a_2,a_3,\\ldots,a_n$ ($1 \\le a_i \\le 2 \\cdot 10^5$) — the integers in the array $a$.\n\nThe third line of each test case contains $n$ distinct integers $b_1,b_2,b_3,\\ldots,b_n$ ($1 \\le b_i \\le 2 \\cdot 10^5$) — the integers in the array $b$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each testcase, print \"YES\" if the arrays $a$ and $b$ can be made the same. Otherwise, print \"NO\". can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n4\n\n1 2 3 4\n\n1 2 3 4\n\n5\n\n1 3 4 2 5\n\n7 1 2 5 4\n\n4\n\n1 2 3 4\n\n4 3 2 1\n\n3\n\n1 2 3\n\n1 3 2\n\n5\n\n1 5 7 1000 4\n\n4 1 7 5 1000\n\n3\n\n1 4 2\n\n1 3 2\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nYES\nNO\nNO\nNO\n```\n\n### Note\n\nIn the first testcase, you don't need to perform any operations since the arrays are same.\n\nIn the second testcase, it can be proven there exists no way to make the arrays same.\n\nIn the third testcase, one of the ways to make the arrays same is to first choose $l=1$, $r=3$, $p=1$, $q=3$ then choose $l=1$, $r=2$, $p=3$, $q=4$.", "cfid": "1983D"}
{"problem_id": "2053E", "problem_title": "E. Resourceful Caterpillar Sequence", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2053/E", "problem_statement": "Endless Repeating 7 Days\n\n— r-906, [Panopticon](https://www.youtube.com/watch?v=_-Vd0ZGB-lo)\n\nThere is a tree consisting of $n$ vertices. Let a caterpillar be denoted by an integer pair $(p, q)$ ($1 \\leq p, q \\leq n$, $p \\neq q$): its head is at vertex $p$, its tail is at vertex $q$, and it dominates all the vertices on the simple path from $p$ to $q$ (including $p$ and $q$). The caterpillar sequence of $(p, q)$ is defined as the sequence consisting only of the vertices on the simple path, sorted in the ascending order of the distance to $p$.\n\nNora and Aron are taking turns moving the caterpillar, with Nora going first. Both players will be using his or her own optimal strategy:\n\n- They will play to make himself or herself win;\n- However, if it is impossible, they will play to prevent the other person from winning (thus, the game will end in a tie).\n\nIn Nora's turn, she must choose a vertex $u$ adjacent to vertex $p$, which is not dominated by the caterpillar, and move all the vertices in it by one edge towards vertex $u$$^{\\\\text{∗}}$. In Aron's turn, he must choose a vertex $v$ adjacent to vertex $q$, which is not dominated by the caterpillar, and move all the vertices in it by one edge towards vertex $v$. Note that the moves allowed to the two players are different.\n\nWhenever $p$ is a leaf$^{\\text{†}}$, Nora wins$^{\\text{‡}}$. Whenever $q$ is a leaf, Aron wins. If either initially both $p$ and $q$ are leaves, or after $10^{100}$ turns the game has not ended, the result is a tie.\n\nPlease count the number of integer pairs $(p, q)$ with $1 \\leq p, q \\leq n$ and $p \\neq q$ such that, if the caterpillar is initially $(p, q)$, Aron wins the game.\n\n$^{\\text{∗}}$In other words: Let the current caterpillar sequence be $c_1, c_2, \\ldots, c_k$, then after the move, the new caterpillar sequence becomes $d(u, c_1), d(u, c_2), \\ldots, d(u, c_k)$. Here, $d(x, y)$ is the next vertex on the simple path from $y$ to $x$.\n\n$^{\\text{†}}$In a tree, a vertex is called a leaf if and only if its degree is $1$.\n\n$^{\\text{‡}}$Therefore, Nora never fails to choose a vertex $u$ when the game has not ended. The same goes for Aron.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\leq t \\leq 2\\cdot 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\leq n \\leq 2\\cdot 10^5$) — the number of vertices in the tree.\n\nThe following $n - 1$ lines each contain two integers $u$ and $v$ ($1 \\leq u, v \\leq n$), denoting an edge between vertices $u$ and $v$. It is guaranteed that the given edges form a tree.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $4\\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single line containing an integer: the number of integer pairs $(p, q)$ which make Aron win.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n2\n\n1 2\n\n5\n\n1 2\n\n1 3\n\n2 4\n\n2 5\n\n12\n\n1 6\n\n11 2\n\n4 8\n\n12 3\n\n2 7\n\n6 12\n\n8 1\n\n2 3\n\n5 12\n\n9 2\n\n10 3\n\n10\n\n1 2\n\n2 3\n\n3 4\n\n4 5\n\n5 6\n\n4 7\n\n6 8\n\n4 9\n\n4 10\n\n25\n\n1 16\n\n11 22\n\n6 14\n\n3 1\n\n20 14\n\n23 17\n\n25 19\n\n10 11\n\n3 18\n\n10 6\n\n2 21\n\n4 5\n\n11 12\n\n4 9\n\n9 13\n\n8 6\n\n6 1\n\n3 7\n\n8 19\n\n10 24\n\n15 13\n\n1 2\n\n3 4\n\n17 8\n\n```\n\n#### Output #1\n\n```\n0\n6\n40\n27\n171\n```\n\n### Note\n\nIn the first test case, all possible caterpillars are $(1, 2)$ and $(2, 1)$, resulting in a tie at the beginning, since both $p$ and $q$ are leaves.\n\nIn the second test case, the caterpillars that allow Aron to win are the following: $(1, 3)$, $(1, 4)$, $(1, 5)$, $(2, 3)$, $(2, 4)$, $(2, 5)$. Let's look at some specific caterpillars.\n\n- For the caterpillar $(1, 5)$: vertex $p = 1$ is not a leaf, but vertex $q = 5$ is, so Aron wins at the beginning.\n- For the caterpillar $(2, 1)$: vertex $p = 2$ is not a leaf, neither is vertex $q = 1$. In Nora's first move, she can choose to move the caterpillar towards vertex $5$, therefore the caterpillar becomes $(5, 2)$, and vertex $p = 5$ is a leaf, so Nora will win.", "cfid": "2053E"}
{"problem_id": "2053F", "problem_title": "F. Earnest Matrix Complement", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2053/F", "problem_statement": "3, 2, 1, ... We are the — RiOI Team!\n\n— Felix & All, [Special Thanks 3](https://www.luogu.com.cn/problem/T351681)\n\n- Peter: Good news: My problem T311013 is approved!\n- $\\delta$: I'm glad my computer had gone out of battery so that I wouldn't have participated in wyrqwq's round and gained a negative delta.\n- Felix: \\[thumbs\\_up\\] The problem statement concerning a removed song!\n- Aquawave: Do I mourn my Chemistry?\n- E.Space: ahh?\n- Trine: Bread.\n- Iris: So why am I always testing problems?\n\nTime will pass, and we might meet again. Looking back at the past, everybody has lived the life they wanted.\n\nAquawave has a matrix $A$ of size $n\\times m$, whose elements can only be integers in the range $[1, k]$, inclusive. In the matrix, some cells are already filled with an integer, while the rest are currently not filled, denoted by $-1$.\n\nYou are going to fill in all the unfilled places in $A$. After that, let $c_{u,i}$ be the number of occurrences of element $u$ in the $i$-th row. Aquawave defines the beauty of the matrix as\n\n\n\n$$\\sum_{u=1}^k \\sum_{i=1}^{n-1} c_{u,i} \\cdot c_{u,i+1}.$$\n\nYou have to find the maximum possible beauty of $A$ after filling in the blanks optimally.\n\n### Input\n\nThe first line of input contains a single integer $t$ ($1 \\leq t \\leq 2\\cdot 10^4$) — the number of test cases. The description of test cases follows.\n\nThe first line of each test case contains three integers $n$, $m$, and $k$ ($2 \\leq n \\leq 2\\cdot 10^5$, $2 \\leq m \\leq 2\\cdot 10^5$, $n \\cdot m \\leq 6\\cdot 10^5$, $1 \\leq k \\leq n\\cdot m$) — the number of rows and columns of the matrix $A$, and the range of the integers in the matrix, respectively.\n\nThen $n$ lines follow, the $i$-th line containing $m$ integers $A_{i,1},A_{i,2},\\ldots,A_{i,m}$ ($1 \\leq A_{i,j} \\leq k$ or $A_{i,j} = -1$) — the elements in $A$.\n\nIt is guaranteed that the sum of $n\\cdot m$ over all test cases does not exceed $6\\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the maximum possible beauty.\n\n### Example\n\n#### Input #1\n\n```\n\n9\n\n3 3 3\n\n1 2 2\n\n3 1 3\n\n3 2 1\n\n2 3 3\n\n-1 3 3\n\n2 2 -1\n\n3 3 6\n\n-1 -1 1\n\n1 2 -1\n\n-1 -1 4\n\n3 4 5\n\n1 3 2 3\n\n-1 -1 2 -1\n\n3 1 5 1\n\n5 3 8\n\n5 -1 2\n\n1 8 -1\n\n-1 5 6\n\n7 7 -1\n\n4 4 4\n\n6 6 5\n\n-1 -1 5 -1 -1 -1\n\n-1 -1 -1 -1 2 -1\n\n-1 1 3 3 -1 -1\n\n-1 1 -1 -1 -1 4\n\n4 2 -1 -1 -1 4\n\n-1 -1 1 2 -1 -1\n\n6 6 4\n\n-1 -1 -1 -1 1 -1\n\n3 -1 2 2 4 -1\n\n3 1 2 2 -1 -1\n\n3 3 3 3 -1 2\n\n-1 3 3 -1 1 3\n\n3 -1 2 2 3 -1\n\n5 5 3\n\n1 1 3 -1 1\n\n2 2 -1 -1 3\n\n-1 -1 -1 2 -1\n\n3 -1 -1 -1 2\n\n-1 1 2 3 -1\n\n6 2 7\n\n-1 7\n\n-1 6\n\n7 -1\n\n-1 -1\n\n-1 -1\n\n2 2\n\n```\n\n#### Output #1\n\n```\n4\n4\n10\n10\n8\n102\n93\n58\n13\n```\n\n### Note\n\nIn the first test case, the matrix $A$ is already determined. Its beauty is\n\n\n\n$$\\sum_{u=1}^k \\sum_{i=1}^{n-1} c_{u,i} \\cdot c_{u,i+1} = c_{1,1}\\cdot c_{1,2} + c_{1,2}\\cdot c_{1,3} + c_{2,1}\\cdot c_{2,2} + c_{2,2}\\cdot c_{2,3} + c_{3,1}\\cdot c_{3,2} + c_{3,2}\\cdot c_{3,3} = 1\\cdot 1 + 1\\cdot 1 + 2\\cdot 0 + 0\\cdot 1 + 0\\cdot 2 + 2\\cdot 1 = 4.$$\n\nIn the second test case, one can fill the matrix as follows:\n\n\n\n$$ \\begin{bmatrix} 2 &3 &3 \\\\ 2 &2 &3 \\end{bmatrix}, $$\n\nand get the value $4$. It can be proven this is the maximum possible answer one can get.\n\nIn the third test case, one of the possible optimal configurations is:\n\n\n\n$$ \\begin{bmatrix} 1 &1 &1 \\\\ 1 &2 &1 \\\\ 1 &1 &4 \\end{bmatrix}. $$\n\nIn the fourth test case, one of the possible optimal configurations is:\n\n\n\n$$ \\begin{bmatrix} 1 &3 &2 &3 \\\\ 1 &3 &2 &1 \\\\ 3 &1 &5 &1 \\end{bmatrix}. $$\n\nIn the fifth test case, one of the possible optimal configurations is:\n\n\n\n$$ \\begin{bmatrix} 5 &5 &2 \\\\ 1 &8 &5 \\\\ 7 &5 &6 \\\\ 7 &7 &4 \\\\ 4 &4 &4 \\end{bmatrix}. $$\n\n", "cfid": "2053F"}
{"problem_id": "2053I1", "problem_title": "I1. Affectionate Arrays (Easy Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2053/I1", "problem_statement": "You are the beginning of the letter, the development of a poem, and the end of a fairy tale.\n\n— ilem, [Pinky Promise](https://www.bilibili.com/video/BV1Jb411U7u2/)\n\nThis is the easy version of the problem. The difference between the versions is that in this version, you need to compute the minimum length of the arrays. You can hack only if you solved all versions of this problem.\n\nIris treasures an integer array $a_1, a_2, \\ldots, a_n$. She knows this array has an interesting property: the maximum absolute value of all elements is less than or equal to the sum of all elements, that is, $\\max(\\lvert a_i\\rvert) \\leq \\sum a_i$.\n\nIris defines the boredom of an array as its maximum subarray$^{\\text{∗}}$ sum.\n\nIris's birthday is coming, and Victor is going to send her another array $b_1, b_2, \\ldots, b_m$ as a gift. For some seemingly obvious reasons, he decides the array $b_1, b_2, \\ldots, b_m$ should have the following properties.\n\n- $a_1, a_2, \\ldots, a_n$ should be a subsequence$^{\\text{†}}$ of $b_1, b_2, \\ldots, b_m$.\n- The two arrays have the same sum. That is, $\\sum\\limits_{i=1}^n a_i = \\sum\\limits_{i=1}^m b_i$.\n- The boredom of $b_1, b_2, \\ldots, b_m$ is the smallest possible.\n- Among the arrays with the smallest boredom, the length of the array $b$ (i.e., $m$) is the smallest possible. And in this case, Iris will understand his regard as soon as possible!\n\nEven constrained as above, there are still too many possible gifts. So Victor asks you to compute the value of $\\boldsymbol{m}$ of any array $b_1, b_2, \\ldots, b_m$ satisfying all the conditions above. He promises you: if you help him successfully, he will share a bit of Iris's birthday cake with you.\n\nNote: since the input is large, you may need to optimize it for this problem.\n\nFor example, in C++, it is enough to use the following lines at the start of the main() function:\n\n```\n`int main() {<br/>    std::ios::sync_with_stdio(false);<br/>    std::cin.tie(nullptr); std::cout.tie(nullptr);<br/>}<br/>````\n\n$^{\\text{∗}}$An array $c$ is a subarray of an array $d$ if $c$ can be obtained from $d$ by the deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\n$^{\\text{†}}$A sequence $c$ is a subsequence of a sequence $d$ if $c$ can be obtained from $d$ by the deletion of several (possibly, zero or all) element from arbitrary positions.\n\n### Input\n\nEach test contains multiple test cases. The first line of input contains an integer $t$ ($1 \\leq t \\leq 10^5$) — the number of test cases. The description of test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\leq n \\leq 3\\cdot 10^6$) — the length of the array $a_1, a_2, \\ldots, a_n$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($-10^9 \\leq a_i \\leq 10^9$) — the initial array. It is guaranteed that $\\max(\\lvert a_i\\rvert) \\leq \\sum a_i$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $3\\cdot 10^6$.\n\n### Output\n\nFor each test case, output a single line containing an integer: the length $m$ of a valid array $b$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n4\n\n1 2 3 4\n\n4\n\n2 -3 2 2\n\n10\n\n2 -7 6 3 -1 4 2 -5 8 -4\n\n20\n\n4 -2 4 3 -2 1 5 2 3 6 -5 -1 -4 -2 -3 5 -3 1 -4 1\n\n```\n\n#### Output #1\n\n```\n4\n6\n14\n25\n```\n\n### Note\n\nIn the first test case, $a=[1, 2, 3, 4]$. The only array $b$ which satisfies all the properties above is $[1, 2, 3, 4]$, so we should output $4$.\n\nIn the second test case, $a=[2, -3, 2, 2]$. The possible arrays $b$ are $[1, 2, -3, 2, -1, 2]$ and $[2, 1, -3, 2, -1, 2]$, so we should output $6$.", "cfid": "2053I1"}
{"problem_id": "2043G", "problem_title": "G. Problem with Queries", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2043/G", "problem_statement": "You are given an array $a$, consisting of $n$ integers. Your task is to process $q$ queries of two types:\n\n- $1~p~x$ — set the value of the element at index $p$ equal to $x$;\n- $2~l~r$ — count the number of pairs of indices $(i, j)$ such that $l \\le i < j \\le r$ and $a_i \\ne a_j$.\n\nNote that the queries in this task are encoded; each subsequent query can only be decoded after calculating the answer to the preceding query of the second type.\n\n### Input\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 10^5$).\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le n$).\n\nThe third line contains a single integer $q$ ($1 \\le q \\le 3 \\cdot 10^5$) — the number of queries.\n\nThe next $q$ lines describe the queries in one of the following formats:\n\n- $1~p'~x'$ ($0 \\le p', x' \\le n-1$);\n- $2~l'~r'$ ($0 \\le l', r' \\le n-1$).\n\nThe queries are encoded as follows: let $\\mathit{last}$ be the answer to the latest processed query of the second type (initially, $\\mathit{last} = 0$).\n\n- if the type of the query is $1$, then $p = ((p' + \\mathit{last}) \\bmod n) + 1$, $x = ((x' + \\mathit{last}) \\bmod n) + 1$.\n- if the type of the query is $2$, $l = ((l' + \\mathit{last}) \\bmod n) + 1$, $r = ((r' + \\mathit{last}) \\bmod n) + 1$. If $l > r$, swap their values.\n\nDon't forget to update the value of $\\mathit{last}$ after answering each query of the second type.\n\nAdditional constraint on the input: there is at least one query of the second type.\n\n### Output\n\nFor each query of the second type, print the answer — the number of pairs of indices $(i, j)$ such that $l \\le i < j \\le r$ and $a_i \\ne a_j$.\n\n### Examples\n\n#### Input #1\n\n```\n\n3\n\n1 2 3\n\n5\n\n2 0 2\n\n1 0 2\n\n2 0 2\n\n1 2 0\n\n2 1 0\n\n```\n\n#### Output #1\n\n```\n3 2 0 ```\n\n#### Input #2\n\n```\n\n7\n\n1 3 4 4 7 1 3\n\n3\n\n2 1 6\n\n2 1 0\n\n2 5 6\n\n```\n\n#### Output #2\n\n```\n13 18 0 ```\n\n### Note\n\nIn the first example, the actual queries (after decoding) are:\n\n- 2 1 3\n- 1 1 3\n- 2 1 3\n- 1 2 3\n- 2 1 3", "cfid": "2043G"}
{"problem_id": "2043E", "problem_title": "E. Matrix Transformation", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2043/E", "problem_statement": "You are given two matrices $A$ and $B$ of size $n \\times m$, filled with integers between $0$ and $10^9$. You can perform the following operations on matrix $A$ in any order and any number of times:\n\n- &=: choose two integers $i$ and $x$ ($1 \\le i \\le n$, $x \\ge 0$) and replace each element in row $i$ with the result of the bitwise AND operation between $x$ and that element. Formally, for every $j \\in [1, m]$, the element $A_{i,j}$ is replaced with $A_{i,j} \\text{ & } x$;\n- \\|=: choose two integers $j$ and $x$ ($1 \\le j \\le m$, $x \\ge 0$) and replace each element in column $j$ with the result of the bitwise OR operation between $x$ and that element. Formally, for every $i \\in [1, n]$, the element $A_{i,j}$ is replaced with $A_{i,j} \\text{ | } x$.\n\nThe value of $x$ may be chosen differently for different operations.\n\nDetermine whether it is possible to transform matrix $A$ into matrix $B$ using the given operations any number of times (including zero).\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 100$) — the number of test cases. Then, $t$ test cases follow.\n\nEach test case is given as follows:\n\n- the first line contains two integers $n$ and $m$ ($1 \\le n, m \\le 10^3$; $n \\cdot m \\le 10^3$) — the dimensions of the matrices $A$ and $B$;\n- the following $n$ lines describe the matrix $A$, where the $i$-th line contains $m$ integers $A_{i,1}, A_{i,2}, \\dots, A_{i,m}$ ($0 \\le A_{i,j} \\le 10^9$);\n- the following $n$ lines describe the matrix $B$, where the $i$-th line contains $m$ integers $B_{i,1}, B_{i,2}, \\dots, B_{i,m}$ ($0 \\le B_{i,j} \\le 10^9$).\n\n### Output\n\nFor each test case, output Yes if it is possible to transform the matrix $A$ into the matrix $B$; otherwise, output No. Each letter can be output in any case, upper or lower.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n1 1\n\n12\n\n13\n\n2 2\n\n10 10\n\n42 42\n\n21 21\n\n21 21\n\n2 2\n\n74 10\n\n42 106\n\n21 85\n\n85 21\n\n2 4\n\n1 2 3 4\n\n5 6 7 8\n\n3 2 3 4\n\n1 0 1 0\n\n```\n\n#### Output #1\n\n```\nYes\nYes\nNo\nYes\n```\n\n### Note\n\nLet's consider the second set of input data and show a sequence of operations that transforms matrix $A$ into matrix $B$:\n\nInitially, the matrix looks like this:\n\n$\\begin{bmatrix} 10&10\\\\ 42&42\\\\ \\end{bmatrix}$\n\nApply an operation of the first type with parameters $i = 1$ and $x = 0$. As a result, we get the matrix:\n\n$\\begin{bmatrix} 0&0\\\\ 42&42\\\\ \\end{bmatrix}$\n\nApply an operation of the first type with parameters $i = 2$ and $x = 0$. As a result, we get the matrix:\n\n$\\begin{bmatrix} 0&0\\\\ 0&0\\\\ \\end{bmatrix}$\n\nApply an operation of the second type with parameters $j = 1$ and $x = 21$. As a result, we get the matrix:\n\n$\\begin{bmatrix} 21&0\\\\ 21&0\\\\ \\end{bmatrix}$\n\nApply an operation of the second type with parameters $j = 2$ and $x = 21$. As a result, we get the matrix:\n\n$\\begin{bmatrix} 21&21\\\\ 21&21\\\\ \\end{bmatrix}$\n\nThus, we have transformed matrix $A$ into matrix $B$.", "cfid": "2043E"}
{"problem_id": "2043F", "problem_title": "F. Nim", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2043/F", "problem_statement": "Recall the rules of the game \"Nim\". There are $n$ piles of stones, where the $i$-th pile initially contains some number of stones. Two players take turns choosing a non-empty pile and removing any positive (strictly greater than $0$) number of stones from it. The player unable to make a move loses the game.\n\nYou are given an array $a$, consisting of $n$ integers. Artem and Ruslan decided to play Nim on segments of this array. Each of the $q$ rounds is defined by a segment $(l_i, r_i)$, where the elements $a_{l_i}, a_{l_i+1}, \\dots, a_{r_i}$ represent the sizes of the piles of stones.\n\nBefore the game starts, Ruslan can remove any number of piles from the chosen segment. However, at least one pile must remain, so in a single round he can remove at most $(r_i - l_i)$ piles. He is allowed to remove $0$ piles. After the removal, the game is played on the remaining piles within the segment.\n\nAll rounds are independent: the changes made in one round do not affect the original array or any other rounds.\n\nRuslan wants to remove as many piles as possible so that Artem, who always makes the first move, loses.\n\nFor each round, determine:\n\n1. the maximum number of piles Ruslan can remove;\n2. the number of ways to choose the maximum number of piles for removal.\n\nTwo ways are considered different if there exists an index $i$ such that the pile at index $i$ is removed in one way but not in the other. Since the number of ways can be large, output it modulo $998\\,244\\,353$.\n\nIf Ruslan cannot ensure Artem's loss in a particular round, output -1 for that round.\n\n### Input\n\nThe first line of input contains two integers $n$ and $q$ ($1 \\le n, q \\le 10^5$) — the size of the array and the number of segments for which the answers need to be calculated.\n\nThe second line of input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($0 \\le a_i \\le 50$) — the elements of the initial array.\n\nThe $i$-th of the next $q$ lines contains two integers $l_i, r_i$ ($1 \\le l_i \\le r_i \\le n$) — the bounds of the segment on which the boys want to play the game during the $i$-th round.\n\n### Output\n\nFor each round:\n\n- if Ruslan can win, print two integers — the maximum number of piles that can be removed, and the number of ways to remove the maximum number of piles, taken modulo $998\\,244\\,353$;\n- otherwise print -1.\n\n### Example\n\n#### Input #1\n\n```\n\n9 5\n\n0 1 2 1 3 4 5 6 0\n\n1 5\n\n2 5\n\n3 5\n\n4 5\n\n1 9\n\n```\n\n#### Output #1\n\n```\n4 1\n2 1\n0 1\n-1\n8 2\n```", "cfid": "2043F"}
{"problem_id": "2051F", "problem_title": "F. Joker", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2051/F", "problem_statement": "Consider a deck of $n$ cards. The positions in the deck are numbered from $1$ to $n$ from top to bottom. A joker is located at position $m$.\n\n$q$ operations are applied sequentially to the deck. During the $i$-th operation, you need to take the card at position $a_i$ and move it either to the beginning or to the end of the deck. For example, if the deck is $[2, 1, 3, 5, 4]$, and $a_i=2$, then after the operation the deck will be either $[1, 2, 3, 5, 4]$ (the card from the second position moved to the beginning) or $[2, 3, 5, 4, 1]$ (the card from the second position moved to the end).\n\nYour task is to calculate the number of distinct positions where the joker can be after each operation.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains three integers $n$, $m$, and $q$ ($2 \\le n \\le 10^9$; $1 \\le m \\le n$; $1 \\le q \\le 2 \\cdot 10^5$).\n\nThe second line contains $q$ integers $a_1, a_2, \\dots, a_q$ ($1 \\le a_i \\le n$).\n\nAdditional constraint on the input: the sum of $q$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print $q$ integers — the number of distinct positions where the joker can be after each operation.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n6 5 3\n\n1 2 3\n\n2 1 4\n\n2 1 1 2\n\n5 3 1\n\n3\n\n3 2 4\n\n2 1 1 1\n\n18 15 4\n\n13 15 1 16\n\n```\n\n#### Output #1\n\n```\n2 3 5\n2 2 2 2\n2\n2 3 3 3\n2 4 6 8\n```", "cfid": "2051F"}
{"problem_id": "2051G", "problem_title": "G. Snakes", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2051/G", "problem_statement": "Suppose you play a game where the game field looks like a strip of $1 \\times 10^9$ square cells, numbered from $1$ to $10^9$.\n\nYou have $n$ snakes (numbered from $1$ to $n$) you need to place into some cells. Initially, each snake occupies exactly one cell, and you can't place more than one snake into one cell. After that, the game starts.\n\nThe game lasts for $q$ seconds. There are two types of events that may happen each second:\n\n- snake $s_i$ enlarges: if snake $s_i$ occupied cells $[l, r]$, it enlarges to a segment $[l, r + 1]$;\n- snake $s_i$ shrinks: if snake $s_i$ occupied cells $[l, r]$, it shrinks to a segment $[l + 1, r]$.\n\nEach second, exactly one of the events happens.\n\nIf at any moment of time, any snake runs into some obstacle (either another snake or the end of the strip), you lose. Otherwise, you win with the score equal to the maximum cell occupied by any snake so far.\n\nWhat is the minimum possible score you can achieve?\n\n### Input\n\nThe first line contains two integers $n$ and $q$ ($1 \\le n \\le 20$; $1 \\le q \\le 2 \\cdot 10^5$) — the number of snakes and the number of events. Next $q$ lines contain the description of events — one per line.\n\nThe $i$-th line contains\n\n- either \"$s_i$ +\" ($1 \\le s_i \\le n$) meaning that the $s_i$-th snake enlarges\n- or \"$s_i$ -\" ($1 \\le s_i \\le n$) meaning that the $s_i$-th snake shrinks.\n\nAdditional constraint on the input: the given sequence of events is valid, i. e. a snake of length $1$ never shrinks.\n\n### Output\n\nPrint one integer — the minimum possible score.\n\n### Examples\n\n#### Input #1\n\n```\n\n3 6\n\n1 +\n\n1 -\n\n3 +\n\n3 -\n\n2 +\n\n2 -\n\n```\n\n#### Output #1\n\n```\n4\n```\n\n#### Input #2\n\n```\n\n5 13\n\n5 +\n\n3 +\n\n5 -\n\n2 +\n\n4 +\n\n3 +\n\n5 +\n\n5 -\n\n2 +\n\n3 -\n\n3 +\n\n3 -\n\n2 +\n\n```\n\n#### Output #2\n\n```\n11\n```\n\n### Note\n\nIn the first test, the optimal strategy is to place the second snake at cell $1$, the third snake — at $2$, and the first one — at $3$. The maximum occupied cell is cell $4$, and it's the minimum possible score.\n\nIn the second test, one of the optimal strategies is to place:\n\n- snake $2$ at position $1$;\n- snake $3$ at position $4$;\n- snake $5$ at position $6$;\n- snake $1$ at position $9$;\n- snake $4$ at position $10$.", "cfid": "2051G"}
{"problem_id": "2049F", "problem_title": "F. MEX OR Mania", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2049/F", "problem_statement": "An integer sequence $b_1, b_2, \\ldots, b_n$ is good if $\\operatorname{mex}(b_1, b_2, \\ldots, b_n) - (b_1 | b_2 | \\ldots | b_n) = 1$. Here, $\\operatorname{mex(c)}$ denotes the MEX$^{\\text{∗}}$ of the collection $c$, and $|$ is the [bitwise OR](https://en.wikipedia.org/wiki/Bitwise_operation#OR) operator.\n\nShohag has an integer sequence $a_1, a_2, \\ldots, a_n$. He will perform the following $q$ updates on $a$:\n\n- $i$ $x$ — increase $a_i$ by $x$.\n\nAfter each update, help him find the length of the longest good subarray$^{\\text{†}}$ of $a$.\n\n$^{\\text{∗}}$The minimum excluded (MEX) of a collection of integers $c_1, c_2, \\ldots, c_k$ is defined as the smallest non-negative integer $y$ which does not occur in the collection $c$.\n\n$^{\\text{†}}$An array $d$ is a subarray of an array $f$ if $d$ can be obtained from $f$ by the deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two space-separated integers $n$ and $q$ ($1 \\le n, q \\le 10^5$).\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le n$).\n\nThe next $q$ lines of each test case are of the following form:\n\n- $i$ $x$ ($1 \\le i, x \\le n$) — it means you should increase $a_i$ by $x$.\n\nIt is guaranteed that the sum of $n$ over all test cases doesn't exceed $10^5$ and the sum of $q$ doesn't exceed $10^5$.\n\n### Output\n\nFor each test case, output $q$ lines — on the $i$-th line output the length of the longest good subarray of $a$ after the $i$-th update.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n6 3\n\n0 0 1 0 1 0\n\n6 1\n\n3 2\n\n6 3\n\n3 1\n\n1 3 1\n\n1 1\n\n```\n\n#### Output #1\n\n```\n6\n3\n2\n0\n```\n\n### Note\n\nIn the first test case, after the first update, the array becomes $[0, 0, 1, 0, 1, 1]$, and here the whole array is good because $\\operatorname{mex}([0, 0, 1, 0, 1, 1]) - (0 | 0 | 1 | 0 | 1 | 1) = 2 - 1 = 1$.\n\nAfter the second update, the array becomes $[0, 0, 3, 0, 1, 1]$, and here the subarray $[0, 1, 1]$ has the maximum length among all the good subarrays.\n\nFinally, after the third update, the array becomes $[0, 0, 3, 0, 1, 4]$, and here the subarrays $[0, 0]$ and $[0, 1]$ both have the maximum length among all the good subarrays.", "cfid": "2049F"}
{"problem_id": "2049E", "problem_title": "E. Broken Queries", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2049/E", "problem_statement": "You, a wizard whose creation was destroyed by a dragon, are determined to hunt it down with a magical AOE tracker. But it seems to be toyed with...\n\nThis is an interactive problem.\n\nThere is a hidden binary array $a$ of length $n$ ($\\mathbf{n}$ is a power of 2) and a hidden integer $k\\ (2 \\le k \\le n - 1)$. The array $a$ contains exactly one 1 (and all other elements are 0). For two integers $l$ and $r$ ($1 \\le l \\le r \\le n$), define the range sum $s(l, r) = a_l + a_{l+1} + \\cdots + a_r$.\n\nYou have a magical device that takes ranges and returns range sums, but it returns the opposite result when the range has length at least $k$. Formally, in one query, you can give it a pair of integers $[l, r]$ where $1 \\le l \\le r \\le n$, and it will return either $0$ or $1$ according to the following rules:\n\n- If $r - l + 1 < k$, it will return $s(l, r)$.\n- If $r - l + 1 \\ge k$, it will return $1 - s(l, r)$.\n\nFind $k$ using at most $33$ queries.\n\nThe device is not adaptive. It means that the hidden $a$ and $k$ are fixed before the interaction and will not change during the interaction.\n\n### Interaction\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 500$). The description of the test cases follows.\n\nThe first line of each test case contains one positive integer $n$ ($4 \\le n \\le 2^{30}$) — the length of the hidden array. It is guaranteed that $\\mathbf{n}$ is a power of 2; that is, $n = 2^m$ for some non-negative integer $m$.\n\nYou can make queries in the following way — print one line of the form \"$\\mathtt{?}\\,l\\,r$\" where $1 \\le l \\le r \\le n$. After that, read a single integer: $0$ or $1$, as described in the statement.\n\nIf you want to print the answer $k$, output \"$\\mathtt{!}\\,k$\". Then, the interaction continues with the next test case.\n\nPrinting the answer does not count towards the number of queries made.\n\nAfter printing each query do not forget to output the end of line and flush$^{\\text{∗}}$ the output. Otherwise, you will get Idleness limit exceeded verdict.\n\nIf, at any interaction step, you read $-1$ instead of valid data, your solution must exit immediately. This means that your solution will receive Wrong answer because of an invalid query or any other mistake. Failing to exit can result in an arbitrary verdict because your solution will continue to read from a closed stream.\n\nHacks\n\nThe format of the hacks should be the following: the first line should contain one integer $t$ ($1 \\le t \\le 100$) — the number of test cases. The description of the test cases should follow.\n\nThe first and only line of each test case should contain three integers $n$, $p$, and $k$ ($4 \\le n \\le 2^{30}$, $1 \\le p \\le n$, $2 \\le k \\le n - 1$) — the length of the hidden array $a$, the position of the only 1 in $a$, and the hidden $k$. $n$ must be a power of $2$.\n\n$^{\\text{∗}}$To flush, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- sys.stdout.flush() in Python;\n- see the documentation for other languages.\n\n### Example\n\n#### Input #1\n\n```\n2\n8\n\n0\n\n0\n\n1\n\n0\n\n4\n\n1\n\n0```\n\n#### Output #1\n\n```\n? 3 5\n\n? 1 8\n\n? 4 8\n\n? 3 8\n\n! 6\n\n? 3 3\n\n? 3 4\n\n! 2\n```\n\n### Note\n\nIn the first test case, $k = 6$ and the 1 in the hidden array is at index 6, so $a = [0, 0, 0, 0, 0, 1, 0, 0]$.\n\n- For the query 3 5, since $5-3+1 = 3 < k$, the device answers correctly. Since 6 is not contained in the range $[3, 5]$, the device answers $0$.\n- For the query 1 8, since $8 - 1 + 1 = 8 \\ge k$, the device answers $0$ incorrectly.\n- For the query 4 8, since $8 - 4 + 1 = 5 < k$, the device answers $1$ correctly.\n- For the query 3 8, since $8 - 3 + 1 = 6 \\ge k$, the device answers $0$ incorrectly.\n\nThe example solution then outputs $6$ as the answer, which is correct.\n\nIn the second test case, $k = 2$ and the 1 in the hidden array is at index 3, so $a = [0, 0, 1, 0]$.\n\nNote that the example solution may not have enough information to determine $k$ above; this is only an example.", "cfid": "2049E"}
{"problem_id": "2049D", "problem_title": "D. Shift + Esc", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2049/D", "problem_statement": "After having fun with a certain contraption and getting caught, Evirir the dragon decides to put their magical skills to good use — warping reality to escape fast!\n\nYou are given a grid with $n$ rows and $m$ columns of non-negative integers and an integer $k$. Let $(i, j)$ denote the cell in the $i$-th row from the top and $j$-th column from the left ($1 \\le i \\le n$, $1 \\le j \\le m$). For every cell $(i, j)$, the integer $a_{i, j}$ is written on the cell $(i, j)$.\n\nYou are initially at $(1, 1)$ and want to go to $(n, m)$. You may only move down or right. That is, if you are at $(i, j)$, you can only move to $(i+1, j)$ or $(i, j+1)$ (if the corresponding cell exists).\n\nBefore you begin moving, you may do the following operation any number of times:\n\n- Choose an integer $i$ between $1$ and $n$ and cyclically shift row $i$ to the left by $1$. Formally, simultaneously set $a_{i,j}$ to $a_{i,(j \\bmod m) + 1}$ for all integers $j$ ($1 \\le j \\le m$).\n\nNote that you may not do any operation after you start moving.\n\nAfter moving from $(1, 1)$ to $(n, m)$, let $x$ be the number of operations you have performed before moving, and let $y$ be the sum of the integers written on visited cells (including $(1, 1)$ and $(n, m)$). Then the cost is defined as $kx + y$.\n\nFind the minimum cost to move from $(1, 1)$ to $(n, m)$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line contains three space-separated integers $n$, $m$, and $k$ ($1 \\leq n, m \\leq 200$, $0 \\leq k \\leq 10^9$).\n\nThen, $n$ lines follow. The $i$-th line contains $m$ space-separated integers, $a_{i,1},\\,a_{i,2},\\,\\ldots,\\,a_{i,m}$ ($0 \\leq a_{i,j} \\leq 10^9$).\n\nIt is guaranteed that the sum of $n \\cdot m$ over all test cases does not exceed $5 \\cdot 10^4$.\n\n### Output\n\nFor each test case, output a single integer, the minimum cost to move from $(1, 1)$ to $(n, m)$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3 3 100\n\n3 4 9\n\n5 2 4\n\n0 101 101\n\n3 4 1\n\n10 0 0 10\n\n0 0 10 0\n\n10 10 0 10\n\n1 1 3\n\n4\n\n3 2 3\n\n1 2\n\n3 6\n\n5 4\n\n10 10 14\n\n58 49 25 12 89 69 8 49 71 23\n\n45 27 65 59 36 100 73 23 5 84\n\n82 91 54 92 53 15 43 46 11 65\n\n61 69 71 87 67 72 51 42 55 80\n\n1 64 8 54 61 70 47 100 84 50\n\n86 93 43 51 47 35 56 20 33 61\n\n100 59 5 68 15 55 69 8 8 60\n\n33 61 20 79 69 51 23 24 56 28\n\n67 76 3 69 58 79 75 10 65 63\n\n6 64 73 79 17 62 55 53 61 58\n\n```\n\n#### Output #1\n\n```\n113\n6\n4\n13\n618\n```\n\n### Note\n\nIn the first test case, the minimum cost of $113$ can be achieved as follows:\n\n1. Cyclically shift row 3 once. The grid now becomes \n\n$$\\begin{bmatrix}3 & 4 & 9\\\\5 & 2 & 4\\\\101 & 101 & 0\\end{bmatrix}.$$\n\n2. Move as follows: $(1, 1) \\to (1, 2) \\to (2, 2) \\to (2, 3) \\to (3, 3)$.\n\n$x = 1$ operation is done before moving. The sum of integers on visited cells is $y = 3 + 4 + 2 + 4 + 0 = 13$. Therefore, the cost is $kx + y = 100 \\cdot 1 + 13 = 113$.\n\nIn the second test case, one can shift row 1 once, row 2 twice, and row 3 thrice. Then, the grid becomes \n\n$$\\begin{bmatrix}0 & 0 & 10 & 10\\\\10 & 0 & 0 & 0\\\\10 & 10 & 10 & 0\\end{bmatrix}.$$\n\nx = 6$ operations were done before moving, and there is a path of cost $y = 0$. Therefore, the cost is $6 \\cdot 1 + 0 = 6$.", "cfid": "2049D"}
{"problem_id": "2048G", "problem_title": "G. Kevin and Matrices", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2048/G", "problem_statement": "Kevin has been transported to Sacred Heart Hospital, which contains all the $ n \\times m $ matrices with integer values in the range $ [1,v] $.\n\nNow, Kevin wants to befriend some matrices, but he is willing to befriend a matrix $ a $ if and only if the following condition is satisfied:\n\n\n\n$$ \\min_{1\\le i\\le n}\\left(\\max_{1\\le j\\le m}a_{i,j}\\right)\\le\\max_{1\\le j\\le m}\\left(\\min_{1\\le i\\le n}a_{i,j}\\right). $$\n\nPlease count how many matrices in Sacred Heart Hospital can be friends with Kevin.\n\nSince Kevin is very friendly, there could be many matrices that meet this condition. Therefore, you only need to output the result modulo $998\\,244\\,353$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $ t $ ($ 1 \\le t \\le 8\\cdot 10^3 $).\n\nThe only line of each test case contains three integers $n$, $m$, $v$ ($ 1 \\le n, v, n \\cdot v \\leq 10^6$, $1 \\le m \\le 10^9 $).\n\nIt is guaranteed that the sum of $ n \\cdot v $ over all test cases doesn't exceed $ 10^6 $.\n\n### Output\n\nFor each test case, output one integer — the number of matrices that can be friends with Kevin modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2 2 2\n\n2 3 4\n\n11 45 14\n\n```\n\n#### Output #1\n\n```\n14\n2824\n883799966\n```\n\n### Note\n\nIn the first test case, besides the matrices $ a=\\begin{bmatrix}1&2\\\\2&1\\end{bmatrix} $ and $ a=\\begin{bmatrix}2&1\\\\1&2\\end{bmatrix} $, which do not satisfy the condition, the remaining $ 2^{2 \\cdot 2} - 2 = 14 $ matrices can all be friends with Kevin.", "cfid": "2048G"}
{"problem_id": "2048F", "problem_title": "F. Kevin and Math Class", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2048/F", "problem_statement": "Kevin is a student from Eversleeping Town, currently attending a math class where the teacher is giving him division exercises.\n\nOn the board, there are two rows of positive integers written, each containing $ n $ numbers. The first row is $ a_1, a_2, \\ldots, a_n $, and the second row is $ b_1, b_2, \\ldots, b_n $.\n\nFor each division exercise, Kevin can choose any segment $ [l, r] $ and find the smallest value $ x $ among $ b_l, b_{l+1}, \\ldots, b_r $. He will then modify each $ a_i $ for $ l \\leq i \\leq r $ to be the ceiling of $ a_i $ divided by $ x $.\n\nFormally, he selects two integers $ 1 \\leq l \\leq r \\leq n $, sets $ x = \\min_{l \\leq i \\leq r} b_i $, and changes all $ a_i $ for $ l \\leq i \\leq r $ to $ \\lceil \\frac{a_i}{x} \\rceil $.\n\nKevin can leave class and go home when all $ a_i $ become $ 1 $. He is eager to leave and wants to know the minimum number of division exercises required to achieve this.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $ t $ ($ 1 \\le t \\le 10^4 $).\n\nThe first line of each test case contains an integer $ n $ ($ 1 \\le n \\leq 2 \\cdot 10^5 $) — the length of the sequence $ a $ and $ b $.\n\nThe second line of each test case contains $ n $ integers $ a_1, a_2, \\ldots, a_n $ ($ 1 \\le a_i \\le 10^{18} $) — the first row of integers on the board.\n\nThe third line of each test case contains $ n $ integers $ b_1, b_2, \\ldots, b_n $ ($ 2 \\le b_i \\le 10^{18} $) — the second row of integers on the board.\n\nIt is guaranteed that the sum of $ n $ over all test cases doesn't exceed $ 2 \\cdot 10^5 $.\n\n### Output\n\nFor each test case, output one integer — the minimum number of division exercises required to leave class.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3\n\n5 4 2\n\n6 3 2\n\n5\n\n3 6 1 3 2\n\n3 5 3 2 2\n\n6\n\n8 3 3 7 5 8\n\n3 2 3 4 2 3\n\n```\n\n#### Output #1\n\n```\n2\n3\n3\n```\n\n### Note\n\nFor the first test case: $ [{\\color{red}{5,4}},2]\\xrightarrow[\\min(b_1,b_2)=3]{\\text{operate segment }[1,2]}[{\\color{red}{2,2,2}}]\\xrightarrow[\\min(b_1,b_2,b_3)=2]{\\text{operate segment }[1,3]}[1,1,1] $.\n\nFor the second test case: $ [{\\color{red}{3,6,1}},3,2]\\xrightarrow[\\min(b_1,b_2,b_3)=3]{\\text{operate segment }[1,3]}[1,{\\color{red}{2,1,3}},2]\\xrightarrow[\\min(b_2,b_3,b_4)=2]{\\text{operate segment }[2,4]}[1,1,1,{\\color{red}{2,2}}]\\xrightarrow[\\min(b_4,b_5)=2]{\\text{operate segment }[4,5]}[1,1,1,1,1] $.", "cfid": "2048F"}
{"problem_id": "2048E", "problem_title": "E. Kevin and Bipartite Graph", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2048/E", "problem_statement": "The Arms Factory needs a poster design pattern and finds Kevin for help.\n\nA poster design pattern is a bipartite graph with $ 2n $ vertices in the left part and $ m $ vertices in the right part, where there is an edge between each vertex in the left part and each vertex in the right part, resulting in a total of $ 2nm $ edges.\n\nKevin must color each edge with a positive integer in the range $ [1, n] $. A poster design pattern is good if there are no monochromatic cycles$^{\\text{∗}}$ in the bipartite graph.\n\nKevin needs your assistance in constructing a good bipartite graph or informing him if it is impossible.\n\n$^{\\text{∗}}$A monochromatic cycle refers to a simple cycle in which all the edges are colored with the same color.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $ t $ ($ 1 \\le t \\le 100 $).\n\nThe only line of each test case contains two integers $ n $ and $ m $ ($ 1 \\le n, m \\leq 10^3 $) — the bipartite graph has $ 2n $ vertices in the left part and $ m $ vertices in the right part.\n\nIt is guaranteed that both the sum of $ n $ and the sum of $ m $ over all test cases do not exceed $ 10^3 $.\n\n### Output\n\nFor each test case, if there is no solution, then output No.\n\nOtherwise, output Yes, and then output $ 2n $ lines, with each line containing $ m $ positive integers. The $ i $-th line's $ j $-th integer represents the color of the edge between the $ i $-th vertex in the left part and the $ j $-th vertex in the right part.\n\nIf there are multiple answers, you can print any of them.\n\nYou can output each letter in any case (for example, the strings yEs, yes, Yes, and YES will be recognized as a positive answer).\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2 2\n\n3 7\n\n5 4\n\n```\n\n#### Output #1\n\n```\nYES\n1 2\n2 1\n2 2\n2 1\nNO\nYES\n1 1 1 1\n1 2 2 2\n1 2 3 3\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n```\n\n### Note\n\nFor the first test case, the graph is shown as follows:\n\n![](https://espresso.codeforces.com/820af5656123195e8f3a7204d13e75d5825110b3.png)\n\nFor the second test case, it can be proven that there is no valid solution.", "cfid": "2048E"}
{"problem_id": "2044F", "problem_title": "F. Easy Demon Problem", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2044/F", "problem_statement": "For an arbitrary grid, Robot defines its beauty to be the sum of elements in the grid.\n\nRobot gives you an array $a$ of length $n$ and an array $b$ of length $m$. You construct a $n$ by $m$ grid $M$ such that $M_{i,j}=a_i\\cdot b_j$ for all $1 \\leq i \\leq n$ and $1 \\leq j \\leq m$.\n\nThen, Robot gives you $q$ queries, each consisting of a single integer $x$. For each query, determine whether or not it is possible to perform the following operation exactly once so that $M$ has a beauty of $x$:\n\n1. Choose integers $r$ and $c$ such that $1 \\leq r \\leq n$ and $1 \\leq c \\leq m$\n2. Set $M_{i,j}$ to be $0$ for all ordered pairs $(i,j)$ such that $i=r$, $j=c$, or both.\n\nNote that queries are not persistent, meaning that you do not actually set any elements to $0$ in the process — you are only required to output if it is possible to find $r$ and $c$ such that if the above operation is performed, the beauty of the grid will be $x$. Also, note that you must perform the operation for each query, even if the beauty of the original grid is already $x$.\n\n### Input\n\nThe first line contains three integers $n$, $m$, and $q$ ($1 \\leq n,m \\leq 2\\cdot 10^5, 1 \\leq q \\leq 5\\cdot 10^4$) — the length of $a$, the length of $b$, and the number of queries respectively.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\leq |a_i| \\leq n$).\n\nThe third line contains $m$ integers $b_1, b_2, \\ldots, b_m$ ($0 \\leq |b_i| \\leq m$).\n\nThe following $q$ lines each contain a single integer $x$ ($1 \\leq |x| \\leq 2\\cdot 10^5$), the beauty of the grid you wish to achieve by setting all elements in a row and a column to $0$.\n\n### Output\n\nFor each testcase, output \"YES\" (without quotes) if there is a way to perform the aforementioned operation such that the beauty is $x$, and \"NO\" (without quotes) otherwise.\n\nYou can output \"YES\" and \"NO\" in any case (for example, strings \"yES\", \"yes\" and \"Yes\" will be recognized as a positive response).\n\n### Examples\n\n#### Input #1\n\n```\n\n3 3 6\n\n-2 3 -3\n\n-2 2 -1\n\n-1\n\n1\n\n-2\n\n2\n\n-3\n\n3\n\n```\n\n#### Output #1\n\n```\nNO\nYES\nNO\nNO\nYES\nNO\n```\n\n#### Input #2\n\n```\n\n5 5 6\n\n1 -2 3 0 0\n\n0 -2 5 0 -3\n\n4\n\n-3\n\n5\n\n2\n\n-1\n\n2\n\n```\n\n#### Output #2\n\n```\nYES\nYES\nYES\nYES\nNO\nYES\n```\n\n### Note\n\nIn the second example, the grid is\n\n0 -2 5 0 -3\n\n0 4 -10 0 6\n\n0 -6 15 0 -9\n\n0 0 0 0 0\n\n0 0 0 0 0\n\nBy performing the operation with $r=4$ and $c=2$, we create the following grid:\n\n0 0 5 0 -3\n\n0 0 -10 0 6\n\n0 0 15 0 -9\n\n0 0 0 0 0\n\n0 0 0 0 0\n\nwhich has beauty $4$. Thus, we output YES.\n\nIn the second query, selecting $r=3$ and $c=5$ creates a grid with beauty $-3$.\n\nIn the third query, selecting $r=3$ and $c=3$ creates a grid with beauty $5$.", "cfid": "2044F"}
{"problem_id": "2044H", "problem_title": "H. Hard Demon Problem", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2044/H", "problem_statement": "Swing is opening a pancake factory! A good pancake factory must be good at flattening things, so Swing is going to test his new equipment on 2D matrices.\n\nSwing is given an $n \\times n$ matrix $M$ containing positive integers. He has $q$ queries to ask you.\n\nFor each query, he gives you four integers $x_1$, $y_1$, $x_2$, $y_2$ and asks you to flatten the submatrix bounded by $(x_1, y_1)$ and $(x_2, y_2)$ into an array $A$. Formally, $A = [M_{(x1,y1)}, M_{(x1,y1+1)}, \\ldots, M_{(x1,y2)}, M_{(x1+1,y1)}, M_{(x1+1,y1+1)}, \\ldots, M_{(x2,y2)}]$.\n\nThe following image depicts the flattening of a submatrix bounded by the red dotted lines. The orange arrows denote the direction that the elements of the submatrix are appended to the back of $A$, and $A$ is shown at the bottom of the image.\n\n![](https://espresso.codeforces.com/b83ac0f3bd1237eacc365e25bc42c255be96bbfb.png)\n\nAfterwards, he asks you for the value of $\\sum_{i=1}^{|A|} A_i \\cdot i$ (sum of $A_i \\cdot i$ over all $i$).\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^3$) — the number of test cases.\n\nThe first line of each test contains two integers $n$ and $q$ ($1 \\leq n \\leq 2000, 1 \\leq q \\leq 10^6$) — the length of $M$ and the number of queries.\n\nThe following $n$ lines contain $n$ integers each, the $i$'th of which contains $M_{(i,1)}, M_{(i,2)}, \\ldots, M_{(i,n)}$ ($1 \\leq M_{(i, j)} \\leq 10^6$).\n\nThe following $q$ lines contain four integers $x_1$, $y_1$, $x_2$, and $y_2$ ($1 \\leq x_1 \\leq x_2 \\leq n, 1 \\leq y_1 \\leq y_2 \\leq n$) — the bounds of the query.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2000$ and the sum of $q$ over all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case, output the results of the $q$ queries on a new line.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n4 3\n\n1 5 2 4\n\n4 9 5 3\n\n4 5 2 3\n\n1 5 5 2\n\n1 1 4 4\n\n2 2 3 3\n\n1 2 4 3\n\n3 3\n\n1 2 3\n\n4 5 6\n\n7 8 9\n\n1 1 1 3\n\n1 3 3 3\n\n2 2 2 2\n\n```\n\n#### Output #1\n\n```\n500 42 168\n14 42 5\n```\n\n### Note\n\nIn the second query of the first test case, $A = [9, 5, 5, 2]$. Therefore, the sum is $1 \\cdot 9 + 2 \\cdot 5 + 3 \\cdot 5 + 4 \\cdot 2 = 42$.", "cfid": "2044H"}
{"problem_id": "2044G2", "problem_title": "G2. Medium Demon Problem (hard version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2044/G2", "problem_statement": "This is the hard version of the problem. The key difference between the two versions is highlighted in bold.\n\nA group of $n$ spiders has come together to exchange plushies. Initially, each spider has $1$ plushie. Every year, if spider $i$ has at least one plushie, he will give exactly one plushie to spider $r_i$. Otherwise, he will do nothing. Note that all plushie transfers happen at the same time. In this version, each spider is allowed to have more than 1 plushie at any point in time.\n\nThe process is stable in the current year if each spider has the same number of plushies (before the current year's exchange) as he did the previous year (before the previous year's exchange). Note that year $1$ can never be stable.\n\nFind the first year in which the process becomes stable.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe first line of each test case contains an integer $n$ ($2 \\leq n \\leq 2 \\cdot 10^5$) — the number of spiders.\n\nThe following line contains $n$ integers $r_1, r_2, \\ldots, r_n$ ($1 \\leq r_i \\leq n, r_i \\neq i$) — the recipient of the plushie of each spider.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output an integer on a new line, the first year in which the process becomes stable.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n2\n\n2 1\n\n5\n\n2 3 4 5 1\n\n5\n\n2 1 4 2 3\n\n5\n\n4 1 1 5 4\n\n10\n\n4 3 9 1 6 7 9 10 10 3\n\n```\n\n#### Output #1\n\n```\n2\n2\n5\n5\n5\n```\n\n### Note\n\nFor the second test case:\n\n- At year $1$, the following array shows the number of plushies each spider has: $[1, 1, 1, 1, 1]$. Then, year $1$'s exchange happens.\n- At year $2$, the following array shows the number of plushies each spider has: $[1, 1, 1, 1, 1]$. Since this array is the same as the previous year, this year is stable.\n\nFor the third test case:\n\n- At year $1$, the following array shows the number of plushies each spider has: $[1, 1, 1, 1, 1]$. Then, year $1$'s exchange happens.\n- At year $2$, the following array shows the number of plushies each spider has: $[1, 2, 1, 1, 0]$. Then, year $2$'s exchange happens.\n- At year $3$, the following array shows the number of plushies each spider has: $[1, 3, 0, 1, 0]$. Then, year $3$'s exchange happens.\n- At year $4$, the following array shows the number of plushies each spider has: $[1, 4, 0, 0, 0]$. Then, year $4$'s exchange happens.\n- At year $5$, the following array shows the number of plushies each spider has: $[1, 4, 0, 0, 0]$. Since this array is the same as the previous year, this year is stable.", "cfid": "2044G2"}
{"problem_id": "2040E", "problem_title": "E. Control of Randomness", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2040/E", "problem_statement": "You are given a tree with $n$ vertices.\n\nLet's place a robot in some vertex $v \\ne 1$, and suppose we initially have $p$ coins. Consider the following process, where in the $i$-th step (starting from $i = 1$):\n\n- If $i$ is odd, the robot moves to an adjacent vertex in the direction of vertex $1$;\n- Else, $i$ is even. You can either pay one coin (if there are some left) and then the robot moves to an adjacent vertex in the direction of vertex $1$, or not pay, and then the robot moves to an adjacent vertex chosen uniformly at random.\n\nThe process stops as soon as the robot reaches vertex $1$. Let $f(v, p)$ be the minimum possible expected number of steps in the process above if we spend our coins optimally.\n\nAnswer $q$ queries, in the $i$-th of which you have to find the value of $f(v_i, p_i)$, modulo$^{\\text{∗}}$ $998\\,244\\,353$.\n\n$^{\\text{∗}}$ Formally, let $M = 998\\,244\\,353$. It can be shown that the answer can be expressed as an irreducible fraction $\\frac{p}{q}$, where $p$ and $q$ are integers and $q \\not \\equiv 0 \\pmod{M}$. Output the integer equal to $p \\cdot q^{-1} \\bmod M$. In other words, output such an integer $x$ that $0 \\le x < M$ and $x \\cdot q \\equiv p \\pmod{M}$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^3$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $q$ ($2 \\le n \\le 2 \\cdot 10^3$; $1 \\le q \\le 2 \\cdot 10^3$) — the number of vertices in the tree and the number of queries.\n\nThe next $n - 1$ lines contain the edges of the tree, one edge per line. The $i$-th line contains two integers $u_i$ and $v_i$ ($1 \\le u_i, v_i \\le n$; $u_i \\neq v_i$), denoting the edge between the nodes $u_i$ and $v_i$.\n\nThe next $q$ lines contain two integers $v_i$ and $p_i$ ($2 \\le v_i \\le n$; $0 \\le p_i \\le n$).\n\nIt's guaranteed that the given edges form a tree.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10 ^ 3$.\n\nIt is guaranteed that the sum of $q$ over all test cases does not exceed $2 \\cdot 10 ^ 3$.\n\n### Output\n\nFor each test case, print $q$ integers: the values of $f(v_i, p_i)$ modulo $998\\,244\\,353$.\n\nFormally, let $M = 998\\,244\\,353$. It can be shown that the answer can be expressed as an irreducible fraction $\\frac{p}{q}$, where $p$ and $q$ are integers and $q \\not \\equiv 0 \\pmod{M}$. Output the integer equal to $p \\cdot q^{-1} \\bmod M$. In other words, output such an integer $x$ that $0 \\le x < M$ and $x \\cdot q \\equiv p \\pmod{M}$.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n4 4\n\n1 2\n\n2 3\n\n2 4\n\n2 0\n\n3 0\n\n4 0\n\n3 1\n\n12 10\n\n1 2\n\n2 3\n\n2 4\n\n1 5\n\n5 6\n\n6 7\n\n6 8\n\n6 9\n\n8 10\n\n10 11\n\n10 12\n\n6 0\n\n9 0\n\n10 0\n\n11 0\n\n3 1\n\n7 1\n\n10 1\n\n12 1\n\n12 2\n\n11 12\n\n```\n\n#### Output #1\n\n```\n1\n6\n6\n2\n4\n9\n8\n15\n2\n3\n6\n9\n5\n5\n```\n\n### Note\n\nThe tree in the first test case:\n\n![](https://espresso.codeforces.com/e4dd6d29016ec239c8901966b682432022feee23.png)\n\nIn the first query, the expected value is equal to $1$, since the robot starts moving from vertex $2$ to vertex $1$ in the first step and the process stops.\n\nLet's calculate the expected value in the second query ($x$ is the number of steps):\n\n- $P(x < 2) = 0$, the distance to vertex $1$ is $2$ and the robot cannot reach it in fewer steps.\n- $P(x = 2) = \\frac{1}{3}$, since there is only one sequence of steps leading to $x = 2$. This is $3 \\rightarrow_{1} 2 \\rightarrow_{0.33} 1$ with probability $1 \\cdot \\frac{1}{3}$.\n- $P(x \\bmod 2 = 1) = 0$, since the robot can reach vertex $1$ by only taking an even number of steps.\n- $P(x = 4) = \\frac{2}{9}$: possible paths $3 \\rightarrow_{1} 2 \\rightarrow_{0.67} [3, 4] \\rightarrow_{1} 2 \\rightarrow_{0.33} 1$.\n- $P(x = 6) = \\frac{4}{27}$: possible paths $3 \\rightarrow_{1} 2 \\rightarrow_{0.67} [3, 4] \\rightarrow_{1} 2 \\rightarrow_{0.67} [3, 4] \\rightarrow_{1} 2 \\rightarrow_{0.33} 1$.\n- $P(x = i \\cdot 2) = \\frac{2^{i - 1}}{3^i}$ in the general case.\n\nAs a result, $f(v, p) = \\sum\\limits_{i=1}^{\\infty}{i \\cdot 2 \\cdot \\frac{2^{i - 1}}{3^i}} = 6$.\n\nThe tree in the second test case:\n\n![](https://espresso.codeforces.com/8a8969f859fff085171f272e9a14ce0d42940506.png)", "cfid": "2040E"}
{"problem_id": "2040F", "problem_title": "F. Number of Cubes", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2040/F", "problem_statement": "Consider a rectangular parallelepiped with sides $a$, $b$, and $c$, that consists of unit cubes of $k$ different colors. We can apply cyclic shifts to the parallelepiped in any of the three directions any number of times$^{\\text{∗}}$.\n\nThere are $d_i$ cubes of the $i$-th color ($1 \\le i \\le k$). How many different parallelepipeds (with the given sides) can be formed from these cubes, no two of which can be made equal by some combination of cyclic shifts?\n\n$^{\\text{∗}}$On the image:\n\n- Top left shows the top view of the original parallelepiped. Lower layers will shift in the same way as the top layer.\n- Top right shows the top view of a parallelepiped shifted to the right by $1$.\n- Bottom left shows the top view of a parallelepiped shifted down by $2$.\n- Bottom right shows the top view of a parallelepiped shifted to the right by $1$ and down by $2$.\n\n![](https://espresso.codeforces.com/57e1e41b75edfb3375b3671eb37702ca81b0c47c.png)\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 100$). The description of the test cases follows.\n\nThe first line of each test case contains four integers: $a$, $b$, $c$, and $k$ ($1 \\le a, b, c \\le 3 \\cdot 10^6$; $a \\cdot b \\cdot c \\le 3 \\cdot 10^6$; $1 \\le k \\le 10^6$) — three sides of the parallelepiped and the number of colors of unit cubes.\n\nThe second line of each test case contains $k$ integers $d_1, d_2, \\ldots, d_k$ ($1 \\le d_1 \\le d_2 \\le \\ldots \\le d_k \\le 3 \\cdot 10^6$) — the elements of the array $d$: the number of cubes of a given color.\n\nIt is guaranteed that in each test case the sum of the elements of the array $d$ is equal to $a \\cdot b \\cdot c$.\n\nIt is guaranteed that the sum of $k$ over all test cases does not exceed $10 ^ 6$.\n\n### Output\n\nFor each test case, print one integer — the number of different parallelepipeds modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n1 1 1 1\n\n1\n\n6 1 1 3\n\n1 2 3\n\n12 1 1 3\n\n2 4 6\n\n3 3 1 2\n\n3 6\n\n2 3 3 2\n\n6 12\n\n72 60 96 4\n\n17280 86400 120960 190080\n\n```\n\n#### Output #1\n\n```\n1\n10\n1160\n12\n1044\n231490207\n```\n\n### Note\n\nIn the first test case, there is only one parallelepiped, which consists of one unit cube.\n\nPossible parallelepipeds in the second test case![](https://espresso.codeforces.com/43a736d0c799ccb60b335c491fc31d86c6a7395d.png)", "cfid": "2040F"}
{"problem_id": "2040D", "problem_title": "D. Non Prime Tree", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2040/D", "problem_statement": "You are given a tree with $n$ vertices.\n\nYou need to construct an array $a_1, a_2, \\ldots, a_n$ of length $n$, consisting of unique integers from $1$ to $2 \\cdot n$, and such that for each edge $u_i \\leftrightarrow v_i$ of the tree, the value $|a_{u_i} - a_{v_i}|$ is not a prime number.\n\nFind any array that satisfies these conditions, or report that there is no such array.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$) — the number of vertices in the tree.\n\nThe next $n - 1$ lines contain the edges of the tree, one edge per line. The $i$-th line contains two integers $u_i$ and $v_i$ ($1 \\le u_i, v_i \\le n$; $u_i \\neq v_i$), denoting the edge between the nodes $u_i$ and $v_i$.\n\nIt's guaranteed that the given edges form a tree.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10 ^ 5$.\n\n### Output\n\nFor each test case, if an array that satisfies the conditions exists, print its elements $a_1, a_2, \\ldots, a_n$. Otherwise, print $-1$.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n5\n\n1 2\n\n2 3\n\n2 4\n\n3 5\n\n7\n\n1 2\n\n1 3\n\n2 4\n\n3 5\n\n3 6\n\n3 7\n\n```\n\n#### Output #1\n\n```\n2 10 1 6 5\n8 7 12 1 4 6 3\n```\n\n### Note\n\nThe possible answers are shown below. Instead of the vertex numbers, the corresponding elements of the array $a$ are written in them.\n\nThe image of the tree in the first test case![](https://espresso.codeforces.com/5ca65da19933368698c761665282cb25069ce311.png)The image of the tree in the second test case![](https://espresso.codeforces.com/b60d252fcad91d0d0847a645925436a7e9ba10b3.png)", "cfid": "2040D"}
{"problem_id": "2050G", "problem_title": "G. Tree Destruction", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2050/G", "problem_statement": "Given a tree$^{\\text{∗}}$ with $n$ vertices. You can choose two vertices $a$ and $b$ once and remove all vertices on the path from $a$ to $b$, including the vertices themselves. If you choose $a=b$, only one vertex will be removed.\n\nYour task is to find the maximum number of connected components$^{\\text{†}}$ that can be formed after removing the path from the tree.\n\n$^{\\text{∗}}$A tree is a connected graph without cycles.\n\n$^{\\text{†}}$A connected component is a set of vertices such that there is a path along the edges from any vertex to any other vertex in the set (and it is not possible to reach vertices not belonging to this set)\n\n### Input\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains one integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$) — the size of the tree.\n\nThe next $n-1$ lines contain two integers $u$ and $v$ ($1 \\le u, v \\le n$, $u \\ne v$) — the vertices connected by an edge. It is guaranteed that the edges form a tree.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output one integer — the maximum number of connected components that can be achieved using the described operation.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n2\n\n1 2\n\n5\n\n1 2\n\n2 3\n\n3 4\n\n3 5\n\n4\n\n1 2\n\n2 3\n\n3 4\n\n5\n\n2 1\n\n3 1\n\n4 1\n\n5 4\n\n6\n\n2 1\n\n3 1\n\n4 1\n\n5 3\n\n6 3\n\n6\n\n2 1\n\n3 2\n\n4 2\n\n5 3\n\n6 4\n\n```\n\n#### Output #1\n\n```\n1\n3\n2\n3\n4\n3\n```", "cfid": "2050G"}
{"problem_id": "2046C", "problem_title": "C. Adventurers", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2046/C", "problem_statement": "Once, four Roman merchants met in a Roman mansion to discuss their trading plans. They faced the following problem: they traded the same type of goods, and if they traded in the same city, they would inevitably incur losses. They decided to divide up the cities between them where they would trade.\n\nThe map of Rome can be represented in this problem as a plane with certain points marked — the cities of the Roman Empire.\n\nThe merchants decided to choose a certain dividing point $(x_0, y_0)$. Then, in a city with coordinates $(x_i, y_i)$,\n\n- the first merchant sells goods if $x_0 \\le x_i$ and $y_0 \\le y_i$;\n- the second merchant sells goods if $x_0 > x_i$ and $y_0 \\le y_i$;\n- the third merchant sells goods if $x_0 \\le x_i$ and $y_0 > y_i$;\n- the fourth merchant sells goods if $x_0 > x_i$ and $y_0 > y_i$.\n\nThe merchants want to choose $(x_0, y_0)$ in such a way as to maximize the smallest number of cities that any of them gets (i. e., as fair as possible). Please find such a point for them.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($4 \\le n \\le 10^5$) — the number of cities on the map.\n\nEach of the next $n$ lines contains two integers $x_i, y_i$ ($-10^9 \\le x_i, y_i \\le 10^9$) — the coordinates of the cities.\n\nNote that some points may coincide. This is because some cities may be so close that they cannot be distinguished on the map at the given scale.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, in the first line, print a single integer $k$ ($0 \\le k \\le \\frac{n}{4}$) — the maximum possible number of cities that each merchant can get at a minimum.\n\nIn the second line, print two integers $x_0$ and $y_0$ ($|x_0|, |y_0| \\le 10^9$) — the coordinates of the dividing point. If there are multiple suitable points, print any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n4\n\n1 1\n\n1 2\n\n2 1\n\n2 2\n\n4\n\n0 0\n\n0 0\n\n0 0\n\n0 0\n\n8\n\n1 2\n\n2 1\n\n2 -1\n\n1 -2\n\n-1 -2\n\n-2 -1\n\n-2 1\n\n-1 2\n\n7\n\n1 1\n\n1 2\n\n1 3\n\n1 4\n\n2 1\n\n3 1\n\n4 1\n\n```\n\n#### Output #1\n\n```\n1\n2 2\n0\n0 0\n2\n1 0\n0\n0 0\n```", "cfid": "2046C"}
{"problem_id": "2046E1", "problem_title": "E1. Cheops and a Contest (Easy Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2046/E1", "problem_statement": "This is the easy version of the problem. The difference between the versions is that in this version, $m$ equals $2$. You can hack only if you solved all versions of this problem.\n\nThere is a problem-solving competition in Ancient Egypt with $n$ participants, numbered from $1$ to $n$. Each participant comes from a certain city; the cities are numbered from $1$ to $m$. There is at least one participant from each city.\n\nThe $i$-th participant has strength $a_i$, specialization $s_i$, and wisdom $b_i$, so that $b_i \\ge a_i$. Each problem in the competition will have a difficulty $d$ and a unique topic $t$. The $i$-th participant will solve the problem if\n\n- $a_i \\ge d$, i.e., their strength is not less than the problem's difficulty, or\n- $s_i = t$, and $b_i \\ge d$, i.e., their specialization matches the problem's topic, and their wisdom is not less than the problem's difficulty.\n\nCheops wants to choose the problems in such a way that each participant from city $i$ will solve strictly more problems than each participant from city $j$, for all $i < j$.\n\nPlease find a set of at most $5n$ problems, where the topics of all problems are distinct, so that Cheops' will is satisfied, or state that it is impossible.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $T$ ($1 \\le T \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$, $m$ ($2 \\mathbf{=} m \\le n \\le 3 \\cdot {10}^5$) — the number of participants and the number of cities.\n\nThe following $n$ lines describe the participants. The $i$-th line contains three integers —$a_i$, $b_i$, $s_i$ ($0 \\le a_i, b_i, s_i \\le {10}^9$, $a_i \\le b_i$) — strength, wisdom, and specialization of the $i$-th participant, respectively.\n\nThe next $m$ lines describe the cities. In the $i$-th line, the first number is an integer $k_i$ ($1 \\le k_i \\le n$) — the number of participants from the $i$-th city. It is followed by $k_i$ integers $q_{i, 1}, q_{i, 2}, \\ldots, q_{i, k_i}$ — ($1 \\le q_{i, j} \\le n$, $1 \\le j \\le k_i$) — the indices of the participants from this city. It is guaranteed that each participant is mentioned exactly once.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $3 \\cdot 10^5$.\n\n### Output\n\nFor each test case, if there exists a set of problems that satisfies Cheops' conditions, then in the first line output a single integer $p$ ($1 \\le p \\le 5n$) — the number of problems in your solution.\n\nThen output $p$ lines, each containing two integers $d$ and $t$ ($0 \\le d, t \\le {10}^9$) — the difficulty and topic of the respective problem. The topics must be distinct.\n\nIf there is no set of problems that meets Cheops' wishes, print $-1$ instead.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n5 2\n\n5 7 1\n\n6 7 2\n\n3 9 2\n\n5 10 3\n\n4 4 1\n\n2 1 2\n\n3 3 4 5\n\n2 2\n\n1 2 1\n\n1 2 1\n\n1 2\n\n1 1\n\n```\n\n#### Output #1\n\n```\n7\n6 4\n6 5\n5 6\n5 7\n4 8\n4 9\n7 1\n-1\n```", "cfid": "2046E1"}
{"problem_id": "2042F", "problem_title": "F. Two Subarrays", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2042/F", "problem_statement": "You are given two integer arrays $a$ and $b$, both of size $n$.\n\nLet's define the cost of the subarray $[l, r]$ as $a_l + a_{l + 1} + \\cdots + a_{r - 1} + a_r + b_l + b_r$. If $l=r$, then the cost of the subarray is $a_l + 2 \\cdot b_l$.\n\nYou have to perform queries of three types:\n\n- \"$1$ $p$ $x$\" — assign $a_{p} := x$;\n- \"$2$ $p$ $x$\" — assign $b_{p} := x$;\n- \"$3$ $l$ $r$\" — find two non-empty non-overlapping subarrays within the segment $[l, r]$ with the maximum total cost and print their total cost.\n\n### Input\n\nThe first line contains a single integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$).\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($-10^9 \\le a_i \\le 10^9$).\n\nThe third line contains $n$ integers $b_1, b_2, \\dots, b_n$ ($-10^9 \\le b_i \\le 10^9$).\n\nThe fourth line contains a single integer $q$ ($1 \\le q \\le 2 \\cdot 10^5$).\n\nThe next $q$ lines contain the queries: one per line. Each query is of one of three types:\n\n- \"$1$ $p$ $x$\" ($1 \\le p \\le n$; $-10^9 \\le x \\le 10^9$);\n- \"$2$ $p$ $x$\" ($1 \\le p \\le n$; $-10^9 \\le x \\le 10^9$);\n- \"$3$ $l$ $r$\" ($1 \\le l < r \\le n$).\n\nIt is guaranteed that there is at least one query of the third type.\n\n### Output\n\nFor each query of the third type, print the maximum possible total cost of two non-empty non-overlapping subarrays within the segment $[l, r]$.\n\n### Examples\n\n#### Input #1\n\n```\n\n7\n\n3 -1 4 -3 2 4 0\n\n0 6 1 0 -3 -2 -1\n\n6\n\n3 1 7\n\n1 2 0\n\n3 3 6\n\n2 5 -3\n\n1 3 2\n\n3 1 5\n\n```\n\n#### Output #1\n\n```\n18\n7\n16\n```\n\n#### Input #2\n\n```\n\n10\n\n2 -1 -3 -2 0 4 5 6 2 5\n\n2 -4 -5 -1 6 2 5 -6 4 2\n\n10\n\n3 6 7\n\n1 10 -2\n\n3 5 7\n\n3 2 8\n\n2 1 -5\n\n2 7 4\n\n3 1 3\n\n3 3 8\n\n3 2 3\n\n1 4 4\n\n```\n\n#### Output #2\n\n```\n23\n28\n28\n-17\n27\n-22\n```", "cfid": "2042F"}
{"problem_id": "2042E", "problem_title": "E. Vertex Pairs", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2042/E", "problem_statement": "You are given a tree consisting of $2n$ vertices. Recall that a tree is a connected undirected graph with no cycles. Each vertex has an integer from $1$ to $n$ written on it. Each value from $1$ to $n$ is written on exactly two different vertices. Each vertex also has a cost —vertex $i$ costs $2^i$.\n\nYou need to choose a subset of vertices of the tree such that:\n\n- the subset is connected; that is, from each vertex in the subset, you can reach every other vertex in the subset by passing only through the vertices in the subset;\n- each value from $1$ to $n$ is written on at least one vertex in the subset.\n\nAmong all such subsets, you need to find the one with the smallest total cost of the vertices in it. Note that you are not required to minimize the number of vertices in the subset.\n\n### Input\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$).\n\nThe second line contains $2n$ integers $a_1, a_2, \\dots, a_{2n}$ ($1 \\le a_i \\le n$). Each value from $1$ to $n$ appears exactly twice.\n\nEach of the next $2n-1$ lines contains two integers $v$ and $u$ ($1 \\le v, u \\le 2n$) — the edges of the tree. These edges form a valid tree.\n\n### Output\n\nIn the first line, print a single integer $k$ — the number of vertices in the subset.\n\nIn the second line, print $k$ distinct integers from $1$ to $2n$ — the indices of the vertices in the chosen subset. The vertices can be printed in an arbitrary order.\n\n### Examples\n\n#### Input #1\n\n```\n\n3\n\n1 1 3 2 3 2\n\n4 2\n\n1 6\n\n6 2\n\n6 3\n\n2 5\n\n```\n\n#### Output #1\n\n```\n3\n2 4 5\n```\n\n#### Input #2\n\n```\n\n3\n\n2 3 1 3 2 1\n\n6 4\n\n2 4\n\n5 2\n\n3 6\n\n3 1\n\n```\n\n#### Output #2\n\n```\n4\n1 3 4 6\n```\n\n#### Input #3\n\n```\n\n6\n\n5 2 3 4 6 4 2 5 6 1 1 3\n\n10 8\n\n2 10\n\n12 7\n\n4 10\n\n5 9\n\n6 2\n\n1 9\n\n3 4\n\n12 6\n\n11 5\n\n4 5\n\n```\n\n#### Output #3\n\n```\n6\n2 3 4 5 8 10\n```\n\n### Note\n\n![](https://espresso.codeforces.com/dbaf0c03e6466f3b077e29f011d0bc2be9d080da.png)\n\nThe images show the answers to the first two examples. The numbers in parentheses are the values written on the vertices.\n\nIn the first example, there are valid subsets such as: $[2, 4, 5]$ (with a cost of $2^2 + 2^4 + 2^5 = 52$), $[2, 4, 5, 6]$ (with a cost of $116$), $[1, 6, 3]$ (with a cost of $74$), $[2, 6, 3]$ (with a cost of $76$), and many others.\n\nIn the second example, the cost of the subset $[4, 6, 3, 1]$ is $90$.", "cfid": "2042E"}
{"problem_id": "2042D", "problem_title": "D. Recommendations", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2042/D", "problem_statement": "Suppose you are working in some audio streaming service. The service has $n$ active users and $10^9$ tracks users can listen to. Users can like tracks and, based on likes, the service should recommend them new tracks.\n\nTracks are numbered from $1$ to $10^9$. It turned out that tracks the $i$-th user likes form a segment $[l_i, r_i]$.\n\nLet's say that the user $j$ is a predictor for user $i$ ($j \\neq i$) if user $j$ likes all tracks the $i$-th user likes (and, possibly, some other tracks too).\n\nAlso, let's say that a track is strongly recommended for user $i$ if the track is not liked by the $i$-th user yet, but it is liked by every predictor for the $i$-th user.\n\nCalculate the number of strongly recommended tracks for each user $i$. If a user doesn't have any predictors, then print $0$ for that user.\n\n### Input\n\nThe first line contains one integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. Next, $t$ cases follow.\n\nThe first line of each test case contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) — the number of users.\n\nThe next $n$ lines contain two integers $l_i$ and $r_i$ per line ($1 \\le l_i \\le r_i \\le 10^9$) — the segment of tracks the $i$-th user likes.\n\nAdditional constraint on the input: the sum of $n$ over all test cases doesn't exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print $n$ integers, where the $i$-th integer is the number of strongly recommended tracks for the $i$-th user (or $0$, if that user doesn't have any predictors).\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3\n\n3 8\n\n2 5\n\n4 5\n\n2\n\n42 42\n\n1 1000000000\n\n3\n\n42 42\n\n1 1000000000\n\n42 42\n\n6\n\n1 10\n\n3 10\n\n3 7\n\n5 7\n\n4 4\n\n1 2\n\n```\n\n#### Output #1\n\n```\n0\n0\n1\n999999999\n0\n0\n0\n0\n0\n2\n3\n2\n4\n8\n```\n\n### Note\n\nIn the first test case:\n\n- the first user has no predictors;\n- the second user has no predictors;\n- the third user has two predictors: users $1$ and $2$; only track $3$ is liked by both of them and not liked by the third user.\n\nIn the second test case, the second user is a predictor for the first user. Therefore, all tracks, except $42$, are strongly recommended for the first user.\n\nIn the third test case, the first user has two predictors: users $2$ and $3$, but there is no track that is liked by them and not liked by the first user himself.", "cfid": "2042D"}
{"problem_id": "2034F1", "problem_title": "F1. Khayyam's Royal Decree (Easy Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2034/F1", "problem_statement": "This is the easy version of the problem. The only differences between the two versions are the constraints on $k$ and the sum of $k$.\n\nIn ancient Persia, [Khayyam](https://en.wikipedia.org/wiki/Omar_Khayyam), a clever merchant and mathematician, is playing a game with his prized treasure chest containing $n$ red rubies worth $2$ dinars each and $m$ blue sapphires worth $1$ dinar each. He also has a satchel, which starts empty, and $k$ scrolls with pairs $(r_1, b_1), (r_2, b_2), \\ldots, (r_k, b_k)$ that describe special conditions.\n\n![](https://espresso.codeforces.com/3576d678d9cd8a4cfa1efad5eb4bc61b9ecbcf4d.webp)\n\nThe game proceeds for $n + m$ turns as follows:\n\n1. Khayyam draws a gem uniformly at random from the chest.\n2. He removes the gem from the chest and places it in his satchel.\n3. If there exists a scroll $i$ ($1 \\leq i \\leq k$) such that the chest contains exactly $r_i$ red rubies and $b_i$ blue sapphires, Khayyam receives a royal decree that doubles the value of all the gems in his satchel as a reward for achieving a special configuration.\n\nNote that the value of some gems might be affected by multiple decrees, and in that case the gems' value is doubled multiple times.\n\nDetermine the expected value of Khayyam's satchel at the end of the game, modulo $998,244,353$.\n\nFormally, let $M = 998,244,353$. It can be shown that the exact answer can be expressed as an irreducible fraction $\\frac{p}{q}$, where $p$ and $q$ are integers and $q \\not \\equiv 0 \\pmod{M}$. Output the integer equal to $p \\cdot q^{-1} \\bmod M$. In other words, output such an integer $x$ that $0 \\le x < M$ and $x \\cdot q \\equiv p \\pmod{M}$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 500$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n$, $m$, and $k$ ($1 \\leq n, m \\leq 2 \\cdot 10^5$, $0 \\leq k \\leq 500$) — the number of red rubies, the number of blue sapphires, and the number of scrolls describing special conditions, respectively.\n\nEach of the next $k$ lines contains two integers $r_i$, $b_i$ ($0 \\leq r_i \\leq n$, $0 \\leq b_i \\leq m$, $1 \\leq r_i + b_i \\leq n+m-1$). It is guaranteed that the pairs $(r_i, b_i)$ are distinct.\n\nIt is guaranteed that the sum of $n$ and the sum of $m$ over all test cases do not exceed $2 \\cdot 10^5$, and the sum of $k$ over all test cases does not exceed $500$.\n\n### Output\n\nFor each test case, print a single integer: the expected value of Khayyam's satchel at the end of the process, modulo $998,244,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3 4 0\n\n1 1 1\n\n1 0\n\n3 3 2\n\n1 1\n\n2 2\n\n3 3 2\n\n2 1\n\n1 2\n\n10 4 5\n\n1 0\n\n8 0\n\n6 4\n\n0 2\n\n7 4\n\n```\n\n#### Output #1\n\n```\n10\n499122180\n798595498\n149736666\n414854846\n```\n\n### Note\n\nIn the first test case, at the end of the process, there will always be $3$ red rubies and $4$ blue sapphires. None of the special conditions described in the scrolls are met, so the value of Khayyam's satchel remains unchanged. The total value of the satchel at the end is always $2 \\cdot 3 + 1 \\cdot 4 = 10$.\n\nIn the second test case, consider the following two cases:\n\n- With probability $1/2$, Khayyam draws a red ruby, and the value of his satchel becomes $2$. Then with probability $1$, he draws a blue sapphire, and the value of his satchel becomes $3$.\n- With probability $1/2$, Khayyam draws a blue sapphire, and the value of his satchel becomes $1$. At this point, the chest contains $r_1 = 1$ red rubies and $b_1 = 0$ blue sapphires, which match the special condition described in a scroll. As a result, the value of the satchel is doubled to $2 \\cdot 1 = 2$. Then with probability $1$, he draws a red ruby, and the value of his satchel becomes $4$.\n\nThus, the expected value at the end is $\\frac{1}{2} \\cdot 3 + \\frac{1}{2} \\cdot 4 = \\frac{7}{2}$, which is $499,122,180$ modulo $998,244,353$.", "cfid": "2034F1"}
{"problem_id": "2034E", "problem_title": "E. Permutations Harmony", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2034/E", "problem_statement": "Rayan wants to present a gift to Reyhaneh to win her heart. However, Reyhaneh is particular and will only accept a k-harmonic set of permutations.\n\nWe define a k-harmonic set of permutations as a set of $k$ pairwise distinct permutations $p_1, p_2, \\ldots, p_k$ of size $n$ such that for every pair of indices $i$ and $j$ (where $1 \\leq i, j \\leq n$), the following condition holds:\n\n\n\n$$ p_1[i] + p_2[i] + \\ldots + p_k[i] = p_1[j] + p_2[j] + \\ldots + p_k[j] $$\n\nYour task is to help Rayan by either providing a valid k-harmonic set of permutations for given values of $n$ and $k$ or by determining that such a set does not exist.\n\nWe call a sequence of length $n$ a permutation if it contains every integer from $1$ to $n$ exactly once.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\leq t \\leq 1000$), the number of test cases.\n\nEach test case consists of two integers $n$ and $k$ ($1 \\leq n, k \\leq 10^5$). The sum of $n \\cdot k$ over all test cases does not exceed $5 \\cdot 10^5$.\n\n### Output\n\nFor each test case, if a k-harmonic set of permutations exists, print YES on the first line. Then, print $k$ lines, each containing a distinct permutation of the integers from $1$ to $n$.\n\nIf no such set exists, print NO on the first line.\n\nYou can output \"YES\" and \"NO\" in any case (for example, strings \"yEs\", \"yes\", and \"Yes\" will be recognized as a positive response).\n\nIf multiple answers are possible, you can output any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3 3\n\n4 2\n\n5 1\n\n3 2\n\n```\n\n#### Output #1\n\n```\nYES\n1 2 3\n2 3 1\n3 1 2\nYES\n1 2 3 4\n4 3 2 1\nNO\nYES\n1 2 3\n3 2 1\n```\n\n### Note\n\nIn example 1, we have $p_1 = [1, 2, 3]$, $p_2 = [2, 3, 1]$, and $p_3 = [3, 1, 2]$. It's easy to see that $p_1[1] + p_2[1] + p_3[1] = p_1[2] + p_2[2] + p_3[2] = p_1[3] + p_2[3] + p_3[3] = 6$.\n\nIn example 2, we have $p_1 = [1, 2, 3, 4]$ and $p_2 = [4, 3, 2, 1]$. It's easy to see that $p_1[1] + p_2[1] = p_1[2] + p_2[2] = p_1[3] + p_2[3] = p_1[4] + p_2[4] = 5$.\n\nIn example 3, as there are five distinct elements in $p_1$, it's obvious that the answer is \"No\".", "cfid": "2034E"}
{"problem_id": "2034F2", "problem_title": "F2. Khayyam's Royal Decree (Hard Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2034/F2", "problem_statement": "This is the hard version of the problem. The only differences between the two versions are the constraints on $k$ and the sum of $k$.\n\nIn ancient Persia, [Khayyam](https://en.wikipedia.org/wiki/Omar_Khayyam), a clever merchant and mathematician, is playing a game with his prized treasure chest containing $n$ red rubies worth $2$ dinars each and $m$ blue sapphires worth $1$ dinar each. He also has a satchel, which starts empty, and $k$ scrolls with pairs $(r_1, b_1), (r_2, b_2), \\ldots, (r_k, b_k)$ that describe special conditions.\n\n![](https://espresso.codeforces.com/3576d678d9cd8a4cfa1efad5eb4bc61b9ecbcf4d.webp)\n\nThe game proceeds for $n + m$ turns as follows:\n\n1. Khayyam draws a gem uniformly at random from the chest.\n2. He removes the gem from the chest and places it in his satchel.\n3. If there exists a scroll $i$ ($1 \\leq i \\leq k$) such that the chest contains exactly $r_i$ red rubies and $b_i$ blue sapphires, Khayyam receives a royal decree that doubles the value of all the gems in his satchel as a reward for achieving a special configuration.\n\nNote that the value of some gems might be affected by multiple decrees, and in that case the gems' value is doubled multiple times.\n\nDetermine the expected value of Khayyam's satchel at the end of the game, modulo $998,244,353$.\n\nFormally, let $M = 998,244,353$. It can be shown that the exact answer can be expressed as an irreducible fraction $\\frac{p}{q}$, where $p$ and $q$ are integers and $q \\not \\equiv 0 \\pmod{M}$. Output the integer equal to $p \\cdot q^{-1} \\bmod M$. In other words, output such an integer $x$ that $0 \\le x < M$ and $x \\cdot q \\equiv p \\pmod{M}$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 500$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n$, $m$, and $k$ ($1 \\leq n, m \\leq 2 \\cdot 10^5$, $0 \\leq k \\leq 5000$) — the number of red rubies, the number of blue sapphires, and the number of scrolls describing special conditions, respectively.\n\nEach of the next $k$ lines contains two integers $r_i$, $b_i$ ($0 \\leq r_i \\leq n$, $0 \\leq b_i \\leq m$, $1 \\leq r_i + b_i \\leq n+m-1$). It is guaranteed that the pairs $(r_i, b_i)$ are distinct.\n\nIt is guaranteed that the sum of $n$ and the sum of $m$ over all test cases do not exceed $2 \\cdot 10^5$, and the sum of $k$ over all test cases does not exceed $5000$.\n\n### Output\n\nFor each test case, print a single integer: the expected value of Khayyam's satchel at the end of the process, modulo $998,244,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3 4 0\n\n1 1 1\n\n1 0\n\n3 3 2\n\n1 1\n\n2 2\n\n3 3 2\n\n2 1\n\n1 2\n\n10 4 5\n\n1 0\n\n8 0\n\n6 4\n\n0 2\n\n7 4\n\n```\n\n#### Output #1\n\n```\n10\n499122180\n798595498\n149736666\n414854846\n```\n\n### Note\n\nIn the first test case, at the end of the process, there will always be $3$ red rubies and $4$ blue sapphires. None of the special conditions described in the scrolls are met, so the value of Khayyam's satchel remains unchanged. The total value of the satchel at the end is always $2 \\cdot 3 + 1 \\cdot 4 = 10$.\n\nIn the second test case, consider the following two cases:\n\n- With probability $1/2$, Khayyam draws a red ruby, and the value of his satchel becomes $2$. Then with probability $1$, he draws a blue sapphire, and the value of his satchel becomes $3$.\n- With probability $1/2$, Khayyam draws a blue sapphire, and the value of his satchel becomes $1$. At this point, the chest contains $r_1 = 1$ red rubies and $b_1 = 0$ blue sapphires, which match the special condition described in a scroll. As a result, the value of the satchel is doubled to $2 \\cdot 1 = 2$. Then with probability $1$, he draws a red ruby, and the value of his satchel becomes $4$.\n\nThus, the expected value at the end is $\\frac{1}{2} \\cdot 3 + \\frac{1}{2} \\cdot 4 = \\frac{7}{2}$, which is $499,122,180$ modulo $998,244,353$.", "cfid": "2034F2"}
{"problem_id": "2039F1", "problem_title": "F1. Shohag Loves Counting (Easy Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2039/F1", "problem_statement": "This is the easy version of the problem. The only differences between the two versions of this problem are the constraints on $t$, $m$, and the sum of $m$. You can only make hacks if both versions of the problem are solved.\n\nFor an integer array $a$ of length $n$, define $f(k)$ as the [greatest common divisor (GCD)](https://en.wikipedia.org/wiki/Greatest_common_divisor) of the maximum values of all subarrays$^{\\text{∗}}$ of length $k$. For example, if the array is $[2, 1, 4, 6, 2]$, then $f(3) = \\operatorname{gcd}(\\operatorname{max}([2, 1, 4]), \\operatorname{max}([1, 4, 6]), \\operatorname{max}([4, 6, 2])) = \\operatorname{gcd}(4, 6, 6) = 2$.\n\nAn array is good if $f(i) \\neq f(j)$ is satisfied over all pairs $1 \\le i \\lt j \\le n$.\n\nShohag has an integer $m$. Help him count the number, modulo $998\\,244\\,353$, of non-empty good arrays of arbitrary length such that each element of the array is an integer from $1$ to $m$.\n\n$^{\\text{∗}}$An array $d$ is a subarray of an array $c$ if $d$ can be obtained from $c$ by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first and only line of each test case contains an integer $m$ ($1 \\le m \\le 10^5$).\n\nIt is guaranteed that the sum of $m$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, output an integer — the number of valid arrays modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2\n\n5\n\n9\n\n```\n\n#### Output #1\n\n```\n4\n29\n165\n```\n\n### Note\n\nIn the first test case, the valid arrays are $[1]$, $[1, 2]$, $[2]$, and $[2, 1]$.\n\nIn the second test case, there are a total of $29$ valid arrays. In particular, the array $[2, 1, 4]$ with length $n = 3$ is valid because all elements are from $1$ to $m = 5$ and $f(1)$, $f(2)$ and $f(n = 3)$ all are distinct:\n\n- $f(1) = \\operatorname{gcd}(\\operatorname{max}([2]), \\operatorname{max}([1]), \\operatorname{max}([4])) = \\operatorname{gcd}(2, 1, 4) = 1.$\n- $f(2) = \\operatorname{gcd}(\\operatorname{max}([2, 1]), \\operatorname{max}([1, 4])) = \\operatorname{gcd}(2, 4) = 2.$\n- $f(3) = \\operatorname{gcd}(\\operatorname{max}([2, 1, 4])) = \\operatorname{gcd}(4) = 4.$", "cfid": "2039F1"}
{"problem_id": "2039E", "problem_title": "E. Shohag Loves Inversions", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2039/E", "problem_statement": "Shohag has an array $a$ of integers. Initially $a = [0, 1]$. He can repeatedly perform the following operation any number of times:\n\n- Let $k$ be the number of inversions$^{\\text{∗}}$ in the current array $a$.\n- Insert $k$ at any position in $a$, including the beginning or the end.\n\nFor example, if $a = [4, 6, 2, 4]$, then the number of inversions is $k = 3$. So Shohag can obtain the following arrays after the operation: $[\\textbf{3}, 4, 6, 2, 4]$, $[4, \\textbf{3}, 6, 2, 4]$, $[4, 6, \\textbf{3}, 2, 4]$, $[4, 6, 2, \\textbf{3}, 4]$, and $[4, 6, 2, 4, \\textbf{3}]$.\n\nGiven an integer $n$, help Shohag count, modulo $998\\,244\\,353$, the number of distinct arrays of length $n$ that can be obtained after performing the operations.\n\n$^{\\text{∗}}$The number of inversions in an array $a$ is the number of pairs of indices ($i$, $j$) such that $i < j$ and $a_i > a_j$.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first and only line of each test case contains an integer $n$ ($2 \\le n \\le 10^6$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case, output an integer — the number of possible arrays modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n4\n\n2\n\n7\n\n69\n\n```\n\n#### Output #1\n\n```\n5\n1\n682\n325188814\n```\n\n### Note\n\nIn the first test case, the following $5$ arrays can be obtained (the inserted inversion count is shown in bold):\n\n- $[0, 1] \\rightarrow [0, \\textbf{0}, 1] \\rightarrow [0, 0, 1, \\textbf{0}]$,\n- $[0, 1] \\rightarrow [0, \\textbf{0}, 1] \\rightarrow [0, 0, \\textbf{0}, 1]$,\n- $[0, 1] \\rightarrow [0, 1, \\textbf{0}] \\rightarrow [0, 1, 0, \\textbf{1}]$,\n- $[0, 1] \\rightarrow [0, 1, \\textbf{0}] \\rightarrow [0, 1, \\textbf{1}, 0]$,\n- $[0, 1] \\rightarrow [0, 1, \\textbf{0}] \\rightarrow [\\textbf{1}, 0, 1, 0]$.", "cfid": "2039E"}
{"problem_id": "2037G", "problem_title": "G. Natlan Exploring", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2037/G", "problem_statement": "You are exploring the stunning region of Natlan! This region consists of $n$ cities, and each city is rated with an attractiveness $a_i$. A directed edge exists from City $i$ to City $j$ if and only if $i < j$ and $\\gcd(a_i,a_j)\\neq 1$, where $\\gcd(x, y)$ denotes the [greatest common divisor (GCD)](https://en.wikipedia.org/wiki/Greatest_common_divisor) of integers $x$ and $y$.\n\nStarting from City $1$, your task is to determine the total number of distinct paths you can take to reach City $n$, modulo $998\\,244\\,353$. Two paths are different if and only if the set of cities visited is different.\n\n### Input\n\nThe first line contains an integer $n$ ($2 \\leq n \\leq 2 \\cdot 10^5$) — the number of cities.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($2 \\leq a_i \\leq 10^6$) — the attractiveness of each city.\n\n### Output\n\nOutput the total number of distinct paths you can take to reach City $n$, modulo $998\\,244\\,353$.\n\n### Examples\n\n#### Input #1\n\n```\n\n5\n\n2 6 3 4 6\n\n```\n\n#### Output #1\n\n```\n5\n```\n\n#### Input #2\n\n```\n\n5\n\n4 196 2662 2197 121\n\n```\n\n#### Output #2\n\n```\n2\n```\n\n#### Input #3\n\n```\n\n7\n\n3 6 8 9 11 12 20\n\n```\n\n#### Output #3\n\n```\n7\n```\n\n#### Input #4\n\n```\n\n2\n\n2 3\n\n```\n\n#### Output #4\n\n```\n0\n```\n\n### Note\n\nIn the first example, the five paths are the following:\n\n- City $1\\rightarrow$ City $5$\n- City $1\\rightarrow$ City $2\\rightarrow$ City $5$\n- City $1\\rightarrow$ City $2\\rightarrow$ City $3\\rightarrow$ City $5$\n- City $1\\rightarrow$ City $2\\rightarrow$ City $4\\rightarrow$ City $5$\n- City $1\\rightarrow$ City $4\\rightarrow$ City $5$\n\nIn the second example, the two paths are the following:\n\n- City $1\\rightarrow$ City $3\\rightarrow$ City $5$\n- City $1\\rightarrow$ City $2\\rightarrow$ City $3\\rightarrow$ City $5$", "cfid": "2037G"}
{"problem_id": "2037F", "problem_title": "F. Ardent Flames", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2037/F", "problem_statement": "You have obtained the new limited event character Xilonen. You decide to use her in combat.\n\nThere are $n$ enemies in a line. The $i$'th enemy from the left has health $h_i$ and is currently at position $x_i$. Xilonen has an attack damage of $m$, and you are ready to defeat the enemies with her.\n\nXilonen has a powerful \"ground stomp\" attack. Before you perform any attacks, you select an integer $p$ and position Xilonen there ($p$ can be any integer position, including a position with an enemy currently). Afterwards, for each attack, she deals $m$ damage to an enemy at position $p$ (if there are any), $m-1$ damage to enemies at positions $p-1$ and $p+1$, $m-2$ damage to enemies at positions $p-2$ and $p+2$, and so on. Enemies that are at least a distance of $m$ away from Xilonen take no damage from attacks.\n\nFormally, if there is an enemy at position $x$, she will deal $\\max(0,m - |p - x|)$ damage to that enemy each hit. Note that you may not choose a different $p$ for different attacks.\n\nOver all possible $p$, output the minimum number of attacks Xilonen must perform to defeat at least $k$ enemies. If it is impossible to find a $p$ such that eventually at least $k$ enemies will be defeated, output $-1$ instead. Note that an enemy is considered to be defeated if its health reaches $0$ or below.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) – the number of test cases.\n\nThe first line of each test case contains three integers $n$, $m$, and $k$ ($1 \\leq k \\leq n \\leq 10^5$, $1 \\leq m \\leq 10^9$).\n\nThe following line contains $n$ integers $h_1, h_2, ..., h_n$ ($1 \\leq h_i \\leq 10^9$).\n\nThe last line of each testcase contains $n$ integers $x_1, x_2, ..., x_n$ ($1\\leq x_i \\leq 10^9$, $x_i < x_{i+1}$ for all $1 \\leq i < n$)\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, output an integer on a new line, the minimum number of attacks that must be performed to defeat at least $k$ enemies. If it is impossible to find a $p$ such that eventually at least $k$ enemies will be defeated, output $-1$ instead.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n5 5 3\n\n7 7 7 7 7\n\n1 2 3 4 5\n\n9 5 9\n\n2 4 6 8 10 8 6 4 2\n\n1 2 3 4 5 6 7 8 9\n\n2 10 2\n\n1 1\n\n1 20\n\n2 10 1\n\n69696969 420420420\n\n1 20\n\n2 10 2\n\n10 15\n\n1 19\n\n2 2 2\n\n1000000000 1\n\n1 3\n\n```\n\n#### Output #1\n\n```\n2\n2\n-1\n6969697\n15\n1000000000\n```\n\n### Note\n\nIn the first testcase, it is optimal to select $p=2$. Each attack, the first enemy takes $5-|2-1|=4$ damage, the second enemy takes $5$ damage, the third enemy takes $4$ damage, the fourth enemy takes $3$ damage, and the fifth enemy takes $2$ damage. After $2$ attacks, the first three enemies will be defeated. It can be shown that it is impossible to defeat $3$ enemies in less than $2$ attacks, no matter which $p$ is selected.\n\nIn the second testcase, we must kill all $9$ enemies. By selecting $p=5$, all nine enemies will be defeated in $2$ attacks.\n\nIn the third testcase, we must kill both enemies. However, it can be shown that no $p$ selected will damage both enemies at the same time, so the answer is $-1$.\n\nIn the fourth testcase, selecting $p=1$ will enable us to defeat the first enemy in $6969697$ attacks.\n\nIn the fifth testcase, selecting $p=10$ will make each enemy take $1$ damage per attack. Both enemies will be defeated in $15$ attacks.", "cfid": "2037F"}
{"problem_id": "2031F", "problem_title": "F. Penchick and Even Medians", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2031/F", "problem_statement": "This is an interactive problem.\n\nReturning from a restful vacation on Australia's Gold Coast, Penchick forgot to bring home gifts for his pet duck Duong Canh! But perhaps a beautiful problem crafted through deep thought on the scenic beaches could be the perfect souvenir.\n\nThere is a hidden permutation$^{\\text{∗}}$ $p$ of length $n$, where $n$ is even. You are allowed to make the following query:\n\n- Choose a subsequence$^{\\text{†}}$ of the permutation $p$ with even length $4\\le k\\le n$. The interactor will return the value of the two medians$^{\\text{‡}}$ in the chosen subsequence.\n\nFind the index of the two medians in permutation $p$ using at most $80$ queries.\n\nNote that the interactor is non-adaptive. This means that the permutation $p$ is fixed at the beginning and will not change based on your queries.\n\n$^{\\text{∗}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n$^{\\text{†}}$A sequence $a$ is a subsequence of a sequence $b$ if $a$ can be obtained from $b$ by the deletion of several (possibly, zero or all) element from arbitrary positions.\n\n$^{\\text{‡}}$The two medians of an array $a$ with even length $k$ are defined as the $\\frac{k}{2}$-th and $\\left(\\frac{k}{2} + 1\\right)$-th smallest element in the array ($1$-indexed).\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$). The description of the test cases follows.\n\nThe only line of each test case contains a single integer $n$ ($6 \\le n \\le 100$, $n$ is even) — the length of the hidden permutation $p$.\n\nFor each test case, after reading the integer $n$, you should begin the interaction and find the answer before reading $n$ for the next test case.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^4$.\n\n### Interaction\n\nTo make a query, print a single line in the following format:\n\n- $\\mathtt{?}\\;k\\;x_1\\;x_2 \\ldots x_{k-1}\\;x_k$ ($4\\le k\\le n$, $k$ is even, $1 \\le x_i \\le n$, $x_i$ is pairwise distinct) — the length of the chosen subsequence followed by the indices of the chosen subsequence.\n\nAfter each query, you should read a line containing two integers $m_1$ and $m_2$ ($1 \\le m_1 < m_2 \\le n$) — the value of the two medians in array $[p_{x_1}, p_{x_2}, \\ldots, p_{x_{k-1}}, p_{x_k}]$.\n\nYou can make at most $80$ such queries in each test case.\n\nTo give the final answer, print a single line in the following format:\n\n- $\\mathtt{!}\\;i_1\\;i_2$ ($1\\le i_1, i_2 \\le n$) — the index of the two medians.\n\nNote that the order in which $i_1$ and $i_2$ is printed does not matter. In other words, your solution is valid as long as $p_{i_1} = \\frac{n}{2}$ and $p_{i_2} = \\frac{n}{2} + 1$, or $p_{i_1} = \\frac{n}{2} + 1$ and $p_{i_2} = \\frac{n}{2}$.\n\nAfter printing each query do not forget to output the end of line and flush$^{\\text{∗}}$ the output. Otherwise, you will get Idleness limit exceeded verdict.\n\nIf, at any interaction step, you read $-1$ instead of valid data, your solution must exit immediately. This means that your solution will receive Wrong answer because of an invalid query or any other mistake. Failing to exit can result in an arbitrary verdict because your solution will continue to read from a closed stream.\n\nHack format\n\nFor hacks, use the following format.\n\nThe first line should contain $t$ — the number of test cases.\n\nThe first line of each test case should contain a single even integer $n$.\n\nThe second line of each test case should contain a permutation $p_1, p_2, \\ldots, p_n$ of length $n$.\n\nAs an example, the hack format for the example input is:\n\n```\n\n2\n\n6\n\n6 2 3 5 1 4\n\n10\n\n10 9 8 7 6 5 4 3 2 1\n\n```\n\n$^{\\text{∗}}$To flush, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- sys.stdout.flush() in Python;\n- see the documentation for other languages.\n\n### Example\n\n#### Input #1\n\n```\n2\n6\n\n3 4\n\n3 4\n\n2 3\n\n10\n\n3 4\n\n6 7\n```\n\n#### Output #1\n\n```\n\n? 6 1 2 3 4 5 6\n\n? 4 3 6 1 5\n\n? 4 3 6 2 5\n\n! 3 6\n\n? 6 1 3 7 8 9 10\n\n? 8 1 2 3 4 5 6 7 8\n\n! 6 5```\n\n### Note\n\nIn the first test case, the hidden permutation is $p = [6, 2, 3, 5, 1, 4]$.\n\n1. The entire permutation was chosen for the first query. The two medians of the entire permutation $p$ are $3$ and $4$.\n2. The indices of the chosen subsequence in the second query are $3$, $6$, $1$, and $5$. The interactor returns the two medians of the subsequence $[p_3, p_6, p_1, p_5] = [3, 4, 6, 1]$, which are $3$ and $4$.\n3. The indices of the chosen subsequence in the second query are $3$, $6$, $2$, and $5$. The interactor returns the two medians of the subsequence $[p_3, p_6, p_2, p_5] = [3, 4, 2, 1]$, which are $2$ and $3$.\n\nThe answer \"! 3 6\" is valid as $p_3 = 3$ and $p_6 = 4$.\n\nIn the second test case, the hidden permutation is $p = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]$.\n\n1. The indices of the chosen subsequence in the second query are $1$, $3$, $7$, $8$, $9$, and $10$. The interactor returns the two medians of the subsequence $[p_1, p_3, p_7, p_8, p_9, p_{10}] = [10, 8, 4, 3, 2, 1]$, which are $3$ and $4$.\n2. The indices of the chosen subsequence in the second query are $1$, $2$, $3$, $4$, $5$, $6$, $7$, and $8$. The interactor returns the two medians of the subsequence $[p_1, p_2, p_3, p_4, p_5, p_6, p_7, p_8] = [10, 9, 8, 7, 6, 5, 4, 3]$, which are $6$ and $7$.\n\nThe answer \"! 5 6\" is valid as $p_5 = 6$ and $p_6 = 5$.", "cfid": "2031F"}
{"problem_id": "2031E", "problem_title": "E. Penchick and Chloe's Trees", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2031/E", "problem_statement": "With just a few hours left until Penchick and Chloe leave for Singapore, they could hardly wait to see the towering trees at the Singapore Botanic Gardens! Attempting to contain their excitement, Penchick crafted a rooted tree to keep Chloe and himself busy.\n\nPenchick has a rooted tree$^{\\text{∗}}$ consisting of $n$ vertices, numbered from $1$ to $n$, with vertex $1$ as the root, and Chloe can select a non-negative integer $d$ to create a perfect binary tree$^{\\text{†}}$ of depth $d$.\n\nSince Penchick and Chloe are good friends, Chloe wants her tree to be isomorphic$^{\\text{‡}}$ to Penchick's tree. To meet this condition, Chloe can perform the following operation on her own tree any number of times:\n\n- Select an edge $(u,v)$, where $u$ is the parent of $v$.\n- Remove vertex $v$ and all the edges connected to $v$, then connect all of $v$'s previous children directly to $u$.\n\nIn particular, doing an operation on an edge $(u, v)$ where $v$ is a leaf will delete vertex $v$ without adding any new edges.\n\nSince constructing a perfect binary tree can be time-consuming, Chloe wants to choose the minimum $d$ such that a perfect binary tree of depth $d$ can be made isomorphic to Penchick's tree using the above operation. Note that she can't change the roots of the trees.\n\n$^{\\text{∗}}$A tree is a connected graph without cycles. A rooted tree is a tree where one vertex is special and called the root. The parent of vertex $v$ is the first vertex on the simple path from $v$ to the root. The root has no parent. A child of vertex $v$ is any vertex $u$ for which $v$ is the parent. A leaf is any vertex without children.\n\n$^{\\text{†}}$A full binary tree is rooted tree, in which each node has $0$ or $2$ children. A perfect binary tree is a full binary tree in which every leaf is at the same distance from the root. The depth of such a tree is the distance from the root to a leaf.\n\n$^{\\text{‡}}$Two rooted trees, rooted at $r_1$ and $r_2$ respectively, are considered isomorphic if there exists a permutation $p$ of the vertices such that an edge $(u, v)$ exists in the first tree if and only if the edge $(p_u, p_v)$ exists in the second tree, and $p_{r_1} = r_2$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^5$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n \\le 10^6$) — the number of vertices in Penchick's tree.\n\nThe second line of each test case contains $n-1$ integers $p_2, p_3, \\ldots, p_n$ ($1 \\leq p_i \\leq i-1$) — the parent of vertex $i$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case, output a single integer on each line: the minimum depth of Chloe's perfect binary tree.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n6\n\n1 2 2 1 1\n\n15\n\n1 1 2 2 3 3 4 4 5 5 6 6 7 7\n\n5\n\n1 2 2 2\n\n7\n\n1 1 2 1 1 2\n\n10\n\n1 1 1 2 2 2 4 3 3\n\n```\n\n#### Output #1\n\n```\n2\n3\n3\n3\n3\n```\n\n### Note\n\nFor the first test case, create a perfect binary tree with depth $2$.\n\n![](https://espresso.codeforces.com/8d42bd7999c3041650dc035cbfa71627f0c6983a.png)\n\nConsider carrying out the operation on edge $AC$. Then the edges $AC$, $CF$, and $CG$ are removed, and edges $AF$ and $AG$ are added.\n\n![](https://espresso.codeforces.com/4c459430fe1a6b01a84920a49fdb9eb61a3d3261.png)\n\nThe resulting tree is isomorphic to the tree given in the input. It can be proven that no sequence of operations carried out on a binary tree of depth less than $2$ can lead to a tree isomorphic to the tree given in the input.\n\nIn the second test case, the tree is already isomorphic to a perfect binary tree of depth $3$.", "cfid": "2031E"}
{"problem_id": "2028D", "problem_title": "D. Alice's Adventures in Cards", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2028/D", "problem_statement": "Alice is playing cards with the Queen of Hearts, King of Hearts, and Jack of Hearts. There are $n$ different types of cards in their card game. Alice currently has a card of type $1$ and needs a card of type $n$ to escape Wonderland. The other players have one of each kind of card.\n\nIn this card game, Alice can trade cards with the three other players. Each player has different preferences for the $n$ types of cards, which can be described by permutations$^{\\text{∗}}$ $q$, $k$, and $j$ for the Queen, King, and Jack, respectively.\n\nA player values card $a$ more than card $b$ if for their permutation $p$, $p_a > p_b$. Then, this player is willing to trade card $b$ to Alice in exchange for card $a$. Alice's preferences are straightforward: she values card $a$ more than card $b$ if $a > b$, and she will also only trade according to these preferences.\n\nDetermine if Alice can trade up from card $1$ to card $n$ subject to these preferences, and if it is possible, give a possible set of trades to do it.\n\n$^{\\text{∗}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains an integer $n$ ($2\\le n\\le 2\\cdot 10^5$) — the number of card types.\n\nThe next three lines contain the preferences of the Queen, King, and Jack respectively. Each of these lines contains $n$ integers $p_1, p_2, \\ldots, p_n$ ($1\\le p_i\\le n$) — a permutation corresponding to the player's preferences.\n\nThe sum of $n$ over all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, on the first line output a single string \"YES\" or \"NO\" (without the quotes) denoting whether Alice can trade up to card $n$.\n\nIf the first line was \"YES\", then on the next line output $k$ — the number of trades Alice will make. On the next $k$ lines output space separated a character $c\\in \\{\\texttt{q}, \\texttt{k}, \\texttt{j}\\}$ and integer $x$, denoting that Alice trades with player $c$ to get card $x$. It must be the case that on the $k$'th line, $x = n$. If there are multiple solutions, print any of them.\n\nYou can output this answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses. The same goes for the character $c$ denoting the player in the trade ($\\texttt{Q}, \\texttt{K}, \\texttt{J}$ will all be accepted alongside their lowercase variants).\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n3\n\n1 3 2\n\n2 1 3\n\n1 2 3\n\n4\n\n2 3 1 4\n\n1 2 3 4\n\n1 4 2 3\n\n```\n\n#### Output #1\n\n```\nYES\n2\nk 2\nq 3\nNO\n```\n\n### Note\n\nIn the first testcase, Alice can trade with the King to get card $2$. She can then trade with the Queen to get card $3$.\n\nIn the second testcase, even though Alice can trade with the Queen to get card $3$, with the King to get card $2$, and then with the Jack to get card $4$, this is not a valid solution since it doesn't respect Alice's preferences. We can show that there is no way for Alice to get to card $4$.", "cfid": "2028D"}
{"problem_id": "2028E", "problem_title": "E. Alice's Adventures in the Rabbit Hole", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2028/E", "problem_statement": "Alice is at the bottom of the rabbit hole! The rabbit hole can be modeled as a tree$^{\\text{∗}}$ which has an exit at vertex $1$, and Alice starts at some vertex $v$. She wants to get out of the hole, but unfortunately, the Queen of Hearts has ordered her execution.\n\nEach minute, a fair coin is flipped. If it lands heads, Alice gets to move to an adjacent vertex of her current location, and otherwise, the Queen of Hearts gets to pull Alice to an adjacent vertex of the Queen's choosing. If Alice ever ends up on any of the non-root leaves$^{\\text{†}}$ of the tree, Alice loses.\n\nAssuming both of them move optimally, compute the probability that Alice manages to escape for every single starting vertex $1\\le v\\le n$. Since these probabilities can be very small, output them modulo $998\\,244\\,353$.\n\nFormally, let $M = 998\\,244\\,353$. It can be shown that the exact answer can be expressed as an irreducible fraction $\\frac{p}{q}$, where $p$ and $q$ are integers and $q \\not \\equiv 0 \\pmod{M}$. Output the integer equal to $p \\cdot q^{-1} \\bmod M$. In other words, output such an integer $x$ that $0 \\le x < M$ and $x \\cdot q \\equiv p \\pmod{M}$.\n\n$^{\\text{∗}}$A tree is a connected simple graph which has $n$ vertices and $n-1$ edges.\n\n$^{\\text{†}}$A leaf is a vertex that is connected to exactly one edge.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2\\le n\\le 2\\cdot 10^5$) — the number of vertices in the tree.\n\nThe $i$-th of the next $n - 1$ lines contains two integers $x_i$ and $y_i$ ($1 \\le x_i, y_i \\le n$ and $x_i \\neq y_i$) — the edges of the tree. It is guaranteed that the given edges form a tree.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, output $n$ integers on one line — the probabilities of Alice escaping starting from vertex $1, 2, \\ldots, n$. Since these probabilities can be very small, output them modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n5\n\n1 2\n\n1 3\n\n2 4\n\n3 5\n\n9\n\n1 2\n\n2 3\n\n4 5\n\n5 6\n\n7 8\n\n8 9\n\n2 4\n\n5 7\n\n```\n\n#### Output #1\n\n```\n1 499122177 499122177 0 0\n1 499122177 0 332748118 166374059 0 443664157 720954255 0\n```\n\n### Note\n\nFor the first test case:\n\n1. Alice escapes from the root (vertex $1$) by definition with probability $1$.\n2. Alice immediately loses from vertices $4$ and $5$ since they are leaves.\n3. From the other two vertices, Alice escapes with probability $\\frac 12$ since the Queen will pull her to the leaves.", "cfid": "2028E"}
{"problem_id": "2028F", "problem_title": "F. Alice's Adventures in Addition", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2028/F", "problem_statement": "Note that the memory limit is unusual.\n\nThe Cheshire Cat has a riddle for Alice: given $n$ integers $a\\_1, a\\_2, \\\\ldots, a\\_n$ and a target $m$, is there a way to insert $+$ and $\\\\times$ into the circles of the expression \n\n$$a_1 \\circ a_2 \\circ \\cdots \\circ a_n = m$$\n\nto make it true? We follow the usual order of operations: $\\times$ is done before $+$.\n\nAlthough Alice is excellent at chess, she is not good at math. Please help her so she can find a way out of Wonderland!\n\n### Input\n\nEach test contains multiple test cases. The first line of input contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains two integers $n, m$ ($1\\le n\\le 2\\cdot 10^5$; $1\\le m\\le 10^4$) — the number of integers and the target, respectively.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0\\le a_i\\le 10^4$) — the elements of the array $a$.\n\nThe sum of $n$ over all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, output \"YES\" without quotes if it is possible to get the target by inserting $+$ or $\\times$ and \"NO\" otherwise.\n\nYou can output each letter in any case (for example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as a positive answer).\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n5 4\n\n2 1 1 1 2\n\n5 5\n\n2 1 1 1 2\n\n5 6\n\n2 1 1 1 2\n\n5 7\n\n2 1 1 1 2\n\n5 8\n\n2 1 1 1 2\n\n5 6\n\n2 0 2 2 3\n\n```\n\n#### Output #1\n\n```\nYES\nYES\nYES\nYES\nNO\nYES\n```\n\n### Note\n\nPossible solutions for the first four test cases are shown below. \n\n$$\\begin{align*} 2 \\times 1 + 1 \\times 1 \\times 2 &= 4 \\\\ 2 \\times 1 + 1 + 1 \\times 2 &= 5 \\\\ 2 \\times 1 + 1 + 1 + 2 &= 6 \\\\ 2 + 1 + 1 + 1 + 2 &= 7 \\\\ \\end{align*}$$\n\nIt is impossible to get a result of $8$ in the fifth test case.", "cfid": "2028F"}
{"problem_id": "2029D", "problem_title": "D. Cool Graph", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2029/D", "problem_statement": "You are given an undirected graph with $n$ vertices and $m$ edges.\n\nYou can perform the following operation at most $2\\cdot \\max(n,m)$ times:\n\n- Choose three distinct vertices $a$, $b$, and $c$, then for each of the edges $(a,b)$, $(b,c)$, and $(c,a)$, do the following:\n  - If the edge does not exist, add it. On the contrary, if it exists, remove it.\n\nA graph is called cool if and only if one of the following holds:\n\n- The graph has no edges, or\n- The graph is a tree.\n\nYou have to make the graph cool by performing the above operations. Note that you can use at most $2\\cdot \\max(n,m)$ operations.\n\nIt can be shown that there always exists at least one solution.\n\n### Input\n\nEach test contains multiple test cases. The first line of input contains a single integer $t$ ($1\\le t\\le 10^4$) — the number of test cases. The description of test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($3\\le n\\le 10^5$, $0\\le m\\le \\min\\left(\\frac{n(n-1)}{2},2\\cdot 10^5\\right)$) — the number of vertices and the number of edges.\n\nThen $m$ lines follow, the $i$-th line contains two integers $u_i$ and $v_i$ ($1\\le u_i,v_i\\le n$) — the two nodes that the $i$-th edge connects.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$, and the sum of $m$ over all test cases does not exceed $2\\cdot 10^5$.\n\nIt is guaranteed that there are no self-loops or multiple-edges in the given graph.\n\n### Output\n\nFor each test case, in the first line output an integer $k$ ($0\\le k\\le 2\\cdot \\max(n, m)$) — the number of operations.\n\nThen output $k$ lines, the $i$-th line containing three distinct integers $a$, $b$, and $c$ ($1\\le a,b,c\\le n$) — the three integers you choose in the $i$-th operation.\n\nIf there are multiple solutions, you can output any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3 0\n\n3 1\n\n1 2\n\n3 2\n\n1 2\n\n2 3\n\n3 3\n\n1 2\n\n2 3\n\n3 1\n\n6 6\n\n1 2\n\n1 6\n\n4 5\n\n3 4\n\n4 6\n\n3 6\n\n```\n\n#### Output #1\n\n```\n0\n1\n1 2 3\n0\n1\n1 2 3\n3\n1 3 6\n2 4 5\n3 4 6\n```\n\n### Note\n\nIn the first test case, the graph is already cool because there are no edges.\n\nIn the second test case, after performing the only operation, the graph becomes a tree, so it is cool.\n\nIn the third test case, the graph is already cool because it is a tree.\n\nIn the fourth test case, after performing the only operation, the graph has no edges, so it is cool.\n\nIn the fifth test case:\n\nOperationGraph before the operationGraph after the operation$1$![](https://espresso.codeforces.com/fd4eac61194ad22fa5129e37a757471cb9ac10f2.png)![](https://espresso.codeforces.com/89717012b3e51d72910fe21834d7d5f6534271ff.png)$2$![](https://espresso.codeforces.com/f3258dfa40ec8d5628e4d9b7607e1f4157011f3f.png)![](https://espresso.codeforces.com/2efac61c8a155a0a12af9f8447b8c9eca77d7806.png)$3$![](https://espresso.codeforces.com/cd203f96b23e807b438451cdec3e99ae905bf7b3.png)![](https://espresso.codeforces.com/c5b3b54fa0fa24e2eb222b8d2c6fb655b1cfa7b8.png)\n\nNote that after the first operation, the graph has already become cool, and there are two extra operations. As the graph is still cool after the two extra operations, this is a valid answer.", "cfid": "2029D"}
{"problem_id": "2029F", "problem_title": "F. Palindrome Everywhere", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2029/F", "problem_statement": "You are given a cycle with $n$ vertices numbered from $0$ to $n-1$. For each $0\\le i\\le n-1$, there is an undirected edge between vertex $i$ and vertex $((i+1)\\bmod n)$ with the color $c_i$ ($c_i=\\texttt{R}$ or $\\texttt{B}$).\n\nDetermine whether the following condition holds for every pair of vertices $(i,j)$ ($0\\le i<j\\le n-1$):\n\n- There exists a palindrome route between vertex $i$ and vertex $j$. Note that the route may not be simple. Formally, there must exist a sequence $p=[p_0,p_1,p_2,\\ldots,p_m]$ such that:\n  - $p_0=i$, $p_m=j$;\n  - For each $0\\leq x\\le m-1$, either $p_{x+1}=(p_x+1)\\bmod n$ or $p_{x+1}=(p_{x}-1)\\bmod n$;\n  - For each $0\\le x\\le y\\le m-1$ satisfying $x+y=m-1$, the edge between $p_x$ and $p_{x+1}$ has the same color as the edge between $p_y$ and $p_{y+1}$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^5$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains an integer $n$ ($3\\leq n\\leq10^6$) — the number of vertices in the cycle.\n\nThe second line contains a string $c$ of length $n$ ($c_i=\\texttt{R}$ or $\\texttt{B}$) — the color of each edge.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case, print \"YES\" (without quotes) if there is a palindrome route between any pair of nodes, and \"NO\" (without quotes) otherwise.\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n5\n\nRRRRR\n\n5\n\nRRRRB\n\n5\n\nRBBRB\n\n6\n\nRBRBRB\n\n6\n\nRRBBRB\n\n5\n\nRBRBR\n\n12\n\nRRBRRBRRBRRB\n\n```\n\n#### Output #1\n\n```\nYES\nYES\nYES\nNO\nNO\nYES\nNO\n```\n\n### Note\n\nIn the first test case, it is easy to show that there is a palindrome route between any two vertices.\n\nIn the second test case, for any two vertices, there exists a palindrome route with only red edges.\n\nIn the third test case, the cycle is as follows: $0\\color{red}{\\overset{\\texttt{R}}{\\longleftrightarrow}}1\\color{blue}{\\overset{\\texttt{B}}{\\longleftrightarrow}}2\\color{blue}{\\overset{\\texttt{B}}{\\longleftrightarrow}}3\\color{red}{\\overset{\\texttt{R}}{\\longleftrightarrow}}4\\color{blue}{\\overset{\\texttt{B}}{\\longleftrightarrow}}0$. Take $(i,j)=(0,3)$ as an example, then $0\\color{red}{\\overset{\\texttt{R}}{\\longrightarrow}}1\\color{blue}{\\overset{\\texttt{B}}{\\longrightarrow}}2\\color{blue}{\\overset{\\texttt{B}}{\\longrightarrow}}3\\color{red}{\\overset{\\texttt{R}}{\\longrightarrow}}4\\color{blue}{\\overset{\\texttt{B}}{\\longrightarrow}}0\\color{blue}{\\overset{\\texttt{B}}{\\longrightarrow}}4\\color{red}{\\overset{\\texttt{R}}{\\longrightarrow}}3$ is a palindrome route. Thus, the condition holds for $(i,j)=(0,3)$.\n\nIn the fourth test case, when $(i,j)=(0,2)$, there does not exist a palindrome route.", "cfid": "2029F"}
{"problem_id": "2029G", "problem_title": "G. Balanced Problem", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2029/G", "problem_statement": "There is an array $a$ consisting of $n$ integers. Initially, all elements of $a$ are equal to $0$.\n\nKevin can perform several operations on the array. Each operation is one of the following two types:\n\n- Prefix addition — Kevin first selects an index $x$ ($1\\le x\\le n$), and then for each $1\\le j\\le x$, increases $a_j$ by $1$;\n- Suffix addition — Kevin first selects an index $x$ ($1\\le x\\le n$), and then for each $x\\le j\\le n$, increases $a_j$ by $1$.\n\nIn the country of KDOI, people think that the integer $v$ is balanced. Thus, Iris gives Kevin an array $c$ consisting of $n$ integers and defines the beauty of the array $a$ as follows:\n\n- Initially, set $b=0$;\n- For each $1\\le i\\le n$, if $a_i=v$, add $c_i$ to $b$;\n- The beauty of $a$ is the final value of $b$.\n\nKevin wants to maximize the beauty of $a$ after all the operations. However, he had already performed $m$ operations when he was sleepy. Now, he can perform an arbitrary number (possibly zero) of new operations.\n\nYou have to help Kevin find the maximum possible beauty if he optimally performs the new operations.\n\nHowever, to make sure that you are not just rolling the dice, Kevin gives you an integer $V$, and you need to solve the problem for each $1\\le v\\le V$.\n\n### Input\n\nEach test contains multiple test cases. The first line of the input contains a single integer $t$ ($1\\le t\\le 1000$) — the number of test cases. The description of test cases follows.\n\nThe first line of each test case contains three integers $n$, $m$, and $V$ ($1\\le n, m\\le 2\\cdot 10^5$, $1\\le V\\le 2000$) — the length of the array $a$, the number of initial operations, and the number that Kevin gives you.\n\nThe second line contains $n$ integers $c_1, c_2, \\ldots, c_n$ ($1\\le c_i\\le 10^9$) — the elements in the array $c$.\n\nThen $m$ lines follow, the $i$-th line containing a character $op$ and an integer $x$ ($op=\\mathtt{L}$ or $\\mathtt{R}$, $1\\le x\\le n$) — the type of the $i$-th operation and the selected index.\n\n- If $op=\\mathtt{L}$, this operation is a prefix addition on index $x$;\n- If $op=\\mathtt{R}$, this operation is a suffix addition on index $x$.\n\nIt is guaranteed that:\n\n- the sum of $n$ over all test cases does not exceed $2\\cdot 10^5$;\n- the sum of $m$ over all test cases does not exceed $2\\cdot 10^5$;\n- the sum of $V^2$ over all test cases does not exceed $4\\cdot 10^6$.\n\n### Output\n\nFor each test case, output $V$ integers in a single line, the $i$-th integer denoting the maximum possible beauty after Kevin performs some new operations when $v=i$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3 3 2\n\n1 2 4\n\nL 3\n\nR 3\n\nL 1\n\n3 3 2\n\n5 1 4\n\nL 3\n\nR 3\n\nL 1\n\n5 4 5\n\n1 1 1 1 1\n\nL 3\n\nR 2\n\nL 5\n\nL 4\n\n10 12 9\n\n10 9 8 7 6 5 4 3 2 1\n\nL 2\n\nL 4\n\nR 4\n\nR 4\n\nL 6\n\nR 8\n\nL 3\n\nL 2\n\nR 1\n\nR 10\n\nL 8\n\nL 1\n\n1 1 4\n\n1000000000\n\nL 1\n\n```\n\n#### Output #1\n\n```\n2 6\n1 9\n0 1 3 5 5\n0 0 0 6 25 32 35 44 51\n1000000000 1000000000 1000000000 1000000000\n```\n\n### Note\n\nIn the first test case, the array $a$ changes as follows for the initial operations: $[0, 0, 0] \\xrightarrow{\\mathtt{L}\\ 3} [1, 1, 1] \\xrightarrow{\\mathtt{R}\\ 3} [1, 1, 2] \\xrightarrow{\\mathtt{L}\\ 1} [2, 1, 2]$.\n\n- For $v=1$, it is optimal to not perform any new operations, and the beauty is $b=c_2=2$;\n- For $v=2$, it is optimal to perform a prefix addition operation on index $2$. After that, $a$ becomes $[3,2,2]$, and the beauty is $b=c_2+c_3=6$.\n\nIn the second test case, for both $v=1$ and $v=2$, it is optimal to not perform any new operations.", "cfid": "2029G"}
{"problem_id": "2029E", "problem_title": "E. Common Generator", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2029/E", "problem_statement": "For two integers $x$ and $y$ ($x,y\\ge 2$), we will say that $x$ is a generator of $y$ if and only if $x$ can be transformed to $y$ by performing the following operation some number of times (possibly zero):\n\n- Choose a divisor $d$ ($d\\ge 2$) of $x$, then increase $x$ by $d$.\n\nFor example,\n\n- $3$ is a generator of $8$ since we can perform the following operations: $3 \\xrightarrow{d = 3} 6 \\xrightarrow{d = 2} 8$;\n- $4$ is a generator of $10$ since we can perform the following operations: $4 \\xrightarrow{d = 4} 8 \\xrightarrow{d = 2} 10$;\n- $5$ is not a generator of $6$ since we cannot transform $5$ into $6$ with the operation above.\n\nNow, Kevin gives you an array $a$ consisting of $n$ pairwise distinct integers ($a_i\\ge 2$).\n\nYou have to find an integer $x\\ge 2$ such that for each $1\\le i\\le n$, $x$ is a generator of $a_i$, or determine that such an integer does not exist.\n\n### Input\n\nEach test contains multiple test cases. The first line of the input contains a single integer $t$ ($1\\le t\\le 10^4$) — the number of test cases. The description of test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1\\le n\\le 10^5$) — the length of the array $a$.\n\nThe second line contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($2\\le a_i\\le 4\\cdot 10^5$) — the elements in the array $a$. It is guaranteed that the elements are pairwise distinct.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, output a single integer $x$ — the integer you found. Print $-1$ if there does not exist a valid $x$.\n\nIf there are multiple answers, you may output any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3\n\n8 9 10\n\n4\n\n2 3 4 5\n\n2\n\n147 154\n\n5\n\n3 6 8 25 100000\n\n```\n\n#### Output #1\n\n```\n2\n-1\n7\n3\n```\n\n### Note\n\nIn the first test case, for $x=2$:\n\n- $2$ is a generator of $8$, since we can perform the following operations: $2 \\xrightarrow{d = 2} 4 \\xrightarrow{d = 4} 8$;\n- $2$ is a generator of $9$, since we can perform the following operations: $2 \\xrightarrow{d = 2} 4 \\xrightarrow{d = 2} 6 \\xrightarrow{d = 3} 9$.\n- $2$ is a generator of $10$, since we can perform the following operations: $2 \\xrightarrow{d = 2} 4 \\xrightarrow{d = 2} 6 \\xrightarrow{d = 2} 8 \\xrightarrow{d = 2} 10$.\n\nIn the second test case, it can be proven that it is impossible to find a common generator of the four integers.", "cfid": "2029E"}
{"problem_id": "2036G", "problem_title": "G. Library of Magic", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2036/G", "problem_statement": "This is an interactive problem.\n\nThe Department of Supernatural Phenomena at the Oxenfurt Academy has opened the Library of Magic, which contains the works of the greatest sorcerers of Redania — $n$ ($3 \\leq n \\leq 10^{18}$) types of books, numbered from $1$ to $n$. Each book's type number is indicated on its spine. Moreover, each type of book is stored in the library in exactly two copies! And you have been appointed as the librarian.\n\nOne night, you wake up to a strange noise and see a creature leaving the building through a window. Three thick tomes of different colors were sticking out of the mysterious thief's backpack. Before you start searching for them, you decide to compute the numbers $a$, $b$, and $c$ written on the spines of these books. All three numbers are distinct.\n\nSo, you have an unordered set of tomes, which includes one tome with each of the pairwise distinct numbers $a$, $b$, and $c$, and two tomes for all numbers from $1$ to $n$, except for $a$, $b$, and $c$. You want to find these values $a$, $b$, and $c$.\n\nSince you are not working in a simple library, but in the Library of Magic, you can only use one spell in the form of a query to check the presence of books in their place:\n\n- \"xor l r\" — Bitwise XOR query with parameters $l$ and $r$. Let $k$ be the number of such tomes in the library whose numbers are greater than or equal to $l$ and less than or equal to $r$. You will receive the result of the computation $v_1 \\oplus v_2 \\oplus ... \\oplus v_k$, where $v_1 ... v_k$ are the numbers on the spines of these tomes, and $\\oplus$ denotes the operation of [bitwise exclusive OR](http://tiny.cc/xor_wiki_eng).\n\nSince your magical abilities as a librarian are severely limited, you can make no more than $150$ queries.\n\n### Input\n\nThe first line of input contains an integer $t$ ($1 \\le t \\le 300$) — the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($3 \\leq n \\leq 10^{18}$) — the number of types of tomes.\n\n### Interaction\n\nThe interaction for each test case begins with reading the integer $n$.\n\nThen you can make up to $150$ queries.\n\nTo make a query, output a string in the format \"xor l r\" (without quotes) ($1 \\leq l \\leq r \\leq n$). After each query, read an integer — the answer to your query.\n\nTo report the answer, output a string in the format \"ans a b c\" (without quotes), where $a$, $b$, and $c$ are the numbers you found as the answer to the problem. You can output them in any order.\n\nThe interactor is not adaptive, which means that the answer is known before the participant makes queries and does not depend on the queries made by the participant.\n\nAfter making $150$ queries, the answer to any other query will be $-1$. Upon receiving such an answer, terminate the program to receive a verdict of \"WA\" (Wrong answer).\n\nAfter outputting a query, do not forget to output a newline and flush the output buffer. Otherwise, you will receive a verdict of \"IL\" (Idleness limit exceeded). To flush the buffer, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- flush(output) in Pascal;\n- stdout.flush() in Python;\n- refer to the documentation for other languages.\n\nHacks\n\nTo make a hack, use the following format.\n\nThe first line should contain a single integer $t$ ($1 \\leq t \\leq 300$) — the number of test cases.\n\nThe only line of each test case should contain four integers $n$, $a$, $b$, and $c$ ($3 \\leq n \\leq 10^{18}$, $1 \\le a, b, c \\le n$) — the number of books in the library and the numbers of the stolen tomes. The numbers $a$, $b$, and $c$ must be distinct.\n\n### Example\n\n#### Input #1\n\n```\n2\n6\n\n0\n\n2\n\n3\n\n5\n\n3\n```\n\n#### Output #1\n\n```\n\nxor 1 1\n\nxor 2 2\n\nxor 3 3\n\nxor 4 6\n\nans 2 3 5\n\nans 1 2 3\n```\n\n### Note\n\nIn the first test case, the books in the library after the theft look like this:\n\n![](https://espresso.codeforces.com/68391415c7555737d5c6224fa63d1891c2bd552e.png)\n\nNow consider the answers to the queries:\n\n- For the query \"xor 1 1\", you receive the result $1 \\oplus 1 = 0$. Two tomes satisfy the condition specified in the query — both with the number $1$.\n- For the query \"xor 2 2\", you receive the result $2$, as only one tome satisfies the specified condition.\n- For the query \"xor 3 3\", you receive the result $3$.\n- For the query \"xor 4 6\", you receive the result $4 \\oplus 6 \\oplus 4 \\oplus 5 \\oplus 6 = 5$.\n\nIn the second test case, there are only $3$ types of books, and it is easy to guess that the missing ones have the numbers $1$, $2$, and $3$.", "cfid": "2036G"}
{"problem_id": "2036F", "problem_title": "F. XORificator 3000", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2036/F", "problem_statement": "Alice has been giving gifts to Bob for many years, and she knows that what he enjoys the most is performing [bitwise XOR](http://tiny.cc/xor_wiki_eng) of interesting integers. Bob considers a positive integer $x$ to be interesting if it satisfies $x \\not\\equiv k (\\bmod 2^i)$. Therefore, this year for his birthday, she gifted him a super-powerful \"XORificator 3000\", the latest model.\n\nBob was very pleased with the gift, as it allowed him to instantly compute the XOR of all interesting integers in any range from $l$ to $r$, inclusive. After all, what else does a person need for happiness? Unfortunately, the device was so powerful that at one point it performed XOR with itself and disappeared. Bob was very upset, and to cheer him up, Alice asked you to write your version of the \"XORificator\".\n\n### Input\n\nThe first line of input contains a single integer $t$ $(1 \\leq t \\leq 10^4)$ — the number of XOR queries on the segment. The following $t$ lines contain the queries, each consisting of the integers $l$, $r$, $i$, $k$ $(1 \\leq l \\leq r \\leq 10^{18}$, $0 \\leq i \\leq 30$, $0 \\leq k < 2^i)$.\n\n### Output\n\nFor each query, output a single integer — the XOR of all integers $x$ in the range $[l, r]$ such that $x \\not\\equiv k \\mod 2^i$.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n1 3 1 0\n\n2 28 3 7\n\n15 43 1 0\n\n57 2007 1 0\n\n1010 1993 2 2\n\n1 1000000000 30 1543\n\n```\n\n#### Output #1\n\n```\n2\n2\n13\n0\n4\n1000000519\n```\n\n### Note\n\nIn the first query, the interesting integers in the range $[1, 3]$ are $1$ and $3$, so the answer will be $1 \\oplus 3 = 2$.", "cfid": "2036F"}
{"problem_id": "2032F", "problem_title": "F. Peanuts", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2032/F", "problem_statement": "Having the magical beanstalk, Jack has been gathering a lot of peanuts lately. Eventually, he has obtained $n$ pockets of peanuts, conveniently numbered $1$ to $n$ from left to right. The $i$-th pocket has $a_i$ peanuts.\n\nJack and his childhood friend Alice decide to play a game around the peanuts. First, Alice divides the pockets into some boxes; each box will have a non-zero number of consecutive pockets, and each pocket will, obviously, belong to exactly one box. At the same time, Alice does not change the order of the boxes, that is, the boxes are numbered in ascending order of the indices of the pockets in them.\n\nAfter that, Alice and Jack will take turns alternately, with Alice going first.\n\nAt each turn, the current player will remove a positive number of peanuts from exactly one pocket which belongs to the leftmost non-empty box (i.e., the leftmost box containing at least one non-empty pocket). In other words, if we number the boxes from left to right, then each player can only pick peanuts from the pocket in the $j$-th box ($j \\ge 2$) only if the $(j - 1)$-th box has no peanuts left. The player who cannot make a valid move loses.\n\nAlice is sure she will win since she has the advantage of dividing the pockets into boxes herself. Thus, she wanted to know how many ways there are for her to divide the peanuts into boxes at the start of the game so that she will win, assuming both players play optimally. Can you help her with the calculation?\n\nAs the result can be very large, output it modulo $998\\,244\\,353$.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\leq n \\leq 10^6$) — the number of pockets.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$) — the number of peanuts in each pocket.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case, output a single integer — the number of ways for Alice to divide the pockets into boxes at the start of the game to guarantee her win, assuming both players play optimally, modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3\n\n1 2 3\n\n4\n\n1 2 3 1\n\n5\n\n1 1 1 1 1\n\n2\n\n1 1\n\n10\n\n1 2 3 4 5 6 7 8 9 10\n\n```\n\n#### Output #1\n\n```\n1\n4\n16\n0\n205\n```\n\n### Note\n\nIn the first test case, the only way for Alice to win is to divide the pockets into two boxes as follows: $([1, 2], [3])$ (the first box contains the first two pockets and the second box contains the third pocket). Alice wins by taking both peanuts from the second pocket, leaving Jack with $([1], [3])$. Jack is forced to take the only peanut left in the first box, which allows Alice to take the remaining ones in the second box.\n\nIn the second test case, the winning divisions for Alice are $([1], [2, 3, 1])$, $([1, 2, 3, 1])$, $([1, 2], [3], [1])$, and $([1, 2], [3, 1])$.\n\nIn the third test case, Alice always wins no matter how she divides the pockets into boxes.\n\nIn the fourth test case, Alice always loses no matter how she divides the pockets into boxes.", "cfid": "2032F"}
{"problem_id": "2032E", "problem_title": "E. Balanced", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2032/E", "problem_statement": "You are given a cyclic array $a$ with $n$ elements, where $n$ is odd. In each operation, you can do the following:\n\n- Choose an index $1 \\le i \\le n$ and increase $a_{i - 1}$ by $1$, $a_i$ by $2$, and $a_{i + 1}$ by $1$. The element before the first element is the last element because this is a cyclic array.\n\nA cyclic array is called balanced if all its elements are equal to each other.\n\nFind any sequence of operations to make this cyclic array balanced or determine that it is impossible. Please note that you do not have to minimize the number of operations.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 2 \\cdot 10^5$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n < 2 \\cdot 10^5$, $n$ is odd) — the length of the array $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^{6}$) — the elements of the array $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case:\n\n- If it is impossible to make the cyclic array balanced, output $-1$.\n- Otherwise, output $n$ integers $v_1, v_2, \\ldots, v_n$ ($0 \\leq v_i \\leq 10^{18}$) — where $v_i$ denotes the number of operations applied to index $i$. It can be proved that if any solution exists, then there exists a solution under the given constraints. If there are several solutions under the given constraints, output any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n3\n\n2 1 2\n\n3\n\n1 2 3\n\n5\n\n1 2 1 2 1\n\n7\n\n1 2 1 2 1 3 1\n\n9\n\n10000 10000 10000 10000 10000 10001 10002 10001 10000\n\n1\n\n10\n\n```\n\n#### Output #1\n\n```\n0 1 0\n2 1 0\n2 0 3 0 2\n4 2 7 0 8 0 6\n1 1 1 1 1 1 0 1 1\n0\n```\n\n### Note\n\nIn the first test case:\n\n- After $1$ operation applied to index $i = 2$, the array $a = [3, 3, 3]$.\n\nIn the second test case:\n\n- After $2$ operations applied to index $i = 1$, the array $a = [5, 4, 5]$.\n- After $1$ operation applied to index $i = 2$, the array $a = [6, 6, 6]$.\n\nIn the third test case:\n\n- After $2$ operations applied to index $i = 1$, the array $a = [5, 4, 1, 2, 3]$.\n- After $3$ operations applied to index $i = 3$, the array $a = [5, 7, 7, 5, 3]$.\n- After $2$ operations applied to index $i = 5$, the array $a = [7, 7, 7, 7, 7]$.", "cfid": "2032E"}
{"problem_id": "2026E", "problem_title": "E. Best Subsequence", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2026/E", "problem_statement": "Given an integer array $a$ of size $n$.\n\nLet's define the value of the array as its size minus the number of set bits in the bitwise OR of all elements of the array.\n\nFor example, for the array $[1, 0, 1, 2]$, the bitwise OR is $3$ (which contains $2$ set bits), and the value of the array is $4-2=2$.\n\nYour task is to calculate the maximum possible value of some subsequence of the given array.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 100$) — the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 100$).\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\dots, a_n$ ($0 \\le a_i < 2^{60}$).\n\n### Output\n\nFor each test case, print the maximum possible value of some subsequence of the given array.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3\n\n0 0 0\n\n4\n\n1 0 1 2\n\n1\n\n5\n\n8\n\n7 1 48 14 13 8 7 6\n\n```\n\n#### Output #1\n\n```\n3\n2\n0\n3\n```", "cfid": "2026E"}
{"problem_id": "2026D", "problem_title": "D. Sums of Segments", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2026/D", "problem_statement": "You are given a sequence of integers $[a_1, a_2, \\dots, a_n]$. Let $s(l,r)$ be the sum of elements from $a_l$ to $a_r$ (i. e. $s(l,r) = \\sum\\limits_{i=l}^{r} a_i$).\n\nLet's construct another sequence $b$ of size $\\frac{n(n+1)}{2}$ as follows: $b = [s(1,1), s(1,2), \\dots, s(1,n), s(2,2), s(2,3), \\dots, s(2,n), s(3,3), \\dots, s(n,n)]$.\n\nFor example, if $a = [1, 2, 5, 10]$, then $b = [1, 3, 8, 18, 2, 7, 17, 5, 15, 10]$.\n\nYou are given $q$ queries. During the $i$-th query, you are given two integers $l_i$ and $r_i$, and you have to calculate $\\sum \\limits_{j=l_i}^{r_i} b_j$.\n\n### Input\n\nThe first line contains one integer $n$ ($1 \\le n \\le 3 \\cdot 10^5$).\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($-10 \\le a_i \\le 10$).\n\nThe third line contains one integer $q$ ($1 \\le q \\le 3 \\cdot 10^5$).\n\nThen $q$ lines follow, the $i$-th of them contains two integers $l_i$ and $r_i$ ($1 \\le l_i \\le r_i \\le \\frac{n(n+1)}{2}$).\n\n### Output\n\nPrint $q$ integers, the $i$-th of which should be equal to $\\sum \\limits_{j=l_i}^{r_i} b_j$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n1 2 5 10\n\n15\n\n1 1\n\n1 2\n\n1 3\n\n1 4\n\n1 5\n\n1 10\n\n5 10\n\n6 10\n\n2 8\n\n3 4\n\n3 10\n\n3 8\n\n5 6\n\n5 5\n\n1 8\n\n```\n\n#### Output #1\n\n```\n1\n4\n12\n30\n32\n86\n56\n54\n60\n26\n82\n57\n9\n2\n61\n```", "cfid": "2026D"}
{"problem_id": "2026F", "problem_title": "F. Bermart Ice Cream", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2026/F", "problem_statement": "In the Bermart chain of stores, a variety of ice cream is sold. Each type of ice cream has two parameters: price and tastiness.\n\nInitially, there is one store numbered $1$, which sells nothing. You have to process $q$ queries of the following types:\n\n- $1~x$ — a new store opens, that sells the same types of ice cream as store $x$. It receives the minimum available positive index. The order of the types of ice cream in the new store is the same as in store $x$.\n- $2~x~p~t$ — a type of ice cream with price $p$ and tastiness $t$ becomes available in store $x$.\n- $3~x$ — a type of ice cream that was available the longest (appeared the earliest) in store $x$ is removed.\n- $4~x~p$ — for store $x$, find the maximum total tastiness of a subset of types of ice cream that are sold there, such that the total price does not exceed $p$ (each type can be used in the subset no more than once).\n\n### Input\n\nThe first line contains a single integer $q$ ($1 \\le q \\le 3 \\cdot 10^4$) — the number of queries.\n\nEach of the following $q$ lines contains a query in the format described in the statement:\n\n- $1~x$;\n- $2~x~p~t$ ($1 \\le p, t \\le 2000$);\n- $3~x$;\n- $4~x~p$ ($1 \\le p \\le 2000$).\n\nAdditional constraints on the input data:\n\n- $x$ in each query does not exceed the current number of stores (that is, $1$ plus the number of type $1$ queries);\n- query type $3$ is not applied to a store that has no types of ice cream;\n- there is at least one query of type $4$.\n\n### Output\n\nFor each query of type $4$, output a single integer — for store $x$, find the maximum total tastiness of a subset of types of ice cream that are sold there, such that the total price does not exceed $p$ (each type can be used in the subset no more than once).\n\n### Example\n\n#### Input #1\n\n```\n\n12\n\n2 1 5 7\n\n2 1 3 4\n\n4 1 4\n\n4 1 8\n\n4 1 2\n\n1 1\n\n2 2 4 10\n\n4 1 9\n\n4 2 9\n\n3 1\n\n4 1 9\n\n4 2 9\n\n```\n\n#### Output #1\n\n```\n4\n11\n0\n11\n17\n4\n17\n```", "cfid": "2026F"}
{"problem_id": "2035F", "problem_title": "F. Tree Operations", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2035/F", "problem_statement": "This really says a lot about our society.\n\nOne day, a turtle gives you a tree with $n$ nodes rooted at node $x$. Each node has an initial nonnegative value; the $i$-th node has starting value $a_i$.\n\nYou want to make the values of all nodes equal to $0$. To do so, you will perform a series of operations on the tree, where each operation will be performed on a certain node. Define an operation on node $u$ as choosing a single node in $u$'s subtree$^{\\text{∗}}$ and incrementing or decrementing its value by $1$. The order in which operations are performed on nodes is as follows:\n\n- For $1 \\le i \\le n$, the $i$-th operation will be performed on node $i$.\n- For $i > n$, the $i$-th operation will be performed on the same node as operation $i - n$.\n\nMore formally, the $i$-th operation will be performed on the $(((i - 1) \\bmod n) + 1)$-th node.$^{\\text{†}}$\n\nNote that you cannot skip over operations; that is, you cannot perform the $i$-th operation without first performing operations $1, 2, \\ldots, i - 1$.\n\nFind the minimum number of operations you must perform before you can make the values of all nodes equal to $0$, assuming you pick operations optimally. If it's impossible to make the values of all nodes equal to $0$ after finite operations, output $-1$.\n\n$^{\\text{∗}}$The subtree of a node $u$ is the set of nodes for which $u$ lies on the shortest path from this node to the root, including $u$ itself.\n\n$^{\\text{†}}$Here, $a \\bmod b$ denotes the remainder from dividing $a$ by $b$.\n\n### Input\n\nThe first line contains a single integer $t$ ($1\\le t\\le 100$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $x$ ($1 \\le n \\le 2000$, $1 \\le x \\le n$) — the number of nodes and the root of the tree.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le 10^9$) — the starting value of each node.\n\nEach of the next $n - 1$ lines of each test case contains two integers $u$ and $v$ ($1 \\le u, v \\le n$, $u \\neq v$) representing an undirected edge from $u$ to $v$. It is guaranteed that the given edges form a tree.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2000$.\n\n### Output\n\nFor each test case, output a single integer denoting the minimum amount of operations needed to make all nodes $0$. If it's impossible to make all nodes $0$, output $-1$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n2 1\n\n1 2\n\n1 2\n\n3 2\n\n2 1 3\n\n2 1\n\n3 2\n\n4 1\n\n1 1 0 1\n\n1 2\n\n2 3\n\n1 4\n\n12 6\n\n14 4 5 6 12 9 5 11 6 2 1 12\n\n3 9\n\n10 6\n\n6 12\n\n4 3\n\n3 1\n\n5 11\n\n9 7\n\n5 6\n\n1 8\n\n2 8\n\n5 1\n\n1 1\n\n0\n\n```\n\n#### Output #1\n\n```\n3\n6\n5\n145\n0\n```\n\n### Note\n\nIn the first test case, you can make the following valid sequence of operations:\n\n- For operation $1$, decrease the value of node $1$. This is valid because $(((1 - 1) \\bmod n) + 1) = 1$, and node $1$ is in the subtree of node $1$.\n- For operation $2$, decrease the value of node $2$. This is valid because $(((2 - 1) \\bmod n) + 1) = 2$, and node $2$ is in the subtree of node $2$.\n- For operation $3$, decrease the value of node $2$. This is valid because $(((3 - 1) \\bmod n) + 1) = 1$, and node $2$ is in the subtree of node $1$.", "cfid": "2035F"}
{"problem_id": "2035E", "problem_title": "E. Monster", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2035/E", "problem_statement": "Man, this Genshin boss is so hard. Good thing they have a top-up of $6$ coins for only $ \\$4.99$. I should be careful and spend no more than I need to, lest my mom catches me...\n\nYou are fighting a monster with $z$ health using a weapon with $d$ damage. Initially, $d=0$. You can perform the following operations.\n\n- Increase $d$ — the damage of your weapon by $1$, costing $x$ coins.\n- Attack the monster, dealing $d$ damage and costing $y$ coins.\n\nYou cannot perform the first operation for more than $k$ times in a row.\n\nFind the minimum number of coins needed to defeat the monster by dealing at least $z$ damage.\n\n### Input\n\nThe first line contains a single integer $t$ ($1\\le t\\le 100$) — the number of test cases.\n\nThe only line of each test case contains 4 integers $x$, $y$, $z$, and $k$ ($1\\leq x, y, z, k\\leq 10^8$) — the first operation's cost, the second operation's cost, the monster's health, and the limitation on the first operation.\n\n### Output\n\nFor each test case, output the minimum number of coins needed to defeat the monster.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2 3 5 5\n\n10 20 40 5\n\n1 60 100 10\n\n60 1 100 10\n\n```\n\n#### Output #1\n\n```\n12\n190\n280\n160\n```\n\n### Note\n\nIn the first test case, $x = 2$, $y = 3$, $z = 5$, and $k = 5$. Here's a strategy that achieves the lowest possible cost of $12$ coins:\n\n- Increase damage by $1$, costing $2$ coins.\n- Increase damage by $1$, costing $2$ coins.\n- Increase damage by $1$, costing $2$ coins.\n- Attack the monster, dealing $3$ damage, costing $3$ coins.\n- Attack the monster, dealing $3$ damage, costing $3$ coins.\n\nYou deal a total of $3 + 3 = 6$ damage, defeating the monster who has $5$ health. The total number of coins you use is $2 + 2 + 2 + 3 + 3 = 12$ coins.\n\nIn the second test case, $x = 10$, $y = 20$, $z = 40$, and $k = 5$. Here's a strategy that achieves the lowest possible cost of $190$ coins:\n\n- Increase damage by $5$, costing $5\\cdot x$ = $50$ coins.\n- Attack the monster once, dealing $5$ damage, costing $20$ coins.\n- Increase damage by $2$, costing $2\\cdot x$ = $20$ coins.\n- Attack the monster $5$ times, dealing $5\\cdot 7 = 35$ damage, costing $5\\cdot y$ = $100$ coins.\n\nYou deal a total of $5 + 35 = 40$ damage, defeating the monster who has exactly $40$ health. The total number of coins you use is $50 + 20 + 20 + 100 = 190$ coins.", "cfid": "2035E"}
{"problem_id": "2027D2", "problem_title": "D2. The Endspeaker (Hard Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2027/D2", "problem_statement": "This is the hard version of this problem. The only difference is that you need to also output the number of optimal sequences in this version. You must solve both versions to be able to hack.\n\nYou're given an array $a$ of length $n$, and an array $b$ of length $m$ ($b_i > b_{i+1}$ for all $1 \\le i < m$). Initially, the value of $k$ is $1$. Your aim is to make the array $a$ empty by performing one of these two operations repeatedly:\n\n- Type $1$ — If the value of $k$ is less than $m$ and the array $a$ is not empty, you can increase the value of $k$ by $1$. This does not incur any cost.\n- Type $2$ — You remove a non-empty prefix of array $a$, such that its sum does not exceed $b_k$. This incurs a cost of $m - k$.\n\nYou need to minimize the total cost of the operations to make array $a$ empty. If it's impossible to do this through any sequence of operations, output $-1$. Otherwise, output the minimum total cost of the operations, and the number of sequences of operations which yield this minimum cost modulo $10^9 + 7$.\n\nTwo sequences of operations are considered different if you choose a different type of operation at any step, or the size of the removed prefix is different at any step.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\le n, m \\le 3 \\cdot 10^5$, $\\boldsymbol{1 \\le n \\cdot m \\le 3 \\cdot 10^5}$).\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$).\n\nThe third line of each test case contains $m$ integers $b_1, b_2, \\ldots, b_m$ ($1 \\le b_i \\le 10^9$).\n\nIt is also guaranteed that $b_i > b_{i+1}$ for all $1 \\le i < m$.\n\nIt is guaranteed that the sum of $\\boldsymbol{n \\cdot m}$ over all test cases does not exceed $3 \\cdot 10^5$.\n\n### Output\n\nFor each test case, if it's possible to make $a$ empty, then output two integers. The first should be the minimum total cost of the operations, and the second should be the number of sequences of operations which achieve this minimum cost, modulo $10^9 + 7$.\n\nIf there is no possible sequence of operations which makes $a$ empty, then output a single integer $-1$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n4 2\n\n9 3 4 3\n\n11 7\n\n1 2\n\n20\n\n19 18\n\n10 2\n\n2 5 2 1 10 3 2 9 9 6\n\n17 9\n\n10 11\n\n2 2 2 2 2 2 2 2 2 2\n\n20 18 16 14 12 10 8 6 4 2 1\n\n1 6\n\n10\n\n32 16 8 4 2 1\n\n```\n\n#### Output #1\n\n```\n1 3\n-1\n2 11\n10 42\n4 1\n```\n\n### Note\n\nIn the first test case, there are $3$ optimal sequences of operations which yield a total cost of $1$:\n\n- All $3$ sequences begin with a type $2$ operation, removing the prefix $[9]$ to make $a = [3, 4, 3]$, incurring a cost of $1$. Then, we perform a type $1$ operation to increase the value of $k$ by $1$. All subsequent operations now incur a cost of $0$.\n- One sequence continues by removing the prefixes $[3, 4]$ then $[3]$.\n- Another sequence continues by removing the prefixes $[3]$ then $[4, 3]$.\n- Another sequence continues by removing the prefixes $[3]$ then $[4]$ then $[3]$.\n\nIn the second test case, it's impossible to remove any prefix of the array since $a_1 > b_1$, so array $a$ cannot be made empty by any sequence of operations.", "cfid": "2027D2"}
{"problem_id": "2027E1", "problem_title": "E1. Bit Game (Easy Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2027/E1", "problem_statement": "This is the easy version of this problem. The only difference is that you need to output the winner of the game in this version, and the number of stones in each pile are fixed. You must solve both versions to be able to hack.\n\nAlice and Bob are playing a familiar game where they take turns removing stones from $n$ piles. Initially, there are $x_i$ stones in the $i$-th pile, and it has an associated value $a_i$. A player can take $d$ stones away from the $i$-th pile if and only if both of the following conditions are met:\n\n- $1 \\le d \\le a_i$, and\n- $x \\, \\& \\, d = d$, where $x$ is the current number of stones in the $i$-th pile and $\\&$ denotes the [bitwise AND operation](https://en.wikipedia.org/wiki/Bitwise_operation#AND).\n\nThe player who cannot make a move loses, and Alice goes first.\n\nYou're given the $a_i$ and $x_i$ values for each pile, please determine who will win the game if both players play optimally.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$). The description of the test cases follows.\n\nThe first line of each test case contains $n$ ($1 \\le n \\le 10^4$) — the number of piles.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i < 2^{30}$).\n\nThe third line of each test case contains $n$ integers $x_1, x_2, \\ldots, x_n$ ($1 \\le x_i < 2^{30}$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^4$.\n\n### Output\n\nPrint a single line with the winner's name. If Alice wins, print \"Alice\", otherwise print \"Bob\" (without quotes).\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n2\n\n1 6\n\n10 7\n\n3\n\n10 8 15\n\n25 4 14\n\n4\n\n8 32 65 64\n\n7 45 126 94\n\n3\n\n20 40 1\n\n23 55 1\n\n5\n\n12345 9876 86419 8641 1\n\n6789 54321 7532 97532 1\n\n2\n\n20 64\n\n44 61\n\n3\n\n57 109 55\n\n69 90 85\n\n```\n\n#### Output #1\n\n```\nBob\nBob\nBob\nBob\nBob\nAlice\nAlice\n```\n\n### Note\n\nIn the first test case, neither player can take any stones from the first pile since there is no value of $d$ satisfying the conditions. For the second pile, to begin with, Alice can remove between $1$ and $6$ stones. No matter which move Alice performs, Bob can remove the rest of the stones on his turn. After Bob's move, there are no more moves that Alice can perform, so Bob wins.\n\nIn the second test case, here is one example of how the game might go. Alice moves first, and she decides to remove from the first pile. She cannot take $17$ stones, because $17 > 10$, which fails the first condition. She cannot take $10$ stones, because $25 \\, \\& \\, 10 = 8$ which fails the second condition. One option is to take $9$ stones; now the pile has $16$ stones left. On Bob's turn he decides to take stones from the second pile; the only option here is to take all $4$. Now, no more stones can be taken from either of the first two piles, so Alice must take some stones from the last pile. She decides to take $12$ stones, and Bob then follows by taking the last $2$ stones on that pile. Since Alice now has no legal moves left, Bob wins. It can be shown that no matter which strategy Alice follows, Bob will always be able to win if he plays optimally.", "cfid": "2027E1"}
{"problem_id": "2033G", "problem_title": "G. Sakurako and Chefir", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2033/G", "problem_statement": "Given a tree with $n$ vertices rooted at vertex $1$. While walking through it with her cat Chefir, Sakurako got distracted, and Chefir ran away.\n\nTo help Sakurako, Kosuke recorded his $q$ guesses. In the $i$-th guess, he assumes that Chefir got lost at vertex $v_i$ and had $k_i$ stamina.\n\nAlso, for each guess, Kosuke assumes that Chefir could move along the edges an arbitrary number of times:\n\n- from vertex $a$ to vertex $b$, if $a$ is an ancestor$^{\\text{∗}}$ of $b$, the stamina will not change;\n- from vertex $a$ to vertex $b$, if $a$ is not an ancestor of $b$, then Chefir's stamina decreases by $1$.\n\nIf Chefir's stamina is $0$, he cannot make a move of the second type.\n\nFor each assumption, your task is to find the distance to the farthest vertex that Chefir could reach from vertex $v_i$, having $k_i$ stamina.\n\n$^{\\text{∗}}$Vertex $a$ is an ancestor of vertex $b$ if the shortest path from $b$ to the root passes through $a$.\n\n### Input\n\nThe first line contains a single integer $t$ ($1\\le t\\le 10^4$) — the number of test cases.\n\nEach test case is described as follows:\n\n- The first line contains a single integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$) — the number of vertices in the tree.\n- The next $n-1$ lines contain the edges of the tree. It is guaranteed that the given edges form a tree.\n- The next line consists of a single integer $q$ $(1\\le q\\le 2 \\cdot 10^5)$, which denotes the number of guesses made by Kosuke.\n- The next $q$ lines describe the guesses made by Kosuke, with two integers $v_i$, $k_i$ $(1\\le v_i \\le n, 0 \\le k_i\\le n)$.\n\nIt is guaranteed that the sum of $n$ and the sum of $q$ across all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case and for each guess, output the maximum distance to the farthest vertex that Chefir could reach from the starting point $v_i$ having $k_i$ stamina.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n5\n\n1 2\n\n2 3\n\n3 4\n\n3 5\n\n3\n\n5 1\n\n3 1\n\n2 0\n\n9\n\n8 1\n\n1 7\n\n1 4\n\n7 3\n\n4 9\n\n3 2\n\n1 5\n\n3 6\n\n7\n\n6 0\n\n2 3\n\n6 2\n\n8 2\n\n2 4\n\n9 2\n\n6 3\n\n6\n\n2 1\n\n2 5\n\n2 4\n\n5 6\n\n4 3\n\n3\n\n3 1\n\n1 3\n\n6 5\n\n```\n\n#### Output #1\n\n```\n2 1 2\n0 5 2 4 5 5 5\n1 3 4\n```\n\n### Note\n\nIn the first example:\n\n- In the first query, you can go from vertex $5$ to vertex $3$ (after which your stamina will decrease by $1$ and become $0$), and then you can go to vertex $4$;\n- In the second query, from vertex $3$ with $1$ stamina, you can only reach vertices $2$, $3$, $4$, and $5$;\n- In the third query, from vertex $2$ with $0$ stamina, you can only reach vertices $2$, $3$, $4$, and $5$;", "cfid": "2033G"}
{"problem_id": "2023D", "problem_title": "D. Many Games", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2023/D", "problem_statement": "Recently, you received a rare ticket to the only casino in the world where you can actually earn something, and you want to take full advantage of this opportunity.\n\nThe conditions in this casino are as follows:\n\n- There are a total of $n$ games in the casino.\n- You can play each game at most once.\n- Each game is characterized by two parameters: $p_i$ ($1 \\le p_i \\le 100$) and $w_i$ — the probability of winning the game in percentage and the winnings for a win.\n- If you lose in any game you decide to play, you will receive nothing at all (even for the games you won).\n\nYou need to choose a set of games in advance that you will play in such a way as to maximize the expected value of your winnings.\n\nIn this case, if you choose to play the games with indices $i_1 < i_2 < \\ldots < i_k$, you will win in all of them with a probability of $\\prod\\limits_{j=1}^k \\frac{p_{i_j}}{100}$, and in that case, your winnings will be equal to $\\sum\\limits_{j=1}^k w_{i_j}$.\n\nThat is, the expected value of your winnings will be $\\left(\\prod\\limits_{j=1}^k \\frac{p_{i_j}}{100}\\right) \\cdot \\left(\\sum\\limits_{j=1}^k w_{i_j}\\right)$.\n\nTo avoid going bankrupt, the casino owners have limited the expected value of winnings for each individual game. Thus, for all $i$ ($1 \\le i \\le n$), it holds that $w_i \\cdot p_i \\le 2 \\cdot 10^5$.\n\nYour task is to find the maximum expected value of winnings that can be obtained by choosing some set of games in the casino.\n\n### Input\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) — the number of games offered to play.\n\nThe $i$-th of the following $n$ lines contains two integers $p_i$ and $w_i$ ($1 \\leq p_i \\leq 100$, $1 \\leq w_i, p_i \\cdot w_i \\leq 2 \\cdot 10^5$) — the probability of winning and the size of the winnings in the $i$-th game.\n\n### Output\n\nOutput a single number — the maximum expected value of winnings in the casino that can be obtained by choosing some subset of games.\n\nYour answer will be accepted if the relative or absolute error does not exceed $10^{-6}$. Formally, if $a$ is your answer and $b$ is the jury's answer, it will be accepted if $\\frac{|a-b|}{\\max(b, 1)} \\le 10^{-6}$.\n\n### Examples\n\n#### Input #1\n\n```\n\n3\n\n80 80\n\n70 100\n\n50 200\n\n```\n\n#### Output #1\n\n```\n112.00000000\n```\n\n#### Input #2\n\n```\n\n2\n\n100 1\n\n100 1\n\n```\n\n#### Output #2\n\n```\n2.00000000\n```\n\n#### Input #3\n\n```\n\n4\n\n1 100\n\n2 1000\n\n2 100\n\n3 1\n\n```\n\n#### Output #3\n\n```\n20.00000000\n```\n\n#### Input #4\n\n```\n\n5\n\n34 804\n\n78 209\n\n99 191\n\n61 439\n\n90 79\n\n```\n\n#### Output #4\n\n```\n395.20423800\n```\n\n### Note\n\nIn the first example, you can choose the first and third games. In this case, the expected value of winnings will be $\\left(\\frac{p_1}{100}\\cdot \\frac{p_3}{100}\\right) \\cdot (w_1 + w_3) = \\left(\\frac{80}{100}\\cdot \\frac{50}{100}\\right) \\cdot (80 + 200) = 112$.\n\nIn the second example, you can choose the first and second games. In this case, the expected value of winnings will be $\\left(\\frac{p_1}{100}\\cdot \\frac{p_2}{100}\\right) \\cdot (w_1 + w_2) = \\left(\\frac{100}{100}\\cdot \\frac{100}{100}\\right) \\cdot (1 + 1) = 2$.\n\nIn the third example, you can choose only the second game. In this case, the expected value of winnings will be $\\frac{p_2}{100} \\cdot w_2 = \\frac{2}{100} \\cdot 1000 = 20$.", "cfid": "2023D"}
{"problem_id": "2023C", "problem_title": "C. C+K+S", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2023/C", "problem_statement": "You are given two strongly connected$^{\\dagger}$ directed graphs, each with exactly $n$ vertices, but possibly different numbers of edges. Upon closer inspection, you noticed an important feature — the length of any cycle in these graphs is divisible by $k$.\n\nEach of the $2n$ vertices belongs to exactly one of two types: incoming or outgoing. For each vertex, its type is known to you.\n\nYou need to determine whether it is possible to draw exactly $n$ directed edges between the source graphs such that the following four conditions are met:\n\n- The ends of any added edge lie in different graphs.\n- From each outgoing vertex, exactly one added edge originates.\n- Into each incoming vertex, exactly one added edge enters.\n- In the resulting graph, the length of any cycle is divisible by $k$.\n\n$^{\\dagger}$A strongly connected graph is a graph in which there is a path from every vertex to every other vertex.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $k$ ($2 \\le k \\le n \\le 2 \\cdot 10^5$) — the number of vertices in each graph and the value by which the length of each cycle is divisible.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($a_i \\in \\{0, 1\\}$). If $a_i = 0$, then vertex $i$ of the first graph is incoming. If $a_i = 1$, then vertex $i$ of the first graph is outgoing.\n\nThe third line of each test case contains a single integer $m_1$ ($1 \\le m_1 \\le 5 \\cdot 10^5$) — the number of edges in the first graph.\n\nThe next $m_1$ lines contain descriptions of the edges of the first graph. The $i$-th of them contains two integers $v_i$ and $u_i$ ($1 \\le v_i, u_i \\le n$) — an edge in the first graph leading from vertex $v_i$ to vertex $u_i$.\n\nNext, in the same format, follows the description of the second graph.\n\nThe next line contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($b_i \\in \\{0, 1\\}$). If $b_i = 0$, then vertex $i$ of the second graph is incoming. If $b_i = 1$, then vertex $i$ of the second graph is outgoing.\n\nThe next line contains a single integer $m_2$ ($1 \\le m_2 \\le 5 \\cdot 10^5$) — the number of edges in the second graph.\n\nThe next $m_2$ lines contain descriptions of the edges of the second graph. The $i$-th of them contains two integers $v_i$ and $u_i$ ($1 \\le v_i, u_i \\le n$) — an edge in the second graph leading from vertex $v_i$ to vertex $u_i$.\n\nIt is guaranteed that both graphs are strongly connected, and the lengths of all cycles are divisible by $k$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$. It is guaranteed that the sum of $m_1$ and the sum of $m_2$ over all test cases does not exceed $5 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output \"YES\" (without quotes) if it is possible to draw $n$ new edges such that all conditions are met, and \"NO\" (without quotes) otherwise.\n\nYou may output the answer in any case (for example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as a positive answer).\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n4 2\n\n1 0 0 1\n\n4\n\n1 2\n\n2 3\n\n3 4\n\n4 1\n\n1 0 0 1\n\n4\n\n1 3\n\n3 2\n\n2 4\n\n4 1\n\n3 3\n\n0 0 0\n\n3\n\n1 2\n\n2 3\n\n3 1\n\n1 1 0\n\n3\n\n1 2\n\n2 3\n\n3 1\n\n4 2\n\n1 1 1 1\n\n4\n\n1 2\n\n2 3\n\n3 4\n\n4 1\n\n0 0 0 0\n\n6\n\n1 2\n\n2 1\n\n1 3\n\n3 1\n\n1 4\n\n4 1\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nYES\n```\n\n### Note\n\nIn the first test case, it is possible to draw edges from the first graph to the second graph as $(1, 3)$ and $(4, 2)$ (the first number in the pair is the vertex number in the first graph, and the second number in the pair is the vertex number in the second graph), and from the second graph to the first graph as $(1, 2)$, $(4, 3)$ (the first number in the pair is the vertex number in the second graph, and the second number in the pair is the vertex number in the first graph).\n\nIn the second test case, there are a total of $4$ incoming vertices and $2$ outgoing vertices, so it is not possible to draw $3$ edges.", "cfid": "2023C"}
{"problem_id": "2030E", "problem_title": "E. MEXimize the Score", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2030/E", "problem_statement": "Suppose we partition the elements of an array $b$ into any number $k$ of non-empty multisets $S_1, S_2, \\ldots, S_k$, where $k$ is an arbitrary positive integer. Define the score of $b$ as the maximum value of $\\\\operatorname{MEX}(S\\_1)\n\n$$^{\\text{∗}}$$\n\noperatorname{MEX}(S\\_2) + \\\\ldots + \\\\operatorname{MEX}(S\\_k)$ over all possible partitions of $b$ for any integer $k$.\n\nEnvy is given an array $a$ of size $n$. Since he knows that calculating the score of $a$ is too easy for you, he instead asks you to calculate the sum of scores of all $2^n - 1$ non-empty subsequences of $a$.$^{\\text{†}}$ Since this answer may be large, please output it modulo $998\\,244\\,353$.\n\n$^{\\\\text{∗}}$$\\\\operatorname{MEX}$ of a collection of integers $c\\_1, c\\_2, \\\\ldots, c\\_k$ is defined as the smallest non-negative integer $x$ that does not occur in the collection $c$. For example, $\\\\operatorname{MEX}(\\[0,1,2,2\\]) = 3$ and $\\\\operatorname{MEX}(\\[1,2,2\\]) = 0$\n\n$^{\\text{†}}$A sequence $x$ is a subsequence of a sequence $y$ if $x$ can be obtained from $y$ by deleting several (possibly, zero or all) elements.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe first line of each test case contains an integer $n$ ($1 \\leq n \\leq 2 \\cdot 10^5$) — the length of $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\leq a_i < n$) — the elements of the array $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the answer, modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3\n\n0 0 1\n\n4\n\n0 0 1 1\n\n5\n\n0 0 1 2 2\n\n4\n\n1 1 1 1\n\n```\n\n#### Output #1\n\n```\n11\n26\n53\n0\n```\n\n### Note\n\nIn the first testcase, we must consider seven subsequences:\n\n- $[0]$: The score is $1$.\n- $[0]$: The score is $1$.\n- $[1]$: The score is $0$.\n- $[0,0]$: The score is $2$.\n- $[0,1]$: The score is $2$.\n- $[0,1]$: The score is $2$.\n- $[0,0,1]$: The score is $3$.\n\nThe answer for the first testcase is $1+1+2+2+2+3=11$.\n\nIn the last testcase, all subsequences have a score of $0$.", "cfid": "2030E"}
{"problem_id": "2030G1", "problem_title": "G1. The Destruction of the Universe (Easy Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2030/G1", "problem_statement": "This is the easy version of the problem. In this version, $n \\leq 5000$. You can only make hacks if both versions of the problem are solved.\n\nOrangutans are powerful beings—so powerful that they only need $1$ unit of time to destroy every vulnerable planet in the universe!\n\nThere are $n$ planets in the universe. Each planet has an interval of vulnerability $[l, r]$, during which it will be exposed to destruction by orangutans. Orangutans can also expand the interval of vulnerability of any planet by $1$ unit.\n\nSpecifically, suppose the expansion is performed on planet $p$ with interval of vulnerability $[l_p, r_p]$. Then, the resulting interval of vulnerability may be either $[l_p - 1, r_p]$ or $[l_p, r_p + 1]$.\n\nGiven a set of planets, orangutans can destroy all planets if the intervals of vulnerability of all planets in the set intersect at least one common point. Let the score of such a set denote the minimum number of expansions that must be performed.\n\nOrangutans are interested in the sum of scores of all non-empty subsets of the planets in the universe. As the answer can be large, output it modulo $998\\,244\\,353$.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 1000$) — the number of test cases.\n\nThe first line of each test case contains an integer $n$ ($1 \\leq n \\leq 5000$) — the number of planets in the universe.\n\nThe following $n$ lines contain two integers $l_i$ and $r_i$ ($1 \\leq l_i \\leq r_i \\leq n$) — the initial interval of vulnerability of the $i$-th planet.\n\nIt is guaranteed that the sum of $n$ does not exceed $5000$ over all test cases.\n\n### Output\n\nFor each test case, output an integer — the sum of scores to destroy all non-empty subsets of the planets in the universe, modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3\n\n1 1\n\n2 3\n\n3 3\n\n4\n\n1 4\n\n2 3\n\n2 4\n\n1 1\n\n5\n\n1 2\n\n2 3\n\n3 4\n\n4 5\n\n1 5\n\n```\n\n#### Output #1\n\n```\n5\n6\n24\n```\n\n### Note\n\nIn the first testcase, there are seven non-empty subsets of planets we must consider:\n\n- For each of the subsets $\\{[1,1]\\}, \\{[2,3]\\}, \\{[3,3]\\}$, the score is $0$.\n- For the subset $\\{[2,3], [3,3]\\}$, the score is $0$, because the point $3$ is already contained in both planets' interval of vulnerability.\n- For the subset $\\{[1,1], [2,3]\\}$, the score is $1$. By using one operation on changing the interval of vulnerability of the second planet to be $[1,3]$, the two planets now both have the point $1$ in their interval.\n- For the subset $\\{[1,1], [3,3]\\}$, the score is $2$. By using two operations on changing the interval of vulnerability of the first planet to be $[1,3]$, the two planets now both have the point $3$ in their interval.\n- For the subset $\\{[1,1], [2,3], [3,3]\\}$, the score is $2$. By using one operation on changing the interval of vulnerability of the first planet to be $[1,2]$ and one operation on changing the interval of vulnerability of the third planet to $[2,3]$, all three planets will have the point $2$ in their interval.\n\nThe sum of scores of all non-empty subsets of the first testcase is $0 \\cdot 4 + 1 \\cdot 1 + 2\\cdot2 = 5$.", "cfid": "2030G1"}
{"problem_id": "2030F", "problem_title": "F. Orangutan Approved Subarrays", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2030/F", "problem_statement": "Suppose you have an array $b$. Initially, you also have a set $S$ that contains all distinct elements of $b$. The array $b$ is called orangutan-approved if it can be emptied by repeatedly performing the following operation:\n\n- In one operation, select indices $l$ and $r$ ($1 \\leq l \\leq r \\leq |b|$) such that $v = b_l = b_{l+1} = \\ldots = b_r$ and $v$ is present in $S$. Remove $v$ from $S$, and simultaneously remove all $b_i$ such that $l \\leq i \\leq r$. Then, reindex the elements $b_{r+1}, b_{r+2}, \\ldots$ as $b_l, b_{l+1}, \\ldots$ accordingly.\n\nYou are given an array $a$ of length $n$ and $q$ queries.\n\nEach query consists of two indices $l$ and $r$ ($1 \\le l \\le r \\le n$), and you need to determine whether or not the subarray $a_{l}, a_{l+1}, \\ldots, a_r$ is orangutan-approved.\n\n### Input\n\nThe first line contains $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe first line of each test case contains integers $n$ and $q$ ($1 \\leq n,q \\leq 2 \\cdot 10^5$) — the size of $a$ and the number of queries, respectively.\n\nThe following line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq n$) — the elements of the array $a$.\n\nThe following $q$ lines contain two integers $l$ and $r$ — the endpoints of the subarray for each query ($1 \\leq l \\leq r \\leq n$).\n\nIt is guaranteed that the sum of $n$ and $q$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each query, output \"YES\" (without quotes) if the subarray from $l$ to $r$ is orangutan-approved, and \"NO\" (without quotes) otherwise.\n\nYou can output \"YES\" and \"NO\" in any case (for example, strings \"yES\", \"yes\" and \"Yes\" will be recognized as a positive response).\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n4 2\n\n1 2 2 1\n\n1 4\n\n1 3\n\n5 3\n\n1 2 1 2 1\n\n2 5\n\n3 5\n\n1 3\n\n8 4\n\n1 2 3 2 1 3 2 3\n\n1 5\n\n2 8\n\n3 5\n\n6 8\n\n```\n\n#### Output #1\n\n```\nYES\nYES\nNO\nYES\nYES\nYES\nNO\nYES\nYES\n```\n\n### Note\n\nIn the first query of the first testcase, the answer is YES.\n\n- Initially, $S=\\{1,2\\}$ and $b=[1,2,2,1]$\n- Select $l=2$ and $r=3$. Since $b_2=b_3=2$ is in $S$, we may erase $b_2$ and $b_3$ from the array, as well as erasing $2$ from $S$. The set $S$ becomes $\\{1\\}$ and the array becomes $[1,1]$.\n- Select $l=1$ and $r=2$. Since $b_1=b_2=1$ is in $S$, we may erase $b_1$ and $b_2$ from the array, as well as erasing $1$ from $S$. The set $S$ becomes $\\{\\}$ and the array becomes $[]$.\n- Since the array is now empty, we can say the original array is orangutan-approved.\n\nIn the first query of the second testcase, the answer is NO, because it can be shown that the subarray $[2,1,2,1]$ cannot become empty through any sequence of valid operations.", "cfid": "2030F"}
{"problem_id": "2025F", "problem_title": "F. Choose Your Queries", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2025/F", "problem_statement": "You are given an array $a$, consisting of $n$ integers (numbered from $1$ to $n$). Initially, they are all zeroes.\n\nYou have to process $q$ queries. The $i$-th query consists of two different integers $x_i$ and $y_i$. During the $i$-th query, you have to choose an integer $p$ (which is either $x_i$ or $y_i$) and an integer $d$ (which is either $1$ or $-1$), and assign $a_p = a_p + d$.\n\nAfter each query, every element of $a$ should be a non-negative integer.\n\nProcess all queries in such a way that the sum of all elements of $a$ after the last query is the minimum possible.\n\n### Input\n\nThe first line contains two integers $n$ and $q$ ($2 \\le n \\le 3 \\cdot 10^5$; $1 \\le q \\le 3 \\cdot 10^5$) — the number of elements in $a$ and the number of queries, respectively.\n\nThen $q$ lines follow. The $i$-th of these lines contains two integers $x_i$ and $y_i$ ($1 \\le x_i, y_i \\le n$; $x_i \\ne y_i$) — the description of the $i$-th query.\n\n### Output\n\nFor each query, print a line containing two characters:\n\n- the first character should be x if you choose $p=x_i$, or y if you choose $p=y_i$;\n- the second character should be + if you choose $d=1$, or - if you choose $d=-1$.\n\nIf there are multiple answers, print any of them.\n\n### Examples\n\n#### Input #1\n\n```\n\n3 4\n\n1 2\n\n3 2\n\n3 1\n\n1 2\n\n```\n\n#### Output #1\n\n```\ny+\nx+\nx-\ny-\n```\n\n#### Input #2\n\n```\n\n4 4\n\n1 2\n\n2 3\n\n3 4\n\n3 2\n\n```\n\n#### Output #2\n\n```\ny+\ny+\nx-\ny-\n```\n\n#### Input #3\n\n```\n\n4 2\n\n2 1\n\n4 3\n\n```\n\n#### Output #3\n\n```\ny+\nx+\n```", "cfid": "2025F"}
{"problem_id": "2025G", "problem_title": "G. Variable Damage", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2025/G", "problem_statement": "Monocarp is gathering an army to fight a dragon in a videogame.\n\nThe army consists of two parts: the heroes and the defensive artifacts. Each hero has one parameter — his health. Each defensive artifact also has one parameter — its durability.\n\nBefore the battle begins, Monocarp distributes artifacts to the heroes so that each hero receives at most one artifact.\n\nThe battle consists of rounds that proceed as follows:\n\n- first, the dragon deals damage equal to $\\frac{1}{a + b}$ (a real number without rounding) to each hero, where $a$ is the number of heroes alive and $b$ is the number of active artifacts;\n- after that, all heroes with health $0$ or less die;\n- finally, some artifacts are deactivated. An artifact with durability $x$ is deactivated when one of the following occurs: the hero holding the artifact either dies or receives $x$ total damage (from the start of the battle). If an artifact is not held by any hero, it is inactive from the beginning of the battle.\n\nThe battle ends when there are no heroes left alive.\n\nInitially, the army is empty. There are $q$ queries: add a hero with health $x$ or an artifact with durability $y$ to the army. After each query, determine the maximum number of rounds that Monocarp can survive if he distributes the artifacts optimally.\n\n### Input\n\nThe first line contains one integer $q$ ($1 \\le q \\le 3 \\cdot 10^5$) — the number of queries.\n\nIn the $i$-th of the following $q$ lines, there are two integers $t_i$ and $v_i$ ($t_i \\in \\{1, 2\\}$; $1 \\le v_i \\le 10^9$) — the type of the query and the value of the query parameter. If the type is $1$, a hero with health $v_i$ is added. If the type is $2$, an artifact with durability $v_i$ is added.\n\n### Output\n\nPrint $q$ integers. After each query, output the maximum number of rounds that Monocarp can survive if he distributes the artifacts optimally.\n\n### Examples\n\n#### Input #1\n\n```\n\n3\n\n2 5\n\n1 4\n\n1 10\n\n```\n\n#### Output #1\n\n```\n0\n8\n19\n```\n\n#### Input #2\n\n```\n\n10\n\n1 9\n\n1 6\n\n2 4\n\n1 8\n\n1 3\n\n2 10\n\n1 3\n\n1 6\n\n1 10\n\n2 6\n\n```\n\n#### Output #2\n\n```\n9\n15\n19\n27\n30\n39\n42\n48\n59\n65\n```\n\n### Note\n\nLet's consider the first example.\n\n- An artifact with durability $5$ is added. Since there are no heroes yet, the battle ends immediately.\n- A hero with health $4$ is added. Monocarp can give him an artifact with durability $5$. First, there are rounds in which the hero takes $\\frac{1}{1 + 1} = \\frac{1}{2}$ damage. After $8$ such rounds, a total of $4$ damage will have been dealt, and the hero will die, while the artifact will deactivate. There are no more heroes alive, so the battle ends after $8$ rounds.\n- A hero with health $10$ is added. Now let the artifact with durability $5$ be with this hero. Then, in the first $12$ rounds, the heroes will take $12 \\cdot \\frac{1}{2 + 1} = 4$ damage, and the first hero will die. The second hero has $6$ health left, and the artifact has $1$ durability. Now the damage is $\\frac{1}{2}$, so after another $2$ rounds, the artifact will deactivate. The second hero has $5$ health left. After another $5$ rounds, the second hero will die. Therefore, the answer is $12 + 2 + 5 = 19$.", "cfid": "2025G"}
{"problem_id": "2025E", "problem_title": "E. Card Game", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2025/E", "problem_statement": "In the most popular card game in Berland, a deck of $n \\times m$ cards is used. Each card has two parameters: suit and rank. Suits in the game are numbered from $1$ to $n$, and ranks are numbered from $1$ to $m$. There is exactly one card in the deck for each combination of suit and rank.\n\nA card with suit $a$ and rank $b$ can beat a card with suit $c$ and rank $d$ in one of two cases:\n\n- $a = 1$, $c \\ne 1$ (a card of suit $1$ can beat a card of any other suit);\n- $a = c$, $b > d$ (a card can beat any other card of the same suit but of a lower rank).\n\nTwo players play the game. Before the game starts, they receive exactly half of the deck each. The first player wins if for every card of the second player, he can choose his card that can beat it, and there is no card that is chosen twice (i. e. there exists a matching of the first player's cards with the second player's cards such that in each pair the first player's card beats the second player's card). Otherwise, the second player wins.\n\nYour task is to calculate the number of ways to distribute the cards so that the first player wins. Two ways are considered different if there exists a card such that in one way it belongs to the first player and in the other way it belongs to the second player. The number of ways can be very large, so print it modulo $998244353$.\n\n### Input\n\nThe only line contains two integers $n$ and $m$ ($1 \\le n, m \\le 500$).\n\nAdditional constraint on the input: $m$ is even.\n\n### Output\n\nPrint a single integer — the number of ways to distribute the cards so that the first player wins, taken modulo $998244353$.\n\n### Examples\n\n#### Input #1\n\n```\n\n1 4\n\n```\n\n#### Output #1\n\n```\n2\n```\n\n#### Input #2\n\n```\n\n2 2\n\n```\n\n#### Output #2\n\n```\n2\n```\n\n#### Input #3\n\n```\n\n3 6\n\n```\n\n#### Output #3\n\n```\n1690\n```\n\n#### Input #4\n\n```\n\n5 4\n\n```\n\n#### Output #4\n\n```\n568\n```\n\n#### Input #5\n\n```\n\n500 500\n\n```\n\n#### Output #5\n\n```\n84693741\n```", "cfid": "2025E"}
{"problem_id": "2022E2", "problem_title": "E2. Billetes MX (Hard Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2022/E2", "problem_statement": "This is the hard version of the problem. In this version, it is guaranteed that $q \\leq 10^5$. You can make hacks only if both versions of the problem are solved.\n\nAn integer grid $A$ with $p$ rows and $q$ columns is called beautiful if:\n\n- All elements of the grid are integers between $0$ and $2^{30}-1$, and\n- For any subgrid, the XOR of the values at the corners is equal to $0$. Formally, for any four integers $i_1$, $i_2$, $j_1$, $j_2$ ($1 \\le i_1 < i_2 \\le p$; $1 \\le j_1 < j_2 \\le q$), $A_{i_1, j_1} \\oplus A_{i_1, j_2} \\oplus A_{i_2, j_1} \\oplus A_{i_2, j_2} = 0$, where $\\oplus$ denotes the [bitwise XOR operation](https://en.wikipedia.org/wiki/Bitwise_operation#XOR).\n\nThere is a partially filled integer grid $G$ with $n$ rows and $m$ columns where only $k$ cells are filled. Polycarp wants to know how many ways he can assign integers to the unfilled cells so that the grid is beautiful.\n\nHowever, Monocarp thinks that this problem is too easy. Therefore, he will perform $q$ updates on the grid. In each update, he will choose an unfilled cell and assign an integer to it. Note that these updates are persistent. That is, changes made to the grid will apply when processing future updates.\n\nFor each of the $q + 1$ states of the grid, the initial state and after each of the $q$ queries, determine the number of ways Polycarp can assign integers to the unfilled cells so that the grid is beautiful. Since this number can be very large, you are only required to output their values modulo $10^9+7$.\n\n### Input\n\nThe first line contains $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains four integers $n$, $m$, $k$ and $q$ ($2 \\le n, m \\le 10^5$; $0 \\le k, q \\leq 10^5$) — the number of rows, the number of columns, the number of fixed cells, and the number of updates.\n\nThe following $k$ lines contain three integers $r$, $c$ and $v$ ($1 \\le r \\le n, 1 \\le c \\le m$; $0 \\le v < 2^{30}$) indicating that $G_{r, c}$ is assigned the integer $v$.\n\nThe following $q$ lines contain three integers $r$, $c$ and $v$ ($1 \\le r \\le n, 1 \\le c \\le m$; $0 \\le v < 2^{30}$) indicating that $G_{r, c}$ is assigned the integer $v$.\n\nIt is guaranteed that the pairs $(r,c)$ over all assignments are distinct.\n\nIt is guaranteed that the sum of $n$, $m$, $k$ and $q$ over all test cases does not exceed $10^5$ respectively.\n\n### Output\n\nFor each test case, output $q + 1$ lines. The $i$-th line of output should contain the answer of the $i$-th state of the grid modulo $10^9 + 7$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3 3 8 1\n\n2 1 6\n\n3 2 12\n\n1 2 6\n\n2 2 0\n\n1 3 10\n\n1 1 0\n\n2 3 12\n\n3 1 10\n\n3 3 1\n\n2 5 2 0\n\n1 1 10\n\n1 2 30\n\n2 5 0 2\n\n1 1 10\n\n1 2 30\n\n```\n\n#### Output #1\n\n```\n1\n0\n489373567\n651321892\n769740174\n489373567\n```\n\n### Note\n\nIn the first test case of the example, we initially have the following grid:\n\n$0\n\n$$6$$\n\n10\n\n$$6$$\n\n0\n\n$$12$$\n\n10\n\n$$12$$\n\nIt can be proven that the only valid value for tile $(3, 3)$ is $0$, so the first answer is $1$. For the second query, the grid does not satisfy the condition, and thus the answer is $0$.", "cfid": "2022E2"}
{"problem_id": "2022E1", "problem_title": "E1. Billetes MX (Easy Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2022/E1", "problem_statement": "This is the easy version of the problem. In this version, it is guaranteed that $q = 0$. You can make hacks only if both versions of the problem are solved.\n\nAn integer grid $A$ with $p$ rows and $q$ columns is called beautiful if:\n\n- All elements of the grid are integers between $0$ and $2^{30}-1$, and\n- For any subgrid, the XOR of the values at the corners is equal to $0$. Formally, for any four integers $i_1$, $i_2$, $j_1$, $j_2$ ($1 \\le i_1 < i_2 \\le p$; $1 \\le j_1 < j_2 \\le q$), $A_{i_1, j_1} \\oplus A_{i_1, j_2} \\oplus A_{i_2, j_1} \\oplus A_{i_2, j_2} = 0$, where $\\oplus$ denotes the [bitwise XOR operation](https://en.wikipedia.org/wiki/Bitwise_operation#XOR).\n\nThere is a partially filled integer grid $G$ with $n$ rows and $m$ columns where only $k$ cells are filled. Polycarp wants to know how many ways he can assign integers to the unfilled cells so that the grid is beautiful.\n\nHowever, Monocarp thinks that this problem is too easy. Therefore, he will perform $q$ updates on the grid. In each update, he will choose an unfilled cell and assign an integer to it. Note that these updates are persistent. That is, changes made to the grid will apply when processing future updates.\n\nFor each of the $q + 1$ states of the grid, the initial state and after each of the $q$ queries, determine the number of ways Polycarp can assign integers to the unfilled cells so that the grid is beautiful. Since this number can be very large, you are only required to output their values modulo $10^9+7$.\n\n### Input\n\nThe first line contains $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains four integers $n$, $m$, $k$ and $q$ ($2 \\le n, m \\le 10^5$; $0 \\le k \\le 10^5$; $q = 0$) — the number of rows, the number of columns, the number of fixed cells, and the number of updates.\n\nThe following $k$ lines contain three integers $r$, $c$ and $v$ ($1 \\le r \\le n, 1 \\le c \\le m$; $0 \\le v < 2^{30}$) — indicating that $G_{r, c}$ is assigned the integer $v$.\n\nThe following $q$ lines contain three integers $r$, $c$ and $v$ ($1 \\le r \\le n, 1 \\le c \\le m$; $0 \\le v < 2^{30}$) — indicating that $G_{r, c}$ is assigned the integer $v$.\n\nIt is guaranteed that the pairs $(r,c)$ over all assignments are distinct.\n\nIt is guaranteed that the sum of $n$, $m$, $k$ and $q$ over all test cases does not exceed $10^5$ respectively.\n\n### Output\n\nFor each test case, output $q + 1$ lines. The $i$-th line of output should contain the answer of the $i$-th state of the grid modulo $10^9 + 7$.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n3 3 8 0\n\n2 1 6\n\n3 2 12\n\n1 2 6\n\n2 2 0\n\n1 3 10\n\n1 1 0\n\n2 3 12\n\n3 1 10\n\n2 5 2 0\n\n1 1 10\n\n1 2 30\n\n```\n\n#### Output #1\n\n```\n1\n489373567\n```\n\n### Note\n\nIn the first test case of the example, we have the following grid:\n\n$0\n\n$$6$$\n\n10\n\n$$6$$\n\n0\n\n$$12$$\n\n10\n\n$$12$$\n\nIt can be proven that the only valid value for tile $(3, 3)$ is $0$.", "cfid": "2022E1"}
{"problem_id": "2022D2", "problem_title": "D2. Asesino (Hard Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2022/D2", "problem_statement": "This is the hard version of the problem. In this version, you must use the minimum number of queries possible. You can make hacks only if both versions of the problem are solved.\n\nThis is an interactive problem.\n\nIt is a tradition in Mexico's national IOI trainings to play the game \"Asesino\", which is similar to \"Among Us\" or \"Mafia\".\n\nToday, $n$ players, numbered from $1$ to $n$, will play \"Asesino\" with the following three roles:\n\n- Knight: a Knight is someone who always tells the truth.\n- Knave: a Knave is someone who always lies.\n- Impostor: an Impostor is someone everybody thinks is a Knight, but is secretly a Knave.\n\nEach player will be assigned a role in the game. There will be exactly one Impostor but there can be any (possible zero) number of Knights and Knaves.\n\nAs the game moderator, you have accidentally forgotten the roles of everyone, but you need to determine the player who is the Impostor.\n\nTo determine the Impostor, you will ask some questions. In each question, you will pick two players $i$ and $j$ ($1 \\leq i, j \\leq n$; $i \\neq j$) and ask if player $i$ thinks that player $j$ is a Knight. The results of the question is shown in the table below.\n\nKnightKnaveImpostorKnightYesNoYesKnaveNoYesNoImpostorNoYes—The response of the cell in row $a$ and column $b$ is the result of asking a question when $i$ has role $a$ and $j$ has row $b$. For example, the \"Yes\" in the top right cell belongs to row \"Knight\" and column \"Impostor\", so it is the response when $i$ is a Knight and $j$ is an Impostor.\n\nFind the Impostor in the minimum number of queries possible. That is, let $f(n)$ be the minimum integer such that for $n$ players, there exists a strategy that can determine the Impostor using at most $f(n)$ questions. Then, you should use at most $f(n)$ questions to determine the Impostor.\n\nNote: the grader is adaptive: the roles of the players are not fixed in the beginning and may change depending on your questions. However, it is guaranteed that there exists an assignment of roles that is consistent with all previously asked questions under the constraints of this problem.\n\n### Input\n\nThe first line of input contains a single integer $t$ ($1 \\leq t \\leq 10^3$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($3 \\le n \\le 10^5$) — the number of people playing the game.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Interaction\n\nTo ask a question, output a line in the following format:\n\n- \"? i j\" ($1 \\leq i,j \\leq n$; $i \\neq j$) — to ask player $i$ if they think player $j$ is a Knight.\n\nThe jury will output a \"1\" if player $i$ thinks player $j$ is a Knight, and \"0\" otherwise.\n\nWhen you have determined which player the Impostor is, output a line in the following format:\n\n- \"! i\" ($1 \\leq i \\leq n$) — the Impostor is player $i$.\n\nNote that answering does not count to your limit of $f(n)$ questions.\n\nIf you have made an invalid output, used more than $f(n)$ questions or wrongly determined the Impostor, the jury will respond with \"-1\" and you will receive a Wrong Answer verdict. Upon receiving \"-1\", your program must terminate immediately. Otherwise, you may receive an arbitrary verdict because your solution might be reading from a closed stream.\n\nAfter printing a query do not forget to output the end of the line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- sys.stdout.flush() in Python;\n- std::io::stdout().flush() in Rust;\n- see the documentation for other languages.\n\nHack format\n\nFor hacks, use the following format.\n\nThe first line should contain a single integer $t$ — the number of test cases.\n\nThe first line of each test case should contain the integer $n$ followed by the string \"manual\".\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($-1 \\le a_i \\le 1$) — the roles of each player. $1$ denotes a Knight, $0$ denotes a Knave, and $-1$ dentoes an Impostor. There must be exactly one Impostor, that is there must be exactly one index $i$ such that $a_i=-1$.\n\nAs an example, the hack format for the example input is:\n\n```\n`2<br/>7 manual<br/>0 1 0 -1 0 1 0<br/>4 manual<br/>0 1 -1 0<br/>````\n\n### Example\n\n#### Input #1\n\n```\n2\n7\n\n1\n\n0\n\n0\n\n1\n\n1\n\n0\n\n0\n\n4\n\n0\n\n1\n\n1\n\n1\n```\n\n#### Output #1\n\n```\n\n? 1 3\n\n? 7 6\n\n? 2 5\n\n? 6 2\n\n? 4 5\n\n? 4 6\n\n? 1 4\n\n! 4\n\n? 1 2\n\n? 2 3\n\n? 3 4\n\n? 4 1\n\n! 3\n```\n\n### Note\n\nNote that the example test cases do not represent an optimal strategy for asking questions and are only shown for the sake of demonstrating the interaction format. Specifically, we cannot determine which player is the Impostor from the questions asked in the examples.\n\nIn the first test case of the example, players at indices $2$ and $6$ are Knights, players at indices $1$, $3$, $5$, and $7$ are Knaves, and the Impostor is at index $4$. The following is an explanation of the questions asked:\n\n- In the first query, player $i$ is a Knave and player $j$ is a Knave. The answer is \"yes\" since Knaves always lie.\n- In the second query, player $i$ is a Knave and player $j$ is a Knight. The answer is \"no\" since Knaves always lie.\n- In the third query, player $i$ is a Knight and player $j$ is a Knave. The answer is \"no\" since Knights always tell the truth.\n- In the fourth query, player $i$ is a Knight and player $j$ is a Knight. The answer is \"yes\" since Knights always tell the truth.\n- In the fifth query, player $i$ is a Impostor and player $j$ is a Knave. The answer is \"yes\" since the Impostor always lies.\n- In the sixth query, player $i$ is a Impostor and player $j$ is a Knight. The answer is \"no\" since the Impostor always lies.\n- In the seventh query, player $i$ is a Knave and player $j$ is a Impostor. The answer is \"no\" since Knaves always lie and Knaves thinks that the Impostor is a Knight.", "cfid": "2022D2"}
{"problem_id": "2022D1", "problem_title": "D1. Asesino (Easy Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2022/D1", "problem_statement": "This is the easy version of the problem. In this version, you can ask at most $n+69$ questions. You can make hacks only if both versions of the problem are solved.\n\nThis is an interactive problem.\n\nIt is a tradition in Mexico's national IOI trainings to play the game \"Asesino\", which is similar to \"Among Us\" or \"Mafia\".\n\nToday, $n$ players, numbered from $1$ to $n$, will play \"Asesino\" with the following three roles:\n\n- Knight: a Knight is someone who always tells the truth.\n- Knave: a Knave is someone who always lies.\n- Impostor: an Impostor is someone everybody thinks is a Knight, but is secretly a Knave.\n\nEach player will be assigned a role in the game. There will be exactly one Impostor but there can be any (possible zero) number of Knights and Knaves.\n\nAs the game moderator, you have accidentally forgotten the roles of everyone, but you need to determine the player who is the Impostor.\n\nTo determine the Impostor, you will ask some questions. In each question, you will pick two players $i$ and $j$ ($1 \\leq i, j \\leq n$; $i \\neq j$) and ask if player $i$ thinks that player $j$ is a Knight. The results of the question is shown in the table below.\n\nKnightKnaveImpostorKnightYesNoYesKnaveNoYesNoImpostorNoYes—The response of the cell in row $a$ and column $b$ is the result of asking a question when $i$ has role $a$ and $j$ has row $b$. For example, the \"Yes\" in the top right cell belongs to row \"Knight\" and column \"Impostor\", so it is the response when $i$ is a Knight and $j$ is an Impostor.\n\nFind the Impostor in at most $n + 69$ questions.\n\nNote: the grader is adaptive: the roles of the players are not fixed in the beginning and may change depending on your questions. However, it is guaranteed that there exists an assignment of roles that is consistent with all previously asked questions under the constraints of this problem.\n\n### Input\n\nThe first line of input contains a single integer $t$ ($1 \\leq t \\leq 10^3$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($3 \\le n \\le 10^5$) — the number of people playing the game.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Interaction\n\nTo ask a question, output a line in the following format:\n\n- \"? i j\" ($1 \\leq i,j \\leq n$; $i \\neq j$) — to ask player $i$ if they think player $j$ is a Knight.\n\nThe jury will output a \"1\" if player $i$ thinks player $j$ is a Knight, and \"0\" otherwise.\n\nWhen you have determined which player the Impostor is, output a line in the following format:\n\n- \"! i\" ($1 \\leq i \\leq n$) — the Impostor is player $i$.\n\nNote that answering does not count to your limit of $n+69$ questions.\n\nIf you have made an invalid output, used more than $n+69$ questions or wrongly determined the Impostor, the jury will respond with \"-1\" and you will receive a Wrong Answer verdict. Upon receiving \"-1\", your program must terminate immediately. Otherwise, you may receive an arbitrary verdict because your solution might be reading from a closed stream.\n\nAfter printing a query do not forget to output the end of the line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- sys.stdout.flush() in Python;\n- std::io::stdout().flush() in Rust;\n- see the documentation for other languages.\n\nHack format\n\nFor hacks, use the following format.\n\nThe first line should contain a single integer $t$ — the number of test cases.\n\nThe first line of each test case should contain the integer $n$ followed by the string \"manual\".\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($-1 \\le a_i \\le 1$) — the roles of each player. $1$ denotes a Knight, $0$ denotes a Knave, and $-1$ dentoes an Impostor. There must be exactly one Impostor, that is there must be exactly one index $i$ such that $a_i=-1$.\n\nAs an example, the hack format for the example input is:\n\n```\n`2<br/>7 manual<br/>0 1 0 -1 0 1 0<br/>4 manual<br/>0 1 -1 0<br/>````\n\n### Example\n\n#### Input #1\n\n```\n2\n7\n\n1\n\n0\n\n0\n\n1\n\n1\n\n0\n\n0\n\n1\n\n4\n\n0\n\n1\n\n1\n\n1\n```\n\n#### Output #1\n\n```\n\n? 1 3\n\n? 7 6\n\n? 2 5\n\n? 6 2\n\n? 4 5\n\n? 4 6\n\n? 1 4\n\n? 2 4\n\n! 4\n\n? 1 2\n\n? 2 3\n\n? 3 4\n\n? 4 1\n\n! 3\n```\n\n### Note\n\nNote that the example test cases do not represent an optimal strategy for asking questions and are only shown for the sake of demonstrating the interaction format. Specifically, we cannot determine which player is the Impostor from the questions asked in the examples.\n\nIn the first test case of the example, players at indices $2$ and $6$ are Knights, players at indices $1$, $3$, $5$, and $7$ are Knaves, and the Impostor is at index $4$. The following is an explanation of the questions asked:\n\n- In the first query, player $i$ is a Knave and player $j$ is a Knave. The answer is \"yes\" since Knaves always lie.\n- In the second query, player $i$ is a Knave and player $j$ is a Knight. The answer is \"no\" since Knaves always lie.\n- In the third query, player $i$ is a Knight and player $j$ is a Knave. The answer is \"no\" since Knights always tell the truth.\n- In the fourth query, player $i$ is a Knight and player $j$ is a Knight. The answer is \"yes\" since Knights always tell the truth.\n- In the fifth query, player $i$ is a Impostor and player $j$ is a Knave. The answer is \"yes\" since the Impostor always lies.\n- In the sixth query, player $i$ is a Impostor and player $j$ is a Knight. The answer is \"no\" since the Impostor always lies.\n- In the seventh query, player $i$ is a Knave and player $j$ is a Impostor. The answer is \"no\" since Knaves always lie and Knaves thinks that the Impostor is a Knight.\n- In the eighth query, player $i$ is a Knight and player $j$ is a Impostor. The answer is \"yes\" since Knights always tell the truth and Knights think that the Impostor is a Knight.", "cfid": "2022D1"}
{"problem_id": "2021E2", "problem_title": "E2. Digital Village (Hard Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2021/E2", "problem_statement": "This is the hard version of the problem. In the three versions, the constraints on $n$ and $m$ are different. You can make hacks only if all the versions of the problem are solved.\n\nPak Chanek is setting up internet connections for the village of Khuntien. The village can be represented as a connected simple graph with $n$ houses and $m$ internet cables connecting house $u_i$ and house $v_i$, each with a latency of $w_i$.\n\nThere are $p$ houses that require internet. Pak Chanek can install servers in at most $k$ of the houses. The houses that need internet will then be connected to one of the servers. However, since each cable has its latency, the latency experienced by house $s_i$ requiring internet will be the maximum latency of the cables between that house and the server it is connected to.\n\nFor each $k = 1,2,\\ldots,n$, help Pak Chanek determine the minimum total latency that can be achieved for all the houses requiring internet.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 2000$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n$, $m$, $p$ ($2 \\le n \\le 5000$; $n-1 \\le m \\le 5000$; $1 \\le p \\le n$) — the number of houses, the number of cables, and the number of houses that need internet.\n\nThe second line of each test case contains $p$ integers $s_1, s_2, \\ldots, s_p$ ($1 \\le s_i \\le n$) — the houses that need internet. It is guaranteed that all elements of $s$ are distinct.\n\nThe $i$-th of the next $m$ lines of each test case contains three integers $u_i$, $v_i$, and $w_i$ ($1 \\le u_i < v_i \\le n$; $1 \\le w_i \\le 10^9$) — the internet cable connecting house $u_i$ and house $v_i$ with latency of $w_i$. It is guaranteed that the given edges form a connected simple graph.\n\nIt is guaranteed that the sum of $n$ and the sum of $m$ do not exceed $5000$.\n\n### Output\n\nFor each test case, output $n$ integers: the minimum total latency that can be achieved for all the houses requiring internet for each $k = 1,2,\\ldots,n$.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n9 8 5\n\n2 5 6 8 9\n\n1 2 1\n\n1 3 2\n\n3 4 10\n\n4 5 3\n\n4 6 5\n\n1 7 10\n\n7 8 4\n\n7 9 2\n\n3 3 2\n\n3 1\n\n1 2 1\n\n2 3 3\n\n1 3 2\n\n```\n\n#### Output #1\n\n```\n34 19 9 4 0 0 0 0 0\n2 0 0\n```\n\n### Note\n\nIn the first test case for $k=3$, a possible optimal solution is to install servers at vertices $2$, $6$ and $8$ and obtain the following latency:\n\n- $\\text{latency}(2) = 0$\n- $\\text{latency}(5) = \\max(3, 5) = 5$\n- $\\text{latency}(6) = 0$\n- $\\text{latency}(8) = 0$\n- $\\text{latency}(9) = \\max(2, 4) = 4$\n\nSo the total latency is $9$.", "cfid": "2021E2"}
{"problem_id": "2021D", "problem_title": "D. Boss, Thirsty", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2021/D", "problem_statement": "Pak Chanek has a friend who runs a drink stall in a canteen. His friend will sell drinks for $n$ days, numbered from day $1$ to day $n$. There are also $m$ types of drinks, numbered from $1$ to $m$.\n\nThe profit gained from selling a drink on a particular day can vary. On day $i$, the projected profit from selling drink of type $j$ is $A_{i, j}$. Note that $A_{i, j}$ can be negative, meaning that selling the drink would actually incur a loss.\n\nPak Chanek wants to help his friend plan the sales over the $n$ days. On day $i$, Pak Chanek must choose to sell at least one type of drink. Furthermore, the types of drinks sold on a single day must form a subarray. In other words, in each day, Pak Chanek will select $i$ and $j$ such that $1 \\leq i \\leq j \\leq m$. Then all types of drinks between $i$ and $j$ (inclusive) will be sold.\n\nHowever, to ensure that customers from the previous day keep returning, the selection of drink types sold on day $i$ ($i>1$) must meet the following conditions:\n\n- At least one drink type sold on day $i$ must also have been sold on day $i-1$.\n- At least one drink type sold on day $i$ must not have been sold on day $i-1$.\n\nThe daily profit is the sum of the profits from all drink types sold on that day. The total profit from the sales plan is the sum of the profits over $n$ days. What is the maximum total profit that can be achieved if Pak Chanek plans the sales optimally?\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\leq n \\leq 2 \\cdot 10^5$; $3 \\leq m \\leq 2 \\cdot 10^5$; $n \\cdot m \\leq 2 \\cdot 10^5$) — the number of rows and columns in a grid.\n\nThe next $n$ lines of each test case contain $m$ integers each, where the $i$-th line contains the integers $A_{i,1} A_{i,2}, \\ldots, A_{i,m}$ ($-10^9 \\leq A_{i,j} \\leq 10^9$) — project profits of each drink type on the $i$-th day.\n\nIt is guaranteed that the sum of $n \\cdot m$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer: the maximum profit that Pak Chanek can achieve.\n\n### Example\n\n#### Input #1\n\n```\n\n1\n\n3 6\n\n79 20 49 5 -1000 500\n\n-105 9 109 24 -98 -499\n\n14 47 12 39 23 50\n\n```\n\n#### Output #1\n\n```\n475\n```\n\n### Note\n\nHere is Pak Chanek's optimal plan:\n\n![](https://espresso.codeforces.com/ccb42f0d02306295b68f615cb77d068a6269d1d6.png)![](https://espresso.codeforces.com/9d9f5b0cf524cb68580876216c9aab01fbf55f0d.png)![](https://espresso.codeforces.com/d3d6b12faf0449759658f9d1f0e6525a52bf3d93.png)\n\n- On day $1$, Pak Chanek sells drink types $1$ to $3$. Generating a profit of $79+20+49 = 148$.\n- On day $2$, Pak Chanek sells drink types $2$ to $4$. Generating a profit of $9+109+24 = 142$\n- On day $3$, Pak Chanek sells drink types $1$ to $6$. Generating a profit of $185$.\n\nSo, the total profit of Pak Chanek's plan is $148 + 142 + 185 = 475$.", "cfid": "2021D"}
{"problem_id": "2021E1", "problem_title": "E1. Digital Village (Easy Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2021/E1", "problem_statement": "This is the easy version of the problem. In the three versions, the constraints on $n$ and $m$ are different. You can make hacks only if all the versions of the problem are solved.\n\nPak Chanek is setting up internet connections for the village of Khuntien. The village can be represented as a connected simple graph with $n$ houses and $m$ internet cables connecting house $u_i$ and house $v_i$, each with a latency of $w_i$.\n\nThere are $p$ houses that require internet. Pak Chanek can install servers in at most $k$ of the houses. The houses that need internet will then be connected to one of the servers. However, since each cable has its latency, the latency experienced by house $s_i$ requiring internet will be the maximum latency of the cables between that house and the server it is connected to.\n\nFor each $k = 1,2,\\ldots,n$, help Pak Chanek determine the minimum total latency that can be achieved for all the houses requiring internet.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 100$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n$, $m$, $p$ ($2 \\le n \\le 400$; $n-1 \\le m \\le 400$; $1 \\le p \\le n$) — the number of houses, the number of cables and the number of houses that need internet.\n\nThe second line of each test case contains $p$ integers $s_1, s_2, \\ldots, s_p$ ($1 \\le s_i \\le n$) — the houses that need internet. It is guaranteed that all elements of $s$ are distinct.\n\nThe $i$-th of the next $m$ lines of each test case contains three integers $u_i$, $v_i$, and $w_i$ ($1 \\le u_i < v_i \\le n$; $1 \\le w_i \\le 10^9$) — the internet cable connecting house $u_i$ and house $v_i$ with latency of $w_i$. It is guaranteed that the given edges form a connected simple graph.\n\nIt is guaranteed that the sum of $n^3$ and the sum of $m^3$ do not exceed $10^8$.\n\n### Output\n\nFor each test case, output $n$ integers: the minimum total latency that can be achieved for all the houses requiring internet for each $k = 1,2,\\ldots,n$.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n9 8 5\n\n2 5 6 8 9\n\n1 2 1\n\n1 3 2\n\n3 4 10\n\n4 5 3\n\n4 6 5\n\n1 7 10\n\n7 8 4\n\n7 9 2\n\n3 3 2\n\n3 1\n\n1 2 1\n\n2 3 3\n\n1 3 2\n\n```\n\n#### Output #1\n\n```\n34 19 9 4 0 0 0 0 0\n2 0 0\n```\n\n### Note\n\nIn the first test case for $k=3$, a possible optimal solution is to install servers at vertices $2$, $6$ and $8$ and obtain the following latency:\n\n- $\\text{latency}(2) = 0$\n- $\\text{latency}(5) = \\max(3, 5) = 5$\n- $\\text{latency}(6) = 0$\n- $\\text{latency}(8) = 0$\n- $\\text{latency}(9) = \\max(2, 4) = 4$\n\nSo the total latency is $9$.", "cfid": "2021E1"}
{"problem_id": "2021E3", "problem_title": "E3. Digital Village (Extreme Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2021/E3", "problem_statement": "This is the extreme version of the problem. In the three versions, the constraints on $n$ and $m$ are different. You can make hacks only if all the versions of the problem are solved.\n\nPak Chanek is setting up internet connections for the village of Khuntien. The village can be represented as a connected simple graph with $n$ houses and $m$ internet cables connecting house $u_i$ and house $v_i$, each with a latency of $w_i$.\n\nThere are $p$ houses that require internet. Pak Chanek can install servers in at most $k$ of the houses. The houses that need internet will then be connected to one of the servers. However, since each cable has its latency, the latency experienced by house $s_i$ requiring internet will be the maximum latency of the cables between that house and the server it is connected to.\n\nFor each $k = 1,2,\\ldots,n$, help Pak Chanek determine the minimum total latency that can be achieved for all the houses requiring internet.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains 3 integers $n$, $m$, $p$ ($2 \\le n \\le 2 \\cdot 10^5$; $n-1 \\le m \\le 2 \\cdot 10^5$; $1 \\le p \\le n$) — the number of houses, the number of cables, and the number of houses that need internet.\n\nThe second line of each test case contains $p$ integers $s_1, s_2, \\ldots, s_p$ ($1 \\le s_i \\le n$) — the houses that need internet. It is guaranteed that all elements of $s$ are distinct.\n\nThe $i$-th of the next $m$ lines of each test case contains three integers $u_i$, $v_i$, and $w_i$ ($1 \\le u_i < v_i \\le n$; $1 \\le w_i \\le 10^9$) — the internet cable connecting house $u_i$ and house $v_i$ with latency of $w_i$. It is guaranteed that the given edges form a connected simple graph.\n\nIt is guaranteed that the sum of $n$ and the sum of $m$ do not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output $n$ integers: the minimum total latency that can be achieved for all the houses requiring internet for each $k = 1,2,\\ldots,n$.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n9 8 5\n\n2 5 6 8 9\n\n1 2 1\n\n1 3 2\n\n3 4 10\n\n4 5 3\n\n4 6 5\n\n1 7 10\n\n7 8 4\n\n7 9 2\n\n3 3 2\n\n3 1\n\n1 2 1\n\n2 3 3\n\n1 3 2\n\n```\n\n#### Output #1\n\n```\n34 19 9 4 0 0 0 0 0\n2 0 0\n```\n\n### Note\n\nIn the first test case for $k=3$, a possible optimal solution is to install servers at vertices $2$, $6$ and $8$ and obtain the following latency:\n\n- $\\text{latency}(2) = 0$\n- $\\text{latency}(5) = \\max(3, 5) = 5$\n- $\\text{latency}(6) = 0$\n- $\\text{latency}(8) = 0$\n- $\\text{latency}(9) = \\max(2, 4) = 4$\n\nSo the total latency is $9$.", "cfid": "2021E3"}
{"problem_id": "2021C2", "problem_title": "C2. Adjust The Presentation (Hard Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2021/C2", "problem_statement": "This is the hard version of the problem. In the two versions, the constraints on $q$ and the time limit are different. In this version, $0 \\leq q \\leq 2 \\cdot 10^5$. You can make hacks only if all the versions of the problem are solved.\n\nA team consisting of $n$ members, numbered from $1$ to $n$, is set to present a slide show at a large meeting. The slide show contains $m$ slides.\n\nThere is an array $a$ of length $n$. Initially, the members are standing in a line in the order of $a_1, a_2, \\ldots, a_n$ from front to back. The slide show will be presented in order from slide $1$ to slide $m$. Each section will be presented by the member at the front of the line. After each slide is presented, you can move the member at the front of the line to any position in the lineup (without changing the order of the rest of the members). For example, suppose the line of members is $[\\color{red}{3},1,2,4]$. After member $3$ presents the current slide, you can change the line of members into either $[\\color{red}{3},1,2,4]$, $[1,\\color{red}{3},2,4]$, $[1,2,\\color{red}{3},4]$ or $[1,2,4,\\color{red}{3}]$.\n\nThere is also an array $b$ of length $m$. The slide show is considered good if it is possible to make member $b_i$ present slide $i$ for all $i$ from $1$ to $m$ under these constraints.\n\nHowever, your annoying boss wants to make $q$ updates to the array $b$. In the $i$-th update, he will choose a slide $s_i$ and a member $t_i$ and set $b_{s_i} := t_i$. Note that these updates are persistent, that is changes made to the array $b$ will apply when processing future updates.\n\nFor each of the $q+1$ states of array $b$, the initial state and after each of the $q$ updates, determine if the slideshow is good.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n$, $m$ and $q$ ($1 \\le n, m \\le 2 \\cdot 10^5$; $0 \\leq q \\leq 2 \\cdot 10^5$) — the number of members and the number of sections.\n\nThe second line of each test case contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($1 \\le a_i \\le n$) — the initial order of the members from front to back. It is guaranteed that each integer from $1$ to $n$ appears exactly once in $a$.\n\nThe third line of each test case contains $m$ integers $b_1, b_2, \\ldots, b_m$ ($1 \\le b_i \\le n$) — the members who should present each section.\n\nEach of the next $q$ lines contains two integers $s_i$ and $t_i$ ($1 \\le s_i \\le m$, $1 \\le t_i \\le n$) — parameters of an update.\n\nIt is guaranteed that the sum of $n$, the sum of $m$ and the sum of $q$ over all test cases do not exceed $2 \\cdot 10^5$ respectively.\n\n### Output\n\nFor each test case, output $q+1$ lines corresponding to the $q+1$ states of the array $b$. Output \"YA\" if the slide show is good, and \"TIDAK\" otherwise.\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yA\", \"Ya\", \"ya\", and \"YA\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n4 2 2\n\n1 2 3 4\n\n1 1\n\n1 2\n\n1 1\n\n3 6 2\n\n1 2 3\n\n1 1 2 3 3 2\n\n3 3\n\n2 2\n\n4 6 2\n\n3 1 4 2\n\n3 1 1 2 3 4\n\n3 4\n\n4 2\n\n```\n\n#### Output #1\n\n```\nYA\nTIDAK\nYA\nYA\nTIDAK\nYA\nTIDAK\nYA\nYA\n```\n\n### Note\n\nFor the first test case, you do not need to move the members as both slides are presented by member $1$, who is already at the front of the line. After that, set $b_1 := 2$, now slide $1$ must be presented by member $2$ which is impossible as member $1$ will present slide $1$ first. Then, set $b_1 = 1$, the $b$ is the same as the initial $b$, making a good presentation possible.", "cfid": "2021C2"}
{"problem_id": "2020E", "problem_title": "E. Expected Power", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2020/E", "problem_statement": "You are given an array of $n$ integers $a_1,a_2,\\ldots,a_n$. You are also given an array $p_1, p_2, \\ldots, p_n$.\n\nLet $S$ denote the random multiset (i. e., it may contain equal elements) constructed as follows:\n\n- Initially, $S$ is empty.\n- For each $i$ from $1$ to $n$, insert $a_i$ into $S$ with probability $\\frac{p_i}{10^4}$. Note that each element is inserted independently.\n\nDenote $f(S)$ as the [bitwise XOR](https://en.wikipedia.org/wiki/Bitwise_operation#XOR) of all elements of $S$. Please calculate the expected value of $(f(S))^2$. Output the answer modulo $10^9 + 7$.\n\nFormally, let $M = 10^9 + 7$. It can be shown that the answer can be expressed as an irreducible fraction $\\frac{p}{q}$, where $p$ and $q$ are integers and $q \\not \\equiv 0 \\pmod{M}$. Output the integer equal to $p \\cdot q^{-1} \\bmod M$. In other words, output such an integer $x$ that $0 \\le x < M$ and $x \\cdot q \\equiv p \\pmod{M}$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$).\n\nThe second line of each test case contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($1 \\le a_i \\le 1023$).\n\nThe third line of each test case contains $n$ integers $p_1,p_2,\\ldots,p_n$ ($1 \\le p_i \\le 10^4$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the expected value of $(f(S))^2$, modulo $10^9 + 7$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2\n\n1 2\n\n5000 5000\n\n2\n\n1 1\n\n1000 2000\n\n6\n\n343 624 675 451 902 820\n\n6536 5326 7648 2165 9430 5428\n\n1\n\n1\n\n10000\n\n```\n\n#### Output #1\n\n```\n500000007\n820000006\n280120536\n1\n```\n\n### Note\n\nIn the first test case, $a = [1, 2]$ and each element is inserted into $S$ with probability $\\frac{1}{2}$, since $p_1 = p_2 = 5000$ and $\\frac{p_i}{10^4} = \\frac{1}{2}$. Thus, there are $4$ outcomes for $S$, each happening with the same probability of $\\frac{1}{4}$:\n\n- $S = \\varnothing$. In this case, $f(S) = 0$, $(f(S))^2 = 0$.\n- $S = \\{1\\}$. In this case, $f(S) = 1$, $(f(S))^2 = 1$.\n- $S = \\{2\\}$. In this case, $f(S) = 2$, $(f(S))^2 = 4$.\n- $S = \\{1,2\\}$. In this case, $f(S) = 1 \\oplus 2 = 3$, $(f(S))^2 = 9$.\n\nHence, the answer is $0 \\cdot \\frac{1}{4} + 1 \\cdot \\frac{1}{4} + 4\\cdot \\frac{1}{4} + 9 \\cdot \\frac{1}{4} = \\frac{14}{4} = \\frac{7}{2} \\equiv 500\\,000\\,007 \\pmod{10^9 + 7}$.\n\nIn the second test case, $a = [1, 1]$, $a_1$ is inserted into $S$ with probability $0.1$, while $a_2$ is inserted into $S$ with probability $0.2$. There are $3$ outcomes for $S$:\n\n- $S = \\varnothing$. In this case, $f(S) = 0$, $(f(S))^2 = 0$. This happens with probability $(1-0.1) \\cdot (1-0.2) = 0.72$.\n- $S = \\{1\\}$. In this case, $f(S) = 1$, $(f(S))^2 = 1$. This happens with probability $(1-0.1) \\cdot 0.2 + 0.1 \\cdot (1-0.2) = 0.26$.\n- $S = \\{1, 1\\}$. In this case, $f(S) = 0$, $(f(S))^2 = 0$. This happens with probability $0.1 \\cdot 0.2 = 0.02$.\n\nHence, the answer is $0 \\cdot 0.72 + 1 \\cdot 0.26 + 0 \\cdot 0.02 = 0.26 = \\frac{26}{100} \\equiv 820\\,000\\,006 \\pmod{10^9 + 7}$.", "cfid": "2020E"}
{"problem_id": "2020F", "problem_title": "F. Count Leaves", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2020/F", "problem_statement": "Let $n$ and $d$ be positive integers. We build the the divisor tree $T_{n,d}$ as follows:\n\n- The root of the tree is a node marked with number $n$. This is the $0$-th layer of the tree.\n- For each $i$ from $0$ to $d - 1$, for each vertex of the $i$-th layer, do the following. If the current vertex is marked with $x$, create its children and mark them with all possible distinct divisors$^\\dagger$ of $x$. These children will be in the $(i+1)$-st layer.\n- The vertices on the $d$-th layer are the leaves of the tree.\n\nFor example, $T_{6,2}$ (the divisor tree for $n = 6$ and $d = 2$) looks like this:\n\n![](https://espresso.codeforces.com/78c70e79ff2523fff4760665c9512ce7f9360607.png)\n\nDefine $f(n,d)$ as the number of leaves in $T_{n,d}$.\n\nGiven integers $n$, $k$, and $d$, please compute $\\sum\\limits_{i=1}^{n} f(i^k,d)$, modulo $10^9+7$.\n\n$^\\dagger$ In this problem, we say that an integer $y$ is a divisor of $x$ if $y \\ge 1$ and there exists an integer $z$ such that $x = y \\cdot z$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe only line of each test case contains three integers $n$, $k$, and $d$ ($1 \\le n \\le 10^9$, $1 \\le k,d \\le 10^5$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^9$.\n\n### Output\n\nFor each test case, output $\\sum\\limits_{i=1}^{n} f(i^k,d)$, modulo $10^9+7$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n6 1 1\n\n1 3 3\n\n10 1 2\n\n```\n\n#### Output #1\n\n```\n14\n1\n53\n```\n\n### Note\n\nIn the first test case, $n = 6$, $k = 1$, and $d = 1$. Thus, we need to find the total number of leaves in the divisor trees $T_{1,1}$, $T_{2,1}$, $T_{3,1}$, $T_{4,1}$, $T_{5,1}$, $T_{6,1}$.\n\n- $T_{1,1}$ has only one leaf, which is marked with $1$.\n- $T_{2,1}$ has two leaves, marked with $1$ and $2$.\n- $T_{3,1}$ has two leaves, marked with $1$ and $3$.\n- $T_{4,1}$ has three leaves, marked with $1$, $2$, and $4$.\n- $T_{5,1}$ has two leaves, marked with $1$ and $5$.\n- $T_{6,1}$ has four leaves, marked with $1$, $2$, $3$, and $6$.\n\nThe total number of leaves is $1 + 2 + 2 + 3 + 2 + 4 = 14$.\n\nIn the second test case, $n = 1$, $k = 3$, $d = 3$. Thus, we need to find the number of leaves in $T_{1,3}$, because $1^3 = 1$. This tree has only one leaf, so the answer is $1$.", "cfid": "2020F"}
{"problem_id": "2018B", "problem_title": "B. Speedbreaker", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2018/B", "problem_statement": "[Djjaner - Speedbreaker](https://soundcloud.com/luciano-ferrari-151560131/speedbreaker)\n\n⠀\n\nThere are $n$ cities in a row, numbered $1, 2, \\ldots, n$ left to right.\n\n- At time $1$, you conquer exactly one city, called the starting city.\n- At time $2, 3, \\ldots, n$, you can choose a city adjacent to the ones conquered so far and conquer it.\n\nYou win if, for each $i$, you conquer city $i$ at a time no later than $a_i$. A winning strategy may or may not exist, also depending on the starting city. How many starting cities allow you to win?\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) — the number of cities.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le n$) — the deadlines for conquering the cities.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer: the number of starting cities that allow you to win.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n6\n\n6 3 3 3 5 5\n\n6\n\n5 6 4 1 4 5\n\n9\n\n8 6 4 2 1 3 5 7 9\n\n```\n\n#### Output #1\n\n```\n3\n0\n1\n```\n\n### Note\n\nIn the first test case, cities $2$, $3$, and $4$ are good starting cities.\n\nIn the second test case, there are no good starting cities.\n\nIn the third test case, the only good starting city is city $5$.", "cfid": "2018B"}
{"problem_id": "2018F2", "problem_title": "F2. Speedbreaker Counting (Medium Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2018/F2", "problem_statement": "[NightHawk22 - Isolation](https://soundcloud.com/vepium/nighthawk22-isolation-official-limbo-remix)\n\n⠀\n\nThis is the medium version of the problem. In the three versions, the constraints on $n$ and the time limit are different. You can make hacks only if all the versions of the problem are solved.\n\nThis is the statement of Problem D1B:\n\n- There are $n$ cities in a row, numbered $1, 2, \\ldots, n$ left to right.\n\n  - At time $1$, you conquer exactly one city, called the starting city.\n  - At time $2, 3, \\ldots, n$, you can choose a city adjacent to the ones conquered so far and conquer it.\n\nYou win if, for each $i$, you conquer city $i$ at a time no later than $a_i$. A winning strategy may or may not exist, also depending on the starting city. How many starting cities allow you to win?\n\nFor each $0 \\leq k \\leq n$, count the number of arrays of positive integers $a_1, a_2, \\ldots, a_n$ such that\n\n- $1 \\leq a_i \\leq n$ for each $1 \\leq i \\leq n$;\n- the answer to Problem D1B is $k$.\n\nThe answer can be very large, so you have to calculate it modulo a given prime $p$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 500$). The description of the test cases follows.\n\nThe only line of each test case contains two integers $n$, $p$ ($1 \\le n \\le 500$, $10^8 \\leq p \\leq 10^9$, $p$ is prime) — the number of cities and the modulo.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $500$.\n\n### Output\n\nFor each test case, output $n+1$ integers: the $i$-th integer should be the number of arrays that satisfy the conditions for $k = i-1$.\n\n### Example\n\n#### Input #1\n\n```\n\n11\n\n1 998244353\n\n2 998244353\n\n3 998244353\n\n4 998244353\n\n5 998244353\n\n6 998244353\n\n7 998244353\n\n8 998244353\n\n9 998244353\n\n10 102275857\n\n10 999662017\n\n```\n\n#### Output #1\n\n```\n0 1\n1 2 1\n14 7 4 2\n183 34 19 16 4\n2624 209 112 120 48 12\n42605 1546 793 992 468 216 36\n785910 13327 6556 9190 4672 2880 864 144\n16382863 130922 61939 94992 50100 36960 14256 4608 576\n382823936 1441729 657784 1086596 583344 488700 216000 96480 23040 2880\n20300780 17572114 7751377 13641280 7376068 6810552 3269700 1785600 576000 144000 14400\n944100756 17572114 7751377 13641280 7376068 6810552 3269700 1785600 576000 144000 14400\n```\n\n### Note\n\nIn the first test case,\n\n- arrays with $1$ good starting city: $[1]$.\n\nIn the second test case,\n\n- arrays with $0$ good starting cities: $[1, 1]$;\n- arrays with $1$ good starting city: $[1, 2]$, $[2, 1]$;\n- arrays with $2$ good starting cities: $[2, 2]$.\n\nIn the third test case,\n\n- arrays with $0$ good starting cities: $[1, 1, 1]$, $[1, 1, 2]$, $[1, 1, 3]$, $[1, 2, 1]$, $[1, 2, 2]$, $[1, 3, 1]$, $[1, 3, 2]$, $[2, 1, 1]$, $[2, 1, 2]$, $[2, 2, 1]$, $[2, 2, 2]$, $[2, 3, 1]$, $[2, 3, 2]$, $[3, 1, 1]$;\n- arrays with $1$ good starting city: $[1, 2, 3]$, $[1, 3, 3]$, $[2, 1, 3]$, $[3, 1, 2]$, $[3, 1, 3]$, $[3, 2, 1]$, $[3, 3, 1]$;\n- arrays with $2$ good starting cities: $[2, 2, 3]$, $[2, 3, 3]$, $[3, 2, 2]$, $[3, 3, 2]$;\n- arrays with $3$ good starting cities: $[3, 2, 3]$, $[3, 3, 3]$.", "cfid": "2018F2"}
{"problem_id": "2018D", "problem_title": "D. Max Plus Min Plus Size", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2018/D", "problem_statement": "[EnV - The Dusty Dragon Tavern](https://soundcloud.com/envyofficial/env-the-dusty-dragon-tavern)\n\n⠀\n\nYou are given an array $a_1, a_2, \\ldots, a_n$ of positive integers.\n\nYou can color some elements of the array red, but there cannot be two adjacent red elements (i.e., for $1 \\leq i \\leq n-1$, at least one of $a_i$ and $a_{i+1}$ must not be red).\n\nYour score is the maximum value of a red element, plus the minimum value of a red element, plus the number of red elements. Find the maximum score you can get.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) — the length of the array.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$) — the given array.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer: the maximum possible score you can get after coloring some elements red according to the statement.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3\n\n5 4 5\n\n3\n\n4 5 4\n\n10\n\n3 3 3 3 4 1 2 3 5 4\n\n10\n\n17 89 92 42 29 41 92 14 70 45\n\n```\n\n#### Output #1\n\n```\n12\n11\n12\n186\n```\n\n### Note\n\nIn the first test case, you can color the array as follows: $[\\color{red}{5}, 4, \\color{red}{5}]$. Your score is $\\max([5, 5]) + \\min([5, 5]) + \\text{size}([5, 5]) = 5+5+2 = 12$. This is the maximum score you can get.\n\nIn the second test case, you can color the array as follows: $[4, \\color{red}{5}, 4]$. Your score is $\\max([5]) + \\min([5]) + \\text{size}([5]) = 5+5+1 = 11$. This is the maximum score you can get.\n\nIn the third test case, you can color the array as follows: $[\\color{red}{3}, 3, \\color{red}{3}, 3, \\color{red}{4}, 1, 2, \\color{red}{3}, 5, \\color{red}{4}]$. Your score is $\\max([3, 3, 4, 3, 4]) + \\min([3, 3, 4, 3, 4]) + \\text{size}([3, 3, 4, 3, 4]) = 4+3+5 = 12$. This is the maximum score you can get.", "cfid": "2018D"}
{"problem_id": "2018F1", "problem_title": "F1. Speedbreaker Counting (Easy Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2018/F1", "problem_statement": "[NightHawk22 - Isolation](https://soundcloud.com/vepium/nighthawk22-isolation-official-limbo-remix)\n\n⠀\n\nThis is the easy version of the problem. In the three versions, the constraints on $n$ and the time limit are different. You can make hacks only if all the versions of the problem are solved.\n\nThis is the statement of Problem D1B:\n\n- There are $n$ cities in a row, numbered $1, 2, \\ldots, n$ left to right.\n\n  - At time $1$, you conquer exactly one city, called the starting city.\n  - At time $2, 3, \\ldots, n$, you can choose a city adjacent to the ones conquered so far and conquer it.\n\nYou win if, for each $i$, you conquer city $i$ at a time no later than $a_i$. A winning strategy may or may not exist, also depending on the starting city. How many starting cities allow you to win?\n\nFor each $0 \\leq k \\leq n$, count the number of arrays of positive integers $a_1, a_2, \\ldots, a_n$ such that\n\n- $1 \\leq a_i \\leq n$ for each $1 \\leq i \\leq n$;\n- the answer to Problem D1B is $k$.\n\nThe answer can be very large, so you have to calculate it modulo a given prime $p$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 80$). The description of the test cases follows.\n\nThe only line of each test case contains two integers $n$, $p$ ($1 \\le n \\le 80$, $10^8 \\leq p \\leq 10^9$, $p$ is prime) — the number of cities and the modulo.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $80$.\n\n### Output\n\nFor each test case, output $n+1$ integers: the $i$-th integer should be the number of arrays that satisfy the conditions for $k = i-1$.\n\n### Example\n\n#### Input #1\n\n```\n\n11\n\n1 998244353\n\n2 998244353\n\n3 998244353\n\n4 998244353\n\n5 998244353\n\n6 998244353\n\n7 998244353\n\n8 998244353\n\n9 998244353\n\n10 102275857\n\n10 999662017\n\n```\n\n#### Output #1\n\n```\n0 1\n1 2 1\n14 7 4 2\n183 34 19 16 4\n2624 209 112 120 48 12\n42605 1546 793 992 468 216 36\n785910 13327 6556 9190 4672 2880 864 144\n16382863 130922 61939 94992 50100 36960 14256 4608 576\n382823936 1441729 657784 1086596 583344 488700 216000 96480 23040 2880\n20300780 17572114 7751377 13641280 7376068 6810552 3269700 1785600 576000 144000 14400\n944100756 17572114 7751377 13641280 7376068 6810552 3269700 1785600 576000 144000 14400\n```\n\n### Note\n\nIn the first test case,\n\n- arrays with $1$ good starting city: $[1]$.\n\nIn the second test case,\n\n- arrays with $0$ good starting cities: $[1, 1]$;\n- arrays with $1$ good starting city: $[1, 2]$, $[2, 1]$;\n- arrays with $2$ good starting cities: $[2, 2]$.\n\nIn the third test case,\n\n- arrays with $0$ good starting cities: $[1, 1, 1]$, $[1, 1, 2]$, $[1, 1, 3]$, $[1, 2, 1]$, $[1, 2, 2]$, $[1, 3, 1]$, $[1, 3, 2]$, $[2, 1, 1]$, $[2, 1, 2]$, $[2, 2, 1]$, $[2, 2, 2]$, $[2, 3, 1]$, $[2, 3, 2]$, $[3, 1, 1]$;\n- arrays with $1$ good starting city: $[1, 2, 3]$, $[1, 3, 3]$, $[2, 1, 3]$, $[3, 1, 2]$, $[3, 1, 3]$, $[3, 2, 1]$, $[3, 3, 1]$;\n- arrays with $2$ good starting cities: $[2, 2, 3]$, $[2, 3, 3]$, $[3, 2, 2]$, $[3, 3, 2]$;\n- arrays with $3$ good starting cities: $[3, 2, 3]$, $[3, 3, 3]$.", "cfid": "2018F1"}
{"problem_id": "2014G", "problem_title": "G. Milky Days", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2014/G", "problem_statement": "What is done is done, and the spoilt milk cannot be helped.\n\nLittle John is as little as night is day — he was known to be a giant, at possibly $2.1$ metres tall. It has everything to do with his love for milk.\n\nHis dairy diary has $n$ entries, showing that he acquired $a_i$ pints of fresh milk on day $d_i$. Milk declines in freshness with time and stays drinkable for a maximum of $k$ days. In other words, fresh milk acquired on day $d_i$ will be drinkable between days $d_i$ and $d_i+k-1$ inclusive.\n\nEvery day, Little John drinks drinkable milk, up to a maximum of $m$ pints. In other words, if there are less than $m$ pints of milk, he will drink them all and not be satisfied; if there are at least $m$ pints of milk, he will drink exactly $m$ pints and be satisfied, and it's a milk satisfaction day.\n\nLittle John always drinks the freshest drinkable milk first.\n\nDetermine the number of milk satisfaction days for Little John.\n\n### Input\n\nThe first line of the input contains a single integer $t$ ($1\\leq t \\leq 10^4$), the number of test cases.\n\nThe first line of each test case consists of three integers $n$, $m$, $k$ ($1\\le n$, $m$, $k \\le 10^5$), the number of diary entries, the maximum pints needed for a milk satisfaction day, and the duration of milk's freshness.\n\nThen follow $n$ lines of each test case, each with two integers $d_i$ and $a_i$ ($1\\le d_i$, $a_i \\le 10^6$), the day on which the milk was acquired and the number of pints acquired. They are sorted in increasing values of $d_i$, and all values of $d_i$ are distinct.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer, the number of milk satisfaction days.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n1 1 3\n\n1 5\n\n2 3 3\n\n1 5\n\n2 7\n\n4 5 2\n\n1 9\n\n2 6\n\n4 9\n\n5 6\n\n5 2 4\n\n4 7\n\n5 3\n\n7 1\n\n11 2\n\n12 1\n\n4 1 3\n\n5 10\n\n9 4\n\n14 8\n\n15 3\n\n5 5 5\n\n8 9\n\n10 7\n\n16 10\n\n21 5\n\n28 9\n\n```\n\n#### Output #1\n\n```\n3\n3\n4\n5\n10\n6\n```\n\n### Note\n\nIn the first test case, $5$ pints of milk are good for $3$ days before spoiling.\n\nIn the second test case, the following will happen:\n\n- On day $1$, he will receive $5$ pints of milk and drink $3$ of them (leaving $2$ pints from day $1$);\n- On day $2$, he will receive $7$ pints of milk and drink $3$ of them (leaving $2$ pints from day $1$ and $4$ pints from day $2$);\n- On day $3$, he will drink $3$ pints from day $2$ (leaving $2$ pints from day $1$ and $1$ pint from day $2$);\n- On day $4$, the milk acquired on day $1$ will spoil, and he will drink $1$ pint from day $2$ (no more milk is left).", "cfid": "2014G"}
{"problem_id": "2014H", "problem_title": "H. Robin Hood Archery", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2014/H", "problem_statement": "At such times archery was always the main sport of the day, for the Nottinghamshire yeomen were the best hand at the longbow in all merry England, but this year the Sheriff hesitated...\n\nSheriff of Nottingham has organized a tournament in archery. It's the final round and Robin Hood is playing against Sheriff!\n\nThere are $n$ targets in a row numbered from $1$ to $n$. When a player shoots target $i$, their score increases by $a_i$ and the target $i$ is destroyed. The game consists of turns and players alternate between whose turn it is. Robin Hood always starts the game, then Sheriff and so on. The game continues until all targets are destroyed. Both players start with score $0$.\n\nAt the end of the game, the player with most score wins and the other player loses. If both players have the same score, it's a tie and no one wins or loses. In each turn, the player can shoot any target that wasn't shot before. Both play optimally to get the most score possible.\n\nSheriff of Nottingham has a suspicion that he might lose the game! This cannot happen, you must help Sheriff. Sheriff will pose $q$ queries, each specifying $l$ and $r$. This means that the game would be played only with targets $l, l+1, \\dots, r$, as others would be removed by Sheriff before the game starts.\n\nFor each query $l$, $r$, determine whether the Sheriff can not lose the game when only considering the targets $l, l+1, \\dots, r$.\n\n### Input\n\nThe first line of input contains one integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$, $q$ ($1 \\le n,q \\le 2\\cdot10^5$) — the number of targets and the queries Sheriff will pose.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^6$) — the points for hitting each target.\n\nThen follow $q$ lines, each with two integers $l$ and $r$ ($1 \\le l \\le r \\le n$) — the range of the targets that is considered for each query.\n\nIt is guaranteed that the sum of both $n$ and $q$ across all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each query, output \"YES\", if the Sheriff does not lose the game when only considering the targets $l, l+1, \\dots, r$, and \"NO\" otherwise.\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n3 3\n\n1 2 2\n\n1 2\n\n1 3\n\n2 3\n\n5 3\n\n2 1 2 1 1\n\n1 2\n\n1 3\n\n4 5\n\n```\n\n#### Output #1\n\n```\nNO\nNO\nYES\nNO\nNO\nYES\n```", "cfid": "2014H"}
{"problem_id": "2014F", "problem_title": "F. Sheriff's Defense", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2014/F", "problem_statement": "\"Why, master,\" quoth Little John, taking the bags and weighing them in his hand, \"here is the chink of gold.\"\n\nThe folk hero Robin Hood has been troubling Sheriff of Nottingham greatly. Sheriff knows that Robin Hood is about to attack his camps and he wants to be prepared.\n\nSheriff of Nottingham built the camps with strategy in mind and thus there are exactly $n$ camps numbered from $1$ to $n$ and $n-1$ trails, each connecting two camps. Any camp can be reached from any other camp. Each camp $i$ has initially $a_i$ gold.\n\nAs it is now, all camps would be destroyed by Robin. Sheriff can strengthen a camp by subtracting exactly $c$ gold from each of its neighboring camps and use it to build better defenses for that camp. Strengthening a camp doesn't change its gold, only its neighbors' gold. A camp can have negative gold.\n\nAfter Robin Hood's attack, all camps that have been strengthened survive the attack, all others are destroyed.\n\nWhat's the maximum gold Sheriff can keep in his surviving camps after Robin Hood's attack if he strengthens his camps optimally?\n\nCamp $a$ is neighboring camp $b$ if and only if there exists a trail connecting $a$ and $b$. Only strengthened camps count towards the answer, as others are destroyed.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nEach test case begins with two integers $n$, $c$ ($1 \\le n \\le 2\\cdot10^5, 1 \\le c \\le 10^9$) — the number of camps and the gold taken from each neighboring camp for strengthening.\n\nThe second line of each test case contains $n$ integers $a_1,a_2,\\dots,a_n$ ($-10^9 \\le a_i \\le 10^9$) — the initial gold of each camp.\n\nThen follow $n-1$ lines, each with integers $u$, $v$ ($1 \\le u, v \\le n$, $u \\ne v$) — meaning that there is a trail between $u$ and $v$.\n\nThe sum of $n$ over all test cases doesn't exceed $2\\cdot10^5$.\n\nIt is guaranteed that any camp is reachable from any other camp.\n\n### Output\n\nOutput a single integer, the maximum gold Sheriff of Nottingham can keep in his surviving camps after Robin Hood's attack.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3 1\n\n2 3 1\n\n1 2\n\n2 3\n\n3 1\n\n3 6 3\n\n1 2\n\n2 3\n\n3 1\n\n-2 -3 -1\n\n1 2\n\n2 3\n\n6 1\n\n5 -4 3 6 7 3\n\n4 1\n\n5 1\n\n3 5\n\n3 6\n\n1 2\n\n8 1\n\n3 5 2 7 8 5 -3 -4\n\n7 3\n\n1 8\n\n4 3\n\n3 5\n\n7 6\n\n8 7\n\n2 1\n\n```\n\n#### Output #1\n\n```\n3\n8\n0\n17\n26\n```\n\n### Note\n\nIn the first test case, it is optimal to strengthen the second base. The final gold at each base is $[1,3,0]$.\n\nIn the second test case, it is optimal to strengthen all bases. The final gold at each base is $[2,4,2]$.\n\nIn the third test case, it is optimal to not strengthen any base.", "cfid": "2014F"}
{"problem_id": "2013D", "problem_title": "D. Minimize the Difference", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2013/D", "problem_statement": "Zhan, tired after the contest, gave the only task that he did not solve during the contest to his friend, Sungat. However, he could not solve it either, so we ask you to try to solve this problem.\n\nYou are given an array $a_1, a_2, \\ldots, a_n$ of length $n$. We can perform any number (possibly, zero) of operations on the array.\n\nIn one operation, we choose a position $i$ ($1 \\leq i \\leq n - 1$) and perform the following action:\n\n- $a_i := a_i - 1$, and $a_{i+1} := a_{i+1} + 1$.\n\nFind the minimum possible value of $\\max(a_1, a_2, \\ldots, a_n) - \\min(a_1, a_2, \\ldots, a_n)$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^5$). The description of the test cases follows.\n\nThe first line of each test case contains an integer $n$ ($1 \\leq n \\leq 2 \\cdot 10^5$).\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^{12}$).\n\nThe sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer: the minimum possible value of $\\max(a_1, a_2, \\ldots, a_n) - \\min(a_1, a_2, \\ldots, a_n)$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n1\n\n1\n\n3\n\n1 2 3\n\n4\n\n4 1 2 3\n\n4\n\n4 2 3 1\n\n5\n\n5 14 4 10 2\n\n```\n\n#### Output #1\n\n```\n0\n2\n1\n1\n3\n```\n\n### Note\n\nIn the third testcase, you can perform the operation twice with $i = 1$.\n\nAfter that, the array is $a = [2, 3, 2, 3]$, and $\\max(2, 3, 2, 3) - \\min(2, 3, 2, 3) = 3 - 2 = 1$.", "cfid": "2013D"}
{"problem_id": "2013F1", "problem_title": "F1. Game in Tree (Easy Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2013/F1", "problem_statement": "This is the easy version of the problem. In this version, $\\mathbf{u = v}$. You can make hacks only if both versions of the problem are solved.\n\nAlice and Bob are playing a fun game on a tree. This game is played on a tree with $n$ vertices, numbered from $1$ to $n$. Recall that a tree with $n$ vertices is an undirected connected graph with $n - 1$ edges.\n\nAlice and Bob take turns, with Alice going first. Each player starts at some vertex.\n\nOn their turn, a player must move from the current vertex to a neighboring vertex that has not yet been visited by anyone. The first player who cannot make a move loses.\n\nYou are given two vertices $u$ and $v$. Represent the simple path from vertex $u$ to $v$ as an array $p_1, p_2, p_3, \\ldots, p_m$, where $p_1 = u$, $p_m = v$, and there is an edge between $p_i$ and $p_{i + 1}$ for all $i$ ($1 \\le i < m$).\n\nYou need to determine the winner of the game if Alice starts at vertex $1$ and Bob starts at vertex $p_j$ for each $j$ (where $1 \\le j \\le m$).\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$) — the number of vertices in the tree.\n\nEach of the following $n - 1$ lines contains two integers $a$ and $b$ ($1 \\le a, b \\le n$), denoting an undirected edge between vertices $a$ and $b$. It is guaranteed that these edges form a tree.\n\nThe last line of each test case contains two integers $u$ and $v$ ($2 \\le u, v \\le n$, $\\mathbf{u = v}$).\n\nIt is guaranteed that the path from $u$ to $v$ does not pass through vertex $1$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output $m$ lines.\n\nIn the $i$-th line, print the winner of the game if Alice starts at vertex $1$ and Bob starts at vertex $p_i$. Print \"Alice\" (without quotes) if Alice wins, or \"Bob\" (without quotes) otherwise.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3\n\n1 2\n\n2 3\n\n2 2\n\n3\n\n1 2\n\n2 3\n\n3 3\n\n6\n\n1 2\n\n1 3\n\n2 4\n\n2 5\n\n1 6\n\n4 4\n\n```\n\n#### Output #1\n\n```\nBob\nAlice\nAlice\n```\n\n### Note\n\n![](https://espresso.codeforces.com/70e2519179e33349716846c2c5f4c4b2ac3f9c21.png)Tree from the first and second examples.\n\nIn the first test case, the path will be ($2,2$). Bob starts at vertex $2$, Alice will not be able to move anywhere on her first turn and will lose.\n\nIn the second test case, the path will be ($3,3$). Bob starts at vertex $3$, Alice will move to vertex $2$, and Bob will have no remaining vertices to visit and will lose.", "cfid": "2013F1"}
{"problem_id": "2013E", "problem_title": "E. Prefix GCD", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2013/E", "problem_statement": "Since Mansur is tired of making legends, there will be no legends for this task.\n\nYou are given an array of positive integer numbers $a\\_1, a\\_2, \\\\ldots, a\\_n$. The elements of the array can be rearranged in any order. You need to find the smallest possible value of the expression \n\n$$\\gcd(a_1) + \\gcd(a_1, a_2) + \\ldots + \\gcd(a_1, a_2, \\ldots, a_n),$$\n\nwhere $\\gcd(a_1, a_2, \\ldots, a_n)$ denotes the [greatest common divisor (GCD)](https://en.wikipedia.org/wiki/Greatest_common_divisor) of $a_1, a_2, \\ldots, a_n$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single number $n$ ($1 \\le n \\le 10^5$) — the size of the array.\n\nThe second line of each test case contains $n$ numbers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^5$) — the initial array.\n\nThe sum of $n$ over all test cases does not exceed $10^5$.\n\nThe sum of $\\max(a_1, a_2, \\ldots, a_n)$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, output a single number on a separate line — the answer to the problem.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3\n\n4 2 2\n\n2\n\n6 3\n\n3\n\n10 15 6\n\n5\n\n6 42 12 52 20\n\n4\n\n42 154 231 66\n\n```\n\n#### Output #1\n\n```\n6\n6\n9\n14\n51\n```\n\n### Note\n\nIn the first test case, the elements can be rearranged as follows: $[2, 4, 2]$. Then the answer will be $\\gcd(2) + \\gcd(2, 4) + \\gcd(2, 4, 2) = 2 + 2 + 2 = 6$.\n\nIn the third test case, the elements can be rearranged as follows: $[6, 10, 15]$. Then the answer will be $\\gcd(6) + \\gcd(6, 10) + \\gcd(6, 10, 15) = 6 + 2 + 1 = 9$.", "cfid": "2013E"}
{"problem_id": "2005E1", "problem_title": "E1. Subtangle Game (Easy Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2005/E1", "problem_statement": "This is the easy version of the problem. The differences between the two versions are the constraints on all the variables. You can make hacks only if both versions of the problem are solved.\n\nTsovak and Narek are playing a game. They have an array $a$ and a matrix $b$ of integers with $n$ rows and $m$ columns, numbered from $1$. The cell in the $i$-th row and the $j$-th column is $(i, j)$.\n\nThey are looking for the elements of $a$ in turns; Tsovak starts first. Each time a player looks for a cell in the matrix containing the current element of $a$ (Tsovak looks for the first, then Narek looks for the second, etc.). Let's say a player has chosen the cell $(r, c)$. The next player has to choose his cell in the submatrix starting at $(r + 1, c + 1)$ and ending in $(n, m)$ (the submatrix can be empty if $r=n$ or $c=m$). If a player cannot find such a cell (or the remaining submatrix is empty) or the array ends (the previous player has chosen the last element), then he loses.\n\nYour task is to determine the winner if the players play optimally.\n\n### Input\n\nThe first line of the input contains $t$ ($1 \\le t \\le 300$) – the number of test cases.\n\nThe first line of each test case contains three integers $l$, $n$, and $m$ ($1 \\le l, n, m \\le 300$) – the size of the array and the sizes of the matrix.\n\nThe second line contains $l$ integers $a_1, a_2, a_3, \\ldots a_l$ ($1 \\le a_i \\le \\min(7, n \\cdot m)$) – the elements of the array $a$.\n\nThe $i$-th of the last $n$ lines contains $m$ integers $b_{i,1}, b_{i,2}, b_{i,3}, \\ldots b_{i,m}$ ($1 \\le b_{i,j} \\le \\min(7, n \\cdot m)$) – representing the $i$-th row of the matrix.\n\nIt is guaranteed that the sum of $n \\cdot m$ over all test cases does not exceed $10^5$.\n\nIt is guaranteed that the sum of $l$ over all test cases does not exceed $300$.\n\n### Output\n\nYou should output $t$ lines, the $i$-th of them containing a character representing the answer of the $i$-th test case: \"T\" if Tsovak wins or \"N\", otherwise (without quotes).\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2 2 3\n\n1 2\n\n1 3 5\n\n4 5 2\n\n2 2 4\n\n1 2\n\n1 1 3 2\n\n4 2 5 1\n\n2 4 2\n\n1 2\n\n3 4\n\n5 5\n\n5 5\n\n5 5\n\n```\n\n#### Output #1\n\n```\nN\nT\nN```\n\n### Note\n\nIn the first example, Tsovak starts by looking for $1$. There is only one occurrence of $1$ at $(1,1)$, so he chooses it. Then Narek needs to look for $2$ in the submatrix of $(2, 2)$, which consists of just the last two elements: $5$ and $2$. He chooses $2$, and then Tsovak loses since the array has ended.\n\nIn the second example, Tsovak needs to choose $1$. There is a $1$ at the cell $(n,m)$, so he chooses that cell. Then, since the submatrix of $(n + 1, m + 1)$ is empty, Narek cannot find $2$, so he loses.", "cfid": "2005E1"}
{"problem_id": "2005E2", "problem_title": "E2. Subtangle Game (Hard Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2005/E2", "problem_statement": "This is the hard version of the problem. The differences between the two versions are the constraints on all the variables. You can make hacks only if both versions of the problem are solved.\n\nTsovak and Narek are playing a game. They have an array $a$ and a matrix $b$ of integers with $n$ rows and $m$ columns, numbered from $1$. The cell in the $i$-th row and the $j$-th column is $(i, j)$.\n\nThey are looking for the elements of $a$ in turns; Tsovak starts first. Each time a player looks for a cell in the matrix containing the current element of $a$ (Tsovak looks for the first, then Narek looks for the second, etc.). Let's say a player has chosen the cell $(r, c)$. The next player has to choose his cell in the submatrix starting at $(r + 1, c + 1)$ and ending in $(n, m)$ (the submatrix can be empty if $r=n$ or $c=m$). If a player cannot find such a cell (or the remaining submatrix is empty) or the array ends (the previous player has chosen the last element), then he loses.\n\nYour task is to determine the winner if the players play optimally.\n\nNote: since the input is large, you may need to optimize input/output for this problem.\n\nFor example, in C++, it is enough to use the following lines at the start of the main() function:\n\n```\n`int main() {<br/>    ios_base::sync_with_stdio(false);<br/>    cin.tie(NULL); cout.tie(NULL);<br/>}<br/>````\n\n### Input\n\nThe first line of the input contains $t$ ($1 \\le t \\le 1500$) – the number of test cases.\n\nThe first line of each test case contains three integers $l$, $n$, and $m$ ($1 \\le l, n, m \\le 1500$) – the size of the array and the sizes of the matrix.\n\nThe second line contains $l$ integers $a_1, a_2, a_3, \\ldots a_l$ ($1 \\le a_i \\le n \\cdot m$) – the elements of the array $a$.\n\nThe $i$-th of the last $n$ lines contains $m$ integers $b_{i,1}, b_{i,2}, b_{i,3}, \\ldots b_{i,m}$ ($1 \\le b_{i,j} \\le n \\cdot m$) – representing the $i$-th row of the matrix.\n\nIt is guaranteed that the sum of $n \\cdot m$ over all test cases does not exceed $3 \\cdot 10^6$.\n\nIt is guaranteed that the sum of $l$ over all test cases does not exceed $1500$.\n\n### Output\n\nYou should output $t$ lines, the $i$-th of them containing a character representing the answer of the $i$-th test case: \"T\" if Tsovak wins or \"N\", otherwise (without quotes).\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2 2 3\n\n1 2\n\n1 3 6\n\n4 6 2\n\n2 2 4\n\n1 2\n\n1 1 3 2\n\n4 2 5 1\n\n2 4 2\n\n1 2\n\n3 4\n\n5 6\n\n7 8\n\n8 8\n\n```\n\n#### Output #1\n\n```\nN\nT\nN\n```\n\n### Note\n\nIn the first example, Tsovak starts by looking for $1$. There is only one occurrence of $1$ at $(1,1)$, so he chooses it. Then Narek needs to look for $2$ in the submatrix of $(2, 2)$, which consists of just the last two elements: $6$ and $2$. He chooses $2$, and then Tsovak loses since the array has ended.\n\nIn the second example, Tsovak needs to choose $1$. There is a $1$ at the cell $(n,m)$, so he chooses that cell. Then, since the submatrix of $(n + 1, m + 1)$ is empty, Narek cannot find $2$, so he loses.", "cfid": "2005E2"}
{"problem_id": "2005D", "problem_title": "D. Alter the GCD", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2005/D", "problem_statement": "You are given two arrays $a_1, a_2, \\ldots, a_n$ and $b_1, b_2, \\ldots, b_n$.\n\nYou must perform the following operation exactly once:\n\n- choose any indices $l$ and $r$ such that $1 \\le l \\le r \\le n$;\n- swap $a_i$ and $b_i$ for all $i$ such that $l \\leq i \\leq r$.\n\nFind the maximum possible value of $\\text{gcd}(a_1, a_2, \\ldots, a_n) + \\text{gcd}(b_1, b_2, \\ldots, b_n)$ after performing the operation exactly once. Also find the number of distinct pairs $(l, r)$ which achieve the maximum value.\n\n### Input\n\nIn the first line of the input, you are given a single integer $t$ ($1 \\le t \\le 10^5$), the number of test cases. Then the description of each test case follows.\n\nIn the first line of each test case, you are given a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$), representing the number of integers in each array.\n\nIn the next line, you are given $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$) — the elements of the array $a$.\n\nIn the last line, you are given $n$ integers $b_1, b_2, \\ldots, b_n$ ($1 \\le b_i \\le 10^9$) — the elements of the array $b$.\n\nThe sum of values of $n$ over all test cases does not exceed $5 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a line with two integers: the maximum value of $\\text{gcd}(a_1, a_2, \\ldots, a_n) + \\text{gcd}(b_1, b_2, \\ldots, b_n)$ after performing the operation exactly once, and the number of ways.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n8\n\n11 4 16 17 3 24 25 8\n\n8 10 4 21 17 18 25 21\n\n4\n\n6 4 24 13\n\n15 3 1 14\n\n2\n\n13 14\n\n5 8\n\n8\n\n20 17 15 11 21 10 3 7\n\n9 9 4 20 14 9 13 1\n\n2\n\n18 13\n\n15 20\n\n```\n\n#### Output #1\n\n```\n2 36\n3 2\n2 3\n2 36\n6 1\n```\n\n### Note\n\nIn the first, third, and fourth test cases, there's no way to achieve a higher GCD than $1$ in any of the arrays, so the answer is $1 + 1 = 2$. Any pair $(l, r)$ achieves the same result; for example, in the first test case there are $36$ such pairs.\n\nIn the last test case, you must choose $l = 1$, $r = 2$ to maximize the answer. In this case, the GCD of the first array is $5$, and the GCD of the second array is $1$, so the answer is $5 + 1 = 6$, and the number of ways is $1$.", "cfid": "2005D"}
{"problem_id": "2008H", "problem_title": "H. Sakurako's Test", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2008/H", "problem_statement": "Sakurako will soon take a test. The test can be described as an array of integers $n$ and a task on it:\n\nGiven an integer $x$, Sakurako can perform the following operation any number of times:\n\n- Choose an integer $i$ ($1\\le i\\le n$) such that $a_i\\ge x$;\n- Change the value of $a_i$ to $a_i-x$.\n\nUsing this operation any number of times, she must find the minimum possible median$^{\\text{∗}}$ of the array $a$.\n\nSakurako knows the array but does not know the integer $x$. Someone let it slip that one of the $q$ values of $x$ will be in the next test, so Sakurako is asking you what the answer is for each such $x$.\n\n$^{\\text{∗}}$The median of an array of length $n$ is the element that stands in the middle of the sorted array (at the $\\frac{n+2}{2}$-th position for even $n$, and at the $\\frac{n+1}{2}$-th for odd)\n\n### Input\n\nThe first line contains one integer $t$ ($1\\le t\\le 10^4$)  — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $q$ ($1\\le n,q\\le 10^5$)  — the number of elements in the array and the number of queries.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1\\le a_i\\le n$)  — the elements of the array.\n\nThe following $q$ lines each contain one integer $x$ ($1\\le x\\le n$).\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $10^5$. The same guarantee applies to the sum of $q$ across all test cases.\n\n### Output\n\nFor each test case, output $q$ integers  — the answer for each query.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n5 5\n\n1 2 3 4 5\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6 3\n\n1 2 6 4 1 3\n\n2\n\n1\n\n5\n\n```\n\n#### Output #1\n\n```\n0 1 1 1 2\n1 0 2\n```", "cfid": "2008H"}
{"problem_id": "2006D", "problem_title": "D. Iris and Adjacent Products", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2006/D", "problem_statement": "Iris has just learned multiplication in her Maths lessons. However, since her brain is unable to withstand too complex calculations, she could not multiply two integers with the product greater than $k$ together. Otherwise, her brain may explode!\n\nHer teacher sets a difficult task every day as her daily summer holiday homework. Now she is given an array $a$ consisting of $n$ elements, and she needs to calculate the product of each two adjacent elements (that is, $a_1 \\cdot a_2$, $a_2 \\cdot a_3$, and so on). Iris wants her brain to work safely, and in order to do that, she would like to modify the array $a$ in such a way that $a_i \\cdot a_{i + 1} \\leq k$ holds for every $1 \\leq i < n$. There are two types of operations she can perform:\n\n1. She can rearrange the elements of the array $a$ in an arbitrary way.\n2. She can select an arbitrary element of the array $a$ and change its value to an arbitrary integer from $1$ to $k$.\n\nIris wants to minimize the number of operations of type $2$ that she uses.\n\nHowever, that's completely not the end of the summer holiday! Summer holiday lasts for $q$ days, and on the $i$-th day, Iris is asked to solve the Math homework for the subarray $b_{l_i}, b_{l_i + 1}, \\ldots, b_{r_i}$. Help Iris and tell her the minimum number of type $2$ operations she needs to perform for each day. Note that the operations are independent for each day, i.e. the array $b$ is not changed.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\leq t \\leq 5\\cdot 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains three integers $n$, $q$ and $k$ ($2 \\leq n \\leq 10^5$, $1 \\leq q \\leq 10^5$, $1 \\leq k \\leq 10^6$) — the length of array $b$, the number of days, and the upper bound for the multiplication calculation.\n\nThe second line of each test case contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($1 \\leq b_i \\leq k$) — the elements of the array $b$.\n\nThen $q$ lines follow, the $i$-th of them contains two integers $l_i$ and $r_i$ ($1 \\leq l_i < r_i \\leq n$) — the boundaries of the subarray on the $i$-th day.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$, and the sum of $q$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test, output a single line containing $q$ integers — the minimum number of operations of type $2$ needed for each day.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3 1 1\n\n1 1 1\n\n1 3\n\n3 2 10\n\n1 10 9\n\n1 3\n\n2 3\n\n5 4 2\n\n2 2 2 2 2\n\n1 2\n\n2 4\n\n2 5\n\n1 5\n\n6 5 10\n\n3 2 5 10 10 1\n\n1 4\n\n3 6\n\n1 6\n\n2 5\n\n5 6\n\n10 10 10\n\n10 9 8 7 6 5 4 3 2 1\n\n1 10\n\n1 9\n\n1 8\n\n1 7\n\n2 10\n\n3 10\n\n4 10\n\n5 10\n\n3 9\n\n6 8\n\n```\n\n#### Output #1\n\n```\n0\n0 1\n1 1 2 2\n1 1 1 1 0\n3 3 4 3 2 2 1 1 2 1\n```\n\n### Note\n\nIn the first test case, as Iris can always multiply $1$ and $1$ together, no operations are needed, so the answer is $0$.\n\nIn the second test case, the first day's homework is $[1, 10, 9]$. Iris can rearrange its elements to get $[9, 1, 10]$, so no operations of type $2$ are needed. The second day's homework is $[10, 9]$, and she can change one element to get the array $[1, 9]$, so one operation of type $2$ is needed.", "cfid": "2006D"}
{"problem_id": "2006C", "problem_title": "C. Eri and Expanded Sets", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2006/C", "problem_statement": "Let there be a set that contains distinct positive integers. To expand the set to contain as many integers as possible, Eri can choose two integers $x\\neq y$ from the set such that their average $\\frac{x+y}2$ is still a positive integer and isn't contained in the set, and add it to the set. The integers $x$ and $y$ remain in the set.\n\nLet's call the set of integers consecutive if, after the elements are sorted, the difference between any pair of adjacent elements is $1$. For example, sets $\\{2\\}$, $\\{2, 5, 4, 3\\}$, $\\{5, 6, 8, 7\\}$ are consecutive, while $\\{2, 4, 5, 6\\}$, $\\{9, 7\\}$ are not.\n\nEri likes consecutive sets. Suppose there is an array $b$, then Eri puts all elements in $b$ into the set. If after a finite number of operations described above, the set can become consecutive, the array $b$ will be called brilliant.\n\nNote that if the same integer appears in the array multiple times, we only put it into the set once, as a set always contains distinct positive integers.\n\nEri has an array $a$ of $n$ positive integers. Please help him to count the number of pairs of integers $(l,r)$ such that $1 \\leq l \\leq r \\leq n$ and the subarray $a_l, a_{l+1}, \\ldots, a_r$ is brilliant.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\leq n \\leq 4 \\cdot 10^5$) — length of the array $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots a_n$ ($1 \\leq a_i \\leq 10^9$) — the elements of the array $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases doesn't exceed $4 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the number of brilliant subarrays.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n2\n\n2 2\n\n6\n\n1 3 6 10 15 21\n\n5\n\n6 30 18 36 9\n\n1\n\n1000000000\n\n6\n\n1 1 4 5 1 4\n\n12\n\n70 130 90 90 90 108 612 500 451 171 193 193\n\n```\n\n#### Output #1\n\n```\n3\n18\n5\n1\n18\n53\n```\n\n### Note\n\nIn the first test case, the array $a = [2, 2]$ has $3$ subarrays: $[2]$, $[2]$, and $[2, 2]$. For all of them, the set only contains a single integer $2$, therefore it's always consecutive. All these subarrays are brilliant, so the answer is $3$.\n\nIn the second test case, let's consider the subarray $[3, 6, 10]$. We can do operations as follows:\n\n\n\n$$\\{3,6,10\\} \\xrightarrow{x=6,y=10} \\{3,6,8,10\\} \\xrightarrow{x=6,y=8} \\{3,6,7,8,10\\} \\xrightarrow{x=3,y=7} \\{3,5,6,7,8,10\\}$$\n\nxrightarrow{x=3,y=5} \\{3,4,5,6,7,8,10\\} \\xrightarrow{x=8,y=10} \\{3,4,5,6,7,8,9,10\\}$$\n\n$\\{3,4,5,6,7,8,9,10\\}$ is a consecutive set, so the subarray $[3, 6, 10]$ is brilliant.", "cfid": "2006C"}
{"problem_id": "2003E1", "problem_title": "E1. Turtle and Inversions (Easy Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2003/E1", "problem_statement": "This is an easy version of this problem. The differences between the versions are the constraint on $m$ and $r_i < l_{i + 1}$ holds for each $i$ from $1$ to $m - 1$ in the easy version. You can make hacks only if both versions of the problem are solved.\n\nTurtle gives you $m$ intervals $[l_1, r_1], [l_2, r_2], \\ldots, [l_m, r_m]$. He thinks that a permutation $p$ is interesting if there exists an integer $k_i$ for every interval ($l_i \\le k_i < r_i$), and if he lets $a_i = \\max\\limits_{j = l_i}^{k_i} p_j, b_i = \\min\\limits_{j = k_i + 1}^{r_i} p_j$ for every integer $i$ from $1$ to $m$, the following condition holds:\n\n\n\n$$\\max\\limits_{i = 1}^m a_i < \\min\\limits_{i = 1}^m b_i$$\n\nTurtle wants you to calculate the maximum number of inversions of all interesting permutations of length $n$, or tell him if there is no interesting permutation.\n\nAn inversion of a permutation $p$ is a pair of integers $(i, j)$ ($1 \\le i < j \\le n$) such that $p_i > p_j$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^3$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n, m$ ($2 \\le n \\le 5 \\cdot 10^3, 0 \\le m \\le \\frac{n}{2}$) — the length of the permutation and the number of intervals.\n\nThe $i$-th of the following $m$ lines contains two integers $l_i, r_i$ ($1 \\le l_i < r_i \\le n$) — the $i$-th interval.\n\nAdditional constraint on the input in this version: $r_i < l_{i + 1}$ holds for each $i$ from $1$ to $m - 1$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5 \\cdot 10^3$.\n\n### Output\n\nFor each test case, if there is no interesting permutation, output a single integer $-1$.\n\nOtherwise, output a single integer — the maximum number of inversions.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n2 0\n\n2 1\n\n1 2\n\n5 1\n\n2 4\n\n8 2\n\n1 4\n\n6 8\n\n7 2\n\n1 3\n\n4 7\n\n7 3\n\n1 2\n\n3 4\n\n5 6\n\n```\n\n#### Output #1\n\n```\n1\n0\n8\n21\n15\n15\n```\n\n### Note\n\nIn the third test case, the interesting permutation with the maximum number of inversions is $[5, 2, 4, 3, 1]$.\n\nIn the fourth test case, the interesting permutation with the maximum number of inversions is $[4, 8, 7, 6, 3, 2, 1, 5]$. In this case, we can let $[k_1, k_2] = [1, 7]$.\n\nIn the fifth test case, the interesting permutation with the maximum number of inversions is $[4, 7, 6, 3, 2, 1, 5]$.\n\nIn the sixth test case, the interesting permutation with the maximum number of inversions is $[4, 7, 3, 6, 2, 5, 1]$.", "cfid": "2003E1"}
{"problem_id": "2003E2", "problem_title": "E2. Turtle and Inversions (Hard Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2003/E2", "problem_statement": "This is a hard version of this problem. The differences between the versions are the constraint on $m$ and $r_i < l_{i + 1}$ holds for each $i$ from $1$ to $m - 1$ in the easy version. You can make hacks only if both versions of the problem are solved.\n\nTurtle gives you $m$ intervals $[l_1, r_1], [l_2, r_2], \\ldots, [l_m, r_m]$. He thinks that a permutation $p$ is interesting if there exists an integer $k_i$ for every interval ($l_i \\le k_i < r_i$), and if he lets $a_i = \\max\\limits_{j = l_i}^{k_i} p_j, b_i = \\min\\limits_{j = k_i + 1}^{r_i} p_j$ for every integer $i$ from $1$ to $m$, the following condition holds:\n\n\n\n$$\\max\\limits_{i = 1}^m a_i < \\min\\limits_{i = 1}^m b_i$$\n\nTurtle wants you to calculate the maximum number of inversions of all interesting permutations of length $n$, or tell him if there is no interesting permutation.\n\nAn inversion of a permutation $p$ is a pair of integers $(i, j)$ ($1 \\le i < j \\le n$) such that $p_i > p_j$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^3$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n, m$ ($2 \\le n \\le 5 \\cdot 10^3, 0 \\le m \\le 5 \\cdot 10^3$) — the length of the permutation and the number of intervals.\n\nThe $i$-th of the following $m$ lines contains two integers $l_i, r_i$ ($1 \\le l_i < r_i \\le n$) — the $i$-th interval. Note that there may exist identical intervals (i.e., there may exist two different indices $i, j$ such that $l_i = l_j$ and $r_i = r_j$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5 \\cdot 10^3$ and the sum of $m$ over all test cases does not exceed $5 \\cdot 10^3$.\n\n### Output\n\nFor each test case, if there is no interesting permutation, output a single integer $-1$.\n\nOtherwise, output a single integer — the maximum number of inversions.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n2 0\n\n2 1\n\n1 2\n\n5 1\n\n2 4\n\n8 3\n\n1 4\n\n2 5\n\n7 8\n\n7 2\n\n1 4\n\n4 7\n\n7 3\n\n1 2\n\n1 7\n\n3 7\n\n7 4\n\n1 3\n\n4 7\n\n1 3\n\n4 7\n\n7 3\n\n1 2\n\n3 4\n\n5 6\n\n```\n\n#### Output #1\n\n```\n1\n0\n8\n18\n-1\n-1\n15\n15\n```\n\n### Note\n\nIn the third test case, the interesting permutation with the maximum number of inversions is $[5, 2, 4, 3, 1]$.\n\nIn the fourth test case, the interesting permutation with the maximum number of inversions is $[4, 3, 8, 7, 6, 2, 1, 5]$. In this case, we can let $[k_1, k_2, k_3] = [2, 2, 7]$.\n\nIn the fifth and the sixth test case, it can be proven that there is no interesting permutation.\n\nIn the seventh test case, the interesting permutation with the maximum number of inversions is $[4, 7, 6, 3, 2, 1, 5]$. In this case, we can let $[k_1, k_2, k_3, k_4] = [1, 6, 1, 6]$.\n\nIn the eighth test case, the interesting permutation with the maximum number of inversions is $[4, 7, 3, 6, 2, 5, 1]$.", "cfid": "2003E2"}
{"problem_id": "2003F", "problem_title": "F. Turtle and Three Sequences", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2003/F", "problem_statement": "Piggy gives Turtle three sequences $a_1, a_2, \\ldots, a_n$, $b_1, b_2, \\ldots, b_n$, and $c_1, c_2, \\ldots, c_n$.\n\nTurtle will choose a subsequence of $1, 2, \\ldots, n$ of length $m$, let it be $p_1, p_2, \\ldots, p_m$. The subsequence should satisfy the following conditions:\n\n- $a_{p_1} \\le a_{p_2} \\le \\cdots \\le a_{p_m}$;\n- All $b_{p_i}$ for all indices $i$ are pairwise distinct, i.e., there don't exist two different indices $i$, $j$ such that $b_{p_i} = b_{p_j}$.\n\nHelp him find the maximum value of $\\sum\\limits_{i = 1}^m c_{p_i}$, or tell him that it is impossible to choose a subsequence of length $m$ that satisfies the conditions above.\n\nRecall that a sequence $a$ is a subsequence of a sequence $b$ if $a$ can be obtained from $b$ by the deletion of several (possibly, zero or all) elements.\n\n### Input\n\nThe first line contains two integers $n$ and $m$ ($1 \\le n \\le 3000$, $1 \\le m \\le 5$) — the lengths of the three sequences and the required length of the subsequence.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le n$) — the elements of the sequence $a$.\n\nThe third line contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($1 \\le b_i \\le n$) — the elements of the sequence $b$.\n\nThe fourth line contains $n$ integers $c_1, c_2, \\ldots, c_n$ ($1 \\le c_i \\le 10^4$) — the elements of the sequence $c$.\n\n### Output\n\nOutput a single integer — the maximum value of $\\sum\\limits_{i = 1}^m c_{p_i}$. If it is impossible to choose a subsequence of length $m$ that satisfies the conditions above, output $-1$.\n\n### Examples\n\n#### Input #1\n\n```\n\n4 2\n\n2 3 4 2\n\n1 3 3 2\n\n1 4 2 3\n\n```\n\n#### Output #1\n\n```\n5\n```\n\n#### Input #2\n\n```\n\n7 3\n\n1 4 5 2 3 6 7\n\n1 2 2 1 1 3 2\n\n1 5 6 7 3 2 4\n\n```\n\n#### Output #2\n\n```\n13\n```\n\n#### Input #3\n\n```\n\n5 3\n\n1 2 3 4 5\n\n1 1 2 1 2\n\n5 4 3 2 1\n\n```\n\n#### Output #3\n\n```\n-1\n```\n\n### Note\n\nIn the first example, we can choose $p = [1, 2]$, then $c_{p_1} + c_{p_2} = 1 + 4 = 5$. We can't choose $p = [2, 4]$ since $a_2 > a_4$, violating the first condition. We can't choose $p = [2, 3]$ either since $b_2 = b_3$, violating the second condition. We can choose $p = [1, 4]$, but $c_1 + c_4 = 4$, which isn't maximum.\n\nIn the second example, we can choose $p = [4, 6, 7]$.\n\nIn the third example, it is impossible to choose a subsequence of length $3$ that satisfies both of the conditions.", "cfid": "2003F"}
{"problem_id": "2003D2", "problem_title": "D2. Turtle and a MEX Problem (Hard Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2003/D2", "problem_statement": "The two versions are different problems. In this version of the problem, you can't choose the same integer twice or more. You can make hacks only if both versions are solved.\n\nOne day, Turtle was playing with $n$ sequences. Let the length of the $i$-th sequence be $l_i$. Then the $i$-th sequence was $a_{i, 1}, a_{i, 2}, \\ldots, a_{i, l_i}$.\n\nPiggy gave Turtle a problem to solve when Turtle was playing. The statement of the problem was:\n\n- There was a non-negative integer $x$ at first. Turtle would perform an arbitrary number (possibly zero) of operations on the integer.\n- In each operation, Turtle could choose an integer $i$ such that $1 \\le i \\le n$ and $i$ wasn't chosen before, and set $x$ to $\\text{mex}^{\\dagger}(x, a_{i, 1}, a_{i, 2}, \\ldots, a_{i, l_i})$.\n- Turtle was asked to find the answer, which was the maximum value of $x$ after performing an arbitrary number of operations.\n\nTurtle solved the above problem without difficulty. He defined $f(k)$ as the answer to the above problem when the initial value of $x$ was $k$.\n\nThen Piggy gave Turtle a non-negative integer $m$ and asked Turtle to find the value of $\\sum\\limits_{i = 0}^m f(i)$ (i.e., the value of $f(0) + f(1) + \\ldots + f(m)$). Unfortunately, he couldn't solve this problem. Please help him!\n\n$^{\\dagger}\\text{mex}(c_1, c_2, \\ldots, c_k)$ is defined as the smallest non-negative integer $x$ which does not occur in the sequence $c$. For example, $\\text{mex}(2, 2, 0, 3)$ is $1$, $\\text{mex}(1, 2)$ is $0$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n, m$ ($1 \\le n \\le 2 \\cdot 10^5, 0 \\le m \\le 10^9$).\n\nEach of the following $n$ lines contains several integers. The first integer $l_i$ ($1 \\le l_i \\le 2 \\cdot 10^5$) represents the length of the $i$-th sequence, and the following $l_i$ integers $a_{i, 1}, a_{i, 2}, \\ldots, a_{i, l_i}$ ($0 \\le a_{i, j} \\le 10^9$) represent the elements of the $i$-th sequence.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$ and the sum of $\\sum l_i$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the value of $\\sum\\limits_{i = 0}^m f(i)$.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n3 4\n\n2 0 2\n\n3 2 3 3\n\n4 7 0 1 5\n\n3 4\n\n5 0 2 0 4 11\n\n1 1\n\n5 1 3 0 3 3\n\n2 50\n\n2 1 2\n\n2 1 2\n\n1 1\n\n7 1 2 4 1 4 9 5\n\n4 114514\n\n2 2 2\n\n5 7 3 6 0 3\n\n3 0 1 1\n\n5 0 9 2 1 5\n\n5 1919810\n\n1 2\n\n2 324003 0\n\n3 1416324 2 1460728\n\n4 1312631 2 0 1415195\n\n5 1223554 192248 2 1492515 725556\n\n```\n\n#### Output #1\n\n```\n16\n18\n1281\n4\n6556785365\n1842836177961\n```\n\n### Note\n\nIn the first test case, when $x$ is initially $2$, Turtle can choose $i = 3$ and set $x$ to $\\text{mex}(x, a_{3, 1}, a_{3, 2}, a_{3, 3}, a_{3, 4}) = \\text{mex}(2, 7, 0, 1, 5) = 3$. It can be proved that Turtle can't make the value of $x$ greater than $3$, so $f(2) = 3$.\n\nIt can be seen that $f(0) = 3$, $f(1) = 3$, $f(2) = 3$, $f(3) = 3$, and $f(4) = 4$. So $f(0) + f(1) + f(2) + f(3) + f(4) = 3 + 3 + 3 + 3 + 4 = 16$.\n\nIn the second test case, when $x$ is initially $1$, Turtle can choose $i = 1$ and set $x$ to $\\text{mex}(x, a_{1, 1}, a_{1, 2}, a_{1, 3}, a_{1, 4}, a_{1, 5}) = \\text{mex}(1, 0, 2, 0, 4, 11) = 3$. It can be proved that Turtle can't make the value of $x$ greater than $3$, so $f(1) = 3$.\n\nIt can be seen that $f(0) = 4$, $f(1) = 3$, $f(2) = 4$, $f(3) = 3$, and $f(4) = 4$. So $f(0) + f(1) + f(2) + f(3) + f(4) = 4 + 3 + 4 + 3 + 4 = 18$.\n\nIn the fourth test case, it can be seen that $f(0) = 3$ and $f(1) = 1$. So $f(0) + f(1) = 3 + 1 = 4$.", "cfid": "2003D2"}
{"problem_id": "2001E2", "problem_title": "E2. Deterministic Heap (Hard Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2001/E2", "problem_statement": "This is the hard version of the problem. The difference between the two versions is the definition of deterministic max-heap, time limit, and constraints on $n$ and $t$. You can make hacks only if both versions of the problem are solved.\n\nConsider a perfect binary tree with size $2^n - 1$, with nodes numbered from $1$ to $2^n-1$ and rooted at $1$. For each vertex $v$ ($1 \\le v \\le 2^{n - 1} - 1$), vertex $2v$ is its left child and vertex $2v + 1$ is its right child. Each node $v$ also has a value $a_v$ assigned to it.\n\nDefine the operation $\\mathrm{pop}$ as follows:\n\n1. initialize variable $v$ as $1$;\n2. repeat the following process until vertex $v$ is a leaf (i.e. until $2^{n - 1} \\le v \\le 2^n - 1$);\n1. among the children of $v$, choose the one with the larger value on it and denote such vertex as $x$; if the values on them are equal (i.e. $a_{2v} = a_{2v + 1}$), you can choose any of them;\n2. assign $a_x$ to $a_v$ (i.e. $a_v := a_x$);\n3. assign $x$ to $v$ (i.e. $v := x$);\n3. assign $-1$ to $a_v$ (i.e. $a_v := -1$).\n\nThen we say the $\\mathrm{pop}$ operation is deterministic if there is a unique way to do such operation. In other words, $a_{2v} \\neq a_{2v + 1}$ would hold whenever choosing between them.\n\nA binary tree is called a max-heap if for every vertex $v$ ($1 \\le v \\le 2^{n - 1} - 1$), both $a_v \\ge a_{2v}$ and $a_v \\ge a_{2v + 1}$ hold.\n\nA max-heap is deterministic if the $\\mathrm{pop}$ operation is deterministic to the heap when we do it for the first and the second time.\n\nInitially, $a_v := 0$ for every vertex $v$ ($1 \\le v \\le 2^n - 1$), and your goal is to count the number of different deterministic max-heaps produced by applying the following operation $\\mathrm{add}$ exactly $k$ times:\n\n- Choose an integer $v$ ($1 \\le v \\le 2^n - 1$) and, for every vertex $x$ on the path between $1$ and $v$, add $1$ to $a_x$.\n\nTwo heaps are considered different if there is a node which has different values in the heaps.\n\nSince the answer might be large, print it modulo $p$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 50$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n, k, p$ ($2 \\le n \\le 100$, $1 \\le k \\le 500$, $10^8 \\le p \\le 10^9$, $p$ is a prime).\n\nIt is guaranteed that the sum of $n$ does not exceed $100$ and the sum of $k$ over all test cases does not exceed $500$.\n\n### Output\n\nFor each test case, output a single line containing an integer: the number of different deterministic max-heaps produced by applying the aforementioned operation $\\mathrm{add}$ exactly $k$ times, modulo $p$.\n\n### Examples\n\n#### Input #1\n\n```\n\n6\n\n2 1 998244353\n\n3 2 998244853\n\n3 3 998244353\n\n3 4 100000037\n\n4 2 100000039\n\n4 3 100000037\n\n```\n\n#### Output #1\n\n```\n2\n12\n40\n100\n32\n224\n```\n\n#### Input #2\n\n```\n\n1\n\n100 500 100000037\n\n```\n\n#### Output #2\n\n```\n66681128\n```\n\n#### Input #3\n\n```\n\n2\n\n87 63 100000037\n\n13 437 100000039\n\n```\n\n#### Output #3\n\n```\n83566569\n54517140\n```\n\n### Note\n\nFor the first testcase, if we choose $v = 1$ and do the operation, we would have $a = [1, 0, 0]$, and since $a_2 = a_3$, we can choose either of them when doing the first $\\mathrm{pop}$ operation, so such heap is not a deterministic max-heap.\n\nAnd if we choose $v = 2$, we would have $a = [1, 1, 0]$, during the first $\\mathrm{pop}$, the following would happen:\n\n- initialize $v$ as $1$\n- since $a_{2v} > a_{2v + 1}$, choose $2v$ as $x$, then $x = 2$\n- assign $a_x$ to $a_v$, then $a = [1, 1, 0]$\n- assign $x$ to $v$, then $v = 2$\n- since $v$ is a leaf, assign $-1$ to $a_v$, then $a = [1, -1, 0]$\n\nAnd during the second $\\mathrm{pop}$, the following would happen:\n\n- initialize $v$ as $1$\n- since $a_{2v} < a_{2v + 1}$, choose $2v + 1$ as $x$, then $x = 3$\n- assign $a_x$ to $a_v$, then $a = [0, -1, 0]$\n- assign $x$ to $v$, then $v = 3$\n- since $v$ is a leaf, assign $-1$ to $a_v$, then $a = [0, -1, -1]$\n\nSince both the first and the second $\\mathrm{pop}$ operation are deterministic, this is a deterministic max-heap. Also, if we choose $v = 3$, $a$ would be a deterministic max-heap, so the answer is $2$.", "cfid": "2001E2"}
{"problem_id": "2001E1", "problem_title": "E1. Deterministic Heap (Easy Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2001/E1", "problem_statement": "This is the easy version of the problem. The difference between the two versions is the definition of deterministic max-heap, time limit, and constraints on $n$ and $t$. You can make hacks only if both versions of the problem are solved.\n\nConsider a perfect binary tree with size $2^n - 1$, with nodes numbered from $1$ to $2^n-1$ and rooted at $1$. For each vertex $v$ ($1 \\le v \\le 2^{n - 1} - 1$), vertex $2v$ is its left child and vertex $2v + 1$ is its right child. Each node $v$ also has a value $a_v$ assigned to it.\n\nDefine the operation $\\mathrm{pop}$ as follows:\n\n1. initialize variable $v$ as $1$;\n2. repeat the following process until vertex $v$ is a leaf (i.e. until $2^{n - 1} \\le v \\le 2^n - 1$);\n1. among the children of $v$, choose the one with the larger value on it and denote such vertex as $x$; if the values on them are equal (i.e. $a_{2v} = a_{2v + 1}$), you can choose any of them;\n2. assign $a_x$ to $a_v$ (i.e. $a_v := a_x$);\n3. assign $x$ to $v$ (i.e. $v := x$);\n3. assign $-1$ to $a_v$ (i.e. $a_v := -1$).\n\nThen we say the $\\mathrm{pop}$ operation is deterministic if there is a unique way to do such operation. In other words, $a_{2v} \\neq a_{2v + 1}$ would hold whenever choosing between them.\n\nA binary tree is called a max-heap if for every vertex $v$ ($1 \\le v \\le 2^{n - 1} - 1$), both $a_v \\ge a_{2v}$ and $a_v \\ge a_{2v + 1}$ hold.\n\nA max-heap is deterministic if the $\\mathrm{pop}$ operation is deterministic to the heap when we do it for the first time.\n\nInitially, $a_v := 0$ for every vertex $v$ ($1 \\le v \\le 2^n - 1$), and your goal is to count the number of different deterministic max-heaps produced by applying the following operation $\\mathrm{add}$ exactly $k$ times:\n\n- Choose an integer $v$ ($1 \\le v \\le 2^n - 1$) and, for every vertex $x$ on the path between $1$ and $v$, add $1$ to $a_x$.\n\nTwo heaps are considered different if there is a node which has different values in the heaps.\n\nSince the answer might be large, print it modulo $p$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 500$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n, k, p$ ($1 \\le n, k \\le 500$, $10^8 \\le p \\le 10^9$, $p$ is a prime).\n\nIt is guaranteed that the sum of $n$ and the sum of $k$ over all test cases does not exceed $500$.\n\n### Output\n\nFor each test case, output a single line containing an integer: the number of different deterministic max-heaps produced by applying the aforementioned operation $\\mathrm{add}$ exactly $k$ times, modulo $p$.\n\n### Examples\n\n#### Input #1\n\n```\n\n7\n\n1 13 998244353\n\n2 1 998244353\n\n3 2 998244853\n\n3 3 998244353\n\n3 4 100000037\n\n4 2 100000039\n\n4 3 100000037\n\n```\n\n#### Output #1\n\n```\n1\n2\n12\n52\n124\n32\n304\n```\n\n#### Input #2\n\n```\n\n1\n\n500 500 100000007\n\n```\n\n#### Output #2\n\n```\n76297230\n```\n\n#### Input #3\n\n```\n\n6\n\n87 63 100000037\n\n77 77 100000039\n\n100 200 998244353\n\n200 100 998244353\n\n32 59 998244853\n\n1 1 998244353\n\n```\n\n#### Output #3\n\n```\n26831232\n94573603\n37147649\n847564946\n727060898\n1\n```\n\n### Note\n\nFor the first testcase, there is only one way to generate $a$, and such sequence is a deterministic max-heap, so the answer is $1$.\n\nFor the second testcase, if we choose $v = 1$ and do the operation, we would have $a = [1, 0, 0]$, and since $a_2 = a_3$, we can choose either of them when doing the first $\\mathrm{pop}$ operation, so such heap is not a deterministic max-heap.\n\nAnd if we choose $v = 2$, we would have $a = [1, 1, 0]$, during the first $\\mathrm{pop}$, the following would happen:\n\n- initialize $v$ as $1$\n- since $a_{2v} > a_{2v + 1}$, choose $2v$ as $x$, then $x = 2$\n- assign $a_x$ to $a_v$, then $a = [1, 1, 0]$\n- assign $x$ to $v$, then $v = 2$\n- since $v$ is a leaf, assign $-1$ to $a_v$, then $a = [1, -1, 0]$\n\nSince the first $\\mathrm{pop}$ operation is deterministic, this is a deterministic max-heap. Also, if we choose $v = 3$, $a$ would be a deterministic max-heap, so the answer is $2$.", "cfid": "2001E1"}
{"problem_id": "2001D", "problem_title": "D. Longest Max Min Subsequence", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2001/D", "problem_statement": "You are given an integer sequence $a_1, a_2, \\ldots, a_n$. Let $S$ be the set of all possible non-empty subsequences of $a$ without duplicate elements. Your goal is to find the longest sequence in $S$. If there are multiple of them, find the one that minimizes lexicographical order after multiplying terms at odd positions by $-1$.\n\nFor example, given $a = [3, 2, 3, 1]$, $S = \\{[1], [2], [3], [2, 1], [2, 3], [3, 1], [3, 2], [2, 3, 1], [3, 2, 1]\\}$. Then $[2, 3, 1]$ and $[3, 2, 1]$ would be the longest, and $[3, 2, 1]$ would be the answer since $[-3, 2, -1]$ is lexicographically smaller than $[-2, 3, -1]$.\n\nA sequence $c$ is a subsequence of a sequence $d$ if $c$ can be obtained from $d$ by the deletion of several (possibly, zero or all) elements.\n\nA sequence $c$ is lexicographically smaller than a sequence $d$ if and only if one of the following holds:\n\n- $c$ is a prefix of $d$, but $c \\ne d$;\n- in the first position where $c$ and $d$ differ, the sequence $c$ has a smaller element than the corresponding element in $d$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 5 \\cdot 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains an integer $n$ ($1 \\le n \\le 3 \\cdot 10^5$) — the length of $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le n$) — the sequence $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $3 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the answer in the following format:\n\nOutput an integer $m$ in the first line — the length of $b$.\n\nThen output $m$ integers $b_1, b_2, \\ldots, b_m$ in the second line — the sequence $b$.\n\n### Examples\n\n#### Input #1\n\n```\n\n4\n\n4\n\n3 2 1 3\n\n4\n\n1 1 1 1\n\n9\n\n3 2 1 3 2 1 3 2 1\n\n1\n\n1\n\n```\n\n#### Output #1\n\n```\n3\n3 2 1\n1\n1\n3\n3 1 2\n1\n1\n```\n\n#### Input #2\n\n```\n\n10\n\n2\n\n1 2\n\n10\n\n5 2 1 7 9 7 2 5 5 2\n\n2\n\n1 2\n\n10\n\n2 2 8 7 7 9 8 1 9 6\n\n9\n\n9 1 7 5 8 5 6 4 1\n\n3\n\n3 3 3\n\n6\n\n1 6 4 4 6 5\n\n6\n\n3 4 4 5 3 3\n\n10\n\n4 1 4 5 4 5 10 1 5 1\n\n7\n\n1 2 1 3 2 4 6\n\n```\n\n#### Output #2\n\n```\n2\n1 2\n5\n5 1 9 7 2\n2\n1 2\n6\n2 7 9 8 1 6\n7\n9 1 7 5 8 6 4\n1\n3\n4\n1 4 6 5\n3\n4 5 3\n4\n5 4 10 1\n5\n2 1 3 4 6\n```\n\n### Note\n\nIn the first example, $S = \\{[1], [2], [3], [1, 3], [2, 1], [2, 3], [3, 1], [3, 2], [2, 1, 3], [3, 2, 1]\\}$. Among them, $[2, 1, 3]$ and $[3, 2, 1]$ are the longest and $[-3, 2, -1]$ is lexicographical smaller than $[-2, 1, -3]$, so $[3, 2, 1]$ is the answer.\n\nIn the second example, $S = \\{[1]\\}$, so $[1]$ is the answer.", "cfid": "2001D"}
{"problem_id": "2004E", "problem_title": "E. Not a Nim Problem", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2004/E", "problem_statement": "Two players, Alice and Bob, are playing a game. They have $n$ piles of stones, with the $i$-th pile initially containing $a_i$ stones.\n\nOn their turn, a player can choose any pile of stones and take any positive number of stones from it, with one condition:\n\n- let the current number of stones in the pile be $x$. It is not allowed to take from the pile a number of stones $y$ such that the greatest common divisor of $x$ and $y$ is not equal to $1$.\n\nThe player who cannot make a move loses. Both players play optimally (that is, if a player has a strategy that allows them to win, no matter how the opponent responds, they will win). Alice goes first.\n\nDetermine who will win.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nEach test case consists of two lines:\n\n- the first line contains a single integer $n$ ($1 \\le n \\le 3 \\cdot 10^5$);\n- the second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^7$).\n\nAdditional constraint on the input: the sum of $n$ across all test cases does not exceed $3 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output Alice if Alice wins, or Bob if Bob wins.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3\n\n3 2 9\n\n4\n\n3 3 6 1\n\n5\n\n1 2 3 4 5\n\n```\n\n#### Output #1\n\n```\nBob\nAlice\nBob\n```", "cfid": "2004E"}
{"problem_id": "2004F", "problem_title": "F. Make a Palindrome", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2004/F", "problem_statement": "You are given an array $a$ consisting of $n$ integers.\n\nLet the function $f(b)$ return the minimum number of operations needed to make an array $b$ a palindrome. The operations you can make are:\n\n- choose two adjacent elements $b_i$ and $b_{i+1}$, remove them, and replace them with a single element equal to $(b_i + b_{i + 1})$;\n- or choose an element $b_i > 1$, remove it, and replace it with two positive integers $x$ and $y$ ($x > 0$ and $y > 0$) such that $x + y = b_i$.\n\nFor example, from an array $b=[2, 1, 3]$, you can obtain the following arrays in one operation: $[1, 1, 1, 3]$, $[2, 1, 1, 2]$, $[3, 3]$, $[2, 4]$, or $[2, 1, 2, 1]$.\n\nCalculate $\\displaystyle \\left(\\sum_{1 \\le l \\le r \\le n}{f(a[l..r])}\\right)$, where $a[l..r]$ is the subarray of $a$ from index $l$ to index $r$, inclusive. In other words, find the sum of the values of the function $f$ for all subarrays of the array $a$.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 1000$) — the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 2000$).\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^5$).\n\nAdditional constraint on the input: the sum of $n$ over all test cases does not exceed $2000$.\n\n### Output\n\nFor each test case, print a single integer — the sum of the values of the function $f$ for all subarrays of the array $a$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3\n\n2 1 3\n\n4\n\n1 1 1 1\n\n5\n\n4 2 3 1 5\n\n4\n\n1 2 1 2\n\n```\n\n#### Output #1\n\n```\n3\n0\n14\n5\n```", "cfid": "2004F"}
{"problem_id": "2000G", "problem_title": "G. Call During the Journey", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2000/G", "problem_statement": "You live in a city consisting of $n$ intersections and $m$ streets connecting some pairs of intersections. You can travel in either direction on each street. No two streets connect the same pair of intersections, and no street connects an intersection to itself. You can reach any intersection from any other, possibly passing through some other intersections.\n\nEvery minute, you can board a bus at intersection $u_i$ and travel for $l_{i1}$ minutes to intersection $v_i$. Conversely, you can travel from intersection $v_i$ to intersection $u_i$ in $l_{i1}$ minutes. You can only board and exit the bus at intersections. You can only board the bus at an intersection if you are currently there.\n\nYou can also walk along each street, which takes $l_{i2} > l_{i1}$ minutes.\n\nYou can make stops at intersections.\n\nYou live at intersection number $1$. Today you woke up at time $0$, and you have an important event scheduled at intersection number $n$, which you must reach no later than time $t_0$. You also have a phone call planned that will last from $t_1$ to $t_2$ minutes ($t_1 < t_2 < t_0$).\n\nDuring the phone call, you cannot ride the bus, but you can walk along any streets, make stops, or stay at home. You can exit the bus at minute $t_1$ and board the bus again at minute $t_2$.\n\nSince you want to get enough sleep, you became curious — how late can you leave home to have time to talk on the phone and still not be late for the event?\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. The following are the descriptions of the test cases.\n\nThe first line of each test case contains two integers $n$, $m$ ($2 \\le n \\le 10^5, 1 \\le m \\le 10^5$) — the number of intersections and streets in the city.\n\nThe second line of each test case contains three integers $t_0$, $t_1$, $t_2$ ($1 \\le t_1 < t_2 < t_0 \\le 10^9$) — the start time of the event, the start time of the phone call, and its end time, respectively.\n\nThe next $m$ lines of each test case contain descriptions of the streets.\n\nThe $i$-th line contains four integers $u_i$, $v_i$, $l_{i1}$, $l_{i2}$ ($1 \\le u_i, v_i \\le n$, $u_i \\neq v_i$, $1 \\le l_{i1} < l_{i2} \\le 10^9$) — the numbers of the intersections connected by the $i$-th street, as well as the travel time along the street by bus and on foot. It is guaranteed that no two streets connect the same pair of intersections and that it is possible to reach any intersection from any other.\n\nIt is guaranteed that the sum of the values of $n$ across all test cases does not exceed $10^5$. It is also guaranteed that the sum of the values of $m$ across all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, output a single integer — the latest time you can leave home to have time to talk on the phone and not be late for the event. If you cannot reach the event on time, output -1.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n5 5\n\n100 20 80\n\n1 5 30 100\n\n1 2 20 50\n\n2 3 20 50\n\n3 4 20 50\n\n4 5 20 50\n\n2 1\n\n100 50 60\n\n1 2 55 110\n\n4 4\n\n100 40 60\n\n1 2 30 100\n\n2 4 30 100\n\n1 3 20 50\n\n3 4 20 50\n\n3 3\n\n100 80 90\n\n1 2 1 10\n\n2 3 10 50\n\n1 3 20 21\n\n3 2\n\n58 55 57\n\n2 1 1 3\n\n2 3 3 4\n\n2 1\n\n12 9 10\n\n2 1 6 10\n\n5 5\n\n8 5 6\n\n2 1 1 8\n\n2 3 4 8\n\n4 2 2 4\n\n5 3 3 4\n\n4 5 2 6\n\n```\n\n#### Output #1\n\n```\n0\n-1\n60\n80\n53\n3\n2\n```", "cfid": "2000G"}
{"problem_id": "2000H", "problem_title": "H. Ksyusha and the Loaded Set", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2000/H", "problem_statement": "Ksyusha decided to start a game development company. To stand out among competitors and achieve success, she decided to write her own game engine. The engine must support a set initially consisting of $n$ distinct integers $a_1, a_2, \\ldots, a_n$.\n\nThe set will undergo $m$ operations sequentially. The operations can be of the following types:\n\n- Insert element $x$ into the set;\n- Remove element $x$ from the set;\n- Report the $k$-load of the set.\n\nThe $k$-load of the set is defined as the minimumpositive integer $d$ such that the integers $d, d + 1, \\ldots, d + (k - 1)$ do not appear in this set. For example, the $3$-load of the set $\\{3, 4, 6, 11\\}$ is $7$, since the integers $7, 8, 9$ are absent from the set, and no smaller value fits.\n\nKsyusha is busy with management tasks, so you will have to write the engine. Implement efficient support for the described operations.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe following lines describe the test cases.\n\nThe first line contains an integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) — the initial size of the set.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_1 < a_2 < \\ldots < a_n \\le 2 \\cdot 10^6$) — the initial state of the set.\n\nThe third line contains an integer $m$ ($1 \\le m \\le 2 \\cdot 10^5$) — the number of operations.\n\nThe next $m$ lines contain the operations. The operations are given in the following format:\n\n- + $x$ ($1 \\le x \\le 2 \\cdot 10^6$) — insert element $x$ into the set (it is guaranteed that $x$ is not in the set);\n- - $x$ ($1 \\le x \\le 2 \\cdot 10^6$) — remove element $x$ from the set (it is guaranteed that $x$ is in the set);\n- ? $k$ ($1 \\le k \\le 2 \\cdot 10^6$) — output the value of the $k$-load of the set.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2 \\cdot 10^5$, and the same holds for $m$.\n\n### Output\n\nFor each test case, output the answers to the operations of type \"?\".\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n5\n\n1 2 5 905 2000000\n\n15\n\n\\- 2\n\n? 2\n\n? 1\n\n\\- 1\n\n? 1\n\n\\+ 4\n\n\\+ 2\n\n? 2\n\n\\+ 6\n\n\\- 4\n\n\\+ 7\n\n? 2\n\n? 3\n\n? 4\n\n? 2000000\n\n5\n\n3 4 5 6 8\n\n9\n\n? 5\n\n\\- 5\n\n? 5\n\n\\+ 1\n\n? 2\n\n\\- 6\n\n\\- 8\n\n\\+ 6\n\n? 5\n\n5\n\n6 7 8 9 10\n\n10\n\n? 5\n\n\\- 6\n\n? 4\n\n\\- 10\n\n\\+ 5\n\n\\- 8\n\n\\+ 3\n\n\\+ 2\n\n\\- 3\n\n\\+ 10\n\n```\n\n#### Output #1\n\n```\n2 2 1 6 3 8 8 2000001\n9 9 9 7\n1 1\n```", "cfid": "2000H"}
{"problem_id": "2000F", "problem_title": "F. Color Rows and Columns", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2000/F", "problem_statement": "You have $n$ rectangles, the $i$-th of which has a width of $a_i$ and a height of $b_i$.\n\nYou can perform the following operation an unlimited number of times: choose a rectangle and a cell in it, and then color it.\n\nEach time you completely color any row or column, you earn $1$ point. Your task is to score at least $k$ points with as few operations as possible.\n\nSuppose you have a rectangle with a width of $6$ and a height of $3$. You can score $4$ points by coloring all the cells in any $4$ columns, thus performing $12$ operations.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\le t \\le 100$) — the number of test cases. The following are the descriptions of the test cases.\n\nThe first line of each test case description contains two integers $n$ and $k$ ($1 \\le n \\le 1000, 1 \\le k \\le 100$) — the number of rectangles in the case and the required number of points.\n\nThe next $n$ lines contain the descriptions of the rectangles. The $i$-th line contains two integers $a_i$ and $b_i$ ($1 \\le a_i, b_i \\le 100$) — the width and height of the $i$-th rectangle.\n\nIt is guaranteed that the sum of the values of $n$ across all test cases does not exceed $1000$.\n\n### Output\n\nFor each test case, output a single integer — the minimum number of operations required to score at least $k$ points. If it is impossible to score at least $k$ points, output -1.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n1 4\n\n6 3\n\n1 5\n\n4 4\n\n5 10\n\n1 1\n\n1 1\n\n1 1\n\n1 1\n\n1 1\n\n2 100\n\n1 2\n\n5 6\n\n3 11\n\n2 2\n\n3 3\n\n4 4\n\n3 25\n\n9 2\n\n4 3\n\n8 10\n\n4 18\n\n5 4\n\n8 5\n\n8 3\n\n6 2\n\n```\n\n#### Output #1\n\n```\n12\n14\n5\n-1\n17\n80\n35\n```", "cfid": "2000F"}
{"problem_id": "2002E", "problem_title": "E. Cosmic Rays", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2002/E", "problem_statement": "Given an array of integers $s_1, s_2, \\ldots, s_l$, every second, cosmic rays will cause all $s_i$ such that $i=1$ or $s_i\\neq s_{i-1}$ to be deleted simultaneously, and the remaining parts will be concatenated together in order to form the new array $s_1, s_2, \\ldots, s_{l'}$.\n\nDefine the strength of an array as the number of seconds it takes to become empty.\n\nYou are given an array of integers compressed in the form of $n$ pairs that describe the array left to right. Each pair $(a_i,b_i)$ represents $a_i$ copies of $b_i$, i.e. $\\underbrace{b_i,b_i,\\cdots,b_i}_{a_i\\textrm{ times}}$.\n\nFor each $i=1,2,\\dots,n$, please find the strength of the sequence described by the first $i$ pairs.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1\\le t\\le10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1\\le n\\le3\\cdot10^5$) — the length of sequence $a$.\n\nThe next $n$ lines contain two integers each $a_i$, $b_i$ ($1\\le a_i\\le10^9,0\\le b_i\\le n$) — the pairs which describe the sequence.\n\nIt is guaranteed that the sum of all $n$ does not exceed $3\\cdot10^5$.\n\nIt is guaranteed that for all $1\\le i<n$, $b_i\\neq b_{i+1}$ holds.\n\n### Output\n\nFor each test case, print one line containing $n$ integers — the answer for each prefix of pairs.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n4\n\n2 0\n\n1 1\n\n3 0\n\n5 1\n\n6\n\n4 6\n\n1 3\n\n4 6\n\n4 0\n\n7 6\n\n6 3\n\n7\n\n9 0\n\n7 1\n\n5 0\n\n7 1\n\n9 0\n\n1 1\n\n2 0\n\n10\n\n10 7\n\n4 9\n\n2 2\n\n7 9\n\n2 8\n\n8 5\n\n11 7\n\n15 5\n\n12 7\n\n4 0\n\n```\n\n#### Output #1\n\n```\n2 2 4 5\n4 4 7 7 10 10\n9 9 9 9 9 9 10\n10 10 10 10 10 10 12 15 15 15\n```\n\n### Note\n\nIn the first test case, for the prefix of length $4$, the changes will be $[0,0,1,0,0,0,1,1,1,1,1]\\rightarrow[0,0,0,1,1,1,1]\\rightarrow[0,0,1,1,1]\\rightarrow[0,1,1]\\rightarrow[1]\\rightarrow[]$, so the array becomes empty after $5$ seconds.\n\nIn the second test case, for the prefix of length $4$, the changes will be $[6,6,6,6,3,6,6,6,6,0,0,0,0]\\rightarrow[6,6,6,6,6,6,0,0,0]\\rightarrow[6,6,6,6,6,0,0]\\rightarrow[6,6,6,6,0]\\rightarrow[6,6,6]\\rightarrow[6,6]\\rightarrow[6]\\rightarrow[]$, so the array becomes empty after $7$ seconds.", "cfid": "2002E"}
{"problem_id": "2002D2", "problem_title": "D2. DFS Checker (Hard Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2002/D2", "problem_statement": "This is the hard version of the problem. In this version, you are given a generic tree and the constraints on $n$ and $q$ are higher. You can make hacks only if both versions of the problem are solved.\n\nYou are given a rooted tree consisting of $n$ vertices. The vertices are numbered from $1$ to $n$, and the root is the vertex $1$. You are also given a permutation $p_1, p_2, \\ldots, p_n$ of $[1,2,\\ldots,n]$.\n\nYou need to answer $q$ queries. For each query, you are given two integers $x$, $y$; you need to swap $p_x$ and $p_y$ and determine if $p_1, p_2, \\ldots, p_n$ is a valid DFS order$^\\dagger$ of the given tree.\n\nPlease note that the swaps are persistent through queries.\n\n$^\\dagger$ A DFS order is found by calling the following $\\texttt{dfs}$ function on the given tree.\n\n```\n`dfs_order = []<br/><br/>function dfs(v):<br/>    append v to the back of dfs_order<br/>    pick an arbitrary permutation s of children of v<br/>    for child in s:<br/>        dfs(child)<br/>dfs(1)<br/>````\n\nNote that the DFS order is not unique.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1\\le t\\le10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$, $q$ ($2\\le n\\le 3\\cdot 10^5$, $2\\le q\\le 10^5$) — the number of vertices in the tree and the number of queries.\n\nThe next line contains $n-1$ integers $a_2,a_3,\\ldots,a_n$ ($1\\le a_i<i$) — the parent of each vertex in the given tree.\n\nThe next line contains $n$ integers $p_1,p_2,\\ldots,p_n$ ($1\\le p_i\\le n$, all $p_i$ are distinct) — the initial permutation $p$.\n\nThe next $q$ lines each contain two integers $x$, $y$ ($1\\le x,y\\le n,x\\neq y$) — the positions of the elements to swap in the permutation.\n\nIt is guaranteed that the sum of all $n$ does not exceed $3\\cdot 10^5$, and the sum of all $q$ does not exceed $10^5$.\n\n### Output\n\nFor each test case, print $q$ lines corresponding to the $q$ queries. For each query, output $\\texttt{YES}$ if there is a DFS order that exactly equals the current permutation, and output $\\texttt{NO}$ otherwise.\n\nYou can output $\\texttt{Yes}$ and $\\texttt{No}$ in any case (for example, strings $\\texttt{yEs}$, $\\texttt{yes}$, $\\texttt{Yes}$, and $\\texttt{YES}$ will be recognized as a positive response).\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3 3\n\n1 1\n\n1 2 3\n\n2 3\n\n3 2\n\n1 3\n\n7 4\n\n1 1 2 2 3 3\n\n1 2 3 4 5 6 7\n\n3 5\n\n2 5\n\n3 7\n\n4 6\n\n5 4\n\n1 1 3 4\n\n2 3 4 5 1\n\n5 1\n\n4 5\n\n3 4\n\n2 3\n\n```\n\n#### Output #1\n\n```\nYES\nYES\nNO\nYES\nNO\nNO\nYES\nYES\nNO\nNO\nYES\n```\n\n### Note\n\nIn the first test case, the permutation $p_1, p_2, \\ldots, p_n$ after each modification is $[1,3,2],[1,2,3],[3,2,1]$, respectively. The first two permutations are valid DFS orders; the third is not a DFS order.\n\nIn the second test case, the permutation $p_1, p_2, \\ldots, p_n$ after each modification is $[1,2,5,4,3,6,7],[1,3,5,4,2,6,7],[1,3,7,4,2,6,5],[1,3,7,6,2,4,5]$, respectively.", "cfid": "2002D2"}
{"problem_id": "2002D1", "problem_title": "D1. DFS Checker (Easy Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2002/D1", "problem_statement": "This is the easy version of the problem. In this version, the given tree is a perfect binary tree and the constraints on $n$ and $q$ are lower. You can make hacks only if both versions of the problem are solved.\n\nYou are given a perfect binary tree$^\\dagger$ consisting of $n$ vertices. The vertices are numbered from $1$ to $n$, and the root is the vertex $1$. You are also given a permutation $p_1, p_2, \\ldots, p_n$ of $[1,2,\\ldots,n]$.\n\nYou need to answer $q$ queries. For each query, you are given two integers $x$, $y$; you need to swap $p_x$ and $p_y$ and determine if $p_1, p_2, \\ldots, p_n$ is a valid DFS order$^\\ddagger$ of the given tree.\n\nPlease note that the swaps are persistent through queries.\n\n$^\\dagger$ A perfect binary tree is a tree with vertex $1$ as its root, with size $n=2^k-1$ for a positive integer $k$, and where the parent of each vertex $i$ ($1<i\\le n$) is $\\left\\lfloor\\frac{i}{2}\\right\\rfloor$. Thus, all leaves of this tree are at a distance $k - 1$ from the root.\n\n$^\\ddagger$ A DFS order is found by calling the following $\\texttt{dfs}$ function on the given tree.\n\n```\n`dfs_order = []<br/><br/>function dfs(v):<br/>    append v to the back of dfs_order<br/>    pick an arbitrary permutation s of children of v<br/>    for child in s:<br/>        dfs(child)<br/>dfs(1)<br/>````\n\nNote that the DFS order is not unique.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1\\le t\\le10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$, $q$ ($3\\le n\\le 65\\,535$, $2\\le q\\le 5 \\cdot 10^4$) — the number of vertices in the tree and the number of queries. It is guaranteed that $n=2^k-1$ for a positive integer $k$.\n\nThe next line contains $n-1$ integers $a_2,a_3,\\ldots,a_n$ ($1\\le a_i<i$) — the parent of each vertex in the given tree. It is guaranteed that $a_i=\\left\\lfloor\\frac{i}{2}\\right\\rfloor$.\n\nThe next line contains $n$ integers $p_1,p_2,\\ldots,p_n$ ($1\\le p_i\\le n$, all $p_i$ are distinct) — the initial permutation $p$.\n\nThe next $q$ lines each contain two integers $x$, $y$ ($1\\le x,y\\le n,x\\neq y$) — the positions of the elements to swap in the permutation.\n\nIt is guaranteed that the sum of all $n$ does not exceed $65\\,535$, and the sum of all $q$ does not exceed $5 \\cdot 10^4$.\n\n### Output\n\nFor each test case, print $q$ lines corresponding to the $q$ queries. For each query, output $\\texttt{YES}$ if there is a DFS order that exactly equals the current permutation, and output $\\texttt{NO}$ otherwise.\n\nYou can output $\\texttt{Yes}$ and $\\texttt{No}$ in any case (for example, strings $\\texttt{yEs}$, $\\texttt{yes}$, $\\texttt{Yes}$ and $\\texttt{YES}$ will be recognized as a positive response).\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n3 3\n\n1 1\n\n1 2 3\n\n2 3\n\n3 2\n\n1 3\n\n7 4\n\n1 1 2 2 3 3\n\n1 2 3 4 5 6 7\n\n3 5\n\n2 5\n\n3 7\n\n4 6\n\n```\n\n#### Output #1\n\n```\nYES\nYES\nNO\nYES\nNO\nNO\nYES\n```\n\n### Note\n\nIn the first test case, the permutation $p_1, p_2, \\ldots, p_n$ after each modification is $[1,3,2],[1,2,3],[3,2,1]$, respectively. The first two permutations are valid DFS orders; the third is not a DFS order.\n\nIn the second test case, the permutation $p_1, p_2, \\ldots, p_n$ after each modification is $[1,2,5,4,3,6,7],[1,3,5,4,2,6,7],[1,3,7,4,2,6,5],[1,3,7,6,2,4,5]$, respectively.", "cfid": "2002D1"}
{"problem_id": "2002F1", "problem_title": "F1. Court Blue (Easy Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2002/F1", "problem_statement": "This is the easy version of the problem. In this version, $n=m$ and the time limit is lower. You can make hacks only if both versions of the problem are solved.\n\nIn the court of the Blue King, Lelle and Flamm are having a performance match. The match consists of several rounds. In each round, either Lelle or Flamm wins.\n\nLet $W_L$ and $W_F$ denote the number of wins of Lelle and Flamm, respectively. The Blue King considers a match to be successful if and only if:\n\n- after every round, $\\gcd(W_L,W_F)\\le 1$;\n- at the end of the match, $W_L\\le n, W_F\\le m$.\n\nNote that $\\gcd(0,x)=\\gcd(x,0)=x$ for every non-negative integer $x$.\n\nLelle and Flamm can decide to stop the match whenever they want, and the final score of the performance is $l \\cdot W_L + f \\cdot W_F$.\n\nPlease help Lelle and Flamm coordinate their wins and losses such that the performance is successful, and the total score of the performance is maximized.\n\n### Input\n\nThe first line contains an integer $t$ ($1\\leq t \\leq 10^3$) — the number of test cases.\n\nThe only line of each test case contains four integers $n$, $m$, $l$, $f$ ($2\\leq n\\leq m \\leq 2\\cdot 10^7$, $1\\leq l,f \\leq 10^9$, $\\bf{n=m}$): $n$, $m$ gives the upper bound on the number of Lelle and Flamm's wins, $l$ and $f$ determine the final score of the performance.\n\nUnusual additional constraint: it is guaranteed that, for each test, there are no pairs of test cases with the same pair of $n$, $m$.\n\n### Output\n\nFor each test case, output a single integer — the maximum total score of a successful performance.\n\n### Examples\n\n#### Input #1\n\n```\n\n8\n\n3 3 2 5\n\n4 4 1 4\n\n6 6 2 2\n\n7 7 2 3\n\n9 9 9 1\n\n2 2 1 4\n\n5 5 1 4\n\n8 8 6 7\n\n```\n\n#### Output #1\n\n```\n19\n17\n18\n33\n86\n9\n24\n86\n```\n\n#### Input #2\n\n```\n\n1\n\n20000000 20000000 1341 331\n\n```\n\n#### Output #2\n\n```\n33439999007\n```\n\n#### Input #3\n\n```\n\n2\n\n1984 1984 19 84\n\n9982 9982 44 35\n\n```\n\n#### Output #3\n\n```\n204143\n788403\n```\n\n### Note\n\nIn the first test case, a possible performance is as follows:\n\n- Flamm wins, $\\gcd(0,1)=1$.\n- Lelle wins, $\\gcd(1,1)=1$.\n- Flamm wins, $\\gcd(1,2)=1$.\n- Flamm wins, $\\gcd(1,3)=1$.\n- Lelle wins, $\\gcd(2,3)=1$.\n- Lelle and Flamm agree to stop the match.\n\nThe final score is $2\\cdot2+3\\cdot5=19$.\n\nIn the third test case, a possible performance is as follows:\n\n- Flamm wins, $\\gcd(0,1)=1$.\n- Lelle wins, $\\gcd(1,1)=1$.\n- Lelle wins, $\\gcd(2,1)=1$.\n- Lelle wins, $\\gcd(3,1)=1$.\n- Lelle wins, $\\gcd(4,1)=1$.\n- Lelle wins, $\\gcd(5,1)=1$.\n- Flamm wins, $\\gcd(5,2)=1$.\n- Flamm wins, $\\gcd(5,3)=1$.\n- Flamm wins, $\\gcd(5,4)=1$.\n- Lelle and Flamm agree to stop the match.\n\nThe final score is $5\\cdot2+4\\cdot2=18$. Note that Lelle and Flamm can stop the match even if neither of them has $n$ wins.", "cfid": "2002F1"}
{"problem_id": "2002F2", "problem_title": "F2. Court Blue (Hard Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2002/F2", "problem_statement": "This is the hard version of the problem. In this version, it is not guaranteed that $n=m$, and the time limit is higher. You can make hacks only if both versions of the problem are solved.\n\nIn the court of the Blue King, Lelle and Flamm are having a performance match. The match consists of several rounds. In each round, either Lelle or Flamm wins.\n\nLet $W_L$ and $W_F$ denote the number of wins of Lelle and Flamm, respectively. The Blue King considers a match to be successful if and only if:\n\n- after every round, $\\gcd(W_L,W_F)\\le 1$;\n- at the end of the match, $W_L\\le n, W_F\\le m$.\n\nNote that $\\gcd(0,x)=\\gcd(x,0)=x$ for every non-negative integer $x$.\n\nLelle and Flamm can decide to stop the match whenever they want, and the final score of the performance is $l \\cdot W_L + f \\cdot W_F$.\n\nPlease help Lelle and Flamm coordinate their wins and losses such that the performance is successful, and the total score of the performance is maximized.\n\n### Input\n\nThe first line contains an integer $t$ ($1\\leq t \\leq 10^3$) — the number of test cases.\n\nThe only line of each test case contains four integers $n$, $m$, $l$, $f$ ($2\\leq n\\leq m \\leq 2\\cdot 10^7$, $1\\leq l,f \\leq 10^9$): $n$, $m$ give the upper bound on the number of Lelle and Flamm's wins, $l$ and $f$ determine the final score of the performance.\n\nUnusual additional constraint: it is guaranteed that, for each test, there are no pairs of test cases with the same pair of $n$, $m$.\n\n### Output\n\nFor each test case, output a single integer — the maximum total score of a successful performance.\n\n### Examples\n\n#### Input #1\n\n```\n\n8\n\n3 4 2 5\n\n4 4 1 4\n\n6 6 2 2\n\n7 9 2 3\n\n8 9 9 1\n\n2 7 1 4\n\n5 9 1 4\n\n5 6 6 7\n\n```\n\n#### Output #1\n\n```\n22\n17\n18\n37\n77\n30\n41\n59\n```\n\n#### Input #2\n\n```\n\n2\n\n3082823 20000000 1341 331\n\n20000000 20000000 3 5\n\n```\n\n#### Output #2\n\n```\n10754065643\n159999991\n```\n\n#### Input #3\n\n```\n\n1\n\n139 1293 193 412\n\n```\n\n#### Output #3\n\n```\n559543\n```\n\n### Note\n\nIn the first test case, a possible performance is as follows:\n\n- Flamm wins, $\\gcd(0,1)=1$.\n- Lelle wins, $\\gcd(1,1)=1$.\n- Flamm wins, $\\gcd(1,2)=1$.\n- Flamm wins, $\\gcd(1,3)=1$.\n- Flamm wins, $\\gcd(1,4)=1$.\n- Lelle and Flamm agree to stop the match.\n\nThe final score is $1\\cdot2+4\\cdot5=22$.", "cfid": "2002F2"}
{"problem_id": "1998E2", "problem_title": "E2. Eliminating Balls With Merging (Hard Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1998/E2", "problem_statement": "Drink water.\n\n— Sun Tzu, The Art of Becoming a Healthy Programmer\n\nThis is the hard version of the problem. The only difference is that $x=1$ in this version. You must solve both versions to be able to hack.\n\nYou are given two integers $n$ and $x$ ($x=1$). There are $n$ balls lined up in a row, numbered from $1$ to $n$ from left to right. Initially, there is a value $a_i$ written on the $i$-th ball.\n\nFor each integer $i$ from $1$ to $n$, we define a function $f(i)$ as follows:\n\n- Suppose you have a set $S = \\{1, 2, \\ldots, i\\}$.\n\n- In each operation, you have to select an integer $l$ ($1 \\leq l < i$) from $S$ such that $l$ is not the largest element of $S$. Suppose $r$ is the smallest element in $S$ which is greater than $l$.\n\n\n\n  - If $a_l > a_r$, you set $a_l = a_l + a_r$ and remove $r$ from $S$.\n  - If $a_l < a_r$, you set $a_r = a_l + a_r$ and remove $l$ from $S$.\n  - If $a_l = a_r$, you choose either the integer $l$ or $r$ to remove from $S$:\n    - If you choose to remove $l$ from $S$, you set $a_r = a_l + a_r$ and remove $l$ from $S$.\n    - If you choose to remove $r$ from $S$, you set $a_l = a_l + a_r$ and remove $r$ from $S$.\n\n- $f(i)$ denotes the number of integers $j$ ($1 \\le j \\le i$) such that it is possible to obtain $S = \\{j\\}$ after performing the above operations exactly $i - 1$ times.\n\nFor each integer $i$ from $x$ to $n$, you need to find $f(i)$.\n\n### Input\n\nThe first line contains $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $x$ ($1 \\leq n \\leq 2 \\cdot 10^5; x = 1$) — the number of balls and the smallest index $i$ for which you need to find $f(i)$.\n\nThe second line of each test case contains $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$) — the initial number written on each ball.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output $n-x+1$ space separated integers on a new line, where the $j$-th integer should represent $f(x+j-1)$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n5 1\n\n1 2 3 2 1\n\n7 1\n\n4 5 1 2 1 4 5\n\n11 1\n\n1 2 3 1 1 9 3 2 4 1 3\n\n```\n\n#### Output #1\n\n```\n1 1 2 2 3\n1 1 1 1 1 3 4\n1 1 2 2 2 1 1 1 3 3 4\n```\n\n### Note\n\nIn the first test case, below are the possible values of $j$ for each $f(i)$ from $1$ to $n$.\n\n- For $f(1)$, the only possible value of $j$ is $1$.\n- For $f(2)$, the only possible value of $j$ is $2$.\n- For $f(3)$, the possible values of $j$ are $2$ and $3$.\n- For $f(4)$, the possible values of $j$ are $2$ and $3$.\n- For $f(5)$, the possible values of $j$ are $2$, $3$, and $4$.", "cfid": "1998E2"}
{"problem_id": "1998D", "problem_title": "D. Determine Winning Islands in Race", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1998/D", "problem_statement": "MOOOOOOOOOOOOOOOOO\n\n— Bessie the Cow, The Art of Racing on Islands\n\nTwo of Farmer John's cows, Bessie and Elsie, are planning to race on $n$ islands. There are $n - 1$ main bridges, connecting island $i$ to island $i + 1$ for all $1 \\leq i \\leq n - 1$. Additionally, there are $m$ alternative bridges. Elsie can use both main and alternative bridges, while Bessie can only use main bridges. All bridges are one way and can only be used to travel from an island with a lower index to an island with a higher index.\n\nInitially, Elsie starts on island $1$, and Bessie starts on island $s$. The cows alternate turns, with Bessie making the first turn. Suppose the cow is on island $i$. During a cow's turn, if there are any bridges connecting island $i$ to island $j$, then the cow can move to island $j$. Then, island $i$ collapses, and all bridges connecting to island $i$ also collapse. Also, note the following:\n\n- If there are no bridges connecting island $i$ to another island, then island $i$ collapses, and this cow is eliminated from the race.\n- If the other cow is also on island $i$, then after this cow moves to another island, the island collapses, and the other cow is eliminated from the race.\n- After an island or bridge collapses, no cows may use them.\n- If a cow is eliminated, their turn is skipped for the rest of the race.\n\nThe race ends once either cow reaches island $n$. It can be shown that regardless of the cows' strategies, at least one cow reaches island $n$. Bessie wins if and only if she reaches island $n$ first.\n\nFor each $1 \\leq s \\leq n - 1$, determine whether Bessie wins if she starts the race on island $s$. Assume both cows follow optimal strategies to ensure their own respective victories.\n\n### Input\n\nThe first line contains $t$ ($1 \\leq t \\leq 10^4$) – the number of test cases.\n\nThe first line of each test case contains $n$ and $m$ ($2 \\leq n \\leq 2 \\cdot 10^5$, $0 \\leq m \\leq 2 \\cdot 10^5$) – the number of islands and the number of alternative bridges.\n\nThe next $m$ lines of each test case contain $u$ and $v$ ($1 \\leq u < v \\leq n$) – the islands that the alternative bridge connects. It is guaranteed all alternative bridges are distinct, and they do not coincide with the main bridges.\n\nIt is guaranteed that neither the sum of $n$ nor the sum of $m$ over all test cases exceeds $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a binary string of length $n - 1$ on a new line. The $i$'th character is $1$ if it is possible for Bessie to win if she starts on island $i$. Otherwise, it is $0$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n6 0\n\n6 1\n\n2 6\n\n6 1\n\n1 5\n\n10 4\n\n1 3\n\n1 6\n\n2 7\n\n3 8\n\n15 3\n\n2 8\n\n4 9\n\n8 15\n\n```\n\n#### Output #1\n\n```\n11111\n11011\n10011\n100001111\n11000111000111\n```\n\n### Note\n\nIn the first test case, there are no alternative bridges for Elsie to overtake Bessie and reach island $n$ first, so Bessie will win on all islands because she always moves first.\n\nIn the second case, Bessie will lose if she starts on island $3$ because:\n\n- Bessie's Turn: Take a main bridge from island $3$ to island $4$.\n- Elsie's Turn: Take a main bridge from island $1$ to island $2$.\n- Bessie's Turn: Take a main bridge from island $4$ to island $5$.\n- Elsie's Turn: Take an alternative bridge from island $2$ to island $6$. Elsie reaches island $n$ first.", "cfid": "1998D"}
{"problem_id": "1998E1", "problem_title": "E1. Eliminating Balls With Merging (Easy Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1998/E1", "problem_statement": "Drink water.\n\n— Sun Tzu, The Art of Becoming a Healthy Programmer\n\nThis is the easy version of the problem. The only difference is that $x=n$ in this version. You must solve both versions to be able to hack.\n\nYou are given two integers $n$ and $x$ ($x=n$). There are $n$ balls lined up in a row, numbered from $1$ to $n$ from left to right. Initially, there is a value $a_i$ written on the $i$-th ball.\n\nFor each integer $i$ from $1$ to $n$, we define a function $f(i)$ as follows:\n\n- Suppose you have a set $S = \\{1, 2, \\ldots, i\\}$.\n\n- In each operation, you have to select an integer $l$ ($1 \\leq l < i$) from $S$ such that $l$ is not the largest element of $S$. Suppose $r$ is the smallest element in $S$ which is greater than $l$.\n\n\n\n  - If $a_l > a_r$, you set $a_l = a_l + a_r$ and remove $r$ from $S$.\n  - If $a_l < a_r$, you set $a_r = a_l + a_r$ and remove $l$ from $S$.\n  - If $a_l = a_r$, you choose either the integer $l$ or $r$ to remove from $S$:\n    - If you choose to remove $l$ from $S$, you set $a_r = a_l + a_r$ and remove $l$ from $S$.\n    - If you choose to remove $r$ from $S$, you set $a_l = a_l + a_r$ and remove $r$ from $S$.\n\n- $f(i)$ denotes the number of integers $j$ ($1 \\le j \\le i$) such that it is possible to obtain $S = \\{j\\}$ after performing the above operations exactly $i - 1$ times.\n\nFor each integer $i$ from $x$ to $n$, you need to find $f(i)$.\n\n### Input\n\nThe first line contains $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $x$ ($1 \\leq n \\leq 2 \\cdot 10^5; x = n$) — the number of balls and the smallest index $i$ for which you need to find $f(i)$.\n\nThe second line of each test case contains $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$) — the initial number written on each ball.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output $n-x+1$ space separated integers on a new line, where the $j$-th integer should represent $f(x+j-1)$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n5 5\n\n1 2 3 2 1\n\n7 7\n\n4 5 1 2 1 4 5\n\n11 11\n\n1 2 3 1 1 9 3 2 4 1 3\n\n```\n\n#### Output #1\n\n```\n3\n4\n4\n```\n\n### Note\n\nIn the first test case, you are required to calculate $f(5)$. It can be shown that after $4$ operations, $S$ can contain $2$, $3$, or $4$. The following shows the operations required to make $S = \\{4\\}$.\n\n- Initially, $S = \\{1, 2, 3, 4, 5\\}$ and $a = [1, 2, 3, 2, 1]$.\n- Choose $l = 1$. Naturally, $r = 2$. Since $a_1 < a_2$, we set $a_2 = 1 + 2$ and remove $1$ from $S$. Now, $S = \\{2, 3, 4, 5\\}$ and $a = [1, 3, 3, 2, 1]$.\n- Choose $l = 4$. Naturally, $r = 5$. Since $a_4 > a_5$, we set $a_4 = 2 + 1$ and remove $5$ from $S$. Now, $S = \\{2, 3, 4\\}$ and $a = [1, 3, 3, 3, 1]$.\n- Choose $l = 3$. Naturally, $r = 4$. Since $a_3 = a_4$, we have a choice whether to remove $3$ or $4$. Since we want to preserve $4$, let's remove $3$. So, set $a_4 = 3 + 3$ and remove $3$ from $S$. Now, $S = \\{2, 4\\}$ and $a = [1, 3, 3, 6, 1]$.\n- Choose $l = 2$. Naturally, $r = 4$. Since $a_2 < a_4$, we set $a_4 = 3 + 6$ and remove $2$ from $S$. Finally, $S = \\{4\\}$ and $a = [1, 3, 3, 9, 1]$.\n\nIn the second test case, you are required to calculate $f(7)$. It can be shown that after $6$ operations, $S$ can contain $2$, $4$, $6$, or $7$.", "cfid": "1998E1"}
{"problem_id": "1998C", "problem_title": "C. Perform Operations to Maximize Score", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1998/C", "problem_statement": "I see satyam343. I'm shaking. Please more median problems this time. I love those. Please satyam343 we believe in you.\n\n— satyam343's biggest fan\n\nYou are given an array $a$ of length $n$ and an integer $k$. You are also given a binary array $b$ of length $n$.\n\nYou can perform the following operation at most $k$ times:\n\n- Select an index $i$ ($1 \\leq i \\leq n$) such that $b_i = 1$. Set $a_i = a_i + 1$ (i.e., increase $a_i$ by $1$).\n\nYour score is defined to be $\\max\\limits_{i = 1}^{n} \\left( a_i + \\operatorname{median}(c_i) \\right)$, where $c_i$ denotes the array of length $n-1$ that you get by deleting $a_i$ from $a$. In other words, your score is the maximum value of $a_i + \\operatorname{median}(c_i)$ over all $i$ from $1$ to $n$.\n\nFind the maximum score that you can achieve if you perform the operations optimally.\n\nFor an arbitrary array $p$, $\\operatorname{median}(p)$ is defined as the $\\left\\lfloor \\frac{|p|+1}{2} \\right\\rfloor$-th smallest element of $p$. For example, $\\operatorname{median} \\left( [3,2,1,3] \\right) = 2$ and $\\operatorname{median} \\left( [6,2,4,5,1] \\right) = 4$.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nEach test case begins with two integers $n$ and $k$ ($2 \\leq n \\leq 2 \\cdot 10^5$, $0 \\leq k \\leq 10^9$) — the length of the $a$ and the number of operations you can perform.\n\nThe following line contains $n$ space separated integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$) — denoting the array $a$.\n\nThe following line contains $n$ space separated integers $b_1, b_2, \\ldots, b_n$ ($b_i$ is $0$ or $1$) — denoting the array $b$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the maximum value of score you can get on a new line.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n2 10\n\n3 3\n\n1 1\n\n3 10\n\n3 3 3\n\n0 0 0\n\n4 4\n\n2 1 5 1\n\n0 1 0 1\n\n5 4\n\n7 5 2 5 4\n\n0 0 1 0 1\n\n5 1\n\n5 15 15 2 11\n\n1 0 0 1 1\n\n5 2\n\n10 11 4 10 15\n\n1 1 0 1 0\n\n4 4\n\n1 1 2 5\n\n1 1 0 0\n\n2 1000000000\n\n1000000000 1000000000\n\n1 1\n\n```\n\n#### Output #1\n\n```\n16\n6\n8\n13\n21\n26\n8\n3000000000\n```\n\n### Note\n\nFor the first test case, it is optimal to perform $5$ operations on both elements so $a = [8,8]$. So, the maximum score we can achieve is $\\max(8 + \\operatorname{median}[8], 8 + \\operatorname{median}[8]) = 16$, as $c_1 = [a_2] = [8]$. It can be proven that you cannot get a better score.\n\nFor the second test case, you are not able to perform operations on any elements, so $a$ remains $[3,3,3]$. So, the maximum score we can achieve is $3 + \\operatorname{median}[3, 3] = 6$, as $c_1 = [a_2, a_3] = [3, 3]$. It can be proven that you cannot get a better score.", "cfid": "1998C"}
{"problem_id": "1993E", "problem_title": "E. Xor-Grid Problem", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1993/E", "problem_statement": "Given a matrix $a$ of size $n \\times m$, each cell of which contains a non-negative integer. The integer lying at the intersection of the $i$-th row and the $j$-th column of the matrix is called $a_{i,j}$.\n\nLet's define $f(i)$ and $g(j)$ as the [XOR](https://en.wikipedia.org/wiki/Exclusive_or) of all integers in the $i$-th row and the $j$-th column, respectively. In one operation, you can either:\n\n- Select any row $i$, then assign $a_{i,j} := g(j)$ for each $1 \\le j \\le m$; or\n- Select any column $j$, then assign $a_{i,j} := f(i)$ for each $1 \\le i \\le n$.\n\n![](https://espresso.codeforces.com/3ad45bee646fd98f1fde1a1caab7627c01708237.png)An example of applying an operation on column $2$ of the matrix.\n\nIn this example, as we apply an operation on column $2$, all elements in this column are changed:\n\n- $a_{1,2} := f(1) = a_{1,1} \\oplus a_{1,2} \\oplus a_{1,3} \\oplus a_{1,4} = 1 \\oplus 1 \\oplus 1 \\oplus 1 = 0$\n- $a_{2,2} := f(2) = a_{2,1} \\oplus a_{2,2} \\oplus a_{2,3} \\oplus a_{2,4} = 2 \\oplus 3 \\oplus 5 \\oplus 7 = 3$\n- $a_{3,2} := f(3) = a_{3,1} \\oplus a_{3,2} \\oplus a_{3,3} \\oplus a_{3,4} = 2 \\oplus 0 \\oplus 3 \\oplus 0 = 1$\n- $a_{4,2} := f(4) = a_{4,1} \\oplus a_{4,2} \\oplus a_{4,3} \\oplus a_{4,4} = 10 \\oplus 11 \\oplus 12 \\oplus 16 = 29$\n\nYou can apply the operations any number of times. Then, we calculate the $\\textit{beauty}$ of the final matrix by summing the absolute differences between all pairs of its adjacent cells.\n\nMore formally, $\\textit{beauty}(a) = \\sum|a_{x,y} - a_{r,c}|$ for all cells $(x, y)$ and $(r, c)$ if they are adjacent. Two cells are considered adjacent if they share a side.\n\nFind the minimum $\\textit{beauty}$ among all obtainable matrices.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 250$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\le n, m \\le 15$) — the number of rows and columns of $a$, respectively.\n\nThe next $n$ lines, each containing $m$ integers $a_{i,1}, a_{i,2}, \\ldots, a_{i,m}$ ($0 \\le a_{i,j} < 2^{20}$) — description of the matrix $a$.\n\nIt is guaranteed that the sum of $(n^2 + m^2)$ over all test cases does not exceed $500$.\n\n### Output\n\nFor each test case, print a single integer $b$ — the smallest possible $\\textit{beauty}$ of the matrix.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n1 2\n\n1 3\n\n2 3\n\n0 1 0\n\n5 4 4\n\n2 3\n\n0 2 4\n\n4 5 1\n\n3 3\n\n1 2 3\n\n4 5 6\n\n7 8 9\n\n```\n\n#### Output #1\n\n```\n1\n3\n13\n24\n```\n\n### Note\n\nLet's denote $r(i)$ as the first type operation applied on the $i$-th row, and $c(j)$ as the second type operation applied on the $j$-th column.\n\nIn the first test case, you can apply an operation $c(1)$, which assigns $a_{1,1} := 1 \\oplus 3 = 2$. Then, we'll receive this matrix:\n\n23\n\nIn the second test case, you can apply an operation $r(1)$, which assigns:\n\n- $a_{1,1} := g(1) = 0 \\oplus 5 = 5$\n- $a_{1,2} := g(2) = 1 \\oplus 4 = 5$\n- $a_{1,3} := g(3) = 0 \\oplus 4 = 4$\n\nThe resulting matrix after performing the operation is:\n\n554544\n\nIn the third test case, the best way to achieve minimum $\\textit{beauty}$ is applying three operations: $c(3)$, $r(2)$, and $c(2)$. The resulting matrix is:\n\n046456", "cfid": "1993E"}
{"problem_id": "1993F2", "problem_title": "F2. Dyn-scripted Robot (Hard Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1993/F2", "problem_statement": "This is the hard version of the problem. The only difference is that in this version $k \\le 10^{12}$. You can make hacks only if both versions of the problem are solved.\n\nGiven a $w \\times h$ rectangle on the $Oxy$ plane, with points $(0, 0)$ at the bottom-left and $(w, h)$ at the top-right of the rectangle.\n\nYou also have a robot initially at point $(0, 0)$ and a script $s$ of $n$ characters. Each character is either L, R, U, or D, which tells the robot to move left, right, up, or down respectively.\n\nThe robot can only move inside the rectangle; otherwise, it will change the script $s$ as follows:\n\n- If it tries to move outside a vertical border, it changes all L characters to R's (and vice versa, all R's to L's).\n- If it tries to move outside a horizontal border, it changes all U characters to D's (and vice versa, all D's to U's).\n\nThen, it will execute the changed script starting from the character which it couldn't execute.\n\n![](https://espresso.codeforces.com/44058d13574b8a336b6b4ffc319b349c0a98032e.png)An example of the robot's movement process, $s = \\texttt{\"ULULURD\"}$\n\nThe script $s$ will be executed for $k$ times continuously. All changes to the string $s$ will be retained even when it is repeated. During this process, how many times will the robot move to the point $(0, 0)$ in total? Note that the initial position does NOT count.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains four integers $n$, $k$, $w$, and $h$ ($1 \\le n, w, h \\le 10^6$; $1 \\le k \\le 10^{12}$).\n\nThe second line contains a single string $s$ of size $n$ ($s_i \\in \\{\\texttt{L}, \\texttt{R}, \\texttt{U}, \\texttt{D}\\}$) — the script to be executed.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case, print a single integer — the number of times the robot reaches $(0, 0)$ when executing script $s$ for $k$ times continuously.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n2 4 2 2\n\nUR\n\n4 2 1 1\n\nLLDD\n\n6 3 3 1\n\nRLRRRL\n\n5 6 3 3\n\nRUURD\n\n7 5 3 4\n\nRRDLUUU\n\n7 123456789999 3 2\n\nULULURD\n\n```\n\n#### Output #1\n\n```\n1\n4\n3\n1\n1\n41152263332\n```\n\n### Note\n\nIn the first test case, the robot only moves up and right for the first two executions. After that, it occupies the position $(2, 2)$. For the next two executions, it moves down and left and finishes at $(0, 0)$. So the answer is $1$.\n\nIn the second test case, each time executing the script the robot visits the origin twice. And since $k=2$, it visits the origin $2 \\cdot 2 = 4$ times overall.\n\n![](https://espresso.codeforces.com/4fc54bd5ef19b611fe31366a3ac8c0ccfa7bf1f1.png)\n\nIn the third test case, the visualization is shown as below:\n\n![](https://espresso.codeforces.com/fbf49c7b363f655844f0192b2cbc3766a46aaa29.png)", "cfid": "1993F2"}
{"problem_id": "1993D", "problem_title": "D. Med-imize", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1993/D", "problem_statement": "Given two positive integers $n$ and $k$, and another array $a$ of $n$ integers.\n\nIn one operation, you can select any subarray of size $k$ of $a$, then remove it from the array without changing the order of other elements. More formally, let $(l, r)$ be an operation on subarray $a_l, a_{l+1}, \\ldots, a_r$ such that $r-l+1=k$, then performing this operation means replacing $a$ with $[a_1, \\ldots, a_{l-1}, a_{r+1}, \\ldots, a_n]$.\n\nFor example, if $a=[1,2,3,4,5]$ and we perform operation $(3,5)$ on this array, it will become $a=[1,2]$. Moreover, operation $(2, 4)$ results in $a=[1,5]$, and operation $(1,3)$ results in $a=[4,5]$.\n\nYou have to repeat the operation while the length of $a$ is greater than $k$ (which means $|a| \\gt k$). What is the largest possible median$^\\dagger$ of all remaining elements of the array $a$ after the process?\n\n$^\\dagger$The median of an array of length $n$ is the element whose index is $\\left \\lfloor (n+1)/2 \\right \\rfloor$ after we sort the elements in non-decreasing order. For example: $median([2,1,5,4,3]) = 3$, $median([5]) = 5$, and $median([6,8,2,4]) = 4$.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\le n, k \\le 5 \\cdot 10^5$).\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$) — the array $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print a single integer — the largest median possible after performing the operations.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n4 3\n\n3 9 9 2\n\n5 3\n\n3 2 5 6 4\n\n7 1\n\n5 9 2 6 5 4 6\n\n8 2\n\n7 1 2 6 8 3 4 5\n\n4 5\n\n3 4 5 6\n\n```\n\n#### Output #1\n\n```\n3\n4\n9\n6\n4\n```\n\n### Note\n\nIn the first test case, you can select a subarray $(l, r)$ which can be either $(1, 3)$ or $(2, 4)$. Thus, two obtainable final arrays are $[3]$ and $[2]$. The former one has the larger median ($3 > 2$) so the answer is $3$.\n\nIn the second test case, three obtainable final arrays are $[6, 4]$, $[3, 4]$, and $[3, 2]$. Their medians are $4$, $3$, and $2$ respectively. The answer is $4$.\n\nIn the third test case, only one element is left in the final array and it can be any element of the initial array. The largest one among them is $9$, so the answer is $9$.", "cfid": "1993D"}
{"problem_id": "1993F1", "problem_title": "F1. Dyn-scripted Robot (Easy Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1993/F1", "problem_statement": "This is the easy version of the problem. The only difference is that in this version $k \\le n$. You can make hacks only if both versions of the problem are solved.\n\nGiven a $w \\times h$ rectangle on the $Oxy$ plane, with points $(0, 0)$ at the bottom-left and $(w, h)$ at the top-right of the rectangle.\n\nYou also have a robot initially at point $(0, 0)$ and a script $s$ of $n$ characters. Each character is either L, R, U, or D, which tells the robot to move left, right, up, or down respectively.\n\nThe robot can only move inside the rectangle; otherwise, it will change the script $s$ as follows:\n\n- If it tries to move outside a vertical border, it changes all L characters to R's (and vice versa, all R's to L's).\n- If it tries to move outside a horizontal border, it changes all U characters to D's (and vice versa, all D's to U's).\n\nThen, it will execute the changed script starting from the character which it couldn't execute.\n\n![](https://espresso.codeforces.com/44058d13574b8a336b6b4ffc319b349c0a98032e.png)An example of the robot's movement process, $s = \\texttt{\"ULULURD\"}$\n\nThe script $s$ will be executed for $k$ times continuously. All changes to the string $s$ will be retained even when it is repeated. During this process, how many times will the robot move to the point $(0, 0)$ in total? Note that the initial position does NOT count.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains four integers $n$, $k$, $w$, and $h$ ($1 \\le n, w, h \\le 10^6$; $1 \\le k \\le n$).\n\nThe second line contains a single string $s$ of size $n$ ($s_i \\in \\{\\texttt{L}, \\texttt{R}, \\texttt{U}, \\texttt{D}\\}$) — the script to be executed.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case, print a single integer — the number of times the robot reaches $(0, 0)$ when executing script $s$ for $k$ times continuously.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n2 2 2 2\n\nUR\n\n4 2 1 1\n\nLLDD\n\n6 3 3 1\n\nRLRRRL\n\n5 5 3 3\n\nRUURD\n\n7 5 3 4\n\nRRDLUUU\n\n```\n\n#### Output #1\n\n```\n0\n4\n3\n0\n1\n```\n\n### Note\n\nIn the first test case, the robot only moves up and right. In the end, it occupies the position $(2, 2)$ but never visits $(0, 0)$. So the answer is $0$.\n\nIn the second test case, each time executing the script the robot visits the origin twice. And since $k=2$, it visits the origin $2 \\cdot 2 = 4$ times overall.\n\n![](https://espresso.codeforces.com/4fc54bd5ef19b611fe31366a3ac8c0ccfa7bf1f1.png)\n\nIn the third test case, the visualization is shown as below:\n\n![](https://espresso.codeforces.com/fbf49c7b363f655844f0192b2cbc3766a46aaa29.png)", "cfid": "1993F1"}
{"problem_id": "1997F", "problem_title": "F. Chips on a Line", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1997/F", "problem_statement": "You have $n$ chips, and you are going to place all of them in one of $x$ points, numbered from $1$ to $x$. There can be multiple chips in each point.\n\nAfter placing the chips, you can perform the following four operations (in any order, any number of times):\n\n- choose a chip in point $i \\ge 3$, remove it and place two chips: one in $i-1$, one in $i-2$;\n- choose two chips in adjacent points $i$ and $i+1$, remove them and place a new chip in $i+2$;\n- choose a chip in point $1$ and move it to $2$;\n- choose a chip in point $2$ and move it to $1$.\n\nNote that the coordinates of the chips you place during the operations cannot be less than $1$, but can be greater than $x$.\n\nDenote the cost of chip placement as the minimum number of chips which can be present on the line after you perform these operations, starting from the placement you've chosen.\n\nFor example, the cost of placing two chips in points $3$ and one chip in point $5$ is $2$, because you can reduce the number of chips to $2$ as follows:\n\n- choose a chip in point $3$, remove it, place a chip in $1$ and another chip in $2$;\n- choose the chips in points $2$ and $3$, remove them and place a chip in $4$;\n- choose the chips in points $4$ and $5$, remove them and place a chip in $6$.\n\nYou are given three integers $n$, $x$ and $m$. Calculate the number of placements of exactly $n$ chips in points from $1$ to $x$ having cost equal to $m$, and print it modulo $998244353$. Two placements are considered different if the number of chips in some point differs between these placements.\n\n### Input\n\nThe only line contains three integers $n$, $x$ and $m$ ($1 \\le m \\le n \\le 1000$; $2 \\le x \\le 10$).\n\n### Output\n\nPrint one integer — the number of placements with cost equal to $m$, taken modulo $998244353$.\n\n### Examples\n\n#### Input #1\n\n```\n\n2 3 1\n\n```\n\n#### Output #1\n\n```\n5\n```\n\n#### Input #2\n\n```\n\n42 10 5\n\n```\n\n#### Output #2\n\n```\n902673363\n```\n\n#### Input #3\n\n```\n\n1000 10 8\n\n```\n\n#### Output #3\n\n```\n187821763\n```\n\n### Note\n\nIn the first example, there are five ways to place $2$ chips in points from $1$ to $3$ so that the cost is $1$:\n\n- $(1, 1)$;\n- $(1, 2)$;\n- $(1, 3)$;\n- $(2, 2)$;\n- $(2, 3)$.", "cfid": "1997F"}
{"problem_id": "1997E", "problem_title": "E. Level Up", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1997/E", "problem_statement": "Monocarp is playing a computer game. He starts the game being level $1$. He is about to fight $n$ monsters, in order from $1$ to $n$. The level of the $i$-th monster is $a_i$.\n\nFor each monster in the given order, Monocarp's encounter goes as follows:\n\n- if Monocarp's level is strictly higher than the monster's level, the monster flees (runs away);\n- otherwise, Monocarp fights the monster.\n\nAfter every $k$-th fight with a monster (fleeing monsters do not count), Monocarp's level increases by $1$. So, his level becomes $2$ after $k$ monsters he fights, $3$ after $2k$ monsters, $4$ after $3k$ monsters, and so on.\n\nYou need to process $q$ queries of the following form:\n\n- $i~x$: will Monocarp fight the $i$-th monster (or will this monster flee) if the parameter $k$ is equal to $x$?\n\n### Input\n\nThe first line contains two integers $n$ and $q$ ($1 \\le n, q \\le 2 \\cdot 10^5$) — the number of monsters and the number of queries.\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 2 \\cdot 10^5$) — the levels of the monsters.\n\nIn the $j$-th of the following $q$ lines, two integers $i$ and $x$ ($1 \\le i, x \\le n$) — the index of the monster and the number of fights required for a level up in the $j$-th query.\n\n### Output\n\nFor each query, output \"YES\", if Monocarp will fight the $i$-th monster in this query, and \"NO\", if the $i$-th monster flees.\n\n### Examples\n\n#### Input #1\n\n```\n\n4 16\n\n2 1 2 1\n\n1 1\n\n2 1\n\n3 1\n\n4 1\n\n1 2\n\n2 2\n\n3 2\n\n4 2\n\n1 3\n\n2 3\n\n3 3\n\n4 3\n\n1 4\n\n2 4\n\n3 4\n\n4 4\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\n```\n\n#### Input #2\n\n```\n\n7 15\n\n1 1 2 1 1 1 1\n\n5 3\n\n2 2\n\n2 2\n\n1 6\n\n5 1\n\n5 5\n\n7 7\n\n3 5\n\n7 4\n\n4 3\n\n2 5\n\n1 2\n\n5 6\n\n4 1\n\n6 1\n\n```\n\n#### Output #2\n\n```\nNO\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nYES\nYES\nYES\nNO\nNO\n```", "cfid": "1997E"}
{"problem_id": "1991E", "problem_title": "E. Coloring Game", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1991/E", "problem_statement": "This is an interactive problem.\n\nConsider an undirected connected graph consisting of $n$ vertices and $m$ edges. Each vertex can be colored with one of three colors: $1$, $2$, or $3$. Initially, all vertices are uncolored.\n\nAlice and Bob are playing a game consisting of $n$ rounds. In each round, the following two-step process happens:\n\n1. Alice chooses two different colors.\n2. Bob chooses an uncolored vertex and colors it with one of the two colors chosen by Alice.\n\nAlice wins if there exists an edge connecting two vertices of the same color. Otherwise, Bob wins.\n\nYou are given the graph. Your task is to decide which player you wish to play as and win the game.\n\n### Input\n\nEach test contains multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 1000$) — the number of test cases. The description of test cases follows.\n\nThe first line of each test case contains two integers $n$, $m$ ($1 \\le n \\le 10^4$, $n - 1 \\le m \\le \\min(\\frac{n \\cdot (n - 1)}{2}, 10^4)$) — the number of vertices and the number of edges in the graph, respectively.\n\nEach of the next $m$ lines of each test case contains two integers $u_i$, $v_i$ ($1 \\le u_i, v_i \\le n$) — the edges of the graph. It is guaranteed that the graph is connected and there are no multiple edges or self-loops.\n\nIt is guaranteed that the sum of $n$ and the sum of $m$ over all test cases does not exceed $10^4$.\n\n### Interaction\n\nFor each test case, you need to output a single line containing either \"Alice\" or \"Bob\", representing the player you choose.\n\nThen for each of the following $n$ rounds, the following two-step process happens:\n\n1. Alice (either you or the interactor) will output two integers $a$ and $b$ ($1 \\le a, b \\le 3$, $a \\neq b$) — the colors chosen by Alice.\n2. Bob (either you or the interactor) will output two integers $i$ and $c$ ($1 \\le i \\le n$, $c = a$ or $c = b$) — the vertex and the color chosen by Bob. Vertex $i$ must be a previously uncolored vertex.\n\nIf any of your outputs are invalid, the jury will output \"-1\" and you will receive a Wrong Answer verdict.\n\nAt the end of all $n$ turns, if you have lost the game, the jury will output \"-1\" and you will receive a Wrong Answer verdict.\n\nIf your program has received a $-1$ instead of a valid value, it must terminate immediately. Otherwise, you may receive an arbitrary verdict because your solution might be reading from a closed stream.\n\nNote that if you are playing as Alice, and there already exists an edge connected two vertices of the same color, the interactor will not terminate early and you will keep playing all $n$ rounds.\n\nAfter outputting, do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- flush(output) in Pascal;\n- stdout.flush() in Python;\n- see documentation for other languages.\n\nIn this problem, hacks are disabled.\n\n### Example\n\n#### Input #1\n\n```\n2\n3 3\n1 2\n2 3\n3 1\n\n3 1\n\n2 2\n\n1 1\n4 4\n1 2\n2 3\n3 4\n4 1\n\n2 3\n\n1 2\n\n2 1\n\n3 1\n\n```\n\n#### Output #1\n\n```\n\nAlice\n3 1\n\n1 2\n\n2 1\n\nBob\n\n1 2\n\n2 1\n\n4 1\n\n3 3\n```\n\n### Note\n\nNote that the sample test cases are example games and do not necessarily represent the optimal strategy for both players.\n\nIn the first test case, you choose to play as Alice.\n\n1. Alice chooses two colors: $3$ and $1$. Bob chooses vertex $3$ and colors it with color $1$.\n2. Alice chooses two colors: $1$ and $2$. Bob chooses vertex $2$ and colors it with color $2$.\n3. Alice chooses two colors: $2$ and $1$. Bob chooses vertex $1$ and colors it with color $1$.\n\nAlice wins because the edge $(3, 1)$ connects two vertices of the same color.\n\nIn the second test case, you choose to play as Bob.\n\n1. Alice chooses two colors: $2$ and $3$. Bob chooses vertex $1$ and colors it with color $2$.\n2. Alice chooses two colors: $1$ and $2$. Bob chooses vertex $2$ and colors it with color $1$.\n3. Alice chooses two colors: $2$ and $1$. Bob chooses vertex $4$ and colors it with color $1$.\n4. Alice chooses two colors: $3$ and $1$. Bob chooses vertex $3$ and colors it with color $3$.\n\nBob wins because there are no edges with vertices of the same color.", "cfid": "1991E"}
{"problem_id": "1991G", "problem_title": "G. Grid Reset", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1991/G", "problem_statement": "You are given a grid consisting of $n$ rows and $m$ columns, where each cell is initially white. Additionally, you are given an integer $k$, where $1 \\le k \\le \\min(n, m)$.\n\nYou will process $q$ operations of two types:\n\n- $\\mathtt{H}$ (horizontal operation) — You choose a $1 \\times k$ rectangle completely within the grid, where all cells in this rectangle are white. Then, all cells in this rectangle are changed to black.\n- $\\mathtt{V}$ (vertical operation) — You choose a $k \\times 1$ rectangle completely within the grid, where all cells in this rectangle are white. Then, all cells in this rectangle are changed to black.\n\nAfter each operation, if any rows or columns become completely black, all cells in these rows and columns are simultaneously reset to white. Specifically, if all cells in the row and column a cell is contained in become black, all cells in both the row and column will be reset to white.\n\nChoose the rectangles in a way that you can perform all given operations, or determine that it is impossible.\n\n### Input\n\nEach test contains multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 1000$) — the number of test cases. The description of test cases follows.\n\nThe first line of each test case contains four integers $n$, $m$, $k$, and $q$ ($1 \\le n, m \\le 100$, $1 \\le k \\le \\min(n, m)$, $1 \\le q \\le 1000$) — the number of rows and columns in the grid, the size of the operation rectangle, and the number of operations, respectively.\n\nThe second line of each test case contains a string $s$ of length $q$, consisting only of characters $\\mathtt{H}$ and $\\mathtt{V}$ — the sequence of operation types.\n\nIt is guaranteed that the sum of $q$ over all test cases does not exceed $1000$.\n\n### Output\n\nFor each test case, output a single integer $-1$ if it is impossible to perform all the operations.\n\nOtherwise, output $q$ lines. Each line contains two integers $i$, $j$ ($1 \\le i \\le n$, $1 \\le j \\le m$) — the coordinates of the top-left cell of the operation rectangle.\n\nIf there are multiple solutions, output any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n1\n\n4 5 3 6\n\nHVVHHV\n\n```\n\n#### Output #1\n\n```\n1 1\n2 1\n1 1\n2 3\n3 3\n2 2\n```\n\n### Note\n\n![](https://espresso.codeforces.com/5f11eda6b2e6af97c5175719de15ebefdba4d493.png)Illustration of example.\n\nThe first operation is horizontal. The operation rectangle starts at $(1,1)$ and is a $1 \\times 3$ rectangle. After the operation, cells $(1,1)$, $(1,2)$, and $(1,3)$ become black.\n\nThe second operation is vertical. The operation rectangle starts at $(2,1)$ and is a $3 \\times 1$ rectangle. After the operation, cells $(2,1)$, $(3,1)$, and $(4,1)$ become black. At this point, the first column becomes completely black, so all cells in the first column are reset to white.\n\nThe third operation is vertical. The operation rectangle starts at $(1,1)$ and is a $3 \\times 1$ rectangle. After the operation, cells $(1,1)$, $(2,1)$, and $(3,1)$ become black.\n\nThe fourth operation is horizontal. The operation rectangle starts at $(2,3)$ and is a $1 \\times 3$ rectangle. After the operation, cells $(2,3)$, $(2,4)$, and $(2,5)$ become black.\n\nThe fifth operation is horizontal. The operation rectangle starts at $(3,3)$ and is a $1 \\times 3$ rectangle. After the operation, cells $(3,3)$, $(3,4)$, and $(3,5)$ become black.\n\nThe sixth operation is vertical. The operation rectangle starts at $(2,2)$ and is a $3 \\times 1$ rectangle. After the operation, cells $(2,2)$, $(3,2)$, and $(4,2)$ become black. At this point, two rows and one column become completely black, so all cells in these rows and the column are reset to white.", "cfid": "1991G"}
{"problem_id": "1991D", "problem_title": "D. Prime XOR Coloring", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1991/D", "problem_statement": "You are given an undirected graph with $n$ vertices, numbered from $1$ to $n$. There is an edge between vertices $u$ and $v$ if and only if $u \\oplus v$ is a [prime number](https://en.wikipedia.org/wiki/Prime_number), where $\\oplus$ denotes the [bitwise XOR operator](https://en.wikipedia.org/wiki/Bitwise_operation#XOR).\n\nColor all vertices of the graph using the minimum number of colors, such that no two vertices directly connected by an edge have the same color.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 500$). The description of test cases follows.\n\nThe only line contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) — the number of vertices in the graph.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output two lines.\n\nThe first line should contain a single integer $k$ ($1 \\le k \\le n$) — the minimum number of colors required.\n\nThe second line should contain $n$ integers $c_1, c_2, \\ldots, c_n$ ($1 \\le c_i \\le k$) — the color of each vertex.\n\nIf there are multiple solutions, output any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n```\n\n#### Output #1\n\n```\n1\n1\n2\n1 2\n2\n1 2 2\n3\n1 2 2 3\n3\n1 2 2 3 3\n4\n1 2 2 3 3 4```\n\n### Note\n\nIn the first test case, the minimum number of colors is $1$, because there is only one vertex.\n\nIn the second test case, the minimum number of colors is $2$, because there is an edge connecting $1$ and $2$ ($1 \\oplus 2 = 3$, which is a prime number).\n\nIn the third test case, the minimum number of colors is still $2$, because $2$ and $3$ can be colored the same since there is no edge between $2$ and $3$ ($2 \\oplus 3 = 1$, which is not a prime number).\n\nIn the fourth test case, it can be shown that the minimum number of colors is $3$.\n\nIn the fifth test case, it can be shown that the minimum number of colors is $3$.\n\nIn the sixth test case, it can be shown that the minimum number of colors is $4$.", "cfid": "1991D"}
{"problem_id": "1991F", "problem_title": "F. Triangle Formation", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1991/F", "problem_statement": "You are given $n$ sticks, numbered from $1$ to $n$. The length of the $i$-th stick is $a_i$.\n\nYou need to answer $q$ queries. In each query, you are given two integers $l$ and $r$ ($1 \\le l < r \\le n$, $r - l + 1 \\ge 6$). Determine whether it is possible to choose $6$ distinct sticks from the sticks numbered $l$ to $r$, to form $2$ non-degenerate triangles$^{\\text{∗}}$.\n\n$^{\\text{∗}}$A triangle with side lengths $a$, $b$, and $c$ is called non-degenerate if:\n\n- $a < b + c$,\n- $b < a + c$, and\n- $c < a + b$.\n\n### Input\n\nThe first line contains two integers $n$ and $q$ ($6 \\le n \\le 10^5$, $1 \\le q \\le 10^5$) — the number of sticks and the number of queries respectively.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$) — $a_i$ denotes the length of the $i$-th stick.\n\nEach of the following $q$ lines contains two integers $l$ and $r$ ($1 \\le l < r \\le n$, $r - l + 1 \\ge 6$) — the parameters of each query.\n\n### Output\n\nFor each query, output \"YES\" (without quotes) if it is possible to form $2$ triangles, and \"NO\" (without quotes) otherwise.\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n10 5\n\n5 2 2 10 4 10 6 1 5 3\n\n1 6\n\n2 7\n\n2 8\n\n5 10\n\n4 10\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nYES\nNO\nYES\n```\n\n### Note\n\nIn the first query, the lengths of the sticks are $[5, 2, 2, 10, 4, 10]$. Two sets of sticks $[2, 4, 5]$ and $[2, 10, 10]$ can be selected to form $2$ non-degenerate triangles.\n\nIn the second query, the lengths of the sticks are $[2, 2, 10, 4, 10, 6]$. It can be shown that it is impossible to form $2$ non-degenerate triangles.\n\nIn the third query, the lengths of the sticks are $[2, 2, 10, 4, 10, 6, 1]$. Two sets of sticks $[1, 2, 2]$ and $[4, 10, 10]$ can be selected to form $2$ non-degenerate triangles.\n\nIn the fourth query, the lengths of the sticks are $[4, 10, 6, 1, 5, 3]$. It can be shown that it is impossible to form $2$ non-degenerate triangles.\n\nIn the fifth query, the lengths of the sticks are $[10, 4, 10, 6, 1, 5, 3]$. Two sets of sticks $[1, 10, 10]$ and $[3, 4, 5]$ can be selected to form $2$ non-degenerate triangles.", "cfid": "1991F"}
{"problem_id": "1996F", "problem_title": "F. Bomb", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1996/F", "problem_statement": "Sparkle gives you two arrays $a$ and $b$ of length $n$. Initially, your score is $0$. In one operation, you can choose an integer $i$ and add $a_i$ to your score. Then, you must set $a_i$ = $\\max(0, a_i - b_i)$.\n\nYou only have time to perform $k$ operations before Sparkle sets off a nuclear bomb! What is the maximum score you can acquire after $k$ operations?\n\n### Input\n\nThe first line contains $t$ ($1 \\leq t \\leq 1000$) — the number of test cases.\n\nThe first line of each test case contains $n$ and $k$ ($1 \\leq n \\leq 2 \\cdot 10^5, 1 \\leq k \\leq 10^9$) — the length of the arrays and the number of operations you can perform.\n\nThe following line contains $n$ integers $a_1, a_2, ... a_n$ ($1 \\leq a_i \\leq 10^9$).\n\nThe following line contains $n$ integers $b_1, b_2, ... b_n$ ($1 \\leq b_i \\leq 10^9$).\n\nIt is guaranteed that the sum of $n$ for all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output an integer, the maximum score you can acquire after $k$ operations.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3 4\n\n5 6 7\n\n2 3 4\n\n5 9\n\n32 52 68 64 14\n\n18 14 53 24 8\n\n5 1000\n\n1 2 3 4 5\n\n5 4 3 2 1\n\n1 1000000\n\n1000000\n\n1\n\n10 6\n\n3 3 5 10 6 8 6 8 7 7\n\n6 1 7 4 1 1 8 9 3 1\n\n```\n\n#### Output #1\n\n```\n21\n349\n27\n500000500000\n47\n```", "cfid": "1996F"}
{"problem_id": "1996G", "problem_title": "G. Penacony", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1996/G", "problem_statement": "On Penacony, The Land of the Dreams, there exists $n$ houses and $n$ roads. There exists a road between house $i$ and $i+1$ for all $1 \\leq i \\leq n-1$ and a road between house $n$ and house $1$. All roads are bidirectional. However, due to the crisis on Penacony, the overseeing family has gone into debt and may not be able to maintain all roads.\n\nThere are $m$ pairs of friendships between the residents of Penacony. If the resident living in house $a$ is friends with the resident living in house $b$, there must be a path between houses $a$ and $b$ through maintained roads.\n\nWhat is the minimum number of roads that must be maintained?\n\n### Input\n\nThe first line contains $t$ ($1 \\leq t \\leq 10^4$) – the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $m$ ($3 \\leq n \\leq 2 \\cdot 10^5, 1 \\leq m \\leq 2 \\cdot 10^5$) – the number of houses and the number of friendships.\n\nThe next $m$ lines contain two integers $a$ and $b$ ($1 \\leq a < b \\leq n$) – the resident in house $a$ is friends with the resident in house $b$. It is guaranteed all ($a, b$) are distinct.\n\nIt is guaranteed the sum of $n$ and $m$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output an integer, the minimum number of roads that must be maintained.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n8 3\n\n1 8\n\n2 7\n\n4 5\n\n13 4\n\n1 13\n\n2 12\n\n3 11\n\n4 10\n\n10 2\n\n2 3\n\n3 4\n\n10 4\n\n3 8\n\n5 10\n\n2 10\n\n4 10\n\n4 1\n\n1 3\n\n5 2\n\n3 5\n\n1 4\n\n5 2\n\n2 5\n\n1 3\n\n```\n\n#### Output #1\n\n```\n4\n7\n2\n7\n2\n3\n3\n```\n\n### Note\n\nFor the first test case, the following roads must be maintained:\n\n- $8 \\leftarrow \\rightarrow 1$\n- $7 \\leftarrow \\rightarrow 8$\n- $1 \\leftarrow \\rightarrow 2$\n- $4 \\leftarrow \\rightarrow 5$", "cfid": "1996G"}
{"problem_id": "1995E1", "problem_title": "E1. Let Me Teach You a Lesson (Easy Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1995/E1", "problem_statement": "This is the easy version of a problem. The only difference between an easy and a hard version is the constraints on $t$ and $n$. You can make hacks only if both versions of the problem are solved.\n\nArthur is giving a lesson to his famous $2 n$ knights. Like any other students, they're sitting at the desks in pairs, but out of habit in a circle. The knight $2 i - 1$ is sitting at the desk with the knight $2 i$.\n\nEach knight has intelligence, which can be measured by an integer. Let's denote the intelligence of the $i$-th knight as $a_i$. Arthur wants the maximal difference in total intelligence over all pairs of desks to be as small as possible. More formally, he wants to minimize $\\max\\limits_{1 \\le i \\le n} (a_{2 i - 1} + a_{2 i}) - \\min\\limits_{1 \\le i \\le n} (a_{2 i - 1} + a_{2 i})$.\n\nHowever, the Code of Chivalry only allows swapping the opposite knights in the circle, i.e., Arthur can simultaneously perform $a_i := a_{i + n}$, $a_{i + n} := a_i$ for any $1 \\le i \\le n$. Arthur can make any number of such swaps. What is the best result he can achieve?\n\n### Input\n\nEach test consists of several test cases. The first line contains a single integer $t$ ($1 \\le t \\le 1000$) — the number of test cases. It is followed by descriptions of the test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 2000$) — the number of desks.\n\nThe second line consists of $2n$ integers $a_1, a_2, \\ldots, a_{2 n}$ ($1 \\le a_i \\le 10^9$) — the intelligence values of the knights.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2000$.\n\n### Output\n\nFor each test case, output a single line containing one integer — the minimal difference Arthur can achieve.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n2\n\n6 6 4 4\n\n1\n\n10 17\n\n3\n\n1 10 1 10 1 10\n\n3\n\n3 3 4 5 5 4\n\n5\n\n1 2 3 4 5 6 7 8 9 10\n\n```\n\n#### Output #1\n\n```\n0\n0\n0\n2\n4\n```\n\n### Note\n\nIn the first test case, Arthur can swap the second and the fourth knights. Then the total intelligence at both desks will be $10$.\n\nIn the third test case, Arthur can make $0$ operations, which will result in the total intelligence of $11$ at each of the desks.\n\nIn the fourth test case, Arthur can swap knights with indices $2$ and $5$ and achieve the difference of $2$. It can be proven that he cannot improve his result any further.", "cfid": "1995E1"}
{"problem_id": "1995E2", "problem_title": "E2. Let Me Teach You a Lesson (Hard Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1995/E2", "problem_statement": "This is the hard version of a problem. The only difference between an easy and a hard version is the constraints on $t$ and $n$. You can make hacks only if both versions of the problem are solved.\n\nArthur is giving a lesson to his famous $2 n$ knights. Like any other students, they're sitting at the desks in pairs, but out of habit in a circle. The knight $2 i - 1$ is sitting at the desk with the knight $2 i$.\n\nEach knight has intelligence, which can be measured by an integer. Let's denote the intelligence of the $i$-th knight as $a_i$. Arthur wants the maximal difference in total intelligence over all pairs of desks to be as small as possible. More formally, he wants to minimize $\\max\\limits_{1 \\le i \\le n} (a_{2 i - 1} + a_{2 i}) - \\min\\limits_{1 \\le i \\le n} (a_{2 i - 1} + a_{2 i})$.\n\nHowever, the Code of Chivalry only allows swapping the opposite knights in the circle, i.e., Arthur can simultaneously perform $a_i := a_{i + n}$, $a_{i + n} := a_i$ for any $1 \\le i \\le n$. Arthur can make any number of such swaps. What is the best result he can achieve?\n\n### Input\n\nEach test consists of several test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10\\,000$) — the number of test cases. It is followed by descriptions of the test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 100\\,000$) — the number of desks.\n\nThe second line consists of $2n$ integers $a_1, a_2, \\ldots, a_{2 n}$ ($1 \\le a_i \\le 10^9$) — the intelligence values of the knights.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $100\\,000$.\n\n### Output\n\nFor each test case, output a single line containing one integer — the minimal difference Arthur can achieve.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n2\n\n6 6 4 4\n\n1\n\n10 17\n\n3\n\n1 10 1 10 1 10\n\n3\n\n3 3 4 5 5 4\n\n5\n\n1 2 3 4 5 6 7 8 9 10\n\n```\n\n#### Output #1\n\n```\n0\n0\n0\n2\n4\n```\n\n### Note\n\nIn the first test case, Arthur can swap the second and the fourth knights. Then the total intelligence at both desks will be $10$.\n\nIn the third test case, Arthur can make $0$ operations, which will result in the total intelligence of $11$ at each of the desks.\n\nIn the fourth test case, Arthur can swap knights with indices $2$ and $5$ and achieve the difference of $2$. It can be proven that he cannot improve his result any further.", "cfid": "1995E2"}
{"problem_id": "1995D", "problem_title": "D. Cases", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1995/D", "problem_statement": "You're a linguist studying a mysterious ancient language. You know that\n\n1. Its words consist only of the first $c$ letters of the Latin alphabet.\n2. Each word has a case which can be unambiguously determined by its last letter (different letters correspond to different cases). For example, words \"ABACABA\" and \"ABA\" (if they exist) have the same case in this language because they both have the same ending 'A', whereas \"ALICE\" and \"BOB\" have different cases. If the language does not have a case corresponding to some letter, it means that the word cannot end with this letter.\n3. The length of each word is $k$ or less.\n\nYou have a single text written in this language. Unfortunately, as the language is really ancient, spaces between words are missing and all letters are uppercase. You wonder what is the minimum number of cases the language can have. Can you find this out?\n\n### Input\n\nEach test consists of several test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10\\,000$) — the number of test cases. It is followed by descriptions of the test cases.\n\nThe first line of each test case contains three integers $n$, $c$, $k$ ($1 \\le k \\le n \\le 2^{18}$, $1 \\le c \\le 18$) — the length of the text, the number of letters in the language, and the maximum length of the word.\n\nThe second line contains a string of $n$ characters — the text itself. Each character is one of the first $c$ uppercase letters of the Latin alphabet.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2^{18}$ and the sum of $2^c$ over all test cases does not exceed $2^{18}$.\n\n### Output\n\nFor each test case, output a single line consisting of a single integer — the minimum number of cases in the language.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n5 5 1\n\nABCDE\n\n3 1 2\n\nAAA\n\n3 2 2\n\nAAB\n\n10 2 2\n\nABABABABAB\n\n4 4 4\n\nDCBA\n\n1 17 1\n\nQ\n\n9 3 2\n\nABCABCABC\n\n```\n\n#### Output #1\n\n```\n5\n1\n2\n1\n1\n1\n2\n```\n\n### Note\n\nIn the first test case, there must be five cases in the language (for each of the letters 'A', 'B', 'C', 'D', and 'E' there must be a case that has a corresponding ending).\n\nIn the fourth test case, one case with ending 'B' is sufficient.", "cfid": "1995D"}
{"problem_id": "1990F", "problem_title": "F. Polygonal Segments", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1990/F", "problem_statement": "You are given an array $a$ of size $n$.\n\nA segment $[l, r](1 \\le l < r \\le n)$ is called a polygonal segment only if the following conditions hold:\n\n- $(r-l+1) \\geq 3$;\n- Considering $a_l, a_{l+1}, \\ldots, a_r$ as side lengths, these sides can form a polygon with $(r-l+1)$ sides.\n\nProcess $q$ queries of two types:\n\n- \"1 l r\": find the length of the longest segment among all polygonal segments $[l_0,r_0]$ satisfying $l \\le l_0 \\le r_0 \\le r$. If there is no such polygonal segment, output $-1$ instead;\n- \"2 i x\": assign $a_i := x$.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nFor each test case:\n\n- The first line of each testcase contains two integers $n$, $q$ ($4 \\le n \\le 2\\cdot 10^5$, $1 \\le q \\le 10^5$);\n- The second line of each testcase contains $n$ integers $a_1,a_2,\\ldots, a_n$ ($1 \\le a_i \\le 10^{12}$);\n- The following $q$ lines contain the description of queries. Each line is of one of two types:\n  - \"1 l r\" ($1 \\le l < r \\le n$, $r-l+1\\ge 3$);\n  - \"2 i x\" ($1 \\le i \\le n$, $1 \\le x \\le 10^{12}$).\n\nIt is guaranteed that the sum of $n$ over all test cases will not exceed $2 \\cdot 10^5$, and the sum of $q$ over all test cases will not exceed $10^5$.\n\n### Output\n\nFor each query, if there is no suitable segment, output $-1$ in a new line. Otherwise, output the length of the longest segment satisfying the condition above in a new line.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n5 6\n\n3 1 2 2 8\n\n1 1 3\n\n1 1 4\n\n1 1 5\n\n2 1 5\n\n1 1 4\n\n1 1 5\n\n4 10\n\n500000000000 500000000000 1000000000000 500000000000\n\n1 1 3\n\n1 2 4\n\n1 1 4\n\n2 1 499999999999\n\n2 3 999999999999\n\n1 1 3\n\n1 2 4\n\n1 1 4\n\n2 3 1000000000000\n\n1 1 3\n\n```\n\n#### Output #1\n\n```\n-1\n4\n4\n3\n5\n-1\n-1\n4\n-1\n3\n4\n-1\n```\n\n### Note\n\nIn the first query of the first test case, there is no polygonal segment under the given condition. For example, considering segment $[1,3]$, you can not form a triangle with side lengths of $a_1=3$, $a_2=1$, and $a_3=2$.\n\nIn the second query of the first test case, the longest polygonal segment is $[1,4]$. You can form a quadrilateral with side lengths of $a_1=3$, $a_2=1$, $a_3=2$, and $a_4=2$.\n\n![](https://espresso.codeforces.com/c8da964ded1680db263ba74efbf576b1cc520708.png)An example of a quadrilateral with side lengths of $3$, $1$, $2$, and $2$.", "cfid": "1990F"}
{"problem_id": "1990E1", "problem_title": "E1. Catch the Mole(Easy Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1990/E1", "problem_statement": "This is the easy version of the problem. The only difference is the limit on the number of queries.\n\nThis is an interactive problem.\n\nYou are given a tree of $n$ nodes with node $1$ as its root node.\n\nThere is a hidden mole in one of the nodes. To find its position, you can pick an integer $x$ ($1 \\le x \\le n$) to make an inquiry to the jury. Next, the jury will return $1$ when the mole is in subtree $x$. Otherwise, the judge will return $0$. If the judge returns $0$ and the mole is not in root node $1$, the mole will move to the parent node of the node it is currently on.\n\nUse at most $300$ operations to find the current node where the mole is located.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 100$). The description of the test cases follows.\n\n### Interaction\n\nThe first line of each test case contains one integer $n$ ($2 \\le n \\le 5000$).\n\nThe following $n-1$ lines describe the edges of the tree. Each line contains two space-separated integers $u_i$ and $v_i$ ($1 \\le u_i, v_i \\le n$), indicating an edge between nodes $u_i$ and $v_i$.\n\nIt is guaranteed that the input data represents a tree.\n\nThe interactor in this task is not adaptive. In other words, the node where the mole is located at first is fixed in every test case and does not change during the interaction.\n\nTo ask a query, you need to pick a vertex $x$ ($1 \\le x \\le n$) and print the line of the following form:\n\n- \"? x\"\n\nAfter that, you receive:\n\n- $0$ if the mole is not in subtree $x$;\n- $1$ if the mole is in subtree $x$.\n\nYou can make at most $300$ queries of this form for each test case.\n\nNext, if your program has found the current node where the mole is located, print the line of the following form:\n\n- \"! x\"\n\nNote that this line is not considered a query and is not taken into account when counting the number of queries asked.\n\nAfter this, proceed to the next test case.\n\nIf you make more than $300$ queries during an interaction, your program must terminate immediately, and you will receive the Wrong Answer verdict. Otherwise, you can get an arbitrary verdict because your solution will continue to read from a closed stream.\n\nAfter printing a query or the answer for a test case, do not forget to output the end of line and flush the output. Otherwise, you will get the verdict Idleness Limit Exceeded. To do this, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- flush(output) in Pascal;\n- stdout.flush() in Python;\n- see the documentation for other languages.\n\nHacks\n\nTo hack, follow the test format below.\n\nThe first line contains the number of test cases $t$ ($1 \\le t \\le 100$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $x$ ($2 \\le n \\le 5000$, $1 \\le x \\le n$) — the size of the tree and the initial position of the mole.\n\nThe following $n-1$ lines describe the edges of the tree. Each line contains two space-separated integers $u_i$ and $v_i$ ($1 \\le u_i, v_i \\le n$), indicating an edge between nodes $u_i$ and $v_i$.\n\nThe input data must represent a tree.\n\n### Example\n\n#### Input #1\n\n```\n2\n2\n1 2\n\n1\n\n6\n1 2\n1 3\n1 4\n4 5\n5 6\n\n0\n\n0\n\n1```\n\n#### Output #1\n\n```\n\n? 2\n\n! 2\n\n? 2\n\n? 6\n\n? 4\n\n! 4\n```\n\n### Note\n\nIn the first test case, the mole is in node $2$ initially.\n\nFor the query \"? 2\", the jury returns $1$ because the mole is in subtree $2$. After this query, the mole does not move.\n\nThe answer $2$ is the current node where the mole is located, so the answer is considered correct.\n\nIn the second test case, the mole is in node $6$ initially.\n\nFor the query \"? 2\", the jury returns $0$ because the mole is not in subtree $2$. After this query, the mole moves from node $6$ to node $5$.\n\nFor the query \"? 6\", the jury returns $0$ because the mole is not in subtree $6$. After this query, the mole moves from node $5$ to node $4$.\n\nFor the query \"? 4\", the jury returns $1$ because the mole is in subtree $4$. After this query, the mole does not move.\n\nThe answer $4$ is the current node where the mole is located, so the answer is considered correct.\n\nPlease note that the example is only for understanding the statement, and the queries in the example do not guarantee to determine the unique position of the mole.", "cfid": "1990E1"}
{"problem_id": "1990E2", "problem_title": "E2. Catch the Mole(Hard Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1990/E2", "problem_statement": "This is the hard version of the problem. The only difference is the limit on the number of queries.\n\nThis is an interactive problem.\n\nYou are given a tree of $n$ nodes with node $1$ as its root node.\n\nThere is a hidden mole in one of the nodes. To find its position, you can pick an integer $x$ ($1 \\le x \\le n$) to make an inquiry to the jury. Next, the jury will return $1$ when the mole is in subtree $x$. Otherwise, the judge will return $0$. If the judge returns $0$ and the mole is not in root node $1$, the mole will move to the parent node of the node it is currently on.\n\nUse at most $160$ operations to find the current node where the mole is located.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 100$). The description of the test cases follows.\n\n### Interaction\n\nThe first line of each test case contains one integer $n$ ($2 \\le n \\le 5000$).\n\nThe following $n-1$ lines describe the edges of the tree. Each line contains two space-separated integers $u_i$ and $v_i$ ($1 \\le u_i, v_i \\le n$), indicating an edge between nodes $u_i$ and $v_i$.\n\nIt is guaranteed that the input data represents a tree.\n\nThe interactor in this task is not adaptive. In other words, the node where the mole is located at first is fixed in every test case and does not change during the interaction.\n\nTo ask a query, you need to pick a vertex $x$ ($1 \\le x \\le n$) and print the line of the following form:\n\n- \"? x\"\n\nAfter that, you receive:\n\n- $0$ if the mole is not in subtree $x$;\n- $1$ if the mole is in subtree $x$.\n\nYou can make at most $160$ queries of this form for each test case.\n\nNext, if your program has found the current node where the mole is located, print the line of the following form:\n\n- \"! x\"\n\nNote that this line is not considered a query and is not taken into account when counting the number of queries asked.\n\nAfter this, proceed to the next test case.\n\nIf you make more than $160$ queries during an interaction, your program must terminate immediately, and you will receive the Wrong Answer verdict. Otherwise, you can get an arbitrary verdict because your solution will continue to read from a closed stream.\n\nAfter printing a query or the answer for a test case, do not forget to output the end of line and flush the output. Otherwise, you will get the verdict Idleness Limit Exceeded. To do this, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- flush(output) in Pascal;\n- stdout.flush() in Python;\n- see the documentation for other languages.\n\nHacks\n\nTo hack, follow the test format below.\n\nThe first line contains the number of test cases $t$ ($1 \\le t \\le 100$). The description of the test cases follows.\n\nThe first line of each test case contains one integer $n$ and $x$ ($2 \\le n \\le 5000$, $1 \\le x \\le n$) — the size of the tree and the initial position of the mole.\n\nThe following $n-1$ lines describe the edges of the tree. Each line contains two space-separated integers $u_i$ and $v_i$ ($1 \\le u_i, v_i \\le n$), indicating an edge between nodes $u_i$ and $v_i$.\n\nThe input data must represent a tree.\n\n### Example\n\n#### Input #1\n\n```\n2\n2\n1 2\n\n1\n\n6\n1 2\n1 3\n1 4\n4 5\n5 6\n\n0\n\n0\n\n1```\n\n#### Output #1\n\n```\n\n? 2\n\n! 2\n\n? 2\n\n? 6\n\n? 4\n\n! 4\n```\n\n### Note\n\nIn the first test case, the mole is in node $2$ initially.\n\nFor the query \"? 2\", the jury returns $1$ because the mole is in subtree $2$. After this query, the mole does not move.\n\nThe answer $2$ is the current node where the mole is located, so the answer is considered correct.\n\nIn the second test case, the mole is in node $6$ initially.\n\nFor the query \"? 2\", the jury returns $0$ because the mole is not in subtree $2$. After this query, the mole moves from node $6$ to node $5$.\n\nFor the query \"? 6\", the jury returns $0$ because the mole is not in subtree $6$. After this query, the mole moves from node $5$ to node $4$.\n\nFor the query \"? 4\", the jury returns $1$ because the mole is in subtree $4$. After this query, the mole does not move.\n\nThe answer $4$ is the current node where the mole is located, so the answer is considered correct.\n\nPlease note that the example is only for understanding the statement, and the queries in the example do not guarantee to determine the unique position of the mole.", "cfid": "1990E2"}
{"problem_id": "1994F", "problem_title": "F. Stardew Valley", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1994/F", "problem_statement": "Pelican Town represents $n$ houses connected by $m$ bidirectional roads. Some roads have NPCs standing on them. Farmer Buba needs to walk on each road with an NPC and talk to them.\n\nHelp the farmer find a route satisfying the following properties:\n\n- The route starts at some house, follows the roads, and ends at the same house.\n- The route does not follow any road more than once (in both directions together).\n- The route follows each road with an NPC exactly once.\n\nNote that the route can follow roads without NPCs, and you do not need to minimize the length of the route.\n\nIt is guaranteed that you can reach any house from any other by walking on the roads with NPCs only.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains an integer $t$ ($1 \\le t \\le 10^{4}$) — the number of test cases. Then follows the description of the test cases.\n\nThe first line of each test case contains two integers $n$ and $m$ ($2 \\leq n \\leq 5 \\cdot 10^5, 1 \\leq m \\leq 5 \\cdot 10^5$) — the number of houses and roads in Pelican Town respectively.\n\nIn each of the next $m$ lines, three integers $u$, $v$, and $c$ ($1 \\leq u, v \\leq n, c = 0/1$) are given — the ends of the road and whether an NPC is on this road. If $c = 1$, then the road has an NPC. If $c = 0$, then the road has no NPC.\n\nThe graph may contain multiple edges and loops, and if there are multiple edges with NPCs standing on them, the route must follow each of these roads.\n\nIt is guaranteed that you can reach any house from any other by walking on the roads with NPCs only.\n\nIt is guaranteed that the sum of $n$ and $m$ for all test cases does not exceed $5 \\cdot 10^5$.\n\n### Output\n\nFor each test case, if there is no solution, then output \"No\" (without quotes).\n\nOtherwise, output \"Yes\" (without quotes), and then output $k$ — the number of roads in the route. In the next line, output $k + 1$ numbers — the houses of the route in the order of traversal. Note that the first house should match the last one, as the route is cyclic.\n\nIf there are multiple answers, you can print any of them.\n\nYou can output each letter in any case (for example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as a positive answer).\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3 2\n\n1 2 1\n\n2 3 1\n\n3 3\n\n1 2 1\n\n1 3 1\n\n2 3 0\n\n5 9\n\n1 2 0\n\n5 2 1\n\n5 4 1\n\n5 1 1\n\n2 3 1\n\n5 2 1\n\n4 1 0\n\n4 3 0\n\n5 2 0\n\n```\n\n#### Output #1\n\n```\nNO\nYES\n3\n1 2 3 1\nYES\n7\n1 2 5 4 3 2 5 1\n```\n\n### Note\n\nNote that in the third test case, there are multiple edges $(5, 2)$. You must walk on two of them.", "cfid": "1994F"}
{"problem_id": "1994G", "problem_title": "G. Minecraft", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1994/G", "problem_statement": "After winning another Bed Wars game, Masha and Olya wanted to relax and decided to play a new game. Masha gives Olya an array $a$ of length $n$ and a number $s$. Now Olya's task is to find a non-negative number $x$ such that $\\displaystyle\\sum_{i=1}^{n} a_i \\oplus x = s$. But she is very tired after a tight round, so please help her with this.\n\nBut this task seemed too simple to them, so they decided to make the numbers larger (up to $2^k$) and provide you with their binary representation.\n\n### Input\n\nEach test consists of several test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. Then follows the description of the test cases.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\le n, k, n \\cdot k \\le 2 \\cdot 10^6$) — the length of the array $a$ and the length of the binary representation of all numbers.\n\nThe second line contains a string of length $k$, consisting of zeros and ones — the binary representation of the number $s$, starting from the most significant bits.\n\nThe next $n$ lines also contain strings of length $k$, consisting of zeros and ones, the $i$-th of these strings contains the binary representation of the number $a_i$, starting from the most significant bits.\n\nIt is guaranteed that the sum of the values $n \\cdot k$ for all test cases does not exceed $2 \\cdot 10^6$.\n\n### Output\n\nFor each test case, output a string of length $k$ on a separate line, consisting of zeros or ones — the binary representation of any suitable number $x$ ($x \\ge 0$), starting from the most significant bits, or $-1$ if such $x$ does not exist.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n4 5\n\n01011\n\n01110\n\n00110\n\n01100\n\n01111\n\n2 8\n\n00101001\n\n10111111\n\n10011110\n\n5 4\n\n0101\n\n0010\n\n0000\n\n0000\n\n0010\n\n0011\n\n6 5\n\n00011\n\n10110\n\n11001\n\n01010\n\n11100\n\n10011\n\n10000\n\n```\n\n#### Output #1\n\n```\n01110\n10011010\n0010\n-1\n```\n\n### Note\n\nIn the first test case, $s = 11, a = [14, 6, 12, 15]$, if $x = 14$, then $\\displaystyle\\sum_{i=1}^{n} a_i \\oplus x = (14 \\oplus 14) + (6 \\oplus 14) + (12 \\oplus 14) + (15 \\oplus 14) = 0 + 8 + 2 + 1 = 11 = s$.\n\nIn the second test case, $s = 41, a = [191, 158]$, if $x = 154$, then $\\displaystyle\\sum_{i=1}^{n} a_i \\oplus x = (191 \\oplus 154) + (158 \\oplus 154) = 37 + 4 = 41 = s$.", "cfid": "1994G"}
{"problem_id": "1994E", "problem_title": "E. Wooden Game", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1994/E", "problem_statement": "You are given a forest of $k$ rooted trees$^{\\text{∗}}$. Lumberjack Timofey wants to cut down the entire forest by applying the following operation:\n\n- Select a subtree$^{\\text{†}}$ of any vertex of one of the trees and remove it from the tree.\n\nTimofey loves bitwise operations, so he wants the [bitwise OR](https://en.wikipedia.org/wiki/Bitwise_operation#OR) of the sizes of the subtrees he removed to be maximum. Help him and find the maximum result he can obtain.\n\n$^{\\text{∗}}$ A tree is a connected graph without cycles, loops, or multiple edges. In a rooted tree, a selected vertex is called a root. A forest is a collection of one or more trees.\n\n$^{\\text{†}}$ The subtree of a vertex $v$ is the set of vertices for which $v$ lies on the shortest path from this vertex to the root, including $v$ itself.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases. Then follows the description of the test cases.\n\nThe first line of each test case contains a single integer $k$ ($1 \\leq k \\leq 10^6$) — the number of trees in the forest.\n\nThis is followed by a description of each of the $k$ trees:\n\nThe first line contains a single integer $n$ ($1 \\leq n \\leq 10^6$) — the size of the tree. The vertices of the tree are numbered with integers from $1$ to $n$. The root of the tree is vertex number $1$.\n\nThe second line contains $n - 1$ integers $p_2, p_3, \\ldots p_n$ ($1 \\leq p_i < i$), where $p_i$ — the parent of vertex $i$.\n\nIt is guaranteed that the sum of $k$ and $n$ for all sets of input data does not exceed $10^6$.\n\n### Output\n\nFor each test case, output a single integer — the maximum result that can be obtained.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n1\n\n1\n\n2\n\n4\n\n1 2 2\n\n6\n\n1 1 3 1 3\n\n1\n\n10\n\n1 2 2 1 1 5 7 6 4\n\n```\n\n#### Output #1\n\n```\n1\n7\n10\n```\n\n### Note\n\nIn the second test case, the trees look like this:\n\n![](https://espresso.codeforces.com/15fb9cc5074ad4f74fb9b209f518c862d2eb6f70.png)\n\nThe first operation removes the entire second tree.\n\n![](https://espresso.codeforces.com/6f5a9bd039887467d5210d9f11eb6e0b1510cd43.png)\n\nThe second operation removes vertex $4$ from the first tree.\n\n![](https://espresso.codeforces.com/30ecddcc00a758df892fa8d5727c438e610b6351.png)\n\nThe third operation removes the first tree. The result is $6|1|3 = 7$ ($|$ denotes bitwise OR).\n\nIn the third test case, the entire tree needs to be removed.", "cfid": "1994E"}
{"problem_id": "1994D", "problem_title": "D. Funny Game", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1994/D", "problem_statement": "Vanya has a graph with $n$ vertices (numbered from $1$ to $n$) and an array $a$ of $n$ integers; initially, there are no edges in the graph. Vanya got bored, and to have fun, he decided to perform $n - 1$ operations.\n\nOperation number $x$ (operations are numbered in order starting from $1$) is as follows:\n\n- Choose $2$ different numbers $1 \\leq u,v \\leq n$, such that $|a_u - a_v|$ is divisible by $x$.\n- Add an undirected edge between vertices $u$ and $v$ to the graph.\n\nHelp Vanya get a connected$^{\\text{∗}}$ graph using the $n - 1$ operations, or determine that it is impossible.\n\n$^{\\text{∗}}$A graph is called connected if it is possible to reach any vertex from any other by moving along the edges.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains an integer $t$ ($1 \\le t \\le 10^{3}$) — the number of test cases. Then follows the description of the test cases.\n\nThe first line of each test case contains the number $n$ ($1 \\leq n \\leq 2000$) — the number of vertices in the graph.\n\nThe second line of each test case contains $n$ numbers $a_1, a_2, \\cdots a_n$ ($1 \\leq a_i \\leq 10^9$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2000$.\n\n### Output\n\nFor each test case, if there is no solution, then output \"No\" (without quotes).\n\nOtherwise, output \"Yes\" (without quotes), and then output $n - 1$ lines, where in the $i$-th line, output the numbers $u$ and $v$ that need to be chosen for operation $i$.\n\nYou can output each letter in any case (for example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as a positive answer).\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n2\n\n1 4\n\n4\n\n99 7 1 13\n\n5\n\n10 2 31 44 73\n\n5\n\n87 6 81 44 32\n\n5\n\n62 35 33 79 16\n\n5\n\n6 51 31 69 42\n\n5\n\n52 63 25 21 5\n\n12\n\n33 40 3 11 31 43 37 8 50 5 12 22\n\n```\n\n#### Output #1\n\n```\nYES\n2 1\nYES\n4 1\n2 1\n3 2\nYES\n5 1\n4 1\n3 1\n2 1\nYES\n4 1\n3 1\n2 1\n5 4\nYES\n3 1\n5 1\n2 1\n4 2\nYES\n4 1\n5 1\n2 1\n3 2\nYES\n2 1\n5 2\n3 1\n4 3\nYES\n9 1\n12 9\n11 1\n10 1\n6 1\n7 6\n2 1\n8 2\n5 2\n3 1\n4 1\n```\n\n### Note\n\nLet's consider the second test case.\n\n- First operation $(x = 1)$: we can connect vertices $4$ and $1$, since $|a_4 - a_1| = |13 - 99| = |-86| = 86$, and $86$ is divisible by $1$.\n\n![](https://espresso.codeforces.com/24b0967a906dec08457b4ca26b1b9f94e4ae11d0.png)\n\n- Second operation $(x = 2)$: we can connect vertices $2$ and $1$, since $|a_2 - a_1| = |7 - 99| = |-92| = 92$, and $92$ is divisible by $2$.\n\n![](https://espresso.codeforces.com/fdb54e80cd5428b2a0b745bfed10e1b4409a4a07.png)\n\n- Third operation $(x = 3)$: we can connect vertices $3$ and $2$, since $|a_3 - a_2| = |1 - 7| = |-6| = 6$, and $6$ is divisible by $3$.\n\n![](https://espresso.codeforces.com/449331c248284a198b0c59042745856fef47c643.png) From the picture, it can be seen that a connected graph is obtained.", "cfid": "1994D"}
{"problem_id": "1988E", "problem_title": "E. Range Minimum Sum", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1988/E", "problem_statement": "For an array $\\[a\\_1,a\\_2,\\\\ldots,a\\_n\\]$ of length $n$, define $f(a)$ as the sum of the minimum element over all subsegments. That is, \n\n$$f(a)=\\sum_{l=1}^n\\sum_{r=l}^n \\min_{l\\le i\\le r}a_i.$$\n\nA permutation is a sequence of integers from $1$ to $n$ of length $n$ containing each number exactly once. You are given a permutation $[a_1,a_2,\\ldots,a_n]$. For each $i$, solve the following problem independently:\n\n- Erase $a_i$ from $a$, concatenating the remaining parts, resulting in $b = [a_1,a_2,\\ldots,a_{i-1},\\;a_{i+1},\\ldots,a_{n}]$.\n- Calculate $f(b)$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^5$). Description of the test cases follows.\n\nThe first line of each test case contains an integer $n$ ($1\\le n\\le 5\\cdot 10^5$).\n\nThe second line of each test case contains $n$ distinct integers $a_1,\\ldots,a_n$ ($1\\le a_i\\le n$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case, print one line containing $n$ integers. The $i$-th integer should be the answer when erasing $a_i$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n1\n\n1\n\n3\n\n3 1 2\n\n5\n\n4 2 1 5 3\n\n8\n\n8 1 4 6 7 3 5 2\n\n```\n\n#### Output #1\n\n```\n0\n4 7 5\n19 21 27 17 19\n79 100 72 68 67 80 73 80\n```\n\n### Note\n\nIn the second test case, $a=[3,1,2]$.\n\n- When removing $a_1$, $b=[1,2]$. $f(b)=1+2+\\min\\{1,2\\}=4$.\n- When removing $a_2$, $b=[3,2]$. $f(b)=3+2+\\min\\{3,2\\}=7$.\n- When removing $a_3$, $b=[3,1]$. $f(b)=3+1+\\min\\{3,1\\}=5$.", "cfid": "1988E"}
{"problem_id": "1988D", "problem_title": "D. The Omnipotent Monster Killer", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1988/D", "problem_statement": "You, the monster killer, want to kill a group of monsters. The monsters are on a tree with $n$ vertices. On vertex with number $i$ ($1\\le i\\le n$), there is a monster with $a_i$ attack points. You want to battle with monsters for $10^{100}$ rounds.\n\nIn each round, the following happens in order:\n\n1. All living monsters attack you. Your health decreases by the sum of attack points of all living monsters.\n2. You select some (possibly all or none) monsters and kill them. After being killed, the monster will not be able to do any attacks in the future.\n\nThere is a restriction: in one round, you cannot kill two monsters that are directly connected by an edge.\n\nIf you choose what monsters to attack optimally, what is the smallest health decrement you can have after all rounds?\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). Description of the test cases follows.\n\nThe first line of each test case contains an integer $n$ ($1\\le n\\le 3\\cdot 10^5$).\n\nThe second line of each test case contains $n$ integers $a_1,\\ldots,a_n$ ($1\\le a_i\\le 10^{12}$).\n\nThe following $n-1$ lines each contain two integers $x,y$ ($1\\le x,y\\le n$), denoting an edge on the tree connecting vertex $x$ and $y$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $3\\cdot 10^5$.\n\n### Output\n\nFor each test case, print one integer: the minimum possible health decrement.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n1\n\n1000000000000\n\n5\n\n47 15 32 29 23\n\n1 2\n\n1 3\n\n2 4\n\n2 5\n\n7\n\n8 10 2 3 5 7 4\n\n1 2\n\n1 4\n\n3 2\n\n5 3\n\n6 2\n\n7 5\n\n```\n\n#### Output #1\n\n```\n1000000000000\n193\n57\n```\n\n### Note\n\nIn the first test case, an optimal sequence of operations would be:\n\n- In the first round: first, receive the attack from the monster on vertex $1$, so your health decreases by $10^{12}$. Then kill the monster on vertex $1$.\n- In the second round to the $10^{100}$-th round: all monsters have been killed, so nothing happens.\n\nThe total health decrement is $10^{12}$.\n\nIn the second test case, an optimal sequence of operations would be:\n\n- In the first round: first, receive the attack from the monster on vertex $1,2,3,4,5$, so your health decreases by $47+15+32+29+23=146$. Then kill the monsters on vertex $1,4,5$.\n- In the second round: first, receive the attack from the monster on vertex $2,3$, so your health decreases by $15+32=47$. Then kill the monsters on vertex $2,3$.\n- In the third round to the $10^{100}$-th round: all monsters have been killed, so nothing happens.\n\nThe total health decrement is $193$.\n\nIn the third test case, an optimal sequence of operations would be:\n\n- In the first round: first, receive the attack from the monster on vertex $1,2,3,4,5,6,7$, so your health decreases by $8+10+2+3+5+7+4=39$. Then kill the monsters on vertex $1,3,6,7$.\n- In the second round: first, receive the attack from the monster on vertex $2,4,5$, so your health decreases by $10+3+5=18$. Then kill the monsters on vertex $2,4,5$.\n- In the third round to the $10^{100}$-th round: all monsters have been killed, so nothing happens.\n\nThe total health decrement is $57$.", "cfid": "1988D"}
{"problem_id": "1988F", "problem_title": "F. Heartbeat", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1988/F", "problem_statement": "For an array $u_1, u_2, \\ldots, u_n$, define\n\n- a prefix maximum as an index $i$ such that $u_i>u_j$ for all $j<i$;\n- a suffix maximum as an index $i$ such that $u_i>u_j$ for all $j>i$;\n- an ascent as an index $i$ ($i>1$) such that $u_i>u_{i-1}$.\n\nYou are given three cost arrays: $[a_1, a_2, \\ldots, a_n]$, $[b_1, b_2, \\ldots, b_n]$, and $[c_0, c_1, \\ldots, c_{n-1}]$.\n\nDefine the cost of an array that has $x$ prefix maximums, $y$ suffix maximums, and $z$ ascents as $a_x\\cdot b_y\\cdot c_z$.\n\nLet the sum of costs of all permutations of $1,2,\\ldots,n$ be $f(n)$. Find $f(1)$, $f(2)$, ..., $f(n)$ modulo $998\\,244\\,353$.\n\n### Input\n\nThe first line contains an integer $n$ ($1\\le n\\le 700$).\n\nThe second line contains $n$ integers $a_1,\\ldots,a_n$ ($0\\le a_i<998\\,244\\,353$).\n\nThe third line contains $n$ integers $b_1,\\ldots,b_n$ ($0\\le b_i<998\\,244\\,353$).\n\nThe fourth line contains $n$ integers $c_0,\\ldots,c_{n-1}$ ($0\\le c_i<998\\,244\\,353$).\n\n### Output\n\nPrint $n$ integers: the $i$-th one is $f(i)$ modulo $998\\,244\\,353$.\n\n### Examples\n\n#### Input #1\n\n```\n\n3\n\n1 1 1\n\n1 1 1\n\n1 1 1\n\n```\n\n#### Output #1\n\n```\n1 2 6 ```\n\n#### Input #2\n\n```\n\n3\n\n1 2 3\n\n2 3 1\n\n3 1 2\n\n```\n\n#### Output #2\n\n```\n6 13 34 ```\n\n#### Input #3\n\n```\n\n5\n\n1 4 2 5 3\n\n2 5 1 3 4\n\n300000000 100000000 500000000 400000000 200000000\n\n```\n\n#### Output #3\n\n```\n600000000 303511294 612289529 324650937 947905622 ```\n\n### Note\n\nIn the second example:\n\n- Consider permutation $[1,2,3]$. Indices $1,2,3$ are prefix maximums. Index $3$ is the only suffix maximum. Indices $2,3$ are ascents. In conclusion, it has $3$ prefix maximums, $1$ suffix maximums, and $2$ ascents. Therefore, its cost is $a_3b_1c_2=12$.\n- Permutation $[1,3,2]$ has $2$ prefix maximums, $2$ suffix maximums, and $1$ ascent. Its cost is $6$.\n- Permutation $[2,1,3]$ has $2$ prefix maximums, $1$ suffix maximum, and $1$ ascent. Its cost is $4$.\n- Permutation $[2,3,1]$ has $2$ prefix maximums, $2$ suffix maximums, and $1$ ascent. Its cost is $6$.\n- Permutation $[3,1,2]$ has $1$ prefix maximum, $2$ suffix maximums, and $1$ ascent. Its cost is $3$.\n- Permutation $[3,2,1]$ has $1$ prefix maximum, $3$ suffix maximums, and $0$ ascents. Its cost is $3$.\n\nThe sum of all permutations' costs is $34$, so $f(3)=34$.", "cfid": "1988F"}
{"problem_id": "1992G", "problem_title": "G. Ultra-Meow", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1992/G", "problem_statement": "K1o0n gave you an array $a$ of length $n$, consisting of numbers $1, 2, \\ldots, n$. Accept it? Of course! But what to do with it? Of course, calculate $\\text{MEOW}(a)$.\n\nLet $\\text{MEX}(S, k)$ be the $k$-th positive (strictly greater than zero) integer in ascending order that is not present in the set $S$. Denote $\\text{MEOW}(a)$ as the sum of $\\text{MEX}(b, |b| + 1)$, over all distinct subsets $b$ of the array $a$.\n\nExamples of $\\text{MEX}(S, k)$ values for sets:\n\n- $\\text{MEX}(\\{3,2\\}, 1) = 1$, because $1$ is the first positive integer not present in the set;\n- $\\text{MEX}(\\{4,2,1\\}, 2) = 5$, because the first two positive integers not present in the set are $3$ and $5$;\n- $\\text{MEX}(\\{\\}, 4) = 4$, because there are no numbers in the empty set, so the first $4$ positive integers not present in it are $1, 2, 3, 4$.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nIn a single line of each test case, an integer $n$ ($1 \\le n \\le 5000$) is entered, the size of the array of gifted numbers.\n\nIt is guaranteed that the sum of $n^2$ over all test cases does not exceed $25 \\cdot 10^6$.\n\n### Output\n\nFor each test case, output a single number — $\\text{MEOW}(a)$. Since it may be very large, output it modulo $10^9 + 7$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n2\n\n3\n\n4999\n\n5\n\n1\n\n```\n\n#### Output #1\n\n```\n12\n31\n354226409\n184\n4\n```", "cfid": "1992G"}
{"problem_id": "1992F", "problem_title": "F. Valuable Cards", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1992/F", "problem_statement": "In his favorite cafe Kmes once again wanted to try the herring under a fur coat. Previously, it would not have been difficult for him to do this, but the cafe recently introduced a new purchasing policy.\n\nNow, in order to make a purchase, Kmes needs to solve the following problem: $n$ cards with prices for different positions are laid out in front of him, on the $i$-th card there is an integer $a_i$, among these prices there is no whole positive integer $x$.\n\nKmes is asked to divide these cards into the minimum number of bad segments (so that each card belongs to exactly one segment). A segment is considered bad if it is impossible to select a subset of cards with a product equal to $x$. All segments, in which Kmes will divide the cards, must be bad.\n\nFormally, the segment $(l, r)$ is bad if there are no indices $i_1 < i_2 < \\ldots < i_k$ such that $l \\le i_1, i_k \\le r$, and $a_{i_1} \\cdot a_{i_2} \\ldots \\cdot a_{i_k} = x$.\n\nHelp Kmes determine the minimum number of bad segments in order to enjoy his favorite dish.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^3$) — the number of test cases.\n\nThe first line of each set of input data gives you $2$ integers $n$ and $x$ ($1 \\le n \\le 10^5, 2 \\le x \\le 10^5$) — the number of cards and the integer, respectively.\n\nThe second line of each set of input data contains $n$ integers $a_i$ ($1 \\le a_i \\le 2 \\cdot 10^5, a_i \\neq x$) — the prices on the cards.\n\nIt is guaranteed that the sum of $n$ over all sets of test data does not exceed $10^5$.\n\n### Output\n\nFor each set of input data, output the minimum number of bad segments.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n6 4\n\n2 3 6 2 1 2\n\n9 100000\n\n50000 25000 12500 6250 3125 2 4 8 16\n\n5 2\n\n1 1 1 1 1\n\n8 6\n\n4 3 4 3 4 3 4 3\n\n7 12\n\n6 11 1 3 11 10 2\n\n10 5\n\n2 4 4 2 4 4 4 3 1 1\n\n7 8\n\n4 6 5 1 2 4 1\n\n8 27\n\n3 9 17 26 2 20 9 3\n\n```\n\n#### Output #1\n\n```\n3\n2\n1\n1\n2\n1\n3\n3\n```", "cfid": "1992F"}
{"problem_id": "1983E", "problem_title": "E. I Love Balls", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1983/E", "problem_statement": "Alice and Bob are playing a game. There are $n$ balls, out of which $k$ are special. Each ball has a value associated with it.\n\nThe players play turn by turn. In each turn, the player randomly picks a ball and adds the value of the ball to their score, which is $0$ at the beginning of the game. The selected ball is removed from the game. If the ball was special, the same player takes the next turn if at least one ball is remaining. If the ball picked was not special, the next player plays their turn.\n\nThey play this game until no balls are remaining in the game. Alice plays first.\n\nFind the expected score that both the players have at the end of the game modulo $10^9+7$.\n\nFormally, let $M = 10^9+7$. It can be shown that the answer can be expressed as an irreducible fraction $\\frac{p}{q}$, where $p$ and $q$ are integers and $q \\not \\equiv 0 \\pmod{M}$. Output the integer equal to $p \\cdot q^{-1} \\bmod M$. In other words, output such an integer $x$ that $0 \\le x < M$ and $x \\cdot q \\equiv p \\pmod{M}$.\n\n### Input\n\nThere are multiple test cases. The first line of the input contains an integer $t$, the number of test cases ($1 \\le t \\le 2 \\cdot 10^5$).\n\nEach test case description is on a new line. The first line of the test case contains two integers $n$ and $k$ in the respective order separated by a space ($1 \\le k \\le n \\le 4 \\cdot 10^5$).\n\nThe second line of the test case contains $n$ integers: $v_1, v_2, \\ldots, v_n$, the value for each ball separated by spaces. The first $k$ balls are special ($1 \\le v_i \\le 10^7$).\n\nThe sum of $n$ over all test cases does not exceed $5 \\cdot 10^5$.\n\n### Output\n\nOutput two integers per test case in a new line, the expected score of Alice and the expected score of Bob modulo $10^9+7$.\n\n### Examples\n\n#### Input #1\n\n```\n\n1\n\n5 2\n\n10 20 5 15 25\n\n```\n\n#### Output #1\n\n```\n45 30\n```\n\n#### Input #2\n\n```\n\n5\n\n1 1\n\n732507\n\n2 2\n\n5817860 5398510\n\n5 1\n\n2122894 4951549 2750585 7821535 3214167\n\n8 4\n\n1405323 5069867 6883092 6972029 328406 2478975 7628890 9973340\n\n4 2\n\n9662050 3566134 3996473 9872255\n\n```\n\n#### Output #2\n\n```\n732507 0\n11216370 0\n810642660 210218077\n722402997 318336932\n349086489 678010430\n```\n\n#### Input #3\n\n```\n\n5\n\n3 3\n\n1095611 8219204 7773462\n\n2 1\n\n8176490 2774103\n\n3 1\n\n9178636 5138057 3367761\n\n12 9\n\n7597698 6843019 2298534 1522386 4969588 1340345 3967362 9152890 6689668 9986080 4745473 7407325\n\n10 5\n\n6986368 2397882 5804127 6980694 3740836 3215836 5195724 3179261 4136769 4544231\n\n```\n\n#### Output #3\n\n```\n17088277 0\n6862348 4088245\n677038671 340645790\n36949997 29570371\n725118051 321063684\n```\n\n### Note\n\nIn the first test case, Alice's expected score is $45$, and Bob's is $30$ at the end of the game.", "cfid": "1983E"}
{"problem_id": "1983F", "problem_title": "F. array-value", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1983/F", "problem_statement": "You have an array of non-negative integers $a_1, a_2, \\ldots, a_n$.\n\nThe value of a sub-array of length $\\ge 2$, $a[l, r] = [a_l, a_{l+1}, \\ldots, a_r]$ is the minimum value of $a_i \\oplus a_j$ such that $l \\le i < j \\le r$, where $\\oplus$ is the xor (exclusive-or) operator.\n\nYou have to find the $k$-th smallest value over all sub-arrays of length $\\ge 2$.\n\n### Input\n\nThe first line of the input contains multiple test cases $t$ ($1 \\le t \\le 2 \\cdot 10^4$).\n\nThe first line of each test case contains integer numbers $n$ and $k$ ($2 \\le n \\le 10^5$, $1 \\le k \\le \\frac{n\\cdot(n-1)}{2}$).\n\nThe second line of the input contains $n$ non-negative integer numbers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le 10^9$) — the array itself.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nPrint the $k$-th smallest value obtained over all subarrays of length at least $2$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n5 2\n\n1 2 3 4 5\n\n2 1\n\n4 3\n\n4 6\n\n1 2 4 8\n\n5 9\n\n1 2 3 4 5\n\n```\n\n#### Output #1\n\n```\n1\n7\n12\n3\n```\n\n### Note\n\nIn the first testcase, we have subarrays with their smallest exclusive-or pair as:\n\n$[1,2]: 3$\n\n$[2,3]: 1$\n\n$[3,4]: 7$\n\n$[4,5]: 1$\n\n$[1,2,3]: 1$\n\n$[2,3,4]: 1$\n\n$[3,4,5]: 1$\n\n$[1,2,3,4]: 1$\n\n$[2,3,4,5]: 1$\n\n$[1,2,3,4,5]: 1$\n\nThe sorted order would be: $1, 1, 1, 1, 1, 1, 1, 1, 3, 7$. Therefore, the second smallest element would be $1$.", "cfid": "1983F"}
{"problem_id": "1983G", "problem_title": "G. Your Loss", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1983/G", "problem_statement": "You are given a tree with $n$ nodes numbered from $1$ to $n$, along with an array of size $n$. The value of $i$-th node is $a_{i}$. There are $q$ queries. In each query, you are given 2 nodes numbered as $x$ and $y$.\n\nConsider the path from the node numbered as $x$ to the node numbered as $y$. Let the path be represented by $x = p_0, p_1, p_2, \\ldots, p_r = y$, where $p_i$ are the intermediate nodes. Compute the sum of $a_{p_i}\\oplus i$ for each $i$ such that $0 \\le i \\le r$ where $\\oplus$ is the [XOR](https://en.wikipedia.org/wiki/Exclusive_or) operator.\n\nMore formally, compute \n\n$$\\sum_{i =0}^{r} a_{p_i}\\oplus i$$\n\nInput\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. Each test case contains several sets of input data.\n\nThe first line of each set of input data contains a single integer $n$ ($1 \\le n \\le 5 \\cdot 10^5$) — the number of nodes.\n\nThe next $n-1$ lines of each set of input data contain $2$ integers, $u$ and $v$ representing an edge between the node numbered $u$ and the node numbered $v$. It is guaranteed that $u \\ne v$ and that the edges form a tree.\n\nThe next line of each set of input data contains $n$ integers, $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 5 \\cdot 10^5$) — values of the nodes.\n\nThe next line contains a single integer $q$ ($1 \\le q \\le 10^5$) — the number of queries.\n\nThe next $q$ lines describe the queries. The $i$-th query contains $2$ integers $x$ and $y$ ($1 \\le x,y \\le n$) denoting the starting and the ending node of the path.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5 \\cdot 10^5$ and sum of $q$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each query, output a single number — the sum from the problem statement.\n\n### Example\n\n#### Input #1\n\n```\n\n1\n\n4\n\n1 2\n\n2 3\n\n3 4\n\n2 3 6 5\n\n3\n\n1 4\n\n3 4\n\n1 1\n\n```\n\n#### Output #1\n\n```\n14\n10\n2\n```", "cfid": "1983G"}
{"problem_id": "2053H", "problem_title": "H. Delicate Anti-monotonous Operations", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2053/H", "problem_statement": "I shall be looking for you who would be out of Existence.\n\n— HyuN, [Disorder](https://soundcloud.com/k-sounds-studio/g2r2018-hyun-disorder-feat-yuri)\n\nThere are always many repetitive tasks in life. Iris always dislikes them, so she refuses to repeat them. However, time cannot be turned back; we only have to move forward.\n\nFormally, Iris has an integer sequence $a_1, a_2, \\ldots, a_n$, where each number in the sequence is between $1$ and $w$, inclusive. It is guaranteed that $w \\geq 2$.\n\nIris defines an operation as selecting two numbers $a_i, a_{i+1}$ satisfying $a_i = a_{i+1}$, and then changing them to two arbitrary integers within the range $[1, w]$. Iris does not like equality, so she must guarantee that $a_i \\neq a_{i+1}$ after the operation. Two identical pairs $a_i, a_{i+1}$ can be selected multiple times.\n\nIris wants to know the maximum possible sum of all elements of $a$ after several (possible, zero) operations, as well as the minimum number of operations required to achieve this maximum value.\n\n### Input\n\nEach test contains multiple test cases. The first line contains an integer $t$ ($1 \\leq t \\leq 10^5$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $w$ ($1 \\leq n \\leq 2\\cdot 10^5$, $2 \\leq w \\leq 10^8$) — the length of the array, and the maximum allowed value of the elements.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq w$) — the elements in the array.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case, output two integers — the maximum possible sum of all elements of $a$ and the minimum number of operations required, respectively.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n5 8\n\n1 2 3 4 5\n\n7 5\n\n3 1 2 3 4 1 1\n\n```\n\n#### Output #1\n\n```\n15 0\n34 6\n```\n\n### Note\n\nIn the first test case, no operation can be performed so the answers are $\\sum a_i = 15$ and $0$, respectively.\n\nIn the second test case, the operations can be performed as follows:\n\n\n\n$$[3, 1, 2, 3, 4, \\underline{1, 1}] \\rightarrow [3, 1, 2, 3, \\underline{4, 4}, 5] \\rightarrow [3, 1, 2, \\underline{3, 3}, 5, 5] \\rightarrow [3, 1, \\underline{2, 2}, 5, 5, 5] \\rightarrow [3, \\underline{1, 1}, 5, 5, 5, 5] \\rightarrow [\\underline{3, 3}, 5, 5, 5, 5, 5] \\rightarrow [4, 5, 5, 5, 5, 5, 5]$$\n\nIt can be shown this is optimal, so we should output $\\sum a_i = 34$ and the number of operations, $6$, respectively.", "cfid": "2053H"}
{"problem_id": "2053I2", "problem_title": "I2. Affectionate Arrays (Hard Version)", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2053/I2", "problem_statement": "Note that this statement is different to the version used in the official round. The statement has been corrected to a solvable version. In the official round, all submissions to this problem have been removed.\n\nThis is the hard version of the problem. The difference between the versions is that in this version, you need to compute the sum of value of different arrays. You can hack only if you solved all versions of this problem.\n\nIris treasures an integer array $a_1, a_2, \\ldots, a_n$. She knows this array has an interesting property: the maximum absolute value of all elements is less than or equal to the sum of all elements, that is, $\\max(\\lvert a_i\\rvert) \\leq \\sum a_i$.\n\nIris defines the boredom of an array as its maximum subarray$^{\\text{∗}}$ sum.\n\nIris's birthday is coming, and Victor is going to send her another array $b_1, b_2, \\ldots, b_m$ as a gift. For some seemingly obvious reasons, he decides the array $b_1, b_2, \\ldots, b_m$ should have the following properties.\n\n- $a_1, a_2, \\ldots, a_n$ should be a subsequence$^{\\text{†}}$ of $b_1, b_2, \\ldots, b_m$.\n- The two arrays have the same sum. That is, $\\sum\\limits_{i=1}^n a_i = \\sum\\limits_{i=1}^m b_i$.\n- The boredom of $b_1, b_2, \\ldots, b_m$ is the smallest possible.\n- Among the arrays with the smallest boredom, the length of the array $b$ (i.e., $m$) is the smallest possible. And in this case, Iris will understand his regard as soon as possible!\n\nFor a possible array $b_1, b_2, \\ldots, b_m$ satisfying all the conditions above, Victor defines the value of the array as the number of occurrences of array $a$ as subsequences in array $b$. That is, he counts the number of array $c_1, c_2, \\ldots, c_{n}$ that $1\\le c_1< c_2< \\ldots< c_n\\le m$ and for all integer $i$ that $1\\le i\\le n$, $b_{c_{i}}=a_i$ is satisfied, and let this be the value of array $b$.\n\nEven constrained as above, there are still too many possible gifts. So Victor asks you to calculate the sum of value of all possible arrays $b_1, b_2, \\ldots, b_m$. Since the answer may be large, Victor only needs the number modulo $998\\,244\\,353$. He promises you: if you help him successfully, he will share a bit of Iris's birthday cake with you.\n\n$^{\\text{∗}}$An array $c$ is a subarray of an array $d$ if $c$ can be obtained from $d$ by the deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\n$^{\\text{†}}$A sequence $c$ is a subsequence of a sequence $d$ if $c$ can be obtained from $d$ by the deletion of several (possibly, zero or all) element from arbitrary positions.\n\n### Input\n\nEach test contains multiple test cases. The first line of input contains an integer $t$ ($1 \\leq t \\leq 10^5$) — the number of test cases. The description of test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\leq n \\leq 3\\cdot 10^6$) — the length of the array $a_1, a_2, \\ldots, a_n$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($-10^9 \\leq a_i \\leq 10^9$) — the initial array. It is guaranteed that $\\max(\\lvert a_i\\rvert) \\leq \\sum a_i$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $3\\cdot 10^6$.\n\n### Output\n\nFor each test case, output a single line containing an integer: the sum of values of valid arrays $b_1, b_2, \\ldots, b_m$, modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n4\n\n1 2 3 4\n\n4\n\n2 -3 2 2\n\n4\n\n1 -2 2 1\n\n10\n\n2 -7 6 3 -1 4 2 -5 8 -4\n\n20\n\n4 -2 4 3 -2 1 5 2 3 6 -5 -1 -4 -2 -3 5 -3 1 -4 1\n\n```\n\n#### Output #1\n\n```\n1\n2\n2\n20\n1472\n```\n\n### Note\n\nIn the first test case, $a=[1, 2, 3, 4]$. The only possible array $b$ is $[1, 2, 3, 4]$, and its value is $1$.\n\nIn the second test case, $a=[2, -3, 2, 2]$. The possible arrays $b$ are $[1, 2, -3, 2, -1, 2]$ and $[2, 1, -3, 2, -1, 2]$. Both arrays have value $1$.\n\nIn the third test case, $a=[1, -2, 2, 1]$. The only possible array $b$ is $[1, 1, -2, 2, -1, 1]$. It has value $2$, because we can find arrays $c=[1,3,4,6]$ or $[2,3,4,6]$. That is, the array $a$ occurs twice in $b$, so the answer is $2$.", "cfid": "2053I2"}
{"problem_id": "2053G", "problem_title": "G. Naive String Splits", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2053/G", "problem_statement": "And I will: love the world that you've adored; wish the smile that you've longed for. Your hand in mine as we explore, please take me to tomorrow's shore.\n\n— Faye Wong, [As Wished](https://www.youtube.com/watch?v=ZoJCN0pV7Qs)\n\nCocoly has a string $t$ of length $m$, consisting of lowercase English letters, and he would like to split it into parts. He calls a pair of strings $(x, y)$ beautiful if and only if there exists a sequence of strings $a_1, a_2, \\ldots, a_k$, such that:\n\n- $t = a_1 + a_2 + \\ldots + a_k$, where $+$ denotes string concatenation.\n- For each $1 \\leq i \\leq k$, at least one of the following holds: $a_i = x$, or $a_i = y$.\n\nCocoly has another string $s$ of length $n$, consisting of lowercase English letters. Now, for each $1 \\leq i < n$, Cocoly wants you to determine whether the pair of strings $(s_1s_2 \\ldots s_i, \\, s_{i+1}s_{i+2} \\ldots s_n)$ is beautiful.\n\nNote: since the input and output are large, you may need to optimize them for this problem.\n\nFor example, in C++, it is enough to use the following lines at the start of the main() function:\n\n```\n`int main() {<br/>    std::ios::sync_with_stdio(false);<br/>    std::cin.tie(nullptr); std::cout.tie(nullptr);<br/>}<br/>````\n\n### Input\n\nEach test contains multiple test cases. The first line contains an integer $T$ ($1 \\leq T \\leq 10^5$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($2 \\leq n \\leq m \\leq 5 \\cdot 10^6$) — the lengths of $s$ and the length of $t$.\n\nThe second line of each test case contains a single string $s$ of length $n$, consisting only of lowercase English letters.\n\nThe third line of each test case contains a single string $t$ of length $m$, consisting only of lowercase English letters.\n\nIt is guaranteed that the sum of $m$ over all test cases does not exceed $10^7$.\n\n### Output\n\nFor each test case, output a single binary string $r$ of length $n - 1$: for each $1 \\leq i < n$, if the $i$-th pair is beautiful, $r_i=\\texttt{1}$; otherwise, $r_i=\\texttt{0}$. Do not output spaces.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n3 5\n\naba\n\nababa\n\n4 10\n\nczzz\n\nczzzzzczzz\n\n5 14\n\ndream\n\ndredreamamamam\n\n5 18\n\ntcccc\n\ntcctccccctccctcccc\n\n7 11\n\nabababc\n\nabababababc\n\n7 26\n\naaaaaaa\n\naaaaaaaaaaaaaaaaaaaaaaaaaa\n\n19 29\n\nbbbbbbbbbbbbbbbbbbb\n\nbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n\n```\n\n#### Output #1\n\n```\n11\n011\n0010\n0000\n010100\n111111\n110010001100010011\n```\n\n### Note\n\nIn the first test case, $s = \\tt aba$, $t = \\tt ababa$.\n\n- For $i = 1$: Cocoly can split $t = \\texttt{a} + \\texttt{ba} + \\texttt{ba}$, so the string pair $(\\texttt{a}, \\texttt{ba})$ is beautiful.\n- For $i = 2$: Cocoly can split $t = \\texttt{ab} + \\texttt{ab} + \\texttt{a}$, so the string pair $(\\texttt{ab}, \\texttt{a})$ is beautiful.\n\nIn the second test case, $s = \\tt czzz$, $t = \\tt czzzzzczzz$.\n\n- For $i = 1$: It can be proven that there is no solution to give a partition of $t$ using strings $\\texttt{c}$ and $\\texttt{zzz}$.\n- For $i = 2$: Cocoly can split $t$ into $\\texttt{cz} + \\texttt{zz} + \\texttt{zz} + \\texttt{cz} + \\texttt{zz}$.\n- For $i = 3$: Cocoly can split $t$ into $\\texttt{czz} + \\texttt{z} + \\texttt{z} + \\texttt{z} + \\texttt{czz} + \\texttt{z}$.", "cfid": "2053G"}
{"problem_id": "2048H", "problem_title": "H. Kevin and Strange Operation", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2048/H", "problem_statement": "Kevin is exploring problems related to binary strings in Chinatown. When he was at a loss, a stranger approached him and introduced a peculiar operation:\n\n- Suppose the current binary string is $ t $, with a length of $ \\vert t \\vert $. Choose an integer $ 1 \\leq p \\leq \\vert t \\vert $. For all $ 1 \\leq i < p $, simultaneously perform the operation $ t_i = \\max(t_i, t_{i+1}) $, and then delete $ t_p $.\n\nFor example, suppose the current binary string is 01001, and you choose $ p = 4 $. Perform $ t_i = \\max(t_i, t_{i+1}) $ for $t_1$, $t_2$, and $ t_3 $, transforming the string into 11001, then delete $ t_4 $, resulting in 1101.\n\nKevin finds this strange operation quite interesting. Thus, he wants to ask you: Given a binary string $ s $, how many distinct non-empty binary strings can you obtain through any number of operations (possibly zero)?\n\nSince the answer may be very large, you only need to output the result modulo $998\\,244\\,353$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains a single integer $t$ ($1\\le t \\le 10^4$) — the number of test cases.\n\nFor each test case, the only line contains a binary string $ s $ ($ 1 \\le \\lvert s \\rvert \\le 10^6 $).\n\nIt is guaranteed that the sum of $\\lvert s \\rvert$ over all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case, print a single integer in the only line of the output — the number of distinct non-empty binary strings you can obtain, modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n11001\n\n000110111001100\n\n```\n\n#### Output #1\n\n```\n9\n73\n```\n\n### Note\n\nIn the first test case, all the binary strings you can obtain are: 11001, 1001, 1101, 001, 101, 111, 01, 11, and 1. There are $ 9 $ in total.", "cfid": "2048H"}
{"problem_id": "2048I1", "problem_title": "I1. Kevin and Puzzle (Easy Version)", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2048/I1", "problem_statement": "This is the easy version of the problem. The difference between the versions is that in this version, you need to find any one good array. You can hack only if you solved all versions of this problem.\n\nKevin is visiting the Red Church, and he found a puzzle on the wall.\n\nFor an array $ a $, let $ c(l,r) $ indicate how many distinct numbers are among $ a_l, a_{l+1}, \\ldots, a_r $. In particular, if $ l > r $, define $ c(l,r) = 0 $.\n\nYou are given a string $ s $ of length $ n $ consisting of letters $ \\texttt{L} $ and $ \\texttt{R} $ only. Let a non-negative array $ a $ be called good, if the following conditions hold for $ 1 \\leq i \\leq n $:\n\n- if $s_i=\\verb!L!$, then $c(1,i-1)=a_i$;\n- if $s_i=\\verb!R!$, then $c(i+1,n)=a_i$.\n\nIf there is a good array $a$, print any of the good arrays. Otherwise, report that no such arrays exists.\n\n### Input\n\nEach test contains multiple test cases. The first line contains a single integer $t$ ($1\\le t \\le 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2\\leq n\\leq 2\\cdot 10^5$) — the length of string $s$.\n\nThe second line of each test case contains a string $s$ with a length $n$, containing only English uppercase letters $\\verb!L!$ and $\\verb!R!$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, if a good array exists, print $n$ non-negative integers: a good array $a$. Otherwise, print a single integer $-1$.\n\nIf there are multiple arrays $a$ satisfying the conditions, you can output any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3\n\nLLR\n\n3\n\nRRL\n\n4\n\nRRLR\n\n5\n\nLLRLR\n\n```\n\n#### Output #1\n\n```\n0 1 0\n2 1 2\n-1\n0 1 2 3 0```\n\n### Note\n\nIn the first test case, the array $[0,1,0]$ satisfies the conditions because:\n\n- When $i=1$, $s_i=\\verb!L!$, and $c(1,0)=0$;\n- When $i=2$, $s_i=\\verb!L!$, and $c(1,1)=1$, since there is only one distinct number in $a_1$;\n- When $i=3$, $s_i=\\verb!R!$, and $c(4,3)=0$.\n\nIn the second test case, another suitable answer is $[1,1,1]$.\n\nIn the third test case, it can be proven that there's no array satisfying the conditions.", "cfid": "2048I1"}
{"problem_id": "2048I2", "problem_title": "I2. Kevin and Puzzle (Hard Version)", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2048/I2", "problem_statement": "This is the hard version of the problem. The difference between the versions is that in this version, you need to count the number of good arrays. You can hack only if you solved all versions of this problem.\n\nKevin is visiting the Red Church, and he found a puzzle on the wall.\n\nFor an array $ a $, let $ c(l,r) $ indicate how many distinct numbers are among $ a_l, a_{l+1}, \\ldots, a_r $. In particular, if $ l > r $, define $ c(l,r) = 0 $.\n\nYou are given a string $ s $ of length $ n $ consisting of letters $ \\texttt{L} $ and $ \\texttt{R} $ only. Let a non-negative array $ a $ be called good, if the following conditions hold for $ 1 \\leq i \\leq n $:\n\n- if $s_i=\\verb!L!$, then $c(1,i-1)=a_i$;\n- if $s_i=\\verb!R!$, then $c(i+1,n)=a_i$.\n\nYou need to count the number of good arrays $a$. Since the answer may be large, you only need to output the answer modulo $998\\,244\\,353$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains a single integer $t$ ($1\\le t \\le 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2\\leq n\\leq 2\\cdot 10^5$) — the length of string $s$.\n\nThe second line of each test case contains a string $s$ with a length $n$, containing only English uppercase letters $\\verb!L!$ and $\\verb!R!$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, output the number of good arrays modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3\n\nLLR\n\n3\n\nRRL\n\n4\n\nRRLR\n\n5\n\nLLRLR\n\n```\n\n#### Output #1\n\n```\n1\n2\n0\n1\n```\n\n### Note\n\nAll arrays satisfying the conditions can be found in the easy version of this problem.", "cfid": "2048I2"}
{"problem_id": "2046D", "problem_title": "D. For the Emperor!", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2046/D", "problem_statement": "In Ancient Rome, a plan to defeat the barbarians was developed, but for its implementation, each city must be informed about it.\n\nThe northern part of the Roman Empire consists of $n$ cities connected by $m$ one-way roads. Initially, the $i$-th city has $a_i$ messengers, and each messenger can freely move between cities following the existing roads. A messenger can carry a copy of the plan with him and inform the cities he visits, and can make unlimited copies for other messengers in the city he is currently in.\n\nAt the start, you will produce some number of plans and deliver them to messengers of your choice. Your goal is to make sure that every city is visited by a messenger with a plan. Find the smallest number of the plans you need to produce originally, so that the messengers will deliver them to every city, or determine that it is impossible to do so at all.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 100$). The description of the test cases follows.\n\nThe first line contains two integers $n$ and $m$ ($2 \\le n \\le 200$, $1 \\le m \\le 800$) — the number of cities and roads.\n\nThe second line contains $n$ non-negative integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_{i} \\le n$) — the initial number of messengers in each city.\n\nEach of the following $m$ lines contains two integers $u$ and $v$ ($1 \\le u,v \\le n, u \\ne v$), indicating that there is a one-way road from city $u$ to city $v$. The roads may repeat.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $200$. It is guaranteed that the sum of $m$ over all test cases does not exceed $800$.\n\n### Output\n\nOutput a single line containing a single integer — the smallest number of messengers you need to give a copy of the plan in the beginning, or $-1$ if it is not possible to inform all cities.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n7 6\n\n2 1 0 1 2 3 4\n\n1 2\n\n1 3\n\n2 4\n\n2 5\n\n3 6\n\n3 7\n\n4 4\n\n1 1 1 1\n\n1 2\n\n1 3\n\n2 4\n\n3 4\n\n```\n\n#### Output #1\n\n```\n2\n2\n```", "cfid": "2046D"}
{"problem_id": "2046E2", "problem_title": "E2. Cheops and a Contest (Hard Version)", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2046/E2", "problem_statement": "This is the hard version of the problem. The difference between the versions is that in this version, $m$ is arbitrary. You can hack only if you solved all versions of this problem.\n\nThere is a problem-solving competition in Ancient Egypt with $n$ participants, numbered from $1$ to $n$. Each participant comes from a certain city; the cities are numbered from $1$ to $m$. There is at least one participant from each city.\n\nThe $i$-th participant has strength $a_i$, specialization $s_i$, and wisdom $b_i$, so that $b_i \\ge a_i$. Each problem in the competition will have a difficulty $d$ and a unique topic $t$. The $i$-th participant will solve the problem if\n\n- $a_i \\ge d$, i.e., their strength is not less than the problem's difficulty, or\n- $s_i = t$, and $b_i \\ge d$, i.e., their specialization matches the problem's topic, and their wisdom is not less than the problem's difficulty.\n\nCheops wants to choose the problems in such a way that each participant from city $i$ will solve strictly more problems than each participant from city $j$, for all $i < j$.\n\nPlease find a set of at most $5n$ problems, where the topics of all problems are distinct, so that Cheops' will is satisfied, or state that it is impossible.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $T$ ($1 \\le T \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$, $m$ ($2 \\le m \\le n \\le 3 \\cdot {10}^5$) — the number of participants and the number of cities.\n\nThe following $n$ lines describe the participants. The $i$-th line contains three integers —$a_i$, $b_i$, $s_i$ ($0 \\le a_i, b_i, s_i \\le {10}^9$, $a_i \\le b_i$) — strength, wisdom, and specialization of the $i$-th participant, respectively.\n\nThe next $m$ lines describe the cities. In the $i$-th line, the first number is an integer $k_i$ ($1 \\le k_i \\le n$) — the number of participants from the $i$-th city. It is followed by $k_i$ integers $q_{i, 1}, q_{i, 2}, \\ldots, q_{i, k_i}$ — ($1 \\le q_{i, j} \\le n$, $1 \\le j \\le k_i$) — the indices of the participants from this city. It is guaranteed that each participant is mentioned exactly once.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $3 \\cdot 10^5$.\n\n### Output\n\nFor each test case, if there exists a set of problems that satisfies Cheops' conditions, then in the first line output a single integer $p$ ($1 \\le p \\le 5n$) — the number of problems in your solution.\n\nThen output $p$ lines, each containing two integers $d$ and $t$ ($0 \\le d, t \\le {10}^9$) — the difficulty and topic of the respective problem. The topics must be distinct.\n\nIf there is no set of problems that meets Cheops' wishes, print $-1$ instead.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n5 2\n\n5 7 1\n\n6 7 2\n\n3 9 2\n\n5 10 3\n\n4 4 1\n\n2 1 2\n\n3 3 4 5\n\n2 2\n\n1 2 1\n\n1 2 1\n\n1 2\n\n1 1\n\n```\n\n#### Output #1\n\n```\n7\n6 4\n6 5\n5 6\n5 7\n4 8\n4 9\n7 1\n-1\n```", "cfid": "2046E2"}
{"problem_id": "2046F2", "problem_title": "F2. Yandex Cuneiform (Hard Version)", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2046/F2", "problem_statement": "This is the hard version of the problem. The difference between the versions is that in this version, there is no restriction on the number of question marks. You can hack only if you solved all versions of this problem.\n\nFor a long time, no one could decipher Sumerian cuneiform. However, it has finally succumbed to pressure! Today, you have the chance to decipher Yandex cuneiform.\n\nYandex cuneiform is defined by the following rules:\n\n1. An empty string is a Yandex cuneiform.\n2. If you insert exactly one copy of each of the three letters 'Y', 'D', and 'X' into a Yandex cuneiform in such a way that no two adjacent letters become equal after the operation, you obtain a Yandex cuneiform.\n3. If a string can't be obtained using the above rules, it is not a Yandex cuneiform.\n\nYou are given a template. A template is a string consisting of the characters 'Y', 'D', 'X', and '?'.\n\nYou need to check whether there exists a way to replace each question mark with 'Y', 'D', or 'X' to obtain a Yandex cuneiform, and if it exists, output any of the matching options, as well as a sequence of insertion operations to obtain the resulting cuneiform.\n\nIn this version of the problem, the number of question marks in the template can be arbitrary.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 5 \\cdot 10^4$). The description of the test cases follows.\n\nEach test case consists of a single line containing a template of length $n$ ($3 \\leq n < 2 \\cdot 10^5$, $n \\bmod 3 = 0$), consisting only of characters 'Y', 'D', 'X', and '?'.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single line containing 'NO' if it is not possible to obtain a cuneiform from the given template.\n\nOtherwise, output 'YES' on the first line, and on the second line, any obtainable cuneiform. After that, you need to output the sequence of operations that leads to the cuneiform you printed.\n\nA sequence of operations is described by $\\frac{n}{3}$ triples of pairs. A pair has the form c p, where $c$ is one of the letters 'Y', 'D', or 'X', and $p$ is the position at which the letter $c$ should be inserted. The insertion position is the number of letters to skip from the beginning of the string for the insertion. For example, after inserting the character 'D' into the string \"YDX\" with $p=3$, the result is \"YDXD\", and with $p=0$, it is \"DYDX\". Note that the index cannot exceed the current length of the string.\n\nThe operations are applied from top to bottom, left to right. After inserting each triple to the string, there should be no two adjacent identical characters.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n???\n\nY??D?X\n\n???\n\nD??DXYXYX\n\n```\n\n#### Output #1\n\n```\nYES\nYDX\nX 0 D 0 Y 0\nYES\nYDXDYX\nX 0 Y 0 D 1\nX 2 D 3 Y 4\nYES\nYDX\nY 0 D 1 X 2\nNO\n```\n\n### Note\n\nIn the second example, the string is transformed like this: $\"\" \\to \\mathtt{YDX} \\to \\mathtt{YDXDYX}$.", "cfid": "2046F2"}
{"problem_id": "2046F1", "problem_title": "F1. Yandex Cuneiform (Easy Version)", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2046/F1", "problem_statement": "This is the easy version of the problem. The difference between the versions is that in this version, there are no question marks. You can hack only if you solved all versions of this problem.\n\nFor a long time, no one could decipher Sumerian cuneiform. However, it has finally succumbed to pressure! Today, you have the chance to decipher Yandex cuneiform.\n\nYandex cuneiform is defined by the following rules:\n\n1. An empty string is a Yandex cuneiform.\n2. If you insert exactly one copy of each of the three letters 'Y', 'D', and 'X' into a Yandex cuneiform in such a way that no two adjacent letters become equal after the operation, you obtain a Yandex cuneiform.\n3. If a string can't be obtained using the above rules, it is not a Yandex cuneiform.\n\nYou are given a template. A template is a string consisting of the characters 'Y', 'D', 'X', and '?'.\n\nYou need to check whether there exists a way to replace each question mark with 'Y', 'D', or 'X' to obtain a Yandex cuneiform, and if it exists, output any of the matching options, as well as a sequence of insertion operations to obtain the resulting cuneiform.\n\nIn this version of the problem, there are no question marks in the template.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 5 \\cdot 10^4$). The description of the test cases follows.\n\nEach test case consists of a single line containing a template of length $n$ ($3 \\leq n < 2 \\cdot 10^5$, $n \\bmod 3 = 0$), consisting only of characters 'Y', 'D', 'X'.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single line containing 'NO' if it is not possible to obtain a cuneiform from the given template.\n\nOtherwise, output 'YES' on the first line, and on the second line, any obtainable cuneiform. After that, you need to output the sequence of operations that leads to the cuneiform you printed.\n\nA sequence of operations is described by $\\frac{n}{3}$ triples of pairs. A pair has the form c p, where $c$ is one of the letters 'Y', 'D', or 'X', and $p$ is the position at which the letter $c$ should be inserted. The insertion position is the number of letters to skip from the beginning of the string for the insertion. For example, after inserting the character 'D' into the string \"YDX\" with $p=3$, the result is \"YDXD\", and with $p=0$, it is \"DYDX\". Note that the index cannot exceed the current length of the string.\n\nThe operations are applied from top to bottom, left to right. After inserting each triple to the string, there should be no two adjacent identical characters.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\nYDX\n\nYDXDYX\n\nYDX\n\nDYYDXYXYX\n\n```\n\n#### Output #1\n\n```\nYES\nYDX\nX 0 D 0 Y 0\nYES\nYDXDYX\nX 0 Y 0 D 1\nX 2 D 3 Y 4\nYES\nYDX\nY 0 D 1 X 2\nNO```\n\n### Note\n\nIn the second example, the string is transformed like this: $\"\" \\to \\mathtt{YDX} \\to \\mathtt{YDXDYX}$.", "cfid": "2046F1"}
{"problem_id": "2034H", "problem_title": "H. Rayan vs. Rayaneh", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2034/H", "problem_statement": "Rayan makes his final efforts to win Reyhaneh's heart by claiming he is stronger than Rayaneh (i.e., computer in Persian). To test this, Reyhaneh asks [Khwarizmi](https://en.wikipedia.org/wiki/Al-Khwarizmi) for help. Khwarizmi explains that a set is integer linearly independent if no element in the set can be written as an integer linear combination of the others. Rayan is given a set of integers each time and must identify one of the largest possible integer linearly independent subsets.\n\nNote that a single element is always considered an integer linearly independent subset.\n\nAn integer linearly combination of $a_1, \\ldots, a_k$ is any sum of the form $c_1 \\cdot a_1 + c_2 \\cdot a_2 + \\ldots + c_k \\cdot a_k$ where $c_1, c_2, \\ldots, c_k$ are integers (which may be zero, positive, or negative).\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 100$), the number of test cases.\n\nThe first line of each test case contains an integer $n$ ($1 \\leq n \\leq 10^5$), the size of the set. The second line contains $n$ distinct integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^5$).\n\nThe sum of $n$ over all test cases does not exceed $3 \\cdot 10^6$.\n\n### Output\n\nIn the first line of each test case print the size of the largest integer linearly independent subset.\n\nIn the next line, print one such subset in any order. If there are multiple valid subsets, print any one of them.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n5\n\n2 4 6 8 10\n\n5\n\n12 15 21 30 35\n\n3\n\n2 3 6\n\n```\n\n#### Output #1\n\n```\n2\n4 6\n3\n35 21 30\n2\n2 3\n```\n\n### Note\n\nIn example 1, $\\{4, 6\\}$ is an integer linearly independent subset. It can be proven that there is no integer linearly independent subset with at least $3$ elements.\n\nIn example 2, $\\{35, 21, 30\\}$ is an integer linearly independent subset because no integer linear combination of any two elements can create the third. There is no integer linearly independent subset with at least $4$ elements.\n\nIn example 3, $\\{2, 3, 6\\}$ is not an integer linearly independent subset since $6$ can be written as $6 \\cdot 2 + (-2) \\cdot 3$, which is an integer linear combination of $\\{2, 3\\}$.", "cfid": "2034H"}
{"problem_id": "2034G1", "problem_title": "G1. Simurgh's Watch (Easy Version)", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2034/G1", "problem_statement": "The only difference between the two versions of the problem is whether overlaps are considered at all points or only at integer points.\n\nThe legendary [Simurgh](https://www.eavartravel.com/blog/2023/11/3/140727/simurgh/), a mythical bird, is responsible for keeping watch over vast lands, and for this purpose, she has enlisted $n$ vigilant warriors. Each warrior is alert during a specific time segment $[l_i, r_i]$, where $l_i$ is the start time (included) and $r_i$ is the end time (included), both positive integers.\n\n![](https://espresso.codeforces.com/e448e919c3f03a9c212cd45c8dcd8e2bb0be579c.webp)\n\nOne of Simurgh's trusted advisors, [Zal](https://asia-archive.si.edu/learn/shahnama/zal-and-the-simurgh/), is concerned that if multiple warriors are stationed at the same time and all wear the same color, the distinction between them might be lost, causing confusion in the watch. To prevent this, whenever multiple warriors are on guard at the same moment (which can be non-integer), there must be at least one color which is worn by exactly one warrior.\n\nSo the task is to determine the minimum number of colors required and assign a color $c_i$ to each warrior's segment $[l_i, r_i]$ such that, for every (real) time $t$ contained in at least one segment, there exists one color which belongs to exactly one segment containing $t$.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nFor each test case:\n\n- The first line contains an integer $n$ ($1 \\leq n \\leq 2 \\cdot 10^5$) — the number of warriors stationed by Simurgh.\n- The next $n$ lines each contain two integers $l_i$ and $r_i$ ($1 \\leq l_i \\leq r_i \\leq 10^9$) — the start and end times of the warrior's watch segment.\n\nThe sum of $n$ across all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case:\n\n- Output the minimum number of colors $k$ needed.\n- Then, output a line of $n$ integers $c_i$ ($1 \\leq c_i \\leq k$), where each $c_i$ is the color assigned to the $i$-th warrior.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n2\n\n1 2\n\n3 4\n\n2\n\n1 2\n\n2 3\n\n3\n\n1 4\n\n2 5\n\n3 6\n\n5\n\n1 4\n\n2 8\n\n3 7\n\n5 10\n\n6 9\n\n5\n\n1 5\n\n2 6\n\n3 7\n\n4 7\n\n6 7\n\n```\n\n#### Output #1\n\n```\n1\n1 1\n2\n1 2\n2\n1 2 1\n3\n2 3 1 2 1\n3\n2 1 3 1 1\n```\n\n### Note\n\nWe can represent each warrior's watch segment as an interval on the X-axis;\n\nIn test case 1, we have two independent intervals, which can be colored with the same color.\n\nIn test case 2, point 2 is common to two intervals, meaning we cannot color them with the same color.\n\nIn test case 3, the intervals can be colored as shown below (intervals are colored with the selected color; areas are colored if this color occurs exactly once at this point in time):\n\n![](https://espresso.codeforces.com/1eeed6dfbcfe689a12402fd0576537c6eb264ba6.png)\n\nIn test case 4, the intervals can be colored as shown below:\n\n![](https://espresso.codeforces.com/02b07d5906fa80a7ce5d78b298d588ee74fd7901.png)\n\nIn test case 5, the intervals can be colored as shown below. The image on the right demonstrates an example of incorrect coloring for this test case; there is no unique color at the moment $5.5$:\n\n![](https://espresso.codeforces.com/21eeb6213de774e9bd333f733bb2c5f3f256e35c.png)", "cfid": "2034G1"}
{"problem_id": "2034G2", "problem_title": "G2. Simurgh's Watch (Hard Version)", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2034/G2", "problem_statement": "The only difference between the two versions of the problem is whether overlaps are considered at all points or only at integer points.\n\nThe legendary [Simurgh](https://www.eavartravel.com/blog/2023/11/3/140727/simurgh/), a mythical bird, is responsible for keeping watch over vast lands, and for this purpose, she has enlisted $n$ vigilant warriors. Each warrior is alert during a specific time segment $[l_i, r_i]$, where $l_i$ is the start time (included) and $r_i$ is the end time (included), both positive integers.\n\n![](https://espresso.codeforces.com/e448e919c3f03a9c212cd45c8dcd8e2bb0be579c.webp)\n\nOne of Simurgh's trusted advisors, [Zal](https://asia-archive.si.edu/learn/shahnama/zal-and-the-simurgh/), is concerned that if multiple warriors are stationed at the same time and all wear the same color, the distinction between them might be lost, causing confusion in the watch. To prevent this, whenever multiple warriors are on guard at the same integer moment, there must be at least one color which is worn by exactly one warrior.\n\nSo the task is to determine the minimum number of colors required and assign a color $c_i$ to each warrior's segment $[l_i, r_i]$ such that, for every (integer) time $t$ contained in at least one segment, there exists one color which belongs to exactly one segment containing $t$.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nFor each test case:\n\n- The first line contains an integer $n$ ($1 \\leq n \\leq 2 \\cdot 10^5$) — the number of warriors stationed by Simurgh.\n- The next $n$ lines each contain two integers $l_i$ and $r_i$ ($1 \\leq l_i \\leq r_i \\leq 10^9$) — the start and end times of the warrior's watch segment.\n\nThe sum of $n$ across all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case:\n\n- Output the minimum number of colors $k$ needed.\n- Then, output a line of $n$ integers $c_i$ ($1 \\leq c_i \\leq k$), where each $c_i$ is the color assigned to the $i$-th warrior.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n5\n\n1 4\n\n2 8\n\n3 7\n\n5 10\n\n6 9\n\n5\n\n1 5\n\n2 6\n\n3 7\n\n4 7\n\n6 7\n\n5\n\n4 9\n\n8 17\n\n2 15\n\n12 19\n\n6 13\n\n```\n\n#### Output #1\n\n```\n2\n1 2 2 1 2\n2\n1 2 2 2 1\n3\n1 1 2 3 1\n```\n\n### Note\n\nWe can represent each warrior's watch segment as an interval on the X-axis;\n\nIn test case 1, the intervals can be colored as shown below (intervals are colored with the selected color; areas are colored if this color occurs exactly once at this point in time):\n\n![](https://espresso.codeforces.com/80b63ec750df7a5ab4b27f062adbfc97cf959e1f.png)\n\nIn test case 2, the intervals can be colored as shown below:\n\n![](https://espresso.codeforces.com/95b4a26427875e70e36b805f77a4b0b38af8c984.png)\n\nIn test case 3, the intervals can be colored as shown below:\n\n![](https://espresso.codeforces.com/6699aab3b108808e3576916130d839f91a86c1f7.png)", "cfid": "2034G2"}
{"problem_id": "2039G", "problem_title": "G. Shohag Loves Pebae", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2039/G", "problem_statement": "Shohag has a tree with $n$ nodes.\n\nPebae has an integer $m$. She wants to assign each node a value — an integer from $1$ to $m$. So she asks Shohag to count the number, modulo $998\\,244\\,353$, of assignments such that following conditions are satisfied:\n\n- For each pair $1 \\le u \\lt v \\le n$, the [least common multiple (LCM)](https://en.wikipedia.org/wiki/Least_common_multiple) of the values of the nodes in the unique simple path from $u$ to $v$ is not divisible by the number of nodes in the path.\n- The [greatest common divisor (GCD)](https://en.wikipedia.org/wiki/Greatest_common_divisor) of the values of all nodes from $1$ to $n$ is $1$.\n\nBut this problem is too hard for Shohag to solve. As Shohag loves Pebae, he has to solve the problem. Please save Shohag!\n\n### Input\n\nThe first line contains two space-separated integers $n$ and $m$ ($2 \\le n \\le 10^6$, $1 \\le m \\le 10^{9}$).\n\nEach of the next $n - 1$ lines contains two integers $u$ and $v$ ($1 \\le u, v \\le n$) indicating there is an edge between vertices $u$ and $v$. It is guaranteed that the given edges form a tree.\n\n### Output\n\nPrint a single integer — the number of valid ways to assign each vertex a value, modulo $998\\,244\\,353$.\n\n### Examples\n\n#### Input #1\n\n```\n\n6 6\n\n1 2\n\n2 3\n\n3 4\n\n4 5\n\n3 6\n\n```\n\n#### Output #1\n\n```\n2\n```\n\n#### Input #2\n\n```\n\n2 5\n\n1 2\n\n```\n\n#### Output #2\n\n```\n7\n```\n\n#### Input #3\n\n```\n\n12 69\n\n3 5\n\n1 4\n\n2 3\n\n4 5\n\n5 6\n\n8 9\n\n7 3\n\n4 8\n\n9 10\n\n1 11\n\n12 1\n\n```\n\n#### Output #3\n\n```\n444144548\n```\n\n### Note\n\nIn the first test case, the valid assignments are $[1, 1, 1, 1, 1, 1]$ and $[1, 1, 1, 1, 1, 5]$.\n\nIn the second test case, the valid assignments are $[1, 1]$, $[1, 3]$, $[1, 5]$, $[3, 1]$, $[3, 5]$, $[5, 1]$ and $[5, 3]$.", "cfid": "2039G"}
{"problem_id": "2039F2", "problem_title": "F2. Shohag Loves Counting (Hard Version)", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2039/F2", "problem_statement": "This is the hard version of the problem. The only differences between the two versions of this problem are the constraints on $t$, $m$, and the sum of $m$. You can only make hacks if both versions of the problem are solved.\n\nFor an integer array $a$ of length $n$, define $f(k)$ as the [greatest common divisor (GCD)](https://en.wikipedia.org/wiki/Greatest_common_divisor) of the maximum values of all subarrays$^{\\text{∗}}$ of length $k$. For example, if the array is $[2, 1, 4, 6, 2]$, then $f(3) = \\operatorname{gcd}(\\operatorname{max}([2, 1, 4]), \\operatorname{max}([1, 4, 6]), \\operatorname{max}([4, 6, 2])) = \\operatorname{gcd}(4, 6, 6) = 2$.\n\nAn array is good if $f(i) \\neq f(j)$ is satisfied over all pairs $1 \\le i \\lt j \\le n$.\n\nShohag has an integer $m$. Help him count the number, modulo $998\\,244\\,353$, of non-empty good arrays of arbitrary length such that each element of the array is an integer from $1$ to $m$.\n\n$^{\\text{∗}}$An array $d$ is a subarray of an array $c$ if $d$ can be obtained from $c$ by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 3 \\cdot 10^5$) — the number of test cases.\n\nThe first and only line of each test case contains an integer $m$ ($1 \\le m \\le 10^6$).\n\nNote that there is no limit on the sum of $m$ over all test cases.\n\n### Output\n\nFor each test case, output an integer — the number of valid arrays modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2\n\n5\n\n9\n\n```\n\n#### Output #1\n\n```\n4\n29\n165\n```\n\n### Note\n\nIn the first test case, the valid arrays are $[1]$, $[1, 2]$, $[2]$, and $[2, 1]$.\n\nIn the second test case, there are a total of $29$ valid arrays. In particular, the array $[2, 1, 4]$ with length $n = 3$ is valid because all elements are from $1$ to $m = 5$ and $f(1)$, $f(2)$ and $f(n = 3)$ all are distinct:\n\n- $f(1) = \\operatorname{gcd}(\\operatorname{max}([2]), \\operatorname{max}([1]), \\operatorname{max}([4])) = \\operatorname{gcd}(2, 1, 4) = 1.$\n- $f(2) = \\operatorname{gcd}(\\operatorname{max}([2, 1]), \\operatorname{max}([1, 4])) = \\operatorname{gcd}(2, 4) = 2.$\n- $f(3) = \\operatorname{gcd}(\\operatorname{max}([2, 1, 4])) = \\operatorname{gcd}(4) = 4.$", "cfid": "2039F2"}
{"problem_id": "2039H1", "problem_title": "H1. Cool Swap Walk (Easy Version)", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2039/H1", "problem_statement": "This is the easy version of the problem. The only difference is the maximum number of operations you can perform. You can only make hacks if both versions are solved.\n\nYou are given an array $a$ of size $n$.\n\nA cool swap walk is the following process:\n\n- In an $n \\times n$ grid, we note the cells in row $i$ and column $j$ as $(i, j)$. You need to walk from $(1,1)$ to $(n,n)$, taking only steps to the right or down.\n- Formally, if you are in $(x,y)$ currently, you can step to either $(x+1,y)$ or $(x,y+1)$, but you can not step beyond the boundaries of the grid.\n- When you step in $(i,j)$, you must swap $a_i$ and $a_j$ when $i \\neq j$.\n\nYou can perform at most $2n+4$ cool swap walks. Sort the array $a_1, a_2, \\ldots, a_n$ in non-decreasing order. We can show that it's always possible to do so.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains an integer $n$ ($2 \\leq n \\leq 500$) — the size of the array.\n\nThe second line of each test case contains $n$ integers $a_1,a_2,\\ldots ,a_n$ ($1 \\le a_i \\le n$) — the elements of the array.\n\nIt is guaranteed that the sum of $n^2$ over all test cases does not exceed $2.5 \\cdot 10^5$.\n\n### Output\n\nFor each test case, your output should consist of several lines:\n\n- The first line contains an integer $k$ ($0 \\leq k \\leq 2n+4$), representing the number of cool swap walks you perform.\n- Each of the next $k$ lines contains a string $s$ of length $2n-2$ consisting only of R and D, representing the path (letters are case sensitive). For all $1 \\le i \\le 2n-2$, if $s_i=$ R, you walk right in the $i$-th step, otherwise you walk down in the $i$-th step.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2\n\n1 2\n\n3\n\n2 1 3\n\n4\n\n3 2 3 4\n\n```\n\n#### Output #1\n\n```\n0\n2\nRRDD\nDRDR\n3\nRRDRDD\nDRDDRR\nDDRRRD\n```\n\n### Note\n\nIn the first test case, the array $a$ is already non-decreasing, so you don't need to perform any walk.\n\nIn the second test case, $a=[2,1,3]$ initially.\n\nIn the first walk:\n\n- In the $1$-st step, you step right to $(1,2)$. Then, $a=[1,2,3]$. Note that although the array $a$ is already non-decreasing, you can not stop until you reach $(n,n)$.\n\n- In the $2$-nd step, you step right to $(1,3)$. Then, $a=[3,2,1]$.\n\n- In the $3$-rd step, you step down to $(2,3)$. Then, $a=[3,1,2]$.\n\n- In the $4$-th step, you step down to $(3,3)$. Then, $a=[3,1,2]$.\n\nIn the second walk:\n\n- In the $1$-st step, you step down to $(2,1)$. Then, $a=[1,3,2]$.\n\n- In the $2$-nd step, you step right to $(2,2)$. Then, $a=[1,3,2]$.\n\n- In the $3$-rd step, you step down to $(3,2)$. Then, $a=[1,2,3]$.\n\n- In the $4$-th step, you step down to $(3,3)$. Then, $a=[1,2,3]$.\n\nAfter the two cool swap walks above, we get $a=[1,2,3]$, which is non-decreasing.", "cfid": "2039H1"}
{"problem_id": "2039H2", "problem_title": "H2. Cool Swap Walk (Hard Version)", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2039/H2", "problem_statement": "This is the hard version of the problem. The only difference is the maximum number of operations you can perform. You can only make hacks if both versions are solved.\n\nYou are given an array $a$ of size $n$.\n\nA cool swap walk is the following process:\n\n- In an $n \\times n$ grid, we note the cells in row $i$ and column $j$ as $(i, j)$. You need to walk from $(1,1)$ to $(n,n)$, taking only steps to the right or down.\n- Formally, if you are in $(x,y)$ currently, you can step to either $(x+1,y)$ or $(x,y+1)$, but you can not step beyond the boundaries of the grid.\n- When you step in $(i,j)$, you must swap $a_i$ and $a_j$ when $i \\neq j$.\n\nYou can perform at most $n+4$ cool swap walks. Sort the array $a_1, a_2, \\ldots, a_n$ in non-decreasing order. We can show that it's always possible to do so.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains an integer $n$ ($2 \\leq n \\leq 500$) — the size of the array.\n\nThe second line of each test case contains $n$ integers $a_1,a_2,\\ldots ,a_n$ ($1 \\le a_i \\le n$) — the elements of the array.\n\nIt is guaranteed that the sum of $n^2$ over all test cases does not exceed $2.5 \\cdot 10^5$.\n\n### Output\n\nFor each test case, your output should consist of several lines:\n\n- The first line contains an integer $k$ ($0 \\leq k \\leq n+4$), representing the number of cool swap walks you perform.\n- Each of the next $k$ lines contains a string $s$ of length $2n-2$ consisting only of R and D, representing the path (letters are case sensitive). For all $1 \\le i \\le 2n-2$, if $s_i=$ R, you walk right in the $i$-th step, otherwise you walk down in the $i$-th step.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2\n\n1 2\n\n3\n\n2 1 3\n\n4\n\n3 2 3 4\n\n```\n\n#### Output #1\n\n```\n0\n2\nRRDD\nDRDR\n3\nRRDRDD\nDRDDRR\nDDRRRD\n```\n\n### Note\n\nIn the first test case, the array $a$ is already non-decreasing, so you don't need to perform any walk.\n\nIn the second test case, $a=[2,1,3]$ initially.\n\nIn the first walk:\n\n- In the $1$-st step, you step right to $(1,2)$. Then, $a=[1,2,3]$. Note that although the array $a$ is already non-decreasing, you can not stop until you reach $(n,n)$.\n\n- In the $2$-nd step, you step right to $(1,3)$. Then, $a=[3,2,1]$.\n\n- In the $3$-rd step, you step down to $(2,3)$. Then, $a=[3,1,2]$.\n\n- In the $4$-th step, you step down to $(3,3)$. Then, $a=[3,1,2]$.\n\nIn the second walk:\n\n- In the $1$-st step, you step down to $(2,1)$. Then, $a=[1,3,2]$.\n\n- In the $2$-nd step, you step right to $(2,2)$. Then, $a=[1,3,2]$.\n\n- In the $3$-rd step, you step down to $(3,2)$. Then, $a=[1,2,3]$.\n\n- In the $4$-th step, you step down to $(3,3)$. Then, $a=[1,2,3]$.\n\nAfter the two cool swap walks above, we get $a=[1,2,3]$, which is non-decreasing.", "cfid": "2039H2"}
{"problem_id": "2029I", "problem_title": "I. Variance Challenge", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2029/I", "problem_statement": "Kevin has recently learned the definition of variance. For an array $a$ of length $n$, the variance of $a$ is defined as follows:\n\n- Let $x=\\dfrac{1}{n}\\displaystyle\\sum_{i=1}^n a_i$, i.e., $x$ is the mean of the array $a$;\n- Then, the variance of $a$ is \n\n$$ V(a)=\\frac{1}{n}\\sum_{i=1}^n(a_i-x)^2. $$\n\nNow, Kevin gives you an array $a$ consisting of $n$ integers, as well as an integer $k$. You can perform the following operation on $a$:\n\n- Select an interval $[l,r]$ ($1\\le l\\le r\\le n$), then for each $l\\le i\\le r$, increase $a_i$ by $k$.\n\nFor each $1\\le p\\le m$, you have to find the minimum possible variance of $a$ after exactly $p$ operations are performed, independently for each $p$.\n\nFor simplicity, you only need to output the answers multiplied by $n^2$. It can be proven that the results are always integers.\n\n### Input\n\nEach test contains multiple test cases. The first line of the input contains a single integer $t$ ($1\\le t\\le 100$) — the number of test cases. The description of test cases follows.\n\nThe first line of each test case contains three integers $n$, $m$, and $k$ ($1\\le n,m\\le 5000$, $\\color{red}{n\\cdot m\\le 2\\cdot 10^4}$, $1\\le k\\le 10^5$) — the length of the array $a$, the maximum number of operations, and the number you add to $a_i$ each time, respectively.\n\nThe second line contains $n$ integers $a_1,a_2,\\ldots, a_n$ ($1\\le a_i\\le 10^5$) — the elements of the array $a$.\n\nIt is guaranteed that the sum of $n\\cdot m$ over all tests does not exceed $2\\cdot 10^4$.\n\n### Output\n\nFor each test case, output $m$ integers in a single line, the $p$-th integer denoting the minimum possible variance of $a$ when exactly $p$ operations are performed, multiplied by $n^2$.\n\n### Example\n\n#### Input #1\n\n```\n\n9\n\n3 2 1\n\n1 2 2\n\n3 2 2\n\n1 2 2\n\n10 2 1\n\n10 1 1 1 1 10 1 1 1 1\n\n6 8 2\n\n1 1 4 5 1 3\n\n8 8 7\n\n20 43 24 2 4 3 20 43\n\n8 8 3\n\n20 43 24 2 4 3 20 43\n\n10 12 1\n\n5 3 3 5 4 1 8 1 1 1\n\n13 10 100000\n\n1 2 3 4 5 6 7 8 9 10 11 5 4\n\n10 5 10000\n\n2308 9982 4435 3310 100000 9 7 8100 1919 100000\n\n```\n\n#### Output #1\n\n```\n0 0\n2 2\n1161 1024\n53 21 21 5 5 5 5 5\n10608 6912 4448 3104 1991 1312 535 304\n13248 11184 9375 7815 6447 5319 4383 3687\n385 316 269 224 181 156 124 101 80 56 41 29\n1486 1486 1486 1486 1486 1486 1486 1486 1486 1486\n134618047140 119919447140 107020847140 93922247140 82623647140\n```\n\n### Note\n\nIn the first test case:\n\n- For $p = 1$, you can perform the operation on $[1, 1]$, changing $a$ from $[1, 2, 2]$ to $[2, 2, 2]$. Since all of the elements are equal, the variance is equal to $0$.\n- For $p = 2$, you can perform the operation on $[1, 3]$ and then $[1, 1]$, changing $a$ from $[1, 2, 2]$ to $[2, 3, 3]$ to $[3, 3, 3]$. Since all of the elements are equal, the variance is equal to $0$.\n\nIn the second test case, some possible optimal choices are:\n\n- $p=1$: $[\\underline{1,}\\,2,2]\\to [3,2,2]$;\n- $p=2$: $[1,\\underline{2,2}] \\to [\\underline{1,}\\,4,4] \\to [3,4,4]$.\n\nIn the third test case, some possible optimal choices are:\n\n- $p=1$: $[10,\\underline{1,1,1,1,10,1,1,1,1}]\\to[10,2,2,2,2,11,2,2,2,2]$;\n- $p=2$: $[10,1,1,1,1,10,\\underline{1,1,1,1}] \\to [10,\\underline{1,1,1,1},10,2,2,2,2] \\to [10,2,2,2,2,10,2,2,2,2]$.\n\nIn the eighth test case, the optimal choice for all $p$ is to perform the operation on the whole array $p$ times.", "cfid": "2029I"}
{"problem_id": "2029H", "problem_title": "H. Message Spread", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2029/H", "problem_statement": "Given is an undirected graph with $n$ vertices and $m$ edges. Each edge connects two vertices $(u, v)$ and has a probability of $\\frac{p}{q}$ of appearing each day.\n\nInitially, vertex $1$ has a message. At the end of the day, a vertex has a message if and only if itself or at least one of the vertices adjacent to it had the message the day before. Note that each day, each edge chooses its appearance independently.\n\nCalculate the expected number of days before all the vertices have the message, modulo $998\\,244\\,353$.\n\n### Input\n\nThe first line contains two integers $n$ and $m$ ($1\\leq n\\leq 21$, $n-1\\leq m\\leq\\frac{n(n-1)}{2}$).\n\nThen $m$ lines follow, each containing four integers $u$, $v$, $p$, and $q$ ($1\\leq u\\neq v\\leq n$, $1\\leq p<q<998\\,244\\,353$, $\\gcd(p,q)=1$) — there is an undirected edge between $u$ and $v$, and it has a probability of appearance of $\\frac{p}{q}$ each day.\n\nIt is guaranteed that there are no self-loops or multiple-edges in the graph and that the graph is connected if all of the edges appear.\n\nAdditional constraint in the input: Let $g\\_{i,j}$ be the probability of appearance of the edge between $i$ and $j$ ($g\\_{i,j}=0$ if there is no edge between $i$ and $j$). It is guaranteed that for any $S\\\\subseteq\\\\{1,2,\\\\ldots,n\\\\}$ ($\\|S\\|\\\\ge 1$), \n\n$$ \\prod_{i\\in S}\\left(\\prod_{j\\in\\{1,2,\\ldots,n\\}\\setminus S}(1-g_{i,j})\\right)\\not\\equiv1\\pmod{998\\,244\\,353}. $$\n\nOutput\n\nPrint a single integer in the only line of the output — the expected number of days, modulo $998\\,244\\,353$.\n\nFormally, let $M = 998\\,244\\,353$. It can be shown that the exact answer can be expressed as an irreducible fraction $\\frac{p}{q}$, where $p$ and $q$ are integers and $q \\not \\equiv 0 \\pmod{M}$. Output the integer equal to $p \\cdot q^{-1} \\bmod M$. In other words, output such an integer $x$ that $0 \\le x < M$ and $x \\cdot q \\equiv p \\pmod{M}$.\n\n### Examples\n\n#### Input #1\n\n```\n\n2 1\n\n1 2 1 10\n\n```\n\n#### Output #1\n\n```\n10```\n\n#### Input #2\n\n```\n\n3 3\n\n1 2 1 2\n\n1 3 1 2\n\n2 3 1 2\n\n```\n\n#### Output #2\n\n```\n887328316```\n\n#### Input #3\n\n```\n\n1 0\n\n```\n\n#### Output #3\n\n```\n0```\n\n#### Input #4\n\n```\n\n5 8\n\n1 2 1 11\n\n1 3 2 11\n\n1 4 3 11\n\n1 5 4 11\n\n2 4 5 11\n\n2 5 6 11\n\n3 4 7 11\n\n4 5 8 11\n\n```\n\n#### Output #4\n\n```\n469993557```\n\n#### Input #5\n\n```\n\n21 22\n\n1 2 3 4\n\n2 3 4 5\n\n3 4 5 6\n\n5 6 7 8\n\n6 7 8 9\n\n7 8 9 10\n\n8 9 2 3\n\n9 10 3 4\n\n10 11 4 5\n\n11 12 5 6\n\n12 13 6 7\n\n13 14 7 8\n\n14 15 8 9\n\n15 16 9 10\n\n16 17 2 3\n\n17 18 3 4\n\n18 19 4 5\n\n19 20 5 6\n\n20 21 6 7\n\n1 10 100 1001\n\n15 4 147 220\n\n4 11 1 998244352\n\n```\n\n#### Output #5\n\n```\n299529765```\n\n### Note\n\nIn the first test, the answer is equal to the expected number of days before the only edge in the graph first appears, and that is $\\frac{1}{0.1}=10$.\n\nIn the second test, the answer is equal to $\\frac{20}{9}$ before it is taken modulo $998\\,244\\,353$.\n\nIn the third test, the only vertex already has the message, so the answer is $0$.", "cfid": "2029H"}
{"problem_id": "2035G2", "problem_title": "G2. Go Learn! (Hard Version)", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2035/G2", "problem_statement": "The differences between the easy and hard versions are the constraints on $n$ and the sum of $n$. In this version, $n \\leq 3\\cdot 10^5$ and the sum of $n$ does not exceed $10^6$. You can only make hacks if both versions are solved.\n\nWell, well, well, let's see how Bessie is managing her finances. She seems to be in the trenches! Fortunately, she is applying for a job at Moogle to resolve this issue. Moogle interviews require intensive knowledge of obscure algorithms and complex data structures, but Bessie received a tip-off from an LGM on exactly what she has to go learn.\n\nBessie wrote the following code to binary search for a certain element $k$ in a possibly unsorted array $[a_1, a_2,\\ldots,a_n]$ with $n$ elements.\n\n```\n`let l = 1<br/>let h = n<br/><br/>while l < h:<br/>  let m = floor((l + h) / 2)<br/><br/>  if a[m] < k:<br/>    l = m + 1<br/>  else:<br/>    h = m<br/><br/>return l<br/>````\n\nBessie submitted her code to Farmer John's problem with $m$ ($1 \\leq m \\leq n$) tests. The $i$-th test is of the form $(x_i, k_i)$ ($1 \\leq x, k \\leq n$). It is guaranteed all the $x_i$ are distinct and all the $k_i$ are distinct.\n\nTest $i$ is correct if the following hold:\n\n1. The $x_i$-th element in the array is $k_i$.\n2. If Bessie calls the binary search as shown in the above code for $k_i$, it will return $x_i$.\n\nIt might not be possible for all $m$ tests to be correct on the same array, so Farmer John will remove some of them so Bessie can AC. Let $r$ be the minimum of tests removed so that there exists an array $[a_1, a_2,\\ldots,a_n]$ with $1 \\leq a_i \\leq n$ so that all remaining tests are correct.\n\nIn addition to finding $r$, Farmer John wants you to count the number of arrays $[a_1, a_2,\\ldots,a_n]$ with $1 \\leq a_i \\leq n$ such that there exists a way to remove exactly $r$ tests so that all the remaining tests are correct. Since this number may be very large, please find it modulo $998\\,244\\,353$.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\leq m \\leq n \\leq 3 \\cdot 10^5$) denoting the number of the array and the number of tests.\n\nThe following $m$ lines each contain two integers, describing the tests. The $i$-th line contains two integers $x_i$ and $k_i$ ($1 \\leq x_i, k_i \\leq n$) denoting the index and value of the test. It is guaranteed all $x_i$ are distinct and all $k_i$ are distinct.\n\nIt is guaranteed the sum of $n$ across all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case, output two integers, $r$ — the minimum of tests removed so that there exists an array so that all remaining tests are correct, and the number of arrays such that it is possible to remove $r$ tests to make all remaining tests correct modulo $998\\,244\\,353$.\n\n### Examples\n\n#### Input #1\n\n```\n\n2\n\n5 4\n\n1 1\n\n2 2\n\n4 3\n\n5 4\n\n5 4\n\n5 4\n\n2 5\n\n1 2\n\n3 3\n\n```\n\n#### Output #1\n\n```\n0 1\n1 3\n```\n\n#### Input #2\n\n```\n\n3\n\n6 6\n\n1 3\n\n2 5\n\n3 1\n\n4 2\n\n5 4\n\n6 6\n\n30 8\n\n19 22\n\n6 12\n\n12 1\n\n28 27\n\n3 4\n\n14 25\n\n29 14\n\n11 15\n\n300000 1\n\n5 10\n\n```\n\n#### Output #2\n\n```\n3 78\n3 839271911\n0 702730519\n```\n\n### Note\n\nConsider the first example.\n\nIn the first test case, the array $[1,2,2,3,4]$ satisfies all $m$ tests, so the minimum number of tests Bessie has to remove is $0$. Note that this is also the only array that satisfies all $m$ tests.\n\nIn the second test case, the minimum number of tests Bessie has to remove is $1$. The only test Bessie can remove is $(2,5)$. If Bessie removes test $(2,5)$, then the arrays satisfying the remaining $m-1$ tests are $[2,2,3,1,4]$, $[2,2,3,2,4]$, $[2,2,3,3,4]$.", "cfid": "2035G2"}
{"problem_id": "2035H", "problem_title": "H. Peak Productivity Forces", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2035/H", "problem_statement": "I'm peakly productive and this is deep.\n\nYou are given two permutations$^{\\text{∗}}$ $a$ and $b$, both of length $n$.\n\nYou can perform the following three-step operation on permutation $a$:\n\n1. Choose an index $i$ ($1 \\le i \\le n$).\n2. Cyclic shift $a_1, a_2, \\ldots, a_{i-1}$ by $1$ to the right. If you had chosen $i = 1$, then this range doesn't exist, and you cyclic shift nothing.\n3. Cyclic shift $a_{i + 1}, a_{i + 2}, \\ldots, a_n$ by $1$ to the right. If you had chosen $i = n$, then this range doesn't exist, and you cyclic shift nothing.\n\nAfter the operation, $a_1,a_2,\\ldots, a_{i-2},a_{i-1},a_i,a_{i + 1}, a_{i + 2},\\ldots,a_{n-1}, a_n$ is transformed into $a_{i-1},a_1,\\ldots,a_{i-3},a_{i-2},a_i,a_n, a_{i + 1},\\ldots,a_{n-2}, a_{n-1}$.\n\nHere are some examples of operations done on the identity permutation $[1,2,3,4,5,6,7]$ of length $7$:\n\n- If we choose $i = 3$, it will become $[2, 1, 3, 7, 4, 5, 6]$.\n- If we choose $i = 1$, it will become $[1, 7, 2, 3, 4, 5, 6]$.\n- If we choose $i = 7$, it will become $[6, 1, 2, 3, 4, 5, 7]$.\n\nNotably, position $i$ is not shifted.\n\nFind a construction using at most $2n$ operations to make $a$ equal to $b$ or print $-1$ if it is impossible. The number of operations does not need to be minimized. It can be shown that if it is possible to make $a$ equal to $b$, it is possible to do this within $2n$ operations.\n\n$^{\\text{∗}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 5 \\cdot 10^4$) — the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 5 \\cdot 10^5$) — the lengths of permutations $a$ and $b$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le n$) — the values of permutation $a$.\n\nThe third line of each test case contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($1 \\le b_i \\le n$) — the values of permutation $b$.\n\nIt is guaranteed that the sum of $n$ over all test cases will not exceed $5 \\cdot 10^5$.\n\n### Output\n\nFor each test case:\n\nIf there is a sequence of operations to transform $a$ into $b$, output a single integer $q$ ($0\\le q\\le 2n$) — the number of operations in the first line and $q$ integers with the $i$-th number representing the index of the $i$-th operation in the second line.\n\nIf there is no sequence of operations, output $-1$ in the only line.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n1\n\n1\n\n1\n\n2\n\n1 2\n\n2 1\n\n3\n\n2 1 3\n\n3 2 1\n\n8\n\n7 8 3 5 4 6 1 2\n\n2 1 6 4 5 3 8 7\n\n```\n\n#### Output #1\n\n```\n0\n\n-1\n2\n1 3\n7\n3 4 5 1 2 1 1\n```\n\n### Note\n\nIn the first case, you can do no operation since $a=b$.\n\nIn the second case, it can be proved $a$ can not be transformed into $b$.\n\nIn the third case, $a$ is transformed into $[2,3,1]$ after the first operation and into $b$ after the second operation.", "cfid": "2035H"}
{"problem_id": "2035G1", "problem_title": "G1. Go Learn! (Easy Version)", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2035/G1", "problem_statement": "The differences between the easy and hard versions are the constraints on $n$ and the sum of $n$. In this version, $n \\leq 3000$ and the sum of $n$ does not exceed $10^4$. You can only make hacks if both versions are solved.\n\nWell, well, well, let's see how Bessie is managing her finances. She seems to be in the trenches! Fortunately, she is applying for a job at Moogle to resolve this issue. Moogle interviews require intensive knowledge of obscure algorithms and complex data structures, but Bessie received a tip-off from an LGM on exactly what she has to go learn.\n\nBessie wrote the following code to binary search for a certain element $k$ in a possibly unsorted array $[a_1, a_2,\\ldots,a_n]$ with $n$ elements.\n\n```\n`let l = 1<br/>let h = n<br/><br/>while l < h:<br/>  let m = floor((l + h) / 2)<br/><br/>  if a[m] < k:<br/>    l = m + 1<br/>  else:<br/>    h = m<br/><br/>return l<br/>````\n\nBessie submitted her code to Farmer John's problem with $m$ ($1 \\leq m \\leq n$) tests. The $i$-th test is of the form $(x_i, k_i)$ ($1 \\leq x, k \\leq n$). It is guaranteed all the $x_i$ are distinct and all the $k_i$ are distinct.\n\nTest $i$ is correct if the following hold:\n\n1. The $x_i$-th element in the array is $k_i$.\n2. If Bessie calls the binary search as shown in the above code for $k_i$, it will return $x_i$.\n\nIt might not be possible for all $m$ tests to be correct on the same array, so Farmer John will remove some of them so Bessie can AC. Let $r$ be the minimum of tests removed so that there exists an array $[a_1, a_2,\\ldots,a_n]$ with $1 \\leq a_i \\leq n$ so that all remaining tests are correct.\n\nIn addition to finding $r$, Farmer John wants you to count the number of arrays $[a_1, a_2,\\ldots,a_n]$ with $1 \\leq a_i \\leq n$ such that there exists a way to remove exactly $r$ tests so that all the remaining tests are correct. Since this number may be very large, please find it modulo $998\\,244\\,353$.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\leq m \\leq n \\leq 3000$) denoting the number of the array and the number of tests.\n\nThe following $m$ lines each contain two integers, describing the tests. The $i$-th line contains two integers $x_i$ and $k_i$ ($1 \\leq x_i, k_i \\leq n$) denoting the index and value of the test. It is guaranteed all $x_i$ are distinct and all $k_i$ are distinct.\n\nIt is guaranteed the sum of $n$ across all test cases does not exceed $10^4$.\n\n### Output\n\nFor each test case, output two integers, $r$ — the minimum of tests removed so that there exists an array so that all remaining tests are correct, and the number of arrays such that it is possible to remove $r$ tests to make all remaining tests correct modulo $998\\,244\\,353$.\n\n### Examples\n\n#### Input #1\n\n```\n\n2\n\n5 4\n\n1 1\n\n2 2\n\n4 3\n\n5 4\n\n5 4\n\n5 4\n\n2 5\n\n1 2\n\n3 3\n\n```\n\n#### Output #1\n\n```\n0 1\n1 3\n```\n\n#### Input #2\n\n```\n\n2\n\n6 6\n\n1 3\n\n2 5\n\n3 1\n\n4 2\n\n5 4\n\n6 6\n\n30 8\n\n19 22\n\n6 12\n\n12 1\n\n28 27\n\n3 4\n\n14 25\n\n29 14\n\n11 15\n\n```\n\n#### Output #2\n\n```\n3 78\n3 839271911\n```\n\n### Note\n\nConsider the first example.\n\nIn the first test case, the array $[1,2,2,3,4]$ satisfies all $m$ tests, so the minimum number of tests Bessie has to remove is $0$. Note that this is also the only array that satisfies all $m$ tests.\n\nIn the second test case, the minimum number of tests Bessie has to remove is $1$. The only test Bessie can remove is $(2,5)$. If Bessie removes test $(2,5)$, then the arrays satisfying the remaining $m-1$ tests are $[2,2,3,1,4]$, $[2,2,3,2,4]$, $[2,2,3,3,4]$.", "cfid": "2035G1"}
{"problem_id": "2027E2", "problem_title": "E2. Bit Game (Hard Version)", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2027/E2", "problem_statement": "This is the hard version of this problem. The only difference is that you need to output the number of choices of games where Bob wins in this version, where the number of stones in each pile are not fixed. You must solve both versions to be able to hack.\n\nAlice and Bob are playing a familiar game where they take turns removing stones from $n$ piles. Initially, there are $x_i$ stones in the $i$-th pile, and it has an associated value $a_i$. A player can take $d$ stones away from the $i$-th pile if and only if both of the following conditions are met:\n\n- $1 \\le d \\le a_i$, and\n- $x \\, \\& \\, d = d$, where $x$ is the current number of stones in the $i$-th pile and $\\&$ denotes the [bitwise AND operation](https://en.wikipedia.org/wiki/Bitwise_operation#AND).\n\nThe player who cannot make a move loses, and Alice goes first.\n\nYou're given the $a_i$ values of each pile, but the number of stones in the $i$-th pile has not been determined yet. For the $i$-th pile, $x_i$ can be any integer between $1$ and $b_i$, inclusive. That is, you can choose an array $x_1, x_2, \\ldots, x_n$ such that the condition $1 \\le x_i \\le b_i$ is satisfied for all piles.\n\nYour task is to count the number of games where Bob wins if both players play optimally. Two games are considered different if the number of stones in any pile is different, i.e., the arrays of $x$ differ in at least one position.\n\nSince the answer can be very large, please output the result modulo $10^9 + 7$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$). The description of the test cases follows.\n\nThe first line of each test case contains $n$ ($1 \\le n \\le 10^4$) — the number of piles.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i < 2^{30}$).\n\nThe third line of each test case contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($1 \\le b_i < 2^{30}$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^4$.\n\n### Output\n\nOutput a single integer, the number of games where Bob wins, modulo $10^9 + 7$.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n3\n\n1 2 3\n\n3 2 2\n\n1\n\n13\n\n45\n\n5\n\n5 4 7 8 6\n\n4 4 5 5 5\n\n4\n\n6 4 8 8\n\n12 13 14 12\n\n3\n\n92856133 46637598 12345678\n\n29384774 73775896 87654321\n\n2\n\n65 12\n\n110 31\n\n4\n\n677810235 275091182 428565855 720629731\n\n74522416 889934149 3394714 230851724\n\n```\n\n#### Output #1\n\n```\n4\n4\n0\n6552\n722019507\n541\n665443265\n```\n\n### Note\n\nIn the first test case, no matter which values of $x_2$ and $x_3$ we choose, the second and third piles will always be chosen exactly once before no more stones can be taken from them. If $x_1 = 2$, then no stones can be taken from it, so Bob will make the last move. If $x_1 = 1$ or $x_1 = 3$, then exactly one move can be made on that pile, so Alice will make the last move. So Bob wins when $x = [2, 1, 1]$ or $x = [2, 1, 2]$ or $x = [2, 2, 1]$ or $x = [2, 2, 2]$.\n\nIn the second test case, Bob wins when $x_1 = 14$ or $x_1 = 30$ by removing $14 - k$ stones, where $k$ is the number of stones Alice removes on her turn. Bob also wins when $x_1 = 16$ or $x_1 = 32$ since Alice does not have any moves to begin with.", "cfid": "2027E2"}
{"problem_id": "2023E", "problem_title": "E. Tree of Life", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2023/E", "problem_statement": "In the heart of an ancient kingdom grows the legendary Tree of Life — the only one of its kind and the source of magical power for the entire world. The tree consists of $n$ nodes. Each node of this tree is a magical source, connected to other such sources through magical channels (edges). In total, there are $n-1$ channels in the tree, with the $i$-th channel connecting nodes $v_i$ and $u_i$. Moreover, there exists a unique simple path through the channels between any two nodes in the tree.\n\nHowever, the magical energy flowing through these channels must be balanced; otherwise, the power of the Tree of Life may disrupt the natural order and cause catastrophic consequences. The sages of the kingdom discovered that when two magical channels converge at a single node, a dangerous \"magical resonance vibration\" occurs between them. To protect the Tree of Life and maintain its balance, it is necessary to select several paths and perform special rituals along them. A path is a sequence of distinct nodes $v_1, v_2, \\ldots, v_k$, where each pair of adjacent nodes $v_i$ and $v_{i+1}$ is connected by a channel. When the sages perform a ritual along such a path, the resonance vibration between the channels $(v_i, v_{i+1})$ and $(v_{i+1}, v_{i+2})$ is blocked for each $1 \\leq i \\leq k - 2$.\n\nThe sages' task is to select the minimum number of paths and perform rituals along them to block all resonance vibrations. This means that for every pair of channels emanating from a single node, there must exist at least one selected path that contains both of these channels.\n\nHelp the sages find the minimum number of such paths so that the magical balance of the Tree of Life is preserved, and its power continues to nourish the entire world!\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\leq t \\leq 4 \\cdot 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\leq n \\leq 5 \\cdot 10^5$) — the number of nodes in the Tree of Life.\n\nThe $i$-th of the following $n - 1$ lines of each test case contains two integers $v_i$ and $u_i$ ($1 \\leq v_i < u_i \\leq n$) — the channel connecting nodes $v_i$ and $u_i$.\n\nIt is guaranteed that there exists a unique simple path through the channels between any two nodes.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the minimum number of paths that the sages need to select to prevent a catastrophe.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n4\n\n1 2\n\n2 3\n\n3 4\n\n2\n\n1 2\n\n4\n\n1 2\n\n1 3\n\n1 4\n\n8\n\n3 7\n\n2 4\n\n1 2\n\n2 5\n\n3 6\n\n1 3\n\n3 8\n\n6\n\n2 3\n\n1 2\n\n3 6\n\n1 5\n\n1 4\n\n```\n\n#### Output #1\n\n```\n1\n0\n3\n7\n3\n```\n\n### Note\n\nIn the first test case, there are two pairs of channels emanating from a single node: $(1, 2)$ and $(2, 3)$, $(2, 3)$ and $(3, 4)$. It is sufficient to perform the ritual along the path $1-2-3-4$. Thus, the answer is $1$.\n\nIn the second test case, there are no pairs of channels emanating from a single node, so the answer is $0$.\n\nIn the third test case, rituals can be performed along the paths $2-1-3$, $2-1-4$, and $3-1-4$.", "cfid": "2023E"}
{"problem_id": "2023F", "problem_title": "F. Hills and Pits", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2023/F", "problem_statement": "In a desert city with a hilly landscape, the city hall decided to level the road surface by purchasing a dump truck. The road is divided into $n$ sections, numbered from $1$ to $n$ from left to right. The height of the surface in the $i$-th section is equal to $a_i$. If the height of the $i$-th section is greater than $0$, then the dump truck must take sand from the $i$-th section of the road, and if the height of the $i$-th section is less than $0$, the dump truck must fill the pit in the $i$-th section of the road with sand. It is guaranteed that the initial heights are not equal to $0$.\n\nWhen the dump truck is in the $i$-th section of the road, it can either take away $x$ units of sand, in which case the height of the surface in the $i$-th section will decrease by $x$, or it can fill in $x$ units of sand (provided that it currently has at least $x$ units of sand in its bed), in which case the height of the surface in the $i$-th section of the road will increase by $x$.\n\nThe dump truck can start its journey from any section of the road. Moving to an adjacent section on the left or right takes $1$ minute, and the time for loading and unloading sand can be neglected. The dump truck has an infinite capacity and is initially empty.\n\nYou need to find the minimum time required for the dump truck to level the sand so that the height in each section becomes equal to $0$. Note that after all movements, the dump truck may still have sand left in its bed. You need to solve this problem independently for the segments numbered from $l_i$ to $r_i$. Sand outside the segment cannot be used.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $q$ ($1 \\le n, q \\le 3 \\cdot 10^5$) — the number of sections and the number of queries.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($-10^9 \\le a_i \\le 10^9$, $a_i \\neq 0$) — the initial height in each section.\n\nThe $i$-th of the following $q$ lines contains two integers $l_i$ and $r_i$ ($1 \\le l_i \\le r_i \\le n$) — the boundaries of the segment of sections for which the minimum time needs to be determined.\n\nIt is guaranteed that the sum of $n$ over all test cases and the sum of $q$ over all test cases do not exceed $3 \\cdot 10^5$.\n\n### Output\n\nFor each query, output the minimum time required to level the sand in the segment $[l_i, r_i]$, or $-1$ if it is impossible.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n1 1\n\n-179\n\n1 1\n\n5 3\n\n-2 2 -1 3 -1\n\n2 4\n\n1 5\n\n1 3\n\n7 1\n\n1 1 1 -4 1 1 1\n\n1 7\n\n7 2\n\n2 -2 2 -2 1 2 -1\n\n1 7\n\n2 7\n\n4 4\n\n1000000000 1000000000 999999999 -1000000000\n\n2 4\n\n3 4\n\n2 3\n\n1 3\n\n```\n\n#### Output #1\n\n```\n-1\n2\n5\n-1\n8\n6\n6\n2\n-1\n1\n2\n```\n\n### Note\n\nIn the first test case, $179$ units of sand need to be added to the only section. However, there is nowhere to take it from, so this is impossible.\n\nIn the second test case:\n\n- In the first query, the dump truck can start its journey at the second section. It can take $2$ units of sand, after which the height in the second section will become $0$. Then the dump truck can move to the third section. It can pour $1$ unit of sand there, after which the height in the third section will become $0$. Then the dump truck can move to the fourth section. There it can take $3$ units of sand, after which the height in the fourth section will become $0$. In total, the dump truck will spend $2$ minutes on movements.\n- In the second query, the dump truck can start its journey at the fourth section. It can take $3$ units of sand, after which the height in the fourth section will become $0$. Then the dump truck can move to the fifth section. It can pour $1$ unit of sand there, after which the height in the fifth section will become $0$. Then the dump truck can move back to the fourth section and then to the third. It can pour $1$ unit of sand there, after which the height in the third section will become $0$. Then the dump truck can move to the second section. It can take $2$ units of sand. Then it can move to the first section. It can pour $2$ units of sand there, after which the height in the first section will become $0$. In total, the dump truck will spend $5$ minutes on movements.\n- In the third query, the dump truck will not be able to make the height in each section equal to $0$.", "cfid": "2023F"}
{"problem_id": "2030G2", "problem_title": "G2. The Destruction of the Universe (Hard Version)", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2030/G2", "problem_statement": "This is the hard version of the problem. In this version, $n \\leq 10^6$. You can only make hacks if both versions of the problem are solved.\n\nOrangutans are powerful beings—so powerful that they only need $1$ unit of time to destroy every vulnerable planet in the universe!\n\nThere are $n$ planets in the universe. Each planet has an interval of vulnerability $[l, r]$, during which it will be exposed to destruction by orangutans. Orangutans can also expand the interval of vulnerability of any planet by $1$ unit.\n\nSpecifically, suppose the expansion is performed on planet $p$ with interval of vulnerability $[l_p, r_p]$. Then, the resulting interval of vulnerability may be either $[l_p - 1, r_p]$ or $[l_p, r_p + 1]$.\n\nGiven a set of planets, orangutans can destroy all planets if the intervals of vulnerability of all planets in the set intersect at least one common point. Let the score of such a set denote the minimum number of expansions that must be performed.\n\nOrangutans are interested in the sum of scores of all non-empty subsets of the planets in the universe. As the answer can be large, output it modulo $998\\,244\\,353$.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe first line of each test case contains an integer $n$ ($1 \\leq n \\leq 10^6$) — the number of planets in the universe.\n\nThe following $n$ lines contain two integers $l_i$ and $r_i$ ($1 \\leq l_i \\leq r_i \\leq n$) — the initial interval of vulnerability of the $i$-th planet.\n\nIt is guaranteed that the sum of $n$ does not exceed $10^6$ over all test cases.\n\n### Output\n\nFor each test case, output an integer — the sum of scores to destroy all non-empty subsets of the planets in the universe, modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3\n\n1 1\n\n2 3\n\n3 3\n\n4\n\n1 4\n\n2 3\n\n2 4\n\n1 1\n\n5\n\n1 2\n\n2 3\n\n3 4\n\n4 5\n\n1 5\n\n```\n\n#### Output #1\n\n```\n5\n6\n24\n```\n\n### Note\n\nIn the first testcase, there are seven non-empty subsets of planets we must consider:\n\n- For each of the subsets $\\{[1,1]\\}, \\{[2,3]\\}, \\{[3,3]\\}$, the score is $0$.\n- For the subset $\\{[2,3], [3,3]\\}$, the score is $0$, because the point $3$ is already contained in both planets' interval of vulnerability.\n- For the subset $\\{[1,1], [2,3]\\}$, the score is $1$. By using one operation on changing the interval of vulnerability of the second planet to be $[1,3]$, the two planets now both have the point $1$ in their interval.\n- For the subset $\\{[1,1], [3,3]\\}$, the score is $2$. By using two operations on changing the interval of vulnerability of the first planet to be $[1,3]$, the two planets now both have the point $3$ in their interval.\n- For the subset $\\{[1,1], [2,3], [3,3]\\}$, the score is $2$. By using one operation on changing the interval of vulnerability of the first planet to be $[1,2]$ and one operation on changing the interval of vulnerability of the third planet to $[2,3]$, all three planets will have the point $2$ in their interval.\n\nThe sum of scores of all non-empty subsets of the first testcase is $0 \\cdot 4 + 1 \\cdot 1 + 2\\cdot2 = 5$.", "cfid": "2030G2"}
{"problem_id": "2018F3", "problem_title": "F3. Speedbreaker Counting (Hard Version)", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2018/F3", "problem_statement": "[NightHawk22 - Isolation](https://soundcloud.com/vepium/nighthawk22-isolation-official-limbo-remix)\n\n⠀\n\nThis is the hard version of the problem. In the three versions, the constraints on $n$ and the time limit are different. You can make hacks only if all the versions of the problem are solved.\n\nThis is the statement of Problem D1B:\n\n- There are $n$ cities in a row, numbered $1, 2, \\ldots, n$ left to right.\n\n  - At time $1$, you conquer exactly one city, called the starting city.\n  - At time $2, 3, \\ldots, n$, you can choose a city adjacent to the ones conquered so far and conquer it.\n\nYou win if, for each $i$, you conquer city $i$ at a time no later than $a_i$. A winning strategy may or may not exist, also depending on the starting city. How many starting cities allow you to win?\n\nFor each $0 \\leq k \\leq n$, count the number of arrays of positive integers $a_1, a_2, \\ldots, a_n$ such that\n\n- $1 \\leq a_i \\leq n$ for each $1 \\leq i \\leq n$;\n- the answer to Problem D1B is $k$.\n\nThe answer can be very large, so you have to calculate it modulo a given prime $p$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 3000$). The description of the test cases follows.\n\nThe only line of each test case contains two integers $n$, $p$ ($1 \\le n \\le 3000$, $10^8 \\leq p \\leq 10^9$, $p$ is prime) — the number of cities and the modulo.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $3000$.\n\n### Output\n\nFor each test case, output $n+1$ integers: the $i$-th integer should be the number of arrays that satisfy the conditions for $k = i-1$.\n\n### Example\n\n#### Input #1\n\n```\n\n11\n\n1 998244353\n\n2 998244353\n\n3 998244353\n\n4 998244353\n\n5 998244353\n\n6 998244353\n\n7 998244353\n\n8 998244353\n\n9 998244353\n\n10 102275857\n\n10 999662017\n\n```\n\n#### Output #1\n\n```\n0 1\n1 2 1\n14 7 4 2\n183 34 19 16 4\n2624 209 112 120 48 12\n42605 1546 793 992 468 216 36\n785910 13327 6556 9190 4672 2880 864 144\n16382863 130922 61939 94992 50100 36960 14256 4608 576\n382823936 1441729 657784 1086596 583344 488700 216000 96480 23040 2880\n20300780 17572114 7751377 13641280 7376068 6810552 3269700 1785600 576000 144000 14400\n944100756 17572114 7751377 13641280 7376068 6810552 3269700 1785600 576000 144000 14400\n```\n\n### Note\n\nIn the first test case,\n\n- arrays with $1$ good starting city: $[1]$.\n\nIn the second test case,\n\n- arrays with $0$ good starting cities: $[1, 1]$;\n- arrays with $1$ good starting city: $[1, 2]$, $[2, 1]$;\n- arrays with $2$ good starting cities: $[2, 2]$.\n\nIn the third test case,\n\n- arrays with $0$ good starting cities: $[1, 1, 1]$, $[1, 1, 2]$, $[1, 1, 3]$, $[1, 2, 1]$, $[1, 2, 2]$, $[1, 3, 1]$, $[1, 3, 2]$, $[2, 1, 1]$, $[2, 1, 2]$, $[2, 2, 1]$, $[2, 2, 2]$, $[2, 3, 1]$, $[2, 3, 2]$, $[3, 1, 1]$;\n- arrays with $1$ good starting city: $[1, 2, 3]$, $[1, 3, 3]$, $[2, 1, 3]$, $[3, 1, 2]$, $[3, 1, 3]$, $[3, 2, 1]$, $[3, 3, 1]$;\n- arrays with $2$ good starting cities: $[2, 2, 3]$, $[2, 3, 3]$, $[3, 2, 2]$, $[3, 3, 2]$;\n- arrays with $3$ good starting cities: $[3, 2, 3]$, $[3, 3, 3]$.", "cfid": "2018F3"}
{"problem_id": "2018E2", "problem_title": "E2. Complex Segments (Hard Version)", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2018/E2", "problem_statement": "[Ken Arai - COMPLEX](https://soundcloud.com/diatomichail2/complex)\n\n⠀\n\nThis is the hard version of the problem. In this version, the constraints on $n$ and the time limit are higher. You can make hacks only if both versions of the problem are solved.\n\nA set of (closed) segments is complex if it can be partitioned into some subsets such that\n\n- all the subsets have the same size; and\n- a pair of segments intersects if and only if the two segments are in the same subset.\n\nYou are given $n$ segments $[l_1, r_1], [l_2, r_2], \\ldots, [l_n, r_n]$. Find the maximum size of a complex subset of these segments.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^3$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 3 \\cdot 10^5$) — the number of segments.\n\nThe second line of each test case contains $n$ integers $l_1, l_2, \\ldots, l_n$ ($1 \\le l_i \\le 2n$) — the left endpoints of the segments.\n\nThe third line of each test case contains $n$ integers $r_1, r_2, \\ldots, r_n$ ($l_i \\leq r_i \\le 2n$) — the right endpoints of the segments.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $3 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer: the maximum size of a complex subset of the given segments.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3\n\n1 2 3\n\n5 4 6\n\n5\n\n1 2 3 6 8\n\n5 4 7 9 10\n\n5\n\n3 1 4 1 5\n\n7 2 6 5 10\n\n```\n\n#### Output #1\n\n```\n3\n4\n4\n```\n\n### Note\n\nIn the first test case, all pairs of segments intersect, therefore it is optimal to form a single group containing all of the three segments.\n\nIn the second test case, there is no valid partition for all of the five segments. A valid partition with four segments is the following: $\\{\\{ [1, 5], [2, 4] \\}, \\{ [6, 9], [8, 10] \\}\\}$.\n\nIn the third test case, it is optimal to make a single group containing all the segments except the second.", "cfid": "2018E2"}
{"problem_id": "2018E1", "problem_title": "E1. Complex Segments (Easy Version)", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2018/E1", "problem_statement": "[Ken Arai - COMPLEX](https://soundcloud.com/diatomichail2/complex)\n\n⠀\n\nThis is the easy version of the problem. In this version, the constraints on $n$ and the time limit are lower. You can make hacks only if both versions of the problem are solved.\n\nA set of (closed) segments is complex if it can be partitioned into some subsets such that\n\n- all the subsets have the same size; and\n- a pair of segments intersects if and only if the two segments are in the same subset.\n\nYou are given $n$ segments $[l_1, r_1], [l_2, r_2], \\ldots, [l_n, r_n]$. Find the maximum size of a complex subset of these segments.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^3$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^4$) — the number of segments.\n\nThe second line of each test case contains $n$ integers $l_1, l_2, \\ldots, l_n$ ($1 \\le l_i \\le 2n$) — the left endpoints of the segments.\n\nThe third line of each test case contains $n$ integers $r_1, r_2, \\ldots, r_n$ ($l_i \\leq r_i \\le 2n$) — the right endpoints of the segments.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^4$.\n\n### Output\n\nFor each test case, output a single integer: the maximum size of a complex subset of the given segments.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3\n\n1 2 3\n\n5 4 6\n\n5\n\n1 2 3 6 8\n\n5 4 7 9 10\n\n5\n\n3 1 4 1 5\n\n7 2 6 5 10\n\n```\n\n#### Output #1\n\n```\n3\n4\n4\n```\n\n### Note\n\nIn the first test case, all pairs of segments intersect, therefore it is optimal to form a single group containing all of the three segments.\n\nIn the second test case, there is no valid partition for all of the five segments. A valid partition with four segments is the following: $\\{\\{ [1, 5], [2, 4] \\}, \\{ [6, 9], [8, 10] \\}\\}$.\n\nIn the third test case, it is optimal to make a single group containing all the segments except the second.", "cfid": "2018E1"}
{"problem_id": "2013F2", "problem_title": "F2. Game in Tree (Hard Version)", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2013/F2", "problem_statement": "This is the hard version of the problem. In this version, it is not guaranteed that $u = v$. You can make hacks only if both versions of the problem are solved.\n\nAlice and Bob are playing a fun game on a tree. This game is played on a tree with $n$ vertices, numbered from $1$ to $n$. Recall that a tree with $n$ vertices is an undirected connected graph with $n - 1$ edges.\n\nAlice and Bob take turns, with Alice going first. Each player starts at some vertex.\n\nOn their turn, a player must move from the current vertex to a neighboring vertex that has not yet been visited by anyone. The first player who cannot make a move loses.\n\nYou are given two vertices $u$ and $v$. Represent the simple path from vertex $u$ to $v$ as an array $p_1, p_2, p_3, \\ldots, p_m$, where $p_1 = u$, $p_m = v$, and there is an edge between $p_i$ and $p_{i + 1}$ for all $i$ ($1 \\le i < m$).\n\nYou need to determine the winner of the game if Alice starts at vertex $1$ and Bob starts at vertex $p_j$ for each $j$ (where $1 \\le j \\le m$).\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$) — the number of vertices in the tree.\n\nEach of the following $n - 1$ lines contains two integers $a$ and $b$ ($1 \\le a, b \\le n$), denoting an undirected edge between vertices $a$ and $b$. It is guaranteed that these edges form a tree.\n\nThe last line of each test case contains two integers $u$ and $v$ ($2 \\le u, v \\le n$).\n\nIt is guaranteed that the path from $u$ to $v$ does not pass through vertex $1$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output $m$ lines.\n\nIn the $i$-th line, print the winner of the game if Alice starts at vertex $1$ and Bob starts at vertex $p_i$. Print \"Alice\" (without quotes) if Alice wins, or \"Bob\" (without quotes) otherwise.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3\n\n1 2\n\n2 3\n\n2 3\n\n6\n\n1 2\n\n1 3\n\n2 4\n\n2 5\n\n1 6\n\n4 5\n\n4\n\n1 2\n\n1 3\n\n2 4\n\n2 4\n\n```\n\n#### Output #1\n\n```\nBob\nAlice\nAlice\nBob\nAlice\nBob\nAlice\n```\n\n### Note\n\n![](https://espresso.codeforces.com/3e136e9d5bd48b60011d61cf8ff37b5dbf7ba31b.png)Tree from the first example.\n\nIn the first test case, the path will be ($2,3$). If Bob starts at vertex $2$, Alice will not be able to move anywhere on her first turn and will lose.\n\nHowever, if Bob starts at vertex $3$, Alice will move to vertex $2$, and Bob will have no remaining vertices to visit and will lose.", "cfid": "2013F2"}
{"problem_id": "2006E", "problem_title": "E. Iris's Full Binary Tree", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2006/E", "problem_statement": "Iris likes full binary trees.\n\nLet's define the depth of a rooted tree as the maximum number of vertices on the simple paths from some vertex to the root. A full binary tree of depth $d$ is a binary tree of depth $d$ with exactly $2^d - 1$ vertices.\n\nIris calls a tree a $d$-binary tree if some vertices and edges can be added to it to make it a full binary tree of depth $d$. Note that any vertex can be chosen as the root of a full binary tree.\n\nSince performing operations on large trees is difficult, she defines the binary depth of a tree as the minimum $d$ satisfying that the tree is $d$-binary. Specifically, if there is no integer $d \\ge 1$ such that the tree is $d$-binary, the binary depth of the tree is $-1$.\n\nIris now has a tree consisting of only vertex $1$. She wants to add $n - 1$ more vertices to form a larger tree. She will add the vertices one by one. When she adds vertex $i$ ($2 \\leq i \\leq n$), she'll give you an integer $p_i$ ($1 \\leq p_i < i$), and add a new edge connecting vertices $i$ and $p_i$.\n\nIris wants to ask you the binary depth of the tree formed by the first $i$ vertices for each $1 \\le i \\le n$. Can you tell her the answer?\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\leq n \\leq 5 \\cdot 10^5$) — the final size of the tree.\n\nThe second line of each test case contains $n - 1$ integers $p_2, p_3, \\ldots, p_n$ ($1 \\leq p_i < i$) — descriptions of all edges of the tree.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5 \\cdot 10^5$.\n\n### Output\n\nFor each test case output $n$ integers, $i$-th of them representing the binary depth of the tree formed by the first $i$ vertices.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n3\n\n1 1\n\n6\n\n1 2 3 4 5\n\n7\n\n1 1 3 2 5 1\n\n10\n\n1 1 2 1 4 2 4 5 8\n\n10\n\n1 1 3 1 3 2 2 2 6\n\n20\n\n1 1 2 2 4 4 5 5 7 6 8 6 11 14 11 8 13 13 12\n\n25\n\n1 1 3 3 1 5 4 4 6 8 11 12 8 7 11 13 7 13 15 6 19 14 10 23\n\n```\n\n#### Output #1\n\n```\n1 2 2\n1 2 2 3 3 4\n1 2 2 3 3 4 4\n1 2 2 3 3 3 4 4 5 5\n1 2 2 3 3 4 4 4 -1 -1\n1 2 2 3 3 4 4 4 4 5 5 5 5 6 6 6 6 6 6 7\n1 2 2 3 3 4 4 4 4 5 5 6 6 6 6 6 7 7 7 7 7 8 8 8 8\n```\n\n### Note\n\nIn the first test case, the final tree is shown below:\n\n![](https://espresso.codeforces.com/d62b445c05dfc5bf14c40cd1d3da43d4ef402707.png)\n\n- The tree consisting of the vertex $1$ has the binary depth $1$ (the tree itself is a full binary tree of depth $1$).\n- The tree consisting of the vertices $1$ and $2$ has the binary depth $2$ (we can add the vertex $3$ to make it a full binary tree of depth $2$).\n- The tree consisting of the vertices $1$, $2$ and $3$ has the binary depth $2$ (the tree itself is a full binary tree of depth $2$).\n\nIn the second test case, the formed full binary tree after adding some vertices to the tree consisting of $n$ vertices is shown below (bolded vertices are added):\n\n![](https://espresso.codeforces.com/0628a5b5b13ffcb4ebe7c161717c07026ee98a73.png)\n\nThe depth of the formed full binary tree is $4$.\n\nIn the fifth test case, the final tree is shown below:\n\n![](https://espresso.codeforces.com/9c0c9a3e360637b5c1cb6f6e2a16420cbc494a05.png)\n\nIt can be proved that Iris can't form any full binary tree by adding vertices and edges, so the binary depth is $-1$.", "cfid": "2006E"}
{"problem_id": "2006F", "problem_title": "F. Dora's Paint", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2006/F", "problem_statement": "Sadly, Dora poured the paint when painting the class mural. Dora considers the mural as the matrix $b$ of size $n \\times n$. Initially, $b_{i,j} = 0$ for all $1 \\le i, j \\le n$.\n\nDora has only two brushes which have two different colors. In one operation, she can paint the matrix with one of two brushes:\n\n- The first brush has color $1$ on it and can paint one column of the matrix. That is, Dora chooses $1 \\leq j \\leq n$ and makes $b_{i,j} := 1$ for all $1 \\leq i \\leq n$;\n- The second brush has color $2$ on it and can paint one row of the matrix. That is, Dora chooses $1 \\leq i \\leq n$ and makes $b_{i,j} := 2$ for all $1 \\leq j \\leq n$.\n\nDora paints the matrix so that the resulting matrix $b$ contains only $1$ and $2$.\n\nFor a matrix $b$, let $f(b)$ denote the minimum number of operations needed to turn the initial matrix (containing only $0$) into $b$. The beauty of a matrix $b$ is the number of ways to paint the initial matrix in exactly $f(b)$ operations to turn it into $b$. If there's no way to turn the initial matrix into $b$, the beauty of $b$ is $0$.\n\nHowever, Dora made a uniformly random mistake; there's exactly one element different in the matrix $a$ given to you from the real matrix $b$. That is, there is exactly one pair $(i, j)$ such that $a_{i, j} = 3 - b_{i, j}$.\n\nPlease help Dora compute the expected beauty of the real matrix $b$ modulo $998\\,244\\,353$ (all possible $n^2$ mistakes have equal probability).\n\nSince the size of the matrix is too large, Dora will only tell you the positions of $m$ elements of color $1$, and the remaining $n^2-m$ elements have color $2$.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($2 \\leq n \\leq 2 \\cdot 10^5$, $0 \\leq m \\leq \\min(10^6, n^2)$) — the size of the matrix and the number of elements of color $1$.\n\nThen $m$ lines follow, each containing two positive integers $x_i$ and $y_i$ ($1 \\leq x_i, y_i \\leq n$) — denoting that $a_{x_i, y_i} = 1$.\n\nIt is guaranteed that if $i \\neq j$, then $(x_i, y_i) \\neq (x_j, y_j)$.\n\nIt is also guaranteed that the sum of $n$ over all test cases does not exceed $4\\cdot10^5$, and the sum of $m$ over all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case, output a single integer — the expected beauty of the real matrix $b$, modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n2 2\n\n1 1\n\n1 2\n\n2 1\n\n1 1\n\n3 2\n\n1 1\n\n3 3\n\n6 0\n\n5 10\n\n1 1\n\n1 2\n\n1 3\n\n2 1\n\n2 3\n\n5 1\n\n5 2\n\n5 3\n\n5 4\n\n5 5\n\n3 5\n\n1 1\n\n1 3\n\n2 2\n\n3 1\n\n3 3\n\n4 3\n\n1 1\n\n2 3\n\n2 4\n\n```\n\n#### Output #1\n\n```\n1\n499122178\n665496236\n120\n79859554\n776412275\n1\n```\n\n### Note\n\nIn the first test case, the matrix $a = \\left[\\begin{matrix}1&1\\\\2&2\\end{matrix}\\right]$. Let's consider changing the element $(1,1)$ to calculate the answer.\n\nIt can be proved that the minimum steps to paint the initial matrix into $\\left[\\begin{matrix}2&1\\\\2&2\\end{matrix}\\right]$ is $3$. We can first paint the first row into color $2$, then paint the second column into color $1$, and finally paint the second row into color $2$. The process is listed below:\n\n\n\n$$\\left[\\begin{matrix}0&0\\\\0&0\\end{matrix}\\right]\\Rightarrow\\left[\\begin{matrix}2&2\\\\0&0\\end{matrix}\\right]\\Rightarrow\\left[\\begin{matrix}2&1\\\\0&1\\end{matrix}\\right]\\Rightarrow\\left[\\begin{matrix}2&1\\\\2&2\\end{matrix}\\right]$$\n\nIt can be proved that this is the only way to paint the matrix in $3$ steps. So the beauty of the matrix $\\left[\\begin{matrix}2&1\\\\2&2\\end{matrix}\\right]$ is $1$. Similarly, if any other element of the matrix is changed, the beauty is always $1$, so the expected beauty of the real matrix $b$ is $1$.\n\nIn the second test case, the matrix $a = \\left[\\begin{matrix}1&2\\\\2&2\\end{matrix}\\right]$. Let's consider changing the element $(2, 2)$ to calculate the answer.\n\nIt can be proven that it's impossible to paint the initial matrix into $\\left[\\begin{matrix}1&2\\\\2&1\\end{matrix}\\right]$, so its beauty is $0$. If any other element of the matrix is changed, the beauty is always $2$, so the expected beauty is $\\frac{0 + 2 + 2 + 2}{4} = \\frac{6}{4} \\equiv 499\\,122\\,178 \\pmod {998\\,244\\,353}$.", "cfid": "2006F"}
{"problem_id": "2004G", "problem_title": "G. Substring Compression", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2004/G", "problem_statement": "Let's define the operation of compressing a string $t$, consisting of at least $2$ digits from $1$ to $9$, as follows:\n\n- split it into an even number of non-empty substrings — let these substrings be $t_1, t_2, \\dots, t_m$ (so, $t = t_1 + t_2 + \\dots + t_m$, where $+$ is the concatenation operation);\n- write the string $t_2$ $t_1$ times, then the string $t_4$ $t_3$ times, and so on.\n\nFor example, for a string \"12345\", one could do the following: split it into (\"1\", \"23\", \"4\", \"5\"), and write \"235555\".\n\nLet the function $f(t)$ for a string $t$ return the minimum length of the string that can be obtained as a result of that process.\n\nYou are given a string $s$, consisting of $n$ digits from $1$ to $9$, and an integer $k$. Calculate the value of the function $f$ for all contiguous substrings of $s$ of length exactly $k$.\n\n### Input\n\nThe first line contains two integers $n$ and $k$ ($2 \\le k \\le n \\le 2 \\cdot 10^5$).\n\nThe second line contains the string $s$ ($|s| = n$), consisting only of digits from $1$ to $9$.\n\n### Output\n\nOutput $n - k + 1$ integers — $f(s_{1,k}), f(s_{2,k+1}), \\dots, f(s_{n - k + 1, n})$.\n\n### Examples\n\n#### Input #1\n\n```\n\n4 4\n\n5999\n\n```\n\n#### Output #1\n\n```\n14\n```\n\n#### Input #2\n\n```\n\n10 3\n\n1111111111\n\n```\n\n#### Output #2\n\n```\n2 2 2 2 2 2 2 2\n```\n\n#### Input #3\n\n```\n\n11 4\n\n49998641312\n\n```\n\n#### Output #3\n\n```\n12 18 17 15 12 7 7 2\n```", "cfid": "2004G"}
{"problem_id": "2002G", "problem_title": "G. Lattice Optimizing", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2002/G", "problem_statement": "Consider a grid graph with $n$ rows and $n$ columns. Let the cell in row $x$ and column $y$ be $(x,y)$. There exists a directed edge from $(x,y)$ to $(x+1,y)$, with non-negative integer value $d_{x,y}$, for all $1\\le x < n, 1\\le y \\le n$, and there also exists a directed edge from $(x,y)$ to $(x,y+1)$, with non-negative integer value $r_{x,y}$, for all $1\\le x \\le n, 1\\le y < n$.\n\nInitially, you are at $(1,1)$, with an empty set $S$. You need to walk along the edges and eventually reach $(n,n)$. Whenever you pass an edge, its value will be inserted into $S$. Please maximize the MEX$^{\\text{∗}}$ of $S$ when you reach $(n,n)$.\n\n$^{\\text{∗}}$The MEX (minimum excluded) of an array is the smallest non-negative integer that does not belong to the array. For instance:\n\n- The MEX of $[2,2,1]$ is $0$, because $0$ does not belong to the array.\n- The MEX of $[3,1,0,1]$ is $2$, because $0$ and $1$ belong to the array, but $2$ does not.\n- The MEX of $[0,3,1,2]$ is $4$, because $0, 1, 2$, and $3$ belong to the array, but $4$ does not.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1\\le t\\le100$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2\\le n\\le20$) — the number of rows and columns.\n\nEach of the next $n-1$ lines contains $n$ integers separated by single spaces — the matrix $d$ ($0\\le d_{x,y}\\le 2n-2$).\n\nEach of the next $n$ lines contains $n-1$ integers separated by single spaces — the matrix $r$ ($0\\le r_{x,y}\\le 2n-2$).\n\nIt is guaranteed that the sum of all $n^3$ does not exceed $8000$.\n\n### Output\n\nFor each test case, print a single integer — the maximum MEX of $S$ when you reach $(n,n)$.\n\n### Examples\n\n#### Input #1\n\n```\n\n2\n\n3\n\n1 0 2\n\n0 1 3\n\n2 1\n\n0 3\n\n3 0\n\n3\n\n1 2 0\n\n0 1 2\n\n2 0\n\n1 2\n\n0 1\n\n```\n\n#### Output #1\n\n```\n3\n2\n```\n\n#### Input #2\n\n```\n\n1\n\n10\n\n16 7 3 15 9 17 1 15 9 0\n\n4 3 1 12 13 10 10 14 6 12\n\n3 1 3 9 5 16 0 12 7 12\n\n11 4 8 7 13 7 15 13 9 2\n\n2 3 9 9 4 12 17 7 10 15\n\n10 6 15 17 13 6 15 9 4 9\n\n13 3 3 14 1 2 10 10 12 16\n\n8 2 9 13 18 7 1 6 2 6\n\n15 12 2 6 0 0 13 3 7 17\n\n7 3 17 17 10 15 12 14 15\n\n4 3 3 17 3 13 11 16 6\n\n16 17 7 7 12 5 2 4 10\n\n18 9 9 3 5 9 1 16 7\n\n1 0 4 2 10 10 12 2 1\n\n4 14 15 16 15 5 8 4 18\n\n7 18 10 11 2 0 14 8 18\n\n2 17 6 0 9 6 13 5 11\n\n5 15 7 11 6 3 17 14 5\n\n1 3 16 16 13 1 0 13 11\n\n```\n\n#### Output #2\n\n```\n14\n```\n\n### Note\n\nIn the first test case, the grid graph and one of the optimal paths are as follows:\n\n![](https://espresso.codeforces.com/c1907d79493b617ac51cae9796050166fbf0cb91.png)\n\nIn the second test case, the grid graph and one of the optimal paths are as follows:\n\n![](https://espresso.codeforces.com/6f2a31df5ad271191675e6ef9e0833bb1602d23e.png)", "cfid": "2002G"}
{"problem_id": "2002H", "problem_title": "H. Counting 101", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2002/H", "problem_statement": "It's been a long summer's day, with the constant chirping of cicadas and the heat which never seemed to end. Finally, it has drawn to a close. The showdown has passed, the gates are open, and only a gentle breeze is left behind.\n\nYour predecessors had taken their final bow; it's your turn to take the stage.\n\nSorting through some notes that were left behind, you found a curious statement named Problem 101:\n\n- Given a positive integer sequence $a_1,a_2,\\ldots,a_n$, you can operate on it any number of times. In an operation, you choose three consecutive elements $a_i,a_{i+1},a_{i+2}$, and merge them into one element $\\max(a_i+1,a_{i+1},a_{i+2}+1)$. Please calculate the maximum number of operations you can do without creating an element greater than $m$.\n\nAfter some thought, you decided to propose the following problem, named Counting 101:\n\n- Given $n$ and $m$. For each $k=0,1,\\ldots,\\left\\lfloor\\frac{n-1}{2}\\right\\rfloor$, please find the number of integer sequences $a_1,a_2,\\ldots,a_n$ with elements in $[1, m]$, such that when used as input for Problem 101, the answer is $k$. As the answer can be very large, please print it modulo $10^9+7$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1\\le t\\le10^3$). The description of the test cases follows.\n\nThe only line of each test case contains two integers $n$, $m$ ($1\\le n\\le 130$, $1\\le m\\le 30$).\n\n### Output\n\nFor each test case, output $\\left\\lfloor\\frac{n+1}{2}\\right\\rfloor$ numbers. The $i$-th number is the number of valid sequences such that when used as input for Problem 101, the answer is $i-1$, modulo $10^9+7$.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n3 2\n\n10 10\n\n```\n\n#### Output #1\n\n```\n6 2\n1590121 23399118 382293180 213020758 379696760\n```\n\n### Note\n\nIn the first test case, there are $2^3=8$ candidate sequences. Among them, you can operate on $[1,2,1]$ and $[1,1,1]$ once; you cannot operate on the other $6$ sequences.", "cfid": "2002H"}
{"problem_id": "1991H", "problem_title": "H. Prime Split Game", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1991/H", "problem_statement": "Alice and Bob are playing a game with $n$ piles of stones, where the $i$-th pile has $a_i$ stones. Players take turns making moves, with Alice going first.\n\nOn each move, the player does the following three-step process:\n\n1. Choose an integer $k$ ($1 \\leq k \\leq \\frac n 2$). Note that the value of $k$ can be different for different moves.\n2. Remove $k$ piles of stones.\n3. Choose another $k$ piles of stones and split each pile into two piles. The number of stones in each new pile must be a prime number.\n\nThe player who is unable to make a move loses.\n\nDetermine who will win if both players play optimally.\n\n### Input\n\nEach test contains multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. The description of test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$) — the number of piles of stones.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 2 \\cdot 10^5$) — the number of stones in the piles.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output \"Alice\" (without quotes) if Alice wins and \"Bob\" (without quotes) otherwise.\n\nYou can output each letter in any case (upper or lower). For example, the strings \"alIcE\", \"Alice\", and \"alice\" will all be considered identical.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2\n\n2 1\n\n3\n\n3 5 7\n\n4\n\n4 6 8 10\n\n5\n\n8 8 8 8 8\n\n```\n\n#### Output #1\n\n```\nBob\nAlice\nAlice\nBob\n```\n\n### Note\n\nIn the first test case, there are $2$ piles of stones with $2$ and $1$ stones respectively. Since neither $1$ nor $2$ can be split into two prime numbers, Alice cannot make a move, so Bob wins.\n\nIn the second test case, there are $3$ piles of stones with $3$, $5$, and $7$ stones respectively. Alice can choose $k = 1$, remove the pile of $7$ stones, and then split the pile of $5$ stones into two piles of prime numbers of stones, $2$ and $3$. Then, the piles consist of $3$ piles of stones with $3$, $2$, and $3$ stones respectively, leaving Bob with no valid moves, so Alice wins.\n\nIn the third test case, there are $4$ piles of stones with $4$, $6$, $8$, and $10$ stones respectively. Alice can choose $k = 2$, removing two piles of $8$ and $10$ stones. She splits the pile of $4$ stones into two piles of prime numbers of stones, $2$ and $2$, and the pile of $6$ stones into two piles of $3$ and $3$ stones. Then, Bob has no valid moves, so Alice wins.\n\nIn the fourth test case, there are $5$ piles of stones, each containing $8$ stones. It can be shown that if both players play optimally, Bob will win.", "cfid": "1991H"}
{"problem_id": "1991I", "problem_title": "I. Grid Game", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1991/I", "problem_statement": "This is an interactive problem.\n\nYou are given a grid with $n$ rows and $m$ columns. You need to fill each cell with a unique integer from $1$ to $n \\cdot m$.\n\nAfter filling the grid, you will play a game on this grid against the interactor. Players take turns selecting one of the previously unselected cells from the grid, with the interactor going first.\n\nOn the first turn, the interactor can choose any cell from the grid. After that, any chosen cell must be orthogonally adjacent to at least one previously selected cell. Two cells are considered orthogonally adjacent if they share an edge. The game continues until all cells have been selected.\n\nYour goal is to let the sum of numbers in the cells selected by you be strictly less than the sum of numbers in the cells selected by the interactor.\n\n### Input\n\nEach test contains multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 100$) — the number of test cases. The description of test cases follows.\n\nThe only line of each test case contains two integers $n$ and $m$ ($4 \\le n, m \\le 10$) — the number of rows and columns in the grid.\n\n### Interaction\n\nFirst, output $n$ lines, each containing $m$ integers, representing the integers that you filled in the grid. Each integer from $1$ to $n \\cdot m$ should appear exactly once.\n\nThen, the game begins. The interactor and you take turns outputting coordinates to select a cell for $n \\times m$ turns, with the interactor starting first.\n\nOn each player's (either you or the interactor) turn, the player will output two integers $i$ and $j$ ($1 \\le i \\le n$, $1 \\le j \\le m$), denoting that the player has selected the cell on the $i$-th row and $j$-th column. This cell should not have been selected in a previous round. Additionally, if it is not the first turn, the cell must be orthogonally adjacent to at least one previously selected cell.\n\nIf any of your outputs are invalid, the jury will output \"-1\" and you will receive a Wrong Answer verdict.\n\nAt the end of all $n \\cdot m$ turns, if the sum of numbers in the cells selected by you is not strictly less than the sum of numbers in the cells selected by the interactor, the jury will output \"-1\" and you will receive a Wrong Answer verdict.\n\nIf your program has received a Wrong Answer verdict, it must terminate immediately. Otherwise, you may receive an arbitrary verdict because your solution might be reading from a closed stream.\n\nAfter outputting, do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- flush(output) in Pascal;\n- stdout.flush() in Python;\n- see documentation for other languages.\n\nIn this problem, hacks are disabled.\n\n### Example\n\n#### Input #1\n\n```\n1\n4 4\n\n3 4\n\n4 4\n\n4 2\n\n4 1\n\n1 4\n\n1 2\n\n2 2\n\n2 1\n\n```\n\n#### Output #1\n\n```\n\n2 3 4 10\n12 6 11 15\n5 13 16 8\n9 7 1 14\n\n2 4\n\n4 3\n\n3 3\n\n3 1\n\n1 3\n\n1 1\n\n2 3\n\n3 2```\n\n### Note\n\nNote that this is an example game and does not necessarily represent the optimal strategy for both players.\n\nFirst, we fill a $4 \\times 4$ grid with unique integers from $1$ to $16$ in the following way:\n\n$2\n\n$$3$$\n\n4\n\n$$10$$\n\n12\n\n$$6$$\n\n11\n\n$$15$$\n\n5\n\n$$13$$\n\n16\n\n$$8$$\n\n9\n\n$$7$$\n\n1$$14$\n\nNext, the game begins.\n\n1. The interactor first selects $(3, 4)$, which is the number $8$. For this selection, the interactor could choose any number. From the next selection onwards, each chosen number has to be adjacent to any previously selected number.\n2. We select $(2, 4)$, which is the number $15$, adjacent to $(3, 4)$.\n3. The interactor selects $(4, 4)$, which is the number $14$, adjacent to $(3, 4)$.\n4. We select $(4, 3)$, which is the number $1$, adjacent to $(4, 4)$.\n5. $\\ldots$\n6. This is continued until all numbers are selected.\n\nIn the end, the numbers we selected were $[15, 1, 16, 5, 4, 2, 11, 13]$, and the numbers selected by the interactor were $[8, 14, 7, 9, 10, 3, 6, 12]$. The sum of the numbers we selected is $67$, which is less than the sum of the numbers selected by the interactor $69$. Therefore, we have won this game.", "cfid": "1991I"}
{"problem_id": "1994H", "problem_title": "H. Fortnite", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/1994/H", "problem_statement": "This is an interactive problem!\n\nTimofey is writing a competition called Capture the Flag (or CTF for short). He has one task left, which involves hacking a security system. The entire system is based on polynomial hashes$^{\\text{∗}}$.\n\nTimofey can input a string consisting of lowercase Latin letters into the system, and the system will return its polynomial hash. To hack the system, Timofey needs to find the polynomial hash parameters ($p$ and $m$) that the system uses.\n\nTimofey doesn't have much time left, so he will only be able to make $3$ queries. Help him solve the task.\n\n$^{\\text{∗}}$ The polynomial hash of a string $s$, consisting of lowercase Latin letters of length $n$, based on $p$ and modulo $m$ is $(\\mathrm{ord}(s_1) \\cdot p ^ 0 + \\mathrm{ord}(s_2) \\cdot p ^ 1 + \\mathrm{ord}(s_3) \\cdot p ^ 2 + \\ldots + \\mathrm{ord}(s_n) \\cdot p ^ {n - 1}) \\bmod m$. Where $s_i$ denotes the $i$-th character of the string $s$, $\\mathrm{ord}(\\mathrm{chr})$ denotes the ordinal number of the character $\\mathrm{chr}$ in the English alphabet, and $x \\bmod m$ is the remainder of $x$ when divided by $m$.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains an integer $t$ ($1 \\leq t \\leq 10^3$) — the number of test cases.\n\nIt is guaranteed that the $p$ and $m$ used by the system satisfy the conditions: $26 < p \\leq 50$ and $p + 1 < m \\leq 2 \\cdot 10^9$.\n\n### Interaction\n\nTo make a query to the system, output ? $s$, where $s$ is a string of no more than $50$ characters in length, the hash of which you want to know. In response to this query, you will receive the polynomial hash of the string $s$.\n\nTo output the answer, output ! $p$ $m$, where $p$ is the base of the hash, and $m$ is the modulus. After that, immediately proceed to the next test case.\n\nYou have to make not more than $3$ queries ?, otherwise you will get verdict Wrong Answer.\n\nAfter outputting a query, do not forget to output a newline and flush the output buffer. Otherwise, you will receive the verdict Idleness limit exceeded. To flush the buffer, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- flush(output) in Pascal;\n- stdout.flush() in Python;\n- see the documentation for other languages.\n\n### Example\n\n#### Input #1\n\n```\n1\n\n32\n\n28```\n\n#### Output #1\n\n```\n? aa\n\n? yb\n\n! 31 59```\n\n### Note\n\nAnswer for the first query is $(ord(a) \\cdot 31^0 + ord(a) \\cdot 31^1) \\mod 59 = (1 + 1 \\cdot 31) \\mod 59 = 32$.\n\nAnswer for the second query is $(ord(y) \\cdot 31^0 + ord(b) \\cdot 31^1) \\mod 59 = (25 + 2 \\cdot 31) \\mod 59 = 28$.", "cfid": "1994H"}
{"problem_id": "2092D", "problem_title": "D. Mishkin Energizer", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2092/D", "problem_statement": "In anticipation of a duel with his old friend Fernan, Edmond is preparing an energy drink called \"Mishkin Energizer\". The drink consists of a string $s$ of length $n$, made up only of the characters L, I, and T, which correspond to the content of three different substances in the drink.\n\nWe call the drink balanced if it contains an equal number of all substances. To boost his aura and ensure victory in the duel, Edmond must make the initial string balanced by applying the following operation:\n\n1. Choose an index $i$ such that $s_i \\neq s_{i+1}$ (where $i + 1$ must not exceed the current size of the string).\n2. Insert a character $x$, either L, I, or T, between them such that $x \\neq s_i$ and $x \\neq s_{i+1}$.\n\nHelp Edmond make the drink balanced and win the duel by performing no more than $\\textbf{2n}$ operations. If there are multiple solutions, any one of them can be output. If it is impossible, you must report this.\n\n### Input\n\nEach test consists of several test cases. The first line of the input data contains one integer $t$ ($1 \\le t \\le 100$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains one integer $n$ ($1 \\le n \\le 100$) — the length of the string $s$.\n\nThe second line of each test case contains a string $s$ of length $n$, consisting only of the characters L, I, and T.\n\n### Output\n\nFor each test case, output $-1$ if there is no solution. Otherwise, in the first line, output a single integer $m$ ($0 \\le m \\le 2n$) — the number of operations you performed.\n\nThen the $l$-th of the following $m$ lines should contain a single integer $i$ ($1 \\le i < n+l-1$), indicating the operation of inserting a character between $s_i$ and $s_{i+1}$. It must hold that $s_i \\neq s_{i+1}$.\n\nIf there are multiple solutions, any one of them can be output. Note that you do not need to minimize the number of operations in this problem.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n5\n\nTILII\n\n1\n\nL\n\n3\n\nLIT\n\n```\n\n#### Output #1\n\n```\n4\n1\n2\n3\n4\n-1\n0\n```\n\n### Note\n\nIn the first test case, the following sequence of operations can be performed: TILII $\\rightarrow$ TLILII $\\rightarrow$ TLTILII $\\rightarrow$ TLTLILII $\\rightarrow$ TLTLTILII.\n\nIn the second test case, no operations can be performed, so the answer is $-1$.\n\nIn the third test case, the initial string already has equal quantities of all substances.", "cfid": "2092D"}
{"problem_id": "2092B", "problem_title": "B. Lady Bug", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2092/B", "problem_statement": "As soon as Dasha Purova crossed the border of France, the villain Markaron kidnapped her and placed her in a prison under his large castle. Fortunately, the wonderful Lady Bug, upon hearing the news about Dasha, immediately ran to save her in Markaron's castle. However, to get there, she needs to crack a complex password.\n\nThe password consists of two bit strings $a$ and $b$, each of which has a length of $n$. In one operation, Lady Bug can choose any index $2 \\le i \\le n$ and perform one of the following actions:\n\n1. swap($a_i$, $b_{i-1}$) (swap the values of $a_i$ and $b_{i-1}$), or\n2. swap($b_i$, $a_{i-1}$) (swap the values of $b_i$ and $a_{i-1}$).\n\nLady Bug can perform any number of operations. The password is considered cracked if she can ensure that the first string consists only of zeros. Help her understand whether or not she will be able to save the unfortunate Dasha.\n\n### Input\n\nEach test consists of several test cases. The first line of the input data contains one integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains one integer $n$ ($2 \\leq n \\leq 2 \\cdot 10^5$) — the length of the bit strings of the password.\n\nThe next two lines contain the bit strings of length $n$, $a$ and $b$, which represent the password. Each of the strings contains only the characters 0 and '1'.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output \"YES\" if Lady Bug can crack the password after any number of operations; otherwise, output \"NO\".\n\nYou can output each letter in any case (lowercase or uppercase). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be accepted as a positive answer.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3\n\n000\n\n000\n\n6\n\n010001\n\n010111\n\n5\n\n10000\n\n01010\n\n2\n\n11\n\n00\n\n```\n\n#### Output #1\n\n```\nYES\nYES\nNO\nYES\n```\n\n### Note\n\nIn the first test case, the string $a$ immediately consists only of zeros.\n\nIn the second test case, a possible sequence of operations is:\n\n1. swap$(a_2, \\ b_{1})$\n\n$\\mathtt{0{\\color{red}{1}}0001}$\n\n$\\mathtt{{\\color{red}{0}}10111}$\n\n2. swap$(b_5, \\ a_{4})$\n\n$\\mathtt{000{\\color{red}{0}}01}$\n\n$\\mathtt{1101{\\color{red}{1}}1}$\n\n3. swap$(a_4, \\ b_{3})$\n\n$\\mathtt{000{\\color{red}{1}}01}$\n\n$\\mathtt{11{\\color{red}{0}}101}$\n\n4. swap$(a_5, \\ b_{4})$\n\n$\\mathtt{00000{\\color{red}{1}}}$\n\n$\\mathtt{1111{\\color{red}{0}}1}$", "cfid": "2092B"}
{"problem_id": "2092C", "problem_title": "C. Asuna and the Mosquitoes", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2092/C", "problem_statement": "For her birthday, each of Asuna's $n$ admirers gifted her a tower. The height of the tower from the $i$-th admirer is equal to $a_i$.\n\nAsuna evaluates the beauty of the received gifts as $\\max(a_1, a_2, \\ldots, a_n)$. She can perform the following operation an arbitrary number of times (possibly, zero).\n\n- Take such $1 \\le i \\neq j \\le n$ that $a_i + a_j$ is odd and $a_i > 0$, then decrease $a_i$ by $1$ and increase $a_j$ by $1$.\n\nIt is easy to see that the heights of the towers remain non-negative during the operations.\n\nHelp Asuna find the maximum possible beauty of the gifts after any number of operations!\n\n### Input\n\nEach test consists of several test cases. The first line of the input data contains one integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\leq n \\leq 2 \\cdot 10^5$) — the number of admirers of Asuna.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n \\ (1 \\le a_i \\le 10^9)$ — the heights of the towers.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer: the maximum value of the beauty of the gifts that Asuna can achieve.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3\n\n5 3 9\n\n2\n\n3 2\n\n4\n\n1 2 2 1\n\n5\n\n5 4 3 2 9\n\n```\n\n#### Output #1\n\n```\n9\n5\n5\n21\n```\n\n### Note\n\nIn the first test case, no pair of towers satisfies the required condition for applying the operation, so no operations can be performed. In this case, the answer is $\\max(5, \\ 3, \\ 9) = 9$.\n\nIn the second test case, the operation with $i = 2$ and $j = 1$ can be applied twice. After that, the array becomes: $a \\ = \\ [5, \\ 0]$. Thus, the answer is 5.\n\nIn the third test case, the following sequence of operations can be applied:\n\n1. Operation with $i=1$ and $j=2$.\n$[1, \\ 2, \\ 2, \\ 1] \\quad \\rightarrow \\quad [0, \\ 3, \\ 2, \\ 1]$\n\n2. Operation with $i=3$ and $j=2$.\n$[0, \\ 3, \\ 2, \\ 1] \\quad \\rightarrow \\quad [0, \\ 4, \\ 1, \\ 1]$\n\n3. Operation with $i=3$ and $j=2$.\n$[0, \\ 4, \\ 1, \\ 1] \\quad \\rightarrow \\quad [0, \\ 5, \\ 0, \\ 1]$\n\n\n$\\max(0, \\ 5, \\ 0, \\ 1) \\ = \\ 5$.\n\nTherefore, the answer is 5.", "cfid": "2092C"}
{"problem_id": "2092A", "problem_title": "A. Kamilka and the Sheep", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2092/A", "problem_statement": "Kamilka has a flock of $n$ sheep, the $i$-th of which has a beauty level of $a_i$. All $a_i$ are distinct. Morning has come, which means they need to be fed. Kamilka can choose a non-negative integer $d$ and give each sheep $d$ bunches of grass. After that, the beauty level of each sheep increases by $d$.\n\nIn the evening, Kamilka must choose exactly two sheep and take them to the mountains. If the beauty levels of these two sheep are $x$ and $y$ (after they have been fed), then Kamilka's pleasure from the walk is equal to $\\gcd(x, y)$, where $\\gcd(x, y)$ denotes the [greatest common divisor (GCD)](https://en.wikipedia.org/wiki/Greatest_common_divisor) of integers $x$ and $y$.\n\nThe task is to find the maximum possible pleasure that Kamilka can get from the walk.\n\n### Input\n\nEach test consists of several test cases. The first line contains one integer $t$ ($1 \\le t \\le 500$), the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains one integer $n$ ($2 \\leq n \\leq 100$), the number of sheep Kamilka has.\n\nThe second line of each test case contains $n$ distinct integers $a_1, a_2, \\ldots, a_n \\ (1 \\le a_i \\le 10^9)$ — the beauty levels of the sheep.\n\nIt is guaranteed that all $a_i$ are distinct.\n\n### Output\n\nFor each test case, output a single integer: the maximum possible pleasure that Kamilka can get from the walk.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2\n\n1 3\n\n5\n\n5 4 3 2 1\n\n3\n\n5 6 7\n\n3\n\n1 11 10\n\n```\n\n#### Output #1\n\n```\n2\n4\n2\n10\n```\n\n### Note\n\nIn the first test case, $d=1$ works. In this case, the pleasure is $\\gcd(1+1, \\ 1+3)=\\gcd(2, \\ 4)=2$. It can be shown that a greater answer cannot be obtained.\n\nIn the second test case, let's take $d=3$. In this case, the pleasure is $\\gcd(1+3, \\ 5+3)=\\gcd(4, \\ 8)=4$. Thus, for this test case, the answer is $4$.", "cfid": "2092A"}
{"problem_id": "2091B", "problem_title": "B. Team Training", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2091/B", "problem_statement": "At the IT Campus \"NEIMARK\", there are training sessions in competitive programming — both individual and team-based!\n\nFor the next team training session, $n$ students will attend, and the skill of the $i$-th student is given by a positive integer $a_i$.\n\nThe coach considers a team strong if its strength is at least $x$. The strength of a team is calculated as the number of team members multiplied by the minimum skill among the team members.\n\nFor example, if a team consists of $4$ members with skills $[5, 3, 6, 8]$, then the team's strength is $4 \\cdot min([5, 3, 6, 8]) = 12$.\n\nOutput the maximum possible number of strong teams, given that each team must have at least one participant and every participant must belong to exactly one team.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\leq t \\leq 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $x$ ($1 \\leq n \\leq 2 \\cdot 10^5$, $1 \\leq x \\leq 10^9$) — the number of students in training and the minimum strength of a team to be considered strong.\n\nThe second line of each test case contains $n$ integers $a_i$ ($1 \\leq a_i \\leq 10^9$) — the skill of each student.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the maximum possible number of teams with strength at least $x$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n6 4\n\n4 5 3 3 2 6\n\n4 10\n\n4 2 1 3\n\n5 3\n\n5 3 2 3 2\n\n3 6\n\n9 1 7\n\n6 10\n\n6 1 3 6 3 2\n\n```\n\n#### Output #1\n\n```\n4\n0\n4\n2\n1\n```", "cfid": "2091B"}
{"problem_id": "2091F", "problem_title": "F. Igor and Mountain", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2091/F", "problem_statement": "The visitors of the IT Campus \"NEIMARK\" are not only strong programmers but also physically robust individuals! Some practice swimming, some rowing, and some rock climbing!\n\nMaster Igor is a prominent figure in the local rock climbing community. One day, he went on a mountain hike to ascend one of the peaks. As an experienced climber, Igor decided not to follow the established trails but to use his skills to climb strictly vertically.\n\nIgor found a rectangular vertical section of the mountain and mentally divided it into $n$ horizontal levels. He then split each level into $m$ segments using vertical partitions. Upon inspecting these segments, Igor discovered convenient protrusions that can be grasped (hereafter referred to as holds). Thus, the selected part of the mountain can be represented as an $n \\times m$ rectangle, with some cells containing holds.\n\nBeing an experienced programmer, Igor decided to count the number of valid routes. A route is defined as a sequence of distinct holds. A route is considered valid if the following conditions are satisfied:\n\n- The first hold in the route is located on the very bottom level (row $n$);\n- The last hold in the route is located on the very top level (row $1$);\n- Each subsequent hold is not lower than the previous one;\n- At least one hold is used on each level (i.e., in every row of the rectangle);\n- At most two holds are used on each level (since Igor has only two hands);\n- Igor can reach from the current hold to the next one if the distance between the centers of the corresponding sections does not exceed Igor's arm span.\n\nIgor's arm span is $d$, which means he can move from one hold to another if the Euclidean distance between the centers of the corresponding segments does not exceed $d$. The distance between sections ($i_1, j_1$) and ($i_2, j_2$) is given by $\\sqrt{(i_1 - i_2) ^ 2 + (j_1 - j_2) ^ 2}$.\n\nCalculate the number of different valid routes. Two routes are considered different if they differ in the list of holds used or in the order in which these holds are visited.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\leq t \\leq 10^3$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n$, $m$, $d$ ($2 \\leq n \\leq 2000$, $1 \\leq m, d \\leq 2000$).\n\nEach of the following $n$ lines contains $m$ characters — the description of the corresponding level of the mountain. The symbol '#' represents an empty section, and the symbol 'X' represents a section with a hold. The levels are described from top to bottom.\n\nIt is guaranteed that the sum of $n \\cdot m$ over all test cases does not exceed $4 \\cdot 10^6$.\n\n### Output\n\nFor each test case, output the number of different routes modulo $998244353$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3 4 1\n\nXX#X\n\n#XX#\n\n#X#X\n\n3 4 2\n\nXX#X\n\n#XX#\n\n#X#X\n\n3 1 3\n\nX\n\nX\n\n#\n\n```\n\n#### Output #1\n\n```\n2\n60\n0\n```\n\n### Note\n\nPossible routes in the first case:\n\n![](https://espresso.codeforces.com/4abfb72944041c37716a0906437d686506431681.png)\n\nIn the second example, Igor's arm span has become larger, so new routes are available to him, for example this one:\n\n![](https://espresso.codeforces.com/5d1a6871d19f072dc888770deff1f3cb1426148b.png)\n\nIn the third example, there are no holds on the lower level, so there are no correct routes.", "cfid": "2091F"}
{"problem_id": "2091C", "problem_title": "C. Combination Lock", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2091/C", "problem_statement": "At the IT Campus \"NEIMARK\", there are several top-secret rooms where problems for major programming competitions are developed. To enter one of these rooms, you must unlock a circular lock by selecting the correct code. This code is updated every day.\n\nToday's code is a permutation$^{\\text{∗}}$ of the numbers from $1$ to $n$, with the property that in every cyclic shift$^{\\text{†}}$ of it, there is exactly one fixed point. That is, in every cyclic shift, there exists exactly one element whose value is equal to its position in the permutation.\n\nOutput any valid permutation that satisfies this condition. Keep in mind that a valid permutation might not exist, then output $-1$.\n\n$^{\\text{∗}}$A permutation is defined as a sequence of length $n$ consisting of integers from $1$ to $n$, where each number appears exactly once. For example, (2 1 3), (1), (4 3 1 2) are permutations; (1 2 2), (3), (1 3 2 5) are not.\n\n$^{\\text{†}}$A cyclic shift of an array is obtained by moving the last element to the beginning of the array. A permutation of length $n$ has exactly $n$ cyclic shifts.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\leq t \\leq 500$). The description of the test cases follows.\n\nA single line of each test case contains a single integer $n$ ($1 \\leq n \\leq 2 \\cdot 10^5$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the desired permutation. If multiple solutions exist, output any one of them. If no suitable permutations exist, output $-1$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n4\n\n5\n\n3\n\n```\n\n#### Output #1\n\n```\n-1\n4 1 3 5 2\n1 3 2\n```\n\n### Note\n\nIn the second example, there is a permutation such that in each cyclic shift there is a fixed point (highlighted in dark red):\n\n![](https://espresso.codeforces.com/e1f7f024e13851731c4a34d583c32d16a0e2a8e9.png)\n\nThe first line contains the element numbers, and the second line contains all the shifts of the desired permutation.", "cfid": "2091C"}
{"problem_id": "2091E", "problem_title": "E. Interesting Ratio", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2091/E", "problem_statement": "Recently, Misha at the IT Campus \"NEIMARK\" camp learned a new topic — the Euclidean algorithm.\n\nHe was somewhat surprised when he realized that $a \\cdot b = lcm(a, b) \\cdot gcd(a, b)$, where $gcd(a, b)$ — is [the greatest common divisor (GCD)](https://en.wikipedia.org/wiki/Greatest_common_divisor) of the numbers $a$ and $b$ and $lcm(a, b)$ — is [the least common multiple (LCM)](https://en.wikipedia.org/wiki/Least_common_multiple). Misha thought that since the product of LCM and GCD exists, it might be interesting to consider their quotient: $F(a,b)=\\frac{lcm(a, b)}{gcd(a, b)}$.\n\nFor example, he took $a = 2$ and $b = 4$, computed $F(2, 4) = \\frac{4}{2} = 2$ and obtained a prime number (a number is prime if it has exactly two divisors)! Now he considers $F(a, b)$ to be an interesting ratio if $a < b$ and $F(a, b)$ is a prime number.\n\nSince Misha has just started studying number theory, he needs your help to calculate — how many different pairs of numbers $a$ and $b$ are there such that $F(a, b)$ is an interesting ratio and $1 \\leq a < b \\leq n$?\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\leq t \\leq 10^3$). The description of the test cases follows.\n\nA single line of each test case contains a single integer $n$ ($2 \\leq n \\leq 10^7$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^7$.\n\n### Output\n\nFor each test case, output the number of interesting ratios $F(a, b)$ for pairs satisfying $1 \\leq a < b \\leq n$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n5\n\n10\n\n34\n\n10007\n\n```\n\n#### Output #1\n\n```\n4\n11\n49\n24317\n```", "cfid": "2091E"}
{"problem_id": "2091D", "problem_title": "D. Place of the Olympiad", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2091/D", "problem_statement": "For the final of the first Olympiad by IT Campus \"NEIMARK\", a rectangular venue was prepared. You may assume that the venue is divided into $n$ rows, each containing $m$ spots for participants' desks. A total of $k$ participants have registered for the final, and each participant will sit at an individual desk. Now, the organizing committee must choose the locations for the desks in the venue.\n\nEach desk occupies one of the $m$ spots in a row. Moreover, if several desks occupy consecutive spots in the same row, we call such a group of desks a bench, and the number of desks in the group is the bench's length. For example, seating $7$ participants on a $3 \\times 4$ venue (with $n = 3, m = 4$) can be arranged as follows:\n\n![](https://espresso.codeforces.com/a88b2d657543c3b25d3dfed67c6579aaafc3d212.png)\n\nIn the figure above, the first row has one bench of length $3$, the second row has one bench of length $2$, and the third row has two benches of length $1$.\n\nThe organizing committee wants to choose the locations so that the length of the longest bench is as small as possible. In particular, the same $7$ desks can be arranged in a more optimal way, so that the lengths of all benches do not exceed $2$:\n\n![](https://espresso.codeforces.com/fd55912ea252e536c3c4396358cdbde3be0f8870.png)\n\nGiven the integers $n$, $m$, and $k$, determine the minimum possible length of the longest bench.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\leq t \\leq 10^4$). The description of the test cases follows.\n\nA single line of each test case contains three positive integers — $n$, $m$, $k$ ($1 \\leq n, m, k \\leq 10^9$, $k \\leq n\\cdot m$).\n\n### Output\n\nFor each test case, output a single number — the minimum possible length of the longest bench.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3 4 7\n\n5 5 5\n\n1 13 2\n\n2 4 7\n\n1 5 4\n\n```\n\n#### Output #1\n\n```\n2\n1\n1\n4\n2\n```", "cfid": "2091D"}
{"problem_id": "2091A", "problem_title": "A. Olympiad Date", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2091/A", "problem_statement": "The final of the first Olympiad by IT Campus \"NEIMARK\" is scheduled for March 1, 2025. A nameless intern was tasked with forming the date of the Olympiad using digits — 01.03.2025.\n\nTo accomplish this, the intern took a large bag of digits and began drawing them one by one. In total, he drew $n$ digits — the digit $a_i$ was drawn in the $i$-th turn.\n\nYou suspect that the intern did extra work. Determine at which step the intern could have first assembled the digits to form the date of the Olympiad (the separating dots can be ignored), or report that it is impossible to form this date from the drawn digits. Note that leading zeros must be displayed.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\leq t \\leq 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 20$).\n\nThe second line of each test case contains $n$ integers $a_i$ ($0 \\leq a_i \\leq 9$) — the numbers that the intern pulled out in chronological order.\n\n### Output\n\nFor each test case, output the minimum number of digits that the intern could pull out. If all the digits cannot be used to make a date, output the number $0$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n10\n\n2 0 1 2 3 2 5 0 0 1\n\n8\n\n2 0 1 2 3 2 5 0\n\n8\n\n2 0 1 0 3 2 5 0\n\n16\n\n2 3 1 2 3 0 1 9 2 1 0 3 5 4 0 3\n\n```\n\n#### Output #1\n\n```\n9\n0\n8\n15\n```", "cfid": "2091A"}
{"problem_id": "2090B", "problem_title": "B. Pushing Balls", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2090/B", "problem_statement": "Ecrade has an $n \\times m$ grid, originally empty, and he has pushed several (possibly, zero) balls in it.\n\nEach time, he can push one ball into the grid either from the leftmost edge of a particular row or the topmost edge of a particular column of the grid.\n\nWhen a ball moves towards a position:\n\n- If there is no ball originally at that position, the incoming ball will stop and occupy the position.\n- If there is already a ball at that position, the incoming ball will stop and occupy the position, while the original ball will continue moving to the next position in the same direction.\n\nNote that if a row or column is full (i.e., all positions in that row or column have balls), he cannot push a ball into that row or column.\n\nGiven the final state of whether there is a ball at each position of the grid, you need to determine whether it is possible for Ecrade to push the balls to reach the final state.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10\\,000$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\le n, m \\le 50$).\n\nThis is followed by $n$ lines, each containing exactly $m$ characters and consisting only of $0$ and $1$, describing the final state of the grid. There is a ball at one position of the grid if and only if the corresponding position of the given input is $1$.\n\nIt is guaranteed that the sum of $n\\cdot m$ over all test cases does not exceed $10\\,000$.\n\n### Output\n\nFor each test case, output \"Yes\" (without quotes) if it is possible for Ecrade to push the balls to reach the final state, and \"No\" (without quotes) otherwise.\n\nYou can output \"Yes\" and \"No\" in any case (for example, strings \"YES\", \"yEs\" and \"yes\" will be recognized as a positive response).\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3 3\n\n001\n\n001\n\n110\n\n3 3\n\n010\n\n111\n\n010\n\n3 3\n\n111\n\n111\n\n111\n\n3 3\n\n000\n\n000\n\n000\n\n3 3\n\n000\n\n000\n\n001\n\n```\n\n#### Output #1\n\n```\nYES\nYES\nYES\nYES\nNO\n```\n\n### Note\n\nFor simplicity, if Ecrade pushes a ball from the leftmost edge of the $i$-th row, we call the operation $\\text{ROW}\\ i$; if he pushes a ball from the topmost edge of the $i$-th column, we call the operation $\\text{COL}\\ i$.\n\nFor intuitive understanding, a non-zero number $x$ in the matrix given below represents the $x$-th ball that is pushed in.\n\nIn the first test case, a possible series of operations:\n\n$\\begin{pmatrix}0&0&0\\\\0&0&0\\\\0&0&0\\end{pmatrix}\\xrightarrow{\\text{ROW}\\ 3}\\xrightarrow{\\text{ROW}\\ 3} \\begin{pmatrix}0&0&0\\\\0&0&0\\\\2&1&0\\end{pmatrix}\\xrightarrow{\\text{COL}\\ 3}\\xrightarrow{\\text{COL}\\ 3} \\begin{pmatrix}0&0&4\\\\0&0&3\\\\2&1&0\\end{pmatrix}$\n\nIn the second test case, a possible series of operations:\n\n$\\begin{pmatrix}0&0&0\\\\0&0&0\\\\0&0&0\\end{pmatrix}\\xrightarrow{\\text{ROW}\\ 2}\\xrightarrow{\\text{ROW}\\ 2}\\xrightarrow{\\text{ROW}\\ 2} \\begin{pmatrix}0&0&0\\\\3&2&1\\\\0&0&0\\end{pmatrix}\\xrightarrow{\\text{COL}\\ 2}\\xrightarrow{\\text{COL}\\ 2} \\begin{pmatrix}0&5&0\\\\3&4&1\\\\0&2&0\\end{pmatrix}$\n\nIn the third test case, a possible series of operations:\n\n$\\begin{pmatrix}0&0&0\\\\0&0&0\\\\0&0&0\\end{pmatrix}\\xrightarrow{\\text{ROW}\\ 1}\\xrightarrow{\\text{ROW}\\ 2}\\xrightarrow{\\text{ROW}\\ 3} \\begin{pmatrix}1&0&0\\\\2&0&0\\\\3&0&0\\end{pmatrix}\\xrightarrow{\\text{COL}\\ 3}\\xrightarrow{\\text{COL}\\ 3}\\xrightarrow{\\text{COL}\\ 3} \\begin{pmatrix}1&0&6\\\\2&0&5\\\\3&0&4\\end{pmatrix}\\xrightarrow{\\text{ROW}\\ 1}\\xrightarrow{\\text{ROW}\\ 2}\\xrightarrow{\\text{ROW}\\ 3} \\begin{pmatrix}7&1&6\\\\8&2&5\\\\9&3&4\\end{pmatrix}$", "cfid": "2090B"}
{"problem_id": "2090A", "problem_title": "A. Treasure Hunt", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2090/A", "problem_statement": "Little B and his friend Little K found a treasure map, and now they just need to dig up the treasure, which is buried at a depth of $a.5$ meters.\n\nThey take turns digging. On the first day, Little B digs; on the second day, Little K. After each day, they switch. Little B digs exactly $x$ meters of soil each day, while Little K digs $y$ meters. They became curious about who will dig up the treasure first, meaning during whose day the total dug depth will exceed $a.5$.\n\nBut they are too busy digging, so help them and tell who will dig up the treasure!\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\le t \\le 1000$) — the number of test cases. The description of the test cases follows.\n\nIn a single line of each test case, three integers $x, y, a$ are given ($1 \\leq x, y, a \\leq 10^9$).\n\n### Output\n\nFor each test case, output \"NO\" if Little B digs it up first; otherwise, output \"YES\". You can output the answer in any case.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n1 2 4\n\n2 1 4\n\n2 2 1\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nNO\n```\n\n### Note\n\nIn the first test case, on the first day they will dig $1$ meter; on the second day $1 + 2 = 3$ meters in total; on the third day $1 + 2 + 1 = 4$ meters; and on the fourth day they will dig $6$ meters. Thus, the treasure will be dug up first by Little K.\n\nIn the second test case, on the first day they will dig $2$ meters; on the second day $2 + 1 = 3$ meters in total; on the third day $2 + 1 + 2 = 5$ meters, meaning it was dug up first by Little B.", "cfid": "2090A"}
{"problem_id": "2089A", "problem_title": "A. Simple Permutation", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2089/A", "problem_statement": "Given an integer $n$. Construct a permutation $p_1, p_2, \\ldots, p_n$ of length $n$ that satisfies the following property:\n\nFor $1 \\le i \\le n$, define $c_i = \\lceil \\frac{p_1+p_2+\\ldots +p_i}{i} \\rceil$, then among $c_1,c_2,\\ldots,c_n$ there must be at least $\\lfloor \\frac{n}{3} \\rfloor - 1$ prime numbers.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10$) — the number of test cases. The description of the test cases follows.\n\nIn a single line of each test case, there is a single integer $n$ ($2 \\le n \\le 10^5)$ — the size of the permutation.\n\n### Output\n\nFor each test case, output the permutation $p_1,p_2,\\ldots,p_n$ of length $n$ that satisfies the condition. It is guaranteed that such a permutation always exists.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2\n\n3\n\n5\n\n```\n\n#### Output #1\n\n```\n2 1\n2 1 3\n2 1 3 4 5\n```\n\n### Note\n\nIn the first test case, $c_1 = \\lceil \\frac{2}{1} \\rceil = 2$, $c_2 = \\lceil \\frac{2+1}{2} \\rceil = 2$. Both are prime numbers.\n\nIn the third test case, $c_1 = \\lceil \\frac{2}{1} \\rceil = 2$, $c_2 = \\lceil \\frac{3}{2} \\rceil = 2$, $c_3 = \\lceil \\frac{6}{3} \\rceil = 2$, $c_4 = \\lceil \\frac{10}{4} \\rceil = 3$, $c_5 = \\lceil \\frac{15}{5} \\rceil = 3$. All these numbers are prime.", "cfid": "2089A"}
{"problem_id": "2090C", "problem_title": "C. Dining Hall", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2090/C", "problem_statement": "Inside the large kingdom, there is an infinite dining hall. It can be represented as a set of cells ($x, y$), where $x$ and $y$ are non-negative integers. There are an infinite number of tables in the hall. Each table occupies four cells ($3x + 1, 3y + 1$), ($3x + 1, 3y + 2$), ($3x + 2, 3y + 1$), ($3x + 2, 3y + 2$), where $x$ and $y$ are arbitrary non-negative integers. All cells that do not belong to any of the tables are corridors.\n\nThere are $n$ guests that come to the dining hall one by one. Each guest appears in the cell $(0, 0)$ and wants to reach a table cell. In one step, they can move to any neighboring by side corridor cell, and in their last step, they must move to a neighboring by side a free table cell. They occupy the chosen table cell, and no other guest can move there.\n\nEach guest has a characteristic $t_i$, which can either be $0$ or $1$. They enter the hall in order, starting to walk from the cell ($0, 0$). If $t_i=1$, the $i$-th guest walks to the nearest vacant table cell. If $t_i=0$, they walk to the nearest table cell that belongs to a completely unoccupied table. Note that other guests may choose the same table later.\n\nThe distance is defined as the smallest number of steps needed to reach the table cell. If there are multiple table cells at the same distance, the guests choose the cell with the smallest $x$, and if there are still ties, they choose among those the cell with the smallest $y$.\n\nFor each guest, find the table cell which they choose.\n\n### Input\n\nThe first line contains a single integer $q$ ($1 \\leq q \\leq 5000$) — the number of test cases. Then follows their description.\n\nThe first line of each test case contains a single integer $n$ ($1 \\leq n \\leq 50\\,000$) — the number of guests.\n\nThe second line of each test case contains $n$ integers $t_1, t_2, \\ldots, t_n$ ($t_i \\in \\{0, 1\\}$) — the characteristics of the guests.\n\nIt is guaranteed that the sum of $n$ for all test cases does not exceed $50\\,000$.\n\n### Output\n\nFor each test case, output $n$ lines — for each guest, the cell where they sit.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n6\n\n0 1 1 0 0 1\n\n5\n\n1 0 0 1 1\n\n```\n\n#### Output #1\n\n```\n1 1\n1 2\n2 1\n1 4\n4 1\n1 5\n1 1\n1 4\n4 1\n1 2\n2 1\n```\n\n### Note\n\nConsider the first test case:\n\nThe distance from the first guest to the cell ($1, 1$) is $2$, so he sits there.\n\nThe distance from the second guest to the cell ($1, 2$) is $3$, as is the distance to the cell ($2, 1$), but since the first coordinate is smaller for the first option, he will choose it.\n\nThe distance from the third guest to the cell ($2, 1$) is $3$, so he will choose it.\n\nThe distance from the fourth guest to the cell ($1, 4$) is $5$, and he will choose it.\n\nThe distance from the fifth guest to the cell ($4, 1$) is $5$.\n\nThe distance from the sixth guest to the cell ($1, 5$) is $6$, as is the distance to the cell ($2, 2$), but since the first coordinate is smaller, he will choose the first option.\n\n![](https://espresso.codeforces.com/de2d3d52460fa589b580b4819006756c0733b1ab.png)", "cfid": "2090C"}
{"problem_id": "2085C", "problem_title": "C. Serval and The Formula", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2085/C", "problem_statement": "You are given two positive integers $x$ and $y$ ($1\\le x, y\\le 10^9$).\n\nFind a non-negative integer $k\\le 10^{18}$, such that $(x+k) + (y+k) = (x+k)\\oplus (y+k)$ holds$^{\\text{∗}}$, or determine that such an integer does not exist.\n\n$^{\\\\text{∗}}$$\\\\oplus$ denotes the [bitwise XOR operation](https://en.wikipedia.org/wiki/Bitwise_operation#XOR).\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe only line of each test case contains two integers $x$ and $y$ ($1\\le x, y\\le 10^9$) — the given integers.\n\n### Output\n\nFor each test case, output a single integer $k$ ($0\\le k\\le 10^{18}$) — the integer you found. Print $-1$ if it is impossible to find such an integer.\n\nIf there are multiple answers, you may print any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n2 5\n\n6 6\n\n19 10\n\n1024 4096\n\n1198372 599188\n\n```\n\n#### Output #1\n\n```\n0\n-1\n1\n1024\n28\n```\n\n### Note\n\nIn the first test case, since $(2 + 0) + (5 + 0) = (2 + 0) \\oplus (5 + 0) = 7$, $k=0$ is a possible answer. Note that $k=4$ is also a possible answer because $(2 + 4) + (5 + 4) = (2 + 4) \\oplus (5 + 4) = 15$.\n\nIn the second test case, $(x+k)\\oplus (y+k) = (6+k)\\oplus (6+k) = 0$. However, $(x+k)+(y+k) > 0$ holds for every $k \\ge 0$, implying that such an integer $k$ does not exist.", "cfid": "2085C"}
{"problem_id": "2085A", "problem_title": "A. Serval and String Theory", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2085/A", "problem_statement": "A string $r$ consisting only of lowercase Latin letters is called universal if and only if $r$ is lexicographically smaller$^{\\text{∗}}$ than the reversal$^{\\text{†}}$ of $r$.\n\nYou are given a string $s$ consisting of $n$ lowercase Latin letters. You are required to make $s$ universal. To achieve this, you can perform the following operation on $s$ at most $k$ times:\n\n- Choose two indices $i$ and $j$ ($1\\le i,j\\le n$), then swap $s_i$ and $s_j$. Note that if $i=j$, you do nothing.\n\nDetermine whether you can make $s$ universal by performing the above operation at most $k$ times.\n\n$^{\\text{∗}}$A string $a$ is lexicographically smaller than a string $b$ of the same length, if and only if the following holds:\n\n- in the first position where $a$ and $b$ differ, the string $a$ has a letter that appears earlier in the alphabet than the corresponding letter in $b$.\n\n$^{\\text{†}}$The reversal of a string $r$ is the string obtained by writing $r$ from right to left. For example, the reversal of the string $\\texttt{abcad}$ is $\\texttt{dacba}$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 500$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1\\le n\\le 100$, $0\\le k\\le 10^4$) — the length of the string $s$, and the maximum number of operations you can perform.\n\nThe second line contains a string $s$ consisting of $n$ lowercase Latin letters.\n\n### Output\n\nFor each test case, print \"YES\" if it is possible to make $s$ universal by performing the operation at most $k$ times. Otherwise, print \"NO\".\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n1 10000\n\na\n\n3 3\n\nrev\n\n6 0\n\nstring\n\n6 0\n\ntheory\n\n9 2\n\nuniversal\n\n19 0\n\ncodeforcesecrofedoc\n\n19 1\n\ncodeforcesecrofedoc\n\n3 1\n\nzzz\n\n```\n\n#### Output #1\n\n```\nNO\nYES\nNO\nYES\nYES\nNO\nYES\nNO\n```\n\n### Note\n\nIn the first test case, $s$ will keep the same after any operations. However, the reversal of $\\texttt{a}$ is still $\\texttt{a}$, so it is impossible to make $s$ universal.\n\nIn the second test case, the string $\\texttt{rev}$ is lexicographically smaller than $\\texttt{ver}$. Thus, $s$ is already universal.\n\nIn the fifth test case, you can perform the operations as follows:\n\n1. Swap $s_4$ and $s_7$. After this operation, $s$ becomes $\\texttt{uniserval}$;\n2. Swap $s_1$ and $s_3$. After this operation, $s$ becomes $\\texttt{inuserval}$.\n\nAnd the string $\\texttt{inuserval}$ is universal.", "cfid": "2085A"}
{"problem_id": "2085B", "problem_title": "B. Serval and Final MEX", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2085/B", "problem_statement": "You are given an array $a$ consisting of $n\\ge 4$ non-negative integers.\n\nYou need to perform the following operation on $a$ until its length becomes $1$:\n\n- Select two indices $l$ and $r$ ($1\\le {\\color{red}{ l < r }} \\le |a|$), and replace the subarray $[a_l,a_{l+1},\\ldots,a_r]$ with a single integer $\\operatorname{mex}([a_l,a_{l+1},\\ldots,a_r])$, where $\\operatorname{mex}(b)$ denotes the minimum excluded (MEX)$^{\\text{∗}}$ of the integers in $b$. In other words, let $x=\\operatorname{mex}([a_l,a_{l+1},\\ldots,a_r])$, the array $a$ will become $[a_1,a_2,\\ldots,a_{l-1},x,a_{r+1},a_{r+2},\\ldots,a_{|a|}]$. Note that the length of $a$ decreases by $(r-l)$ after this operation.\n\nServal wants the final element in $a$ to be $0$. Help him!\n\nMore formally, you have to find a sequence of operations, such that after performing these operations in order, the length of $a$ becomes $1$, and the final element in $a$ is $0$.\n\nIt can be shown that at least one valid operation sequence exists under the constraints of the problem, and the length of any valid operation sequence does not exceed $n$.\n\nNote that you do not need to minimize the number of operations.\n\n$^{\\text{∗}}$The minimum excluded (MEX) of a collection of integers $b_1, b_2, \\ldots, b_k$ is defined as the smallest non-negative integer $x$ which does not occur in the collection $b$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($4\\le n\\le 5000$) — the length of the array $a$.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0\\le a_i\\le n$) — the elements of the array $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5000$.\n\n### Output\n\nFor each test case, output a single integer $k$ ($0\\le k\\le n$) in the first line of output — the length of the operation sequence.\n\nThen, output $k$ lines, the $i$-th line containing two integers $l_i$ and $r_i$ ($1\\le l_i<r_i\\le |a|$) — the two indices you choose in the $i$-th operation, where $|a|$ denotes the length of the array before this operation.\n\nIf there are multiple answers, you may print any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n4\n\n1 2 3 4\n\n5\n\n0 1 0 0 1\n\n6\n\n0 0 0 0 0 0\n\n6\n\n5 4 3 2 1 0\n\n4\n\n0 0 1 1\n\n4\n\n1 0 0 0\n\n```\n\n#### Output #1\n\n```\n1\n1 4\n4\n1 2\n1 2\n1 2\n1 2\n4\n5 6\n3 4\n1 2\n1 3\n3\n4 5\n4 5\n1 4\n2\n1 2\n1 3\n2\n2 4\n1 2\n```\n\n### Note\n\nIn the first test case, since $\\operatorname{mex}([1,2,3,4])=0$, after the only operation, the array becomes $[0]$.\n\nIn the second test case, the array $a$ changes as follows: \n\n$$ [\\underline{0,1},0,0,1]\\to [\\underline{2,0},0,1]\\to [\\underline{1,0},1]\\to [\\underline{2,1}]\\to [0]. $$\n\nIn the third test case, the array $a$ changes as follows: \n\n$$ [0,0,0,0,\\underline{0,0}]\\to [0,0,\\underline{0,0},1]\\to [\\underline{0,0},1,1]\\to [\\underline{1,1,1}]\\to [0]. $$\n\n", "cfid": "2085B"}
{"problem_id": "2075A", "problem_title": "A. To Zero", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2075/A", "problem_statement": "You are given two integers $n$ and $k$; $k$ is an odd number not less than $3$. Your task is to turn $n$ into $0$.\n\nTo do this, you can perform the following operation any number of times: choose a number $x$ from $1$ to $k$ and subtract it from $n$. However, if the current value of $n$ is even (divisible by $2$), then $x$ must also be even, and if the current value of $n$ is odd (not divisible by $2$), then $x$ must be odd.\n\nIn different operations, you can choose the same values of $x$, but you don't have to. So, there are no limitations on using the same value of $x$.\n\nCalculate the minimum number of operations required to turn $n$ into $0$.\n\n### Input\n\nThe first line contains one integer $t$ ($1 \\le t \\le 10000$) — the number of test cases.\n\nEach test case consists of one line containing two integers $n$ and $k$ ($3 \\le k \\le n \\le 10^9$, $k$ is odd).\n\n### Output\n\nFor each test case, output one integer — the minimum number of operations required to turn $n$ into $0$.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n39 7\n\n9 3\n\n6 3\n\n999967802 3\n\n5 5\n\n6 5\n\n999999999 3\n\n1000000000 3\n\n```\n\n#### Output #1\n\n```\n7\n4\n3\n499983901\n1\n2\n499999999\n500000000\n```\n\n### Note\n\nIn the first example from the statement, you can first subtract $5$ from $39$ to get $34$. Then subtract $6$ five times to get $4$. Finally, subtract $4$ to get $0$.\n\nIn the second example, you can subtract $3$ once, and then subtract $2$ three times.\n\nIn the third example, you can subtract $2$ three times.", "cfid": "2075A"}
{"problem_id": "2075C", "problem_title": "C. Two Colors", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2075/C", "problem_statement": "Monocarp has installed a new fence at his summer house. The fence consists of $n$ planks of the same size arranged in a row.\n\nMonocarp decided that he would paint his fence according to the following rules:\n\n- each plank of the fence will be painted in exactly one color;\n- the number of different colors that the planks will be painted in is exactly two;\n- the planks of the fence that are painted in the same color must form a continuous sequence, meaning that for all pairs of planks painted in the same color, there will be no planks painted in a different color between them.\n\nMonocarp has $m$ different paints, and the paint of the $i$-th color is sufficient to paint no more than $a_i$ planks of the fence. Monocarp will not buy any additional paints.\n\nYour task is to determine the number of different ways to paint the fence that satisfy all of Monocarp's described wishes. Two ways to paint are considered different if there exists a plank that is painted in different colors in these two ways.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $m$ ($2 \\le n, m \\le 2 \\cdot 10^5$) — the number of planks in the fence and the number of different colors of paint that Monocarp has.\n\nThe second line contains $m$ integers $a_1, a_2, \\dots, a_m$ ($1 \\le a_i \\le n$), where $a_i$ is the maximum number of planks that can be painted with the paint of color $i$.\n\nThe sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$. The sum of $m$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the number of different ways to paint the fence that satisfy all of Monocarp's described wishes.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n5 2\n\n2 4\n\n5 2\n\n3 4\n\n12 3\n\n5 9 8\n\n```\n\n#### Output #1\n\n```\n4\n6\n22\n```\n\n### Note\n\nIn the first test case, there are $4$ different ways to paint the fence (the sequences of color numbers in which the planks can be painted from left to right are listed below):\n\n1. $[1, 2, 2, 2, 2]$;\n2. $[1, 1, 2, 2, 2]$;\n3. $[2, 2, 2, 1, 1]$;\n4. $[2, 2, 2, 2, 1]$.\n\nIn the second test case, there are $6$ different ways to paint the fence (the sequences of color numbers in which the planks can be painted from left to right are listed below):\n\n1. $[1, 2, 2, 2, 2]$;\n2. $[1, 1, 2, 2, 2]$;\n3. $[1, 1, 1, 2, 2]$;\n4. $[2, 2, 1, 1, 1]$;\n5. $[2, 2, 2, 1, 1]$;\n6. $[2, 2, 2, 2, 1]$.", "cfid": "2075C"}
{"problem_id": "2075B", "problem_title": "B. Array Recoloring", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2075/B", "problem_statement": "You are given an integer array $a$ of size $n$. Initially, all elements of the array are colored red.\n\nYou have to choose exactly $k$ elements of the array and paint them blue. Then, while there is at least one red element, you have to select any red element with a blue neighbor and make it blue.\n\nThe cost of painting the array is defined as the sum of the first $k$ chosen elements and the last painted element.\n\nYour task is to calculate the maximum possible cost of painting for the given array.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^3$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $k$ ($2 \\le n \\le 5000$; $1 \\le k < n$).\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$).\n\nAdditional constraint on the input: the sum of $n$ over all test cases doesn't exceed $5000$.\n\n### Output\n\nFor each test case, print a single integer — the maximum possible cost of painting for the given array.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3 1\n\n1 2 3\n\n5 2\n\n4 2 3 1 3\n\n4 3\n\n2 2 2 2\n\n```\n\n#### Output #1\n\n```\n5\n10\n8\n```\n\n### Note\n\nIn the first example, you can initially color the $2$-nd element, and then color the elements in the order $1, 3$. Then the cost of painting is equal to $2+3=5$.\n\nIn the second example, you can initially color the elements $1$ and $5$, and then color the elements in the order $2, 4, 3$. Then the cost of painting is equal to $4+3+3=10$.\n\nIn the third example, you can initially color the elements $2, 3, 4$, and then color the $1$-st element. Then the cost of painting is equal to $2+2+2+2=8$.", "cfid": "2075B"}
{"problem_id": "2074A", "problem_title": "A. Draw a Square", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2074/A", "problem_statement": "The pink soldiers have given you $4$ distinct points on the plane. The $4$ points' coordinates are $(-l,0)$, $(r,0)$, $(0,-d)$, $(0,u)$ correspondingly, where $l$, $r$, $d$, $u$ are positive integers.\n\n![](https://espresso.codeforces.com/06a14f0d152a975453adebbd64d246fd9055b78c.png)In the diagram, a square is drawn by connecting the four points $L$, $R$, $D$, $U$.\n\nPlease determine if it is possible to draw a square$^{\\text{∗}}$ with the given points as its vertices.\n\n$^{\\text{∗}}$A square is defined as a polygon consisting of $4$ vertices, of which all sides have equal length and all inner angles are equal. No two edges of the polygon may intersect each other.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains four integers $l$, $r$, $d$, $u$ ($1 \\le l,r,d,u \\le 10$).\n\n### Output\n\nFor each test case, if you can draw a square using the four points, output \"Yes\". Otherwise, output \"No\".\n\nYou can output the answer in any case. For example, the strings \"yEs\", \"yes\", and \"YES\" will also be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n2 2 2 2\n\n1 2 3 4\n\n```\n\n#### Output #1\n\n```\nYes\nNo\n```\n\n### Note\n\nOn the first test case, the four given points form a square, so the answer is \"Yes\".\n\nOn the second test case, the four given points do not form a square, so the answer is \"No\".", "cfid": "2074A"}
{"problem_id": "2074C", "problem_title": "C. XOR and Triangle", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2074/C", "problem_statement": "This time, the pink soldiers have given you an integer $x$ ($x \\ge 2$).\n\nPlease determine if there exists a positive integer $y$ that satisfies the following conditions.\n\n- $y$ is strictly less than $x$.\n- There exists a non-degenerate triangle$^{\\text{∗}}$ with side lengths $x$, $y$, $x \\oplus y$. Here, $\\oplus$ denotes the [bitwise XOR operation](https://en.wikipedia.org/wiki/Bitwise_operation#XOR).\n\nAdditionally, if there exists such an integer $y$, output any.\n\n$^{\\text{∗}}$A triangle with side lengths $a$, $b$, $c$ is non-degenerate when $a+b > c$, $a+c > b$, $b+c > a$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 2000$). The description of the test cases follows.\n\nThe only line of each test case contains a single integer $x$ ($2 \\le x \\le 10^9$).\n\n### Output\n\nFor each test case, print one integer on a separate line. The integer you must output is as follows:\n\n- If there exists an integer $y$ satisfying the conditions, output the value of $y$ ($1 \\le y < x$);\n- Otherwise, output $-1$.\n\nIf there exist multiple integers that satisfy the conditions, you may output any.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n5\n\n2\n\n6\n\n3\n\n69\n\n4\n\n420\n\n```\n\n#### Output #1\n\n```\n3\n-1\n5\n-1\n66\n-1\n320\n```\n\n### Note\n\nIn the first test case, there exists a non-degenerate triangle with side lengths $3$, $5$, and $3 \\oplus 5 = 6$. Therefore, $y=3$ is a valid answer.\n\nIn the second test case, $1$ is the only possible candidate for $y$, but it cannot make a non-degenerate triangle. Therefore, the answer is $-1$.", "cfid": "2074C"}
{"problem_id": "2074D", "problem_title": "D. Counting Points", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2074/D", "problem_statement": "The pink soldiers drew $n$ circles with their center on the $x$-axis of the plane. Also, they have told that the sum of radii is exactly $m$$^{\\text{∗}}$.\n\nPlease find the number of integer points inside or on the border of at least one circle. Formally, the problem is defined as follows.\n\nYou are given an integer sequence $x_1,x_2,\\ldots,x_n$ and a positive integer sequence $r_1,r_2,\\ldots,r_n$, where it is known that $\\sum_{i=1}^n r_i = m$.\n\nYou must count the number of integer pairs $(x,y)$ that satisfy the following condition.\n\n- There exists an index $i$ such that $(x-x_i)^2 + y^2 \\le r_i^2$ ($1 \\le i \\le n$).\n\n$^{\\text{∗}}$Is this information really useful? Don't ask me; I don't really know.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\le n \\le m \\le 2\\cdot 10^5$).\n\nThe second line of each test case contains $x_1,x_2,\\ldots,x_n$ — the centers of the circles ($-10^9 \\le x_i \\le 10^9$).\n\nThe third line of each test case contains $r_1,r_2,\\ldots,r_n$ — the radii of the circles ($1 \\le r_i$, $\\sum_{i=1}^n r_i = m$).\n\nIt is guaranteed that the sum of $m$ over all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, output the number of integer points satisfying the condition on a separate line.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2 3\n\n0 0\n\n1 2\n\n2 3\n\n0 2\n\n1 2\n\n3 3\n\n0 2 5\n\n1 1 1\n\n4 8\n\n0 5 10 15\n\n2 2 2 2\n\n```\n\n#### Output #1\n\n```\n13\n16\n14\n52\n```\n\n### Note\n\nOn the first test case, the circle with $r_1=1$ is completely inside the circle with $r_2=2$. Therefore, you only have to count the number of integer points inside the latter. There are $13$ integer points such that $x^2+y^2 \\le 2^2$, so the answer is $13$.\n\nOn the second test case, the circle with $r_1=1$ is not completely inside the circle with $r_2=2$. There are $3$ additional points that are inside the first circle but not inside the second circle, so the answer is $3+13=16$.", "cfid": "2074D"}
{"problem_id": "2074B", "problem_title": "B. The Third Side", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2074/B", "problem_statement": "The pink soldiers have given you a sequence $a$ consisting of $n$ positive integers.\n\nYou must repeatedly perform the following operation until there is only $1$ element left.\n\n- Choose two distinct indices $i$ and $j$.\n- Then, choose a positive integer value $x$ such that there exists a non-degenerate triangle$^{\\text{∗}}$ with side lengths $a_i$, $a_j$, and $x$.\n- Finally, remove two elements $a_i$ and $a_j$, and append $x$ to the end of $a$.\n\nPlease find the maximum possible value of the only last element in the sequence $a$.\n\n$^{\\text{∗}}$A triangle with side lengths $a$, $b$, $c$ is non-degenerate when $a+b > c$, $a+c > b$, $b+c > a$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$).\n\nThe second line of each test case contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($1 \\le a_i \\le 1000$) — the elements of the sequence $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the maximum possible value of the only last element on a separate line.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n1\n\n10\n\n3\n\n998 244 353\n\n5\n\n1 2 3 4 5\n\n9\n\n9 9 8 2 4 4 3 5 3\n\n```\n\n#### Output #1\n\n```\n10\n1593\n11\n39\n```\n\n### Note\n\nOn the first test case, there is already only one element. The value of the only last element is $10$.\n\nOn the second test case, $a$ is initially $[998,244,353]$. The following series of operations is valid:\n\n1. Erase $a_2=244$ and $a_3=353$, and append $596$ to the end of $a$. $a$ is now $[998,596]$.\n2. Erase $a_1=998$ and $a_2=596$, and append $1593$ to the end of $a$. $a$ is now $[1593]$.\n\nIt can be shown that the only last element cannot be greater than $1593$. Therefore, the answer is $1593$.", "cfid": "2074B"}
{"problem_id": "2074E", "problem_title": "E. Empty Triangle", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2074/E", "problem_statement": "This is an interactive problem.\n\nThe pink soldiers hid from you $n$ ($3 \\le n \\le 1500$) fixed points $(x_1,y_1), (x_2,y_2), \\ldots, (x_n,y_n)$, whose coordinates are not given to you. Also, it is known that no two points have the same coordinates, and no three points are [collinear](https://en.wikipedia.org/wiki/Collinearity).\n\nYou can ask the Frontman about three distinct indices $i$, $j$, $k$. Then, he will draw a triangle with points $(x_i,y_i)$, $(x_j,y_j)$, $(x_k,y_k)$, and respond with the following:\n\n- If at least one of the hidden points lies inside the triangle, then the Frontman gives you the index of one such point. Do note that if there are multiple such points, the Frontman can arbitrarily select one of them.\n- Otherwise, the Frontman responds with $0$.\n\n![](https://espresso.codeforces.com/8de267b041b650ab4375c054841b7e29b9cb32dd.png)Your objective in this problem is to find a triangle not containing any other hidden point, such as the blue one in the diagram.\n\nUsing at most $\\mathbf{75}$ queries, you must find any triangle formed by three of the points, not containing any other hidden point inside.\n\nDo note that the Frontman may be adaptive while choosing the point to give you. In other words, the choice of the point can be determined by various factors including but not limited to the orientation of points and the previous queries. However, note that the sequence of points will never be altered.\n\nHacks are disabled for this problem. Your solution will be judged on exactly $\\mathbf{35}$ input files, including the example input.\n\n### Interaction\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 20$). The description of the test cases follows.\n\nThe first line of each test case contains one positive integer $n$ — the number of points ($3 \\le n \\le 1500$).\n\nAfterwards, you can output the following on a separate line to ask a query:\n\n- \"? i j k\" ($1 \\le i,j,k \\le n$, $i \\ne j$, $i \\ne k$, $j \\ne k$): Ask about the triangle formed by $(x_i,y_i)$, $(x_j,y_j)$, $(x_k,y_k)$.\n\nThen, the interactor responds with one integer on a new line:\n\n- If your query is invalid or the number of queries has exceeded $\\mathbf{75}$, then the interactor responds with $-1$;\n- If there exists an index $p$ ($1 \\le p \\le n$) such that the point $(x_p,y_p)$ is inside the triangle, then any such index $p$ is given;\n- Otherwise, the interactor responds with $0$.\n\nIf you want to print an answer, you can output the following on a separate line:\n\n- \"! i j k\" ($1 \\le i,j,k \\le n$, $i \\ne j$, $i \\ne k$, $j \\ne k$): The triangle formed by $(x_i,y_i)$, $(x_j,y_j)$, $(x_k,y_k)$ contains no other hidden point.\n\nThen, the following interaction happens:\n\n- If the answer is invalid or the triangle contains another hidden point, the interactor responds with $-1$;\n- If the answer is correct and there are more test cases to solve, you are given the value of $n$ for the next test case;\n- Otherwise, it means that all test cases are solved correctly, and your program may terminate gracefully.\n\nDo note that printing the answer does not count towards the number of queries made.\n\nDo note that the interactor may be adaptive while choosing the point to give you. In other words, the choice of the point can be determined by various factors including but not limited to the orientation of points and the previous queries. However, note that the sequence of points will never be altered.\n\nAfter printing each query do not forget to output the end of line and flush$^{\\text{∗}}$ the output. Otherwise, you will get Idleness limit exceeded verdict.\n\nIf, at any interaction step, you read $-1$ instead of valid data, your solution must exit immediately. This means that your solution will receive Wrong answer because of an invalid query or any other mistake. Failing to exit can result in an arbitrary verdict because your solution will continue to read from a closed stream.\n\nHacks\n\nHacks are disabled for this problem. Your solution will be judged on exactly $\\mathbf{35}$ input files, including the example input.\n\n$^{\\text{∗}}$To flush, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- sys.stdout.flush() in Python;\n- see the documentation for other languages.\n\n### Example\n\n#### Input #1\n\n```\n2\n6\n\n5\n\n4\n\n0\n\n3\n```\n\n#### Output #1\n\n```\n\n? 1 2 3\n\n? 1 5 3\n\n? 2 5 6\n\n! 2 5 6\n\n! 1 2 3\n```\n\n### Note\n\nIn the first test case, the points are $(3,0),(0,3),(5,2),(3,1),(2,2),(4,4)$.\n\nThe triangles corresponding to the three queries are as follows.\n\n![](https://espresso.codeforces.com/8de267b041b650ab4375c054841b7e29b9cb32dd.png)\n\nYou can see that the triangle formed by $(0,3)$, $(2,2)$, $(4,4)$ does not contain any other hidden point inside. Therefore, it is a valid answer.\n\nDo note that the interaction example only shows a valid interaction, and not necessarily the actual response. For example, it is possible that the Frontman responds with $4$ when you query \"? 1 2 3\". However, as the Frontman does not alter the sequence of points, he never responds with $6$ for the same query.\n\nIn the second test case, there are only $3$ points. Therefore, we know that the unique triangle formed by the points does not contain any other hidden point inside.", "cfid": "2074E"}
{"problem_id": "2078A", "problem_title": "A. Final Verdict", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2078/A", "problem_statement": "[Testify - void (Mournfinale) feat. 星熊南巫](https://www.youtube.com/watch?v=xkUN_9HFNPg)\n\nYou are given an array $a$ of length $n$, and must perform the following operation until the length of $a$ becomes $1$.\n\nChoose a positive integer $k < |a|$ such that $\\frac{|a|}{k}$ is an integer. Split $a$ into $k$ subsequences$^{\\text{∗}}$ $s_1, s_2, \\ldots, s_k$ such that:\n\n- Each element of $a$ belongs to exactly one subsequence.\n- The length of every subsequence is equal.\n\nAfter this, replace $a = \\left[ \\operatorname{avg}(s_1), \\operatorname{avg}(s_2), \\ldots, \\operatorname{avg}(s_k) \\right] $, where $\\operatorname{avg}(s) = \\frac{\\sum_{i = 1}^{|s|} s_i}{|s|}$ is the average of all the values in the subsequence. For example, $\\operatorname{avg}([1, 2, 1, 1]) = \\frac{5}{4} = 1.25$.\n\nYour task is to determine whether there exists a sequence of operations such that after all operations, $a = [x]$.\n\n$^{\\text{∗}}$A sequence $x$ is a subsequence of a sequence $y$ if $x$ can be obtained from $y$ by the deletion of several (possibly, zero or all) elements.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 500$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$, $x$ ($1 \\leq n, x \\leq 100$) — the length of the array $a$ and the final desired value.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 100$) — the array $a$.\n\n### Output\n\nFor each test case, output \"YES'\" (without quotes) if there exists such a sequence of operations, and \"NO\" (without quotes) otherwise.\n\nYou can output \"YES\" and \"NO\" in any case (for example, strings \"yES\", \"yes\" and \"Yes\" will be recognized as a positive response).\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n1 3\n\n3\n\n4 9\n\n7 11 2 5\n\n6 9\n\n1 9 14 12 10 8\n\n10 10\n\n10 10 10 10 10 10 10 10 10 10\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nYES\nYES\n```\n\n### Note\n\nIn the first test case, $x = 3$ and $a = [3]$ already holds.\n\nIn the second test case, $x = 9$, and there exists no sequence of operations such that after all operations, $a = [9]$.\n\nIn the third test case, $x = 9$, and here is one possible sequence of operations.\n\n1. $k = 2$, $s_1 = [1, 12, 8]$ and $s_2 = [9, 14, 10]$. Hence, $a = [\\operatorname{avg}(s_1), \\operatorname{avg}(s_2)] = [7, 11]$.\n2. $k = 1$ and $s_1 = [7, 11]$. Hence, $a = [\\operatorname{avg}(s_1)] = [9]$.\n\nIn the fourth test case, $x = 10$, and here is one possible sequence of operations.\n\n1. $k = 1$ and $s_1 = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]$. Hence, $a = [\\operatorname{avg}(s_1)] = [10]$.", "cfid": "2078A"}
{"problem_id": "2077A", "problem_title": "A. Breach of Faith", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2077/A", "problem_statement": "[Breach of Faith - Supire feat.eili](https://www.youtube.com/watch?v=nVTiCKIIQSM)\n\nYou and your team have worked tirelessly until you have a sequence $a_1, a_2, \\ldots, a_{2n+1}$ of positive integers satisfying these properties.\n\n- $1 \\le a_i \\le 10^{18}$ for all $1 \\le i \\le 2n + 1$.\n- $a_1, a_2, \\ldots, a_{2n+1}$ are pairwise distinct.\n- $a_1 = a_2 - a_3 + a_4 - a_5 + \\ldots + a_{2n} - a_{2n+1}$.\n\nHowever, the people you worked with sabotaged you because they wanted to publish this sequence first. They deleted one number from this sequence and shuffled the rest, leaving you with a sequence $b_1, b_2, \\ldots, b_{2n}$. You have forgotten the sequence $a$ and want to find a way to recover it.\n\nIf there are many possible sequences, you can output any of them. It can be proven under the constraints of the problem that at least one sequence $a$ exists.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains one integer $n$ ($1 \\leq n \\leq 2 \\cdot 10^5$).\n\nThe second line of each test case contains $2n$ distinct integers $b_1, b_2, \\ldots, b_{2n}$ ($1 \\leq b_i \\leq 10^9$), denoting the sequence $b$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output $2n+1$ distinct integers, denoting the sequence $a$ ($1 \\leq a_i \\leq 10^{18}$).\n\nIf there are multiple possible sequences, you can output any of them. The sequence $a$ should satisfy the given conditions, and it should be possible to obtain $b$ after deleting one element from $a$ and shuffling the remaining elements.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n1\n\n9 2\n\n2\n\n8 6 1 4\n\n3\n\n99 2 86 33 14 77\n\n2\n\n1 6 3 2\n\n```\n\n#### Output #1\n\n```\n7 9 2\n1 8 4 6 9\n86 99 2 77 69 14 33\n4 6 1 2 3\n```", "cfid": "2077A"}
{"problem_id": "2078D", "problem_title": "D. Scammy Game Ad", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2078/D", "problem_statement": "Consider the following game.\n\n![](https://espresso.codeforces.com/f248ad16996fa7b100c145da56a742c674fad076.png)\n\nIn this game, a level consists of $n$ pairs of gates. Each pair contains one left gate and one right gate. Each gate performs one of two operations:\n\n- Addition Operation (\\+ a): Increases the number of people in a lane by a constant amount $a$.\n- Multiplication Operation (x a): Multiplies the current number of people in a lane by an integer $a$. This means the number of people increases by $(a - 1)$ times the current count in that lane.\n\nThe additional people gained from each operation can be assigned to either lane. However, people already in a lane cannot be moved to the other lane.\n\nInitially, there is one person in each lane. Your task is to determine the maximum total number of people that can be achieved by the end of the level.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe first line of each test case contains one integer $n$ ($1 \\leq n \\le 30$) — the number of pairs of gates.\n\nThe next $n$ lines of each test case provide the information for the left gate followed by the right gate of each gate pair. The information for each gate is given in the form + $a$ ($1 \\le a \\le 1000$) or x $a$ ($2 \\le a \\le 3$) for some integer $a$.\n\n### Output\n\nFor each test case, output a single integer — the maximum total number of people at the end of the level.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3\n\n\\+ 4 x 2\n\nx 3 x 3\n\n\\+ 7 + 4\n\n4\n\n\\+ 9 x 2\n\nx 2 x 3\n\n\\+ 9 + 10\n\nx 2 + 1\n\n4\n\nx 2 + 1\n\n\\+ 9 + 10\n\nx 2 x 3\n\n\\+ 9 x 2\n\n5\n\nx 3 x 3\n\nx 2 x 2\n\n\\+ 21 + 2\n\nx 2 x 3\n\n\\+ 41 x 3\n\n```\n\n#### Output #1\n\n```\n32\n98\n144\n351\n```\n\n### Note\n\nIn the first case, here is one possible way to play this game optimally.\n\nInitially, we have $l=1$ person in the left lane and $r=1$ person in the right lane.\n\nAfter passing through the first pair of gates, we gain $4$ people from the left gate and $1 \\cdot (2-1) = 1$ person from the right gate, for a total of $4+1=5$ people. We allocate $2$ people to the left lane and $3$ people to the right lane. This results in $l=1+2=3$ people in the left lane and $r=1+3=4$ people in the right lane.\n\nAfter passing through the second pair of gates, we gain $3 \\cdot (3-1) = 6$ people from the left gate and $4 \\cdot (3-1) = 8$ people from the right gate, for a total of $6+8=14$ people. We allocate $7$ people to the left lane and $7$ people to the right lane. This results in $l=3+7=10$ people in the left lane and $r=4+7=11$ people in the right lane.\n\nAfter passing through the last pair of gates, we gain $7$ people from the left gate and $4$ people from the right gate, for a total of $7+4=11$ people. We allocate $6$ people to the left lane and $5$ people to the right lane. This results in $l=10+6=16$ people in the left lane and $r=11+5=16$ people in the right lane.\n\nAt the end, the total number of people is $16+16=32$.", "cfid": "2078D"}
{"problem_id": "2078B", "problem_title": "B. Vicious Labyrinth", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2078/B", "problem_statement": "[Axium Crisis - ak+q](https://youtu.be/1HyuI8Bvnsg?si=6amlU5OPKnJiydZs)\n\nThere are $n$ cells in a labyrinth, and cell $i$ ($1 \\leq i \\leq n$) is $n - i$ kilometers away from the exit. In particular, cell $n$ is the exit. Note also that each cell is connected to the exit but is not accessible from any other cell in any way.\n\nIn each cell, there is initially exactly one person stuck in it. You want to help everyone get as close to the exit as possible by installing a teleporter in each cell $i$ ($1 \\leq i \\leq n$), which translocates the person in that cell to another cell $a_i$.\n\nThe labyrinth owner caught you in the act. Amused, she let you continue, but under some conditions:\n\n- Everyone must use the teleporter exactly $k$ times.\n- No teleporter in any cell can lead to the same cell it is in. Formally, $i \\neq a_i$ for all $1 \\leq i \\leq n$.\n\nYou must find a teleporter configuration that minimizes the sum of distances of all individuals from the exit after using the teleporter exactly $k$ times while still satisfying the restrictions of the labyrinth owner.\n\nIf there are many possible configurations, you can output any of them.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first and only line of each test case contains two integers $n$ and $k$ ($2 \\leq n \\leq 2 \\cdot 10^5$, $1 \\leq k \\leq 10^9$) — the number of cells in the labyrinth and the value $k$.\n\nIt is guaranteed that the total sum of $n$ across all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output $n$ integers — the destinations of the teleporters $a_1, a_2, \\ldots, a_n$ in order, satisfying the given conditions ($1 \\leq a_i \\leq n$, $a_i \\neq i$).\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n2 1\n\n3 2\n\n```\n\n#### Output #1\n\n```\n2 1\n2 3 2\n```\n\n### Note\n\nIn the first test case, the position of each person is as follows.\n\n- Before teleporting: $[1, 2]$.\n- First teleportation: $[2, 1]$.\n\nThe distance sum is $(2-2) + (2-1) = 1$, which is the minimum possible.\n\nIn the second test case, the position of each person is as follows.\n\n- Before teleporting: $[1, 2, 3]$.\n- First teleportation: $[2, 3, 2]$.\n- Second teleportation: $[3, 2, 3]$.\n\nThe distance sum is $(3-3) + (3-2) + (3-3) = 1$, which is the minimum possible.", "cfid": "2078B"}
{"problem_id": "2071C", "problem_title": "C. Trapmigiano Reggiano", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2071/C", "problem_statement": "In an Italian village, a hungry mouse starts at vertex $\\textrm{st}$ on a given tree$^{\\text{∗}}$ with $n$ vertices.\n\nGiven a permutation $p$ of length $n$$^{\\\\text{†}}$, there are $n$ steps. For the $i$-th step:\n\n- A tempting piece of Parmesan cheese appears at vertex $p_i$. If the mouse is currently at vertex $p_i$, it will stay there and enjoy the moment. Otherwise, it will move along the simple path to vertex $p_i$ by one edge.\n\nYour task is to find such a permutation so that, after all $n$ steps, the mouse inevitably arrives at vertex $\\textrm{en}$, where a trap awaits.\n\nNote that the mouse must arrive at $\\textrm{en}$ after all $n$ steps, though it may pass through $\\textrm{en}$ earlier during the process.\n\n$^{\\text{∗}}$A tree is a connected graph without cycles.\n\n$^{\\text{†}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n$, $\\textrm{st}$, and $\\textrm{en}$ ($1 \\le n \\le 10^5$; $1 \\le \\textrm{st}, \\textrm{en} \\le n$) — the number of vertices of the tree, the starting vertex, and the trap vertex.\n\nEach of the next $n - 1$ lines contains two integers $u$ and $v$ ($1 \\le u, v \\le n$, $u \\neq v$) — the indices of the vertices connected by an edge.\n\nIt is guaranteed that the given edges form a tree.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case:\n\n- If no such permutation exists, output $-1$.\n- Otherwise, output $n$ integers $p_1, p_2, \\ldots, p_n$, representing the order in which the cheese will appear at the vertices, ensuring the mouse will eventually be caught at vertex $\\textrm{en}$.\n\nIf there are multiple solutions, print any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n1 1 1\n\n2 1 2\n\n1 2\n\n3 2 2\n\n1 2\n\n2 3\n\n6 1 4\n\n1 2\n\n1 3\n\n4 5\n\n5 6\n\n1 4\n\n```\n\n#### Output #1\n\n```\n1\n1 2\n3 1 2\n1 4 3 2 6 5```\n\n### Note\n\nIn the first test case, there is only one permutation with length $n = 1$ that is $p = [1]$, which successfully catches the mouse:\n\n\n\n$$\\textrm{st} = 1 \\overset{p_1 = 1}{\\xrightarrow{\\hspace{1.3cm}}} 1 = \\textrm{en}.$$\n\nIn the second test case, one possible permutation with length $n = 2$ is $p = [1, 2]$:\n\n\n\n$$\\textrm{st} = 1 \\overset{p_1 = 1}{\\xrightarrow{\\hspace{1.3cm}}} 1 \\overset{p_2 = 2}{\\xrightarrow{\\hspace{1.3cm}}} 2 = \\textrm{en}.$$\n\nIn the third test case, one possible permutation with length $n = 3$ is $p = [3, 1, 2]$:\n\n\n\n$$\\textrm{st} = 2 \\overset{p_1 = 3}{\\xrightarrow{\\hspace{1.3cm}}} 3 \\overset{p_2 = 1}{\\xrightarrow{\\hspace{1.3cm}}} 2 \\overset{p_3 = 2}{\\xrightarrow{\\hspace{1.3cm}}} 2 = \\textrm{en}.$$\n\n", "cfid": "2071C"}
{"problem_id": "2071B", "problem_title": "B. Perfecto", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2071/B", "problem_statement": "A permutation $p$ of length $n$$^{\\\\text{∗}}$ is perfect if, for each index $i$ ($1 \\le i \\le n$), it satisfies the following:\n\n- The sum of the first $i$ elements $p_1 + p_2 + \\ldots + p_i$ is not a perfect square$^{\\text{†}}$.\n\nYou would like things to be perfect. Given a positive integer $n$, find a perfect permutation of length $n$, or print $-1$ if none exists.\n\n$^{\\text{∗}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n$^{\\text{†}}$A perfect square is an integer that is the square of an integer, e.g., $9=3^2$ is a perfect square, but $8$ and $14$ are not.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first and only line of each test case contains a single integer $n$ ($1 \\le n \\le 5 \\cdot 10^5$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case:\n\n- If no solution exists, print a single integer $-1$.\n- Otherwise, print $n$ integers $p_1,p_2,\\ldots,p_n$ — the perfect permutation you find.\n\nIf there are multiple solutions, print any of them.\n\n### Example\n\n#### Input #1\n\n```\n3\n1\n4\n5\n```\n\n#### Output #1\n\n```\n-1\n2 4 1 3\n5 1 4 3 2```\n\n### Note\n\nIn the first test case, there is only one permutation with length $n = 1$ that is $p = [1]$, which is not perfect:\n\n- $p_1 = 1 = x^2$ for $x = 1$.\n\nIn the second test case, one possible perfect permutation with length $n = 4$ is $p = [2, 4, 1, 3]$:\n\n- $p_1 = 2 \\neq x^2$;\n- $p_1 + p_2 = 2 + 4 = 6 \\neq x^2$;\n- $p_1 + p_2 + p_3 = 2 + 4 + 1 = 7 \\neq x^2$;\n- $p_1 + p_2 + p_3 + p_4 = 2 + 4 + 1 + 3 = 10 \\neq x^2$.\n\nIn the third test case, one possible perfect permutation with length $n = 5$ is $p = [5, 1, 4, 3, 2]$:\n\n- $p_1 = 5 \\neq x^2$;\n- $p_1 + p_2 = 5 + 1 = 6 \\neq x^2$;\n- $p_1 + p_2 + p_3 = 5 + 1 + 4 = 10 \\neq x^2$;\n- $p_1 + p_2 + p_3 + p_4 = 5 + 1 + 4 + 3 = 13 \\neq x^2$;\n- $p_1 + p_2 + p_3 + p_4 + p_5 = 5 + 1 + 4 + 3 + 2 = 15 \\neq x^2$.", "cfid": "2071B"}
{"problem_id": "2071A", "problem_title": "A. The Play Never Ends", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2071/A", "problem_statement": "Let's introduce a two-player game, table tennis, where a winner is always decided and draws are impossible.\n\nThree players, Sosai, Fofo, and Hohai, want to spend the rest of their lives playing table tennis. They decided to play forever in the following way:\n\n- In each match, two players compete while the third spectates.\n\n- To ensure fairness, no player can play three times in a row. The player who plays twice in a row must sit out as a spectator in the next match, which will be played by the other two players. Otherwise, the winner and the spectator will play in the next match, while the loser will spectate.\n\nNow, the players, fully immersed in this infinite loop of matches, have tasked you with solving the following problem:\n\nGiven an integer $k$, determine whether the spectator of the first match can be the spectator in the $k$-th match.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$). The description of the test cases follows.\n\nThe only line of each test case contains one integer $k$ ($1 \\le k \\le 10^9$).\n\n### Output\n\nFor each test case, print \"YES\" (without quotes) if the spectator of the first match can be the spectator of the $k$-th match, and \"NO\" (without quotes) otherwise.\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n1\n\n2\n\n333\n\n1000000000\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nNO\nYES\n```\n\n### Note\n\nIn the first test case, the spectator of the first match is already a spectator in the $1$st match.\n\nIn the second test case, the spectator of the first match will play in the $2$nd match regardless of the result of the first match.", "cfid": "2071A"}
{"problem_id": "2071D1", "problem_title": "D1. Infinite Sequence (Easy Version)", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2071/D1", "problem_statement": "This is the easy version of the problem. The difference between the versions is that in this version, $l=r$. You can hack only if you solved all versions of this problem.\n\nYou are given a positive integer $n$ and the first $n$ terms of an infinite binary sequence $a$, which is defined as follows:\n\n- For $m>n$, $a\\_m = a\\_1 \\\\oplus a\\_2 \\\\oplus \\\\ldots \\\\oplus a\\_{\\\\lfloor \\\\frac{m}{2} \\\\rfloor}$$^{\\\\text{∗}}$.\n\nYour task is to compute the sum of elements in a given range $[l, r]$: $a_l + a_{l + 1} + \\ldots + a_r$.\n\n$^{\\\\text{∗}}$$\\\\oplus$ denotes the bitwise XOR operation.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n$, $l$, and $r$ ($1 \\le n \\le 2 \\cdot 10^5$, $1 \\le l=r\\le 10^{18}$).\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($\\color{red}{a_i \\in \\{0, 1\\}}$) — the first $n$ terms of the sequence $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the sum of elements in the given range.\n\n### Example\n\n#### Input #1\n\n```\n\n9\n\n1 1 1\n\n1\n\n2 3 3\n\n1 0\n\n3 5 5\n\n1 1 1\n\n1 234 234\n\n0\n\n5 1111 1111\n\n1 0 1 0 1\n\n1 1000000000000000000 1000000000000000000\n\n1\n\n10 87 87\n\n0 1 1 1 1 1 1 1 0 0\n\n12 69 69\n\n1 0 0 0 0 1 0 1 0 1 1 0\n\n13 46 46\n\n0 1 0 1 1 1 1 1 1 0 1 1 1\n\n```\n\n#### Output #1\n\n```\n1\n1\n0\n0\n1\n0\n1\n0\n0\n```\n\n### Note\n\nIn the first test case, the sequence $a$ is equal to \n\n$$[\\underline{\\color{red}{1}}, 1, 1, 0, 0, 1, 1, 1, 1, 1, \\ldots]$$\n\nwhere $l = 1$, and $r = 1$. The sum of elements in the range $\\[1, 1\\]$ is equal to \n\n$$a_1 = 1.$$\n\nIn the second test case, the sequence $a$ is equal to \n\n$$[\\color{red}{1}, \\color{red}{0}, \\underline{1}, 1, 1, 0, 0, 1, 1, 0, \\ldots]$$\n\nwhere $l = 3$, and $r = 3$. The sum of elements in the range $\\[3, 3\\]$ is equal to \n\n$$a_3 = 1.$$\n\n", "cfid": "2071D1"}
{"problem_id": "2070B", "problem_title": "B. Robot Program", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2070/B", "problem_statement": "There is a robot on the coordinate line. Initially, the robot is located at the point $x$ ($x \\ne 0$). The robot has a sequence of commands of length $n$ consisting of characters, where L represents a move to the left by one unit (from point $p$ to point $(p-1)$) and R represents a move to the right by one unit (from point $p$ to point $(p+1)$).\n\nThe robot starts executing this sequence of commands (one command per second, in the order they are presented). However, whenever the robot reaches the point $0$, the counter of executed commands is reset (i. e. it starts executing the entire sequence of commands from the very beginning). If the robot has completed all commands and is not at $0$, it stops.\n\nYour task is to calculate how many times the robot will enter the point $0$ during the next $k$ seconds.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of a test case contains three integers $n$, $x$ and $k$ ($1 \\le n \\le 2 \\cdot 10^5$; $-n \\le x \\le n$; $n \\le k \\le 10^{18}$).\n\nThe second line of a test case contains a string $s$ consisting of $n$ characters L and/or R.\n\nAdditional constraint on the input: the sum of $n$ over all test cases doesn't exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print a single integer — the number of times the robot will enter the point $0$ during the next $k$ seconds.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n3 2 6\n\nLLR\n\n2 -1 8\n\nRL\n\n4 -2 5\n\nLRRR\n\n5 3 7\n\nLRRLL\n\n1 1 1\n\nL\n\n3 -1 4846549234412827\n\nRLR\n\n```\n\n#### Output #1\n\n```\n1\n4\n1\n0\n1\n2423274617206414\n```\n\n### Note\n\nIn the first example, the robot moves as follows: $2 \\rightarrow 1 \\rightarrow \\underline{0} \\rightarrow -1 \\rightarrow -2 \\rightarrow -1$. The robot has completed all instructions from the sequence and is not at $0$. So it stops after $5$ seconds and the point $0$ is entered once.\n\nIn the second example, the robot moves as follows: $-1 \\rightarrow \\underline{0} \\rightarrow 1 \\rightarrow \\underline{0} \\rightarrow 1 \\rightarrow \\underline{0} \\rightarrow 1 \\rightarrow \\underline{0} \\rightarrow 1$. The robot worked $8$ seconds and the point $0$ is entered $4$ times.\n\nIn the third example, the robot moves as follows: $-2 \\rightarrow -3 \\rightarrow -2 \\rightarrow -1 \\rightarrow \\underline{0} \\rightarrow -1$. The robot worked $5$ seconds and the point $0$ is entered once.\n\nIn the fourth example, the robot moves as follows: $3 \\rightarrow 2 \\rightarrow 3 \\rightarrow 4 \\rightarrow 3 \\rightarrow 2$. The robot has completed all instructions from the sequence and is not at $0$. So it stops after $5$ seconds, without reaching the point $0$.", "cfid": "2070B"}
{"problem_id": "2070A", "problem_title": "A. FizzBuzz Remixed", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2070/A", "problem_statement": "FizzBuzz is one of the most well-known problems from coding interviews. In this problem, we will consider a remixed version of FizzBuzz:\n\nGiven an integer $n$, process all integers from $0$ to $n$. For every integer such that its remainders modulo $3$ and modulo $5$ are the same (so, for every integer $i$ such that $i \\bmod 3 = i \\bmod 5$), printFizzBuzz.\n\nHowever, you don't have to solve it. Instead, given the integer $n$, you have to report how many times the correct solution to that problem will print FizzBuzz.\n\n### Input\n\nThe first line contains one integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nEach test case contains one line consisting of one integer $n$ ($0 \\le n \\le 10^9$).\n\n### Output\n\nFor each test case, print one integer — the number of times the correct solution will print FizzBuzz with the given value of $n$.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n0\n\n5\n\n15\n\n42\n\n1337\n\n17101997\n\n998244353\n\n```\n\n#### Output #1\n\n```\n1\n3\n4\n9\n270\n3420402\n199648872\n```\n\n### Note\n\nIn the first test case, the solution will print FizzBuzz for the integer $0$.\n\nIn the second test case, the solution will print FizzBuzz for the integers $0, 1, 2$.\n\nIn the third test case, the solution will print FizzBuzz for the integers $0, 1, 2, 15$.", "cfid": "2070A"}
{"problem_id": "2070C", "problem_title": "C. Limited Repainting", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2070/C", "problem_statement": "You are given a strip, consisting of $n$ cells, all cells are initially colored red.\n\nIn one operation, you can choose a segment of consecutive cells and paint them blue. Before painting, the chosen cells can be either red or blue. Note that it is not possible to paint them red. You are allowed to perform at most $k$ operations (possibly zero).\n\nFor each cell, the desired color after all operations is specified: red or blue.\n\nIt is clear that it is not always possible to satisfy all requirements within $k$ operations. Therefore, for each cell, a penalty is also specified, which is applied if the cell ends up the wrong color after all operations. For the $i$-th cell, the penalty is equal to $a_i$.\n\nThe penalty of the final painting is calculated as the maximum penalty among all cells that are painted the wrong color. If there are no such cells, the painting penalty is equal to $0$.\n\nWhat is the minimum penalty of the final painting that can be achieved?\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\le n \\le 3 \\cdot 10^5$; $0 \\le k \\le n$) — the length of the strip and the maximum number of operations.\n\nThe second line contains a string $s$, consisting of $n$ characters 'R' and/or 'B'. 'R' means that the cell should be painted red. 'B' means that the cell should be painted blue.\n\nThe third line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$) — the penalty for each cell.\n\nThe sum of $n$ over all test cases does not exceed $3 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print a single integer — the minimum penalty of the final painting.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n4 1\n\nBRBR\n\n9 3 5 4\n\n4 1\n\nBRBR\n\n9 5 3 4\n\n4 2\n\nBRBR\n\n9 3 5 4\n\n10 2\n\nBRBRBBRRBR\n\n5 1 2 4 5 3 6 1 5 4\n\n5 5\n\nRRRRR\n\n5 3 1 2 4\n\n```\n\n#### Output #1\n\n```\n3\n3\n0\n4\n0\n```\n\n### Note\n\nIn the first test case, you can paint the cells from $1$ to $3$. The painting will be BBBR. So, only cell $2$ is painted the wrong color. Therefore, the penalty for it is the final penalty and equals $3$.\n\nIn the second test case, the painting BBBR will now result in a penalty of $5$. However, if you paint the cells from $1$ to $1$, resulting in BRRR, then only cell $3$ is painted the wrong color. The final penalty is $3$.\n\nIn the third test case, you can paint the cells from $1$ to $1$ and from $3$ to $3$. Then all cells will be the correct color, the penalty equals $0$.", "cfid": "2070C"}
{"problem_id": "2070D", "problem_title": "D. Tree Jumps", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2070/D", "problem_statement": "You are given a rooted tree, consisting of $n$ vertices. The vertices in the tree are numbered from $1$ to $n$, and the root is the vertex $1$. Let $d_x$ be the distance (the number of edges on the shortest path) from the root to the vertex $x$.\n\nThere is a chip that is initially placed at the root. You can perform the following operation as many times as you want (possibly zero):\n\n- move the chip from the current vertex $v$ to a vertex $u$ such that $d_u = d_v + 1$. If $v$ is the root, you can choose any vertex $u$ meeting this constraint; however, if $v$ is not the root, $u$ should not be a neighbor of $v$ (there should be no edge connecting $v$ and $u$).\n\n![](https://espresso.codeforces.com/769463352aac7806978d82f0bd49238491821303.png)\n\nFor example, in the tree above, the following chip moves are possible: $1 \\rightarrow 2$, $1 \\rightarrow 5$, $2 \\rightarrow 7$, $5 \\rightarrow 3$, $5 \\rightarrow 4$, $3 \\rightarrow 6$, $7 \\rightarrow 6$.\n\nA sequence of vertices is valid if you can move the chip in such a way that it visits all vertices from the sequence (and only them), in the order they are given in the sequence.\n\nYour task is to calculate the number of valid vertex sequences. Since the answer might be large, print it modulo $998244353$.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n \\le 3 \\cdot 10^5$).\n\nThe second line contains $n-1$ integers $p_2, p_3, \\dots, p_n$ ($1 \\le p_i < i$), where $p_i$ is the parent of the $i$-th vertex in the tree. Vertex $1$ is the root.\n\nAdditional constraint on the input: the sum of $n$ over all test cases doesn't exceed $3 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print a single integer — the number of valid vertex sequences, taken modulo $998244353$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n4\n\n1 2 1\n\n3\n\n1 2\n\n7\n\n1 2 2 1 4 5\n\n```\n\n#### Output #1\n\n```\n4\n2\n8\n```\n\n### Note\n\nIn the first example, the following sequences are valid: $[1]$, $[1, 2]$, $[1, 4]$, $[1, 4, 3]$.\n\nIn the second example, the following sequences are valid: $[1]$, $[1, 2]$.\n\nIn the third example, the following sequences are valid: $[1]$, $[1, 2]$, $[1, 2, 7]$, $[1, 2, 7, 6]$, $[1, 5]$, $[1, 5, 3]$, $[1, 5, 3, 6]$, $[1, 5, 4]$.", "cfid": "2070D"}
{"problem_id": "2072D", "problem_title": "D. For Wizards, the Exam Is Easy, but I Couldn't Handle It", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2072/D", "problem_statement": "Akito got tired of being a simple locksmith at a bank, so he decided to enroll in the Magical Academy and become the best wizard in the world! However, to enroll, he needed to solve a single problem on the exam, which the ambitious hero could not manage.\n\nIn the problem, he was given an array $a$ of length $n$. He needed to minimize the number of inversions$^{\\text{∗}}$ in the array after applying the spell exactly once. The spell was simple; to apply it, Akito had to choose two numbers $l$ and $r$ such that $1 \\le l \\le r \\le n$ and perform a cyclic shift of the subarray from $l$ to $r$ one position to the left.\n\nMore formally, Akito selects the subarray $[l, r]$ and modifies the array as follows:\n\n- From the original array $[a_1, a_2, \\ldots, a_{l - 1}, \\mathbf{ a_l }, \\mathbf{ a_{l + 1} } , \\mathbf{ \\ldots }, \\mathbf{ a_{r - 1} }, \\mathbf{ a_r }, a_{r + 1}, \\ldots, a_{n - 1}, a_n]$, he obtains the array $[a_1, a_2, \\ldots, a_{l - 1}, \\mathbf{ a_{l + 1} }, \\mathbf{ a_{l + 2} }, \\mathbf{ \\ldots }, \\mathbf{ a_{r - 1} }, \\mathbf{ a_{r} }, \\mathbf{ a_{l} }, a_{r + 1}, \\ldots, a_{n - 1}, a_{n}]$.\n\nAkito is eager to start his studies, but he still hasn't passed the exam. Help him enroll and solve the problem!\n\n$^{\\text{∗}}$An inversion in an array $b$ of length $m$ is defined as a pair of indices $(i, j)$ such that $1 \\le i < j \\le m$ and $b_i > b_j$. For example, in the array $b = [3, 1, 4, 1, 5]$, the inversions are the pairs of indices $(1, 2)$, $(1, 4)$, $(3, 4)$.\n\n### Input\n\nThe first line of input contains a number $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nIn the first line of each test case, there is a number $n$ ($1 \\le n \\le 2000$) — the length of the array $a$.\n\nIn the second line of each test case, there are $n$ numbers $a_i$ ($1 \\le a_i \\le 2000$) — the elements of the array $a$.\n\nIt is guaranteed that the sum of $n^2$ across all test cases does not exceed $4 \\cdot 10^6$.\n\n### Output\n\nFor each test case, output two numbers $l$ and $r$ ($1 \\le l \\le r \\le n$) — the boundaries of the subarray that should be chosen so that after applying the spell, the number of inversions in the array is minimized.\n\nIf there are multiple suitable pairs of boundaries, you may output any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n9\n\n7\n\n1 4 3 2 5 3 3\n\n6\n\n1 4 3 2 5 3\n\n8\n\n7 6 5 8 4 3 2 1\n\n10\n\n1 1 1 5 1 1 5 6 7 8\n\n2\n\n1337 69\n\n4\n\n2 1 2 1\n\n3\n\n998 244 353\n\n3\n\n1 2 1\n\n9\n\n1 1 2 3 5 8 13 21 34\n\n```\n\n#### Output #1\n\n```\n2 7\n2 4\n1 8\n4 6\n1 2\n1 4\n1 3\n2 3\n5 5```\n\n### Note\n\nIn the first example, the array $[1, 4, 3, 2, 5, 3, 3]$ will turn into the array $[1, 3, 2, 5, 3, 3, 4]$. The inversions in it are $(2, 3)$, $(4, 5)$, $(4, 6)$ and $(4, 7)$. It can be shown that it is not possible to achieve fewer than $4$ inversions.\n\nIn the second example, the array $[1, 4, 3, 2, 5, 3]$ will turn into $[1, 3, 2, 4, 5, 3]$. The inversions in it are $(2, 3)$, $(4, 6)$, and $(5, 6)$. The pair $l = 2$ and $r = 6$ also works, then the array will turn into $[1, 3, 2, 5, 3, 4]$, which also has $3$ inversions — $(2, 3)$, $(4, 5)$, and $(4, 6)$. It can be shown that it is not possible to achieve fewer than $3$ inversions.\n\nIn the fourth example, choosing $l = 4$ and $r = 6$ transforms the array into $[1, 1, 1, 1, 1, 5, 5, 6, 7, 8]$. It is sorted, and therefore, there are no inversions.\n\nIn the last example, the array is initially sorted, so any operation on a segment of length at least $2$ will only increase the number of inversions.", "cfid": "2072D"}
{"problem_id": "2072E", "problem_title": "E. Do You Love Your Hero and His Two-Hit Multi-Target Attacks?", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2072/E", "problem_statement": "Akito decided to study a new powerful spell. Since it possesses immeasurable strength, it certainly requires a lot of space and careful preparation. For this, Akito went out into the field. Let's represent the field as a Cartesian coordinate system.\n\nFor the spell, Akito needs to place $0 \\le n \\le 500$ staffs at distinct integer coordinates in the field such that there will be exactly $k$ pairs $(i, j)$ such that $1 \\le i < j \\le n$ and $\\rho(i, j) = d(i, j)$.\n\nHere, for two points with integer coordinates $a = (x_a, y_a)$ and $b = (x_b, y_b)$, $\\rho(a, b) = \\sqrt{(x_a - x_b)^2 + (y_a - y_b)^2}$ and $d(a, b) = |x_a - x_b| + |y_a - y_b|$.\n\n### Input\n\nThe first line of input contains a single number $t$ ($1 \\le t \\le 1000$) — the number of test cases.\n\nIn the only line of each test case, there is a single number $k$ ($0 \\le k \\le 10^5$) — the number of pairs of staffs for which the equality $\\rho(i, j) = d(i, j)$ must hold.\n\n### Output\n\nFor each test case, the first line of output should print the number $n$ ($0 \\le n \\le 500$) — the number of placed staffs.\n\nIn the following $n$ lines, pairs of integers $x_i, y_i$ $(-10^9 \\le x_i, y_i \\le 10^9)$ should be printed — the coordinates of the $i$-th staff. The points in which staffs stand must be distinct.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n0\n\n2\n\n5\n\n```\n\n#### Output #1\n\n```\n6\n69 52\n4 20\n789 9308706\n1337 1337\n-1234 -5678\n23456178 707\n10\n-236 -346262358\n273568 6435267\n2365437 31441367\n246574 -45642372\n-236 56\n4743623 -192892\n10408080 -8173135\n-237415357 31441367\n-78125638 278\n56 143231\n5\n1 1\n2 1\n1 5\n3 5\n1 10```", "cfid": "2072E"}
{"problem_id": "2072F", "problem_title": "F. Goodbye, Banker Life", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2072/F", "problem_statement": "Monsters are approaching the city, and to protect it, Akito must create a protective field around the city. As everyone knows, protective fields come in various levels. Akito has chosen the field of level $n$. To construct the field, a special phrase is required, which is the $n$-th row of the Great Magical Triangle, represented as a two-dimensional array. We will call this array $T$.\n\nThe triangle is defined as follows:\n\n- In the $i$-th row, there are $i$ integers.\n- The single integer in the first row is $k$.\n- Let the $j$-th element of the $i$-th row be denoted as $T\\_{i,j}$. Then \n\n$$T_{i,j} = \\begin{cases} T_{i-1,j-1} \\oplus T_{i-1,j}, &\\textrm{if } 1 < j < i \\\\ T_{i-1,j}, &\\textrm{if } j = 1 \\\\ T_{i-1,j-1}, &\\textrm{if } j = i \\end{cases}$$\n\nwhere $a \\oplus b$ is the bitwise [exclusive \"OR\"](https://en.wikipedia.org/wiki/Bitwise_operation#XOR)(XOR) of the integers $a$ and $b$.\n\nHelp Akito find the integers in the $n$-th row of the infinite triangle before the monsters reach the city.\n\n### Input\n\nThe first line contains the integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nIn the only line of each test case, there are two integers $n$ and $k$ ($1 \\le n \\le 10^6,\\ 1 \\le k < 2^{31}$) — the row index that Akito needs and the integer in the first row of the Great Magical Triangle, respectively.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case, output $n$ integers — the elements of the $n$-th row of the Great Magical Triangle.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n1 5\n\n2 10\n\n3 16\n\n9 1\n\n1 52\n\n```\n\n#### Output #1\n\n```\n5\n10 10\n16 0 16\n1 0 0 0 0 0 0 0 1\n52\n```\n\n### Note\n\nIn the first example, the first row of the Great Magical Triangle is $[5]$ by definition.\n\nIn the second example, $T_{2,1} = T_{1,1} = 10$ and $T_{2,2} = T_{1, 1} = 10$.", "cfid": "2072F"}
{"problem_id": "2072C", "problem_title": "C. Creating Keys for StORages Has Become My Main Skill", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2072/C", "problem_statement": "Akito still has nowhere to live, and the price for a small room is everywhere. For this reason, Akito decided to get a job at a bank as a key creator for storages.\n\nIn this magical world, everything is different. For example, the key for a storage with the code $(n, x)$ is an array $a$ of length $n$ such that:\n\n- $a_1 \\ | \\ a_2 \\ | \\ a_3 \\ | \\ \\ldots \\ | \\ a_n = x$, where $a \\ | \\ b$ is the [bitwise \"OR\"](https://en.wikipedia.org/wiki/Bitwise_operation#OR) of numbers $a$ and $b$.\n- $\\\\text{MEX}(\\\\{ a\\_1, a\\_2, a\\_3, \\\\ldots, a\\_n \\\\})$$^{\\\\text{∗}}$ is maximized among all such arrays.\n\nAkito diligently performed his job for several hours, but suddenly he got a headache. Substitute for him for an hour; for the given $n$ and $x$, create any key for the storage with the code $(n, x)$.\n\n$^{\\\\text{∗}}$$\\\\text{MEX}(S)$ is the minimum non-negative integer $z$ such that $z$ is not contained in the set $S$ and all $0 \\\\le y < z$ are contained in $S$.\n\n### Input\n\nThe first line contains the number $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nIn the only line of each test case, two numbers $n$ and $x$ ($1 \\le n \\le 2 \\cdot 10^5, 0 \\le x < 2^{30}$) are given — the length of the array and the desired value of the bitwise \"OR\".\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output $n$ integers $a_i$ ($0 \\le a_i < 2^{30}$) — the elements of the key array that satisfy all the conditions.\n\nIf there are multiple suitable arrays, output any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n9\n\n1 69\n\n7 7\n\n5 7\n\n7 3\n\n8 7\n\n3 52\n\n9 11\n\n6 15\n\n2 3\n\n```\n\n#### Output #1\n\n```\n69\n6 0 3 4 1 2 5\n4 1 3 0 2\n0 1 2 3 2 1 0\n7 0 6 1 5 2 4 3\n0 52 0\n0 1 8 3 0 9 11 2 10\n4 0 3 8 1 2\n0 3```", "cfid": "2072C"}
{"problem_id": "2072A", "problem_title": "A. New World, New Me, New Array", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2072/A", "problem_statement": "Natsume Akito has just woken up in a new world and immediately received his first quest! The system provided him with an array $a$ of $n$ zeros, an integer $k$, and an integer $p$.\n\nIn one operation, Akito chooses two integers $i$ and $x$ such that $1 \\le i \\le n$ and $-p \\le x \\le p$, and performs the assignment $a_i = x$.\n\nAkito is still not fully accustomed to controlling his new body, so help him calculate the minimum number of operations required to make the sum of all elements in the array equal to $k$, or tell him that it is impossible.\n\n### Input\n\nThe first line of input contains one integer $t$ ($1 \\le t \\le 1000$) — the number of test cases.\n\nThe only line of each test case contains three integers $n$, $k$, $p$ ($1 \\le n \\le 50$, $-2500 \\le k \\le 2500$, $1 \\le p \\le 50$) — the length of the array, the required sum, and the boundary of the segment from which numbers can be replaced.\n\n### Output\n\nFor each test case, output the minimum number of operations to achieve the final sum $k$ in the array, or $-1$ if it is impossible to achieve the sum $k$.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n21 100 10\n\n9 -420 42\n\n5 -7 2\n\n13 37 7\n\n10 0 49\n\n1 10 9\n\n7 -7 7\n\n20 31 1\n\n```\n\n#### Output #1\n\n```\n10\n-1\n4\n6\n0\n-1\n1\n-1\n```\n\n### Note\n\nIn the fifth example, the sum of the array is initially zero, so no operations are needed.\n\nIn the sixth example, the maximum sum in the array that we can achieve is $9$ (by assigning the number $9$ to the single element), so the sum $10$ cannot be obtained by any operations.\n\nIn the seventh example, only one operation $a_3 = -7$ is needed.", "cfid": "2072A"}
{"problem_id": "2072B", "problem_title": "B. Having Been a Treasurer in the Past, I Help Goblins Deceive", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2072/B", "problem_statement": "After completing the first quest, Akito left the starting cave. After a while, he stumbled upon a goblin village.\n\nSince Akito had nowhere to live, he wanted to find out the price of housing. It is well known that goblins write numbers as a string of characters '-' and '\\_', and the value represented by the string $s$ is the number of distinct subsequences$^{\\text{∗}}$ of the string $s$ that are equal to the string \"\\-\\_\\-\" (this is very similar to goblin faces).\n\nFor example, the string $s=$\"\\-\\_\\-\\-\\_-\" represents the number $6$, as it has $6$ subsequences \"\\-\\_\\-\":\n\n1. $s_1+s_2+s_3$\n2. $s_1+s_2+s_4$\n3. $s_1+s_2+s_6$\n4. $s_1+s_5+s_6$\n5. $s_3+s_5+s_6$\n6. $s_4+s_5+s_6$\n\nInitially, the goblins wrote a random string-number $s$ in response to Akito's question, but then they realized that they wanted to take as much gold as possible from the traveler. To do this, they ask you to rearrange the characters in the string $s$ so that the value of the number represented by the string $s$ is maximized.\n\n$^{\\text{∗}}$A subsequence of a string $a$ is a string $b$ that can be obtained by deleting several (possibly $0$) characters from $a$. Subsequences are considered different if they are obtained by deleting different sets of indices.\n\n### Input\n\nThe first line contains the number $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nIn the first line of each test case, there is one number $n$ ($1 \\le n \\le 2 \\cdot 10^5$) — the length of the string written by the goblins.\n\nIn the second line of each test case, there is a string $s$ of length $n$, consisting only of characters '-' and '\\_' — the string written by the goblins.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, you need to output one number — the maximum number of subsequences equal to the string \"-\\_-\", if the characters in the string $s$ are optimally rearranged.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n3\n\n\\-\\-\\_\n\n5\n\n\\_\\_\\-\\_\\_\n\n9\n\n\\-\\-\\_\\_\\-\\_---\n\n4\n\n\\_\\-\\-\\_\n\n10\n\n\\_\\-\\_\\-\\_\\-\\_-\\_-\n\n7\n\n\\_\\-\\-\\----\n\n1\n\n-\n\n2\n\n\\_-\n\n```\n\n#### Output #1\n\n```\n1\n0\n27\n2\n30\n9\n0\n0\n```\n\n### Note\n\nIn the first test case, it is beneficial to rearrange the characters to form the string \"-\\_-\". This is the only string of three characters that has at least one subsequence \"-\\_-\".\n\nIn the second test case, there is only one character \"-\", and at least two are needed for the subsequence \"-\\_-\". This means that for any rearrangement of characters, the answer will be $0$.\n\nIn the seventh and eighth test cases, the length of the string $n < 3$, which means that subsequences of length $3$ do not exist.", "cfid": "2072B"}
{"problem_id": "2069B", "problem_title": "B. Set of Strangers", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2069/B", "problem_statement": "You are given a table of $n$ rows and $m$ columns. Initially, the cell at the $i$-th row and the $j$-th column has color $a_{i, j}$.\n\nLet's say that two cells are strangers if they don't share a side. Strangers are allowed to touch with corners.\n\nLet's say that the set of cells is a set of strangers if all pairs of cells in the set are strangers. Sets with no more than one cell are sets of strangers by definition.\n\nIn one step, you can choose any set of strangers such that all cells in it have the same color and paint all of them in some other color. You can choose the resulting color.\n\nWhat is the minimum number of steps you need to make the whole table the same color?\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. Next, $t$ cases follow.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\le n \\le m \\le 700$) — the number of rows and columns in the table.\n\nThe next $n$ lines contain the colors of cells in the corresponding row $a_{i, 1}, \\dots, a_{i, m}$ ($1 \\le a_{i, j} \\le nm$).\n\nIt's guaranteed that the total sum of $nm$ doesn't exceed $5 \\cdot 10^5$ over all test cases.\n\n### Output\n\nFor each test case, print one integer — the minimum number of steps to paint all cells of the table the same color.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n1 1\n\n1\n\n3 3\n\n1 2 1\n\n2 3 2\n\n1 3 1\n\n1 6\n\n5 4 5 4 4 5\n\n3 4\n\n1 4 2 2\n\n1 4 3 5\n\n6 6 3 5\n\n```\n\n#### Output #1\n\n```\n0\n2\n1\n10\n```\n\n### Note\n\nIn the first test case, the table is painted in one color from the start.\n\nIn the second test case, you can, for example, choose all cells with color $1$ and paint them in $3$. Then choose all cells with color $2$ and also paint them in $3$.\n\nIn the third test case, you can choose all cells with color $5$ and paint them in color $4$.", "cfid": "2069B"}
{"problem_id": "2069D", "problem_title": "D. Palindrome Shuffle", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2069/D", "problem_statement": "You are given a string $s$ consisting of lowercase Latin letters.\n\nYou can perform the following operation with the string $s$: choose a contiguous substring (possibly empty) of $s$ and shuffle it (reorder the characters in the substring as you wish).\n\nRecall that a palindrome is a string that reads the same way from the first character to the last and from the last character to the first. For example, the strings a, bab, acca, bcabcbacb are palindromes, but the strings ab, abbbaa, cccb are not.\n\nYour task is to determine the minimum possible length of the substring on which the aforementioned operation must be performed in order to convert the given string $s$ into a palindrome.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe only line of each test case contains a string $s$ ($2 \\le |s| \\le 2 \\cdot 10^5$), consisting of lowercase Latin letters.\n\nAdditional constraints on the input:\n\n- the string $s$ has an even length;\n- the string $s$ can always be converted to a palindrome;\n- the sum of lengths of $s$ over all test cases doesn't exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print a single integer — the minimum possible length of the substring on which the aforementioned operation must be performed in order to convert the given string $s$ into a palindrome.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\nbaba\n\ncc\n\nddaa\n\nacbacddacbca\n\n```\n\n#### Output #1\n\n```\n2\n0\n3\n2\n```\n\n### Note\n\nIn the first example, you can perform the operation as follows: baba $\\rightarrow$ baab.\n\nIn the second example, the string is already a palindrome, so we can shuffle an empty substring.\n\nIn the third example, you can perform the operation as follows: ddaa $\\rightarrow$ adda.\n\nIn the fourth example, you can perform the operation as follows: acbacddacbca $\\rightarrow$ acbcaddacbca.", "cfid": "2069D"}
{"problem_id": "2069A", "problem_title": "A. Was there an Array?", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2069/A", "problem_statement": "For an array of integers $a_1, a_2, \\dots, a_n$, we define its equality characteristic as the array $b_2, b_3, \\dots, b_{n-1}$, where $b_i = 1$ if the $i$-th element of the array $a$ is equal to both of its neighbors, and $b_i = 0$ if the $i$-th element of the array $a$ is not equal to at least one of its neighbors.\n\nFor example, for the array $[1, 2, 2, 2, 3, 3, 4, 4, 4, 4]$, the equality characteristic will be $[0, 1, 0, 0, 0, 0, 1, 1]$.\n\nYou are given the array $b_2, b_3, \\dots, b_{n-1}$. Your task is to determine whether there exists such an array $a$ for which the given array is the equality characteristic.\n\n### Input\n\nThe first line contains one integer $t$ ($1 \\le t \\le 1000$) — the number of test cases.\n\nEach test case consists of two lines:\n\n- the first line contains one integer $n$ ($3 \\le n \\le 100$);\n- the second line contains $n-2$ integers $b_2, b_3, \\dots, b_{n-1}$ ($0 \\le b_i \\le 1$).\n\n### Output\n\nFor each test case, output YES if the array $a$ exists, or NO if such an array does not exist. Each letter can be printed in any case.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n10\n\n0 1 0 0 0 0 1 1\n\n3\n\n1\n\n10\n\n0 1 0 1 1 0 0 1\n\n```\n\n#### Output #1\n\n```\nYES\nYES\nNO\n```\n\n### Note\n\nIn the first example, the array $a = [1, 2, 2, 2, 3, 3, 4, 4, 4, 4]$ is suitable.\n\nIn the second example, the array $a = [7, 7, 7]$ is suitable.", "cfid": "2069A"}
{"problem_id": "2069C", "problem_title": "C. Beautiful Sequence", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2069/C", "problem_statement": "Let's call an integer sequence beautiful if the following conditions hold:\n\n- its length is at least $3$;\n- for every element except the first one, there is an element to the left less than it;\n- for every element except the last one, there is an element to the right larger than it;\n\nFor example, $[1, 4, 2, 4, 7]$ and $[1, 2, 4, 8]$ are beautiful, but $[1, 2]$, $[2, 2, 4]$, and $[1, 3, 5, 3]$ are not.\n\nRecall that a subsequence is a sequence that can be obtained from another sequence by removing some elements without changing the order of the remaining elements.\n\nYou are given an integer array $a$ of size $n$, where every element is from $1$ to $3$. Your task is to calculate the number of beautiful subsequences of the array $a$. Since the answer might be large, print it modulo $998244353$.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($3 \\le n \\le 2 \\cdot 10^5$).\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 3$).\n\nAdditional constraint on the input: the sum of $n$ over all test cases doesn't exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print a single integer — the number of beautiful subsequences of the array $a$, taken modulo $998244353$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n7\n\n3 2 1 2 2 1 3\n\n4\n\n3 1 2 2\n\n3\n\n1 2 3\n\n9\n\n1 2 3 2 1 3 2 2 3\n\n```\n\n#### Output #1\n\n```\n3\n0\n1\n22\n```\n\n### Note\n\nIn the first test case of the example, the following subsequences are beautiful:\n\n- $[a_3, a_4, a_7]$;\n- $[a_3, a_5, a_7]$;\n- $[a_3, a_4, a_5, a_7]$.", "cfid": "2069C"}
{"problem_id": "2064B", "problem_title": "B. Variety is Discouraged", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2064/B", "problem_statement": "Define the score of an arbitrary array $b$ to be the length of $b$ minus the number of distinct elements in $b$. For example:\n\n- The score of $[1, 2, 2, 4]$ is $1$, as it has length $4$ and only $3$ distinct elements ($1$, $2$, $4$).\n- The score of $[1, 1, 1]$ is $2$, as it has length $3$ and only $1$ distinct element ($1$).\n- The empty array has a score of $0$.\n\nYou have an array $a$. You need to remove some non-empty contiguous subarray from $a$ at most once.\n\nMore formally, you can do the following at most once:\n\n- pick two integers $l$, $r$ where $1 \\le l \\le r \\le n$, and\n- delete the contiguous subarray $[a_l,\\ldots,a_r]$ from $a$ (that is, replace $a$ with $[a_1,\\ldots,a_{l - 1},a_{r + 1},\\ldots,a_n]$).\n\nOutput an operation such that the score of $a$ is maximum; if there are multiple answers, output one that minimises the final length of $a$ after the operation. If there are still multiple answers, you may output any of them.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10^4$) — the number of testcases.\n\nThe first line of each testcase contains an integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) — the length of the array $a$.\n\nThe second line of each testcase contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($1 \\le a_i \\le n$).\n\nThe sum of $n$ across all testcases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each testcase, if you wish to not make a move, output $0$.\n\nOtherwise, output two integers $l$ and $r$ ($1 \\le l \\le r \\le n$), representing the left and right bound of the removed subarray.\n\nThe removed subarray should be chosen such that the score is maximized, and over all such answers choose any of them that minimises the final length of the array.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n1\n\n1\n\n5\n\n1 1 1 1 1\n\n4\n\n2 1 3 2\n\n```\n\n#### Output #1\n\n```\n1 1\n0\n2 3\n```\n\n### Note\n\nIn the first testcase, we have two options:\n\n- do nothing: the score of $[1]$ is $1-1=0$.\n- remove the subarray with $l=1$, $r=1$: we remove the only element, and we get an empty array with score $0$.\n\nTherefore, the maximum score possible is $0$. However, since we need to additionally minimise the final length of the array, we must output the second option with $l=r=1$. Note that the first option of doing nothing is incorrect, since it has a longer final length.\n\nIn the second testcase, no subarray is selected, so after which $a$ is still $[1, 1, 1, 1, 1]$. This has length $5$ and $1$ distinct element, so it has a score of $5 - 1 = 4$. This can be proven to be a shortest array which maximises the score.\n\nIn the third testcase, the subarray selected is $[2, \\color{red}1, \\color{red}3, 2]$, after which $a$ becomes $[2, 2]$. This has length $2$ and $1$ distinct element, so it has a score of $2 - 1 = 1$. This can be proven to be a shortest array which maximises the score.", "cfid": "2064B"}
{"problem_id": "2064C", "problem_title": "C. Remove the Ends", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2064/C", "problem_statement": "You have an array $a$ of length $n$ consisting of non-zero integers. Initially, you have $0$ coins, and you will do the following until $a$ is empty:\n\n- Let $m$ be the current size of $a$. Select an integer $i$ where $1 \\\\le i \\\\le m$, gain $\\|a\\_i\\|$$^{\\\\text{∗}}$ coins, and then:\n  - if $a_i < 0$, then replace $a$ with $[a_1,a_2,\\ldots,a_{i - 1}]$ (that is, delete the suffix beginning with $a_i$);\n  - otherwise, replace $a$ with $[a_{i + 1},a_{i + 2},\\ldots,a_m]$ (that is, delete the prefix ending with $a_i$).\n\nFind the maximum number of coins you can have at the end of the process.\n\n$^{\\text{∗}}$Here $|a_i|$ represents the absolute value of $a_i$: it equals $a_i$ when $a_i > 0$ and $-a_i$ when $a_i < 0$.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10^4$) — the number of testcases.\n\nThe first line of each testcase contains an integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) — the length of $a$.\n\nThe second line of each testcase contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($-10^9 \\le a_i \\le 10^9$, $a_i \\ne 0$).\n\nThe sum of $n$ across all testcases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the maximum number of coins you can have at the end of the process.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n6\n\n3 1 4 -1 -5 -9\n\n6\n\n-10 -3 -17 1 19 20\n\n1\n\n1\n\n```\n\n#### Output #1\n\n```\n23\n40\n1\n```\n\n### Note\n\nAn example of how to get $23$ coins in the first testcase is as follows:\n\n- $a = [3, 1, 4, -1, -5, \\color{red}{-9}] \\xrightarrow{i = 6} a = [3, 1, 4, -1, -5] $, and get $9$ coins.\n- $a = [\\color{red}{3}, 1, 4, -1, -5] \\xrightarrow{i = 1} a = [1, 4, -1, -5] $, and get $3$ coins.\n- $a = [\\color{red}{1}, 4, -1, -5] \\xrightarrow{i = 1} a = [4, -1, -5] $, and get $1$ coin.\n- $a = [4, -1, \\color{red}{-5}] \\xrightarrow{i = 3} a = [4, -1] $, and get $5$ coins.\n- $a = [4, \\color{red}{-1}] \\xrightarrow{i = 2} a = [4] $, and get $1$ coin.\n- $a = [\\color{red}{4}] \\xrightarrow{i = 1} a = [] $, and get $4$ coins.\n\nAfter all the operations, you have $23$ coins.\n\nAn example of how to get $40$ coins in the second testcase is as follows:\n\n- $a = [-10, -3, -17, \\color{red}{1}, 19, 20] \\xrightarrow{i = 4} a = [19, 20] $, and get $1$ coin.\n- $a = [\\color{red}{19}, 20] \\xrightarrow{i = 1} a = [20] $, and get $19$ coins.\n- $a = [\\color{red}{20}] \\xrightarrow{i = 1} a = [] $, and get $20$ coins.\n\nAfter all the operations, you have $40$ coins.", "cfid": "2064C"}
{"problem_id": "2064A", "problem_title": "A. Brogramming Contest", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2064/A", "problem_statement": "One day after waking up, your friend challenged you to a brogramming contest. In a brogramming contest, you are given a binary string$^{\\text{∗}}$ $s$ of length $n$ and an initially empty binary string $t$. During a brogramming contest, you can make either of the following moves any number of times:\n\n- remove some suffix$^{\\text{†}}$ from $s$ and place it at the end of $t$, or\n- remove some suffix from $t$ and place it at the end of $s$.\n\nTo win the brogramming contest, you must make the minimum number of moves required to make $s$ contain only the character $\\texttt{0}$ and $t$ contain only the character $\\texttt{1}$. Find the minimum number of moves required.\n\n$^{\\text{∗}}$A binary string is a string consisting of characters $\\texttt{0}$ and $\\texttt{1}$.\n\n$^{\\text{†}}$A string $a$ is a suffix of a string $b$ if $a$ can be obtained from deletion of several (possibly, zero or all) elements from the beginning of $b$.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\le t \\le 100$) — the number of test cases.\n\nThe first line of each test case is an integer $n$ ($1 \\le n \\le 1000$) — the length of the string $s$.\n\nThe second line of each test case contains the binary string $s$.\n\nThe sum of $n$ across all test cases does not exceed $1000$.\n\n### Output\n\nFor each testcase, output the minimum number of moves required.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n5\n\n00110\n\n4\n\n1111\n\n3\n\n001\n\n5\n\n00000\n\n3\n\n101\n\n```\n\n#### Output #1\n\n```\n2\n1\n1\n0\n3\n```\n\n### Note\n\nAn optimal solution to the first test case is as follows:\n\n- $s = \\texttt{00}\\color{red}{\\texttt{110}}$, $t =$ empty string.\n- $s = \\texttt{00}$, $t = \\texttt{11}\\color{red}{\\texttt{0}}$.\n- $s = \\texttt{000}$, $t = \\texttt{11}$.\n\nIt can be proven that there is no solution using less than $2$ moves.\n\nIn the second test case, you have to move the whole string from $s$ to $t$ in one move.\n\nIn the fourth test case, you don't have to do any moves.", "cfid": "2064A"}
{"problem_id": "2067C", "problem_title": "C. Devyatkino", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2067/C", "problem_statement": "You are given a positive integer $n$. In one operation, you can add to $n$ any positive integer whose decimal representation contains only the digit $9$, possibly repeated several times.\n\nWhat is the minimum number of operations needed to make the number $n$ contain at least one digit $7$ in its decimal representation?\n\nFor example, if $n = 80$, it is sufficient to perform one operation: you can add $99$ to $n$, after the operation $n = 179$, which contains the digit $7$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe only line of each test case contains an integer $n$ ($10 \\leq n \\leq 10^9$).\n\n### Output\n\nFor each test case, output the minimum number of operations required for the number $n$ to contain the digit $7$.\n\n### Example\n\n#### Input #1\n\n```\n\n16\n\n51\n\n60\n\n61\n\n777\n\n12345689\n\n1000000000\n\n2002\n\n3001\n\n977\n\n989898986\n\n80\n\n800001\n\n96\n\n70\n\n15\n\n90\n\n```\n\n#### Output #1\n\n```\n3\n2\n1\n0\n1\n3\n5\n4\n0\n7\n1\n2\n7\n0\n7\n3\n```\n\n### Note\n\nIn the first test case, three operations are sufficient: $51 + 9 + 9 + 9 = 78$, which contains the digit $7$. It can be shown that it is impossible to achieve the goal in one or two operations.\n\nIn the second test case, two operations are sufficient: $60 + 9 + 9 = 78$.\n\nIn the third test case, one operation is sufficient: $61 + 9 = 70$.\n\nIn the fourth test case, $n$ already contains the digit $7$, so no operations are required.\n\nIn the fifth test case, you can add $99$ to $n$ to obtain a number containing the digit $7$.", "cfid": "2067C"}
{"problem_id": "2067B", "problem_title": "B. Two Large Bags", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2067/B", "problem_statement": "You have two large bags of numbers. Initially, the first bag contains $n$ numbers: $a_1, a_2, \\ldots, a_n$, while the second bag is empty. You are allowed to perform the following operations:\n\n- Choose any number from the first bag and move it to the second bag.\n- Choose a number from the first bag that is also present in the second bag and increase it by one.\n\nYou can perform an unlimited number of operations of both types, in any order. Is it possible to make the contents of the first and second bags identical?\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains an integer $n$ ($2 \\le n \\le 1000$) — the length of the array $a$. It is guaranteed that $n$ is an even number.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le n$).\n\nIt is guaranteed that the sum of $n^2$ over all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case, print \"YES\" if it is possible to equalize the contents of the bags. Otherwise, output \"NO\".\n\nYou can output each letter in any case (for example, \"YES\", \"Yes\", \"yes\", \"yEs\", \"yEs\" will be recognized as a positive answer).\n\n### Example\n\n#### Input #1\n\n```\n\n9\n\n2\n\n1 1\n\n2\n\n2 1\n\n4\n\n1 1 4 4\n\n4\n\n3 4 3 3\n\n4\n\n2 3 4 4\n\n6\n\n3 3 4 5 3 3\n\n6\n\n2 2 2 4 4 4\n\n8\n\n1 1 1 1 1 1 1 4\n\n10\n\n9 9 9 10 10 10 10 10 10 10\n\n```\n\n#### Output #1\n\n```\nYes\nNo\nYes\nYes\nNo\nYes\nNo\nYes\nYes\n```\n\n### Note\n\nLet's analyze the sixth test case: we will show the sequence of operations that leads to the equality of the bags. Initially, the first bag consists of the numbers $(3, 3, 4, 5, 3, 3)$, and the second bag is empty.\n\n1. In the first operation, move the number $3$ from the first bag to the second. State: $(3, 4, 5, 3, 3)$ and $(3)$.\n2. In the second operation, increase the number $3$ from the first bag by one. This operation is possible because the second bag contains the number $3$. State: $(4, 4, 5, 3, 3)$ and $(3)$.\n3. In the third operation, move the number $4$ from the first bag to the second. State: $(4, 5, 3, 3)$ and $(3, 4)$.\n4. In the fourth operation, increase the number $4$ from the first bag by one. State: $(5, 5, 3, 3)$ and $(3, 4)$.\n5. In the fifth operation, move the number $5$ from the first bag to the second. State: $(5, 3, 3)$ and $(3, 4, 5)$.\n6. In the sixth operation, increase the number $3$ from the first bag by one. State: $(5, 3, 4)$ and $(3, 4, 5)$.\n\nAs we can see, as a result of these operations, it is possible to make the contents of the bags equal, so the answer exists.", "cfid": "2067B"}
{"problem_id": "2066A", "problem_title": "A. Object Identification", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2066/A", "problem_statement": "This is an interactive problem.\n\nYou are given an array $x_1, \\ldots, x_n$ of integers from $1$ to $n$. The jury also has a fixed but hidden array $y_1, \\ldots, y_n$ of integers from $1$ to $n$. The elements of array $y$ are unknown to you. Additionally, it is known that for all $i$, $x_i \\neq y_i$, and all pairs $(x_i, y_i)$ are distinct.\n\nThe jury has secretly thought of one of two objects, and you need to determine which one it is:\n\n- Object A: A directed graph with $n$ vertices numbered from $1$ to $n$, and with $n$ edges of the form $x_i \\to y_i$.\n- Object B: $n$ points on a coordinate plane. The $i$-th point has coordinates $(x_i, y_i)$.\n\nTo guess which object the jury has thought of, you can make queries. In one query, you must specify two numbers $i, j$ $(1 \\leq i, j \\leq n, i \\neq j)$. In response, you receive one number:\n\n- If the jury has thought of Object A, you receive the length of the shortest path (in edges) from vertex $i$ to vertex $j$ in the graph, or $0$ if there is no path.\n- If the jury has thought of Object B, you receive the Manhattan distance between points $i$ and $j$, that is $|x_i -x_j| + |y_i - y_j|$.\n\nYou have $2$ queries to determine which of the objects the jury has thought of.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$). The description of the test cases follows.\n\n### Interaction\n\nThe interaction begins with reading $n$ ($3 \\leq n \\leq 2 \\cdot 10^5$) — the length of the arrays $x$ and $y$ at the start of each test case.\n\nNext, read $n$ integers: $x_1, x_2, \\ldots, x_n$ ($1 \\leq x_i \\leq n$) — the elements of array $x$.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2 \\cdot 10^5$.\n\nThe array $y_1, y_2, \\ldots, y_n$ is fixed for each test case. In other words, the interactor is not adaptive.\n\nIt is guaranteed that $x_i \\neq y_i$ for all $1 \\leq i \\leq n$, and all pairs $(x_i, y_i)$ are distinct.\n\nTo make a query, output \"? $i$ $j$\" (without quotes, $1 \\le i, j \\le n, i \\neq j$). Then you must read the response to the query, which is a non-negative integer.\n\nTo give an answer, output \"! A\" if Object A is hidden or \"! B\" if Object B is hidden (without quotes). Note that printing the answer does not count as one of the $2$ queries.\n\nAfter printing each query do not forget to output the end of line and flush$^{\\text{∗}}$ the output. Otherwise, you will get Idleness limit exceeded verdict. If, at any interaction step, you read $-1$ instead of valid data, your solution must exit immediately. This means that your solution will reveive Wrong answer because of an invalid query or any other mistake. Failing to exit can result in an arbitrary verdict because your solution will continue to read from a closed stream. Note that if the query is correct, the response will never be $-1$.\n\nHacks\n\nThe first line must contain an integer $t$ ($1 \\le t \\le 1000$) — the number of test cases.\n\nThe first line of each test case must contain an integer $n$ ($3 \\le n \\le 2 \\cdot 10^5$) — the length of the hidden array.\n\nThe second line of each test case must contain $n$ integers — $x_1, x_2, \\ldots, x_n$ ($1 \\le x_i \\le n$).\n\nThe third line of each test case must contain $n$ integers — $y_1, y_2, \\ldots, y_n$ ($1 \\le y_i \\le n$).\n\nIt must be ensured that $x_i \\neq y_i$ for all $1 \\le i \\le n$, and all pairs $(x_i, y_i)$ must be distinct.\n\nThe fourth line must contain one character: A or B, indicating which of the objects you want to hide.\n\nThe sum of $n$ across all test cases must not exceed $2 \\cdot 10^5$.\n\n$^{\\text{∗}}$To flush, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- sys.stdout.flush() in Python;\n- see the documentation for other languages.\n\n### Example\n\n#### Input #1\n\n```\n2\n3\n2 2 3\n\n1\n\n0\n\n5\n5 1 4 2 3\n\n4\n\n4```\n\n#### Output #1\n\n```\n? 2 3\n\n? 1 2\n\n! A\n\n? 1 5\n\n? 5 1\n\n! B```\n\n### Note\n\nIn the first test case, $x = [2,2,3]$, $y = [1,3,1]$ and Object A is guessed.\n\nIn the second test case, $x = [5,1,4,2,3]$, $y = [3,3,2,4,1]$ and Object B is guessed.", "cfid": "2066A"}
{"problem_id": "2067A", "problem_title": "A. Adjacent Digit Sums", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2067/A", "problem_statement": "You are given two numbers $x, y$. You need to determine if there exists an integer $n$ such that $S(n) = x$, $S(n + 1) = y$.\n\nHere, $S(a)$ denotes the sum of the digits of the number $a$ in the decimal numeral system.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 500$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $x, y$ ($1 \\le x \\le 1000, 1 \\le y \\le 1000$).\n\n### Output\n\nFor each test case, print \"NO\" if a suitable $n$ does not exist. Otherwise, output \"YES\".\n\nYou can output each letter in any case (for example, \"YES\", \"Yes\", \"yes\", \"yEs\", \"yEs\" will be recognized as a positive answer).\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n1 2\n\n77 77\n\n997 999\n\n999 1\n\n1000 1\n\n1 11\n\n18 1\n\n```\n\n#### Output #1\n\n```\nYes\nNo\nNo\nYes\nNo\nNo\nYes\n```\n\n### Note\n\nIn the first test case, for example, $n = 100$ works. $S(100) = 1$, $S(101) = 2$.\n\nIn the second test case, it can be shown that $S(n) \\neq S(n+1)$ for all $n$; therefore, the answer is No.\n\nIn the fourth test case, $n = 10^{111}-1$ works, which is a number consisting of $111$ digits of $9$.", "cfid": "2067A"}
{"problem_id": "2065E", "problem_title": "E. Skibidus and Rizz", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2065/E", "problem_statement": "With the approach of Valentine's Day, Skibidus desperately needs a way to rizz up his crush! Fortunately, he knows of just the way: creating the perfect Binary String!\n\nGiven a binary string$^{\\text{∗}}$ $t$, let $x$ represent the number of $\\texttt{0}$ in $t$ and $y$ represent the number of $\\texttt{1}$ in $t$. Its balance-value is defined as the value of $\\max(x-y, y-x)$.\n\nSkibidus gives you three integers $n$, $m$, and $k$. He asks for your help to construct a binary string $s$ of length $n+m$ with exactly $n$ $\\texttt{0}$'s and $m$ $\\texttt{1}$'s such that the maximum balance-value among all of its substrings$^{\\text{†}}$ is exactly $k$. If it is not possible, output -1.\n\n$^{\\text{∗}}$A binary string only consists of characters $\\texttt{0}$ and $\\texttt{1}$.\n\n$^{\\text{†}}$A string $a$ is a substring of a string $b$ if $a$ can be obtained from $b$ by the deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe first and only line of each test case contains three integers $n$, $m$, and $k$ ($0 \\leq n, m \\leq 2\\cdot 10^5$, $1 \\leq k \\leq n + m$, $n+m\\geq 1$).\n\nIt is guaranteed that the sum of $n$ and the sum of $m$ over all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, if it is possible to construct $s$, output it on a new line. If there are multiple possible $s$, output any. Otherwise, output -1 on a new line.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n1 2 1\n\n4 3 2\n\n2 4 3\n\n8 3 2\n\n5 0 4\n\n5 0 5\n\n```\n\n#### Output #1\n\n```\n101\n0100101\n011011\n-1\n-1\n00000\n```\n\n### Note\n\nIn the first test case, we must construct $s$ such that it contains one $\\texttt{0}$, two $\\texttt{1}$, and a maximum balance of $1$ among all of its substrings. One possible valid $s$ is $\\texttt{101}$ because:\n\n- Consider the substring bounded by indices $[1, 1]$. Its balance-value is $\\max(0 - 1, 1 - 0) = 1$.\n- Consider the substring bounded by indices $[1, 2]$. Its balance-value is $\\max(1 - 1, 1 - 1) = 0$.\n- Consider the substring bounded by indices $[1, 3]$. Its balance-value is $\\max(1 - 2, 2 - 1) = 1$.\n- Consider the substring bounded by indices $[2, 2]$. Its balance-value is $\\max(1 - 0, 0 - 1) = 1$.\n- Consider the substring bounded by indices $[2, 3]$. Its balance-value is $\\max(1 - 1, 1 - 1) = 0$.\n- Consider the substring bounded by indices $[3, 3]$. Its balance-value is $\\max(0 - 1, 1 - 0) = 1$.\n\nAmong all possible substrings, the maximum balance-value is $1$.\n\nIn the second test case, the substring with the maximum balance-value is $0100$, which has a balance of $max(3-1, 1-3)=2$.", "cfid": "2065E"}
{"problem_id": "2065G", "problem_title": "G. Skibidus and Capping", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2065/G", "problem_statement": "Skibidus was abducted by aliens of Amog! Skibidus tries to talk his way out, but the Amog aliens don't believe him. To prove that he is not totally capping, the Amog aliens asked him to solve this task:\n\nAn integer $x$ is considered a semi-prime if it can be written as $p \\cdot q$ where $p$ and $q$ are (not necessarily distinct) [prime numbers](https://en.wikipedia.org/wiki/Prime_number). For example, $9$ is a semi-prime since it can be written as $3 \\cdot 3$, and $3$ is a prime number.\n\nSkibidus was given an array $a$ containing $n$ integers. He must report the number of pairs $(i, j)$ such that $i \\\\leq j$ and $\\\\operatorname{lcm}(a\\_i, a\\_j)$$^{\\\\text{∗}}$ is semi-prime.\n\n$^{\\text{∗}}$Given two integers $x$ and $y$, $\\operatorname{lcm}(x, y)$ denotes the [least common multiple](https://en.wikipedia.org/wiki/Least_common_multiple) of $x$ and $y$.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe first line of each test case contains an integer $n$ ($2 \\leq n \\leq 2 \\cdot 10^5$).\n\nThe following line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($2 \\leq a_i \\leq n$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the number of ordered pairs of indices on a new line.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n4\n\n2 2 3 4\n\n6\n\n2 2 3 4 5 6\n\n9\n\n2 2 4 5 7 8 9 3 5\n\n```\n\n#### Output #1\n\n```\n5\n12\n18\n```\n\n### Note\n\nIn the first test case, the $5$ pairs of indices are $(1, 3)$, $(1, 4)$, $(2, 3)$, $(2, 4)$, and $(4, 4)$.", "cfid": "2065G"}
{"problem_id": "2065F", "problem_title": "F. Skibidus and Slay", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2065/F", "problem_statement": "Let's define the majority of a sequence of $k$ elements as the unique value that appears strictly more than $\\left \\lfloor {\\frac{k}{2}} \\right \\rfloor$ times. If such a value does not exist, then the sequence does not have a majority. For example, the sequence $[1,3,2,3,3]$ has a majority $3$ because it appears $3 > \\left \\lfloor {\\frac{5}{2}} \\right \\rfloor = 2$ times, but $[1,2,3,4,5]$ and $[1,3,2,3,4]$ do not have a majority.\n\nSkibidus found a tree$^{\\text{∗}}$ of $n$ vertices and an array $a$ of length $n$. Vertex $i$ has the value $a_i$ written on it, where $a_i$ is an integer in the range $[1, n]$.\n\nFor each $i$ from $1$ to $n$, please determine if there exists a non-trivial simple path$^{\\text{†}}$ such that $i$ is the majority of the sequence of integers written on the vertices that form the path.\n\n$^{\\text{∗}}$A tree is a connected graph without cycles.\n\n$^{\\text{†}}$A sequence of vertices $v_1, v_2, ..., v_m$ ($m \\geq 2$) forms a non-trivial simple path if $v_i$ and $v_{i+1}$ are connected by an edge for all $1 \\leq i \\leq m - 1$ and all $v_i$ are pairwise distinct. Note that the path must consist of at least $2$ vertices.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n \\le 5 \\cdot 10^5$)  — the number of vertices.\n\nThe second line of each test case contains $a_1,a_2,\\ldots,a_n$ ($1 \\le a_i \\le n$)  — the integers written on the vertices.\n\nEach of the next $n-1$ lines contains two integers $u_i$ and $v_i$, denoting the two vertices connected by an edge ($1 \\le u_i,v_i \\le n$, $u_i \\neq v_i$).\n\nIt is guaranteed that the given edges form a tree.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a binary string $s$ of length $n$ on a separate line. $s_i$ should be computed as follows:\n\n- If there is a non-trivial path containing $i$ as the majority, $s_i$ is '1';\n- Otherwise, $s_i$ is '0'.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3\n\n1 2 3\n\n1 3\n\n2 3\n\n4\n\n3 1 1 3\n\n1 2\n\n2 3\n\n4 2\n\n4\n\n2 4 4 2\n\n1 2\n\n2 3\n\n3 4\n\n13\n\n1 4 4 7 4 7 1 1 7 11 11 11 11\n\n1 2\n\n2 3\n\n3 4\n\n4 5\n\n4 6\n\n2 7\n\n7 8\n\n2 9\n\n6 10\n\n5 11\n\n11 12\n\n10 13\n\n```\n\n#### Output #1\n\n```\n000\n1010\n0001\n1001001000100\n```\n\n### Note\n\nIn the first test case, there is no non-trivial path with $1$, $2$, or $3$ as a majority, so the binary string outputted is \"000\".\n\nIn the second test case, $1\\rightarrow 2\\rightarrow 4$ is a non-trivial path with $3$ as a majority.", "cfid": "2065F"}
{"problem_id": "2065A", "problem_title": "A. Skibidus and Amog'u", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2065/A", "problem_statement": "Skibidus lands on a foreign planet, where the local Amog tribe speaks the Amog'u language. In Amog'u, there are two forms of nouns, which are singular and plural.\n\nGiven that the root of the noun is transcribed as $S$, the two forms are transcribed as:\n\n- Singular: $S$ $+$ \"us\"\n- Plural: $S$ $+$ \"i\"\n\nHere, $+$ denotes [string concatenation](https://en.wikipedia.org/wiki/Concatenation). For example, abc $+$ def $=$ abcdef.\n\nFor example, when $S$ is transcribed as \"amog\", then the singular form is transcribed as \"amogus\", and the plural form is transcribed as \"amogi\". Do note that Amog'u nouns can have an empty root — in specific, \"us\" is the singular form of \"i\" (which, on an unrelated note, means \"imposter\" and \"imposters\" respectively).\n\nGiven a transcribed Amog'u noun in singular form, please convert it to the transcription of the corresponding plural noun.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 100$). The description of the test cases follows.\n\nThe only line of each test case contains a string $W$, which is a transcribed Amog'u noun in singular form. It is guaranteed that $W$ consists of only lowercase English letters, has a length of at most $10$, and ends with \"us\".\n\n### Output\n\nFor each test case, output the transcription of the corresponding plural noun on a separate line.\n\n### Example\n\n#### Input #1\n\n```\n\n9\n\nus\n\nsus\n\nfungus\n\ncactus\n\nsussus\n\namogus\n\nchungus\n\nntarsus\n\nskibidus\n\n```\n\n#### Output #1\n\n```\ni\nsi\nfungi\ncacti\nsussi\namogi\nchungi\nntarsi\nskibidi\n```", "cfid": "2065A"}
{"problem_id": "2065B", "problem_title": "B. Skibidus and Ohio", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2065/B", "problem_statement": "Skibidus is given a string $s$ that consists of lowercase Latin letters. If $s$ contains more than $1$ letter, he can:\n\n- Choose an index $i$ ($1 \\leq i \\leq |s| - 1$, $|s|$ denotes the current length of $s$) such that $s_i = s_{i+1}$. Replace $s_i$ with any lowercase Latin letter of his choice. Remove $s_{i+1}$ from the string.\n\nSkibidus must determine the minimum possible length he can achieve through any number of operations.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 100$) — the number of test cases.\n\nThe only line of each test case contains a string $s$ ($1 \\leq |s| \\leq 100$). It is guaranteed $s$ only contains lowercase Latin letters.\n\n### Output\n\nFor each test case, output an integer on the new line, the minimum achievable length of $s$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\nbaa\n\nskibidus\n\ncc\n\nohio\n\n```\n\n#### Output #1\n\n```\n1\n8\n1\n4\n```\n\n### Note\n\nIn the first test case, Skibidus can:\n\n- Perform an operation on $i = 2$. He replaces $s_2$ with b and removes $s_3$ from the string. Then, $s$ becomes bb.\n- Perform an operation on $i = 1$. He replaces $s_1$ with b and removes $s_2$ from the string. Then, $s$ becomes b.\n- Because $s$ only contains $1$ letter, Skibidus cannot perform any more operations.\n\nTherefore, the answer is $1$ for the first test case.\n\nIn the second test case, he cannot perform an operation on any index. Therefore, the answer is still the length of the initial string, $8$.", "cfid": "2065B"}
{"problem_id": "2065D", "problem_title": "D. Skibidus and Sigma", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2065/D", "problem_statement": "Let's denote the score of an array $b$ with $k$ elements as $\\sum_{i=1}^{k}\\left(\\sum_{j=1}^ib_j\\right)$. In other words, let $S_i$ denote the sum of the first $i$ elements of $b$. Then, the score can be denoted as $S_1+S_2+\\ldots+S_k$.\n\nSkibidus is given $n$ arrays $a_1,a_2,\\ldots,a_n$, each of which contains $m$ elements. Being the sigma that he is, he would like to concatenate them in any order to form a single array containing $n\\cdot m$ elements. Please find the maximum possible score Skibidus can achieve with his concatenated array!\n\nFormally, among all possible permutations$^{\\text{∗}}$ $p$ of length $n$, output the maximum score of $a_{p_1} + a_{p_2} + \\dots + a_{p_n}$, where $+$ represents concatenation$^{\\text{†}}$.\n\n$^{\\text{∗}}$A permutation of length $n$ contains all integers from $1$ to $n$ exactly once.\n\n$^{\\text{†}}$The concatenation of two arrays $c$ and $d$ with lengths $e$ and $f$ respectively (i.e. $c + d$) is $c_1, c_2, \\ldots, c_e, d_1, d_2, \\ldots d_f$.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\leq n \\cdot m \\leq 2 \\cdot 10^5$) — the number of arrays and the length of each array.\n\nThe $i$'th of the next $n$ lines contains $m$ integers $a_{i,1}, a_{i,2}, \\ldots, a_{i,m}$ ($1 \\leq a_{i,j} \\leq 10^6$) — the elements of the $i$'th array.\n\nIt is guaranteed that the sum of $n \\cdot m$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the maximum score among all possible permutations $p$ on a new line.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2 2\n\n4 4\n\n6 1\n\n3 4\n\n2 2 2 2\n\n3 2 1 2\n\n4 1 2 1\n\n2 3\n\n3 4 5\n\n1 1 9\n\n```\n\n#### Output #1\n\n```\n41\n162\n72\n```\n\n### Note\n\nFor the first test case, there are two possibilities for $p$:\n\n- $p = [1, 2]$. Then, $a_{p_1} + a_{p_2} = [4, 4, 6, 1]$. Its score is $4+(4+4)+(4+4+6)+(4+4+6+1)=41$.\n- $p = [2, 1]$. Then, $a_{p_1} + a_{p_2} = [6, 1, 4, 4]$. Its score is $6+(6+1)+(6+1+4)+(6+1+4+4)=39$.\n\nThe maximum possible score is $41$.\n\nIn the second test case, one optimal arrangement of the final concatenated array is $[4,1,2,1,2,2,2,2,3,2,1,2]$. We can calculate that the score is $162$.", "cfid": "2065D"}
{"problem_id": "2065C2", "problem_title": "C2. Skibidus and Fanum Tax (hard version)", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2065/C2", "problem_statement": "This is the hard version of the problem. In this version, $m \\leq 2\\cdot 10^5$.\n\nSkibidus has obtained two arrays $a$ and $b$, containing $n$ and $m$ elements respectively. For each integer $i$ from $1$ to $n$, he is allowed to perform the operation at most once:\n\n- Choose an integer $j$ such that $1 \\leq j \\leq m$. Set $a_i := b_j - a_i$. Note that $a_i$ may become non-positive as a result of this operation.\n\nSkibidus needs your help determining whether he can sort $a$ in non-decreasing order$^{\\text{∗}}$ by performing the above operation some number of times.\n\n$^{\\\\text{∗}}$$a$ is sorted in non-decreasing order if $a\\_1 \\\\leq a\\_2 \\\\leq \\\\ldots \\\\leq a\\_n$.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\leq n \\leq 2 \\cdot 10^5$, $1 \\leq m \\leq 2\\cdot 10^5$).\n\nThe following line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$).\n\nThe following line of each test case contains $m$ integers $b_1, b_2, \\ldots, b_m$ ($1 \\leq b_i \\leq 10^9$).\n\nIt is guaranteed that the sum of $n$ and the sum of $m$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, if it is possible to sort $a$ in non-decreasing order, print \"YES\" on a new line. Otherwise, print \"NO\" on a new line.\n\nYou can output the answer in any case. For example, the strings \"yEs\", \"yes\", and \"Yes\" will also be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n1 3\n\n5\n\n9 1 1000000000\n\n3 2\n\n1 4 3\n\n3 4\n\n4 3\n\n2 4 6 5\n\n6 1 8\n\n5 2\n\n6 4 5 4 5\n\n4 1000\n\n3 1\n\n9 8 7\n\n8\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nYES\nNO\nYES\n```\n\n### Note\n\nIn the first test case, $[5]$ is already sorted.\n\nIn the second test case, it can be shown that it is impossible.\n\nIn the third test case, we can set $a_2:=b_1-a_2=6-4=2$ and $a_3:=b_3-a_3=8-6=2$. The sequence $[2,2,2,5]$ is in nondecreasing order.\n\nIn the last case, we can apply operations on each index. The sequence becomes $[-1,0,1]$, which is in nondecreasing order.", "cfid": "2065C2"}
{"problem_id": "2065C1", "problem_title": "C1. Skibidus and Fanum Tax (easy version)", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2065/C1", "problem_statement": "This is the easy version of the problem. In this version, $m = 1$.\n\nSkibidus has obtained two arrays $a$ and $b$, containing $n$ and $m$ elements respectively. For each integer $i$ from $1$ to $n$, he is allowed to perform the operation at most once:\n\n- Choose an integer $j$ such that $1 \\leq j \\leq m$. Set $a_i := b_j - a_i$. Note that $a_i$ may become non-positive as a result of this operation.\n\nSkibidus needs your help determining whether he can sort $a$ in non-decreasing order$^{\\text{∗}}$ by performing the above operation some number of times.\n\n$^{\\\\text{∗}}$$a$ is sorted in non-decreasing order if $a\\_1 \\\\leq a\\_2 \\\\leq \\\\ldots \\\\leq a\\_n$.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\leq n \\leq 2 \\cdot 10^5$, $\\textbf{m = 1}$).\n\nThe following line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$).\n\nThe following line of each test case contains $m$ integers $b_1, b_2, \\ldots, b_m$ ($1 \\leq b_i \\leq 10^9$).\n\nIt is guaranteed that the sum of $n$ and the sum of $m$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, if it is possible to sort $a$ in non-decreasing order, print \"YES\" on a new line. Otherwise, print \"NO\" on a new line.\n\nYou can output the answer in any case. For example, the strings \"yEs\", \"yes\", and \"Yes\" will also be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n1 1\n\n5\n\n9\n\n3 1\n\n1 4 3\n\n3\n\n4 1\n\n1 4 2 5\n\n6\n\n4 1\n\n5 4 10 5\n\n4\n\n3 1\n\n9 8 7\n\n8\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nYES\nNO\nYES\n```\n\n### Note\n\nIn the first test case, $[5]$ is already sorted.\n\nIn the second test case, it can be shown that it is impossible.\n\nIn the third test case, we can set $a_3:=b_1-a_3=6-2=4$. The sequence $[1,4,4,5]$ is in nondecreasing order.\n\nIn the last case, we can apply operations on each index. The sequence becomes $[-1,0,1]$, which is in nondecreasing order.", "cfid": "2065C1"}
{"problem_id": "2059C", "problem_title": "C. Customer Service", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2059/C", "problem_statement": "Nikyr has started working as a queue manager at the company \"Black Contour.\" He needs to choose the order of servicing customers. There are a total of $n$ queues, each initially containing $0$ people. In each of the next $n$ moments of time, there are two sequential events:\n\n1. New customers arrive in all queues. More formally, at the $j$-th moment of time, the number of people in the $i$-th queue increases by a positive integer $a_{i,j}$.\n2. Nikyr chooses exactly one of the $n$ queues to be served at that moment in time. The number of customers in this queue becomes $0$.\n\nLet the number of people in the $i$-th queue after all events be $x_i$. Nikyr wants MEX$^{\\dagger}$ of the collection $x_1, x_2, \\ldots, x_n$ to be as large as possible. Help him determine the maximum value he can achieve with an optimal order of servicing the queues.\n\n$^{\\dagger}$The minimum excluded (MEX) of a collection of integers $c_1, c_2, \\ldots, c_k$ is defined as the smallest non-negative integer $y$ which does not occur in the collection $c$.\n\nFor example:\n\n- $\\operatorname{MEX}([2,2,1])= 0$, since $0$ does not belong to the array.\n- $\\operatorname{MEX}([3,1,0,1]) = 2$, since $0$ and $1$ belong to the array, but $2$ does not.\n- $\\operatorname{MEX}([0,3,1,2]) = 4$, since $0$, $1$, $2$, and $3$ belong to the array, but $4$ does not.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 2 \\cdot 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 300$) — the number of queues and moments of time.\n\nThe $i$-th of the next $n$ lines contains $n$ integers $a_{i,1}, a_{i,2}, \\ldots, a_{i,n}$ ($1 \\le a_{i,j} \\le 10^9$) — the number of new customers in the $i$-th queue at each moment of time.\n\nIt is guaranteed that the sum of $n^2$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the maximum value of $\\operatorname{MEX}([x_1, x_2, \\ldots, x_n])$ that can be achieved.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2\n\n1 2\n\n2 1\n\n2\n\n10 10\n\n10 10\n\n3\n\n2 3 3\n\n4 4 1\n\n2 1 1\n\n4\n\n4 2 2 17\n\n1 9 3 1\n\n5 5 5 11\n\n1 2 1 1\n\n```\n\n#### Output #1\n\n```\n2\n1\n3\n3\n```\n\n### Note\n\nIn the first test case, the second queue can be served at time $1$, and the first queue at time $2$. There will be $x_1 = 0$ people left in the first queue and $x_2 = 1$ person left in the second queue. Therefore, the answer is $\\operatorname{MEX}([0, 1]) = 2$.\n\nIn the second test case, the first queue can be served both times. There will be $x_1 = 0$ people left in the first queue and $x_2 = 20$ people left in the second queue. Therefore, the answer is $\\operatorname{MEX}([0, 20]) = 1$.\n\nIn the third test case, the third queue can be served at time $1$, the second queue at time $2$, and the first queue at time $3$. There will be $x_1 = 0$ people left in the first queue, $x_2 = 1$ person left in the second queue, and $x_3 = 2$ people left in the third queue. Therefore, the answer is $\\operatorname{MEX}([0, 1, 2]) = 3$.", "cfid": "2059C"}
{"problem_id": "2059B", "problem_title": "B. Cost of the Array", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2059/B", "problem_statement": "You are given an array $a$ of length $n$ and an even integer $k$ ($2 \\le k \\le n$). You need to split the array $a$ into exactly $k$ non-empty subarrays$^{\\dagger}$ such that each element of the array $a$ belongs to exactly one subarray.\n\nNext, all subarrays with even indices (second, fourth, $\\ldots$, $k$-th) are concatenated into a single array $b$. After that, $0$ is added to the end of the array $b$.\n\nThe cost of the array $b$ is defined as the minimum index $i$ such that $b_i \\neq i$. For example, the cost of the array $b = [1, 2, 4, 5, 0]$ is $3$, since $b_1 = 1$, $b_2 = 2$, and $b_3 \\neq 3$. Determine the minimum cost of the array $b$ that can be obtained with an optimal partitioning of the array $a$ into subarrays.\n\n$^{\\dagger}$An array $x$ is a subarray of an array $y$ if $x$ can be obtained from $y$ by the deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $k$ ($2 \\le k \\le n \\le 2 \\cdot 10^5$, $k$ is even) — the length of the array $a$ and the number of subarrays.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$) — the elements of the array $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the minimum cost of the array $b$ that can be obtained.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3 2\n\n1 1 1\n\n8 8\n\n1 1 2 2 3 3 4 4\n\n5 4\n\n1 1 1 2 2\n\n5 4\n\n1 1 1000000000 2 2\n\n```\n\n#### Output #1\n\n```\n2\n5\n2\n1\n```\n\n### Note\n\nIn the first test case, there are only two possible partitionings: $[[1], [1, 1]]$ and $[[1, 1], [1]]$. In either case, $b_1 = 1$, and $b_2 \\ne 2$, so the cost is $2$.\n\nIn the second test case, there is only one possible partitioning, where $b = [1, 2, 3, 4, 0]$, so the cost is $5$ ($b_5 = 0 \\ne 5$).\n\nIn the third test case, the following partitioning works: $[[1], [1, 1], [2], [2]]$. Then $b = [1, 1, 2, 0]$, and the cost is $2$.", "cfid": "2059B"}
{"problem_id": "2059A", "problem_title": "A. Milya and Two Arrays", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2059/A", "problem_statement": "An array is called good if for any element $x$ that appears in this array, it holds that $x$ appears at least twice in this array. For example, the arrays $[1, 2, 1, 1, 2]$, $[3, 3]$, and $[1, 2, 4, 1, 2, 4]$ are good, while the arrays $[1]$, $[1, 2, 1]$, and $[2, 3, 4, 4]$ are not good.\n\nMilya has two good arrays $a$ and $b$ of length $n$. She can rearrange the elements in array $a$ in any way. After that, she obtains an array $c$ of length $n$, where $c_i = a_i + b_i$ ($1 \\le i \\le n$).\n\nDetermine whether Milya can rearrange the elements in array $a$ such that there are at least $3$ distinct elements in array $c$.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 1000$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($3 \\le n \\le 50$) — the length of the arrays $a$ and $b$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$) — the elements of the array $a$.\n\nThe third line of each test case contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($1 \\le b_i \\le 10^9$) — the elements of the array $b$.\n\n### Output\n\nFor each test case, output $«$YES$»$ (without quotes) if it is possible to obtain at least $3$ distinct elements in array $c$, and $«$NO$»$ otherwise.\n\nYou can output each letter in any case (for example, $«$YES$»$, $«$Yes$»$, $«$yes$»$, $«$yEs$»$ will be recognized as a positive answer).\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n4\n\n1 2 1 2\n\n1 2 1 2\n\n6\n\n1 2 3 3 2 1\n\n1 1 1 1 1 1\n\n3\n\n1 1 1\n\n1 1 1\n\n6\n\n1 52 52 3 1 3\n\n59 4 3 59 3 4\n\n4\n\n100 1 100 1\n\n2 2 2 2\n\n```\n\n#### Output #1\n\n```\nYES\nYES\nNO\nYES\nNO\n```\n\n### Note\n\nIn the first test case, you can swap the second and third elements. Then the array $a = [1, 1, 2, 2]$, $b = [1, 2, 1, 2]$, and then $c = [2, 3, 3, 4]$.\n\nIn the second test case, you can leave the elements unchanged. Then $c = [2, 3, 4, 4, 3, 2]$.\n\nIn the third test case, the array $a$ will not change from rearranging the elements in it. Then $c = [2, 2, 2]$, so the answer is $«$NO$»$.", "cfid": "2059A"}
{"problem_id": "2062B", "problem_title": "B. Clockwork", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2062/B", "problem_statement": "You have a sequence of $n$ time clocks arranged in a line, where the initial time on the $i$-th clock is $a_i$. In each second, the following happens in order:\n\n- Each clock's time decreases by $1$. If any clock's time reaches $0$, you lose immediately.\n- You can choose to move to an adjacent clock or stay at the clock you are currently on.\n- You can reset the time of the clock you are on back to its initial value $a_i$.\n\nNote that the above events happen in order. If the time of a clock reaches $0$ in a certain second, even if you can move to this clock and reset its time during that second, you will still lose.\n\nYou can start from any clock. Determine if it is possible to continue this process indefinitely without losing.\n\n### Input\n\nThe first line of input contains a single integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nFor each test case, the first line contains a single integer $n$ ($2 \\leq n \\leq 5 \\cdot 10^5$) — the number of time clocks.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$) — the initial times set on the clocks.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5\\cdot 10^5$.\n\n### Output\n\nFor each test case, print \"YES\" (without quotes) if it is possible to continue this process indefinitely, or \"NO\" (without quotes) otherwise.\n\nYou can output \"YES\" and \"NO\" in any case (for example, strings \"yEs\", \"yes\" and \"Yes\" will be recognized as a positive response).\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n2\n\n4 10\n\n2\n\n2 2\n\n3\n\n4 10 5\n\n3\n\n5 3 5\n\n5\n\n12 13 25 17 30\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nNO\nYES\nYES\n```\n\n### Note\n\nIn the first test case, you can move back and forth between the two clocks, resetting them repeatedly.\n\nIn the third test case, assuming that you start from clock $1$ and follow the strategy below:\n\nInitially, $a=[4,10,5]$.\n\n1. $a$ becomes $[3, 9, 4]$. You move to clock $2$ and reset its time, resulting in $a=[3, 10, 4]$.\n2. $a$ becomes $[2, 9, 3]$. You move to clock $3$ and reset its time, resulting in $a=[2, 9, 5]$.\n3. $a$ becomes $[1, 8, 4]$. You move to clock $2$ and reset its time, resulting in $a=[1, 10, 4]$.\n4. $a$ becomes $[0, 9, 3]$. You move to clock $1$, but you lose because $a_1$ reaches $0$.\n\nIt can be proven that no other strategy allows you to continue this process indefinitely.", "cfid": "2062B"}
{"problem_id": "2062C", "problem_title": "C. Cirno and Operations", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2062/C", "problem_statement": "Cirno has a sequence $a$ of length $n$. She can perform either of the following two operations for any (possibly, zero) times unless the current length of $a$ is $1$:\n\n- Reverse the sequence. Formally, $[a_1,a_2,\\ldots,a_n]$ becomes $[a_n,a_{n-1},\\ldots,a_1]$ after the operation.\n- Replace the sequence with its difference sequence. Formally, $[a_1,a_2,\\ldots,a_n]$ becomes $[a_2-a_1,a_3-a_2,\\ldots,a_n-a_{n-1}]$ after the operation.\n\nFind the maximum possible sum of elements of $a$ after all operations.\n\n### Input\n\nThe first line of input contains a single integer $t$ ($1 \\leq t \\leq 100$) — the number of input test cases.\n\nThe first line of each test case contains a single integer $n$ ($1\\le n\\le 50$) — the length of sequence $a$.\n\nThe second line of each test case contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($|a_i|\\le 1000$) — the sequence $a$.\n\n### Output\n\nFor each test case, print an integer representing the maximum possible sum.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n1\n\n-1000\n\n2\n\n5 -3\n\n2\n\n1000 1\n\n9\n\n9 7 9 -9 9 -8 7 -8 9\n\n11\n\n678 201 340 444 453 922 128 987 127 752 0\n\n```\n\n#### Output #1\n\n```\n-1000\n8\n1001\n2056\n269891\n```\n\n### Note\n\nIn the first test case, Cirno can not perform any operation, so the answer is $-1000$.\n\nIn the second test case, Cirno firstly reverses the sequence, then replaces the sequence with its difference sequence: $[5,-3]\\to[-3,5]\\to[8]$. It can be proven that this maximizes the sum, so the answer is $8$.\n\nIn the third test case, Cirno can choose not to operate, so the answer is $1001$.", "cfid": "2062C"}
{"problem_id": "2062A", "problem_title": "A. String", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2062/A", "problem_statement": "You are given a string $s$ of length $n$ consisting of $\\mathtt{0}$ and/or $\\mathtt{1}$. In one operation, you can select a non-empty subsequence $t$ from $s$ such that any two adjacent characters in $t$ are different. Then, you flip each character of $t$ ($\\mathtt{0}$ becomes $\\mathtt{1}$ and $\\mathtt{1}$ becomes $\\mathtt{0}$). For example, if $s=\\mathtt{\\underline{0}0\\underline{101}}$ and $t=s_1s_3s_4s_5=\\mathtt{0101}$, after the operation, $s$ becomes $\\mathtt{\\underline{1}0\\underline{010}}$.\n\nCalculate the minimum number of operations required to change all characters in $s$ to $\\mathtt{0}$.\n\nRecall that for a string $s = s_1s_2\\ldots s_n$, any string $t=s_{i_1}s_{i_2}\\ldots s_{i_k}$ ($k\\ge 1$) where $1\\leq i_1 < i_2 < \\ldots <i_k\\leq n$ is a subsequence of $s$.\n\n### Input\n\nThe first line of input contains a single integer $t$ ($1 \\leq t \\leq 10^4$) — the number of input test cases.\n\nThe only line of each test case contains the string $s$ ($1\\le |s|\\le 50$), where $|s|$ represents the length of $s$.\n\n### Output\n\nFor each test case, output the minimum number of operations required to change all characters in $s$ to $\\mathtt{0}$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n1\n\n000\n\n1001\n\n10101\n\n01100101011101\n\n```\n\n#### Output #1\n\n```\n1\n0\n2\n3\n8\n```\n\n### Note\n\nIn the first test case, you can flip $s_1$. Then $s$ becomes $\\mathtt{0}$, so the answer is $1$.\n\nIn the fourth test case, you can perform the following three operations in order:\n\n1. Flip $s_1s_2s_3s_4s_5$. Then $s$ becomes $\\mathtt{\\underline{01010}}$.\n2. Flip $s_2s_3s_4$. Then $s$ becomes $\\mathtt{0\\underline{010}0}$.\n3. Flip $s_3$. Then $s$ becomes $\\mathtt{00\\underline{0}00}$.\n\nIt can be shown that you can not change all characters in $s$ to $\\mathtt{0}$ in less than three operations, so the answer is $3$.", "cfid": "2062A"}
{"problem_id": "2063C", "problem_title": "C. Remove Exactly Two", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2063/C", "problem_statement": "Recently, Little John got a tree from his aunt to decorate his house. But as it seems, just one tree is not enough to decorate the entire house. Little John has an idea. Maybe he can remove a few vertices from the tree. That will turn it into more trees! Right?\n\nYou are given a tree$^{\\text{∗}}$ of $n$ vertices. You must perform the following operation exactly twice.\n\n- Select a vertex $v$;\n- Remove all edges incident to $v$, and also the vertex $v$.\n\nPlease find the maximum number of connected components after performing the operation exactly twice.\n\nTwo vertices $x$ and $y$ are in the same connected component if and only if there exists a path from $x$ to $y$. For clarity, note that the graph with $0$ vertices has $0$ connected components by definition.$^{\\text{†}}$\n\n$^{\\text{∗}}$A tree is a connected graph without cycles.\n\n$^{\\text{†}}$But is such a graph connected?\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$).\n\nEach of the next $n-1$ lines contains two integers $u_i$ and $v_i$, denoting the two vertices connected by an edge ($1 \\le u_i,v_i \\le n$, $u_i \\neq v_i$). It is guaranteed that the given edges form a tree.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the maximum number of connected components on a separate line.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2\n\n1 2\n\n4\n\n1 2\n\n2 3\n\n2 4\n\n7\n\n1 2\n\n1 3\n\n2 4\n\n4 5\n\n5 6\n\n5 7\n\n```\n\n#### Output #1\n\n```\n0\n2\n4\n```\n\n### Note\n\nOn the first test case, removing a vertex twice will make the graph empty. By definition, the number of connected components in the graph with $0$ vertices is $0$. Therefore, the answer is $0$.\n\nOn the second test case, removing two vertices $1$ and $2$ leaves $2$ connected components. As it is impossible to make $3$ connected components with $2$ vertices, the answer is $2$.\n\nOn the third test case, removing two vertices $1$ and $5$ leaves $4$ connected components, which are $\\left\\{ 2,4\\right\\}$, $\\left\\{ 3\\right\\}$, $\\left\\{ 6\\right\\}$, and $\\left\\{ 7\\right\\}$. It can be shown that it is impossible to make $5$ connected components. Therefore, the answer is $4$.", "cfid": "2063C"}
{"problem_id": "2063B", "problem_title": "B. Subsequence Update", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2063/B", "problem_statement": "After Little John borrowed expansion screws from auntie a few hundred times, eventually she decided to come and take back the unused ones.\nBut as they are a crucial part of home design, Little John decides to hide some in the most unreachable places — under the eco-friendly wood veneers.\n\nYou are given an integer sequence $a_1, a_2, \\ldots, a_n$, and a segment $[l,r]$ ($1 \\le l \\le r \\le n$).\n\nYou must perform the following operation on the sequence exactly once.\n\n- Choose any subsequence$^{\\text{∗}}$ of the sequence $a$, and reverse it. Note that the subsequence does not have to be contiguous.\n\nFormally, choose any number of indices $i_1,i_2,\\ldots,i_k$ such that $1 \\le i_1 < i_2 < \\ldots < i_k \\le n$. Then, change the $i_x$-th element to the original value of the $i_{k-x+1}$-th element simultaneously for all $1 \\le x \\le k$.\n\nFind the minimum value of $a_l+a_{l+1}+\\ldots+a_{r-1}+a_r$ after performing the operation.\n\n$^{\\text{∗}}$A sequence $b$ is a subsequence of a sequence $a$ if $b$ can be obtained from $a$ by the deletion of several (possibly, zero or all) element from arbitrary positions.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n$, $l$, $r$ ($1 \\le l \\le r \\le n \\le 10^5$) — the length of $a$, and the segment $[l,r]$.\n\nThe second line of each test case contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($1 \\le a_{i} \\le 10^9$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, output the minimum value of $a_l+a_{l+1}+\\ldots+a_{r-1}+a_r$ on a separate line.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n2 1 1\n\n2 1\n\n3 2 3\n\n1 2 3\n\n3 1 3\n\n3 1 2\n\n4 2 3\n\n1 2 2 2\n\n5 2 5\n\n3 3 2 3 5\n\n6 1 3\n\n3 6 6 4 3 2\n\n```\n\n#### Output #1\n\n```\n1\n3\n6\n3\n11\n8\n```\n\n### Note\n\nOn the second test case, the array is $a=[1,2,3]$ and the segment is $[2,3]$.\n\nAfter choosing the subsequence $a_1,a_3$ and reversing it, the sequence becomes $[3,2,1]$. Then, the sum $a_2+a_3$ becomes $3$. It can be shown that the minimum possible value of the sum is $3$.", "cfid": "2063B"}
{"problem_id": "2063A", "problem_title": "A. Minimal Coprime", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2063/A", "problem_statement": "Today, Little John used all his savings to buy a segment. He wants to build a house on this segment.\n\nA segment of positive integers $[l,r]$ is called coprime if $l$ and $r$ are coprime$^{\\text{∗}}$.\n\nA coprime segment $[l,r]$ is called minimal coprime if it does not contain$^{\\text{†}}$ any coprime segment not equal to itself. To better understand this statement, you can refer to the notes.\n\nGiven $[l,r]$, a segment of positive integers, find the number of minimal coprime segments contained in $[l,r]$.\n\n$^{\\text{∗}}$Two integers $a$ and $b$ are coprime if they share only one positive common divisor. For example, the numbers $2$ and $4$ are not coprime because they are both divided by $2$ and $1$, but the numbers $7$ and $9$ are coprime because their only positive common divisor is $1$.\n\n$^{\\text{†}}$A segment $[l',r']$ is contained in the segment $[l,r]$ if and only if $l \\le l' \\le r' \\le r$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 100$). The description of the test cases follows.\n\nThe only line of each test case consists of two integers $l$ and $r$ ($1 \\le l \\le r \\le 10^9$).\n\n### Output\n\nFor each test case, output the number of minimal coprime segments contained in $[l,r]$, on a separate line.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n1 2\n\n1 10\n\n49 49\n\n69 420\n\n1 1\n\n9982 44353\n\n```\n\n#### Output #1\n\n```\n1\n9\n0\n351\n1\n34371\n```\n\n### Note\n\nOn the first test case, the given segment is $[1,2]$. The segments contained in $[1,2]$ are as follows.\n\n- $[1,1]$: This segment is coprime, since the numbers $1$ and $1$ are coprime, and this segment does not contain any other segment inside. Thus, $[1,1]$ is minimal coprime.\n- $[1,2]$: This segment is coprime. However, as it contains $[1,1]$, which is also coprime, $[1,2]$ is not minimal coprime.\n- $[2,2]$: This segment is not coprime because $2$ and $2$ share $2$ positive common divisors: $1$ and $2$.\n\nTherefore, the segment $[1,2]$ contains $1$ minimal coprime segment.", "cfid": "2063A"}
{"problem_id": "2061B", "problem_title": "B. Kevin and Geometry", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2061/B", "problem_statement": "Kevin has $n$ sticks with length $a_1,a_2,\\ldots,a_n$.\n\nKevin wants to select $4$ sticks from these to form an isosceles trapezoid$^{\\text{∗}}$ with a positive area. Note that rectangles and squares are also considered isosceles trapezoids. Help Kevin find a solution. If no solution exists, output $-1$.\n\n$^{\\text{∗}}$An [isosceles trapezoid](https://en.wikipedia.org/wiki/Isosceles_trapezoid) is a convex quadrilateral with a line of symmetry bisecting one pair of opposite sides. In any isosceles trapezoid, two opposite sides (the bases) are parallel, and the two other sides (the legs) are of equal length.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($4 \\le n \\le 2\\cdot 10^5$).\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^8$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, output $4$ integers — the lengths of sticks. If no solution exists, output $-1$.\n\nIf there are multiple solutions, print any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n4\n\n5 5 5 10\n\n4\n\n10 5 10 5\n\n4\n\n1 2 3 4\n\n4\n\n1 1 1 3\n\n6\n\n4 2 1 5 7 1\n\n6\n\n10 200 30 300 30 100\n\n4\n\n100000000 100000000 1 2\n\n```\n\n#### Output #1\n\n```\n5 5 5 10\n5 5 10 10\n-1\n-1\n1 1 4 5\n-1\n100000000 100000000 1 2\n```\n\n### Note\n\nIn the first test case, you can form an isosceles trapezoid with bases of length $5$ and $10$, and two legs of length $5$.\n\nIn the second test case, you can form an isosceles trapezoid with two bases of length $5$ and two legs of length $10$. A rectangle is considered an isosceles trapezoid here.\n\nIn the third test case, there are no sticks with the same length. It's impossible to form an isosceles trapezoid.\n\nIn the fourth test case, it's impossible to form an isosceles trapezoid with a positive area.", "cfid": "2061B"}
{"problem_id": "2061D", "problem_title": "D. Kevin and Numbers", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2061/D", "problem_statement": "Kevin wrote an integer sequence $a$ of length $n$ on the blackboard.\n\nKevin can perform the following operation any number of times:\n\n- Select two integers $x, y$ on the blackboard such that $|x - y| \\leq 1$, erase them, and then write down an integer $x + y$ instead.\n\nKevin wants to know if it is possible to transform these integers into an integer sequence $b$ of length $m$ through some sequence of operations.\n\nTwo sequences $a$ and $b$ are considered the same if and only if their multisets are identical. In other words, for any number $x$, the number of times it appears in $a$ must be equal to the number of times it appears in $b$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1\\leq m \\leq n \\leq 2\\cdot 10^5$) — the length of $a$ and the length of $b$.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1\\leq a_i \\leq 10^9$).\n\nThe third line contains $m$ integers $b_1, b_2, \\ldots, b_m$ ($1\\leq b_i \\leq 10^9$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, output \"Yes\" if it is possible to transform $a$ into $b$, and \"No\" otherwise.\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n9\n\n2 1\n\n4 5\n\n9\n\n2 1\n\n3 6\n\n9\n\n4 2\n\n1 2 2 2\n\n3 4\n\n4 2\n\n1 1 3 3\n\n3 5\n\n4 2\n\n1 2 3 4\n\n3 5\n\n5 5\n\n1 2 3 4 5\n\n5 4 3 2 1\n\n4 2\n\n1 1 1 1\n\n1 1\n\n4 4\n\n1 1 1 1\n\n1 1 1 2\n\n1 1\n\n1\n\n1000000000\n\n```\n\n#### Output #1\n\n```\nYes\nNo\nYes\nYes\nNo\nYes\nNo\nNo\nNo\n```\n\n### Note\n\nIn the first test case, you can erase $4, 5$, and write down $9$.\n\nIn the second test case, you can't erase $3, 6$.\n\nIn the third test case, one possible way could be:\n\n- Erase $2, 2$, and write down $4$. The remaining numbers are $1, 2, 4$ now.\n- Erase $1, 2$, and write down $3$. The remaining numbers are $3, 4$ now.\n\nIn the fourth test case, one possible way could be:\n\n- Erase $1, 1$, and write down $2$. The remaining numbers are $2, 3, 3$ now.\n- Erase $2, 3$, and write down $5$. The remaining numbers are $3, 5$ now.", "cfid": "2061D"}
{"problem_id": "2061C", "problem_title": "C. Kevin and Puzzle", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2061/C", "problem_statement": "Kevin enjoys logic puzzles.\n\nHe played a game with $n$ classmates who stand in a line. The $i$-th person from the left says that there are $a_i$ liars to their left (not including themselves).\n\nEach classmate is either honest or a liar, with the restriction that no two liars can stand next to each other. Honest classmates always say the truth. Liars can say either the truth or lies, meaning their statements are considered unreliable.\n\nKevin wants to determine the number of distinct possible game configurations modulo $998\\,244\\,353$. Two configurations are considered different if at least one classmate is honest in one configuration and a liar in the other.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains an integer $n$ ($1\\leq n \\leq 2 \\cdot 10^5$) — the number of classmates.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0\\leq a_i \\leq n$) — the number of liars to the left of the $i$-th person they claimed.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output one integer — the number of distinct game configurations modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n3\n\n0 1 2\n\n5\n\n0 0 0 0 0\n\n5\n\n0 0 1 1 2\n\n5\n\n0 1 2 3 4\n\n5\n\n0 0 1 1 1\n\n5\n\n5 1 5 2 5\n\n1\n\n0\n\n4\n\n2 3 1 1\n\n```\n\n#### Output #1\n\n```\n1\n2\n3\n0\n4\n1\n2\n0\n```\n\n### Note\n\nWe will use $\\color{red}{\\text{red}}$ to mark liars and $\\color{blue}{\\text{blue}}$ to mark honest people.\n\nIn the first test case, the only possible way is $(\\color{red}{0},\\color{blue}{1},\\color{red}{2})$.\n\nIn the second test case, two possible ways are $(\\color{blue}{0},\\color{blue}{0},\\color{blue}{0},\\color{blue}{0},\\color{blue}{0})$ and $(\\color{blue}{0},\\color{blue}{0},\\color{blue}{0},\\color{blue}{0},\\color{red}{0})$.\n\nIn the third test case, three possible ways are $(\\color{blue}{0},\\color{blue}{0},\\color{red}{1},\\color{blue}{1},\\color{red}{2})$, $(\\color{blue}{0},\\color{red}{0},\\color{blue}{1},\\color{red}{1},\\color{blue}{2})$, $(\\color{blue}{0},\\color{red}{0},\\color{blue}{1},\\color{blue}{1},\\color{red}{2})$.", "cfid": "2061C"}
{"problem_id": "2061A", "problem_title": "A. Kevin and Arithmetic", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2061/A", "problem_statement": "To train young Kevin's arithmetic skills, his mother devised the following problem.\n\nGiven $n$ integers $a_1, a_2, \\ldots, a_n$ and a sum $s$ initialized to $0$, Kevin performs the following operation for $i = 1, 2, \\ldots, n$ in order:\n\n- Add $a_i$ to $s$. If the resulting $s$ is even, Kevin earns a point and repeatedly divides $s$ by $2$ until it becomes odd.\n\nNote that Kevin can earn at most one point per operation, regardless of how many divisions he does.\n\nSince these divisions are considered more beneficial for Kevin's development, his mother wants to rearrange $a$ so that the number of Kevin's total points is maximized. Determine the maximum number of points.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 500$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1\\leq n \\leq 100$) — the number of integers.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1\\leq a_i \\leq 10^9$).\n\n### Output\n\nFor each test case, output one integer — the maximum number of points.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n1\n\n1\n\n2\n\n1 2\n\n3\n\n2 4 6\n\n4\n\n1000000000 999999999 999999998 999999997\n\n10\n\n3 1 4 1 5 9 2 6 5 3\n\n```\n\n#### Output #1\n\n```\n0\n2\n1\n3\n8\n```\n\n### Note\n\nIn the first test case, the only arrangement of $a$ is $[1]$. $s$ becomes $1$. Kevin earns no points.\n\nIn the second test case, the only possible arrangement of $a$ is $[2, 1]$. $s$ becomes $1$ and $1$ successively. Kevin earns points in both operations.\n\nIn the third test case, one possible arrangement of $a$ is $[2, 4, 6]$. $s$ becomes $1$, $5$, and $11$ successively. Kevin earns a point in the first operation.", "cfid": "2061A"}
{"problem_id": "2060D", "problem_title": "D. Subtract Min Sort", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2060/D", "problem_statement": "You are given a sequence $a$ consisting of $n$ positive integers.\n\nYou can perform the following operation any number of times.\n\n- Select an index $i$ ($1 \\le i < n$), and subtract $\\min(a_i,a_{i+1})$ from both $a_i$ and $a_{i+1}$.\n\nDetermine if it is possible to make the sequence non-decreasing by using the operation any number of times.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$).\n\nThe second line of each test case contains $a_1,a_2,\\ldots,a_n$ ($1 \\le a_i \\le 10^9$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nIf it is possible to make the sequence non-decreasing, print \"YES\" on a new line. Otherwise, print \"NO\" on a new line.\n\nYou can output the answer in any case. For example, the strings \"yEs\", \"yes\", and \"Yes\" will also be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n5\n\n1 2 3 4 5\n\n4\n\n4 3 2 1\n\n4\n\n4 5 2 3\n\n8\n\n4 5 4 5 4 5 4 5\n\n9\n\n9 9 8 2 4 4 3 5 3\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nYES\nYES\nNO\n```\n\n### Note\n\nIn the first test case, the array is already sorted.\n\nIn the second test case, we can show that it is impossible.\n\nIn the third test case, after performing an operation on $i=1$, the array becomes $[0,1,2,3]$, which is now in nondecreasing order.", "cfid": "2060D"}
{"problem_id": "2060A", "problem_title": "A. Fibonacciness", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2060/A", "problem_statement": "There is an array of $5$ integers. Initially, you only know $a_1,a_2,a_4,a_5$. You may set $a_3$ to any positive integer, negative integer, or zero. The Fibonacciness of the array is the number of integers $i$ ($1 \\leq i \\leq 3$) such that $a_{i+2}=a_i+a_{i+1}$. Find the maximum Fibonacciness over all integer values of $a_3$.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 500$) — the number of test cases.\n\nThe only line of each test case contains four integers $a_1, a_2, a_4, a_5$ ($1 \\leq a_i \\leq 100$).\n\n### Output\n\nFor each test case, output the maximum Fibonacciness on a new line.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n1 1 3 5\n\n1 3 2 1\n\n8 10 28 100\n\n100 1 100 1\n\n1 100 1 100\n\n100 100 100 100\n\n```\n\n#### Output #1\n\n```\n3\n2\n2\n1\n1\n2\n```\n\n### Note\n\nIn the first test case, we can set $a_3$ to $2$ to achieve the maximal Fibonacciness of $3$.\n\nIn the third test case, it can be shown that $2$ is the maximum Fibonacciness that can be achieved. This can be done by setting $a_3$ to $18$.", "cfid": "2060A"}
{"problem_id": "2060E", "problem_title": "E. Graph Composition", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2060/E", "problem_statement": "You are given two simple undirected graphs $F$ and $G$ with $n$ vertices. $F$ has $m_1$ edges while $G$ has $m_2$ edges. You may perform one of the following two types of operations any number of times:\n\n- Select two integers $u$ and $v$ ($1 \\leq u,v \\leq n$) such that there is an edge between $u$ and $v$ in $F$. Then, remove that edge from $F$.\n- Select two integers $u$ and $v$ ($1 \\leq u,v \\leq n$) such that there is no edge between $u$ and $v$ in $F$. Then, add an edge between $u$ and $v$ in $F$.\n\nDetermine the minimum number of operations required such that for all integers $u$ and $v$ ($1 \\leq u,v \\leq n$), there is a path from $u$ to $v$ in $F$ if and only if there is a path from $u$ to $v$ in $G$.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) — the number of independent test cases.\n\nThe first line of each test case contains three integers $n$, $m_1$, and $m_2$ ($1 \\leq n \\leq 2\\cdot 10^5$, $0 \\leq m_1,m_2 \\leq 2\\cdot 10^5$) — the number of vertices, the number of edges in $F$, and the number of edges in $G$.\n\nThe following $m_1$ lines each contain two integers $u$ and $v$ ($1 \\leq u, v\\leq n$) — there is an edge between $u$ and $v$ in $F$. It is guaranteed that there are no repeated edges or self loops.\n\nThe following $m_2$ lines each contain two integers $u$ and $v$ ($1 \\leq u,v\\leq n$) — there is an edge between $u$ and $v$ in $G$. It is guaranteed that there are no repeated edges or self loops.\n\nIt is guaranteed that the sum of $n$, the sum of $m_1$, and the sum of $m_2$ over all test cases do not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer denoting the minimum operations required on a new line.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3 2 1\n\n1 2\n\n2 3\n\n1 3\n\n2 1 1\n\n1 2\n\n1 2\n\n3 2 0\n\n3 2\n\n1 2\n\n1 0 0\n\n3 3 1\n\n1 2\n\n1 3\n\n2 3\n\n1 2\n\n```\n\n#### Output #1\n\n```\n3\n0\n2\n0\n2\n```\n\n### Note\n\nIn the first test case you can perform the following three operations:\n\n1. Add an edge between vertex $1$ and vertex $3$.\n2. Remove the edge between vertex $1$ and vertex $2$.\n3. Remove the edge between vertex $2$ and vertex $3$.\n\nIt can be shown that fewer operations cannot be achieved.\n\nIn the second test case, $F$ and $G$ already fulfill the condition in the beginning.\n\nIn the fifth test case, the edges from $1$ to $3$ and from $2$ to $3$ must both be removed.", "cfid": "2060E"}
{"problem_id": "2060C", "problem_title": "C. Game of Mathletes", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2060/C", "problem_statement": "Alice and Bob are playing a game. There are $n$ ($n$ is even) integers written on a blackboard, represented by $x_1, x_2, \\ldots, x_n$. There is also a given integer $k$ and an integer score that is initially $0$. The game lasts for $\\frac{n}{2}$ turns, in which the following events happen sequentially:\n\n- Alice selects an integer from the blackboard and erases it. Let's call Alice's chosen integer $a$.\n- Bob selects an integer from the blackboard and erases it. Let's call Bob's chosen integer $b$.\n- If $a+b=k$, add $1$ to score.\n\nAlice is playing to minimize the score while Bob is playing to maximize the score. Assuming both players use optimal strategies, what is the score after the game ends?\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $k$ ($2 \\leq n \\leq 2\\cdot 10^5, 1 \\leq k \\leq 2\\cdot n$, $n$ is even).\n\nThe second line of each test case contains $n$ integers $x_1,x_2,\\ldots,x_n$ ($1 \\leq x_i \\leq n$) — the integers on the blackboard.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, output the score if both players play optimally.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n4 4\n\n1 2 3 2\n\n8 15\n\n1 2 3 4 5 6 7 8\n\n6 1\n\n1 1 1 1 1 1\n\n16 9\n\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\n\n```\n\n#### Output #1\n\n```\n2\n1\n0\n4\n```\n\n### Note\n\nIn the first test case, one way the game may go is as follows:\n\n- Alice selects $1$ and Bob selects $3$. The score increases as $1+3=4$. Now the two integers remaining on the blackboard are $2$ and $2$.\n- Alice and Bob both select $2$. The score increases as $2+2=4$.\n- The game ends as the blackboard now has no integers.\n\nIn the third test case, it is impossible for the sum of Alice and Bob's selected integers to be $1$, so we answer $0$.\n\nNote that this is just an example of how the game may proceed for demonstration purposes. This may not be Alice or Bob's most optimal strategies.", "cfid": "2060C"}
{"problem_id": "2060B", "problem_title": "B. Farmer John's Card Game", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2060/B", "problem_statement": "Farmer John's $n$ cows are playing a card game! Farmer John has a deck of $n \\cdot m$ cards numbered from $0$ to $n \\cdot m-1$. He distributes $m$ cards to each of his $n$ cows.\n\nFarmer John wants the game to be fair, so each cow should only be able to play $1$ card per round. He decides to determine a turn order, determined by a permutation$^{\\text{∗}}$ $p$ of length $n$, such that the $p_i$'th cow will be the $i$'th cow to place a card on top of the center pile in a round.\n\nIn other words, the following events happen in order in each round:\n\n- The $p_1$'th cow places any card from their deck on top of the center pile.\n- The $p_2$'th cow places any card from their deck on top of the center pile.\n- ...\n- The $p_n$'th cow places any card from their deck on top of the center pile.\n\nThere is a catch. Initially, the center pile contains a card numbered $-1$. In order to place a card, the number of the card must be greater than the number of the card on top of the center pile. Then, the newly placed card becomes the top card of the center pile. If a cow cannot place any card in their deck, the game is considered to be lost.\n\nFarmer John wonders: does there exist $p$ such that it is possible for all of his cows to empty their deck after playing all $m$ rounds of the game? If so, output any valid $p$. Otherwise, output $-1$.\n\n$^{\\text{∗}}$A permutation of length $n$ contains each integer from $1$ to $n$ exactly once\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 400$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\leq n \\cdot m \\leq 2\\,000$) — the number of cows and the number of cards each cow receives.\n\nThe following $n$ lines contain $m$ integers each – the cards received by each cow. It is guaranteed all given numbers (across all $n$ lines) are distinct and in the range from $0$ to $n \\cdot m - 1$, inclusive.\n\nIt is guaranteed the sum of $n \\cdot m$ over all test cases does not exceed $2\\,000$.\n\n### Output\n\nFor each test case, output the following on a new line:\n\n- If $p$ exists, output $n$ space-separated integers $p_1, p_2, \\ldots, p_n$.\n- Otherwise, output $-1$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2 3\n\n0 4 2\n\n1 5 3\n\n1 1\n\n0\n\n2 2\n\n1 2\n\n0 3\n\n4 1\n\n1\n\n2\n\n0\n\n3\n\n```\n\n#### Output #1\n\n```\n1 2\n1\n-1\n3 1 2 4\n```\n\n### Note\n\nIn the first test case, one turn order that allows all cards to be played is by having the first cow go before the second cow. The cards played will be $0\\rightarrow1\\rightarrow2\\rightarrow3\\rightarrow4\\rightarrow5$.\n\nIn the second test case, there is only one cow, so having the cow play all of her cards in increasing order will empty the deck.\n\nIn the third test case, it can be shown there is no valid turn order that allows all cards to be played.", "cfid": "2060B"}
{"problem_id": "2056A", "problem_title": "A. Shape Perimeter", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2056/A", "problem_statement": "There is an $m$ by $m$ square stamp on an infinite piece of paper. Initially, the bottom-left corner of the square stamp is aligned with the bottom-left corner of the paper. You are given two integer sequences $x$ and $y$, each of length $n$. For each step $i$ from $1$ to $n$, the following happens:\n\n- Move the stamp $x_i$ units to the right and $y_i$ units upwards.\n- Press the stamp onto the paper, leaving an $m$ by $m$ colored square at its current position.\n\nNote that the elements of sequences $x$ and $y$ have a special constraint: $1\\le x_i, y_i\\le m - 1$.\n\nNote that you do not press the stamp at the bottom-left corner of the paper. Refer to the notes section for better understanding.\n\nIt can be proven that after all the operations, the colored shape on the paper formed by the stamp is a single connected region. Find the perimeter of this colored shape.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\le n \\le 100$, $2 \\le m \\le 100$) — the number of operations performed and the side length of the square stamp.\n\nThe $i$-th of the next $n$ lines contains two integers $x_i$ and $y_i$ ($1 \\le x_i, y_i \\le m - 1$) — the distance that the stamp will be moved right and up during the $i$-th operation, respectively.\n\nNote that there are no constraints on the sum of $n$ over all test cases.\n\n### Output\n\nFor each test case, output a single integer representing the perimeter of the colored shape on the paper.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n4 3\n\n1 1\n\n2 2\n\n2 1\n\n1 2\n\n1 2\n\n1 1\n\n6 7\n\n3 6\n\n1 1\n\n3 1\n\n6 6\n\n5 4\n\n6 1\n\n```\n\n#### Output #1\n\n```\n32\n8\n96\n```\n\n### Note\n\nIn the first example, the stamp has a side length of $3$ and is pressed $4$ times at coordinates $(1, 1)$, $(3, 3)$, $(5, 4)$, and $(6, 6)$. The piece of paper looks like that afterwards:\n\n![](https://espresso.codeforces.com/9fc3f24b6fa5d2b61c12e4b03034cf4461356a4e.png)\n\nHere, the square formed by the first press is colored blue, the second red, the third green, and the fourth purple. The combined shape, whose perimeter we need to calculate, looks like that:\n\n![](https://espresso.codeforces.com/d3769976097a17e12f245e090e7d4b21ac6d0111.png)\n\nFrom the diagram, it can be seen that this shape has a perimeter of $32$.", "cfid": "2056A"}
{"problem_id": "2056C", "problem_title": "C. Palindromic Subsequences", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2056/C", "problem_statement": "For an integer sequence $a = [a_1, a_2, \\ldots, a_n]$, we define $f(a)$ as the length of the longest subsequence$^{\\text{∗}}$ of $a$ that is a palindrome$^{\\text{†}}$.\n\nLet $g(a)$ represent the number of subsequences of length $f(a)$ that are palindromes. In other words, $g(a)$ counts the number of palindromic subsequences in $a$ that have the maximum length.\n\nGiven an integer $n$, your task is to find any sequence $a$ of $n$ integers that satisfies the following conditions:\n\n- $1 \\le a_i \\le n$ for all $1 \\le i \\le n$.\n- $g(a) > n$\n\nIt can be proven that such a sequence always exists under the given constraints.\n\n$^{\\text{∗}}$A sequence $x$ is a subsequence of a sequence $y$ if $x$ can be obtained from $y$ by the deletion of several (possibly, zero or all) element from arbitrary positions.\n\n$^{\\text{†}}$A palindrome is a sequence that reads the same from left to right as from right to left. For example, $[1, 2, 1, 3, 1, 2, 1]$, $[5, 5, 5, 5]$, and $[4, 3, 3, 4]$ are palindromes, while $[1, 2]$ and $[2, 3, 3, 3, 3]$ are not.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 100$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($\\color{red}{6} \\le n \\le 100$) — the length of the sequence.\n\nNote that there are no constraints on the sum of $n$ over all test cases.\n\n### Output\n\nFor each test case, output $n$ integers $a_1, a_2, \\ldots, a_n$, representing an array that satisfies the conditions.\n\nIf there are multiple solutions, you may output any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n6\n\n9\n\n15\n\n```\n\n#### Output #1\n\n```\n1 1 2 3 1 2\n7 3 3 7 5 3 7 7 3\n15 8 8 8 15 5 8 1 15 5 8 15 15 15 8\n```\n\n### Note\n\nIn the first example, one possible solution is $a = [1, 1, 2, 3, 1, 2]$. In this case, $f(a) = 3$ as the longest palindromic subsequence has length $3$. There are $7$ ways to choose a subsequence of length $3$ that is a palindrome, as shown below:\n\n1. $[a_1, a_2, a_5] = [1, 1, 1]$\n2. $[a_1, a_3, a_5] = [1, 2, 1]$\n3. $[a_1, a_4, a_5] = [1, 3, 1]$\n4. $[a_2, a_3, a_5] = [1, 2, 1]$\n5. $[a_2, a_4, a_5] = [1, 3, 1]$\n6. $[a_3, a_4, a_6] = [2, 3, 2]$\n7. $[a_3, a_5, a_6] = [2, 1, 2]$\n\nTherefore, $g(a) = 7$, which is greater than $n = 6$. Hence, $a = [1, 1, 2, 3, 1, 2]$ is a valid solution.\n\nIn the second example, one possible solution is $a = [7, 3, 3, 7, 5, 3, 7, 7, 3]$. In this case, $f(a) = 5$. There are $24$ ways to choose a subsequence of length $5$ that is a palindrome. Some examples are $[a_2, a_4, a_5, a_8, a_9] = [3, 7, 5, 7, 3]$ and $[a_1, a_4, a_6, a_7, a_8] = [7, 7, 3, 7, 7]$. Therefore, $g(a) = 24$, which is greater than $n = 9$. Hence, $a = [7, 3, 3, 7, 5, 3, 7, 7, 3]$ is a valid solution.\n\nIn the third example, $f(a) = 7$ and $g(a) = 190$, which is greater than $n = 15$.", "cfid": "2056C"}
{"problem_id": "2056B", "problem_title": "B. Find the Permutation", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2056/B", "problem_statement": "You are given an undirected graph with $n$ vertices, labeled from $1$ to $n$. This graph encodes a hidden permutation$^{\\text{∗}}$ $p$ of size $n$. The graph is constructed as follows:\n\n- For every pair of integers $1 \\le i < j \\le n$, an undirected edge is added between vertex $p_i$ and vertex $p_j$ if and only if $p_i < p_j$. Note that the edge is not added between vertices $i$ and $j$, but between the vertices of their respective elements. Refer to the notes section for better understanding.\n\nYour task is to reconstruct and output the permutation $p$. It can be proven that permutation $p$ can be uniquely determined.\n\n$^{\\text{∗}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 500$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 1000$).\n\nThe $i$-th of the next $n$ lines contains a string of $n$ characters $g_{i, 1}g_{i, 2}\\ldots g_{i, n}$ ($g_{i, j} = \\mathtt{0}$ or $g_{i, j} = \\mathtt{1}$) — the adjacency matrix. $g_{i, j} = \\mathtt{1}$ if and only if there is an edge between vertex $i$ and vertex $j$.\n\nIt is guaranteed that there exists a permutation $p$ which generates the given graph. It is also guaranteed that the graph is undirected and has no self-loops, meaning $g_{i, j} = g_{j, i}$ and $g_{i, i} = \\mathtt{0}$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $1000$.\n\n### Output\n\nFor each test case, output $n$ integers $p_1, p_2, \\ldots, p_n$ representing the reconstructed permutation.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n1\n\n0\n\n5\n\n00101\n\n00101\n\n11001\n\n00001\n\n11110\n\n6\n\n000000\n\n000000\n\n000000\n\n000000\n\n000000\n\n000000\n\n```\n\n#### Output #1\n\n```\n1\n4 2 1 3 5\n6 5 4 3 2 1\n```\n\n### Note\n\nIn the first case $p = [1]$. Since there are no pairs $1 \\le i < j \\le n$, there are no edges in the graph.\n\nThe graph in the second case is shown below. For example, when we choose $i = 3$ and $j = 4$, we add an edge between vertices $p_i = 1$ and $p_j = 3$, because $p_i < p_j$. However, when we choose $i = 2$ and $j = 3$, $p_i = 2$ and $p_j = 1$, so $p_i < p_j$ doesn't hold. Therefore, we don't add an edge between $2$ and $1$.\n\n![](https://espresso.codeforces.com/73c807a602602d5ad6dd697dfea7a886d23aec16.png)\n\nIn the third case, there are no edges in the graph, so there are no pairs of integers $1 \\le i < j \\le n$ such that $p_i < p_j$. Therefore, $p = [6, 5, 4, 3, 2, 1]$.", "cfid": "2056B"}
{"problem_id": "2055A", "problem_title": "A. Two Frogs", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2055/A", "problem_statement": "Roaming through the alligator-infested Everglades, Florida Man encounters a most peculiar showdown.\n\nThere are $n$ lilypads arranged in a row, numbered from $1$ to $n$ from left to right. Alice and Bob are frogs initially positioned on distinct lilypads, $a$ and $b$, respectively. They take turns jumping, starting with Alice.\n\nDuring a frog's turn, it can jump either one space to the left or one space to the right, as long as the destination lilypad exists. For example, on Alice's first turn, she can jump to either lilypad $a-1$ or $a+1$, provided these lilypads are within bounds. It is important to note that each frog must jump during its turn and cannot remain on the same lilypad.\n\nHowever, there are some restrictions:\n\n- The two frogs cannot occupy the same lilypad. This means that Alice cannot jump to a lilypad that Bob is currently occupying, and vice versa.\n- If a frog cannot make a valid jump on its turn, it loses the game. As a result, the other frog wins.\n\nDetermine whether Alice can guarantee a win, assuming that both players play optimally. It can be proven that the game will end after a finite number of moves if both players play optimally.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 500$). The description of the test cases follows.\n\nThe first and only line of each test case contains three integers $n$, $a$, and $b$ ($2 \\leq n \\leq 100$, $1 \\leq a, b \\leq n$, $a\\neq b$) — the number of lilypads, and the starting positions of Alice and Bob, respectively.\n\nNote that there are no constraints on the sum of $n$ over all test cases.\n\n### Output\n\nFor each test case, print a single line containing either \"YES\" or \"NO\", representing whether or not Alice has a winning strategy.\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n2 1 2\n\n3 3 1\n\n4 2 3\n\n5 2 4\n\n7 6 2\n\n```\n\n#### Output #1\n\n```\nNO\nYES\nNO\nYES\nYES\n```\n\n### Note\n\nIn the first test case, Alice has no legal moves. Therefore, Alice loses on the first turn.\n\nIn the second test case, Alice can only move to lilypad $2$. Then, Bob has no legal moves. Therefore, Alice has a winning strategy in this case.\n\nIn the third test case, Alice can only move to lilypad $1$. Then, Bob can move to lilypad $2$. Alice is no longer able to move and loses, giving Bob the win. It can be shown that Bob can always win regardless of Alice's moves; hence, Alice does not have a winning strategy.", "cfid": "2055A"}
{"problem_id": "2055B", "problem_title": "B. Crafting", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2055/B", "problem_statement": "As you'd expect, Florida is home to many bizarre magical forces, and Florida Man seeks to tame them.\n\nThere are $n$ different types of magical materials, numbered from $1$ to $n$. Initially, you have $a_i$ units of material $i$ for each $i$ from $1$ to $n$. You are allowed to perform the following operation:\n\n- Select a material $i$ (where $1\\le i\\le n$). Then, spend $1$ unit of every other material $j$ (in other words, $j\\neq i$) to gain $1$ unit of material $i$. More formally, after selecting material $i$, update array $a$ as follows: $a_i := a_i + 1$, and $a_j := a_j - 1$ for all $j$ where $j\\neq i$ and $1\\le j\\le n$. Note that all $a_j$ must remain non-negative, i.e. you cannot spend resources you do not have.\n\nYou are trying to craft an artifact using these materials. To successfully craft the artifact, you must have at least $b_i$ units of material $i$ for each $i$ from $1$ to $n$. Determine if it is possible to craft the artifact by performing the operation any number of times (including zero).\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2\\le n\\le 2\\cdot 10^5$) — the number of types of materials.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i\\le 10^9$) — the amount of each material $i$ that you currently hold.\n\nThe third line of each test case contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($0 \\le b_i\\le 10^9$) — the amount of each material $i$ needed to produce the artifact.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print a single line containing either \"YES\" or \"NO\", representing whether or not the artifact can be crafted.\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n4\n\n0 5 5 1\n\n1 4 4 0\n\n3\n\n1 1 3\n\n2 2 1\n\n2\n\n1 10\n\n3 3\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nYES\n```\n\n### Note\n\nIn the first test case, perform an operation on material $1$. After doing so, we will have exactly the required resources: $1$ unit of material $1$, and $4$ units each of materials $2$ and $3$.\n\nIn the second test case, it can be shown that no matter how the operations are performed, it is impossible to craft the artifact.\n\nIn the third test case, we can perform the operation on material $1$ twice. After these operations, we will have $3$ units of material $1$ and $8$ units of material $2$, which is more than enough to craft the artifact.", "cfid": "2055B"}
{"problem_id": "2055C", "problem_title": "C. The Trail", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2055/C", "problem_statement": "There are no mountains in Florida, and Florida Man cannot comprehend their existence. As such, he really needs your help with this one.\n\nIn the wilderness lies a region of mountainous terrain represented as a rectangular grid with $n$ rows and $m$ columns. Each cell in the grid is identified by its position $(i, j)$, where $i$ is the row index and $j$ is the column index. The altitude of cell $(i, j)$ is denoted by $a_{i,j}$.\n\nHowever, this region has been tampered with. A path consisting of $n + m - 1$ cells, starting from the top-left corner $(1, 1)$ and ending at the bottom-right corner $(n, m)$, has been cleared. For every cell $(i, j)$ along this path, the altitude $a_{i,j}$ has been set to $0$. The path moves strictly via downward ($\\mathtt{D}$) or rightward ($\\mathtt{R}$) steps.\n\nTo restore the terrain to its original state, it is known that the region possessed a magical property before it was tampered with: all rows and all columns shared the same sum of altitudes. More formally, there exists an integer $x$ such that $\\sum_{j=1}^m a_{i, j} = x$ for all $1\\le i\\le n$, and $\\sum_{i=1}^n a_{i, j} = x$ for all $1\\le j\\le m$.\n\nYour task is to assign new altitudes to the cells on the path such that the above magical property is restored. It can be proven that a solution always exists. If there are multiple solutions that satisfy the property, any one of them may be provided.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($2 \\leq n, m \\leq 1000$) — the number of rows and columns in the grid.\n\nThe second line of each test case contains a string $s$ of length $n+m-2$ ($s_i = \\mathtt{D}$ or $s_i = \\mathtt{R}$) — the steps the path makes from $(1, 1)$ to $(n, m)$. The character $\\mathtt{D}$ represents a downward step, and $\\mathtt{R}$ represents a rightward step.\n\nThe $i$-th of the next $n$ lines each contain $m$ integers $a_{i,1}, a_{i, 2}, \\ldots, a_{i,m}$ ($-10^6 \\leq a_{i,j} \\leq 10^6$) — the altitude of each cell in the grid. It is guaranteed that if a cell $(i, j)$ lies on the path, then $a_{i,j} = 0$.\n\nIt is guaranteed that the sum of $n \\cdot m$ over all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case, output $n$ lines of $m$ integers representing the restored grid of altitudes $b_{i, j}$. The altitudes must satisfy $-10^{15} \\leq b_{i,j} \\leq 10^{15}$, and additionally $a_{i,j} = b_{i,j}$ if $(i, j)$ is not on the path. If multiple solutions exist, output any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3 3\n\nDRRD\n\n0 2 3\n\n0 0 0\n\n3 1 0\n\n4 5\n\nDRRRRDD\n\n0 1 0 2 3\n\n0 0 0 0 0\n\n-1 0 -3 -3 0\n\n0 0 0 -1 0\n\n2 3\n\nRRD\n\n0 0 0\n\n0 1 0\n\n5 5\n\nDDDDRRRR\n\n0 25 2 9 11\n\n0 6 13 20 22\n\n0 17 24 1 8\n\n0 3 10 12 19\n\n0 0 0 0 0\n\n```\n\n#### Output #1\n\n```\n1 2 3\n2 3 1\n3 1 2\n-6 1 0 2 3\n7 -1 3 2 -11\n-1 0 -3 -3 7\n0 0 0 -1 1\n0 -1 1\n0 1 -1\n18 25 2 9 11\n4 6 13 20 22\n15 17 24 1 8\n21 3 10 12 19\n7 14 16 23 5\n```\n\n### Note\n\nIn the first test case, the grid has been filled such that every row and column contains the numbers $1, 2, 3$ in some order, resulting in a common sum of $6$.\n\nIn the second test case, the grid has been filled such that all rows and columns sum to $0$.", "cfid": "2055C"}
{"problem_id": "2057A", "problem_title": "A. MEX Table", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2057/A", "problem_statement": "One day, the schoolboy Mark misbehaved, so the teacher Sasha called him to the whiteboard.\n\nSasha gave Mark a table with $n$ rows and $m$ columns. His task is to arrange the numbers $0, 1, \\\\ldots, n \\\\cdot m - 1$ in the table (each number must be used exactly once) in such a way as to maximize the sum of MEX$^{\\\\text{∗}}$ across all rows and columns. More formally, he needs to maximize \n\n$$\\sum\\limits_{i = 1}^{n} \\operatorname{mex}(\\{a_{i,1}, a_{i,2}, \\ldots, a_{i,m}\\}) + \\sum\\limits_{j = 1}^{m} \\operatorname{mex}(\\{a_{1,j}, a_{2,j}, \\ldots, a_{n,j}\\}),$$\n\nwhere $a_{i,j}$ is the number in the $i$-th row and $j$-th column.\n\nSasha is not interested in how Mark arranges the numbers, so he only asks him to state one number — the maximum sum of MEX across all rows and columns that can be achieved.\n\n$^{\\text{∗}}$The minimum excluded (MEX) of a collection of integers $c_1, c_2, \\ldots, c_k$ is defined as the smallest non-negative integer $x$ which does not occur in the collection $c$.\n\nFor example:\n\n- $\\operatorname{mex}([2,2,1])= 0$, since $0$ does not belong to the array.\n- $\\operatorname{mex}([3,1,0,1]) = 2$, since $0$ and $1$ belong to the array, but $2$ does not.\n- $\\operatorname{mex}([0,3,1,2]) = 4$, since $0$, $1$, $2$, and $3$ belong to the array, but $4$ does not.\n\n### Input\n\nEach test contains multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 1000$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\le n, m \\le 10^9$) — the number of rows and columns in the table, respectively.\n\n### Output\n\nFor each test case, output the maximum possible sum of $\\operatorname{mex}$ across all rows and columns.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n1 1\n\n2 2\n\n3 5\n\n```\n\n#### Output #1\n\n```\n2\n3\n6\n```\n\n### Note\n\nIn the first test case, the only element is $0$, and the sum of the $\\operatorname{mex}$ of the numbers in the first row and the $\\operatorname{mex}$ of the numbers in the first column is $\\operatorname{mex}(\\{0\\}) + \\operatorname{mex}(\\{0\\}) = 1 + 1 = 2$.\n\nIn the second test case, the optimal table may look as follows:\n\n$3\n\n$$0$$\n\n2$$1$\n\nThen $\\sum\\limits_{i = 1}^{n} \\operatorname{mex}(\\{a_{i,1}, a_{i,2}, \\ldots, a_{i,m}\\}) + \\sum\\limits_{j = 1}^{m} \\operatorname{mex}(\\{a_{1,j}, a_{2,j}, \\ldots, a_{n,j}\\}) = \\operatorname{mex}(\\{3, 0\\}) + \\operatorname{mex}(\\{2, 1\\})$ $+ \\operatorname{mex}(\\{3, 2\\}) + \\operatorname{mex}(\\{0, 1\\}) = 1 + 0 + 0 + 2 = 3$.", "cfid": "2057A"}
{"problem_id": "2057C", "problem_title": "C. Trip to the Olympiad", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2057/C", "problem_statement": "In the upcoming year, there will be many team olympiads, so the teachers of \"T-generation\" need to assemble a team of three pupils to participate in them. Any three pupils will show a worthy result in any team olympiad. But winning the olympiad is only half the battle; first, you need to get there...\n\nEach pupil has an independence level, expressed as an integer. In \"T-generation\", there is exactly one student with each independence levels from $l$ to $r$, inclusive. For a team of three pupils with independence levels $a$, $b$, and $c$, the value of their team independence is equal to $(a \\oplus b) + (b \\oplus c) + (a \\oplus c)$, where $\\oplus$ denotes the [bitwise XOR operation](https://en.wikipedia.org/wiki/Bitwise_operation#XOR).\n\nYour task is to choose any trio of students with the maximum possible team independence.\n\n### Input\n\nEach test contains multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case set contains two integers $l$ and $r$ ($0 \\le l, r < 2^{30}$, $r - l > 1$) — the minimum and maximum independence levels of the students.\n\n### Output\n\nFor each test case set, output three pairwise distinct integers $a, b$, and $c$, such that $l \\le a, b, c \\le r$ and the value of the expression $(a \\oplus b) + (b \\oplus c) + (a \\oplus c)$ is maximized. If there are multiple triples with the maximum value, any of them can be output.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n0 2\n\n0 8\n\n1 3\n\n6 22\n\n128 137\n\n69 98\n\n115 127\n\n0 1073741823\n\n```\n\n#### Output #1\n\n```\n1 2 0\n8 7 1\n2 1 3\n7 16 11\n134 132 137\n98 85 76\n123 121 118\n965321865 375544086 12551794\n```\n\n### Note\n\nIn the first test case, the only suitable triplet of numbers ($a, b, c$) (up to permutation) is ($0, 1, 2$).\n\nIn the second test case, one of the suitable triplets is ($8, 7, 1$), where $(8 \\oplus 7) + (7 \\oplus 1) + (8 \\oplus 1) = 15 + 6 + 9 = 30$. It can be shown that $30$ is the maximum possible value of $(a \\oplus b) + (b \\oplus c) + (a \\oplus c)$ for $0 \\le a, b, c \\le 8$.", "cfid": "2057C"}
{"problem_id": "2057B", "problem_title": "B. Gorilla and the Exam", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2057/B", "problem_statement": "Due to a shortage of teachers in the senior class of the \"T-generation\", it was decided to have a huge male gorilla conduct exams for the students. However, it is not that simple; to prove his competence, he needs to solve the following problem.\n\nFor an array $b$, we define the function $f(b)$ as the smallest number of the following operations required to make the array $b$ empty:\n\n- take two integers $l$ and $r$, such that $l \\le r$, and let $x$ be the $\\min(b_l, b_{l+1}, \\ldots, b_r)$; then\n- remove all such $b_i$ that $l \\le i \\le r$ and $b_i = x$ from the array, the deleted elements are removed, the indices are renumerated.\n\nYou are given an array $a$ of length $n$ and an integer $k$. No more than $k$ times, you can choose any index $i$ ($1 \\le i \\le n$) and any integer $p$, and replace $a_i$ with $p$.\n\nHelp the gorilla to determine the smallest value of $f(a)$ that can be achieved after such replacements.\n\n### Input\n\nEach test contains multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each set of input data contains two integers $n$ and $k$ ($1 \\le n \\le 10^5$, $0 \\le k \\le n$) — the length of the array $a$ and the maximum number of changes, respectively.\n\nThe second line of each set of input data contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$) — the array $a$ itself.\n\nIt is guaranteed that the sum of the values of $n$ across all sets of input data does not exceed $10^5$.\n\n### Output\n\nFor each set of input data, output a single integer on a separate line — the smallest possible value of $f(a)$.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n1 0\n\n48843\n\n3 1\n\n2 3 2\n\n5 3\n\n1 2 3 4 5\n\n7 0\n\n4 7 1 3 2 4 1\n\n11 4\n\n3 2 1 4 4 3 4 2 1 3 3\n\n5 5\n\n1 2 3 4 5\n\n```\n\n#### Output #1\n\n```\n1\n1\n2\n5\n2\n1\n```\n\n### Note\n\nIn the first set of input data, $f([48\\,843]) = 1$, since the array consists of a single number, and thus it can be removed in one operation.\n\nIn the second set of input data, you can change the second number to $2$, resulting in the array $[2, 2, 2]$, where $f([2, 2, 2]) = 1$, since you can take the entire array as a subarray, the minimum on it is $2$, so we will remove all the $2$s from the array, and the array will become empty.", "cfid": "2057B"}
{"problem_id": "2092E", "problem_title": "E. She knows...", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2092/E", "problem_statement": "D. Pippy is preparing for a \"black-and-white\" party at his home. He only needs to repaint the floor in his basement, which can be represented as a board of size $n \\times m$.\n\nAfter the last party, the entire board is painted green, except for some $k$ cells $(x_1, y_1), (x_2, y_2), \\ldots, (x_k, y_k)$, each of which is painted either white or black. For the upcoming party, D. Pippy wants to paint each of the remaining green cells either black or white. At the same time, he wants the number of pairs of adjacent cells with different colors on the board to be even after repainting.\n\nFormally, if \n\n$$A = \\left\\{((i_1, j_1), (i_2, j_2)) \\ | \\ 1 \\le i_1, i_2 \\le n, 1 \\le j_1, j_2 \\le m, i_1+j_1<i_2+j_2, |i_1-i_2|+|j_1-j_2| = 1, \\operatorname{color}(i_1, j_1) \\neq \\operatorname{color}(i_2, j_2) \\right\\},$$\n\nwhere $\\operatorname{color}(x, y)$ denotes the color of the cell $(x, y)$, then it is required that $|A|$ be even.\n\nHelp D. Pippy find the number of ways to repaint the floor so that the condition is satisfied. Since this number can be large, output the remainder of its division by $10^9 + 7$.\n\n### Input\n\nEach test consists of several test cases. The first line of the input data contains one integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains three integers $n, m, k$ ($3 \\le n, m \\le 10^9$; $1 \\le k \\le 2 \\cdot 10^5$) — the dimensions of the board and the number of cells that are initially not green.\n\nIn the $i$-th of the following $k$ lines of each test case, there are three integers $x_i, y_i$ and $c_i$ ($1 \\le x_i \\le n; 1 \\le y_i \\le m$; $c_i \\in \\{0, 1\\}$) — the coordinates of the cell and its color (if white, then $c_i = 0$; if black, then $c_i = 1$). It is guaranteed that all cells are distinct.\n\nIt is guaranteed that the sum of $k$ across all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the answer modulo $10^9 + 7$.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n3 3 6\n\n1 1 0\n\n1 2 1\n\n1 3 0\n\n3 1 1\n\n3 2 0\n\n3 3 1\n\n3 4 12\n\n1 1 0\n\n1 2 1\n\n1 3 0\n\n1 4 1\n\n2 1 1\n\n2 2 0\n\n2 3 1\n\n2 4 0\n\n3 1 0\n\n3 2 1\n\n3 3 0\n\n3 4 1\n\n```\n\n#### Output #1\n\n```\n4\n0\n```\n\n### Note\n\nIn the first test case, there are exactly $4$ ways to paint the green cells $(2, 1), (2, 2), (2, 3)$, namely: $(1, 1, 0), (0, 0, 1), (1, 0, 0), (0, 1, 1)$ (the colors are indicated in the same order as the cells), as shown below.\n\n![](https://espresso.codeforces.com/675afbf168b04d13cafb66dda4b563200ddc256d.png)Example 1.\n\nIn the second test case, all cells of the board are already painted, and the number of pairs of adjacent cells with different colors on the board is odd, so the answer is zero.", "cfid": "2092E"}
{"problem_id": "2092F", "problem_title": "F. Andryusha and CCB", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2092/F", "problem_statement": "Let us define the beauty of a binary string $z$ as the number of indices $i$ such that $1 \\le i < |z|$ and $z_i \\neq z_{i+1}$.\n\nWhile waiting for his friends from the CCB, Andryusha baked a pie, represented by a binary string $s$ of length $n$. To avoid offending anyone, he wants to divide this string into $k$ substrings such that each digit belongs to exactly one substring, and the beauties of all substrings are the same.\n\nAndryusha does not know the exact number of friends from the CCB who will come to his house, so he wants to find the number of values of $k$ for which it is possible to split the pie into exactly $k$ parts with equal beauties.\n\nHowever, Andryusha's brother, Tristan, decided that this formulation of the problem is too simple. Therefore, he wants you to find the number of such values of $k$ for each prefix of the string. In other words, for each $i$ from $1$ to $n$, you need to find the number of values of $k$ for which it is possible to split the prefix $s_1 s_2 \\ldots s_i$ into exactly $k$ parts with equal beauties.\n\n### Input\n\nEach test consists of several test cases. The first line of the input data contains one integer $t$ ($1 \\le t \\le 10^5$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\leq n \\leq 10^6$) — the length of the binary string.\n\nThe second line of each test case contains a binary string of length $n$, consisting only of digits 0 and 1.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case, output a single line containing $n$ integers $c_i$ ($0 \\le c_i \\le n$) — the number of values of $k$ for which it is possible to split the prefix $s_1 s_2 \\ldots s_i$ into exactly $k$ parts with equal beauties.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n5\n\n00011\n\n10\n\n0101010101\n\n7\n\n0010100\n\n```\n\n#### Output #1\n\n```\n1 2 3 4 5\n1 2 2 3 2 4 2 4 3 4\n1 2 3 3 4 3 4\n```\n\n### Note\n\nIn the third case, the values of $k$ that satisfy the conditions are:\n\n1. $i = 1$: $k \\in \\{1\\}$,\n2. $i = 2$: $k \\in \\{1, 2\\}$,\n3. $i = 3$: $k \\in \\{1, 2, 3\\}$,\n4. $i = 4$: $k \\in \\{1, 3, 4\\}$,\n5. $i = 5$: $k \\in \\{1, 2, 4, 5\\}$,\n6. $i = 6$: $k \\in \\{1, 5, 6\\}$,\n7. $i = 7$: $k \\in \\{1, 5, 6, 7\\}$.", "cfid": "2092F"}
{"problem_id": "2091G", "problem_title": "G. Gleb and Boating", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2091/G", "problem_statement": "Programmer Gleb frequently visits the IT Campus \"NEIMARK\" to participate in programming training sessions.\n\nNot only is Gleb a programmer, but he is also a renowned rower, so he covers part of his journey from home to the campus by kayaking along a river. Assume that Gleb starts at point $0$ and must reach point $s$ (i.e., travel $s$ meters along a straight line). To make the challenge tougher, Gleb has decided not to go outside the segment $[0, s]$. The dimensions of the kayak can be neglected.\n\nGleb is a strong programmer! Initially, his power is $k$. Gleb's power directly affects the movement of his kayak. If his current power is $x$, then with one paddle stroke the kayak moves $x$ meters in the current direction. Gleb can turn around and continue moving in the opposite direction, but such a maneuver is quite challenging, and after each turn, his power decreases by $1$. The power can never become $0$ — if his current power is $1$, then even after turning it remains $1$. Moreover, Gleb cannot make two turns in a row — after each turn, he must move at least once before making another turn. Similarly, Gleb cannot make a turn immediately after the start — he must first perform a paddle stroke.\n\nGleb wants to reach point $s$ from point $0$ without leaving the segment $[0, s]$ and while preserving as much power as possible. Help him — given the value $s$ and his initial power $k$, determine the maximum possible power he can have upon reaching point $s$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\leq t \\leq 100$). The description of the test cases follows.\n\nA single line of each test case contains two integers $s$ and $k$ ($1 \\leq s \\leq 10^9$, $1 \\leq k \\leq 1000$, $k \\leq s$).\n\nIt is guaranteed that the sum of $k$ over all test cases does not exceed $2000$.\n\n### Output\n\nFor each test case, output the maximum possible power Gleb can have at the end of his journey.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n9 6\n\n10 7\n\n24 2\n\n123456 777\n\n6 4\n\n99 6\n\n10 4\n\n99 4\n\n```\n\n#### Output #1\n\n```\n4\n1\n2\n775\n1\n4\n2\n2\n```\n\n### Note\n\nOne of the variants of Gleb's movement in the first example:\n\n![](https://espresso.codeforces.com/4e41b69eb4b8149b5fb4530e5f1e6eede1c4d340.png)", "cfid": "2091G"}
{"problem_id": "2089B2", "problem_title": "B2. Canteen (Hard Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2089/B2", "problem_statement": "This is the hard version of the problem. The difference between the versions is that in this version, there are no additional limits on $k$. You can hack only if you solved all versions of this problem.\n\nEcrade has two sequences $a_0, a_1, \\ldots, a_{n - 1}$ and $b_0, b_1, \\ldots, b_{n - 1}$ consisting of integers. It is guaranteed that the sum of all elements in $a$ does not exceed the sum of all elements in $b$.\n\nInitially, Ecrade can make exactly $k$ changes to the sequence $a$. It is guaranteed that $k$ does not exceed the sum of $a$. In each change:\n\n- Choose an integer $i$ ($0 \\le i < n$) such that $a_i > 0$, and perform $a_i := a_i - 1$.\n\nThen Ecrade will perform the following three operations sequentially on $a$ and $b$, which constitutes one round of operations:\n\n1. For each $0 \\le i < n$: $t := \\min(a_i, b_i), a_i := a_i - t, b_i := b_i - t$;\n2. For each $0 \\le i < n$: $c_i := a_{(i - 1) \\bmod n}$;\n3. For each $0 \\le i < n$: $a_i := c_i$;\n\nEcrade wants to know the minimum number of rounds required for all elements in $a$ to become equal to $0$ after exactly $k$ changes to $a$.\n\nHowever, this seems a bit complicated, so please help him!\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 2\\cdot 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$, $k$ ($1\\le n\\le 2\\cdot 10^5$, $0\\le k\\le 2\\cdot 10^{14}$).\n\nThe second line of each test case contains $n$ integers $a_0, a_1, \\ldots, a_{n - 1}$ ($1 \\le a_i \\le 10^9$).\n\nThe third line of each test case contains $n$ integers $b_0, b_1, \\ldots, b_{n - 1}$ ($1 \\le b_i \\le 10^9$).\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2\\cdot 10^5$. It is also guaranteed that in each test case the sum of $a$ does not exceed the sum of $b$, and that $k$ does not exceed the sum of $a$.\n\n### Output\n\nFor each test case, output the minimum number of rounds required for all elements in $a$ to become equal to $0$ after exactly $k$ changes to $a$.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n3 0\n\n1 1 4\n\n5 1 4\n\n4 0\n\n1 2 3 4\n\n4 3 2 1\n\n4 0\n\n2 1 1 2\n\n1 2 2 1\n\n8 0\n\n1 2 3 4 5 6 7 8\n\n8 7 6 5 4 3 2 1\n\n3 6\n\n1 1 4\n\n5 1 4\n\n4 1\n\n1 2 3 4\n\n4 3 2 1\n\n4 1\n\n2 1 1 2\n\n1 2 2 1\n\n4 2\n\n2 1 1 2\n\n1 2 2 1\n\n```\n\n#### Output #1\n\n```\n1\n4\n4\n8\n0\n2\n2\n1\n```\n\n### Note\n\nIn the fifth test case, all elements in $a$ become $0$ after exactly $6$ changes.\n\nIn the sixth test case, Ecrade can do exactly one change to $a_3$, then $a$ will become $[1,2,2,4]$.\n\n- After the first round, $a=[3,0,0,0],b=[3,1,0,0]$;\n- After the second round, $a=[0,0,0,0],b=[0,1,0,0]$.\n\nIn the seventh test case, Ecrade can do exactly one change to $a_4$, then $a$ will become $[2,1,1,1]$.\n\n- After the first round, $a=[0,1,0,0],b=[0,1,1,0]$;\n- After the second round, $a=[0,0,0,0],b=[0,0,1,0]$.", "cfid": "2089B2"}
{"problem_id": "2089B1", "problem_title": "B1. Canteen (Easy Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2089/B1", "problem_statement": "This is the easy version of the problem. The difference between the versions is that in this version, $k=0$. You can hack only if you solved all versions of this problem.\n\nEcrade has two sequences $a_0, a_1, \\ldots, a_{n - 1}$ and $b_0, b_1, \\ldots, b_{n - 1}$ consisting of integers. It is guaranteed that the sum of all elements in $a$ does not exceed the sum of all elements in $b$.\n\nInitially, Ecrade can make exactly $k$ changes to the sequence $a$. It is guaranteed that $k$ does not exceed the sum of $a$. In each change:\n\n- Choose an integer $i$ ($0 \\le i < n$) such that $a_i > 0$, and perform $a_i := a_i - 1$.\n\nThen Ecrade will perform the following three operations sequentially on $a$ and $b$, which constitutes one round of operations:\n\n1. For each $0 \\le i < n$: $t := \\min(a_i, b_i), a_i := a_i - t, b_i := b_i - t$;\n2. For each $0 \\le i < n$: $c_i := a_{(i - 1) \\bmod n}$;\n3. For each $0 \\le i < n$: $a_i := c_i$;\n\nEcrade wants to know the minimum number of rounds required for all elements in $a$ to become equal to $0$ after exactly $k$ changes to $a$.\n\nHowever, this seems a bit complicated, so please help him!\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 2\\cdot 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$, $k$ ($1 \\le n \\le 2 \\cdot 10^5$, $k = 0$).\n\nThe second line of each test case contains $n$ integers $a_0, a_1, \\ldots, a_{n - 1}$ ($1 \\le a_i \\le 10^9$).\n\nThe third line of each test case contains $n$ integers $b_0, b_1, \\ldots, b_{n - 1}$ ($1 \\le b_i \\le 10^9$).\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2\\cdot 10^5$. It is also guaranteed that in each test case the sum of $a$ does not exceed the sum of $b$, and that $k$ does not exceed the sum of $a$.\n\n### Output\n\nFor each test case, output the minimum number of rounds required for all elements in $a$ to become equal to $0$ after exactly $k$ changes to $a$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3 0\n\n1 1 4\n\n5 1 4\n\n4 0\n\n1 2 3 4\n\n4 3 2 1\n\n4 0\n\n2 1 1 2\n\n1 2 2 1\n\n8 0\n\n1 2 3 4 5 6 7 8\n\n8 7 6 5 4 3 2 1\n\n```\n\n#### Output #1\n\n```\n1\n4\n4\n8\n```\n\n### Note\n\nIn this version, Ecrade cannot make changes to $a$.\n\nIn the first test case:\n\n- After the first round, $a=[0,0,0],b=[4,0,0]$.\n\nIn the second test case:\n\n- After the first round, $a=[3,0,0,1],b=[3,1,0,0]$;\n- After the second round, $a=[1,0,0,0],b=[0,1,0,0]$;\n- After the third round, $a=[0,1,0,0],b=[0,1,0,0]$;\n- After the fourth round, $a=[0,0,0,0],b=[0,0,0,0]$.", "cfid": "2089B1"}
{"problem_id": "2089C1", "problem_title": "C1. Key of Like (Easy Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2089/C1", "problem_statement": "This is the easy version of the problem. The difference between the versions is that in this version, it is guaranteed that $k=0$. You can hack only if you solved all versions of this problem.\n\nA toy box is a refrigerator filled with childhood delight. Like weakness, struggle, hope ... When such a sleeper is reawakened, what kind of surprises will be waiting?\n\nM received her toy box as a birthday present from her mother. A jewellery designer would definitely spare no effort in decorating yet another priceless masterpiece as a starry firmament with exquisitely shaped gemstones. In addition, $l$ distinct locks secure the tiny universe of her lovely daughter: a hair clip featuring a flower design, a weathered feather pen, a balloon shaped like the letter M ... each piece obscures a precious moment.\n\nA few days ago, M rediscovered her toy box when she was reorganizing her bedroom, along with a ring of keys uniquely designed for the toy box. Attached to the key ring are $(l + k)$ keys, of which $l$ keys are able to open one of the $l$ locks correspondingly, while the other $k$ keys are nothing but counterfeits to discourage brute-force attack. To remind the correspondence, M's mother adorned each key with a gemstone of a different type. However, passing days have faded M's memory away.\n\n\"... So I have to turn to you all,\" M said while laying that ring of keys on the table.\n\nK picked up the keys and examined them carefully. \"The appearance of these keys unveils nothing fruitful. Thus, I am afraid that we shall inspect them sequentially.\"\n\nAlthough everyone is willing to help M, nobody has a plan. Observing others' reactions, T suggested, \"Let's play a game. Everyone tries a key in turn, and who opens the most locks is amazing.\"\n\n$n$ members, including M herself, take turns to unlock the toy box recursively in the same order until all the $l$ locks are unlocked. At each turn, the current member only selects a single key and tests it on exactly one of the locks. To open the toy box as soon as possible, every member chooses the key and the lock that maximize the probability of being a successful match. If there are multiple such pairs, a member will randomly choose one of such pairs with equal probability. Apparently, if a lock has been matched with a key, then neither the lock nor the key will be chosen again in following attempts.\n\nAssume that at the very beginning, the probability that a lock can be opened by any key is equal. If everyone always tries the optimal pairs of keys and locks based on all the historical trials, what will the expected number of successful matches be for each member?\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 100$). The description of the test cases follows.\n\nThe only line of the input contains three integers, $n$, $l$, $k$ ($1 \\leq n \\leq 100, 1 \\leq l \\leq 5000, k = 0$) — the number of members participating in the game, the number of locks, and the number of counterfeit keys.\n\nIt is guaranteed that the sum of $l$ across all test cases does not exceed $5000$.\n\n### Output\n\nFor each test case, output a single line with $n$ integers $e_1, \\ldots, e_n$, where $e_i$ represents the expected number of successful matches, modulo $10^9 + 7$.\n\nFormally, let $M = 10^9 + 7$. It can be shown that the exact answer can be expressed as an irreducible fraction $\\frac{p}{q}$, where $p$ and $q$ are integers and $q \\not \\equiv 0 \\pmod{M}$. Output the integer equal to $p \\cdot q^{-1} \\bmod M$. In other words, output such an integer $e_i$ that $0 \\le x < M$ and $e_i \\cdot q \\equiv p \\pmod{M}$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3 1 0\n\n3 2 0\n\n2 5 0\n\n9 104 0\n\n```\n\n#### Output #1\n\n```\n1 0 0\n500000004 1 500000004\n200000004 800000008\n869203933 991076635 39374313 496894434 9358446 51822059 979588764 523836809 38844739\n```\n\n### Note\n\nFor the first test case, there is only $1$ lock, so the first member opens the only lock with the only key undoubtedly.\n\nFor the second test case, there are exactly $2$ locks and $2$ keys, with each key corresponding to one of the locks. Without extra information, the first member randomly chooses a key and a lock with equal probabilities, for which the probability of success is $1/2$.\n\n- If the first member succeeds, the second member will open the other lock with the other key.\n- If the first member fails, then the key she selected can open the other lock, and the other key must correspond to the lock she chose. This information allows both the second and the third member to open a lock.\n\nIn conclusion, the expected numbers of successful matches will be:\n\n\n\n$$ \\begin{split} e_1 &= \\frac{1}{2}\\times 1 + \\frac{1}{2}\\times 0 = \\frac{1}{2} \\equiv 500,000,004 \\pmod {10^9+7},\\\\ e_2 &= \\frac{1}{2}\\times 1 + \\frac{1}{2} \\times 1 = 1,\\\\ e_3 &= \\frac{1}{2}\\times 0 + \\frac{1}{2} \\times 1 = \\frac{1}{2} \\equiv 500,000,004\\pmod {10^9+7}. \\end{split} $$\n\n", "cfid": "2089C1"}
{"problem_id": "2085F2", "problem_title": "F2. Serval and Colorful Array (Hard Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2085/F2", "problem_statement": "This is the hard version of the problem. The difference between the versions is that in this version, $n\\le 4\\cdot 10^5$. You can hack only if you solved all versions of this problem.\n\nServal has a magic number $k$ ($k\\ge 2$). We call an array $r$ colorful if and only if:\n\n- The length of $r$ is $k$, and\n- Each integer between $1$ and $k$ appears exactly once in $r$.\n\nYou are given an array $a$ consisting of $n$ integers between $1$ and $k$. It is guaranteed that each integer between $1$ and $k$ appears in $a$ at least once. You can perform the following operation on $a$:\n\n- Choose an index $i$ ($1\\le i < n$), then swap $a_i$ and $a_{i+1}$.\n\nFind the minimum number of operations needed to make at least one subarray$^{\\text{∗}}$ of $a$ colorful. It can be shown that this is always possible under the constraints of the problem.\n\n$^{\\text{∗}}$An array $b$ is a subarray of an array $a$ if $b$ can be obtained from $a$ by the deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $k$ ($2\\leq k\\leq n\\leq 4\\cdot 10^5$) — the length of the array $a$ and Serval's magic number.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1\\leq a_i\\leq k$) — the elements of the array $a$. It is guaranteed that each integer between $1$ and $k$ appears in $a$ at least once.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $4\\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the minimum number of operations needed to make at least one subarray of $a$ colorful.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n3 2\n\n1 2 1\n\n7 3\n\n2 1 1 3 1 1 2\n\n6 3\n\n1 1 2 2 2 3\n\n6 3\n\n1 2 2 2 2 3\n\n10 5\n\n5 1 3 1 1 2 2 4 1 3\n\n9 4\n\n1 2 3 3 3 3 3 2 4\n\n```\n\n#### Output #1\n\n```\n0\n1\n2\n3\n4\n5\n```\n\n### Note\n\nIn the first test case, since the subarrays $[a_1, a_2] = [1, 2]$ and $[a_2, a_3] = [2, 1]$ are already colorful, we do not need to perform any operations. Thus, the answer is $0$.\n\nIn the second test case, we can swap $a_1$ and $a_2$ to obtain $[1, \\underline{2, 1, 3}, 1, 1, 2]$, which has a colorful subarray $[a_2, a_3, a_4] = [2, 1, 3]$. And the given array initially does not have any colorful subarrays, so the answer is $1$.", "cfid": "2085F2"}
{"problem_id": "2085D", "problem_title": "D. Serval and Kaitenzushi Buffet", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2085/D", "problem_statement": "Serval has just found a Kaitenzushi buffet restaurant. Kaitenzushi means that there is a conveyor belt in the restaurant, delivering plates of sushi in front of the customer, Serval.\n\nIn this restaurant, each plate contains exactly $k$ pieces of sushi and the $i$-th plate has a deliciousness $d_i$. Serval will have a meal in this restaurant for $n$ minutes, and within the $n$ minutes, he must eat up all the pieces of sushi he took from the belt.\n\nDenote the counter for uneaten taken pieces of sushi as $r$. Initially, $r=0$. In the $i$-th minute ($1\\leq i\\leq n$), only the $i$-th plate of sushi will be delivered in front of Serval, and he can do one of the following:\n\n- Take the $i$-th plate of sushi (whose deliciousness is $d_i$) from the belt, and $r$ will be increased by $k$;\n- Eat one uneaten piece of sushi that he took from the belt before, and $r$ will be decreased by $1$. Note that you can do this only if $r>0$;\n- Or, do nothing, and $r$ will remain unchanged.\n\nNote that after the $n$ minutes, the value of $r$ must be $0$.\n\nServal wants to maximize the sum of the deliciousnesses of all the plates he took. Help him find it out!\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1\\leq k<n\\leq 2\\cdot 10^5$) — the number of minutes of the meal and the number of sushi pieces in each plate.\n\nThe second line contains $n$ integers $d_1, d_2, \\ldots, d_n$ ($1\\leq d_i\\leq 10^9$) — the deliciousness of each plate.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, print a single integer — the maximum possible sum of the deliciousnesses of all the plates Serval took.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n5 2\n\n3 6 4 1 2\n\n7 1\n\n3 1 4 1 5 9 2\n\n4 3\n\n4 3 2 1\n\n6 2\n\n1 3 5 2 4 6\n\n6 1\n\n1000000000 1 1000000000 1 1000000000 1\n\n```\n\n#### Output #1\n\n```\n6\n16\n4\n6\n3000000000\n```\n\n### Note\n\nIn the first test case, it can be shown that Serval can eat up at most one plate of sushi. Since the second plate of sushi has the greatest deliciousness $6$ among all the plates, he will take it from the belt in the second minute, and then eat it up in the following $2$ minutes.\n\nMinute$1\n\n$$2$$\n\n3\n\n$$4$$\n\n5$Action — TakeEatEat — $r$ after action$0\n\n$$2$$\n\n1\n\n$$0$$\n\n0$Deliciousnesses gained$0\n\n$$6$$\n\n6\n\n$$6$$\n\n6$\n\nIn the second test case, it can be shown that it is optimal for Serval to eat up the first, third, and sixth plates of sushi. The sum of the deliciousnesses of these plates is $3 + 4 + 9 = 16$.\n\nMinute$1\n\n$$2$$\n\n3\n\n$$4$$\n\n5\n\n$$6$$\n\n7$ActionTakeEatTakeEat — TakeEat$r$ after action$1\n\n$$0$$\n\n1\n\n$$0$$\n\n0\n\n$$1$$\n\n0$Deliciousnesses gained$3\n\n$$3$$\n\n7\n\n$$7$$\n\n7\n\n$$16$$\n\n16$", "cfid": "2085D"}
{"problem_id": "2085E", "problem_title": "E. Serval and Modulo", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2085/E", "problem_statement": "There is an array $a$ consisting of $n$ non-negative integers and a magic number $k$ ($k\\ge 1$, $k$ is an integer). Serval has constructed another array $b$ of length $n$, where $b_i = a_i \\bmod k$ holds$^{\\text{∗}}$ for all $1\\leq i\\leq n$. Then, he shuffled $b$.\n\nYou are given the two arrays $a$ and $b$. Find a possible magic number $k$. However, there is a small possibility that Serval fooled you, and such an integer does not exist. In this case, output $-1$.\n\nIt can be shown that, under the constraints of the problem, if such an integer $k$ exists, then there exists a valid answer no more than $10^9$. And you need to guarantee that $k\\le 10^9$ in your output.\n\n$^{\\\\text{∗}}$$a\\_i \\\\bmod k$ denotes the remainder from dividing $a\\_i$ by $k$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains an integer $n$ ($1\\leq n\\leq 10^4$) — the length of the array $a$.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0\\leq a_i\\leq 10^6$) — the elements of the array $a$.\n\nThe third line contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($0\\leq b_i\\leq 10^6$) — the elements of the array $b$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^4$.\n\n### Output\n\nFor each test case, output a single integer $k$ ($1\\leq k\\leq 10^9$) — the magic number you found. Print $-1$ if it is impossible to find such an integer.\n\nIf there are multiple answers, you may print any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n4\n\n3 5 2 7\n\n0 1 1 1\n\n5\n\n3 1 5 2 4\n\n1 2 3 4 5\n\n6\n\n2 3 4 7 8 9\n\n1 2 3 6 7 8\n\n5\n\n21 22 25 28 20\n\n0 1 2 1 0\n\n6\n\n1 1 2 3 5 8\n\n0 0 1 1 0 0\n\n```\n\n#### Output #1\n\n```\n2\n31415926\n-1\n4\n-1\n```\n\n### Note\n\nIn the first test case, if $k\\ge 3$, then $2=a_3\\bmod k$ should be in the array $b$, which leads to a contradiction. For $k = 1$, $[a_1\\bmod k, a_2\\bmod k, a_3\\bmod k, a_4 \\bmod k] = [0,0,0,0]$, which cannot be shuffled to $b$. For $k = 2$, $[a_1\\bmod k, a_2\\bmod k, a_3\\bmod k, a_4 \\bmod k] = [1,1,0,1]$, which can be shuffled to $b$. Thus, the only possible answer is $k=2$.\n\nIn the second test case, note that $b$ can be obtained by shuffling $a$. Thus, all integers between $6$ and $10^9$ are possible answers.\n\nIn the third test case, it can be shown that such $k$ does not exist. Got fooled by Serval!", "cfid": "2085E"}
{"problem_id": "2085F1", "problem_title": "F1. Serval and Colorful Array (Easy Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2085/F1", "problem_statement": "This is the easy version of the problem. The difference between the versions is that in this version, $n\\le 3000$. You can hack only if you solved all versions of this problem.\n\nServal has a magic number $k$ ($k\\ge 2$). We call an array $r$ colorful if and only if:\n\n- The length of $r$ is $k$, and\n- Each integer between $1$ and $k$ appears exactly once in $r$.\n\nYou are given an array $a$ consisting of $n$ integers between $1$ and $k$. It is guaranteed that each integer between $1$ and $k$ appears in $a$ at least once. You can perform the following operation on $a$:\n\n- Choose an index $i$ ($1\\le i < n$), then swap $a_i$ and $a_{i+1}$.\n\nFind the minimum number of operations needed to make at least one subarray$^{\\text{∗}}$ of $a$ colorful. It can be shown that this is always possible under the constraints of the problem.\n\n$^{\\text{∗}}$An array $b$ is a subarray of an array $a$ if $b$ can be obtained from $a$ by the deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $k$ ($2\\leq k\\leq n\\leq 3000$) — the length of the array $a$ and Serval's magic number.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1\\leq a_i\\leq k$) — the elements of the array $a$. It is guaranteed that each integer between $1$ and $k$ appears in $a$ at least once.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $3000$.\n\n### Output\n\nFor each test case, output a single integer — the minimum number of operations needed to make at least one subarray of $a$ colorful.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n3 2\n\n1 2 1\n\n7 3\n\n2 1 1 3 1 1 2\n\n6 3\n\n1 1 2 2 2 3\n\n6 3\n\n1 2 2 2 2 3\n\n10 5\n\n5 1 3 1 1 2 2 4 1 3\n\n9 4\n\n1 2 3 3 3 3 3 2 4\n\n```\n\n#### Output #1\n\n```\n0\n1\n2\n3\n4\n5\n```\n\n### Note\n\nIn the first test case, since the subarrays $[a_1, a_2] = [1, 2]$ and $[a_2, a_3] = [2, 1]$ are already colorful, we do not need to perform any operations. Thus, the answer is $0$.\n\nIn the second test case, we can swap $a_1$ and $a_2$ to obtain $[1, \\underline{2, 1, 3}, 1, 1, 2]$, which has a colorful subarray $[a_2, a_3, a_4] = [2, 1, 3]$. And the given array initially does not have any colorful subarrays, so the answer is $1$.", "cfid": "2085F1"}
{"problem_id": "2075F", "problem_title": "F. Beautiful Sequence Returns", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2075/F", "problem_statement": "Let's call an integer sequence beautiful if the following conditions hold:\n\n- for every element except the first one, there is an element to the left less than it;\n- for every element except the last one, there is an element to the right larger than it;\n\nFor example, $[1, 2]$, $[42]$, $[1, 4, 2, 4, 7]$, and $[1, 2, 4, 8]$ are beautiful, but $[2, 2, 4]$ and $[1, 3, 5, 3]$ are not.\n\nRecall that a subsequence is a sequence that can be obtained from another sequence by removing some elements (possibly zero) without changing the order of the remaining elements.\n\nYou are given an integer array $a$ of size $n$. Find the longest beautiful subsequence of the array $a$ and print its length.\n\n### Input\n\nThe first line contains one integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. Next, $t$ independent cases follow.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 5 \\cdot 10^5$) — the length of array $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^6$) – the array $a$.\n\nAdditional constraint on the input: the total sum of $n$ over all test cases doesn't exceed $5 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print one integer — the length of the longest beautiful subsequence of array $a$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n1\n\n42\n\n5\n\n1 2 3 4 5\n\n6\n\n6 5 4 3 2 1\n\n7\n\n1 1 3 4 2 3 4\n\n6\n\n2 3 1 1 2 4\n\n```\n\n#### Output #1\n\n```\n1\n5\n1\n5\n3\n```", "cfid": "2075F"}
{"problem_id": "2075D", "problem_title": "D. Equalization", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2075/D", "problem_statement": "You are given two non-negative integers $x$ and $y$.\n\nYou can perform the following operation any number of times (possibly zero): choose a positive integer $k$ and divide either $x$ or $y$ by $2^k$ rounding down. The cost of this operation is $2^k$. However, there is an additional constraint: you cannot select the same value of $k$ more than once.\n\nYour task is to calculate the minimum possible cost in order to make $x$ equal to $y$.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^5$) — the number of test cases.\n\nThe only line of each test case contains two integers $x$ and $y$ ($0 \\le x, y \\le 10^{17}$).\n\n### Output\n\nFor each test case, print a single integer — the minimum possible cost in order to make $x$ equal to $y$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n0 1\n\n6 2\n\n3 3\n\n13 37\n\n4238659325782394 12983091057341925\n\n```\n\n#### Output #1\n\n```\n2\n6\n0\n26\n32764\n```\n\n### Note\n\nIn the first example, you can proceed as follows: choose $k=1$ and divide $y$ by $2$. After that, $x$ and $y$ are equal to $0$.\n\nIn the second example, you can proceed as follows: choose $k=2$ and divide $x$ by $4$; choose $k=1$ and divide $y$ by $2$. After that, $x$ and $y$ are equal to $1$.\n\nIn the third example, numbers already are equal.", "cfid": "2075D"}
{"problem_id": "2075E", "problem_title": "E. XOR Matrix", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2075/E", "problem_statement": "For two arrays $a = [a_1, a_2, \\dots, a_n]$ and $b = [b_1, b_2, \\dots, b_m]$, we define the XOR matrix $X$ of size $n \\times m$, where for each pair $(i,j)$ ($1 \\le i \\le n$; $1 \\le j \\le m$) it holds that $X_{i,j} = a_i \\oplus b_j$. The symbol $\\oplus$ denotes the bitwise XOR operation.\n\nYou are given four integers $n, m, A, B$. Count the number of such pairs of arrays $(a, b)$ such that:\n\n- $a$ consists of $n$ integers, each of which is from $0$ to $A$;\n- $b$ consists of $m$ integers, each of which is from $0$ to $B$;\n- in the XOR matrix formed from these arrays, there are no more than two distinct values.\n\n### Input\n\nThe first line contains one integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nEach test case consists of one line containing four integers $n, m, A, B$ ($2 \\le n, m, A, B \\le 2^{29} - 1$).\n\n### Output\n\nFor each test case, output one integer — the number of pairs of arrays $(a, b)$ that satisfy all three conditions. Since this number can be very large, output it modulo $998244353$.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n2 2 2 2\n\n2 3 4 5\n\n5 7 4 3\n\n1337 42 1337 42\n\n4 2 13 37\n\n536870902 536370902 536390912 466128231\n\n```\n\n#### Output #1\n\n```\n57\n864\n50360\n439988899\n112000\n732195491\n```", "cfid": "2075E"}
{"problem_id": "2074F", "problem_title": "F. Counting Necessary Nodes", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2074/F", "problem_statement": "A quadtree is a tree data structure in which each node has at most four children and accounts for a square-shaped region.\n\nFormally, for all tuples of nonnegative integers $k,a,b \\ge 0$, there exists exactly one node accounting for the following region$^{\\text{∗}}$.\n\n\n\n$$[a \\cdot 2^k,(a+1) \\cdot 2^k] \\times [b \\cdot 2^k,(b+1) \\cdot 2^k]$$\n\nAll nodes whose region is larger than $1 \\times 1$ contain four children corresponding to the regions divided equally into four, and the nodes whose region is $1 \\times 1$ correspond to the leaf nodes of the tree.\n\n![](https://espresso.codeforces.com/4f8845f643b1cebe1c8c25d2bc7237887010f0bd.png)A small subset of the regions accounted for by the nodes is shown. The relatively darker regions are closer to leaf nodes.\n\nThe Frontman hates the widespread misconception, such that the quadtree can perform range queries in $\\mathcal{O}(\\log n)$ time when there are $n$ leaf nodes inside the region. In fact, sometimes it is necessary to query much more than $\\mathcal{O}(\\log n)$ regions for this, and the time complexity is $\\mathcal{O}(n)$ in some extreme cases. Thus, the Frontman came up with this task to educate you about this worst case of the data structure.\n\nThe pink soldiers have given you a finite region $[l_1,r_1] \\times [l_2,r_2]$, where $l_i$ and $r_i$ ($l_i < r_i$) are nonnegative integers. Please find the minimum number of nodes that you must choose in order to make the union of regions accounted for by the chosen nodes exactly the same as the given region. Here, two sets of points are considered different if there exists a point included in one but not in the other.\n\n$^{\\text{∗}}$Regions are sets of points with real coordinates, where the point $(x,y)$ is included in the region $[p,q] \\times [r,s]$ if and only if $p \\le x \\le q$ and $r \\le y \\le s$. Here, $\\times$ formally refers to [Cartesian product of sets](https://en.wikipedia.org/wiki/Cartesian_product).\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe only line of each test case contains four integers $l_1$, $r_1$, $l_2$, $r_2$ — the boundaries of the region in each axis ($0 \\le l_i < r_i \\le 10^6$).\n\n### Output\n\nFor each test case, output the minimum number of nodes necessary to satisfy the condition on a separate line.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n0 1 1 2\n\n0 2 0 2\n\n1 3 1 3\n\n0 2 1 5\n\n9 98 244 353\n\n```\n\n#### Output #1\n\n```\n1\n1\n4\n5\n374\n```\n\n### Note\n\nOn the first test case, the given region is $[0,1] \\times [1,2]$. There is one node accounting for $[0,1] \\times [1,2]$. Choosing this node, the answer is $1$.\n\nOn the second test case, the given region is $[0,2] \\times [0,2]$. There is one node accounting for $[0,2] \\times [0,2]$. Choosing this node, the answer is $1$.\n\nOn the third test case, the given region is $[1,3] \\times [1,3]$. There is no node that accounts for $[1,3] \\times [1,3]$. Instead, you can make the union of regions exactly the same as $[1,3] \\times [1,3]$ by choosing the following $4$ nodes:\n\n- A leaf node accounting for $[1,2] \\times [1,2]$;\n- A leaf node accounting for $[1,2] \\times [2,3]$;\n- A leaf node accounting for $[2,3] \\times [1,2]$;\n- A leaf node accounting for $[2,3] \\times [2,3]$.\n\nIt can be shown that it is impossible to make the union of regions exactly the same as $[1,3] \\times [1,3]$ with less than $4$ nodes. Therefore, the answer is $4$.\n\nOn the fourth test case, the given region is $[0,2] \\times [1,5]$. You can make the union of regions exactly the same as $[0,2] \\times [1,5]$ by choosing the following $5$ nodes:\n\n- A leaf node accounting for $[0,1] \\times [1,2]$;\n- A leaf node accounting for $[1,2] \\times [1,2]$;\n- A non-leaf node accounting for $[0,2] \\times [2,4]$;\n- A leaf node accounting for $[0,1] \\times [4,5]$;\n- A leaf node accounting for $[1,2] \\times [4,5]$.\n\nIt can be shown that it is impossible to make the union of regions exactly the same as $[0,2] \\times [1,5]$ with less than $5$ nodes. Therefore, the answer is $5$.", "cfid": "2074F"}
{"problem_id": "2074G", "problem_title": "G. Game With Triangles: Season 2", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2074/G", "problem_statement": "The Frontman greets you to this final round of the survival game.\n\nThere is a regular polygon with $n$ sides ($n \\ge 3$). The vertices are indexed as $1,2,\\ldots,n$ in clockwise order. On each vertex $i$, the pink soldiers have written a positive integer $a_i$. With this regular polygon, you will play a game defined as follows.\n\nInitially, your score is $0$. Then, you perform the following operation any number of times to increase your score.\n\n- Select $3$ different vertices $i$, $j$, $k$ that you have not chosen before, and draw the triangle formed by the three vertices.\n  - Then, your score increases by $a_i \\cdot a_j \\cdot a_k$.\n  - However, you can not perform this operation if the triangle shares a positive common area with any of the triangles drawn previously.\n\n![](https://espresso.codeforces.com/ff519219dea5f829a144af7b5e21e05171f1f551.png)An example of a state after two operations is on the left. The state on the right is impossible as the two triangles share a positive common area.\n\nYour objective is to maximize the score. Please find the maximum score you can get from this game.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ — the number of vertices ($3 \\le n \\le 400$).\n\nThe second line of each test case contains $a_1,a_2,\\ldots,a_n$ — the integers written on vertices ($1 \\le a_i \\le 1000$).\n\nIt is guaranteed that the sum of $n^3$ over all test cases does not exceed $400^3$.\n\n### Output\n\nFor each test case, output the maximum score you can get on a separate line.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n3\n\n1 2 3\n\n4\n\n2 1 3 4\n\n6\n\n2 1 2 1 1 1\n\n6\n\n1 2 1 3 1 5\n\n9\n\n9 9 8 2 4 4 3 5 3\n\n9\n\n9 9 3 2 4 4 8 5 3\n\n```\n\n#### Output #1\n\n```\n6\n24\n5\n30\n732\n696\n```\n\n### Note\n\nOn the first test case, you can draw only one triangle. The maximum score $6$ is found by drawing the triangle with $i=1$, $j=2$, $k=3$.\n\nOn the second test case, you can draw only one triangle. The maximum score $24$ is found by drawing the triangle with $i=1$, $j=3$, $k=4$.\n\nOn the third test case, you can draw two triangles. There is a series of two operations that leads to the score $5$, which is the maximum.\n\nOn the fourth test case, you can draw two triangles. However, drawing two triangles leads to a score of either $6+5=11$, $15+2=17$, or $10+3=13$. The maximum score $30$ is found by drawing only one triangle with $i=2$, $j=4$, $k=6$.\n\nOn the fifth test case, you can draw three triangles. The maximum score $732$ is found by drawing three triangles as follows.\n\n![](https://espresso.codeforces.com/4e37348c913d7d7c080ddf5c9de7e295628cfd17.png)", "cfid": "2074G"}
{"problem_id": "2077C", "problem_title": "C. Binary Subsequence Value Sum", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2077/C", "problem_statement": "[Last \\| Moment - onoken](https://www.youtube.com/watch?v=l_fXX3Y0Pis)\n\nFor a binary string$^{\\text{∗}}$ $v$, the score of $v$ is defined as the maximum value of\n\n\n\n$$F\\big(v, 1, i\\big) \\cdot F\\big(v, i+1, |v|\\big)$$\n\nover all $i$ ($0 \\leq i \\leq |v|$).\n\nHere, $F\\big(v, l, r\\big) = r - l + 1 - 2 \\cdot \\operatorname{zero}(v, l, r)$, where $\\operatorname{zero}(v, l, r)$ denotes the number of $\\mathtt{0}$s in $v_lv_{l+1} \\ldots v_r$. If $l > r$, then $F\\big(v, l, r\\big) = 0$.\n\nYou are given a binary string $s$ of length $n$ and a positive integer $q$.\n\nYou will be asked $q$ queries.\n\nIn each query, you are given an integer $i$ ($1 \\leq i \\leq n$). You must flip $s_i$ from $\\mathtt{0}$ to $\\mathtt{1}$ (or from $\\mathtt{1}$ to $\\mathtt{0}$). Find the sum of the scores over all non-empty subsequences$^{\\text{†}}$ of $s$ after each modification query.\n\nSince the result may be large, output the answer modulo $998\\,244\\,353$.\n\nNote that the modifications are persistent.\n\n$^{\\text{∗}}$A binary string is a string that consists only of the characters $\\mathtt{0}$ and $\\mathtt{1}$.\n\n$^{\\text{†}}$A binary string $x$ is a subsequence of a binary string $y$ if $x$ can be obtained from $y$ by deleting several (possibly zero or all) characters.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $q$ ($1 \\leq n \\leq 2 \\cdot 10^5$, $1 \\leq q \\leq 2 \\cdot 10^5$) — the length of the string $s$ and the number of modification queries, respectively.\n\nThe second line contains the binary string $s$ of length $n$, consisting of characters $\\mathtt{0}$ and $\\mathtt{1}$.\n\nThe following $q$ lines each contain an integer $i$ ($1 \\leq i \\leq n$), indicating that $s_i$ is flipped from $\\mathtt{0}$ to $\\mathtt{1}$ or from $\\mathtt{1}$ to $\\mathtt{0}$.\n\nIt is guaranteed that neither the total sum of all values of $n$ nor the total sum of all values of $q$ across all test cases exceeds $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output $q$ lines, each line containing a single integer — the required sum modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3 2\n\n010\n\n1\n\n3\n\n10 3\n\n0101000110\n\n3\n\n5\n\n10\n\n24 1\n\n011001100110000101111000\n\n24\n\n```\n\n#### Output #1\n\n```\n1\n5\n512\n768\n1536\n23068672\n```\n\n### Note\n\nFor the first test case, after the first modification, we have $s = \\texttt{110}$. We can compute the sum of scores over all subsequences as follows:\n\nIndicesSubsequenceScore$1$1$0\n\n$$2$1$0$$\n\n1, 2$11$1\n\n$$3$0$0$$\n\n1, 3$10$0\n\n$$2, 3$10$0$$\n\n1, 2, 3$110$0$\n\nSumming up: $0+0+1+0+0+0+0 = 1$.\n\nAfter the second modification, we have $s = \\texttt{111}$. We can compute the sum of scores over all subsequences as follows:\n\nIndicesSubsequenceScore$1$1$0\n\n$$2$1$0$$\n\n1, 2$11$1\n\n$$3$1$0$$\n\n1, 3$11$1\n\n$$2, 3$11$1$$\n\n1, 2, 3$111$2$\n\nSumming up: $0+0+1+0+1+1+2 = 5$.", "cfid": "2077C"}
{"problem_id": "2077B", "problem_title": "B. Finding OR Sum", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2077/B", "problem_statement": "[ALTER EGO - Yuta Imai vs Qlarabelle](https://www.youtube.com/watch?v=LJEqM7pvClA)\n\nThis is an interactive problem.\n\nThere are two hidden non-negative integers $x$ and $y$ ($0 \\leq x, y < 2^{30}$). You can ask no more than $2$ queries of the following form.\n\n- Pick a non-negative integer $n$ ($0 \\leq n < 2^{30}$). The judge will respond with the value of $(n \\mathbin{|} x) + (n \\mathbin{|} y)$, where $|$ denotes the [bitwise OR operation](https://en.wikipedia.org/wiki/Bitwise_operation#OR).\n\nAfter this, the judge will give you another non-negative integer $m$ ($0 \\leq m < 2^{30}$). You must answer the correct value of $(m \\mathbin{|} x) + (m \\mathbin{|} y)$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\n### Interaction\n\nTwo hidden integers $x$ and $y$ are chosen ($0 \\leq x, y < 2^{30}$). Note that $x$ and $y$ might be different for different test cases.\n\nThe interactor in this task is not adaptive. In other words, the integers $x$ and $y$ do not change during the interaction.\n\nTo ask a query, pick an integer $n$ ($0 \\leq n < 2^{30}$) and print only the integer $n$ to a line.\n\nYou will receive a single integer, the value of $(n \\mathbin{|} x) + (n \\mathbin{|} y)$.\n\nYou may make no more than $2$ queries of the following form.\n\nAfter you finish your queries, output \"!\" in a line. You will receive an integer $m$ ($0 \\leq m < 2^{30}$). Note that the value of $m$ is also fixed before interaction.\n\nYou must output only the value of $(m \\mathbin{|} x) + (m \\mathbin{|} y)$ in a line. Note that this line is not considered a query and is not taken into account when counting the number of queries asked.\n\nAfter this, proceed to the next test case.\n\nIf you make more than $2$ queries during an interaction, your program must terminate immediately, and you will receive the Wrong Answer verdict. Otherwise, you can get an arbitrary verdict because your solution will continue to read from a closed stream.\n\nAfter printing a query do not forget to output the end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- flush(output) in Pascal;\n- stdout.flush() in Python;\n- see the documentation for other languages.\n\nHacks\n\nTo hack, follow the test format below.\n\nThe first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first and only line of each test case contains a single line with three integers $x, y, m$ ($0 \\leq x, y, m < 2^{30}$).\n\n### Example\n\n#### Input #1\n\n```\n2\n\n3\n\n4\n\n1\n\n0\n\n1```\n\n#### Output #1\n\n```\n\n0\n\n1\n\n!\n\n4\n\n0\n\n!\n\n2```\n\n### Note\n\nIn the first test, the interaction proceeds as follows.\n\nSolutionJuryExplanation$\\texttt{2}$There are 2 test cases.$\\texttt{}$In the first test case, $x=1$ and $y=2$.$\\texttt{0}\n\n$$\\texttt{3}$The solution requests $(0 \\mathbin{|} 1) + (0 \\mathbin{|} 2)$, and the jury responds with $3$.$\\texttt{1}$$\n\ntexttt{4}$The solution requests $(1 \\mathbin{|} 1) + (1 \\mathbin{|} 2)$, and the jury responds with $4$.$\\texttt{!}\n\n$$\\texttt{1}$The solution requests the value of $m$, and the jury responds with $1$.$\\texttt{4}$The solution knows that $(1 \\mathbin{|} x) + (1 \\mathbin{|} y)=4$ because of earlier queries.$\\texttt{}$In the second test case, $x=0$ and $y=0$.$\\texttt{0}$$\n\ntexttt{0}$The solution requests $(0 \\mathbin{|} 0) + (0 \\mathbin{|} 0)$, and the jury responds with $0$.$\\texttt{!}$$\\texttt{1}$The solution requests the value of $m$, and the jury responds with $1$.$\\texttt{2}$The solution somehow deduces that $x=y=0$, so it responds with $(1 \\mathbin{|} 0) + (1 \\mathbin{|} 0)=2$.\n\nNote that the empty lines in the example input and output are for the sake of clarity and do not occur in the real interaction.", "cfid": "2077B"}
{"problem_id": "2077E", "problem_title": "E. Another Folding Strip", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2077/E", "problem_statement": "For an array $b$ of length $m$, define $f(b)$ as follows.\n\nConsider a $1 \\times m$ strip, where all cells initially have darkness $0$. You want to transform it into a strip where the color at the $i$-th position has darkness $b_i$. You can perform the following operation, which consists of two steps:\n\n1. Fold the paper at any line between two cells. You may fold as many times as you like, or choose not to fold at all.\n2. Choose one position to drop the black dye. The dye permeates from the top and flows down to the bottom, increasing the darkness of all cells in its path by $1$. After dropping the dye, you unfold the strip.\n\nLet $f(b)$ be the minimum number of operations required to achieve the desired configuration. It can be proven that the goal can always be achieved in a finite number of operations.\n\nYou are given an array $a$ of length $n$. Evaluate\n\n\n\n$$\\sum_{l=1}^n\\sum_{r=l}^n f(a_l a_{l+1} \\ldots a_r)$$\n\nmodulo $998\\,244\\,353$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\leq n \\leq 2 \\cdot 10^5$) — the length of the array $a$.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\leq a_i \\leq 10^9$) — denoting the array $a$.\n\nIt is guaranteed that the sum of all values of $n$ across all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the required sum modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3\n\n0 1 0\n\n6\n\n1 0 0 1 2 1\n\n5\n\n2 1 2 4 3\n\n12\n\n76 55 12 32 11 45 9 63 88 83 32 6\n\n```\n\n#### Output #1\n\n```\n4\n28\n47\n7001\n```\n\n### Note\n\nIn the first test case,\n\n- $f(a_1)=f(\\mathtt{0})=0$\n- $f(a_1a_2)=f(\\mathtt{01})=1$\n- $f(a_1a_2a_3)=f(\\mathtt{010})=1$\n- $f(a_2)=f(\\mathtt{1})=1$\n- $f(a_2a_3)=f(\\mathtt{10})=1$\n- $f(a_3)=f(\\mathtt{0})=0$\n\nThis sums up to $0+1+1+1+1+0 = 4$\n\nIn the second test case, $f(a_1a_2a_3a_4a_5a_6) = 2$. Here's one possible sequence of operations.\n\n![](https://espresso.codeforces.com/7e858937391c04751be3558a4470a2f30d2bd683.png)", "cfid": "2077E"}
{"problem_id": "2071F", "problem_title": "F. Towering Arrays", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2071/F", "problem_statement": "An array $b = [b_1, b_2, \\ldots, b_m]$ of length $m$ is called $p$-towering if there exists an index $i$ ($1\\\\le i\\\\le m$) such that for every index $j$ ($1 \\\\le j \\\\le m$), the following condition holds: \n\n$$b_j \\ge p - |i - j|.$$\n\nGiven an array $a = [a_1, a_2, \\ldots, a_n]$ of length $n$, you can remove at most $k$ elements from it. Determine the maximum value of $p$ for which the remaining array can be made $p$-towering.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $k$ ($0 \\le k < n \\le 2 \\cdot 10^5$).\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the maximum value of $p$ for which the remaining array can be made $p$-towering.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n5 0\n\n2 1 4 5 2\n\n5 3\n\n2 1 4 5 2\n\n6 1\n\n1 2 3 4 5 1\n\n11 6\n\n6 3 8 5 8 3 2 1 2 7 1\n\n14 3\n\n3 2 3 5 5 2 6 7 4 8 10 1 8 9\n\n2 0\n\n1 1\n\n```\n\n#### Output #1\n\n```\n3\n5\n5\n7\n9\n1\n```\n\n### Note\n\nIn the first test case, you cannot delete any element. The array remains $[2, 1, 4, \\color{red}{5}, 2]$ and is p-towering for $p = 3$ by picking $i = 4$:\n\n- $a_1 = 2 \\ge p - |i - 1| = 3 - |4 - 1| = 0$;\n- $a_2 = 1 \\ge p - |i - 2| = 3 - |4 - 2| = 1$;\n- $a_3 = 4 \\ge p - |i - 3| = 3 - |4 - 3| = 2$;\n- $a_4 = 5 \\ge p - |i - 4| = 3 - |4 - 4| = 3$;\n- $a_5 = 2 \\ge p - |i - 5| = 3 - |4 - 5| = 2$.\n\nIn the second test case, you can remove the first, second, and fifth elements to obtain the array $[4, \\color{red}{5}]$. Clearly, the obtained array is p-towering for $p = 5$ by picking $i = 2$.", "cfid": "2071F"}
{"problem_id": "2071E", "problem_title": "E. LeaFall", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2071/E", "problem_statement": "You are given a tree$^{\\text{∗}}$ with $n$ vertices. Over time, each vertex $i$ ($1 \\le i \\le n$) has a probability of $\\frac{p_i}{q_i}$ of falling. Determine the expected value of the number of unordered pairs$^{\\text{†}}$ of distinct vertices that become leaves$^{\\text{‡}}$ in the resulting forest$^{\\text{§}}$, modulo $998\\,244\\,353$.\n\nNote that when vertex $v$ falls, it is removed along with all edges connected to it. However, adjacent vertices remain unaffected by the fall of $v$.\n\n$^{\\text{∗}}$A tree is a connected graph without cycles.\n\n$^{\\text{†}}$An unordered pair is a collection of two elements where the order in which the elements appear does not matter. For example, the unordered pair $(1, 2)$ is considered the same as $(2, 1)$.\n\n$^{\\text{‡}}$A leaf is a vertex that is connected to exactly one edge.\n\n$^{\\text{§}}$A forest is a graph without cycles\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 10^5$).\n\nThe $i$-th line of the following $n$ lines contains two integers $p_i$ and $q_i$ ($1 \\le p_i < q_i < 998\\,244\\,353$).\n\nEach of the following $n - 1$ lines contains two integers $u$ and $v$ ($1 \\le u, v \\le n$, $u \\neq v$) — the indices of the vertices connected by an edge.\n\nIt is guaranteed that the given edges form a tree.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, output a single integer — the expected value of the number of unordered pairs of distinct vertices that become leaves in the resulting forest modulo $998\\,244\\,353$.\n\nFormally, let $M = 998\\,244\\,353$. It can be shown that the exact answer can be expressed as an irreducible fraction $\\frac{p}{q}$, where $p$ and $q$ are integers and $q \\not \\equiv 0 \\pmod{M}$. Output the integer equal to $p \\cdot q^{-1} \\bmod M$. In other words, output such an integer $x$ that $0 \\le x < M$ and $x \\cdot q \\equiv p \\pmod{M}$.\n\n### Examples\n\n#### Input #1\n\n```\n\n5\n\n1\n\n1 2\n\n3\n\n1 2\n\n1 2\n\n1 2\n\n1 2\n\n2 3\n\n3\n\n1 3\n\n1 5\n\n1 3\n\n1 2\n\n2 3\n\n1\n\n998244351 998244352\n\n6\n\n10 17\n\n7 13\n\n6 11\n\n2 10\n\n10 19\n\n5 13\n\n4 3\n\n3 6\n\n1 4\n\n3 5\n\n3 2\n\n```\n\n#### Output #1\n\n```\n0\n623902721\n244015287\n0\n799215919\n```\n\n#### Input #2\n\n```\n\n1\n\n10\n\n282508078 551568452\n\n894311255 989959022\n\n893400641 913415297\n\n460925436 801908985\n\n94460427 171411253\n\n997964895 998217862\n\n770266391 885105593\n\n591419316 976424827\n\n606447024 863339056\n\n940224886 994244553\n\n9 5\n\n9 6\n\n9 8\n\n8 7\n\n3 6\n\n1 5\n\n7 4\n\n8 10\n\n4 2\n\n```\n\n#### Output #2\n\n```\n486341067\n```\n\n### Note\n\nIn the first test case, only one vertex is in the tree, which is not a leaf, so the answer is $0$.\n\nIn the second test case, the tree is shown below.\n\n![](https://espresso.codeforces.com/9b426d5475e2fee4907b1e7338b4334f54af90cb.png)\n\nVertices that have not fallen are denoted in bold. Let us examine the following three cases:\n\n![](https://espresso.codeforces.com/9b40ca8f13ed11e12e6e3d8e059804452ec32139.png)We arrive at this configuration with a probability of $\\left( \\frac{1}{2} \\right) ^3$, where the only unordered pair of distinct leaf vertices is $(2, 3)$.![](https://espresso.codeforces.com/083f0c9b83880b52a1480065864772b47b3f9a0a.png)We arrive at this configuration with a probability of $\\left( \\frac{1}{2} \\right) ^3$, where the only unordered pair of distinct leaf vertices is $(2, 1)$.![](https://espresso.codeforces.com/99f29f0761292ed246a7a79eb3b9f64daf3be141.png)We arrive at this configuration with a probability of $\\left( \\frac{1}{2} \\right) ^3$, where the only unordered pair of distinct leaf vertices is $(1, 3)$.\n\nAll remaining cases contain no unordered pairs of distinct leaf vertices. Hence, the answer is $\\frac{1 + 1 + 1}{8} = \\frac{3}{8}$, which is equal to $623\\,902\\,721$ modulo $998\\,244\\,353$.", "cfid": "2071E"}
{"problem_id": "2071D2", "problem_title": "D2. Infinite Sequence (Hard Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2071/D2", "problem_statement": "This is the hard version of the problem. The difference between the versions is that in this version, $l\\le r$. You can hack only if you solved all versions of this problem.\n\nYou are given a positive integer $n$ and the first $n$ terms of an infinite binary sequence $a$, which is defined as follows:\n\n- For $m>n$, $a\\_m = a\\_1 \\\\oplus a\\_2 \\\\oplus \\\\ldots \\\\oplus a\\_{\\\\lfloor \\\\frac{m}{2} \\\\rfloor}$$^{\\\\text{∗}}$.\n\nYour task is to compute the sum of elements in a given range $[l, r]$: $a_l + a_{l + 1} + \\ldots + a_r$.\n\n$^{\\\\text{∗}}$$\\\\oplus$ denotes the bitwise XOR operation.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n$, $l$, and $r$ ($1 \\le n \\le 2 \\cdot 10^5$, $1 \\le l \\leq r \\le 10^{18}$).\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($\\color{red}{a_i \\in \\{0, 1\\}}$) — the first $n$ terms of the sequence $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the sum of elements in the given range.\n\n### Example\n\n#### Input #1\n\n```\n\n9\n\n1 1 1\n\n1\n\n2 3 10\n\n1 0\n\n3 5 25\n\n1 1 1\n\n1 234 567\n\n0\n\n5 1111 10000000000\n\n1 0 1 0 1\n\n1 1000000000000000000 1000000000000000000\n\n1\n\n10 41 87\n\n0 1 1 1 1 1 1 1 0 0\n\n12 65 69\n\n1 0 0 0 0 1 0 1 0 1 1 0\n\n13 46 54\n\n0 1 0 1 1 1 1 1 1 0 1 1 1\n\n```\n\n#### Output #1\n\n```\n1\n5\n14\n0\n6666665925\n0\n32\n3\n2\n```\n\n### Note\n\nIn the first test case, the sequence $a$ is equal to \n\n$$[\\underline{\\color{red}{1}}, 1, 1, 0, 0, 1, 1, 1, 1, 1, \\ldots]$$\n\nwhere $l = 1$, and $r = 1$. The sum of elements in the range $\\[1, 1\\]$ is equal to \n\n$$a_1 = 1.$$\n\nIn the second test case, the sequence $a$ is equal to \n\n$$[\\color{red}{1}, \\color{red}{0}, \\underline{1, 1, 1, 0, 0, 1, 1, 0}, \\ldots]$$\n\nwhere $l = 3$, and $r = 10$. The sum of elements in the range $\\[3, 10\\]$ is equal to \n\n$$a_3 + a_4 + \\ldots + a_{10} = 1 + 1 + 1 + 0 + 0 + 1 + 1 + 0 = 5.$$\n\n", "cfid": "2071D2"}
{"problem_id": "2070F", "problem_title": "F. Friends and Pizza", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2070/F", "problem_statement": "Monocarp has $n$ pizzas, the $i$-th pizza consists of $a_i$ slices. Pizzas are denoted by uppercase Latin letters from A to the $n$-th letter of the Latin alphabet.\n\nMonocarp also has $m$ friends, and he wants to invite exactly two of them to eat pizza. For each friend, Monocarp knows which pizzas that friend likes.\n\nAfter the friends arrive at Monocarp's house, for each pizza, the following happens:\n\n- if the pizza is not liked by any of the two invited friends, Monocarp eats it;\n- if the pizza is liked by exactly one of the two invited friends, that friend eats it;\n- and if the pizza is liked by both friends, they try to split it. If it consists of an even number of slices, they both eat exactly half of the slices. But if the pizza consists of an odd number of slices, they start quarrelling, trying to decide who will eat an extra slice — and Monocarp doesn't like that.\n\nFor each $k$ from $0$ to $\\sum a_i$, calculate the number of ways to choose exactly two friends to invite so that the friends don't quarrel, and Monocarp eats exactly $k$ slices.\n\n### Input\n\nThe first line contains two integers $n$ and $m$ ($1 \\le n \\le 20$; $2 \\le m \\le 5 \\cdot 10^5$) — the number of pizzas and the number of friends, respectively.\n\nThe second line contains $m$ strings $s_1, s_2, \\dots, s_m$ ($1 \\le |s_i| \\le n$), where $s_i$ is a string consisting of distinct characters from A to the $n$-th letter of the Latin alphabet, denoting which pizzas the $i$-th friend likes. In every string $s_i$, the characters are sorted in lexicographical (alphabetic) order.\n\nThe third line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 2 \\cdot 10^4$) — the sizes of the pizzas.\n\n### Output\n\nPrint $\\sum a_i + 1$ integers, where the $k$-th integer (starting from $0$) should be the number of ways to choose exactly two friends to invite so that the friends don't quarrel, and Monocarp eats exactly $k$ slices.\n\n### Example\n\n#### Input #1\n\n```\n\n3 6\n\nA AB ABC AB BC C\n\n2 3 5\n\n```\n\n#### Output #1\n\n```\n4 0 0 1 0 2 0 0 0 0 0\n```\n\n### Note\n\nLet's consider all pairs of friends from the first example:\n\n- if Monocarp invites friends $1$ and $2$, they will eat pizzas $1$ and $2$, and he'll eat the $3$-rd pizza;\n- if Monocarp invites friends $1$ and $3$, they will eat all of the pizzas;\n- if Monocarp invites friends $1$ and $4$, they will eat pizzas $1$ and $2$, and he'll eat the $3$-rd pizza;\n- if Monocarp invites friends $1$ and $5$, they will eat all of the pizzas;\n- if Monocarp invites friends $1$ and $6$, they will eat pizzas $1$ and $3$, and he'll eat the $2$-nd pizza;\n- if Monocarp invites friends $2$ and $3$, they will quarrel because of the $2$-nd pizza;\n- if Monocarp invites friends $2$ and $4$, they will quarrel because of the $2$-nd pizza;\n- if Monocarp invites friends $2$ and $5$, they will quarrel because of the $2$-nd pizza;\n- if Monocarp invites friends $2$ and $6$, they will eat all of the pizzas;\n- if Monocarp invites friends $3$ and $4$, they will quarrel because of the $2$-nd pizza;\n- if Monocarp invites friends $3$ and $5$, they will quarrel because of the $2$-nd pizza;\n- if Monocarp invites friends $3$ and $6$, they will quarrel because of the $3$-rd pizza;\n- if Monocarp invites friends $4$ and $5$, they will quarrel because of the $2$-nd pizza;\n- if Monocarp invites friends $4$ and $6$, they will eat all of the pizzas;\n- if Monocarp invites friends $5$ and $6$, they will quarrel because of the $3$-rd pizza.", "cfid": "2070F"}
{"problem_id": "2070E", "problem_title": "E. Game with Binary String", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2070/E", "problem_statement": "Consider the following game. Two players have a binary string (a string consisting of characters 0 and/or 1). The players take turns, the first player makes the first turn. During a player's turn, he or she has to choose exactly two adjacent elements of the string and remove them (the first element and the last element are also considered adjacent). Furthermore, there are additional constraints depending on who makes the move:\n\n- if it's the first player's move, both chosen characters should be 0;\n- if it's the second player's move, at least one of the chosen characters should be 1.\n\nThe player who can't make a valid move loses the game. This also means that if the string currently has less than $2$ characters, the current player loses the game.\n\nYou are given a binary string $s$ of length $n$. You have to calculate the number of its substrings such that, if the game is played on that substring and both players make optimal decisions, the first player wins. In other words, calculate the number of pairs $(l, r)$ such that $1 \\le l \\le r \\le n$ and the first player has a winning strategy on the string $s_l s_{l+1} \\dots s_r$.\n\n### Input\n\nThe first line contains one integer $n$ ($1 \\le n \\le 3 \\cdot 10^5$).\n\nThe second line contains the string $s$, consisting of exactly $n$ characters. Each character of the string is either 0 or 1.\n\n### Output\n\nPrint one integer — the number of substrings such that, if the game is played on that substring, the first player wins.\n\n### Example\n\n#### Input #1\n\n```\n\n10\n\n0010010011\n\n```\n\n#### Output #1\n\n```\n12\n```\n\n### Note\n\nIn the first example, the following substrings are winning for the first player ($s[l:r]$ denotes $s_l s_{l+1} \\dots s_r$):\n\n- $s[1:2]$;\n- $s[1:3]$;\n- $s[1:7]$;\n- $s[2:4]$;\n- $s[2:8]$;\n- $s[3:5]$;\n- $s[4:5]$;\n- $s[4:6]$;\n- $s[5:7]$;\n- $s[6:8]$;\n- $s[7:8]$;\n- $s[7:9]$.", "cfid": "2070E"}
{"problem_id": "2072G", "problem_title": "G. I've Been Flipping Numbers for 300 Years and Calculated the Sum", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2072/G", "problem_statement": "After three hundred years of slime farming, Akito finally obtained the magical number $n$. Upon reaching the merchant, he wanted to exchange the number for gold, but the merchant gave the hero a quest.\n\nThe merchant said that for the quest, the skill $\\text{rev}(n, p)$ would be required, which Akito, by happy coincidence, had recently learned. $\\text{rev}(n, p)$ represents the following procedure:\n\n1. Write the number $n$ in base $p$, let this representation be $n = \\overline{n_{\\ell - 1} \\ldots n_1 n_0}$, where $\\ell$ is the length of the base $p$ representation of the number $n$.\n2. Reverse the base $p$ representation, let this be $m = \\overline{n_0 n_1 \\ldots n_{\\ell - 1}}$.\n3. Convert the number $m$ back to decimal and return it as the result.\n\nThe merchant's quest was to calculate the sum $x = \\sum\\limits_{p = 2}^{k} \\text{rev}(n, p)$. Since this number can be quite large, only the remainder of $x$ when divided by $10^9 + 7$ is required. The merchant also mentioned that the previous traveler had been calculating this sum for three hundred years and had not finished it. But you will help Akito finish it faster, right?\n\n### Input\n\nThe first line contains the number $t$ ($1 \\le t \\le 5000$) — the number of test cases.\n\nIn the only line of each test case, two numbers $n$ and $k$ are given ($1 \\le n \\le 3 \\cdot 10^5, 2 \\le k \\le 10^{18}$) — the magical number and the upper limit for summation.\n\nNote that the sum of $n$ across all test cases is not bounded.\n\n### Output\n\nFor each test case, you need to output a single number — the remainder of $x = \\sum\\limits_{p = 2}^{k} \\text{rev}(n, p)$ when divided by $10^9 + 7$.\n\n### Example\n\n#### Input #1\n\n```\n\n12\n\n3 2\n\n42 52\n\n1 10\n\n4 4\n\n16 2\n\n69 69\n\n9 3\n\n19 84\n\n9982 44353\n\n100000 1000000007\n\n17 30\n\n777 1000000000000000000\n\n```\n\n#### Output #1\n\n```\n3\n7594\n9\n6\n1\n33471\n10\n2006\n120792461\n584502117\n775\n46058362\n```\n\n### Note\n\nIn the third test case, $n = 1$. The number one in any numeral system is represented by a single digit, which means $\\text{rev}(1, p) = 1$ for any $p \\ge 2$. Thus, $x = \\sum\\limits_{p = 2}^{k} 1 = \\sum\\limits_{p = 2}^{10} 1 = 10 - 2 + 1 = 9$.\n\nIn the fourth test case, $x = \\text{rev}(4, 2) + \\text{rev}(4, 3) + \\text{rev}(4, 4)$. Let's calculate each term:\n\n- $4 = 100_2 \\rightarrow \\text{rev}(4, 2) = 001_2 = 1$\n- $4 = 11_3 \\rightarrow \\text{rev}(4, 3) = 11_3 = 4$\n- $4 = 10_4 \\rightarrow \\text{rev}(4, 4) = 01_4 = 1$\n\nThus, $x = 1 + 4 + 1 = 6$.\n\nIn the seventh test case, $x = \\text{rev}(9, 2) + \\text{rev}(9, 3)$. Let's calculate each term:\n\n- $9 = 1001_2 \\rightarrow \\text{rev}(9, 2) = 1001_2 = 9$\n- $9 = 100_3 \\rightarrow \\text{rev}(9, 3) = 001_3 = 1$\n\nThus, $x = 9 + 1 = 10$.", "cfid": "2072G"}
{"problem_id": "2069E", "problem_title": "E. A, B, AB and BA", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2069/E", "problem_statement": "You are given a string $s$ consisting of characters A and B.\n\nYour task is to split it into blocks of length $1$ and $2$ in such a way that\n\n- there are no more than $a$ strings equal to \"A\";\n- there are no more than $b$ strings equal to \"B\";\n- there are no more than $ab$ strings \"AB\";\n- there are no more than $ba$ strings \"BA\";\n\nStrings \"AA\" and \"BB\" are prohibited. Each character of the initial string $s$ should belong to exactly one block.\n\n### Input\n\nThe first line contains one integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. Next, $t$ independent cases follow.\n\nThe first line of each test case contains a single string $s$ ($1 \\le |s| \\le 5 \\cdot 10^5$) consisting only of characters A and/or B.\n\nThe second line of each test case contains four integers $a$, $b$, $ab$, and $ba$ ($0 \\le a, b, ab, ba \\le 5 \\cdot 10^5$) — the maximum allowed number of strings \"A\", \"B\", \"AB\", and \"BA\" correspondingly.\n\nIt's guaranteed that the total length of $s$ doesn't exceed $5 \\cdot 10^5$ over all test cases.\n\n### Output\n\nFor each test case, print YES if it's possible to split string $s$. Otherwise, print NO.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\nA\n\n0 0 10 10\n\nB\n\n0 1 0 0\n\nABA\n\n0 0 1 1\n\nABBABAAB\n\n5 5 0 0\n\nABABBAABBAAB\n\n1 1 2 3\n\nABBBBAB\n\n0 3 2 0\n\nBAABBA\n\n1 3 2 0\n\n```\n\n#### Output #1\n\n```\nNO\nYES\nNO\nYES\nYES\nYES\nNO\n```\n\n### Note\n\nIn the third test case, all possible splits are: A\\|B\\|A, AB\\|A or A\\|BA. All of them have at least one \"A\".\n\nIn the fourth test case, one of the possible splits is the following: A\\|B\\|B\\|A\\|B\\|A\\|A\\|B.\n\nIn the fifth test case, one of the possible splits is the following: A\\|BA\\|B\\|BA\\|AB\\|BA\\|AB.", "cfid": "2069E"}
{"problem_id": "2069F", "problem_title": "F. Graph Inclusion", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2069/F", "problem_statement": "A connected component of an undirected graph is defined as a set of vertices $S$ of this graph such that:\n\n- for every pair of vertices $(u, v)$ in $S$, there exists a path between vertices $u$ and $v$;\n- there is no vertex outside $S$ that has a path to a vertex within $S$.\n\nFor example, the graph in the picture below has three components: $\\{1, 3, 7, 8\\}$, $\\{2\\}$, $\\{4, 5, 6\\}$.\n\n![](https://espresso.codeforces.com/7715b47246248fe80ce09cff1f675d0918eda77e.png)\n\nWe say that graph $A$ includes graph $B$ if every component of graph $B$ is a subset of some component of graph $A$.\n\nYou are given two graphs, $A$ and $B$, both consisting of $n$ vertices numbered from $1$ to $n$. Initially, there are no edges in the graphs. You must process queries of two types:\n\n- add an edge to one of the graphs;\n- remove an edge from one of the graphs.\n\nAfter each query, you have to calculate the minimum number of edges that have to be added to $A$ so that $A$ includes $B$, and print it. Note that you don't actually add these edges, you just calculate their number.\n\n### Input\n\nThe first line contains two integers $n$ and $q$ ($2 \\le n \\le 4 \\cdot 10^5$; $1 \\le q \\le 4 \\cdot 10^5$) — the number of vertices and queries, respectively.\n\nNext, there are $q$ lines, where the $i$-th line describes the $i$-th query. The description of the query begins with the character $c_i$ (either A or B) — the graph to which the query should be applied. Then, two integers $x_i$ and $y_i$ follow ($1 \\le x_i, y_i \\le n$; $x_i \\ne y_i$). If there is an edge $(x_i, y_i)$ in the corresponding graph, it should be removed; otherwise, it should be added to that graph.\n\n### Output\n\nFor each query, print one integer — the minimum number of edges that you have to add to the graph $A$ so that it includes $B$.\n\n### Example\n\n#### Input #1\n\n```\n\n6 9\n\nA 2 3\n\nB 1 3\n\nA 2 1\n\nA 3 2\n\nB 5 6\n\nA 6 5\n\nA 3 4\n\nA 4 2\n\nA 4 3\n\n```\n\n#### Output #1\n\n```\n0\n1\n0\n1\n2\n1\n1\n0\n1\n```", "cfid": "2069F"}
{"problem_id": "2064D", "problem_title": "D. Eating", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2064/D", "problem_statement": "There are $n$ slimes on a line, the $i$-th of which has weight $w\\_i$. Slime $i$ is able to eat another slime $j$ if $w\\_i \\\\geq w\\_j$; afterwards, slime $j$ disappears and the weight of slime $i$ becomes $w\\_i \\\\oplus w\\_j$$^{\\\\text{∗}}$.\n\nThe King of Slimes wants to run an experiment with parameter $x$ as follows:\n\n- Add a new slime with weight $x$ to the right end of the line (after the $n$-th slime).\n- This new slime eats the slime to its left if it is able to, and then takes its place (moves one place to the left). It will continue to do this until there is either no slime to its left or the weight of the slime to its left is greater than its own weight. (No other slimes are eaten during this process.)\n- The score of this experiment is the total number of slimes eaten.\n\nThe King of Slimes is going to ask you $q$ queries. In each query, you will be given an integer $x$, and you need to determine the score of the experiment with parameter $x$.\n\nNote that the King does not want you to actually perform each experiment; his slimes would die, which is not ideal. He is only asking what the hypothetical score is; in other words, the queries are not persistent.\n\n$^{\\text{∗}}$Here $\\oplus$ denotes the [bitwise XOR operation](https://en.wikipedia.org/wiki/Bitwise_operation#XOR).\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains integers $n$ and $q$ ($1 \\le n, q \\le 2 \\cdot 10^5$) — the number of slimes and the number of queries, respectively.\n\nThe following line contains $n$ integers $w_1,w_2,\\ldots,w_n$ ($1 \\le w_i < 2^{30}$) — the weights of the slimes.\n\nThe following $q$ lines contain a single integer $x$ ($ 1 \\le x < 2^{30}$) — the parameter for the experiment.\n\nThe sum of $n$ does not exceed $2 \\cdot 10^5$ and the sum of $q$ does not exceed $2 \\cdot 10^5$ across all test cases.\n\n### Output\n\nFor each query, output a single integer — the score of the experiment.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n1 1\n\n5\n\n6\n\n4 4\n\n1 5 4 11\n\n8\n\n13\n\n16\n\n15\n\n10 9\n\n10 4 3 9 7 4 6 1 9 4\n\n2\n\n6\n\n5\n\n6\n\n9\n\n8\n\n6\n\n2\n\n7\n\n```\n\n#### Output #1\n\n```\n1\n0 2 4 2\n0 1 1 1 3 3 1 0 1\n```\n\n### Note\n\nFor the first query of the second testcase:\n\n- A slime of weight $8$ would be added to the end, so $w = [1, 5, 4, 11, \\color{red}8]$.\n- The added slime has smaller weight than the slime to its left so it cannot eat it, and thus ends the process after eating no slimes with score $0$.\n\nFor the second query of the second testcase:\n\n- A slime of weight $13$ would be added to the end, so $w = [1, 5, 4, 11, \\color{red}{13}]$.\n- The added slime has bigger weight than the slime to its left, and so it will eat it. Its weight will become $13 \\oplus 11 = 6$. Now $w = [1, 5, 4, \\color{red}{6}]$.\n- The added slime will now eat the slime to its left, and its weight becomes $6 \\oplus 4 = 2$. Now $w = [1, 5, \\color{red}{2}]$.\n- The added slime is no longer able to eat the slime to its left, so it ends the process with a score of $2$.", "cfid": "2064D"}
{"problem_id": "2064E", "problem_title": "E. Mycraft Sand Sort", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2064/E", "problem_statement": "Steve has a permutation$^{\\text{∗}}$ $p$ and an array $c$, both of length $n$. Steve wishes to sort the permutation $p$.\n\nSteve has an infinite supply of coloured sand blocks, and using them he discovered a physics-based way to sort an array of numbers called gravity sort. Namely, to perform gravity sort on $p$, Steve will do the following:\n\n- For all $i$ such that $1 \\le i \\le n$, place a sand block of color $c_i$ in position $(i, j)$ for all $j$ where $1 \\le j \\le p_i$. Here, position $(x, y)$ denotes a cell in the $x$-th row from the top and $y$-th column from the left.\n- Apply downwards gravity to the array, so that all sand blocks fall as long as they can fall.\n\n![](https://espresso.codeforces.com/bc9da7db75c1cd76ae4b448579a882a11a989364.png)An example of gravity sort for the third testcase. $p = [4, 2, 3, 1, 5]$, $c = [2, 1, 4, 1, 5]$\n\nAlex looks at Steve's sand blocks after performing gravity sort and wonders how many pairs of arrays $(p',c')$ where $p'$ is a permutation would have resulted in the same layout of sand. Note that the original pair of arrays $(p, c)$ will always be counted.\n\nPlease calculate this for Alex. As this number could be large, output it modulo $998\\,244\\,353$.\n\n$^{\\text{∗}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is a $4$ in the array).\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each testcase contains an integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) — the lengths of the arrays.\n\nThe second line of each testcase contains $n$ distinct integers $p_1,p_2,\\ldots,p_n$ ($1 \\le p_i \\le n$) — the elements of $p$.\n\nThe following line contains $n$ integers $c_1,c_2,\\ldots,c_n$ ($1 \\le c_i \\le n$) — the elements of $c$.\n\nThe sum of $n$ across all testcases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each testcase, output the number of pairs of arrays $(p', c')$ Steve could have started with, modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n1\n\n1\n\n1\n\n5\n\n5 3 4 1 2\n\n1 1 1 1 1\n\n5\n\n4 2 3 1 5\n\n2 1 4 1 5\n\n40\n\n29 15 20 35 37 31 27 1 32 36 38 25 22 8 16 7 3 28 11 12 23 4 14 9 39 13 10 30 6 2 24 17 19 5 34 18 33 26 40 21\n\n3 1 2 2 1 2 3 1 1 1 1 2 1 3 1 1 3 1 1 1 2 2 1 3 3 3 2 3 2 2 2 2 1 3 2 1 1 2 2 2\n\n```\n\n#### Output #1\n\n```\n1\n120\n1\n143654893\n```\n\n### Note\n\nThe second test case is shown below.\n\n![](https://espresso.codeforces.com/0be3e1a1e38f8485a0af76fd4cafe659e8413522.png)Gravity sort of the second testcase.\n\nIt can be shown that permutations of $p$ will yield the same result, and that $c$ must equal $[1,1,1,1,1]$ (since all sand must be the same color), so the answer is $5! = 120$.\n\nThe third test case is shown in the statement above. It can be proven that no other arrays $p$ and $c$ will produce the same final result, so the answer is $1$.", "cfid": "2064E"}
{"problem_id": "2064F", "problem_title": "F. We Be Summing", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2064/F", "problem_statement": "You are given an array $a$ of length $n$ and an integer $k$.\n\nCall a non-empty array $b$ of length $m$ epic if there exists an integer $i$ where $1 \\le i < m$ and $\\min(b_1,\\ldots,b_i) + \\max(b_{i + 1},\\ldots,b_m) = k$.\n\nCount the number of epic subarrays$^{\\text{∗}}$ of $a$.\n\n$^{\\text{∗}}$An array $a$ is a subarray of an array $b$ if $a$ can be obtained from $b$ by the deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10^4$) — the number of testcases.\n\nThe first line of each testcase contains integers $n$ and $k$ ($2 \\le n \\le 2 \\cdot 10^5$; $n < k < 2 \\cdot n$) — the length of the array $a$ and $k$.\n\nThe second line of each testcase contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($1 \\le a_i \\le n$).\n\nThe sum of $n$ across all testcases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each testcase, output the number of epic contiguous subarrays of $a$.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n5 7\n\n1 2 3 4 5\n\n7 13\n\n6 6 6 6 7 7 7\n\n6 9\n\n4 5 6 6 5 1\n\n5 9\n\n5 5 4 5 5\n\n5 6\n\n3 3 3 3 3\n\n6 8\n\n4 5 4 5 4 5\n\n```\n\n#### Output #1\n\n```\n2\n12\n3\n8\n10\n4\n```\n\n### Note\n\nThese are all the epic subarrays in the first testcase:\n\n- $[2, 3, 4, 5]$, because $\\min(2, 3) + \\max(4, 5) = 2 + 5 = 7$.\n- $[3, 4]$, because $\\min(3) + \\max(4) = 3 + 4 = 7$.\n\nIn the second test case, every subarray that contains at least one $6$ and at least one $7$ is epic.", "cfid": "2064F"}
{"problem_id": "2066C", "problem_title": "C. Bitwise Slides", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2066/C", "problem_statement": "You are given an array $a_1, a_2, \\ldots, a_n$. Also, you are given three variables $P,Q,R$, initially equal to zero.\n\nYou need to process all the numbers $a_1, a_2, \\ldots, a_n$, in the order from $1$ to $n$. When processing the next $a_i$, you must perform exactly one of the three actions of your choice:\n\n1. $P := P \\oplus a_i$\n2. $Q := Q \\oplus a_i$\n3. $R := R \\oplus a_i$\n\n$\\oplus$ denotes the bitwise XOR operation.\n\nWhen performing actions, you must follow the main rule: it is necessary that after each action, all three numbers $P,Q,R$ are not pairwise distinct.\n\nThere are a total of $3^n$ ways to perform all $n$ actions. How many of them do not violate the main rule? Since the answer can be quite large, find it modulo $10^9 + 7$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains an integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) — the length of the array $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$) — the elements of the array $a$.\n\nIt is guaranteed that the sum of the values of $n$ for all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the number of ways to perform all $n$ actions without violating the main rule, modulo $10^9 + 7$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3\n\n1 7 9\n\n4\n\n179 1 1 179\n\n5\n\n1 2 3 3 2\n\n12\n\n8 2 5 3 9 1 8 12 9 9 9 4\n\n1\n\n1000000000\n\n```\n\n#### Output #1\n\n```\n3\n9\n39\n123\n3\n```\n\n### Note\n\nIn the first test case, there are 3 valid sequences of operations: PPP, QQQ, RRR.\n\nIn the second test case, there are 9 valid sequences of operations: PPPP, PPPQ, PPPR, QQQP, QQQQ, QQQR, RRRP, RRRQ, RRRR.", "cfid": "2066C"}
{"problem_id": "2066B", "problem_title": "B. White Magic", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2066/B", "problem_statement": "We call a sequence $a_1, a_2, \\ldots, a_n$ magical if for all $1 \\leq i \\leq n-1$ it holds that: $\\operatorname{min}(a_1, \\ldots, a_i) \\geq \\operatorname{mex}(a_{i+1}, \\ldots, a_n)$. In particular, any sequence of length $1$ is considered magical.\n\nThe minimum excluded (MEX) of a collection of integers $a_1, a_2, \\ldots, a_k$ is defined as the smallest non-negative integer $t$ which does not occur in the collection $a$.\n\nYou are given a sequence $a$ of $n$ non-negative integers. Find the maximum possible length of a magical subsequence$^{\\text{∗}}$ of the sequence $a$.\n\n$^{\\text{∗}}$A sequence $a$ is a subsequence of a sequence $b$ if $a$ can be obtained from $b$ by the deletion of several (possibly, zero or all) element from arbitrary positions.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains an integer $n$ ($1 \\leq n \\leq 2 \\cdot 10^5$) — the length of the sequence $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\leq a_i \\leq 10^9$) — the elements of the sequence $a$.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single number — the maximum possible length of a magical subsequence of the sequence $a$.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n5\n\n4 3 2 1 0\n\n6\n\n4 3 3 2 1 0\n\n4\n\n2 0 1 2\n\n1\n\n777\n\n4\n\n1000000000 1 7 9\n\n2\n\n0 1\n\n2\n\n1 2\n\n4\n\n0 1 0 1\n\n```\n\n#### Output #1\n\n```\n5\n5\n3\n1\n4\n2\n2\n3\n```\n\n### Note\n\nIn the first test case, the sequence $[4, 3, 2, 1, 0]$ is magical, since:\n\n- $\\operatorname{min}(4) = 4, \\operatorname{mex}(3, 2, 1, 0) = 4$. $4 \\geq 4$\n- $\\operatorname{min}(4, 3) = 3, \\operatorname{mex}(2, 1, 0) = 3$. $3 \\geq 3$\n- $\\operatorname{min}(4, 3, 2) = 2, \\operatorname{mex}(1, 0) = 2$. $2 \\geq 2$\n- $\\operatorname{min}(4, 3, 2, 1) = 1, \\operatorname{mex}(0) = 1$. $1 \\geq 1$\n\nIn the second test case, the sequence $[4, 3, 3, 2, 1, 0]$ is not magical, since $\\operatorname{min}(4, 3) = 3, \\operatorname{mex}(3, 2, 1, 0) = 4$, $3 < 4$. However, the subsequence $[4, 3, 2, 1, 0]$ of this sequence is magical, so the answer is $5$.", "cfid": "2066B"}
{"problem_id": "2066D2", "problem_title": "D2. Club of Young Aircraft Builders (hard version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2066/D2", "problem_statement": "This is the hard version of the problem. The difference between the versions is that in this version, not necessary $a_i = 0$. You can hack only if you solved all versions of this problem.\n\nThere is a building with $n$ floors, numbered from $1$ to $n$ from bottom to top. There is exactly one person living on each floor.\n\nAll the residents of the building have an important goal today: to launch at least $c$ paper airplanes collectively. The residents will launch the airplanes in turn. When a person from the $i$-th floor launches an airplane, all residents on floors from $1$ to $i$ can see it as it descends to the ground. If, from the perspective of the resident on the $i$-th floor, at least $c$ airplanes have already been launched, they will no longer launch airplanes themselves. It is also known that by the end of the day, from the perspective of each resident in the building, at least $c$ airplanes have been launched, and a total of $m$ airplanes were thrown.\n\nYou have been carefully monitoring this flash mob, and for each airplane, you recorded which resident from which floor threw it. Unfortunately, the information about who exactly threw some of the airplanes has been lost. Find the number of ways to fill in the gaps so that the information could be credible. Since the answer could be quite large, output it modulo $10^9 + 7$.\n\nIt is also possible that you made a mistake in your records, and there is no possible way to restore the gaps. In that case, the answer is considered to be $0$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n, c, m$ ($1 \\le n \\le 100$, $1 \\le c \\le 100$, $c \\le m \\le n \\cdot c$) — the number of floors in the building, the minimum required number of airplanes, and the number of airplanes actually launched.\n\nThe second line of each test case contains $m$ integers $a_1, a_2, \\ldots, a_m$ ($0 \\le a_i \\le n$) — $a_i$ indicates the resident from which floor launched the $i$-th airplane; $a_i = 0$ indicates a gap.\n\nIt is guaranteed that the sum of the values of $m$ across all test cases does not exceed $10^4$.\n\n### Output\n\nFor each test case, output the number of ways to fill in the gaps with numbers from $1$ to $n$, so that the chronology of the airplane launches could be credible, modulo $10^9 + 7$.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n3 2 4\n\n0 0 0 0\n\n5 5 7\n\n0 0 0 0 0 0 0\n\n6 1 3\n\n2 0 0\n\n2 3 5\n\n0 0 1 0 2\n\n3 3 4\n\n3 3 3 0\n\n2 1 2\n\n0 1\n\n2 1 2\n\n0 2\n\n5 3 12\n\n0 0 1 0 2 4 0 0 0 5 0 5\n\n```\n\n#### Output #1\n\n```\n6\n190\n3\n2\n0\n0\n1\n14\n```\n\n### Note\n\nIn the first test example, all six possible ways to fill in the gaps are as follows:\n\n1. $[1, 1, 3, 3]$\n2. $[1, 2, 3, 3]$\n3. $[1, 3, 2, 3]$\n4. $[2, 1, 3, 3]$\n5. $[2, 2, 3, 3]$\n6. $[3, 1, 2, 3]$\n\nNote that the array $[2, 3, 1, 3]$ is not a valid way to fill in the gaps, as the third airplane could not have been launched by the person on the $1$st floor, since from their perspective, $c = 2$ airplanes had already been launched.\n\nAlso, the array $[1, 1, 2, 3]$ is not a valid way to fill in the gaps, as from the perspective of the person on the $3$rd floor, only $1$ airplane has been launched, while $c = 2$.", "cfid": "2066D2"}
{"problem_id": "2066D1", "problem_title": "D1. Club of Young Aircraft Builders (easy version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2066/D1", "problem_statement": "This is the easy version of the problem. The difference between the versions is that in this version, all $a_i = 0$. You can hack only if you solved all versions of this problem.\n\nThere is an $n$-story building, with floors numbered from $1$ to $n$ from bottom to top. There is exactly one person living on each floor.\n\nAll the residents of the building have a very important goal today: to launch at least $c$ paper airplanes collectively. The residents will launch the airplanes in turn. When a person from the $i$-th floor launches an airplane, all residents on the floors from $1$ to $i$ can see it as it descends to the ground.\n\nIf, from the perspective of the resident on the $i$-th floor, at least $c$ airplanes have already been launched, they will not launch any more airplanes themselves. It is also known that by the end of the day, from the perspective of each resident in the building, at least $c$ airplanes have been launched, and a total of $m$ airplanes were thrown.\n\nYou carefully monitored this flash mob and recorded which resident from which floor threw each airplane. Unfortunately, the information about who exactly threw some airplanes has been lost. Find the number of ways to fill in the gaps so that the information could be credible. Since the answer can be quite large, output it modulo $10^9 + 7$.\n\nIn this version of the problem, all information has been lost, and the entire array consists of gaps.\n\nIt is also possible that you made a mistake in your records, and there is no possible way to restore the gaps. In that case, the answer is considered to be $0$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n, c, m$ ($1 \\le n \\le 100$, $1 \\le c \\le 100$, $c \\le m \\le n \\cdot c$) — the number of floors in the building, the minimum required number of airplanes, and the number of airplanes actually launched.\n\nThe second line of each test case contains $m$ integers $a_1, a_2, \\ldots, a_m$ ($0 \\le a_i \\le n$) — $a_i$ indicates the resident from which floor launched the $i$-th airplane; $a_i = 0$ indicates a gap.\n\nIn this version of the problem, it is guaranteed that all $a_i = 0$.\n\nIt is guaranteed that the sum of the values of $m$ across all test cases does not exceed $10^4$.\n\n### Output\n\nFor each test case, output the number of ways to fill in the gaps with numbers from $1$ to $n$, so that the chronology of the airplane launches could be credible, modulo $10^9 + 7$.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n3 2 4\n\n0 0 0 0\n\n5 5 7\n\n0 0 0 0 0 0 0\n\n```\n\n#### Output #1\n\n```\n6\n190\n```\n\n### Note\n\nIn the first test example, all six possible ways to fill in the gaps are as follows:\n\n1. $[1, 1, 3, 3]$\n2. $[1, 2, 3, 3]$\n3. $[1, 3, 2, 3]$\n4. $[2, 1, 3, 3]$\n5. $[2, 2, 3, 3]$\n6. $[3, 1, 2, 3]$\n\nNote that the array $[2, 3, 1, 3]$ is not a valid way to fill in the gaps, as the third airplane could not have been launched by the person on the $1$st floor, since from their perspective, $c = 2$ airplanes had already been launched.\n\nAlso, the array $[1, 1, 2, 3]$ is not a valid way to fill in the gaps, as from the perspective of the person on the $3$rd floor, only $1$ airplane has been launched, while $c = 2$.", "cfid": "2066D1"}
{"problem_id": "2065H", "problem_title": "H. Bro Thinks He's Him", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2065/H", "problem_statement": "Skibidus thinks he's Him! He proved it by solving this difficult task. Can you also prove yourself?\n\nGiven a binary string$^{\\text{∗}}$ $t$, $f(t)$ is defined as the minimum number of contiguous substrings, each consisting of identical characters, into which $t$ can be partitioned. For example, $f(\\texttt{00110001}) = 4$ because $t$ can be partitioned as $\\texttt{[00][11][000][1]}$ where each bracketed segment consists of identical characters.\n\nSkibidus gives you a binary string $s$ and $q$ queries. In each query, a single character of the string is flipped (i.e. $\\texttt{0}$ changes to $\\texttt{1}$ and $\\texttt{1}$ changes to $\\texttt{0}$); changes are saved after the query is processed. After each query, output the sum over all $f(b)$ where $b$ is a non-empty subsequence$^{\\text{†}}$ of $s$, modulo $998\\,244\\,353$.\n\n$^{\\text{∗}}$A binary string consists of only characters $\\texttt{0}$ and $\\texttt{1}$.\n\n$^{\\text{†}}$A subsequence of a string is a string which can be obtained by removing several (possibly zero) characters from the original string.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe first line of each test case contains a binary string $s$ ($1 \\leq |s| \\leq 2 \\cdot 10^5$).\n\nThe following line of each test case contains an integer $q$ ($1 \\leq q \\leq 2 \\cdot 10^5$) — the number of queries.\n\nThe following line contains $q$ integers $v_1, v_2, \\ldots, v_q$ ($1 \\leq v_i \\leq |s|$), denoting $s_{v_i}$ is flipped for the $i$'th query.\n\nIt is guaranteed that the sum of $|s|$ and the sum of $q$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output $q$ integers on a single line — the answer after each query modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n101\n\n2\n\n1 3\n\n10110\n\n3\n\n1 2 3\n\n101110101\n\n5\n\n7 2 4 4 1\n\n```\n\n#### Output #1\n\n```\n10 7\n61 59 67\n1495 1169 1417 1169 1396\n```\n\n### Note\n\nIn the first test case, $s$ becomes $\\texttt{001}$ after the first query. Let's calculate the answer for each subsequence:\n\n- $f(s_1) = f(\\texttt{0}) = 1$\n- $f(s_2) = f(\\texttt{0}) = 1$\n- $f(s_3) = f(\\texttt{1}) = 1$\n- $f(s_1 s_2) = f(\\texttt{00}) = 1$\n- $f(s_1 s_3) = f(\\texttt{01}) = 2$\n- $f(s_2 s_3) = f(\\texttt{01}) = 2$\n- $f(s_1 s_2 s_3) = f(\\texttt{001}) = 2$\n\nThe sum of these values is $10$, modulo $998\\,244\\,353$.", "cfid": "2065H"}
{"problem_id": "2059D", "problem_title": "D. Graph and Graph", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2059/D", "problem_statement": "You are given two connected undirected graphs with the same number of vertices. In both graphs, there is a token located at some vertex. In the first graph, the token is initially at vertex $s_1$, and in the second graph, the token is initially at vertex $s_2$. The following operation is repeated an infinite number of times:\n\n- Let the token currently be at vertex $v_1$ in the first graph and at vertex $v_2$ in the second graph.\n- A vertex $u_1$, adjacent to $v_1$, is chosen in the first graph.\n- A vertex $u_2$, adjacent to $v_2$, is chosen in the second graph.\n- The tokens are moved to the chosen vertices: in the first graph, the token moves from $v_1$ to $u_1$, and in the second graph, from $v_2$ to $u_2$.\n- The cost of such an operation is equal to $|u_1 - u_2|$.\n\nDetermine the minimum possible total cost of all operations or report that this value will be infinitely large.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains one integer $t$ ($1 \\le t \\le 500$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains three integers $n$, $s_1$, and $s_2$ ($2 \\le n \\le 1000$, $1 \\le s_1, s_2 \\le n$) — the number of vertices in each graph, the number of the vertex in the first graph where the token is initially located, and the number of the vertex in the second graph where the token is initially located.\n\nThe second line of each test case contains one integer $m_1$ ($1 \\le m_1 \\le 1000$) — the number of edges in the first graph.\n\nThe $i$-th of the following $m_1$ lines contains two integers $a_i$ and $b_i$ ($1 \\le a_i, b_i \\le n$, $a_i \\ne b_i$) — the numbers of the endpoints of the $i$-th edge in the first graph.\n\nThe next line of each test case contains one integer $m_2$ ($1 \\le m_2 \\le 1000$) — the number of edges in the second graph.\n\nThe $j$-th of the following $m_2$ lines contains two integers $c_j$ and $d_j$ ($1 \\le c_j, d_j \\le n$, $c_j \\ne d_j$) — the numbers of the endpoints of the $j$-th edge in the second graph.\n\nIt is guaranteed that the sum of $n$, the sum of $m_1$, and the sum of $m_2$ over all test cases do not exceed $1000$.\n\nIt is guaranteed that both graphs are connected.\n\n### Output\n\nFor each test case, output one integer — the minimum total cost of all operations or $-1$, if this value will be infinitely large.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n4 1 1\n\n4\n\n1 2\n\n2 3\n\n3 4\n\n4 1\n\n4\n\n1 2\n\n2 3\n\n3 4\n\n4 1\n\n4 1 2\n\n4\n\n1 2\n\n2 3\n\n3 4\n\n4 1\n\n4\n\n1 2\n\n2 3\n\n3 4\n\n4 1\n\n7 7 2\n\n7\n\n1 6\n\n2 1\n\n3 2\n\n3 4\n\n5 1\n\n7 3\n\n7 5\n\n6\n\n5 1\n\n5 6\n\n5 7\n\n6 3\n\n7 2\n\n7 4\n\n```\n\n#### Output #1\n\n```\n0\n-1\n7\n```\n\n### Note\n\nIn the first test case, an infinite sequence of transitions can be constructed to the vertices $2, 3, 4, 1, 2, 3, 4, 1, \\ldots$, along which the token can move in both the first and the second graphs.\n\nIn the second test case, it can be proven that the cost of any operation will be greater than $0$; therefore, the total cost of all operations will be infinitely large.", "cfid": "2059D"}
{"problem_id": "2059E1", "problem_title": "E1. Stop Gaming (Easy Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2059/E1", "problem_statement": "This is the easy version of the problem. The difference between the versions is that in this version you only need to find the minimum number of operations. You can hack only if you solved all versions of this problem.\n\nYou are given $n$ arrays, each of which has a length of $m$. Let the $j$-th element of the $i$-th array be denoted as $a_{i, j}$. It is guaranteed that all $a_{i, j}$ are pairwise distinct. In one operation, you can do the following:\n\n- Choose some integer $i$ ($1 \\le i \\le n$) and an integer $x$ ($1 \\le x \\le 2 \\cdot n \\cdot m$).\n- For all integers $k$ from $i$ to $n$ in increasing order, do the following:\n1. Add the element $x$ to the beginning of the $k$-th array.\n\n2. Assign $x$ the value of the last element in the $k$-th array.\n\n3. Remove the last element from the $k$-th array.\n\nIn other words, you can insert an element at the beginning of any array, after which all elements in this and all following arrays are shifted by one to the right. The last element of the last array is removed.\n\nYou are also given a description of the arrays that need to be obtained after all operations. That is, after performing the operations, the $j$-th element of the $i$-th array should be equal to $b_{i, j}$. It is guaranteed that all $b_{i, j}$ are pairwise distinct.\n\nDetermine the minimum number of operations that need to be performed to obtain the desired arrays.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\le n, m \\le 3 \\cdot 10^5$) — the number of arrays and the number of elements in each array.\n\nThe $i$-th of the following $n$ lines contains $m$ integers $a_{i, 1}, a_{i, 2}, \\ldots, a_{i, m}$ ($1 \\le a_{i, j} \\le 2 \\cdot n \\cdot m$) — the elements of the $i$-th original array. It is guaranteed that all $a_{i, j}$ are pairwise distinct.\n\nThe $i$-th of the following $n$ lines contains $m$ integers $b_{i, 1}, b_{i, 2}, \\ldots, b_{i, m}$ ($1 \\le b_{i, j} \\le 2 \\cdot n \\cdot m$) — the elements of the $i$-th final array. It is guaranteed that all $b_{i, j}$ are pairwise distinct.\n\nIt is guaranteed that the sum of $n \\cdot m$ over all test cases does not exceed $3 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the minimum number of operations that need to be performed.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2 2\n\n2 6\n\n3 4\n\n1 2\n\n7 8\n\n1 5\n\n5 4 1 2 3\n\n5 4 3 2 1\n\n3 3\n\n1 2 3\n\n4 5 6\n\n7 8 9\n\n11 1 2\n\n12 3 4\n\n13 5 6\n\n4 4\n\n1 2 3 4\n\n5 6 7 8\n\n9 10 11 12\n\n13 14 15 16\n\n17 1 2 3\n\n4 18 5 6\n\n7 19 8 20\n\n9 21 22 10\n\n```\n\n#### Output #1\n\n```\n3\n5\n3\n6\n```\n\n### Note\n\nIn the first test case, the following sequence of $3$ operations is suitable:\n\n- Apply the operation to the first array with $x = 1$. Then the element $1$ will be added to the beginning of the first array, and the value of $x$ will become $6$. The last element will be removed, and the first array will look like $[1, 2]$. Next, the element $x$ is added to the beginning of the second array, and the value of $x$ becomes $4$. The last element of the second array is removed, and both arrays look like $[1, 2]$ and $[6, 3]$ respectively after the first operation.\n- Apply the operation to the second array with $x = 8$. Then the first array remains unchanged, and both arrays will look like $[1, 2]$ and $[8, 6]$ respectively.\n- Apply the operation to the second array with $x = 7$, then both arrays will have the required appearance $[1, 2]$ and $[7, 8]$ respectively.\n\nIn the second test case, the desired array can only be achieved in $5$ operations.\n\nIn the third test case, the following sequence of $3$ operations is suitable:\n\n- Apply the operation with $x = 11$ to the first array.\n- Apply the operation with $x = 12$ to the second array.\n- Apply the operation with $x = 13$ to the third array.", "cfid": "2059E1"}
{"problem_id": "2059E2", "problem_title": "E2. Stop Gaming (Hard Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2059/E2", "problem_statement": "This is the hard version of the problem. The difference between the versions is that in this version you need to output all the operations that need to be performed. You can hack only if you solved all versions of this problem.\n\nYou are given $n$ arrays, each of which has a length of $m$. Let the $j$-th element of the $i$-th array be denoted as $a_{i, j}$. It is guaranteed that all $a_{i, j}$ are pairwise distinct. In one operation, you can do the following:\n\n- Choose some integer $i$ ($1 \\le i \\le n$) and an integer $x$ ($1 \\le x \\le 2 \\cdot n \\cdot m$).\n- For all integers $k$ from $i$ to $n$ in increasing order, do the following:\n1. Add the element $x$ to the beginning of the $k$-th array.\n\n2. Assign $x$ the value of the last element in the $k$-th array.\n\n3. Remove the last element from the $k$-th array.\n\nIn other words, you can insert an element at the beginning of any array, after which all elements in this and all following arrays are shifted by one to the right. The last element of the last array is removed.\n\nYou are also given a description of the arrays that need to be obtained after all operations. That is, after performing the operations, the $j$-th element of the $i$-th array should be equal to $b_{i, j}$. It is guaranteed that all $b_{i, j}$ are pairwise distinct.\n\nDetermine the minimum number of operations that need to be performed to obtain the desired arrays, and also output the sequence of all operations itself.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\le n, m \\le 3 \\cdot 10^5$) — the number of arrays and the number of elements in each array.\n\nThe $i$-th of the following $n$ lines contains $m$ integers $a_{i, 1}, a_{i, 2}, \\ldots, a_{i, m}$ ($1 \\le a_{i, j} \\le 2 \\cdot n \\cdot m$) — the elements of the $i$-th original array. It is guaranteed that all $a_{i, j}$ are pairwise distinct.\n\nThe $i$-th of the following $n$ lines contains $m$ integers $b_{i, 1}, b_{i, 2}, \\ldots, b_{i, m}$ ($1 \\le b_{i, j} \\le 2 \\cdot n \\cdot m$) — the elements of the $i$-th final array. It is guaranteed that all $b_{i, j}$ are pairwise distinct.\n\nIt is guaranteed that the sum of $n \\cdot m$ over all test cases does not exceed $3 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the minimum number of operations that need to be performed.\n\nNext, for each operation output two integers $i$ and $x$ ($1 \\le i \\le n$, $1 \\le x \\le 2 \\cdot n \\cdot m$) — the index of the array where the element is inserted and the value of the element, respectively.\n\nIf there are multiple possible sequences with the minimum number of operations, output any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2 2\n\n2 6\n\n3 4\n\n1 2\n\n7 8\n\n1 5\n\n5 4 1 2 3\n\n5 4 3 2 1\n\n3 3\n\n1 2 3\n\n4 5 6\n\n7 8 9\n\n11 1 2\n\n12 3 4\n\n13 5 6\n\n4 4\n\n1 2 3 4\n\n5 6 7 8\n\n9 10 11 12\n\n13 14 15 16\n\n17 1 2 3\n\n4 18 5 6\n\n7 19 8 20\n\n9 21 22 10\n\n```\n\n#### Output #1\n\n```\n3\n1 1\n2 8\n2 7\n5\n1 1\n1 2\n1 3\n1 4\n1 5\n3\n1 11\n2 12\n3 13\n6\n3 20\n2 18\n3 19\n4 22\n4 21\n1 17\n```\n\n### Note\n\nIn the first test case, the following sequence of $3$ operations is suitable:\n\n- Apply the operation to the first array with $x = 1$. Then the element $1$ will be added to the beginning of the first array, and the value of $x$ will become $6$. The last element will be removed, and the first array will look like $[1, 2]$. Next, the element $x$ is added to the beginning of the second array, and the value of $x$ becomes $4$. The last element of the second array is removed, and both arrays look like $[1, 2]$ and $[6, 3]$ respectively after the first operation.\n- Apply the operation to the second array with $x = 8$. Then the first array remains unchanged, and both arrays will look like $[1, 2]$ and $[8, 6]$ respectively.\n- Apply the operation to the second array with $x = 7$, then both arrays will have the required appearance $[1, 2]$ and $[7, 8]$ respectively.\n\nIn the second test case, the desired array can only be achieved in $5$ operations.\n\nIn the third test case, the following sequence of $3$ operations is suitable:\n\n- Apply the operation with $x = 11$ to the first array.\n- Apply the operation with $x = 12$ to the second array.\n- Apply the operation with $x = 13$ to the third array.", "cfid": "2059E2"}
{"problem_id": "2062E2", "problem_title": "E2. The Game (Hard Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2062/E2", "problem_statement": "This is the hard version of the problem. The difference between the versions is that in this version, you need to find all possible nodes Cirno may choose. You can hack only if you solved all versions of this problem.\n\nCirno and Daiyousei are playing a game with a tree$^{\\text{∗}}$ of $n$ nodes, rooted at node $1$. The value of the $i$-th node is $w_i$. They take turns to play the game; Cirno goes first.\n\nIn each turn, assuming the opponent chooses $j$ in the last turn, the player can choose any remaining node $i$ satisfying $w_i>w_j$ and delete the subtree$^{\\text{†}}$ of node $i$. In particular, Cirno can choose any node and delete its subtree in the first turn.\n\nThe first player who can not operate wins, and they all hope to win. Find all possible nodes Cirno may choose in the first turn so that she wins if both of them play optimally.\n\n$^{\\text{∗}}$A tree is a connected graph without cycles.\n\n$^{\\text{†}}$Node $u$ is considered in the subtree of node $i$ if any path from $1$ to $u$ must go through $i$.\n\n### Input\n\nThe first line of input contains a single integer $t$ ($1 \\leq t \\leq 10^5$) — the number of input test cases.\n\nThe first line of each test case contains one integer $n$ ($1 \\le n \\le 4\\cdot 10^5$) — the number of nodes in the tree.\n\nThe second line contains $n$ integers $w_1,w_2,\\ldots,w_n$ ($1 \\le w_i \\le n$) — the value of each node.\n\nThe next $n-1$ lines contain the edges of the tree. The $i$-th line contains two integers $u_i,v_i$ ($1\\le u_i,v_i \\le n$, $u_i \\neq v_i$) — an edge connecting $u_i$ and $v_i$. It is guaranteed that the given edges form a tree.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $4\\cdot 10^5$.\n\n### Output\n\nFor each test case, print one line.\n\nIf Cirno wins the game, print several integers. The first integer $k$ represents the number of possible nodes she may choose in the first turn. The other $k$ integers are all possible nodes in increasing order.\n\nOtherwise, print \"0\" (without quotes).\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n4\n\n2 2 4 3\n\n1 2\n\n1 3\n\n2 4\n\n5\n\n1 2 3 4 5\n\n1 2\n\n2 3\n\n3 4\n\n4 5\n\n3\n\n1 2 3\n\n1 2\n\n1 3\n\n5\n\n3 1 3 4 5\n\n1 2\n\n2 3\n\n3 4\n\n4 5\n\n10\n\n1 2 3 2 4 3 3 4 4 3\n\n1 4\n\n4 6\n\n7 4\n\n6 9\n\n6 5\n\n7 8\n\n1 2\n\n2 3\n\n2 10\n\n```\n\n#### Output #1\n\n```\n2 2 4\n0\n1 2\n1 2\n5 3 4 6 7 10\n```\n\n### Note\n\nIn the first test case:\n\n1. If Cirno chooses $1$ or $3$ in the first turn, Daiyousei cannot make a move, so Daiyousei wins.\n2. If Cirno chooses $2$ or $4$ in the first turn, Daiyousei can only choose $3$, but after it Cirno cannot make a move, so Cirno wins.\n\nTherefore, all possible nodes Cirno may choose are $2$ and $4$.\n\nIn the second test case, regardless of which node Cirno chooses, Daiyousei cannot make a move, so Daiyousei wins.\n\nIn the third and fourth test case, the only possible node Cirno may choose in the first turn is $2$.\n\nIn the fifth test case, all possible nodes Cirno may choose in the first turn are $3,4,6,7$ and $10$.", "cfid": "2062E2"}
{"problem_id": "2062E1", "problem_title": "E1. The Game (Easy Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2062/E1", "problem_statement": "This is the easy version of the problem. The difference between the versions is that in this version, you only need to find one of the possible nodes Cirno may choose. You can hack only if you solved all versions of this problem.\n\nCirno and Daiyousei are playing a game with a tree$^{\\text{∗}}$ of $n$ nodes, rooted at node $1$. The value of the $i$-th node is $w_i$. They take turns to play the game; Cirno goes first.\n\nIn each turn, assuming the opponent chooses $j$ in the last turn, the player can choose any remaining node $i$ satisfying $w_i>w_j$ and delete the subtree$^{\\text{†}}$ of node $i$. In particular, Cirno can choose any node and delete its subtree in the first turn.\n\nThe first player who can not operate wins, and they all hope to win. Find one of the possible nodes Cirno may choose so that she wins if both of them play optimally.\n\n$^{\\text{∗}}$A tree is a connected graph without cycles.\n\n$^{\\text{†}}$Node $u$ is considered in the subtree of node $i$ if any path from $1$ to $u$ must go through $i$.\n\n### Input\n\nThe first line of input contains a single integer $t$ ($1 \\leq t \\leq 10^5$) — the number of input test cases.\n\nThe first line of each test case contains one integer $n$ ($1 \\le n \\le 4\\cdot 10^5$) — the number of nodes in the tree.\n\nThe second line contains $n$ integers $w_1,w_2,\\ldots,w_n$ ($1 \\le w_i \\le n$) — the value of each node.\n\nThe next $n-1$ lines contain the edges of the tree. The $i$-th line contains two integers $u_i,v_i$ ($1\\le u_i,v_i \\le n$, $u_i \\neq v_i$) — an edge connecting $u_i$ and $v_i$. It is guaranteed that the given edges form a tree.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $4\\cdot 10^5$.\n\n### Output\n\nFor each test case, print one line.\n\nIf Cirno wins the game, print any possible node she may choose in the first turn.\n\nOtherwise, print \"0\" (without quotes).\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n4\n\n2 2 4 3\n\n1 2\n\n1 3\n\n2 4\n\n5\n\n1 2 3 4 5\n\n1 2\n\n2 3\n\n3 4\n\n4 5\n\n3\n\n1 2 3\n\n1 2\n\n1 3\n\n5\n\n3 1 3 4 5\n\n1 2\n\n2 3\n\n3 4\n\n4 5\n\n10\n\n1 2 3 2 4 3 3 4 4 3\n\n1 4\n\n4 6\n\n7 4\n\n6 9\n\n6 5\n\n7 8\n\n1 2\n\n2 3\n\n2 10\n\n```\n\n#### Output #1\n\n```\n2\n0\n2\n2\n10\n```\n\n### Note\n\nIn the first test case:\n\n1. If Cirno chooses $1$ or $3$ in the first turn, Daiyousei cannot make a move, so Daiyousei wins.\n2. If Cirno chooses $2$ or $4$ in the first turn, Daiyousei can only choose $3$, but after it Cirno cannot make a move, so Cirno wins.\n\nTherefore, all possible nodes Cirno may choose are $2$ and $4$.\n\nIn the second test case, regardless of which node Cirno chooses, Daiyousei cannot make a move, so Daiyousei wins.\n\nIn the third and fourth test case, the only possible node Cirno may choose in the first turn is $2$.\n\nIn the fifth test case, all possible nodes Cirno may choose in the first turn are $3,4,6,7$ and $10$.", "cfid": "2062E1"}
{"problem_id": "2062F", "problem_title": "F. Traveling Salescat", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2062/F", "problem_statement": "You are a cat selling fun algorithm problems. Today, you want to recommend your fun algorithm problems to $k$ cities.\n\nThere are a total of $n$ cities, each with two parameters $a_i$ and $b_i$. Between any two cities $i,j$ ($i\\ne j$), there is a bidirectional road with a length of $\\max(a_i + b_j , b_i + a_j)$. The cost of a path is defined as the total length of roads between every two adjacent cities along the path.\n\nFor $k=2,3,\\ldots,n$, find the minimum cost among all simple paths containing exactly $k$ distinct cities.\n\n### Input\n\nThe first line of input contains a single integer $t$ ($1 \\leq t \\leq 1500$) — the number of test cases.\n\nFor each test case, the first line contains a single integer $n$ ($2 \\leq n \\leq 3\\cdot 10^3$) — the number of cities.\n\nThen $n$ lines follow, the $i$-th line contains two integers $a_i,b_i$ ($0 \\leq a_i,b_i \\leq 10^9$) — the parameters of city $i$.\n\nIt is guaranteed that the sum of $n^2$ over all test cases does not exceed $9\\cdot 10^6$.\n\n### Output\n\nFor each test case, print $n-1$ integers in one line. The $i$-th integer represents the minimum cost when $k=i+1$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3\n\n0 2\n\n2 1\n\n3 3\n\n5\n\n2 7\n\n7 5\n\n6 3\n\n1 8\n\n7 5\n\n8\n\n899167687 609615846\n\n851467150 45726720\n\n931502759 23784096\n\n918190644 196992738\n\n142090421 475722765\n\n409556751 726971942\n\n513558832 998277529\n\n294328304 434714258\n\n```\n\n#### Output #1\n\n```\n4 9\n10 22 34 46\n770051069 1655330585 2931719265 3918741472 5033924854 6425541981 7934325514\n```\n\n### Note\n\nIn the first test case:\n\n- For $k=2$, the optimal path is $1\\to 2$ with a cost of $\\max(0+1,2+2)=4$.\n- For $k=3$, the optimal path is $2\\to 1\\to 3$ with a cost of $\\max(0+1,2+2)+\\max(0+3,3+2)=4+5=9$.\n\nIn the second test case:\n\n- For $k=2$, the optimal path is $1\\to 4$.\n- For $k=3$, the optimal path is $2\\to 3\\to 5$.\n- For $k=4$, the optimal path is $4\\to 1\\to 3\\to 5$.\n- For $k=5$, the optimal path is $5\\to 2\\to 3\\to 1\\to 4$.", "cfid": "2062F"}
{"problem_id": "2062D", "problem_title": "D. Balanced Tree", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2062/D", "problem_statement": "You are given a tree$^{\\text{∗}}$ with $n$ nodes and values $l_i, r_i$ for each node. You can choose an initial value $a_i$ satisfying $l_i\\le a_i\\le r_i$ for the $i$-th node. A tree is balanced if all node values are equal, and the value of a balanced tree is defined as the value of any node.\n\nIn one operation, you can choose two nodes $u$ and $v$, and increase the values of all nodes in the subtree$^{\\text{†}}$ of node $v$ by $1$ while considering $u$ as the root of the entire tree. Note that $u$ may be equal to $v$.\n\nYour goal is to perform a series of operations so that the tree becomes balanced. Find the minimum possible value of the tree after performing these operations. Note that you don't need to minimize the number of operations.\n\n$^{\\text{∗}}$A tree is a connected graph without cycles.\n\n$^{\\text{†}}$Node $w$ is considered in the subtree of node $v$ if any path from root $u$ to $w$ must go through $v$.\n\n### Input\n\nThe first line of input contains a single integer $t$ ($1 \\leq t \\leq 10^5$) — the number of input test cases.\n\nThe first line of each test case contains one integer $n$ ($1 \\le n \\le 2\\cdot 10^5$) — the number of nodes in the tree.\n\nThen $n$ lines follow. The $i$-th line contains two integers $l_i,r_i$ ($0\\le l_i \\le r_i\\le 10^9$) — the constraint of the value of the $i$-th node.\n\nThe next $n-1$ lines contain the edges of the tree. The $i$-th line contains two integers $u_i,v_i$ ($1\\le u_i,v_i \\le n$, $u_i \\neq v_i$) — an edge connecting $u_i$ and $v_i$. It is guaranteed that the given edges form a tree.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the minimum possible value that all $a_i$ can be made equal to after performing the operations. It can be shown that the answer always exists.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n4\n\n0 11\n\n6 6\n\n0 0\n\n5 5\n\n2 1\n\n3 1\n\n4 3\n\n7\n\n1 1\n\n0 5\n\n0 5\n\n2 2\n\n2 2\n\n2 2\n\n2 2\n\n1 2\n\n1 3\n\n2 4\n\n2 5\n\n3 6\n\n3 7\n\n4\n\n1 1\n\n1 1\n\n1 1\n\n0 0\n\n1 4\n\n2 4\n\n3 4\n\n7\n\n0 20\n\n0 20\n\n0 20\n\n0 20\n\n3 3\n\n4 4\n\n5 5\n\n1 2\n\n1 3\n\n1 4\n\n2 5\n\n3 6\n\n4 7\n\n5\n\n1000000000 1000000000\n\n0 0\n\n1000000000 1000000000\n\n0 0\n\n1000000000 1000000000\n\n3 2\n\n2 1\n\n1 4\n\n4 5\n\n6\n\n21 88\n\n57 81\n\n98 99\n\n61 76\n\n15 50\n\n23 67\n\n2 1\n\n3 2\n\n4 3\n\n5 3\n\n6 4\n\n```\n\n#### Output #1\n\n```\n11\n3\n3\n5\n3000000000\n98\n```\n\n### Note\n\nIn the first test case, you can choose $a=[6,6,0,5]$.\n\nYou can perform the following operations to make all $a_i$ equal:\n\n1. Choose $u=4$, $v=3$ and perform the operation $5$ times.\n2. Choose $u=1$, $v=3$ and perform the operation $6$ times.\n\nThe complete process is shown as follows (where the numbers inside the parentheses are elements of $a$):\n\n![](https://espresso.codeforces.com/7f1aa785ea78225224c7c60aeb85b5c2197683c0.png)\n\nIt can be proven that this is the optimal solution.", "cfid": "2062D"}
{"problem_id": "2063D", "problem_title": "D. Game With Triangles", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2063/D", "problem_statement": "Even Little John needs money to buy a house. But he recently lost his job; how will he earn money now? Of course, by playing a game that gives him money as a reward! Oh well, maybe not those kinds of games you are thinking about.\n\nThere are $n+m$ distinct points $(a_1,0), (a_2,0), \\ldots, (a_{n},0), (b_1,2), (b_2,2), \\ldots, (b_{m},2)$ on the plane. Initially, your score is $0$. To increase your score, you can perform the following operation:\n\n- Choose three distinct points which are not [collinear](https://en.wikipedia.org/wiki/Collinearity);\n- Increase your score by the area of the triangle formed by these three points;\n- Then, erase the three points from the plane.\n\n![](https://espresso.codeforces.com/5f6a73286fffbc2708f1d388ed58ca5bc0d69d23.png)An instance of the game, where the operation is performed twice.\n\nLet $k_{\\max}$ be the maximum number of operations that can be performed. For example, if it is impossible to perform any operation, $k_\\max$ is $0$. Additionally, define $f(k)$ as the maximum possible score achievable by performing the operation exactly $k$ times. Here, $f(k)$ is defined for all integers $k$ such that $0 \\le k \\le k_{\\max}$.\n\nFind the value of $k_{\\max}$, and find the values of $f(x)$ for all integers $x=1,2,\\ldots,k_{\\max}$ independently.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le {3 \\cdot 10^4}$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\le n,m \\le 2 \\cdot 10^5$).\n\nThe second line of each test case contains $n$ pairwise distinct integers $a_1,a_2,\\ldots,a_{n}$ — the points on $y=0$ ($-10^9 \\le a_i \\le 10^9$).\n\nThe third line of each test case contains $m$ pairwise distinct integers $b_1,b_2,\\ldots,b_{m}$ — the points on $y=2$ ($-10^9 \\le b_i \\le 10^9$).\n\nIt is guaranteed that both the sum of $n$ and the sum of $m$ over all test cases do not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, given that the maximum number of operations is $k_{\\max}$, you must output at most two lines:\n\n- The first line contains the value of $k_{\\max}$;\n- The second line contains $k_{\\max}$ integers denoting $f(1),f(2),\\ldots,f(k_{\\max})$. You are allowed to omit this line if $k_{\\max}$ is $0$.\n\nNote that under the constraints of this problem, it can be shown that all values of $f(x)$ are integers no greater than $10^{16}$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n1 3\n\n0\n\n0 1 -1\n\n2 4\n\n0 100\n\n-100 -50 0 50\n\n2 4\n\n0 1000\n\n-100 -50 0 50\n\n6 6\n\n20 1 27 100 43 42\n\n100 84 1 24 22 77\n\n8 2\n\n564040265 -509489796 469913620 198872582 -400714529 553177666 131159391 -20796763\n\n-1000000000 1000000000\n\n```\n\n#### Output #1\n\n```\n1\n2\n2\n150 200\n2\n1000 200\n4\n99 198 260 283\n2\n2000000000 2027422256\n```\n\n### Note\n\nOn the first test case, there are $1+3=4$ points $(0,0),(0,2),(1,2),(-1,2)$.\n\nIt can be shown that you cannot perform two or more operations. The value of $k_{\\max}$ is $1$, and you are only asked for the value of $f(1)$.\n\nYou can choose $(0,0)$, $(-1,2)$, and $(1,2)$ as the three vertices of the triangle. After that, your score is increased by the area of the triangle, which is $2$. Then, the three points are erased from the plane. It can be shown that the maximum value of your score after performing one operation is $2$. Therefore, the value of $f(1)$ is $2$.\n\nOn the fifth test case, there are $8+2=10$ points.\n\nIt can be shown that you cannot perform three or more operations. The value of $k_{\\max}$ is $2$, and you are asked for the values $f(1)$ and $f(2)$.\n\nTo maximize the score with only one operation, you can choose three points $(198\\,872\\,582,0)$, $(-1\\,000\\,000\\,000,2)$, and $(1\\,000\\,000\\,000,2)$. Then, the three points are erased from the plane. It can be shown that the maximum value of your score after performing one operation is $2\\,000\\,000\\,000$. Therefore, the value of $f(1)$ is $2\\,000\\,000\\,000$.\n\nTo maximize the score with exactly two operations, you can choose the following sequence of operations.\n\n- Choose three points $(-509\\,489\\,796,0)$, $(553\\,177\\,666,0)$, and $(-1\\,000\\,000\\,000,2)$. The three points are erased.\n- Choose three points $(-400\\,714\\,529,0)$, $(564\\,040\\,265,0)$, and $(1\\,000\\,000\\,000,2)$. The three points are erased.\n\nThen, the score after two operations becomes $2\\,027\\,422\\,256$. It can be shown that the maximum value of your score after performing exactly two operations is $2\\,027\\,422\\,256$. Therefore, the value of $f(2)$ is $2\\,027\\,422\\,256$.", "cfid": "2063D"}
{"problem_id": "2063F2", "problem_title": "F2. Counting Is Not Fun (Hard Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2063/F2", "problem_statement": "This is the hard version of the problem. The difference between the versions is that in this version, the limits on $t$ and $n$ are bigger. You can hack only if you solved all versions of this problem.\n\nNow Little John is rich, and so he finally buys a house big enough to fit himself and his favorite bracket sequence. But somehow, he ended up with a lot of brackets! Frustrated, he penetrates through the ceiling with the \"buddha palm\".\n\nA bracket sequence is called balanced if it can be constructed by the following formal grammar.\n\n1. The empty sequence $\\varnothing$ is balanced.\n2. If the bracket sequence $A$ is balanced, then $\\mathtt{(}A\\mathtt{)}$ is also balanced.\n3. If the bracket sequences $A$ and $B$ are balanced, then the concatenated sequence $A B$ is also balanced.\n\nFor example, the sequences \"(())()\", \"()\", \"(()(()))\", and the empty sequence are balanced, while \"(()\" and \"(()))(\" are not.\n\nGiven a balanced bracket sequence $s$, a pair of indices $(i,j)$ ($i<j$) is called a good pair if $s_i$ is '(', $s_j$ is ')', and the two brackets are added simultaneously with respect to Rule 2 while constructing the sequence $s$. For example, the sequence \"(())()\" has three different good pairs, which are $(1,4)$, $(2,3)$, and $(5,6)$. One can show that any balanced bracket sequence of $2n$ brackets contains exactly $n$ different good pairs, and using any order of rules to construct the same bracket sequence will yield the same set of good pairs.\n\nEmily will play a bracket guessing game with John. The game is played as follows.\n\nInitially, John has a balanced bracket sequence $s$ containing $n$ different good pairs, which is not known to Emily. John tells Emily the value of $n$ and asks Emily to guess the sequence.\n\nThroughout $n$ turns, John gives Emily the following kind of clue on each turn.\n\n- $l\\;r$: The sequence $s$ contains a good pair $(l,r)$.\n\nThe clues that John gives Emily are pairwise distinct and do not contradict each other.\n\nAt a certain point, Emily can be certain that the balanced bracket sequence satisfying the clues given so far is unique. For example, assume Emily knows that $s$ has $3$ good pairs, and it contains the good pair $(2,5)$. Out of $5$ balanced bracket sequences with $3$ good pairs, there exists only one such sequence \"((()))\" with the good pair $(2,5)$. Therefore, one can see that Emily does not always need $n$ turns to guess $s$.\n\nTo find out the content of $s$ as early as possible, Emily wants to know the number of different balanced bracket sequences that match the clues after each turn. Surely, this is not an easy job for Emily, especially when she is given so many good pairs. Now it is your turn to help Emily. Given the clues, you must find the answer before and after each turn. As the answers may be huge, you need to find them modulo $998\\,244\\,353$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains one integer $n$ ($2 \\le n \\le 3 \\cdot 10^5$) — the number of good pairs.\n\nThen, each of the $n$ following lines contains two integers $l_i$ and $r_i$ representing the $i$-th clue ($1 \\le l_i < r_i \\le 2n$).\n\nThe clues in one test case are pairwise distinct and do not contradict each other.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $3 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output $n+1$ integers on a separate line:\n\n- The first integer is the answer before all clues, modulo $998\\,244\\,353$.\n- For all $i \\ge 1$, the $i+1$-th integer is the answer after the $i$-th clue, modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3\n\n2 5\n\n1 6\n\n3 4\n\n4\n\n1 6\n\n7 8\n\n2 3\n\n4 5\n\n6\n\n2 3\n\n1 6\n\n7 8\n\n9 12\n\n10 11\n\n4 5\n\n```\n\n#### Output #1\n\n```\n5 1 1 1\n14 2 2 1 1\n132 42 5 2 1 1 1\n```\n\n### Note\n\nThe first test case of the example is explained in the problem description.\n\nThe third test case of the example is explained as follows. It can be shown that there are $132$ balanced bracket sequences with $6$ good pairs. The answers after each clue are given as follows:\n\n1. You are given the good pair $(2,3)$. There are $42$ balanced bracket sequences having the good pair $(2,3)$.\n2. You are given the good pair $(1,6)$. There are $5$ balanced bracket sequences having good pairs $(2,3)$, $(1,6)$.\n3. You are given the good pair $(7,8)$. There are $2$ balanced bracket sequences having the three good pairs. The strings are \"(()())()(())\" and \"(()())()()()\", respectively.\n4. You are given the good pair $(9,12)$. There is only one balanced bracket sequence having the four good pairs. The content of $s$ is therefore the only string, which is \"(()())()(())\".\n\nThen, the number of bracket sequences after the fifth and the sixth clue are both $1$ as you already know the content of $s$.", "cfid": "2063F2"}
{"problem_id": "2063F1", "problem_title": "F1. Counting Is Not Fun (Easy Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2063/F1", "problem_statement": "This is the easy version of the problem. The difference between the versions is that in this version, the limits on $t$ and $n$ are smaller. You can hack only if you solved all versions of this problem.\n\nNow Little John is rich, and so he finally buys a house big enough to fit himself and his favorite bracket sequence. But somehow, he ended up with a lot of brackets! Frustrated, he penetrates through the ceiling with the \"buddha palm\".\n\nA bracket sequence is called balanced if it can be constructed by the following formal grammar.\n\n1. The empty sequence $\\varnothing$ is balanced.\n2. If the bracket sequence $A$ is balanced, then $\\mathtt{(}A\\mathtt{)}$ is also balanced.\n3. If the bracket sequences $A$ and $B$ are balanced, then the concatenated sequence $A B$ is also balanced.\n\nFor example, the sequences \"(())()\", \"()\", \"(()(()))\", and the empty sequence are balanced, while \"(()\" and \"(()))(\" are not.\n\nGiven a balanced bracket sequence $s$, a pair of indices $(i,j)$ ($i<j$) is called a good pair if $s_i$ is '(', $s_j$ is ')', and the two brackets are added simultaneously with respect to Rule 2 while constructing the sequence $s$. For example, the sequence \"(())()\" has three different good pairs, which are $(1,4)$, $(2,3)$, and $(5,6)$. One can show that any balanced bracket sequence of $2n$ brackets contains exactly $n$ different good pairs, and using any order of rules to construct the same bracket sequence will yield the same set of good pairs.\n\nEmily will play a bracket guessing game with John. The game is played as follows.\n\nInitially, John has a balanced bracket sequence $s$ containing $n$ different good pairs, which is not known to Emily. John tells Emily the value of $n$ and asks Emily to guess the sequence.\n\nThroughout $n$ turns, John gives Emily the following kind of clue on each turn.\n\n- $l\\;r$: The sequence $s$ contains a good pair $(l,r)$.\n\nThe clues that John gives Emily are pairwise distinct and do not contradict each other.\n\nAt a certain point, Emily can be certain that the balanced bracket sequence satisfying the clues given so far is unique. For example, assume Emily knows that $s$ has $3$ good pairs, and it contains the good pair $(2,5)$. Out of $5$ balanced bracket sequences with $3$ good pairs, there exists only one such sequence \"((()))\" with the good pair $(2,5)$. Therefore, one can see that Emily does not always need $n$ turns to guess $s$.\n\nTo find out the content of $s$ as early as possible, Emily wants to know the number of different balanced bracket sequences that match the clues after each turn. Surely, this is not an easy job for Emily, especially when she is given so many good pairs. Now it is your turn to help Emily. Given the clues, you must find the answer before and after each turn. As the answers may be huge, you need to find them modulo $998\\,244\\,353$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^3$). The description of the test cases follows.\n\nThe first line of each test case contains one integer $n$ ($2 \\le n \\le 5000$) — the number of good pairs.\n\nThen, each of the $n$ following lines contains two integers $l_i$ and $r_i$ representing the $i$-th clue ($1 \\le l_i < r_i \\le 2n$).\n\nThe clues in one test case are pairwise distinct and do not contradict each other.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5000$.\n\n### Output\n\nFor each test case, output $n+1$ integers on a separate line:\n\n- The first integer is the answer before all clues, modulo $998\\,244\\,353$.\n- For all $i \\ge 1$, the $i+1$-th integer is the answer after the $i$-th clue, modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3\n\n2 5\n\n1 6\n\n3 4\n\n4\n\n1 6\n\n7 8\n\n2 3\n\n4 5\n\n6\n\n2 3\n\n1 6\n\n7 8\n\n9 12\n\n10 11\n\n4 5\n\n```\n\n#### Output #1\n\n```\n5 1 1 1\n14 2 2 1 1\n132 42 5 2 1 1 1\n```\n\n### Note\n\nThe first test case of the example is explained in the problem description.\n\nThe third test case of the example is explained as follows. It can be shown that there are $132$ balanced bracket sequences with $6$ good pairs. The answers after each clue are given as follows:\n\n1. You are given the good pair $(2,3)$. There are $42$ balanced bracket sequences having the good pair $(2,3)$.\n2. You are given the good pair $(1,6)$. There are $5$ balanced bracket sequences having good pairs $(2,3)$, $(1,6)$.\n3. You are given the good pair $(7,8)$. There are $2$ balanced bracket sequences having the three good pairs. The strings are \"(()())()(())\" and \"(()())()()()\", respectively.\n4. You are given the good pair $(9,12)$. There is only one balanced bracket sequence having the four good pairs. The content of $s$ is therefore the only string, which is \"(()())()(())\".\n\nThen, the number of bracket sequences after the fifth and the sixth clue are both $1$ as you already know the content of $s$.", "cfid": "2063F1"}
{"problem_id": "2063E", "problem_title": "E. Triangle Tree", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2063/E", "problem_statement": "One day, a giant tree grew in the countryside. Little John, with his childhood eagle, decided to make it his home. Little John will build a structure on the tree with galvanized square steel. However, little did he know, he could not build what is physically impossible.\n\nYou are given a rooted tree$^{\\text{∗}}$ containing $n$ vertices rooted at vertex $1$. A pair of vertices $(u,v)$ is called a good pair if $u$ is not an ancestor$^{\\text{†}}$ of $v$ and $v$ is not an ancestor of $u$. For any two vertices, $\\text{dist}(u,v)$ is defined as the number of edges on the unique simple path from $u$ to $v$, and $\\text{lca}(u,v)$ is defined as their [lowest common ancestor](https://en.wikipedia.org/wiki/Lowest_common_ancestor).\n\nA function $f(u,v)$ is defined as follows.\n\n- If $(u,v)$ is a good pair, $f(u,v)$ is the number of distinct integer values $x$ such that there exists a non-degenerate triangle$^{\\text{‡}}$ formed by side lengths $\\text{dist}(u,\\text{lca}(u,v))$, $\\text{dist}(v,\\text{lca}(u,v))$, and $x$.\n- Otherwise, $f(u,v)$ is $0$.\n\nYou need to find the following value: \n\n$$\\sum_{i = 1}^{n-1} \\sum_{j = i+1}^n f(i,j).$$\n\ntext{∗}}$A tree is a connected graph without cycles. A rooted tree is a tree where one vertex is special and called the root.\n\n$^{\\text{†}}$An ancestor of vertex $v$ is any vertex on the simple path from $v$ to the root, including the root, but not including $v$. The root has no ancestors.\n\n$^{\\text{‡}}$A triangle with side lengths $a$, $b$, $c$ is non-degenerate when $a+b > c$, $a+c > b$, $b+c > a$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 3 \\cdot 10^5$).\n\nEach of the next $n-1$ lines contains two integers $u_i$ and $v_i$, denoting the two vertices connected by an edge ($1 \\le u_i,v_i \\le n$, $u_i \\neq v_i$).\n\nIt is guaranteed that the given edges form a tree.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $3 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the answer on a separate line.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3\n\n1 2\n\n1 3\n\n3\n\n1 2\n\n3 2\n\n5\n\n2 3\n\n1 5\n\n4 2\n\n1 2\n\n11\n\n2 1\n\n2 3\n\n2 4\n\n4 5\n\n6 5\n\n5 7\n\n4 8\n\n8 9\n\n7 10\n\n10 11\n\n```\n\n#### Output #1\n\n```\n1\n0\n4\n29\n```\n\n### Note\n\nOn the first test case, the only good pair $(i,j)$ satisfying $i<j$ is $(2,3)$. Here, $\\text{lca}(2,3)$ is $1$, and the two distances are $1$ and $1$.\n\nThere is only one value of $x$ for two side lengths $1$ and $1$, which is $1$. Therefore, the answer for the first test case is $1$.\n\nOn the second test case, there is no good pair. Therefore, the answer for the second test case is $0$.\n\nOn the third test case, the good pairs $(i,j)$ satisfying $i<j$ are as follows.\n\n- $(2,5)$: $\\text{lca}(2,5)$ is $1$, distances are $1$ and $1$. There is only one possible value of $x$, which is $1$.\n- $(3,4)$: $\\text{lca}(3,4)$ is $2$, distances are $1$ and $1$. There is only one possible value of $x$, which is $1$.\n- $(3,5)$: $\\text{lca}(3,5)$ is $1$, distances are $2$ and $1$. There is only one possible value of $x$, which is $2$.\n- $(4,5)$: $\\text{lca}(4,5)$ is $1$, distances are $2$ and $1$. There is only one possible value of $x$, which is $2$.\n\nTherefore, the answer for the third test case is $1+1+1+1=4$.", "cfid": "2063E"}
{"problem_id": "2061E", "problem_title": "E. Kevin and And", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2061/E", "problem_statement": "Kevin has an integer sequence $a$ of length $n$. At the same time, Kevin has $m$ types of magic, where the $i$-th type of magic can be represented by an integer $b_i$.\n\nKevin can perform at most $k$ (possibly zero) magic operations. In each operation, Kevin can do the following:\n\n- Choose two indices $i$ ($1\\leq i\\leq n$) and $j$ ($1\\leq j\\leq m$), and then update $a_i$ to $a_i\\ \\&\\ b_j$. Here, $\\&$ denotes the [bitwise AND operation](https://en.wikipedia.org/wiki/Bitwise_operation#AND).\n\nFind the minimum possible sum of all numbers in the sequence $a$ after performing at most $k$ operations.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n, m, k$ ($1\\leq n \\leq 10^5$, $1\\leq m \\leq 10$, $0\\leq k\\leq nm$) — the length of $a$, the number of types of magic, and the maximum number of operations.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0\\leq a_i < 2^{30}$).\n\nThe third line contains $m$ integers $b_1, b_2, \\ldots, b_m$ ($0\\leq b_i < 2^{30}$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, output one integer — the minimum possible sum of all numbers in the sequence $a$ after performing at most $k$ operations.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n1 3 2\n\n7\n\n5 6 3\n\n2 3 2\n\n5 6\n\n5 6 3\n\n10 2 5\n\n3 1 4 1 5 9 2 6 5 3\n\n7 8\n\n5 1 0\n\n1073741823 1073741823 1073741823 1073741823 1073741823\n\n1073741823\n\n1 1 0\n\n0\n\n0\n\n```\n\n#### Output #1\n\n```\n1\n3\n11\n5368709115\n0\n```\n\n### Note\n\nIn the first test case, one possible way could be:\n\n- Update $a_1$ to $a_1\\ \\&\\ b_1$. The sequence will become $[5]$.\n- Update $a_1$ to $a_1\\ \\&\\ b_3$. The sequence will become $[1]$.\n\nIn the second test case, one possible way could be:\n\n- Update $a_1$ to $a_1\\ \\&\\ b_3$. The sequence will become $[1, 6]$.\n- Update $a_2$ to $a_2\\ \\&\\ b_3$. The sequence will become $[1, 2]$.", "cfid": "2061E"}
{"problem_id": "2061F1", "problem_title": "F1. Kevin and Binary String (Easy Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2061/F1", "problem_statement": "This is the easy version of the problem. The difference between the versions is that in this version, string $t$ consists of only '0' and '1'. You can hack only if you solved all versions of this problem.\n\nKevin has a binary string $s$ of length $n$. Kevin can perform the following operation:\n\n- Choose two adjacent blocks of $s$ and swap them.\n\nA block is a maximal substring$^{\\text{∗}}$ of identical characters. Formally, denote $s[l,r]$ as the substring $s_l s_{l+1} \\ldots s_r$. A block is $s[l,r]$ satisfying:\n\n- $l=1$ or $s_l\\not=s_{l-1}$.\n- $s_l=s_{l+1} = \\ldots = s_{r}$.\n- $r=n$ or $s_r\\not=s_{r+1}$.\n\nAdjacent blocks are two blocks $s[l_1,r_1]$ and $s[l_2,r_2]$ satisfying $r_1+1=l_2$.\n\nFor example, if $s=\\mathtt{000}\\,\\mathbf{11}\\,\\mathbf{00}\\,\\mathtt{111}$, Kevin can choose the two blocks $s[4,5]$ and $s[6,7]$ and swap them, transforming $s$ into $\\mathtt{000}\\,\\mathbf{00}\\,\\mathbf{11}\\,\\mathtt{111}$.\n\nGiven a string $t$ of length $n$ consisting of '0', '1' and '?', Kevin wants to determine the minimum number of operations required to perform such that for any index $i$ ($1\\le i\\le n$), if $t_i\\not=$ '?' then $s_i=t_i$. If it is impossible, output $-1$.\n\n$^{\\text{∗}}$A string $a$ is a substring of a string $b$ if $a$ can be obtained from $b$ by the deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a string $s$ consisting of '0' and '1'.\n\nThe second line of each test case contains a string $t$ consisting of '0' and '1'.\n\nIt is guaranteed that the lengths of $s$ and $t$ are the same.\n\nIt is guaranteed that the sum of the length of $s$ over all test cases will not exceed $4\\cdot 10^5$.\n\n### Output\n\nFor each test case, output one integer — the minimum number of operations required. If it is impossible, output $-1$.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n0001100111\n\n0000011111\n\n010101\n\n111000\n\n0101\n\n0110\n\n0101\n\n1010\n\n011001\n\n001110\n\n0\n\n1\n\n```\n\n#### Output #1\n\n```\n1\n3\n1\n-1\n-1\n-1\n```\n\n### Note\n\nIn the first test case, the possible way is shown in the statement.\n\nIn the second test case, one possible way could be:\n\n- Swap blocks $[2, 2], [3, 3]$, $s$ will become $\\mathtt{001101}$.\n- Swap blocks $[3, 4], [5, 5]$, $s$ will become $\\mathtt{000111}$.\n- Swap blocks $[1, 3], [4, 6]$, $s$ will become $\\mathtt{111000}$.", "cfid": "2061F1"}
{"problem_id": "2061G", "problem_title": "G. Kevin and Teams", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2061/G", "problem_statement": "This is an interactive problem.\n\nKevin has $n$ classmates, numbered $1, 2, \\ldots, n$. Any two of them may either be friends or not friends.\n\nKevin wants to select $2k$ classmates to form $k$ teams, where each team contains exactly $2$ people. Each person can belong to at most one team.\n\nLet $u_i$ and $v_i$ be two people in the $i$-th team. To avoid potential conflicts during team formation, the team members must satisfy one of the following two conditions:\n\n- For all $i$ ($1\\leq i \\leq k$), classmate $u_i$ and $v_i$ are friends.\n- For all $i$ ($1\\leq i \\leq k$), classmate $u_i$ and $v_i$ are not friends.\n\nKevin wants to determine the maximum $k$ such that, regardless of the friendship relationships among the $n$ people, he can always find $2k$ people to form the teams. After that, he needs to form $k$ teams. But asking whether two classmates are friends is awkward, so Kevin wants to achieve this while asking about the friendship status of no more than $n$ pairs of classmates.\n\nThe interactor is adaptive. It means that the hidden relationship between classmates is not fixed before the interaction and will change during the interaction.\n\n### Interaction\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains one positive integer $n$ ($2\\leq n \\leq 10^5$) — the number of classmates.\n\nFirst, you should output an integer $k$ ($1\\leq k\\leq \\frac{n}2$) — the maximum number of teams you can form.\n\nYou can make queries in the following way — print one line of the form $?\\;u\\;v$ where $1\\leq u\\neq v \\leq n$. After that, read a single integer: $0$ or $1$ indicating whether they are friends. $1$ means they are friends while $0$ means not.\n\nIf you want to print the answer, output $!\\;u_1\\;v_1\\;u_2\\;v_2\\;\\ldots\\;u_k\\;v_k$. You should output exactly $2k$ distinct numbers. Then, the interaction continues with the next test case.\n\nYou can make at most $n$ queries. Printing the answer does not count towards the number of queries made.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\nAfter printing each query do not forget to output the end of line and flush$^{\\text{∗}}$ the output. Otherwise, you will get Idleness limit exceeded verdict.\n\nIf, at any interaction step, you read $-1$ instead of valid data, your solution must exit immediately. This means that your solution will reveive Wrong answer because of an invalid query or any other mistake. Failing to exit can result in an arbitrary verdict because your solution will continue to read from a closed stream.\n\nHacks\n\nThe interactor for hacks is not adaptive. To make a hack, use the following format.\n\nThe first line contains the word \"manual\".\n\nThe second line contains a single integer $t$ ($1\\leq t \\leq 10^4$) — the number of test cases.\n\nThe first line of each test case contains an integer $n$ ($2\\leq n \\leq 10^5$) — the number of classmates.\n\nThe second line of each test case contains a string $s$ consisting of '0' and '1' of length $\\frac{n(n - 1)}{2}$ — indicating the relationship between $(1, 2)$, $(1, 3)$, $\\ldots$, $(1, n)$, $(2, 3)$, $(2, 4)$, $\\ldots$, $(2, n)$, $\\ldots$, $(n - 1, n)$. '1' means being friends and '0' means not being friends.\n\nThe following is the input of example.\n\n```\n\nmanual\n\n2\n\n3\n\n011\n\n5\n\n1011101011\n\n```\n\nThe sum of $n$ over all test cases must not exceed $10^5$.\n\nThere is an additional constraint for hacks: The sum of $\\frac{n(n-1)}{2}$ over all test cases must not exceed $10^7$.\n\n$^{\\text{∗}}$To flush, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- sys.stdout.flush() in Python;\n- see the documentation for other languages.\n\n### Example\n\n#### Input #1\n\n```\n2\n3\n\n1\n\n5\n\n1\n\n0\n\n1\n\n0\n\n0\n```\n\n#### Output #1\n\n```\n\n1\n? 1 2\n\n! 1 2\n\n2\n? 1 2\n\n? 3 4\n\n? 3 5\n\n? 1 3\n\n? 2 4\n\n! 1 2 3 5\n```\n\n### Note\n\nIn the first test case:\n\nKevin claims he can form $1$ team regardless of the friendship relationships among the $3$ people.\n\nKevin asks about the friendship relationship between people $1$ and $2$. The jury responds that they are friends.\n\nKevin answers that he can form a team with people $1$ and $2$.\n\nIn the second test case:\n\nKevin claims he can form $2$ teams regardless of the friendship relationships among the $5$ people.\n\nKevin asks about the friendship relationship between people $(1, 2), (3, 4), (3, 5), (1, 3), (2, 4)$. The jury responds with $1, 0, 1, 0, 0$.\n\nKevin answers that he can form two teams with people $(1, 2)$ and $(3, 5)$.\n\nIt is also possible to form two teams with people $(1, 3)$ and $(2, 4)$, since they are both not friends.", "cfid": "2061G"}
{"problem_id": "2060F", "problem_title": "F. Multiplicative Arrays", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2060/F", "problem_statement": "You're given integers $k$ and $n$. For each integer $x$ from $1$ to $k$, count the number of integer arrays $a$ such that all of the following are satisfied:\n\n- $1 \\leq |a| \\leq n$ where $|a|$ represents the length of $a$.\n- $1 \\leq a_i \\leq k$ for all $1 \\leq i \\leq |a|$.\n- $a_1 \\times a_2 \\times \\dots \\times a_{|a|}=x$ (i.e., the product of all elements is $x$).\n\nNote that two arrays $b$ and $c$ are different if either their lengths are different, or if there exists an index $1 \\leq i \\leq |b|$ such that $b_i\\neq c_i$.\n\nOutput the answer modulo $998\\,244\\,353$.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t\\leq 10^3$) — the number of independent test cases.\n\nThe only line of each test case contains two integers $k$ and $n$ ($1 \\leq k \\leq 10^5, 1\\leq n \\leq 9\\cdot 10^8$).\n\nIt is guaranteed that the sum of $k$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, output $k$ space-separated integers on a new line: the number of arrays for $x=1,2,\\ldots,k$, modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2 2\n\n4 3\n\n10 6969420\n\n```\n\n#### Output #1\n\n```\n2 3\n3 6 6 10\n6969420 124188773 124188773 729965558 124188773 337497990 124188773 50981194 729965558 337497990\n```\n\n### Note\n\nIn the first test case, there are $2$ arrays $a$ with $|a|\\leq 2$ and the product of elements equal to $1$:\n\n- $[1]$\n- $[1,1]$\n\nThere are $3$ arrays $a$ with $|a|\\leq 2$ and the product of elements equal to $2$:\n\n- $[2]$\n- $[1,2]$\n- $[2,1]$", "cfid": "2060F"}
{"problem_id": "2060G", "problem_title": "G. Bugged Sort", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2060/G", "problem_statement": "Today, Alice has given Bob arrays for him to sort in increasing order again! At this point, no one really knows how many times she has done this.\n\nBob is given two sequences $a$ and $b$, both of length $n$. All integers in the range from $1$ to $2n$ appear exactly once in either $a$ or $b$. In other words, the concatenated$^{\\text{∗}}$ sequence $a+b$ is a permutation$^{\\text{†}}$ of length $2n$.\n\nBob must sort both sequences in increasing order at the same time using Alice's swap function. Alice's swap function is implemented as follows:\n\n- Given two indices $i$ and $j$ ($i \\neq j$), it swaps $a_i$ with $b_j$, and swaps $b_i$ with $a_j$.\n\nGiven sequences $a$ and $b$, please determine if both sequences can be sorted in increasing order simultaneously after using Alice's swap function any number of times.\n\n$^{\\text{∗}}$The concatenated sequence $a+b$ denotes the sequence $[a_1, a_2, a_3, \\ldots , b_1, b_2, b_3, \\ldots]$.\n\n$^{\\text{†}}$A permutation of length $m$ contains all integers from $1$ to $m$ in some order.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($3 \\le n \\le 2 \\cdot 10^5$).\n\nThe second line of each test case contains $a_1,a_2,\\ldots,a_n$ ($1 \\le a_i \\le 2n$).\n\nThe third line of each test case contains $b_1,b_2,\\ldots,b_n$ ($1 \\le b_i \\le 2n$).\n\nIt is guaranteed that all integers in the range $[1,2n]$ appear exactly once in either $a$ or $b$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nIf it is possible to sort both sequences simultaneously, print \"YES\" on a new line. Otherwise, print \"NO\" on a new line.\n\nYou can output the answer in any case. For example, the strings \"yEs\", \"yes\", and \"Yes\" will also be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3\n\n2 1 3\n\n4 6 5\n\n3\n\n2 1 5\n\n4 3 6\n\n4\n\n1 6 4 3\n\n5 2 8 7\n\n4\n\n5 3 7 1\n\n8 6 4 2\n\n7\n\n5 1 9 12 3 13 7\n\n2 4 11 14 6 10 8\n\n```\n\n#### Output #1\n\n```\nNO\nYES\nNO\nYES\nYES\n```\n\n### Note\n\nIn the first test case, it can be shown that it is impossible.\n\nIn the second test case, Bob can perform one operation with indices $i=1$ and $j=2$. The arrays become $[3,4,5]$ and $[1,2,6]$ respectively. Both arrays are now sorted.", "cfid": "2060G"}
{"problem_id": "2056D", "problem_title": "D. Unique Median", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2056/D", "problem_statement": "An array $b$ of $m$ integers is called good if, when it is sorted, $b_{\\left\\lfloor \\frac{m + 1}{2} \\right\\rfloor} = b_{\\left\\lceil \\frac{m + 1}{2} \\right\\rceil}$. In other words, $b$ is good if both of its medians are equal. In particular, $\\left\\lfloor \\frac{m + 1}{2} \\right\\rfloor = \\left\\lceil \\frac{m + 1}{2} \\right\\rceil$ when $m$ is odd, so $b$ is guaranteed to be good if it has an odd length.\n\nYou are given an array $a$ of $n$ integers. Calculate the number of good subarrays$^{\\text{∗}}$ in $a$.\n\n$^{\\text{∗}}$An array $x$ is a subarray of an array $y$ if $x$ can be obtained from $y$ by the deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 10^5$) — the length of the array.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le \\color{red}{\\textbf{10}}$) — the given array.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, output a single integer representing the number of good subarrays in $a$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n4\n\n1 1 1 1\n\n5\n\n1 10 2 3 3\n\n10\n\n6 3 2 3 5 3 4 2 3 5\n\n```\n\n#### Output #1\n\n```\n10\n11\n42\n```\n\n### Note\n\nIn the first case, every subarray is good since all its elements are equal to $1$.\n\nIn the second case, an example of a good subarray is $b = [10, 2, 3, 3]$. When it is sorted, $b = [2, 3, 3, 10]$, so $b_{\\left\\lfloor \\frac{4 + 1}{2} \\right\\rfloor} = b_{\\left\\lceil \\frac{4 + 1}{2} \\right\\rceil} = b_2 = b_3 = 3$. Another example would be $b = [1, 10, 2]$. On the other hand, $b = [1, 10]$ is not good as its two medians are $1$ and $10$, which are not equal.", "cfid": "2056D"}
{"problem_id": "2056F1", "problem_title": "F1. Xor of Median (Easy Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2056/F1", "problem_statement": "This is the easy version of the problem. The difference between the versions is that in this version, the constraints on $t$, $k$, and $m$ are lower. You can hack only if you solved all versions of this problem.\n\nA sequence $a$ of $n$ integers is called good if the following condition holds:\n\n- Let $\\text{cnt}_x$ be the number of occurrences of $x$ in sequence $a$. For all pairs $0 \\le i < j < m$, at least one of the following has to be true: $\\text{cnt}_i = 0$, $\\text{cnt}_j = 0$, or $\\text{cnt}_i \\le \\text{cnt}_j$. In other words, if both $i$ and $j$ are present in sequence $a$, then the number of occurrences of $i$ in $a$ is less than or equal to the number of occurrences of $j$ in $a$.\n\nYou are given integers $n$ and $m$. Calculate the value of the bitwise XOR of the median$^{\\text{∗}}$ of all good sequences $a$ of length $n$ with $0\\le a_i < m$.\n\nNote that the value of $n$ can be very large, so you are given its binary representation instead.\n\n$^{\\text{∗}}$The median of a sequence $a$ of length $n$ is defined as the $\\left\\lfloor\\frac{n + 1}{2}\\right\\rfloor$-th smallest value in the sequence.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 50$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $k$ and $m$ ($1 \\le k \\le 200$, $1 \\le m \\le 500$) — the number of bits in $n$ and the upper bound on the elements in sequence $a$.\n\nThe second line of each test case contains a binary string of length $k$ — the binary representation of $n$ with no leading zeros.\n\nIt is guaranteed that the sum of $k$ over all test cases does not exceed $200$.\n\n### Output\n\nFor each test case, output a single integer representing the bitwise XOR of the median of all good sequences $a$ of length $n$ where $0\\le a_i < m$.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n2 3\n\n10\n\n2 3\n\n11\n\n5 1\n\n11101\n\n7 9\n\n1101011\n\n17 34\n\n11001010001010010\n\n1 500\n\n1\n\n```\n\n#### Output #1\n\n```\n3\n2\n0\n8\n32\n0\n```\n\n### Note\n\nIn the first example, $n = 10_2 = 2$ and $m = 3$. All possible sequences with elements less than $m$ are: $[0, 0]$, $[0, 1]$, $[0, 2]$, $[1, 0]$, $[1, 1]$, $[1, 2]$, $[2, 0]$, $[2, 1]$, $[2, 2]$. All of them are good, so the answer is: $0 \\oplus 0 \\oplus 0 \\oplus 0 \\oplus 1 \\oplus 1 \\oplus 0 \\oplus 1 \\oplus 2 = 3$.\n\nIn the second example, $n = 11_2 = 3$ and $m = 3$. Some good sequences are $[2, 2, 2]$, $[1, 0, 1]$, and $[2, 0, 1]$. However, a sequence $[2, 0, 0]$ is not good, because $\\text{cnt}_0 = 2$, $\\text{cnt}_2 = 1$. Therefore, if we set $i = 0$ and $j = 2$, $i < j$ holds, but $\\text{cnt}_i \\le \\text{cnt}_j$ does not.", "cfid": "2056F1"}
{"problem_id": "2056F2", "problem_title": "F2. Xor of Median (Hard Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2056/F2", "problem_statement": "This is the hard version of the problem. The difference between the versions is that in this version, the constraints on $t$, $k$, and $m$ are higher. You can hack only if you solved all versions of this problem.\n\nA sequence $a$ of $n$ integers is called good if the following condition holds:\n\n- Let $\\text{cnt}_x$ be the number of occurrences of $x$ in sequence $a$. For all pairs $0 \\le i < j < m$, at least one of the following has to be true: $\\text{cnt}_i = 0$, $\\text{cnt}_j = 0$, or $\\text{cnt}_i \\le \\text{cnt}_j$. In other words, if both $i$ and $j$ are present in sequence $a$, then the number of occurrences of $i$ in $a$ is less than or equal to the number of occurrences of $j$ in $a$.\n\nYou are given integers $n$ and $m$. Calculate the value of the bitwise XOR of the median$^{\\text{∗}}$ of all good sequences $a$ of length $n$ with $0\\le a_i < m$.\n\nNote that the value of $n$ can be very large, so you are given its binary representation instead.\n\n$^{\\text{∗}}$The median of a sequence $a$ of length $n$ is defined as the $\\left\\lfloor\\frac{n + 1}{2}\\right\\rfloor$-th smallest value in the sequence.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $k$ and $m$ ($1 \\le k \\le 2 \\cdot 10^5$, $1 \\le m \\le 10^9$) — the number of bits in $n$ and the upper bound on the elements in sequence $a$.\n\nThe second line of each test case contains a binary string of length $k$ — the binary representation of $n$ with no leading zeros.\n\nIt is guaranteed that the sum of $k$ over all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer representing the bitwise XOR of the median of all good sequences $a$ of length $n$ where $0\\le a_i < m$.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n2 3\n\n10\n\n2 3\n\n11\n\n5 1\n\n11101\n\n7 9\n\n1101011\n\n17 34\n\n11001010001010010\n\n1 1000000000\n\n1\n\n```\n\n#### Output #1\n\n```\n3\n2\n0\n8\n32\n0\n```\n\n### Note\n\nIn the first example, $n = 10_2 = 2$ and $m = 3$. All possible sequences with elements less than $m$ are: $[0, 0]$, $[0, 1]$, $[0, 2]$, $[1, 0]$, $[1, 1]$, $[1, 2]$, $[2, 0]$, $[2, 1]$, $[2, 2]$. All of them are good, so the answer is: $0 \\oplus 0 \\oplus 0 \\oplus 0 \\oplus 1 \\oplus 1 \\oplus 0 \\oplus 1 \\oplus 2 = 3$.\n\nIn the second example, $n = 11_2 = 3$ and $m = 3$. Some good sequences are $[2, 2, 2]$, $[1, 0, 1]$, and $[2, 0, 1]$. However, a sequence $[2, 0, 0]$ is not good, because $\\text{cnt}_0 = 2$, $\\text{cnt}_2 = 1$. Therefore, if we set $i = 0$ and $j = 2$, $i < j$ holds, but $\\text{cnt}_i \\le \\text{cnt}_j$ does not.", "cfid": "2056F2"}
{"problem_id": "2056E", "problem_title": "E. Nested Segments", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2056/E", "problem_statement": "A set $A$ consisting of pairwise distinct segments $[l, r]$ with integer endpoints is called good if $1\\le l\\le r\\le n$, and for any pair of distinct segments $[l_i, r_i], [l_j, r_j]$ in $A$, exactly one of the following conditions holds:\n\n- $r_i < l_j$ or $r_j < l_i$ (the segments do not intersect)\n- $l_i \\le l_j \\le r_j \\le r_i$ or $l_j \\le l_i \\le r_i \\le r_j$ (one segment is fully contained within the other)\n\nYou are given a good set $S$ consisting of $m$ pairwise distinct segments $[l_i, r_i]$ with integer endpoints. You want to add as many additional segments to the set $S$ as possible while ensuring that set $S$ remains good.\n\nSince this task is too easy, you need to determine the number of different ways to add the maximum number of additional segments to $S$, ensuring that the set remains good. Two ways are considered different if there exists a segment that is being added in one of the ways, but not in the other.\n\nFormally, you need to find the number of good sets $T$ of distinct segments, such that $S$ is a subset of $T$ and $T$ has the maximum possible size. Since the result might be very large, compute the answer modulo $998\\,244\\,353$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\le n \\le 2 \\cdot 10^5$, $0 \\le m \\le 2 \\cdot 10^5$) — the maximum right endpoint of the segments, and the size of $S$.\n\nThe $i$-th of the next $m$ lines contains two integers $l_i$ and $r_i$ ($1 \\le l_i \\le r_i \\le n$) — the boundaries of the segments in set $S$.\n\nIt is guaranteed that the given set $S$ is good, and the segments in set $S$ are pairwise distinct.\n\nIt is guaranteed that both the sum of $n$ and the sum of $m$ over all test cases do not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer representing the number of different ways, modulo $998\\,244\\,353$, that you can add the maximum number of additional segments to set $S$ while ensuring that set $S$ remains good.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n1 0\n\n2 3\n\n1 1\n\n2 2\n\n1 2\n\n5 2\n\n1 3\n\n2 3\n\n4 1\n\n1 1\n\n6 2\n\n1 3\n\n4 6\n\n2300 0\n\n```\n\n#### Output #1\n\n```\n1\n1\n2\n5\n4\n187997613\n```\n\n### Note\n\nIn the first example, the only possible segment is $[1, 1]$, so $T = \\{[1, 1]\\}$ has the maximum size, and it is the only solution.\n\nIn the second example, it is not possible to add any additional segments to set $S$. Hence, the only way to add segments to $S$ is adding nothing.\n\nIn the third example, it is possible to add $7$ additional segments to $S$ while ensuring that the set remains good. It can be proven that adding more than $7$ additional segments to $S$ is not possible. There are exactly $2$ different ways to add these $7$ segments to $S$, and their respective sets $T$ are shown below:\n\n- $\\{[1, 1], [1, 3], [1, 4], [1, 5], [2, 2], [2, 3], [3, 3], [4, 4], [5, 5]\\}$\n- $\\{[1, 1], [1, 3], [1, 5], [2, 2], [2, 3], [3, 3], [4, 4], [4, 5], [5, 5]\\}$.\n\nIn the fourth example, there are exactly $5$ different ways to add a maximum of $6$ additional segments to $S$, and their respective sets $T$ are shown below:\n\n- $\\{[1, 1], [1, 2], [1, 3], [1, 4], [2, 2], [3, 3], [4, 4]\\}$\n- $\\{[1, 1], [1, 2], [1, 4], [2, 2], [3, 3], [3, 4], [4, 4]\\}$\n- $\\{[1, 1], [1, 3], [1, 4], [2, 2], [2, 3], [3, 3], [4, 4]\\}$\n- $\\{[1, 1], [1, 4], [2, 2], [2, 3], [2, 4], [3, 3], [4, 4]\\}$\n- $\\{[1, 1], [1, 4], [2, 2], [2, 4], [3, 3], [3, 4], [4, 4]\\}$", "cfid": "2056E"}
{"problem_id": "2055E", "problem_title": "E. Haystacks", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2055/E", "problem_statement": "On the next new moon, the universe will reset, beginning with Florida. It's up to Florida Man to stop it, but he first needs to find an important item.\n\nThere are $n$ haystacks labelled from $1$ to $n$, where haystack $i$ contains $a_i$ haybales. One of the haystacks has a needle hidden beneath it, but you do not know which one. Your task is to move the haybales so that each haystack is emptied at least once, allowing you to check if the needle is hidden under that particular haystack.\n\nHowever, the process is not that simple. Once a haystack $i$ is emptied for the first time, it will be assigned a height limit and can no longer contain more than $b_i$ haybales. More formally, a move is described as follows:\n\n- Choose two haystacks $i$ and $j$. If haystack $i$ has not been emptied before, or haystack $i$ contains strictly less than $b_i$ haybales, you may move exactly $1$ haybale from haystack $j$ to haystack $i$.\n\nNote: Before a haystack is emptied, it has no height limit, and you can move as many haybales as you want onto that haystack.\n\nCompute the minimum number of moves required to ensure that each haystack is emptied at least once, or report that it is impossible.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2\\le n\\le 5\\cdot 10^5$) — the number of haystacks.\n\nThe $i$-th of the next $n$ lines contains two integers $a_i$ and $b_i$ ($1\\le a_i, b_i\\le 10^9$) — the initial number of haybales in the $i$-th haystack, and the height limit that it is assigned after it is emptied for the first time.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print a single integer — the minimum number of moves required to ensure that each haystack is emptied at least once. If it is not possible to empty each haystack at least once, output -1.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n2\n\n3 5\n\n2 4\n\n2\n\n10 1\n\n1 10\n\n3\n\n1 3\n\n4 3\n\n1 1\n\n3\n\n5 4\n\n2 4\n\n1 10\n\n6\n\n2 1\n\n3 3\n\n5 4\n\n1 5\n\n1 6\n\n1 8\n\n5\n\n3 2\n\n1 2\n\n1 1\n\n1 3\n\n6 5\n\n2\n\n5 10\n\n7 12\n\n```\n\n#### Output #1\n\n```\n8\n-1\n8\n9\n14\n15\n19\n```\n\n### Note\n\nIn the first test case, we can do the following sequence of moves:\n\n- Move $3$ haybales from haystack $1$ to haystack $2$. Haystack $1$ is now emptied, and is assigned a height limit of $5$.\n- Move $5$ haybales from haystack $2$ to haystack $1$. Haystack $2$ is now emptied, and is assigned a height limit of $4$.\n\nThe above sequence requires $3 + 5 = 8$ moves. It is not possible to use less than $8$ moves as the following sequence of moves is invalid:\n\n- Move $2$ haybales from haystack $2$ to haystack $1$. Haystack $2$ is now emptied, and is assigned a height limit of $4$.\n- Move $4$ haybales from haystack $1$ to haystack $2$. Haystack $1$ now has $1$ haybale, while haystack $2$ has $4$ haybales.\n- Haystack $1$ cannot be emptied as haystack $2$ is already at its height limit of $4$, so no more haybales can be moved from haystack $1$ to haystack $2$.\n\nIn the second test case, the task is impossible. This is because the height limits of both haystacks are too small that once one of the haystacks is emptied, the other haystack cannot be emptied due to the small height limits.\n\nIn the third test case, the following sequence of moves can be shown to be optimal:\n\n- Move $1$ haybale from haystack $1$ to haystack $3$. Haystack $1$ is now emptied, and is assigned a height limit of $3$.\n- Move $3$ haybales from haystack $2$ to haystack $1$.\n- Move $1$ haybale from haystack $2$ to haystack $3$. Haystack $2$ is now emptied and is assigned a height limit of $3$.\n- Move $3$ haybales from haystack $3$ to haystack $2$. Haystack $3$ is now emptied, and is assigned a height limit of $1$.\n\nThe above sequence requires $1 + 3 + 1 + 3 = 8$ moves.", "cfid": "2055E"}
{"problem_id": "2055D", "problem_title": "D. Scarecrow", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2055/D", "problem_statement": "At his orange orchard, Florida Man receives yet another spam letter, delivered by a crow. Naturally, he's sending it back in the most inconvenient manner possible.\n\nA crow is sitting at position $0$ of the number line. There are $n$ scarecrows positioned at integer coordinates $a_1, a_2, \\ldots, a_n$ along the number line. These scarecrows have been enchanted, allowing them to move left and right at a speed of $1$ unit per second.\n\nThe crow is afraid of scarecrows and wants to stay at least a distance of $k$ ahead of the nearest scarecrow positioned at or before it. To do so, the crow uses its teleportation ability as follows:\n\n- Let $x$ be the current position of the crow, and let $y$ be the largest position of a scarecrow such that $y \\le x$. If $x - y < k$, meaning the scarecrow is too close, the crow will instantly teleport to position $y + k$.\n\nThis teleportation happens instantly and continuously. The crow will keep checking for scarecrows positioned at or to the left of him and teleport whenever one gets too close (which could happen at non-integral times). Note that besides this teleportation ability, the crow will not move on its own.\n\nYour task is to determine the minimum time required to make the crow teleport to a position greater than or equal to $\\ell$, assuming the scarecrows move optimally to allow the crow to reach its goal. For convenience, you are asked to output twice the minimum time needed for the crow to reach the target position $\\ell$. It can be proven that this value will always be an integer.\n\nNote that the scarecrows can start, stop, or change direction at any time (possibly at non-integral times).\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n, k, \\ell$ ($1 \\leq n \\leq 2 \\cdot 10^5$, $1 \\leq k \\leq \\ell \\leq 10^8$) — the number of scarecrows, the teleportation distance, and the target position of the crow, respectively.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\leq a_1 \\leq a_2 \\leq \\ldots \\leq a_n \\leq \\ell$) — the initial positions of the $n$ scarecrows.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer representing the twice the minimum time required for the crow to teleport to a position greater than or equal to $\\ell$.\n\n### Example\n\n#### Input #1\n\n```\n\n9\n\n1 3 5\n\n0\n\n3 2 5\n\n2 5 5\n\n1 10 10\n\n10\n\n10 1 10\n\n0 1 2 3 4 5 6 7 8 9\n\n2 1 2\n\n0 0\n\n2 1 2\n\n0 2\n\n2 1 3\n\n0 2\n\n2 2 4\n\n1 1\n\n9 12 54\n\n3 3 8 24 25 27 29 34 53\n\n```\n\n#### Output #1\n\n```\n4\n5\n20\n0\n2\n1\n2\n2\n7\n```\n\n### Note\n\nIn the first test case, the crow instantly teleports to position $3$ due to the scarecrow at position $0$. This scarecrow may then move to position $2$, causing the crow to continuously move from position $3$ to position $5$, completing the trip in $2$ seconds. Therefore, the output is $4$.\n\nIn the second test case, scarecrow $1$ and scarecrow $2$ can move to positions $0$ and $3$, respectively, in $2$ seconds, while scarecrow $3$ remains at position $5$. The crow teleports to position $2$ due to scarecrow $1$. Then, scarecrow $1$ moves to the right while scarecrow $2$ and scarecrow $3$ move to the left for $0.5$ seconds. This causes the crow to continuously move from position $2$ to position $2.5$ due to scarecrow $1$ moving right from position $0$. After this half second, the scarecrows will be at positions $0.5, 2.5, 4.5$. Scarecrow $2$, now at position $2.5$, causes the crow to instantly teleport to position $4.5$, and scarecrow $3$ at position $4.5$ causes it to instantly teleport to position $6.5$, which exceeds $\\ell = 5$. Therefore, the crow finishes the trip in just $2.5$ seconds, and the output is $5$.\n\nIt can be shown that these are the minimum possible times for both test cases.", "cfid": "2055D"}
{"problem_id": "2057G", "problem_title": "G. Secret Message", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2057/G", "problem_statement": "Every Saturday, Alexander B., a teacher of parallel X, writes a secret message to Alexander G., a teacher of parallel B, in the evening. Since Alexander G. is giving a lecture at that time and the message is very important, Alexander B. has to write this message on an interactive online board.\n\nThe interactive online board is a grid consisting of $n$ rows and $m$ columns, where each cell is $1 \\times 1$ in size. Some cells of this board are already filled in, and it is impossible to write a message in them; such cells are marked with the symbol \".\", while the remaining cells are called free and are marked with the symbol \"#\".\n\nLet us introduce two characteristics of the online board:\n\n- $s$ is the number of free cells.\n- $p$ is the perimeter of the grid figure formed by the union of free cells.\n\nLet $A$ be the set of free cells. Your goal is to find a set of cells $S \\subseteq A$ that satisfies the following properties:\n\n- $|S| \\le \\frac{1}{5} \\cdot (s+p)$.\n- Any cell from $A$ either lies in $S$ or shares a side with some cell from $S$.\n\nWe can show that at least one set $S$ satisfying these properties exists; you are required to find any suitable one.\n\n### Input\n\nThe first line contains the number $t$ ($1 \\le t \\le 80\\,000$) — the number of test cases.\n\nIn the first line of each test case, the numbers $n$ and $m$ ($1 \\le n, m \\le 2 \\cdot 10^6$) — the dimensions of the grid are given.\n\nThe following $n$ lines contain the description of the grid.\n\nIt is guaranteed that the sum of $n \\cdot m$ across all test cases does not exceed $2 \\cdot 10^6$.\n\n### Output\n\nFor each test case, output $n$ lines consisting of $m$ symbols, where each symbol encodes the state of the cell:\n\n- \"#\" — the cell is in $A$ but not in $S$;\n- \"S\" — the cell is in both $A$ and $S$;\n- \".\" — the cell is neither in $A$ nor in $S$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3 3\n\n.#.\n\n###\n\n.#.\n\n2 6\n\n######\n\n######\n\n3 7\n\n###....\n\n#.#.###\n\n###....\n\n```\n\n#### Output #1\n\n```\n.#.\n#S#\n.#.\n#S##S#\n#S##S#\nS#S....\n#.#.S#S\nS#S....\n```\n\n### Note\n\nIn the first example, $s=5$ and $p=12$, thus the number of cells in $S$ must not exceed $\\frac{1}{5} \\cdot (5+12) = 3.4$, meaning $|S| \\le 3$. Note that the presented set $S$ consists of $1$ cell and clearly satisfies all the constraints.\n\nIn the second example, $s=12$ and $p=16$, thus the number of cells in $S$ must not exceed $\\frac{1}{5} \\cdot (12+16)= 5.6$, meaning $|S| \\le 5$. Note that the presented set $S$ consists of $4$ cells and clearly satisfies all the constraints.\n\nIn the third example, we will explain what perimeter is, as it may not be obvious. Any grid figure has a boundary, which can be represented as a union of segments that do not intersect at interior points. Thus, in the picture below, the thick black line denotes the boundary of the figure formed by the union of free cells. The total length of these segments is $p=24$.\n\nAt the same time, the value $s=11$ and the upper limit is $|S| \\le 7$, the presented set has a size of $6$ and clearly satisfies all the constraints.\n\n![](https://espresso.codeforces.com/607d4d227788f62cc30899a18cf34fb632683dcf.png)", "cfid": "2057G"}
{"problem_id": "2057D", "problem_title": "D. Gifts Order", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2057/D", "problem_statement": "\"T-Generation\" has decided to purchase gifts for various needs; thus, they have $n$ different sweaters numbered from $1$ to $n$. The $i$-th sweater has a size of $a_i$. Now they need to send some subsegment of sweaters to an olympiad. It is necessary that the sweaters fit as many people as possible, but without having to take too many of them.\n\nThey need to choose two indices $l$ and $r$ ($1 \\le l \\le r \\le n$) to maximize the convenience equal to \n\n$$\\operatorname{max} (a_l, a_{l + 1}, \\ldots, a_r) - \\operatorname{min} (a_l, a_{l + 1}, \\ldots, a_r) - (r - l),$$\n\nthat is, the range of sizes minus the number of sweaters.\n\nSometimes the sizes of the sweaters change; it is known that there have been $q$ changes, in each change, the size of the $p$-th sweater becomes $x$.\n\nHelp the \"T-Generation\" team and determine the maximum convenience among all possible pairs $(l, r)$ initially, as well as after each size change.\n\n### Input\n\nEach test consists of several test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $q$ ($1 \\le n, q \\le 2 \\cdot 10^5$) — the number of sweaters and the number of size changes.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$) — the sizes of the sweaters.\n\nEach of the following $q$ lines of each test case contains two integers $p$ and $x$ ($1 \\le p \\le n$, $1 \\le x \\le 10^9$) — the next size change.\n\nIt is guaranteed that the sum of the values of $n$ and the sum of the values of $q$ across all test cases do not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the maximum value of convenience among all possible pairs $(l, r)$ before any actions, as well as after each size change.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2 2\n\n1 10\n\n1 10\n\n2 2\n\n5 3\n\n1 2 3 4 5\n\n3 7\n\n1 4\n\n5 2\n\n8 5\n\n7 4 2 4 8 2 1 4\n\n5 4\n\n1 10\n\n3 2\n\n8 11\n\n7 7\n\n```\n\n#### Output #1\n\n```\n8\n0\n7\n0\n4\n4\n4\n5\n3\n6\n6\n9\n7\n```\n\n### Note\n\nConsider the first test case.\n\n- Before any changes, you can take all the sweaters; then the convenience is equal to $\\operatorname{max} (a_1, a_2) - \\operatorname{min} (a_1, a_2) - (2 - 1) = 10 - 1 - 1 = 8$.\n- After the first query, the sizes of both sweaters will be equal to $10$, you can only take the first sweater and the convenience is equal to $10 - 10 - 0 = 0$.\n- After the second query, the size of the first sweater will be $10$, and the second $2$, you can take all the sweaters and the convenience is equal to $\\operatorname{max} (a_1, a_2) - \\operatorname{min} (a_1, a_2) - (2 - 1) = 10 - 2 - 1 = 7$.", "cfid": "2057D"}
{"problem_id": "2057E2", "problem_title": "E2. Another Exercise on Graphs (hard version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2057/E2", "problem_statement": "This is the hard version of the problem. The difference between the versions is that in this version, there is no additional constraint on $m$. You can hack only if you solved all versions of this problem.\n\nRecently, the instructors of \"T-generation\" needed to create a training contest. They were missing one problem, and there was not a single problem on graphs in the contest, so they came up with the following problem.\n\nYou are given a connected weighted undirected graph with $n$ vertices and $m$ edges, which does not contain self-loops or multiple edges.\n\nThere are $q$ queries of the form $(a, b, k)$: among all paths from vertex $a$ to vertex $b$, find the smallest $k$-th maximum weight of edges on the path$^{\\dagger}$.\n\nThe instructors thought that the problem sounded very interesting, but there is one catch. They do not know how to solve it. Help them and solve the problem, as there are only a few hours left until the contest starts.\n\n$^{\\dagger}$ Let $w_1 \\ge w_2 \\ge \\ldots \\ge w_{h}$ be the weights of all edges in a path, in non-increasing order. The $k$-th maximum weight of the edges on this path is $w_{k}$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 100$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each set of test case contains three integers $n, m$ and $q$ ($2 \\le n \\le 400$, $n - 1 \\le m \\le \\frac{n \\cdot (n - 1)}{2}$, $1 \\le q \\le 3 \\cdot 10^5$) — the number of vertices, the number of edges, and the number of questions, respectively.\n\nEach of the following $m$ lines of each set of test case contains three integers $v, u$ and $w$ ($1 \\le v, u \\le n$, $1 \\le w \\le 10^9$) — the ends of the next edge of the graph and its weight, respectively. It is guaranteed that the graph does not contain self-loops and multiple edges.\n\nEach of the following $q$ lines of each set of test case contains three integers $a, b$ and $k$ ($1 \\le a, b \\le n$, $k \\ge 1$) — the next question. It is guaranteed that any path from vertex $a$ to vertex $b$ contains at least $k$ edges.\n\nIt is guaranteed that the sum of the values of $n$ across all sets of test cases does not exceed $400$.\n\nIt is guaranteed that the sum of the values of $q$ across all sets of test cases does not exceed $3 \\cdot 10^5$.\n\n### Output\n\nFor each set of test case, output the answers to all questions.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n4 4 2\n\n1 2 2\n\n2 4 2\n\n1 3 4\n\n3 4 1\n\n1 4 2\n\n2 3 1\n\n6 7 3\n\n1 2 10\n\n2 3 3\n\n3 4 9\n\n4 5 2\n\n5 6 1\n\n2 4 10\n\n4 6 10\n\n1 6 3\n\n1 6 2\n\n2 4 1\n\n11 17 10\n\n1 4 5\n\n1 3 19\n\n1 2 10\n\n3 2 13\n\n4 5 1\n\n4 6 11\n\n3 5 9\n\n3 6 18\n\n2 7 17\n\n5 8 15\n\n5 10 8\n\n6 9 4\n\n7 10 20\n\n7 8 16\n\n8 11 3\n\n9 11 6\n\n10 11 14\n\n3 11 1\n\n3 11 3\n\n1 11 1\n\n1 11 4\n\n1 11 3\n\n8 2 2\n\n10 4 1\n\n3 9 2\n\n3 9 1\n\n6 7 3\n\n```\n\n#### Output #1\n\n```\n1 2\n2 9 9\n11 3 11 1 3 10 8 4 11 4\n```\n\n### Note\n\nIn the first set of test cases, one of the optimal paths in the first query is the path $1 \\rightarrow 3 \\rightarrow 4$; the $2$-nd maximum weight of the edges on this path is $1$. In the second query, one of the optimal paths is $2 \\rightarrow 4 \\rightarrow 3$; $1$-st maximum weight of the edges is $2$.\n\nIn the second set of input data, one of the optimal paths in the first query is the path $1 \\rightarrow 2 \\rightarrow 4 \\rightarrow 5 \\rightarrow 6$; the $3$-rd maximum weight of the edges on this path is $2$.", "cfid": "2057E2"}
{"problem_id": "2057E1", "problem_title": "E1. Another Exercise on Graphs (Easy Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2057/E1", "problem_statement": "This is the easy version of the problem. The difference between the versions is that in this version, there is an additional constraint on $m$. You can hack only if you solved all versions of this problem.\n\nRecently, the instructors of \"T-generation\" needed to create a training contest. They were missing one problem, and there was not a single problem on graphs in the contest, so they came up with the following problem.\n\nYou are given a connected weighted undirected graph with $n$ vertices and $m$ edges, which does not contain self-loops or multiple edges.\n\nThere are $q$ queries of the form $(a, b, k)$: among all paths from vertex $a$ to vertex $b$, find the smallest $k$-th maximum weight of edges on the path$^{\\dagger}$.\n\nThe instructors thought that the problem sounded very interesting, but there is one catch. They do not know how to solve it. Help them and solve the problem, as there are only a few hours left until the contest starts.\n\n$^{\\dagger}$ Let $w_1 \\ge w_2 \\ge \\ldots \\ge w_{h}$ be the weights of all edges in a path, in non-increasing order. The $k$-th maximum weight of the edges on this path is $w_{k}$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 100$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each set of test case contains three integers $n, m$ and $q$ ($2 \\le n \\le 400$, $n - 1 \\le m \\le \\operatorname{min}(\\mathbf{400}, \\frac{n \\cdot (n - 1)}{2})$, $1 \\le q \\le 3 \\cdot 10^5$) — the number of vertices, the number of edges, and the number of questions, respectively.\n\nEach of the following $m$ lines of each set of test case contains three integers $v, u$ and $w$ ($1 \\le v, u \\le n$, $1 \\le w \\le 10^9$) — the ends of the next edge of the graph and its weight, respectively. It is guaranteed that the graph does not contain self-loops and multiple edges.\n\nEach of the following $q$ lines of each set of test case contains three integers $a, b$ and $k$ ($1 \\le a, b \\le n$, $k \\ge 1$) — the next question. It is guaranteed that any path from vertex $a$ to vertex $b$ contains at least $k$ edges.\n\nIt is guaranteed that the sum of the values of $n$ across all sets of test cases does not exceed $400$.\n\nIt is guaranteed that the sum of the values of $m$ across all sets of test cases does not exceed $400$.\n\nIt is guaranteed that the sum of the values of $q$ across all sets of test cases does not exceed $3 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the answers to all questions.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n4 4 2\n\n1 2 2\n\n2 4 2\n\n1 3 4\n\n3 4 1\n\n1 4 2\n\n2 3 1\n\n6 7 3\n\n1 2 10\n\n2 3 3\n\n3 4 9\n\n4 5 2\n\n5 6 1\n\n2 4 10\n\n4 6 10\n\n1 6 3\n\n1 6 2\n\n2 4 1\n\n11 17 10\n\n1 4 5\n\n1 3 19\n\n1 2 10\n\n3 2 13\n\n4 5 1\n\n4 6 11\n\n3 5 9\n\n3 6 18\n\n2 7 17\n\n5 8 15\n\n5 10 8\n\n6 9 4\n\n7 10 20\n\n7 8 16\n\n8 11 3\n\n9 11 6\n\n10 11 14\n\n3 11 1\n\n3 11 3\n\n1 11 1\n\n1 11 4\n\n1 11 3\n\n8 2 2\n\n10 4 1\n\n3 9 2\n\n3 9 1\n\n6 7 3\n\n```\n\n#### Output #1\n\n```\n1 2\n2 9 9\n11 3 11 1 3 10 8 4 11 4\n```\n\n### Note\n\nIn the first set of test cases, one of the optimal paths in the first query is the path $1 \\rightarrow 3 \\rightarrow 4$; the $2$-nd maximum weight of the edges on this path is $1$. In the second query, one of the optimal paths is $2 \\rightarrow 4 \\rightarrow 3$; $1$-st maximum weight of the edges is $2$.\n\nIn the second set of input data, one of the optimal paths in the first query is the path $1 \\rightarrow 2 \\rightarrow 4 \\rightarrow 5 \\rightarrow 6$; the $3$-rd maximum weight of the edges on this path is $2$.", "cfid": "2057E1"}
{"problem_id": "2089E", "problem_title": "E. Black Cat Collapse", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2089/E", "problem_statement": "The world of the black cat is collapsing.\n\nIn this world, which can be represented as a rooted tree with root at node $1$, Liki and Sasami need to uncover the truth about the world.\n\nEach day, they can explore a node $u$ that has not yet collapsed. After this exploration, the black cat causes $u$ and all nodes in its subtree to collapse. Additionally, at the end of the $i$ th day, if it exists, the number $n-i+1$ node will also collapse.\n\nFor each $i$ from $1$ to $n$, determine the number of exploration schemes where Liki and Sasami explore exactly $i$ days (i.e., they perform exactly $i$ operations), with the last exploration being at node $1$. The result should be computed modulo $998\\,244\\,353$.\n\nNote: It is guaranteed that nodes $1$ to $n$ can form a \"DFS\" order of the tree, meaning there exists a depth-first search traversal where the $i$ th visited node is $i$.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains exactly one number $n$ ($3 \\le n \\le 80$).\n\nEach of the following $n - 1$ lines contains two integers $u_i$ and $v_i$, representing two vertices connected by an edge ($1 \\le u_i, v_i \\le n$). It is guaranteed that the given edges form a tree. It is also guaranteed that the vertices can form a \"DFS\" traversal order.\n\nIt is guaranteed that the sum of $n$ for all test cases does not exceed $80$\n\n### Output\n\nFor each test case, print $n$ integers, where the $i$ th integer represents the number of exploration schemes for exactly $i$ days, modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n4\n\n1 2\n\n2 3\n\n2 4\n\n7\n\n4 2\n\n6 1\n\n5 1\n\n7 6\n\n2 3\n\n1 2\n\n```\n\n#### Output #1\n\n```\n1 3 3 1\n1 6 23 48 43 17 1\n```\n\n### Note\n\nFor the first test case, the following operation sequences are legal:\n\n$\\{1\\},\\{2,1\\},\\{3,1\\},\\{4,1\\},\\{3,2,1\\},\\{4,2,1\\},\\{4,3,1\\},\\{4,3,2,1\\}$.", "cfid": "2089E"}
{"problem_id": "2089C2", "problem_title": "C2. Key of Like (Hard Version)", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2089/C2", "problem_statement": "This is the hard version of the problem. The difference between the versions is that in this version, $k$ can be non-zero. You can hack only if you solved all versions of this problem.\n\nA toy box is a refrigerator filled with childhood delight. Like weakness, struggle, hope ... When such a sleeper is reawakened, what kind of surprises will be waiting?\n\nM received her toy box as a birthday present from her mother. A jewellery designer would definitely spare no effort in decorating yet another priceless masterpiece as a starry firmament with exquisitely shaped gemstones. In addition, $l$ distinct locks secure the tiny universe of her lovely daughter: a hair clip featuring a flower design, a weathered feather pen, a balloon shaped like the letter M ... each piece obscures a precious moment.\n\nA few days ago, M rediscovered her toy box when she was reorganizing her bedroom, along with a ring of keys uniquely designed for the toy box. Attached to the key ring are $(l + k)$ keys, of which $l$ keys are able to open one of the $l$ locks correspondingly, while the other $k$ keys are nothing but counterfeits to discourage brute-force attack. To remind the correspondence, M's mother adorned each key with a gemstone of a different type. However, passing days have faded M's memory away.\n\n\"... So I have to turn to you all,\" M said while laying that ring of keys on the table.\n\nK picked up the keys and examined them carefully. \"The appearance of these keys unveils nothing fruitful. Thus, I am afraid that we shall inspect them sequentially.\"\n\nAlthough everyone is willing to help M, nobody has a plan. Observing others' reactions, T suggested, \"Let's play a game. Everyone tries a key in turn, and who opens the most locks is amazing.\"\n\n$n$ members, including M herself, take turns to unlock the toy box recursively in the same order until all the $l$ locks are unlocked. At each turn, the current member only selects a single key and tests it on exactly one of the locks. To open the toy box as soon as possible, every member chooses the key and the lock that maximize the probability of being a successful match. If there are multiple such pairs, a member will randomly choose one of such pairs with equal probability. Apparently, if a lock has been matched with a key, then neither the lock nor the key will be chosen again in following attempts.\n\nAssume that at the very beginning, the probability that a lock can be opened by any key is equal. If everyone always tries the optimal pairs of keys and locks based on all the historical trials, what will the expected number of successful matches be for each member?\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 100$). The description of the test cases follows.\n\nThe only line of the input contains three integers, $n$, $l$, $k$ ($1 \\leq n \\leq 100, 1 \\leq l \\leq 5000, 0 \\leq k \\leq 25$) — the number of members participating in the game, the number of locks, and the number of counterfeit keys.\n\nIt is guaranteed that the sum of $l$ across all test cases does not exceed $5000$.\n\n### Output\n\nFor each test case, output a single line with $n$ integers $e_1, \\ldots, e_n$, where $e_i$ represents the expected number of successful matches, modulo $10^9 + 7$.\n\nFormally, let $M = 10^9 + 7$. It can be shown that the exact answer can be expressed as an irreducible fraction $\\frac{p}{q}$, where $p$ and $q$ are integers and $q \\not \\equiv 0 \\pmod{M}$. Output the integer equal to $p \\cdot q^{-1} \\bmod M$. In other words, output such an integer $e_i$ that $0 \\le x < M$ and $e_i \\cdot q \\equiv p \\pmod{M}$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3 1 4\n\n3 2 0\n\n25 2 5\n\n4 102 9\n\n```\n\n#### Output #1\n\n```\n800000006 800000006 400000003\n500000004 1 500000004\n142857144 166666668 615646263 639455787 234126986 257936510 195918369 502040820 478316330 81264173 190523433 471438023 23809524 0 0 0 0 0 0 0 0 0 0 0 0\n568832210 85779764 969938175 375449967\n```\n\n### Note\n\nFor the first test case, there is only $1$ lock, so the strategy will always be choosing any key that no one has ever tried. Since there are $1 + 4 = 5$ keys in total, the probability that each member successfully opens the lock will be $2/5, 2/5, 1/5$ respectively, which are also the expected numbers of successful matches.\n\nFor the second test case, there are exactly $2$ locks and $2$ keys, with each key corresponding to one of the locks. Without extra information, the first member randomly chooses a key and a lock with equal probabilities, for which the probability of success is $1/2$.\n\n- If the first member succeeds, the second member will open the other lock with the other key.\n- If the first member fails, then the key she selected can open the other lock, and the other key must correspond to the lock she chose. This information allows both the second and the third member to open a lock.\n\nIn conclusion, the expected numbers of successful matches will be:\n\n\n\n$$ \\begin{split} e_1 &= \\frac{1}{2}\\times 1 + \\frac{1}{2}\\times 0 = \\frac{1}{2} \\equiv 500,000,004 \\pmod {10^9+7},\\\\ e_2 &= \\frac{1}{2}\\times 1 + \\frac{1}{2} \\times 1 = 1,\\\\ e_3 &= \\frac{1}{2}\\times 0 + \\frac{1}{2} \\times 1 = \\frac{1}{2} \\equiv 500,000,004\\pmod {10^9+7}. \\end{split} $$\n\n", "cfid": "2089C2"}
{"problem_id": "2089D", "problem_title": "D. Conditional Operators", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2089/D", "problem_statement": "In C++, the conditional operator ?: is used as the value of x?y:z is $y$ if $x$ is true; otherwise, the value is $z$. $x$, $y$, and $z$ may also be expressions. It is right-associated; that is, a?b:c?d:e is equivalent to a?b:(c?d:e). $0$ means false and $1$ means true.\n\nGiven a binary string with length $2n+1$, you need to show whether the value of the expression can be $1$ after inserting $n$ conditional operators into the string. You can use parentheses. For example, the string 10101 can be transformed into (1?0:1)?0:1, whose value is $1$.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10\\,000)$, the number of test cases. The description of the test cases follows.\n\nIn the first line of each test case, there is a single integer $n$ ($1 \\le n \\le 1.5 \\cdot 10^5)$.\n\nIn the second line of each test case, there is a binary string of length $2n + 1$.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $1.5 \\cdot 10^5$.\n\n### Output\n\nFor each test case, on the first line, output Yes if the string can be transformed into an expression of value $1$; otherwise, output No.\n\nIf the answer is Yes, output the expression on the second line. You can use parentheses, but the order of the characters in the original string must remain the same. The length of your expression must be no more than $10n+1000$.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n2\n\n10101\n\n2\n\n00000\n\n```\n\n#### Output #1\n\n```\nYes\n(1?0:1)?(0):1\nNo\n```\n\n### Note\n\nThe first test case — is the one mentioned in the problem description.\n\nIn the second test case, it is clear that regardless of how the conditional operator is used, the result will always be zero.", "cfid": "2089D"}
{"problem_id": "2077F", "problem_title": "F. AND x OR", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2077/F", "problem_statement": "Suppose you have two arrays $c$ and $d$, each of length $k$. The pair $(c, d)$ is called good if $c$ can be changed to $d$ by performing the following operation any number of times.\n\n- Select two distinct indices $i$ and $j$ ($1 \\leq i, j \\leq k$, $i \\neq j$) and a nonnegative integer $x$ ($0 \\leq x < 2^{30}$). Then, apply the following transformations:\n  - $c_i := c_i \\mathbin{\\&} x$, where $\\&$ denotes the [bitwise AND operation](https://en.wikipedia.org/wiki/Bitwise_operation#AND).\n  - $c_j := c_j \\mathbin{|} x$, where $|$ denotes the [bitwise OR operation](https://en.wikipedia.org/wiki/Bitwise_operation#OR).\n\nYou are given two arrays $a$ and $b$, both of length $n$, containing nonnegative integers not exceeding $m$.\n\nYou can perform two types of moves on these arrays any number of times:\n\n1. Select an index $i$ ($1 \\leq i \\leq n$) and set $a_i := a_i + 1$.\n2. Select an index $i$ ($1 \\leq i \\leq n$) and set $b_i := b_i + 1$.\n\nNote that the elements of $a$ and $b$ may exceed $m$ at some point while performing the moves.\n\nFind the minimum number of moves required to make the pair $(a, b)$ good.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\leq n, m \\leq 2 \\cdot 10^6$) — the length of arrays $a$ and $b$, and the maximum possible value in these arrays, respectively.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\leq a_i \\leq m$) — denoting the array $a$.\n\nThe third line contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($0 \\leq b_i \\leq m$) — denoting the array $b$.\n\nAdditionally, it is guaranteed that the sum of all values of $n$ and the sum of all values of $m$ across all test cases do not exceed $2 \\cdot 10^6$.\n\n### Output\n\nFor each test case, output a single integer — the minimum number of moves required to make the pair $(a, b)$ good.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n4 3\n\n0 1 2 3\n\n0 1 2 3\n\n3 32\n\n8 9 32\n\n8 6 32\n\n5 64\n\n5 7 16 32 64\n\n4 8 16 32 64\n\n4 11\n\n9 1 4 3\n\n8 11 6 2\n\n5 10\n\n7 9 5 4 2\n\n3 10 6 5 9\n\n```\n\n#### Output #1\n\n```\n0\n2\n2\n0\n1\n```\n\n### Note\n\nIn the first case, we already have $a = b$.\n\nIn the second case, we can perform move $2$ on index $i = 2$ twice. The array $b$ becomes $[8, 8, 32]$. We can see that $(a, b)$ is now good.\n\nIn the third case, we can perform move $2$ on index $i = 1$, then perform move $1$ on index $i = 2$. It can be proven that you cannot make the pair $(a, b)$ good in fewer than $2$ moves.", "cfid": "2077F"}
{"problem_id": "2077G", "problem_title": "G. RGB Walking", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2077/G", "problem_statement": "[Red and Blue and Green - fn and Silentroom](https://www.youtube.com/watch?v=UeN7U474cxE)\n\n⠀\n\nYou are given a connected graph with $n$ vertices and $m$ bidirectional edges with weight not exceeding $x$. The $i$-th edge connects vertices $u_i$ and $v_i$, has weight $w_i$, and is assigned a color $c_i$ ($1 \\leq i \\leq m$, $1 \\leq u_i, v_i \\leq n$). The color $c_i$ is either red, green, or blue. It is guaranteed that there is at least one edge of each color.\n\nFor a walk where vertices and edges may be repeated, let $s_r, s_g, s_b$ denote the sum of the weights of the red, green, and blue edges that the walk passes through, respectively. If an edge is traversed multiple times, each traversal is counted separately.\n\nFind the minimum value of $\\max(s_r, s_g, s_b) - \\min(s_r, s_g, s_b)$ over all possible walks from vertex $1$ to vertex $n$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n$, $m$, and $x$ ($4 \\leq n \\leq 2 \\cdot 10^5$, $n-1 \\leq m \\leq 2 \\cdot 10^5$, $1 \\leq x \\leq 2 \\cdot 10^5$) — the number of vertices, the number of edges in the graph, and the upper bound on the weight of the edges, respectively.\n\nThe next $m$ lines each contain three integers $u_i, v_i, w_i$ and a letter $c_i$ ($1 \\leq u_i, v_i \\leq n$, $1 \\leq w_i \\leq x$), representing a bidirectional edge between vertices $u_i$ and $v_i$ with weight $w_i$ and color $c_i$. The color $c_i$ is either 'r', 'g', or 'b', denoting red, green, and blue, respectively.\n\nIt is guaranteed that the graph is connected and contains at least one edge of each color. The graph may also contain multiple edges and self-loops.\n\nAdditionally, it is guaranteed that the total sum of all values of $n$, the total sum of all values of $m$, and the total sum of all values of $x$ across all test cases do not exceed $2 \\cdot 10^5$ individually.\n\n### Output\n\nFor each test case, output a single integer — the minimum value of $\\max(s_r, s_g, s_b) - \\min(s_r, s_g, s_b)$ over all walks from vertex $1$ to vertex $n$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n4 3 3\n\n1 2 2 r\n\n2 3 3 g\n\n3 4 2 b\n\n4 5 4\n\n1 2 1 r\n\n1 1 1 r\n\n2 1 1 r\n\n2 3 4 g\n\n3 4 4 b\n\n4 6 4\n\n1 2 2 r\n\n1 2 2 r\n\n2 3 3 b\n\n1 3 4 r\n\n1 4 1 g\n\n3 4 4 g\n\n```\n\n#### Output #1\n\n```\n1\n0\n0\n```\n\n### Note\n\nIn the first test case, the optimal path is $1 \\to 2 \\to 3 \\to 4$. The edges used are:\n\n- $1 \\to 2$ (red, weight $2$)\n- $2 \\to 3$ (green, weight $3$)\n- $3 \\to 4$ (blue, weight $2$)\n\nWe have $s_r = 2$, $s_g = 3$, and $s_b = 2$. Thus, the answer is $1$.\n\nIn the second test case, one of the optimal paths is $1 \\to 1 \\to 2 \\to 1 \\to 2 \\to 3 \\to 4$. The edges used are:\n\n- $1 \\to 1$ (red, weight $1$)\n- $1 \\to 2$ (red, weight $1$)\n- $2 \\to 1$ (red, weight $1$)\n- $1 \\to 2$ (red, weight $1$)\n- $2 \\to 3$ (green, weight $4$)\n- $3 \\to 4$ (blue, weight $4$)\n\nWe have $s_r = s_g = s_b = 4$. Thus, the answer is $0$.", "cfid": "2077G"}
{"problem_id": "2077D", "problem_title": "D. Maximum Polygon", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2077/D", "problem_statement": "Given an array $a$ of length $n$, determine the lexicographically largest$^{\\text{∗}}$ subsequence$^{\\text{†}}$ $s$ of $a$ such that $s$ can be the side lengths of a polygon.\n\nRecall that $s$ can be the side lengths of a polygon if and only if $|s| \\geq 3$ and\n\n\n\n$$ 2 \\cdot \\max(s_1, s_2, \\ldots, s_{|s|}) < s_1 + s_2 + \\ldots + s_{|s|}. $$\n\nIf no such subsequence $s$ exists, print $-1$.\n\n$^{\\text{∗}}$A sequence $x$ is lexicographically smaller than a sequence $y$ if and only if one of the following holds:\n\n- $x$ is a prefix of $y$, but $x \\ne y$;\n- in the first position where $x$ and $y$ differ, the sequence $x$ has a smaller element than the corresponding element in $y$.\n\n$^{\\text{†}}$A sequence $x$ is a subsequence of a sequence $y$ if $x$ can be obtained from $y$ by deleting several (possibly zero or all) elements.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($3 \\leq n \\leq 2 \\cdot 10^5$) — the length of the array $a$.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$) — the array $a$.\n\nIt is guaranteed that the total sum of all values of $n$ across all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the answer in the following format:\n\nIf the answer exists, output the following.\n\nIn the first line, output the integer $k$ ($1 \\leq k \\leq n$) — the length of the subsequence $s$.\n\nIn the second line, output $k$ integers $s_1, s_2, \\ldots, s_k$ ($1 \\leq s_i \\leq 10^9$, $s$ is a subsequence of $a$) — the subsequence $s$. Note that the desired output is the value, not the index.\n\nOtherwise, output a single line with the integer $-1$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3\n\n3 1 2\n\n4\n\n1 4 2 3\n\n6\n\n1 6 4 5 3 2\n\n6\n\n43 12 99 53 22 4\n\n7\n\n9 764 54 73 22 23 1\n\n```\n\n#### Output #1\n\n```\n-1\n3\n4 2 3\n4\n6 5 3 2\n5\n43 99 53 22 4\n4\n54 73 23 1\n```\n\n### Note\n\nIn the first test case, there are no subsequences that can be the side lengths of a polygon.\n\nIn the second test case, there are $2$ subsequences that can be the side lengths of a polygon: $1, 4, 2, 3$ and $4, 2, 3$. The latter is the lexicographically larger subsequence.", "cfid": "2077D"}
{"problem_id": "2066E", "problem_title": "E. Tropical Season", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2066/E", "problem_statement": "You have $n$ barrels of infinite capacity. The $i$-th barrel initially contains $a_i$ kilograms of water. In this problem, we assume that all barrels weigh the same.\n\nYou know that exactly one of the barrels has a small amount of tropical poison distributed on its surface, with a total weight of $0.179$ kilograms. However, you do not know which barrel contains the poison. Your task is to identify this poisonous barrel.\n\nAll the barrels are on scales. Unfortunately, the scales do not show the exact weight of each barrel. Instead, for each pair of barrels, they show the result of a comparison between the weights of those barrels. Thus, for any two barrels, you can determine whether their weights are equal, and if not, which barrel is heavier. The poison and water are included in the weight of the barrel.\n\nThe scales are always turned on, and the information from them can be used an unlimited number of times.\n\nYou also have the ability to pour water. You can pour water from any barrel into any other barrel in any amounts.\n\nHowever, to pour water, you must physically handle the barrel from which you are pouring, so if that happens to be the poisonous barrel, you will die. This outcome must be avoided.\n\nHowever, you can pour water into the poisonous barrel without touching it.\n\nIn other words, you can choose the numbers $i, j, x$ ($i \\neq j, 1 \\leq i, j \\leq n, 0 < x \\leq a_i$, the barrel numbered $i$ is not poisonous) and execute $a_i := a_i - x$, $a_j := a_j + x$. Where $x$ is not necessarily an integer.\n\nIs it possible to guarantee the identification of which barrel contains the poison and remain alive using pouring and the information from the scales? You know that the poison is located on exactly one of the barrels.\n\nAdditionally, we ask you to process $q$ queries. In each query, either one of the existing barrels is removed, or an additional barrel with a certain amount of water is added. After each query, you need to answer whether it is possible to guarantee the identification of the poisonous barrel, given that there is exactly one.\n\n### Input\n\nThe first line contains two integers $n$ and $q$ ($1 \\le n, q \\le 2 \\cdot 10^5$).\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^6$) — the volumes of water in the existing barrels.\n\nThe next $q$ lines contain queries, one per line. Each query is either of the form \\+ x or \\- x, which means, respectively, adding and removing a barrel with $x$ kilograms of water. It is guaranteed that when the query \\- x is made, one of the existing barrels has a volume of $x$, and that there is always at least one barrel remaining throughout the queries. In all queries, $1 \\leq x \\leq 10^6$.\n\n### Output\n\nOutput $q+1$ lines, the answer to the problem before all queries, and after each query. If it is possible to identify the poisonous barrel, output \"Yes\"; otherwise, output \"No\". You can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Examples\n\n#### Input #1\n\n```\n\n4 7\n\n2 2 4 11\n\n\\- 2\n\n\\+ 4\n\n\\+ 30\n\n\\+ 40\n\n\\- 4\n\n\\+ 2\n\n\\+ 2\n\n```\n\n#### Output #1\n\n```\nYes\nNo\nYes\nNo\nYes\nNo\nNo\nYes\n```\n\n#### Input #2\n\n```\n\n6 7\n\n5000 1000 400 400 100 99\n\n\\+ 1\n\n\\- 5000\n\n\\- 1\n\n\\- 400\n\n\\- 400\n\n\\- 100\n\n\\- 99\n\n```\n\n#### Output #2\n\n```\nNo\nYes\nYes\nYes\nNo\nNo\nNo\nYes\n```\n\n### Note\n\nIn the first test, before any queries, the weights of the barrels are $[2, 2, 4, 11]$. You can compare the values of the first and second barrels. If the result is not equal, you can definitively conclude that the barrel with the greater weight is poisonous. If the result is equal, both barrels are non-poisonous. Then you can pour all the contents of the first barrel into the second. After that, both the second and third barrels will contain $4$ kilograms of water. Now let's compare the values of the second and third barrels. If the result is not equal, the barrel with the greater weight is poisonous. Otherwise, both barrels are non-poisonous. The only barrel that could be poisonous is barrel 4. Thus, with this strategy, we can safely determine the poisonous barrel.", "cfid": "2066E"}
{"problem_id": "2066F", "problem_title": "F. Curse", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2066/F", "problem_statement": "You are given two arrays of integers: $a_1, a_2, \\ldots, a_n$ and $b_1, b_2, \\ldots, b_m$.\n\nYou need to determine if it is possible to transform array $a$ into array $b$ using the following operation several (possibly, zero) times.\n\n- Among all non-empty subarrays$^{\\text{∗}}$ of $a$, choose any with the maximum sum, and replace this subarray with an arbitrary non-empty integer array.\n\nIf it is possible, you need to construct any possible sequence of operations. Constraint: in your answer, the sum of the lengths of the arrays used as replacements must not exceed $n + m$ across all operations. The numbers must not exceed $10^9$ in absolute value.\n\n$^{\\text{∗}}$An array $a$ is a subarray of an array $b$ if $a$ can be obtained from $b$ by the deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 200$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n, m$ ($1 \\le n, m \\le 500$) — the lengths of arrays $a$ and $b$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($-10^6 \\le a_i \\le 10^6$) — the elements of array $a$.\n\nThe third line of each test case contains $m$ integers $b_1, b_2, \\ldots, b_m$ ($-10^6 \\le b_i \\le 10^6$) — the elements of array $b$.\n\nIt is guaranteed that the sum of the values of $n$ across all test cases does not exceed $500$.\n\nIt is guaranteed that the sum of the values of $m$ across all test cases does not exceed $500$.\n\n### Output\n\nFor each test case, output $-1$ if it is impossible to transform array $a$ into array $b$.\n\nOtherwise, in the first line, output the number of operations $0 \\leq q \\leq n + m$. Then output the operations in the following format in the order they are performed.\n\nIn the first line of each operation, print three numbers $l, r, k$ ($1 \\leq l \\leq r \\leq |a|$). In the second line, print $k$ integers $c_1 \\ldots c_k$, which means replacing the segment $a_l, \\ldots, a_r$ with the array $c_1, \\ldots, c_k$.\n\nThe sum of $k$ across all $q$ operations must not exceed $n + m$. Additionally, it must hold that $-10^9 \\leq c_i \\leq 10^9$.\n\nYou do not need to minimize the number of operations.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n4 3\n\n2 -3 2 0\n\n-3 -7 0\n\n2 1\n\n-2 -2\n\n2\n\n5 4\n\n-5 9 -3 5 -9\n\n-6 6 -1 -9\n\n```\n\n#### Output #1\n\n```\n4\n3 4 1\n-3\n\n1 1 1\n-3\n\n2 2 1\n-7\n\n3 3 1\n0\n\n-1\n\n3\n2 4 1\n-5\n\n1 1 1\n-6\n\n2 2 2\n6 -1\n```\n\n### Note\n\nIn the first test, the initial array is modified as follows:\n\n\n\n$$ [2, -3, 2, 0] \\to [2, -3, -3] \\to [-3, -3, -3] \\to [-3, -7, -3] \\to [-3, -7, 0] $$\n\nYou may choose to output empty lines or not. Empty lines in the example are added for convenience.", "cfid": "2066F"}
{"problem_id": "2062H", "problem_title": "H. Galaxy Generator", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2062/H", "problem_statement": "In a two-dimensional universe, a star can be represented by a point $(x,y)$ on a two-dimensional plane. Two stars are directly connected if and only if their $x$ or $y$ coordinates are the same, and there are no other stars on the line segment between them. Define a galaxy as a connected component composed of stars connected directly or indirectly (through other stars).\n\nFor a set of stars, its value is defined as the minimum number of galaxies that can be obtained after performing the following operation for any (possibly, zero) times: in each operation, you can select a point $(x,y)$ without stars. If a star can be directly connected to at least $3$ stars after creating it here, then you create a star here.\n\nYou are given a $n\\times n$ matrix $a$ consisting of $0$ and $1$ describing a set $S$ of stars. There is a star at $(x,y)$ if and only if $a_{x,y}=1$. Calculate the sum, modulo $10^9 + 7$, of the values of all non-empty subsets of $S$.\n\n### Input\n\nThe first line of input contains a single integer $t$ ($1 \\leq t \\leq 100$) — the number of test cases.\n\nFor each test case, the first line contains a single integer $n$ ($1 \\leq n \\leq 14$) — the size of matrix $a$.\n\nThen $n$ lines follow; the $i$-th line contains a string $a_i$ of length $n$ — the $i$-th row of matrix $a$.\n\nIt is guaranteed that the sum of $2^n$ over all test cases does not exceed $2^{14}$.\n\n### Output\n\nFor each test case, output the sum, modulo $10^9 + 7$, of the values of all non-empty subsets of $S$.\n\n### Example\n\n#### Input #1\n\n```\n8\n1\n0\n2\n01\n10\n3\n010\n000\n101\n4\n0110\n1001\n1001\n0110\n11\n11111110111\n10000010010\n10111010011\n10111010011\n10111010001\n10000010000\n11111110101\n00000000111\n11011010011\n10010101100\n11101010100\n11\n11011111110\n10010000010\n00010111010\n10010111010\n01010111010\n11010000010\n01011111110\n11000000000\n01010000010\n01000111100\n00000001010\n11\n11010101001\n11001010100\n00000000110\n11111110010\n10000010010\n10111010110\n10111010111\n10111010010\n10000010110\n11111110100\n00000000000\n3\n111\n100\n111\n```\n\n#### Output #1\n\n```\n0\n4\n9\n355\n593092633\n438667113\n922743932\n155\n```\n\n### Note\n\nIn the first test case, $S$ is empty. $S$ has no non-empty subsets. So the answer is $0$.\n\nIn the second test case, $S = \\{(1,2),(2,1)\\}$. $S$ has $3$ non-empty subsets.\n\n- $\\{(1,2)\\}$ and $\\{(2,1)\\}$ — there is only one star in the set, forming $1$ galaxy.\n- $\\{(1,2),(2,1)\\}$ — two stars in the set are not connected, forming $2$ galaxies.\n\nSo the answer is $1+1+2=4$.\n\nIn the third test case, $S = \\{(1,2),(3,1),(3,3)\\}$. $S$ has $7$ non-empty subsets.\n\n- $\\{(1,2)\\}$, $\\{(3,1)\\}$, and $\\{(3,3)\\}$ — there is only one star in the set, forming $1$ galaxy.\n- $\\{(1,2),(3,1)\\}$ and $\\{(1,2),(3,3)\\}$ — two stars in the set are not connected, forming $2$ galaxies.\n- $\\{(3,1),(3,3)\\}$ — two stars in the set are connected, forming $1$ galaxy.\n- $\\{(1,2),(3,1),(3,3)\\}$ — initially, star $(1,2)$ is not in the galaxy formed by $(3,1)$ and $(3,3)$. You can make an operation creating a star at $(3,2)$ connecting to these three stars, forming $1$ galaxy.\n\nSo the answer is $1+1+1+2+2+1+1=9$.", "cfid": "2062H"}
{"problem_id": "2062G", "problem_title": "G. Permutation Factory", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2062/G", "problem_statement": "You are given two permutations $p_1,p_2,\\ldots,p_n$ and $q_1,q_2,\\ldots,q_n$ of length $n$. In one operation, you can select two integers $1\\leq i,j\\leq n,i\\neq j$ and swap $p_i$ and $p_j$. The cost of the operation is $\\min (|i-j|,|p_i-p_j|)$.\n\nFind the minimum cost to make $p_i = q_i$ hold for all $1\\leq i\\leq n$ and output a sequence of operations to achieve the minimum cost.\n\nA permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n### Input\n\nThe first line of input contains a single integer $t$ ($1 \\leq t \\leq 10^4$) — the number of input test cases.\n\nThe first line of each test case contains one integer $n$ ($2 \\le n \\le 100$) — the length of permutations $p$ and $q$.\n\nThe second line contains $n$ integers $p_1,p_2,\\ldots,p_n$ ($1\\leq p_i\\leq n$) — the permutation $p$. It is guaranteed that $p_1,p_2,\\ldots,p_n$ is a permutation of $1,2,\\ldots,n$.\n\nThe third line contains $n$ integers $q_1,q_2,\\ldots,q_n$ ($1\\leq q_i\\leq n$) — the permutation $q$. It is guaranteed that $q_1,q_2,\\ldots,q_n$ is a permutation of $1,2,\\ldots,n$.\n\nIt is guaranteed that the sum of $n^3$ over all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case, output the total number of operations $k$ ($0\\le k\\le n^2$) on the first line. Then output $k$ lines, each containing two integers $i,j$ ($1\\le i,j\\le n$, $i\\neq j$) representing an operation to swap $p_i$ and $p_j$ in order.\n\nIt can be shown that no optimal operation sequence has a length greater than $n^2$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2\n\n2 1\n\n2 1\n\n3\n\n1 2 3\n\n3 2 1\n\n4\n\n2 1 4 3\n\n4 2 3 1\n\n5\n\n1 4 3 2 5\n\n5 2 3 4 1\n\n```\n\n#### Output #1\n\n```\n0\n1\n1 3\n3\n1 4\n2 4\n1 3\n4\n1 2\n4 5\n2 5\n1 4\n```\n\n### Note\n\nIn the second test case, you can swap $p_1,p_3$ costing $\\min(|1-3|,|1-3|)=2$. Then $p$ equals $q$ with a cost of $2$.\n\nIn the third test case, you can perform the following operations:\n\nInitially, $p=[2,1,4,3]$.\n\n1. Swap $p_1,p_4$ costing $\\min(|1-4|,|2-3|)=1$, resulting in $p=[3,1,4,2]$.\n2. Swap $p_2,p_4$ costing $\\min(|2-4|,|1-2|)=1$, resulting in $p=[3,2,4,1]$.\n3. Swap $p_1,p_3$ costing $\\min(|1-3|,|3-4|)=1$. Then $p$ equals $q$ with a cost of $3$.", "cfid": "2062G"}
{"problem_id": "2061I", "problem_title": "I. Kevin and Nivek", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2061/I", "problem_statement": "Kevin and Nivek are competing for the title of \"The Best Kevin\". They aim to determine the winner through $n$ matches.\n\nThe $i$-th match can be one of two types:\n\n- Type 1: Kevin needs to spend $a_i$ time to defeat Nivek and win the match. If Kevin doesn't spend $a_i$ time on it, Nivek will win the match.\n- Type 2: The outcome of this match depends on their historical records. If Kevin's number of wins is greater than or equal to Nivek's up to this match, then Kevin wins. Otherwise, Nivek wins.\n\nKevin wants to know the minimum amount of time he needs to spend to ensure he wins at least $k$ matches.\n\nOutput the answers for $k = 0, 1, \\ldots, n$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 3 \\cdot 10^5$) — the number of matches.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($-1 \\leq a_i \\leq 10^9$).\n\nIf $a_i = -1$, the $i$-th match is of Type 2. Otherwise, the $i$-th match is of Type 1, and $a_i$ represents the amount of time Kevin needs to spend to win this match.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $3 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output $n + 1$ integers. The $i$-th integer represents the minimum amount of time to win at least $i-1$ matches.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n5\n\n-1 -1 -1 -1 -1\n\n5\n\n3 2 5 4 1\n\n5\n\n100 -1 -1 -1 1\n\n```\n\n#### Output #1\n\n```\n0 0 0 0 0 0\n0 1 3 6 10 15\n0 1 100 100 100 101\n```\n\n### Note\n\nIn the first test case, all matches are of Type 2. Kevin can automatically win all matches.\n\nIn the second test case, all matches are of Type 1. Kevin can choose matches in increasing order of $a_i$.\n\nIn the third test case:\n\n- If Kevin spends $a_1$ time on match $1$, he can win matches $1, 2, 3, 4$.\n- If Kevin spends $a_5$ time on match $5$, he can win match $5$.\n- If Kevin spends $a_1$ time on match $1$ and $a_5$ time on match $5$, he can win all matches.", "cfid": "2061I"}
{"problem_id": "2061H2", "problem_title": "H2. Kevin and Stones (Hard Version)", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2061/H2", "problem_statement": "This is the hard version of the problem. The difference between the versions is that in this version, you need to output a valid sequence of operations if one exists. You can hack only if you solved all versions of this problem.\n\nKevin has an undirected graph with $n$ vertices and $m$ edges. Initially, some vertices contain stones, which Kevin wants to move to new positions.\n\nKevin can perform the following operation:\n\n- For each stone at $u_i$, select a neighboring vertex $v_i$. Simultaneously move each stone from $u_i$ to its corresponding $v_i$.\n\nAt any time, each vertex can contain at most one stone.\n\nDetermine whether a valid sequence of operations exists that moves the stones from the initial state to the target state. Output a valid sequence of operations with no more than $2n$ moves if one exists. It can be proven that if a valid sequence exists, a valid sequence with no more than $2n$ moves exists.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1\\leq n \\leq 2000$, $0\\leq m \\leq \\min(\\frac{n(n-1)}{2}, 10^4)$) — the number of vertices and edges in the graph.\n\nThe second line contains a binary string $s$ consisting of '0' and '1'. The $i$-th bit of $s$ indicates the number of stones on the $i$-th vertex in the initial state.\n\nThe third line contains a binary string $t$ consisting of '0' and '1'. The $i$-th bit of $t$ indicates the number of stones on the $i$-th vertex in the target state.\n\nEach of the next $m$ lines contains two integers $u$ and $v$ ($1\\leq u, v \\leq n$) — an undirected edge between the $u$-th vertex and the $v$-th vertex.\n\nIt is guaranteed that the graph is simple. There are no self-loops and parallel edges in the graph.\n\nIt is guaranteed that the numbers of '1' in $s$ and $t$ are the same.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2000$.\n\nIt is guaranteed that the sum of $m$ over all test cases does not exceed $10^4$.\n\n### Output\n\nFor each test case, on the first line, output \"Yes\" or \"No\" to indicate whether a valid sequence of operations exists.\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\nIf a valid sequence of operations exists, output a single integer $k$ ($0 \\leq k \\leq 2n$) on the second line, representing the number of operations. Suppose there are $c$ stones in the initial state. The next $k + 1$ lines should each contain distinct $c$ integers, representing the positions of the stones before the operations and after each operation. These positions should satisfy the following:\n\n- The positions of the stones in the first line match the initial state from the input, in any order.\n- The positions of the stones in the last line match the target state from the input, in any order.\n- For all $i$ ($1\\leq i\\leq k$) and $j$ ($1\\leq j\\leq c$), ensure that the $j$-th integer in the $i$-th line and the $j$-th integer in the $(i+1)$-th line correspond to adjacent vertices in the graph. In other words, the stone is moved from its previous position to the next.\n\nIf there are multiple solutions, print any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2 1\n\n10\n\n01\n\n1 2\n\n11 11\n\n11011001010\n\n01101011100\n\n1 2\n\n2 3\n\n3 4\n\n4 5\n\n5 6\n\n6 7\n\n7 8\n\n8 9\n\n9 10\n\n10 11\n\n11 1\n\n3 2\n\n110\n\n101\n\n1 2\n\n2 3\n\n3 2\n\n111\n\n111\n\n1 2\n\n2 3\n\n```\n\n#### Output #1\n\n```\nYes\n1\n1\n2\nYes\n6\n1 2 4 5 8 10\n2 3 5 6 9 11\n3 2 6 7 10 1\n4 3 7 8 11 2\n5 2 8 9 1 3\n6 3 7 8 2 4\n7 2 8 9 3 5\nNo\nYes\n0\n1 2 3\n```", "cfid": "2061H2"}
{"problem_id": "2061H1", "problem_title": "H1. Kevin and Stones (Easy Version)", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2061/H1", "problem_statement": "This is the easy version of the problem. The difference between the versions is that in this version, you only need to determine whether a valid sequence of operations exists. You can hack only if you solved all versions of this problem.\n\nKevin has an undirected graph with $n$ vertices and $m$ edges. Initially, some vertices contain stones, which Kevin wants to move to new positions.\n\nKevin can perform the following operation:\n\n- For each stone at $u_i$, select a neighboring vertex $v_i$. Simultaneously move each stone from $u_i$ to its corresponding $v_i$.\n\nAt any time, each vertex can contain at most one stone.\n\nDetermine whether a valid sequence of operations exists that moves the stones from the initial state to the target state.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1\\leq n \\leq 2000$, $0\\leq m \\leq \\min(\\frac{n(n-1)}{2}, 10^4)$) — the number of vertices and edges in the graph.\n\nThe second line contains a binary string $s$ consisting of '0' and '1'. The $i$-th bit of $s$ indicates the number of stones on the $i$-th vertex in the initial state.\n\nThe third line contains a binary string $t$ consisting of '0' and '1'. The $i$-th bit of $t$ indicates the number of stones on the $i$-th vertex in the target state.\n\nEach of the next $m$ lines contains two integers $u$ and $v$ ($1\\leq u, v \\leq n$) — an undirected edge between the $u$-th vertex and the $v$-th vertex.\n\nIt is guaranteed that the graph is simple. There are no self-loops and parallel edges in the graph.\n\nIt is guaranteed that the numbers of '1' in $s$ and $t$ are the same.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2000$.\n\nIt is guaranteed that the sum of $m$ over all test cases does not exceed $10^4$.\n\n### Output\n\nFor each test case, on the first line, output \"Yes\" or \"No\" to indicate whether a valid sequence of operations exists.\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2 1\n\n10\n\n01\n\n1 2\n\n11 11\n\n11011001010\n\n01101011100\n\n1 2\n\n2 3\n\n3 4\n\n4 5\n\n5 6\n\n6 7\n\n7 8\n\n8 9\n\n9 10\n\n10 11\n\n11 1\n\n3 2\n\n110\n\n101\n\n1 2\n\n2 3\n\n3 2\n\n111\n\n111\n\n1 2\n\n2 3\n\n```\n\n#### Output #1\n\n```\nYes\nYes\nNo\nYes\n```", "cfid": "2061H1"}
{"problem_id": "2061F2", "problem_title": "F2. Kevin and Binary String (Hard Version)", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2061/F2", "problem_statement": "This is the hard version of the problem. The difference between the versions is that in this version, string $t$ consists of '0', '1' and '?'. You can hack only if you solved all versions of this problem.\n\nKevin has a binary string $s$ of length $n$. Kevin can perform the following operation:\n\n- Choose two adjacent blocks of $s$ and swap them.\n\nA block is a maximal substring$^{\\text{∗}}$ of identical characters. Formally, denote $s[l,r]$ as the substring $s_l s_{l+1} \\ldots s_r$. A block is $s[l,r]$ satisfying:\n\n- $l=1$ or $s_l\\not=s_{l-1}$.\n- $s_l=s_{l+1} = \\ldots = s_{r}$.\n- $r=n$ or $s_r\\not=s_{r+1}$.\n\nAdjacent blocks are two blocks $s[l_1,r_1]$ and $s[l_2,r_2]$ satisfying $r_1+1=l_2$.\n\nFor example, if $s=\\mathtt{000}\\,\\mathbf{11}\\,\\mathbf{00}\\,\\mathtt{111}$, Kevin can choose the two blocks $s[4,5]$ and $s[6,7]$ and swap them, transforming $s$ into $\\mathtt{000}\\,\\mathbf{00}\\,\\mathbf{11}\\,\\mathtt{111}$.\n\nGiven a string $t$ of length $n$ consisting of '0', '1' and '?', Kevin wants to determine the minimum number of operations required to perform such that for any index $i$ ($1\\le i\\le n$), if $t_i\\not=$ '?' then $s_i=t_i$. If it is impossible, output $-1$.\n\n$^{\\text{∗}}$A string $a$ is a substring of a string $b$ if $a$ can be obtained from $b$ by the deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a string $s$ consisting of '0' and '1'.\n\nThe second line of each test case contains a string $t$ consisting of '0', '1' and '?'.\n\nIt is guaranteed that the lengths of $s$ and $t$ are the same.\n\nIt is guaranteed that the sum of the length of $s$ over all test cases will not exceed $4\\cdot 10^5$.\n\n### Output\n\nFor each test case, output one integer — the minimum number of operations required. If it is impossible, output $-1$.\n\n### Examples\n\n#### Input #1\n\n```\n\n6\n\n0001100111\n\n0000011111\n\n010101\n\n111000\n\n0101\n\n0110\n\n0101\n\n1010\n\n011001\n\n001110\n\n0\n\n1\n\n```\n\n#### Output #1\n\n```\n1\n3\n1\n-1\n-1\n-1\n```\n\n#### Input #2\n\n```\n\n6\n\n010101\n\n?0?0??\n\n0101\n\n?0?0\n\n11100101\n\n????????\n\n11100101\n\n???11?1?\n\n1000100011\n\n?11?000?0?\n\n10101\n\n?1011\n\n```\n\n#### Output #2\n\n```\n2\n-1\n0\n2\n2\n-1\n```\n\n### Note\n\nIn the first test case of the first example, the possible way is shown in the statement.\n\nIn the second test case of the first example, one possible way could be:\n\n- Swap blocks $[2, 2], [3, 3]$, $s$ will become $\\mathtt{001101}$.\n- Swap blocks $[3, 4], [5, 5]$, $s$ will become $\\mathtt{000111}$.\n- Swap blocks $[1, 3], [4, 6]$, $s$ will become $\\mathtt{111000}$.\n\nIn the first test case of the second example, one possible way could be:\n\n- Swap blocks $[1, 1], [2, 2]$, $s$ will become $\\mathtt{100101}$.\n- Swap blocks $[4, 4], [5, 5]$, $s$ will become $\\mathtt{100011}$.", "cfid": "2061F2"}
{"problem_id": "2055F", "problem_title": "F. Cosmic Divide", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2055/F", "problem_statement": "With the artifact in hand, the fabric of reality gives way to its true master — Florida Man.\n\nA polyomino is a connected$^{\\text{∗}}$ figure constructed by joining one or more equal $1 \\times 1$ unit squares edge to edge. A polyomino is convex if, for any two squares in the polyomino that share the same row or the same column, all squares between them are also part of the polyomino. Below are four polyominoes, only the first and second of which are convex.\n\n![](https://espresso.codeforces.com/8724689d0b36a88fea4585d8abc9730b8c0d960d.png)\n\nYou are given a convex polyomino with $n$ rows and an even area. For each row $i$ from $1$ to $n$, the unit squares from column $l_i$ to column $r_i$ are part of the polyomino. In other words, there are $r_i - l_i + 1$ unit squares that are part of the polyomino in the $i$-th row: $(i, l_i), (i, l_i + 1), \\ldots, (i, r_i-1), (i, r_i)$.\n\nTwo polyominoes are congruent if and only if you can make them fit exactly on top of each other by translating the polyominoes. Note that you are not allowed to rotate or reflect the polyominoes. Determine whether it is possible to partition the given convex polyomino into two disjoint connected polyominoes that are congruent to each other. The following examples illustrate a valid partition of each of the two convex polyominoes shown above:\n\n![](https://espresso.codeforces.com/97de3cd15bf04caabb5cdf47250f4e27c68bed36.png)\n\nThe partitioned polyominoes do not need to be convex, and each unit square should belong to exactly one of the two partitioned polyominoes.\n\n$^{\\text{∗}}$A polyomino is connected if and only if for every two unit squares $u \\neq v$ that are part of the polyomino, there exists a sequence of distinct squares $s_1, s_2, \\ldots, s_k$, such that $s_1 = u$, $s_k = v$, $s_i$ are all part of the polyomino, and $s_i, s_{i+1}$ share an edge for each $1 \\le i \\le k - 1$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1\\le n\\le 2\\cdot 10^5$) — the number of rows of the polyomino.\n\nThe $i$-th of the next $n$ lines contains two integers $l_i$ and $r_i$ ($1\\le l_i\\le r_i\\le 10^9$) — the range of columns that are part of the polyomino in the $i$-th row.\n\nIt is guaranteed that the area of the polyomino is even. In other words, $\\sum_{i=1}^n r_i - l_i + 1\\equiv 0\\pmod{2}$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print a single line containing either \"YES\" or \"NO\", representing whether or not the polyomino can be partitioned as described in the problem.\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n2\n\n1 2\n\n2 3\n\n4\n\n4 4\n\n2 4\n\n1 4\n\n1 2\n\n3\n\n1 2\n\n1 2\n\n2 3\n\n2\n\n1 3\n\n3 3\n\n2\n\n1 3\n\n2 2\n\n3\n\n1 2\n\n1 3\n\n1 3\n\n4\n\n8 9\n\n6 8\n\n6 8\n\n5 6\n\n```\n\n#### Output #1\n\n```\nYES\nYES\nNO\nNO\nNO\nNO\nYES\n```\n\n### Note\n\nThe first and second test cases are the polyominoes depicted in the problem statement and can be partitioned as shown.\n\nThe polyomino in the third test case, shown below, can be shown to be impossible to partition. None of the following partitions are valid:\n\n![](https://espresso.codeforces.com/0a986911d905df1d700e5c6e0a7823b6baa1714b.png)\n\nThe partition on the left does not use polyominoes that are translations of each other, and the partition on the right does not use connected polyominoes.\n\nThe polyomino in the fourth test case, shown below, can be shown to be impossible to partition.\n\n![](https://espresso.codeforces.com/5f032563bda214bb7c65076b4882bda7d0a17e46.png)\n\nNote that while you can partition it into two $1 \\times 2$ rectangles, these rectangles are not translations of each other.", "cfid": "2055F"}
{"problem_id": "2057F", "problem_title": "F. Formation", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2057/F", "problem_statement": "One day, the teachers of \"T-generation\" decided to instill discipline in the pupils, so they lined them up and made them calculate in order. There are a total of $n$ pupils, the height of the $i$-th pupil in line is $a_i$.\n\nThe line is comfortable, if for each $i$ from $1$ to $n - 1$, the following condition holds: $a_i \\cdot 2 \\ge a_{i + 1}$. Initially, the line is comfortable.\n\nThe teachers do not like that the maximum height in the line is too small, so they want to feed the pupils pizza. You know that when a pupil eats one pizza, their height increases by $1$. One pizza can only be eaten by only one pupil, but each pupil can eat an unlimited number of pizzas. It is important that after all the pupils have eaten their pizzas, the line is comfortable.\n\nThe teachers have $q$ options for how many pizzas they will order. For each option $k_i$, answer the question: what is the maximum height $\\max(a_1, a_2, \\ldots, a_n)$ that can be achieved if the pupils eat at most $k_i$ pizzas.\n\n### Input\n\nEach test contains multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each set of test case contains two integers $n$ and $q$ ($1 \\le n, q \\le 5 \\cdot 10^4$) — the number of pupils and the number of options for how many pizzas the teachers will order.\n\nThe second line of each set of test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$) — the heights of the pupils.It is guaranteed that initially, the line is comfortable.\n\nEach of the following $q$ lines of each set of input data contains one integer $k_i$ ($1 \\le k_i \\le 10^9$) — the next limit for how many pizzas the pupils can eat.\n\nIt is guaranteed that the sum of the values of $n$ across all sets of input data does not exceed $5 \\cdot 10^4$.\n\nIt is guaranteed that the sum of the values of $q$ across all sets of input data does not exceed $5 \\cdot 10^4$.\n\n### Output\n\nFor each test case, for each limit for how many pizzas the pupils can eat, output the maximum value $\\max(a_1, a_2, \\ldots, a_n)$ that can be achieved while ensuring that the line is comfortable.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2 1\n\n10 20\n\n10\n\n6 7\n\n3 1 2 4 5 6\n\n1\n\n2\n\n4\n\n8\n\n16\n\n32\n\n64\n\n10 4\n\n1 2 4 8 16 32 64 128 256 512\n\n10\n\n100\n\n1000\n\n10000\n\n```\n\n#### Output #1\n\n```\n26\n7 8 10 12 19 35 67\n513 560 1011 10001\n```\n\n### Note\n\nIn the first query of the first set of input data, you can first give $3$ pizzas to the first pupil, and then give $6$ pizzas to the second pupil, making the final array $[13, 26]$ (the line is comfortable since $13 \\cdot 2 \\ge 26$), and the maximum element in it is $26$.", "cfid": "2057F"}
{"problem_id": "2057H", "problem_title": "H. Coffee Break", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2057/H", "problem_statement": "There are very long classes in the T-Generation. In one day, you need to have time to analyze the training and thematic contests, give a lecture with new material, and, if possible, also hold a mini-seminar. Therefore, there is a break where students can go to drink coffee and chat with each other.\n\nThere are a total of $n+2$ coffee machines located in sequentially arranged rooms along a long corridor. The coffee machines are numbered from $0$ to $n+1$, and immediately after the break starts, there are $a_i$ students gathered around the $i$-th coffee machine.\n\nThe students are talking too loudly among themselves, and the teachers need to make a very important announcement. Therefore, they want to gather the maximum number of students around some single coffee machine. The teachers are too lazy to run around the corridors and gather the students, so they came up with a more sophisticated way to manipulate them:\n\n- At any moment, the teachers can choose room $i$ ($1 \\le i \\le n$) and turn off the lights there;\n- If there were $x$ students in that room, then after turning off the lights, $\\lfloor \\frac12 x \\rfloor$ students will go to room $(i-1)$, and $\\lfloor \\frac12 x \\rfloor$ other students will go to room $(i+1)$.\n- If $x$ was odd, then one student remains in the same room.\n- After that, the lights in room $i$ are turned back on.\n\nThe teachers have not yet decided where they will gather the students, so for each $i$ from $1$ to $n$, you should determine what is the maximum number of students that can be gathered around the $i$-th coffee machine.\n\nThe teachers can turn off the lights in any rooms at their discretion, in any order, possibly turning off the lights in the same room multiple times.\n\nNote that the values of $a_0$ and $a_{n+1}$ do not affect the answer to the problem, so their values will not be given to you.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10\\,000$) — the number of test cases.\n\nIn the first line of each test case, there is an integer $n$ ($1 \\le n \\le 10^6$).\n\nIn the second line of each test case, there are integers $a_1, \\ldots, a_n$ ($0 \\le a_i \\le 10^9$) — the number of students around coffee machines numbered $1, 2, \\ldots, n$.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case, output $n$ integers $b_1, \\ldots, b_n$, where $b_i$ is the maximum number of students that can be around coffee machines number $i$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2\n\n8 0\n\n5\n\n2 2 2 2 2\n\n5\n\n0 0 9 0 0\n\n```\n\n#### Output #1\n\n```\n8 4\n4 5 4 5 4\n4 6 9 6 4\n```\n\n### Note\n\nLet's analyze the first test case:\n\n- To maximize the number of students at the $1$-st coffee machine, all that needs to be done is nothing.\n- To maximize the number of students at the $2$-nd coffee machine, it is sufficient to turn off the lights in the $1$-st room once.", "cfid": "2057H"}
{"problem_id": "2112D", "problem_title": "D. Reachability and Tree", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2112/D", "problem_statement": "Let $u$ and $v$ be two distinct vertices in a directed graph. Let's call the ordered pair $(u, v)$ good if there exists a path from vertex $u$ to vertex $v$ along the edges of the graph.\n\nYou are given an undirected tree with $n$ vertices and $n - 1$ edges. Determine whether it is possible to assign a direction to each edge of this tree so that the number of good pairs in it is exactly $n$. If it is possible, print any way to direct the edges resulting in exactly $n$ good pairs.\n\n![](https://espresso.codeforces.com/0f17bdc8df6de9dcbcefe04d44049c8911e607a8.png)One possible directed version of the tree for the first test case.\n\n### Input\n\nThe first line contains one integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains one integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$) — the number of vertices in the tree.\n\nThe next $n - 1$ lines describe the edges. The $i$-th line contains two integers $u_i$ and $v_i$ ($1 \\le u_i, v_i \\le n$; $u_i \\neq v_i$) — the vertices connected by the $i$-th edge.\n\nIt is guaranteed that the edges in each test case form an undirected tree and that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print \"NO\" (case-insensitive) if it is impossible to direct all edges of the tree and obtain exactly $n$ good pairs of vertices.\n\nOtherwise, print \"YES\" (case-insensitive) and then print $n - 1$ pairs of integers $u_i$ and $v_i$ separated by spaces — the edges directed from $u_i$ to $v_i$.\n\nThe edges can be printed in any order. If there are multiple answers, output any.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n5\n\n1 2\n\n2 4\n\n1 3\n\n3 5\n\n5\n\n1 2\n\n1 3\n\n1 4\n\n4 5\n\n2\n\n2 1\n\n4\n\n3 1\n\n1 2\n\n2 4\n\n```\n\n#### Output #1\n\n```\nYES\n1 2\n3 1\n3 5\n4 2\nYES\n2 1\n3 1\n4 1\n5 4\nNO\nYES\n1 3\n2 1\n2 4\n```\n\n### Note\n\nThe tree from the first test case and its possible directed version are shown in the legend above. In this version, there are exactly $5$ good pairs of vertices: $(3, 5)$, $(3, 1)$, $(3, 2)$, $(1, 2)$, and $(4, 2)$.\n\nOne possible directed version of the tree from the second test case is shown below:\n\n![](https://espresso.codeforces.com/e52886ce22e1a452186a3dfa3c2cc602f6c4d2ec.png)\n\nIn the presented answer, there are exactly $5$ good pairs of vertices: $(2, 1)$, $(3, 1)$, $(4, 1)$, $(5, 4)$, and $(5, 1)$.\n\nIn the third test case, there are only two directed pairs of vertices, but for any direction of the edge, only one pair will be good.", "cfid": "2112D"}
{"problem_id": "2112C", "problem_title": "C. Coloring Game", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2112/C", "problem_statement": "Alice and Bob are playing a game using an integer array $a$ of size $n$.\n\nInitially, all elements of the array are colorless. First, Alice chooses $3$ elements and colors them red. Then Bob chooses any element and colors it blue (if it was red — recolor it). Alice wins if the sum of the red elements is strictly greater than the value of the blue element.\n\nYour task is to calculate the number of ways that Alice can choose $3$ elements in order to win regardless of Bob's actions.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 1000$) — the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($3 \\le n \\le 5000$).\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_1 \\le a_2 \\le \\cdots \\le a_n \\le 10^5$).\n\nAdditional constraint on the input: the sum of $n$ over all test cases doesn't exceed $5000$.\n\n### Output\n\nFor each test case, print a single integer — the number of ways that Alice can choose $3$ elements in order to win regardless of Bob's actions.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n3\n\n1 2 3\n\n4\n\n1 1 2 4\n\n5\n\n7 7 7 7 7\n\n5\n\n1 1 2 2 4\n\n6\n\n2 3 3 4 5 5\n\n5\n\n1 1 1 1 3\n\n```\n\n#### Output #1\n\n```\n0\n0\n10\n2\n16\n0\n```\n\n### Note\n\nIn the first two test cases, no matter which three elements Alice chooses, Bob will be able to paint one element blue so that Alice does not win.\n\nIn the third test case, Alice can choose any three elements. If Bob colors one of the red elements, the sum of red elements will be $14$, and the sum of blue elements will be $7$. If Bob chooses an uncolored element, the sum of red elements will be $21$, and the sum of blue elements will be $7$.\n\nIn the fourth test case, Alice can choose either the $1$-st, $3$-rd and $4$-th element, or the $2$-nd, $3$-rd and $4$-th element.", "cfid": "2112C"}
{"problem_id": "2112A", "problem_title": "A. Race", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2112/A", "problem_statement": "Alice and Bob participate in a game TV show. When the game starts, the prize will be dropped to a certain point, and whoever gets to it first will get the prize.\n\nAlice decided that she would start running from point $a$. Bob, however, has not yet chosen his starting position.\n\nBob knows that the prize could drop either at point $x$ or at point $y$. He also knows that he can reach the prize faster than Alice if the distance from his starting position to the prize is strictly less than the distance from Alice's starting position to the prize. The distance between any two points $c$ and $d$ is calculated as $|c-d|$.\n\nYour task is to determine whether Bob can choose an integer point that is guarantee to get to the prize faster, regardless of where it appears (at point $x$ or $y$). Bob can choose any integer point, except for $a$ (in particular, he can choose to start in point $x$, point $y$, or any other point, but not $a$).\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 1000$) — the number of test cases.\n\nThe only line of each test case contains three integers $a$, $x$, $y$ ($1 \\le a, x, y \\le 100$). Points $a$, $x$, and $y$ are pairwise distinct.\n\n### Output\n\nFor each test case, print \"YES\" (case insensitive) if Bob can choose an integer point that is guarantee to get to the prize faster, regardless of where it appears. Otherwise, print \"NO\" (case insensitive).\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n1 3 4\n\n5 3 1\n\n3 1 5\n\n```\n\n#### Output #1\n\n```\nYES\nYES\nNO\n```\n\n### Note\n\nIn the first example, Bob can choose point $4$. If the prize will be at point $x$, then Bob's distance is $|4-3|=1$ and Alice's distance is $|1-3|=2$. If the prize will be at point $y$, then Bob's distance is $|4-4|=0$ and Alice's distance is $|1-4|=3$.\n\nIn the second example, Bob can choose point $2$. If the prize will be at point $x$, then Bob's distance is $|2-3|=1$ and Alice's distance is $|5-3|=2$. If the prize will be at point $y$, then Bob's distance is $|2-1|=1$ and Alice's distance is $|5-1|=4$.\n\nIn the third example, Bob cannot choose a point to guarantee his victory.", "cfid": "2112A"}
{"problem_id": "2112B", "problem_title": "B. Shrinking Array", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2112/B", "problem_statement": "Let's call an array $b$ beautiful if it consists of at least two elements and there exists a position $i$ such that $|b_i - b_{i + 1}| \\le 1$ (where $|x|$ is the absolute value of $x$).\n\nYou are given an array $a$, and as long as it consists of at least two elements, you can perform the following operation:\n\n1. Choose two adjacent positions $i$ and $i + 1$ in the array $a$.\n2. Choose an integer $x$ such that $\\min(a_i, a_{i + 1}) \\le x \\le \\max(a_i, a_{i + 1})$.\n3. Remove the numbers $a_i$ and $a_{i + 1}$ from the array, and insert the number $x$ in their place. Obviously, the size of the array will decrease by $1$.\n\nCalculate the minimum number of operations required to make the array beautiful, or report that it is impossible.\n\n### Input\n\nThe first line contains one integer $t$ ($1 \\le t \\le 200$) — the number of test cases.\n\nThe first line of each test case contains one integer $n$ ($2 \\le n \\le 1000$) — the size of the array $a$.\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^6$) — the array $a$ itself.\n\n### Output\n\nFor each test case, output one integer — the minimum number of operations needed to make the array $a$ beautiful, or $-1$ if it is impossible to make it beautiful.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n4\n\n1 3 3 7\n\n2\n\n6 9\n\n4\n\n3 1 3 7\n\n4\n\n1 3 5 2\n\n```\n\n#### Output #1\n\n```\n0\n-1\n1\n1\n```\n\n### Note\n\nIn the first test case, the given array is already beautiful, as $|a_2 - a_3| = |3 - 3| = 0$.\n\nIn the second test case, it is impossible to make the array beautiful, as applying the operation would reduce its size to less than two.\n\nIn the third test case, you can, for example, choose $a_1$ and $a_2$ and replace them with the number $2$. The resulting array $[2, 3, 7]$ is beautiful.\n\nIn the fourth test case, you can, for example, choose $a_2$ and $a_3$ and replace them with the number $3$. The resulting array $[1, 3, 2]$ is beautiful.", "cfid": "2112B"}
{"problem_id": "2120A", "problem_title": "A. Square of Rectangles", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2120/A", "problem_statement": "Aryan is an ardent lover of squares but a hater of rectangles (Yes, he knows all squares are rectangles). But Harshith likes to mess with Aryan. Harshith gives Aryan three rectangles of sizes $l_1\\times b_1$, $l_2\\times b_2$, and $l_3\\times b_3$ such that $l_3\\leq l_2\\leq l_1$ and $b_3\\leq b_2\\leq b_1$. Aryan, in order to defeat Harshith, decides to arrange these three rectangles to form a square such that no two rectangles overlap and the rectangles are aligned along edges. Rotating rectangles is not allowed. Help Aryan determine if he can defeat Harshith.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 100$). The description of the test cases follows.\n\nEach test case contains a single line with $6$ space-separated integers $l_1, b_1, l_2, b_2, l_3$, and $b_3$ ($1 \\leq l_3\\le l_2\\le l_1\\le 100$, $1\\le b_3\\le b_2\\le b_1 \\leq 100$) — the dimensions of the three rectangles.\n\n### Output\n\nFor each testcase, print \"YES\" if the rectangles can be arranged to form a square; otherwise, \"NO\".\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n100 100 10 10 1 1\n\n5 3 5 1 5 1\n\n2 3 1 2 1 1\n\n8 5 3 5 3 3\n\n3 3 3 3 2 1\n\n```\n\n#### Output #1\n\n```\nNO\nYES\nYES\nNO\nNO\n```\n\n### Note\n\nIn the second test case, the three rectangles $5\\times 3$, $5\\times 1$, and $5\\times 1$ can be arranged as follows to form a square.\n\n![](https://espresso.codeforces.com/fbd9b47dd2b494552b66f9254bd5f01de239c196.png)\n\nIn the fourth test case, it can be proven that the rectangles can't be arranged to form a square with the given constraints.", "cfid": "2120A"}
{"problem_id": "2120D", "problem_title": "D. Matrix game", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2120/D", "problem_statement": "Aryan and Harshith play a game. They both start with three integers $a$, $b$, and $k$. Aryan then gives Harshith two integers $n$ and $m$. Harshith then gives Aryan a matrix $X$ with $n$ rows and $m$ columns, such that each of the elements of $X$ is between $1$ and $k$(inclusive). After that, Aryan wins if he can find a submatrix$^{\\text{∗}}$ $Y$ of $X$ with $a$ rows and $b$ columns such that all elements of $Y$ are equal.\n\nFor example, when $a=2, b=2, k=6, n=3$ and $m=3$, if Harshith gives Aryan the matrix below, it is a win for Aryan as it has a submatrix of size $2\\times 2$ with all elements equal to $1$ as shown below.\n\n![](https://espresso.codeforces.com/69d24173a1df27d03c8b9991eba30c6d7e1b139e.png) Example of a matrix where Aryan wins\n\nAryan gives you the values of $a$, $b$, and $k$. He asks you to find the lexicographically minimum tuple $(n,m)$ that he should give to Harshith such that Aryan always wins. Help Aryan win the game. Assume that Harshith plays optimally. The values of $n$ and $m$ can be large, so output them modulo $10^9+7$. A tuple $(n_1, m_1)$ is said to be lexicographically smaller than $(n_2, m_2)$ if either $n_1<n_2$ or $n_1=n_2$ and $m_1<m_2$.\n\n$^{\\text{∗}}$A submatrix of a matrix is obtained by removing some rows and/or columns from the original matrix.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nEach test case contains a single line with three space-separated integers $a, b$ and $k$ ($1\\leq a,b,k\\leq 10^5$).\n\nIt is guaranteed that the sum of $\\max(a, b, k)$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, output a single line containing two space-separated integers $n$ and $m$, denoting the answer to the problem. The values of $n$ and $m$ can be large, so output them modulo $10^9+7$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n1 1 5\n\n2 2 2\n\n90000 80000 70000\n\n```\n\n#### Output #1\n\n```\n1 1\n3 7\n299929959 603196135\n```\n\n### Note\n\nFor the first test case, every $n\\times m$ matrix contains a $1\\times 1$ submatrix with all elements equal. $(1,1)$ is the lexicographically minimum tuple among all of them.\n\nFor the second test case, it can be verified that whatever $3\\times 7$ matrix Harshith gives to Aryan, Aryan can always win by finding a $2\\times 2$ submatrix with all elements equal. $(3,7)$ is also the lexicographically minimum tuple among all possible tuples where Aryan always wins.", "cfid": "2120D"}
{"problem_id": "2120C", "problem_title": "C. Divine Tree", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2120/C", "problem_statement": "Harshith attained enlightenment in Competitive Programming by training under a Divine Tree. A divine tree is a rooted tree$^{\\text{∗}}$ with $n$ nodes, labelled from $1$ to $n$. The divineness of a node $v$, denoted $d(v)$, is defined as the smallest node label on the unique simple path from the root to node $v$.\n\nAryan, being a hungry Competitive Programmer, asked Harshith to pass on the knowledge. Harshith agreed on the condition that Aryan would be given two positive integers $n$ and $m$, and he had to construct a divine tree with $n$ nodes such that the total divineness of the tree is $m$, i.e., $\\displaystyle\\sum\\limits_{i=1}^n d(i)=m$. If no such tree exists, Aryan must report that it is impossible.\n\nDesperate for knowledge, Aryan turned to you for help in completing this task. As a good friend of his, help him solve the task.\n\n$^{\\text{∗}}$A tree is a connected graph without cycles. A rooted tree is a tree where one vertex is special and called the root.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\le n \\le 10^6$, $1 \\le m \\le 10^{12}$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case, output a single integer $k$ in one line — the root of the tree.\n\nThen $n-1$ lines follow, each containing a description of an edge of the tree — a pair of positive integers $u_i,v_i$ ($1\\le u_i,v_i\\le n$, $u_i\\ne v_i$), denoting the $i$-th edge connects vertices $u_i$ and $v_i$.\n\nThe edges and vertices of the edges can be printed in any order. If there are multiple solutions, print any of them.\n\nIf there is no solution, print \"-1\" instead.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n1 2\n\n4 6\n\n```\n\n#### Output #1\n\n```\n-1\n3\n3 1\n1 2\n2 4\n```\n\n### Note\n\nIn the first test case, there is a single node with a value of $1$, so getting a sum of $2$ is impossible.\n\nIn the second test case, getting a sum of $6$ is possible with the given tree rooted at $3$.", "cfid": "2120C"}
{"problem_id": "2120B", "problem_title": "B. Square Pool", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2120/B", "problem_statement": "Aryan and Harshith are playing pool in universe AX120 on a fixed square pool table of side $s$ with pockets at its $4$ corners. The corners are situated at $(0,0)$, $(0,s)$, $(s,0)$, and $(s,s)$. In this game variation, $n$ identical balls are placed on the table with integral coordinates such that no ball lies on the edge or corner of the table. Then, they are all simultaneously shot at $10^{100}$ units/sec speed (only at $45$ degrees with the axes).\n\nIn universe AX120, balls and pockets are almost point-sized, and the collisions are elastic, i.e., the ball, on hitting any surface, bounces off at the same angle and with the same speed.\n\n![](https://espresso.codeforces.com/03698e95411a27b6d9ed22ef294c00b49125be41.png)\n\nHarshith shot the balls, and he provided Aryan with the balls' positions and the angles at which he shot them. Help Aryan determine the number of balls potted into the pockets by Harshith.\n\nIt is guaranteed that multiple collisions do not occur at the same moment and position.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $s$ ($1 \\le n \\le 10^3$, $2 \\le s\\le 10^9$) — the number of balls placed on the table and the side length of the square pool table.\n\nThe $i$-th of the next $n$ lines contains four integers $d_x$, $d_y$, $x_i$, and $y_i$ ($d_x,d_y \\in \\{-1, 1\\}$, $0 \\lt x_i, y_i \\lt s$) — the direction vectors of the launch on the $X$-axis and $Y$-axis respectively, and the coordinates of the location where the $i$-th ball was placed. It is guaranteed that no two balls coincide at the initial moment.\n\nIt is also guaranteed that the sum of $n$ over all test cases does not exceed $10^3$.\n\n### Output\n\nFor each test case, print a single integer — the number of balls potted in that game.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n1 2\n\n1 1 1 1\n\n5 4\n\n1 -1 1 1\n\n1 -1 2 2\n\n-1 1 2 3\n\n1 -1 1 3\n\n-1 1 3 1\n\n```\n\n#### Output #1\n\n```\n1\n3\n```\n\n### Note\n\nIn the first test case, there is a single ball and it's shot directly towards the pocket at $(2, 2)$, thus potted.\n\nIn the second test case, the state progresses as\n\n![](https://espresso.codeforces.com/277925e8c841d4b0517ff0b6c8561252258511eb.png)$\\rightarrow$![](https://espresso.codeforces.com/44f2f377936021e233b12e14f5dba0e6d1d000e9.png)![](https://espresso.codeforces.com/9a80571022f338294cd4ac9550a4c0daa39dfd87.png)$\\rightarrow$![](https://espresso.codeforces.com/51469a70832c0ea702ea3cae0a23f7a02a03e9f8.png)![](https://espresso.codeforces.com/34ce4b1e26c93608354db73a1fa858ec6f750908.png)$\\rightarrow$![](https://espresso.codeforces.com/0174e1fba22cc3437a8783afa0e59b94a2f56cc3.png)![](https://espresso.codeforces.com/5ffdf60ffaaf63625debb70d5e8b9040ef9a496b.png)$\\rightarrow$![](https://espresso.codeforces.com/520e6431370faf82a9f177c2dfc707b39e191c9b.png)", "cfid": "2120B"}
{"problem_id": "2121A", "problem_title": "A. Letter Home", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2121/A", "problem_statement": "You are given an array of distinct integers $x_1, x_2, \\ldots, x_n$ and an integer $s$.\n\nInitially, you are at position $pos = s$ on the $X$ axis. In one step, you can perform exactly one of the following two actions:\n\n- Move from position $pos$ to position $pos + 1$.\n- Move from position $pos$ to position $pos - 1$.\n\nA sequence of steps will be considered successful if, during the entire journey, you visit each position $x_i$ on the $X$ axis at least once. Note that the initial position $pos = s$ is also considered visited.\n\nYour task is to determine the minimum number of steps in any successful sequence of steps.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\leq t \\leq 1000$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $s$ ($1 \\leq n \\leq 10$, $1 \\leq s \\leq 100$) — the number of positions to visit and the starting position.\n\nThe second line of each test case contains $n$ integers $x_1, x_2, \\ldots, x_n$ ($1 \\leq x_i \\leq 100$). It is guaranteed that for all $1 \\leq i < n$, it holds that $x_i < x_{i + 1}$.\n\n### Output\n\nFor each test case, output the minimum number of steps in any successful sequence of steps.\n\n### Example\n\n#### Input #1\n\n```\n\n12\n\n1 1\n\n1\n\n1 2\n\n1\n\n1 1\n\n2\n\n2 1\n\n2 3\n\n2 2\n\n1 3\n\n2 3\n\n1 2\n\n3 1\n\n1 2 3\n\n3 2\n\n1 3 4\n\n3 3\n\n1 2 3\n\n4 3\n\n1 2 3 10\n\n5 5\n\n1 2 3 6 7\n\n6 6\n\n1 2 3 9 10 11\n\n```\n\n#### Output #1\n\n```\n0\n1\n1\n2\n3\n2\n2\n4\n2\n11\n8\n15\n```\n\n### Note\n\nIn the first test case, no steps need to be taken, so the only visited position will be $1$.\n\nIn the second test case, the following path can be taken: $2 \\rightarrow 1$. The number of steps is $1$.\n\nIn the third test case, the following path can be taken: $1 \\rightarrow 2$. The number of steps is $1$.\n\nIn the fifth test case, the following path can be taken: $2 \\rightarrow 1 \\rightarrow 2 \\rightarrow 3$. The number of steps is $3$.", "cfid": "2121A"}
{"problem_id": "2121B", "problem_title": "B. Above the Clouds", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2121/B", "problem_statement": "You are given a string $s$ of length $n$, consisting of lowercase letters of the Latin alphabet. Determine whether there exist three non-empty strings $a$, $b$, and $c$ such that:\n\n- $a + b + c = s$, meaning the concatenation$^{\\text{∗}}$ of strings $a$, $b$, and $c$ equals $s$.\n- The string $b$ is a substring$^{\\text{†}}$ of the string $a + c$, which is the concatenation of strings $a$ and $c$.\n\n$^{\\text{∗}}$Concatenation of strings $a$ and $b$ is defined as the string $a + b = a_1a_2 \\ldots a_pb_1b_2 \\ldots b_q$, where $p$ and $q$ are the lengths of strings $a$ and $b$, respectively. For example, the concatenation of the strings \"code\" and \"forces\" is \"codeforces\".\n\n$^{\\text{†}}$A string $a$ is a substring of a string $b$ if $a$ can be obtained from $b$ by the deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($3 \\leq n \\leq 10^5$) — the length of the string $s$.\n\nThe second line of each test case contains the string $s$ of length $n$, consisting of lowercase letters of the Latin alphabet.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output \"Yes\" if there exist three non-empty strings $a$, $b$, and $c$ that satisfy the conditions, and \"No\" otherwise.\n\nYou may output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive answers.\n\n### Example\n\n#### Input #1\n\n```\n\n12\n\n3\n\naaa\n\n3\n\naba\n\n3\n\naab\n\n4\n\nabca\n\n4\n\nabba\n\n4\n\naabb\n\n5\n\nabaca\n\n5\n\nabcda\n\n5\n\nabcba\n\n6\n\nabcbbf\n\n6\n\nabcdaa\n\n3\n\nabb\n\n```\n\n#### Output #1\n\n```\nYes\nNo\nYes\nNo\nYes\nYes\nYes\nNo\nYes\nYes\nYes\nYes\n```\n\n### Note\n\nIn the first test case, there exist unique non-empty strings $a$, $b$, and $c$ such that $a + b + c = s$. These are the strings $a =$ \"a\", $b =$ \"a\", and $c =$ \"a\". The concatenation of strings $a$ and $c$ equals $a + c = $ \"aa\". The string $b$ is a substring of this string.\n\nIn the sixth test case, one can choose $a = $ \"a\", $b = $ \"ab\", and $c = $ \"b\". The concatenation of strings $a$ and $c$ equals $a + c = $ \"ab\". The string $b$ is a substring of this string.\n\nIn the seventh test case, one can choose $a = $ \"ab\", $b = $ \"a\", and $c = $ \"ca\". The concatenation of strings $a$ and $c$ equals $a + c = $ \"abca\". The string $b$ is a substring of this string.", "cfid": "2121B"}
{"problem_id": "2121F", "problem_title": "F. Yamakasi", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2121/F", "problem_statement": "You are given an array of integers $a_1, a_2, \\ldots, a_n$ and two integers $s$ and $x$. Count the number of subsegments of the array whose sum of elements equals $s$ and whose maximum value equals $x$.\n\nMore formally, count the number of pairs $1 \\leq l \\leq r \\leq n$ such that:\n\n- $a_l + a_{l + 1} + \\ldots + a_r = s$.\n- $\\max(a_l, a_{l + 1}, \\ldots, a_r) = x$.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains three integers $n$, $s$, and $x$ ($1 \\leq n \\leq 2 \\cdot 10^5$, $-2 \\cdot 10^{14} \\leq s \\leq 2 \\cdot 10^{14}$, $-10^9 \\leq x \\leq 10^9$).\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($-10^9 \\leq a_i \\leq 10^9$).\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the number of subsegments of the array whose sum of elements equals $s$ and whose maximum value equals $x$.\n\n### Example\n\n#### Input #1\n\n```\n\n9\n\n1 0 0\n\n0\n\n1 -2 -1\n\n-2\n\n3 -1 -1\n\n-1 1 -1\n\n6 -3 -2\n\n-1 -1 -1 -2 -1 -1\n\n8 3 2\n\n2 2 -1 -2 3 -1 2 2\n\n9 6 3\n\n1 2 3 1 2 3 1 2 3\n\n13 7 3\n\n0 -1 3 3 3 -2 1 2 2 3 -1 0 3\n\n2 -2 -1\n\n-2 -1\n\n2 -2 -1\n\n-1 -2\n\n```\n\n#### Output #1\n\n```\n1\n0\n2\n0\n2\n7\n8\n0\n0\n```\n\n### Note\n\nIn the first test case, the suitable subsegment is $l = 1$, $r = 1$.\n\nIn the third test case, the suitable subsegments are $l = 1$, $r = 1$ and $l = 3$, $r = 3$.\n\nIn the fifth test case, the suitable subsegments are $l = 1$, $r = 3$ and $l = 6$, $r = 8$.\n\nIn the sixth test case, the suitable subsegments are those for which $r = l + 2$.\n\nIn the seventh test case, the following subsegments are suitable:\n\n- $l = 1$, $r = 7$.\n- $l = 2$, $r = 7$.\n- $l = 3$, $r = 6$.\n- $l = 4$, $r = 8$.\n- $l = 7$, $r = 11$.\n- $l = 7$, $r = 12$.\n- $l = 8$, $r = 10$.\n- $l = 9$, $r = 13$.", "cfid": "2121F"}
{"problem_id": "2121E", "problem_title": "E. Sponsor of Your Problems", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2121/E", "problem_statement": "For two integers $a$ and $b$, we define $f(a, b)$ as the number of positions in the decimal representation of the numbers $a$ and $b$ where their digits are the same. For example, $f(12, 21) = 0$, $f(31, 37) = 1$, $f(19891, 18981) = 2$, $f(54321, 24361) = 3$.\n\nYou are given two integers $l$ and $r$ of the same length in decimal representation. Consider all integers $l \\leq x \\leq r$. Your task is to find the minimum value of $f(l, x) + f(x, r)$.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases. The description of the test cases follows.\n\nEach test case consists of a single line containing two integers $l$ and $r$ ($1 \\leq l \\leq r < 10^9$).\n\nIt is guaranteed that the numbers $l$ and $r$ have the same length in decimal representation and do not have leading zeros.\n\n### Output\n\nFor each test case, output the minimum value of $f(l, x) + f(x, r)$ among all integer values $l \\leq x \\leq r$.\n\n### Example\n\n#### Input #1\n\n```\n\n14\n\n1 1\n\n2 3\n\n4 6\n\n15 16\n\n17 19\n\n199 201\n\n899 999\n\n1990 2001\n\n6309 6409\n\n12345 12501\n\n19987 20093\n\n746814 747932\n\n900990999 900991010\n\n999999999 999999999\n\n```\n\n#### Output #1\n\n```\n2\n1\n0\n3\n2\n2\n1\n3\n3\n4\n3\n5\n12\n18\n```\n\n### Note\n\nIn the first test case, you can choose $x = 1$. Then $f(1, 1) + f(1, 1) = 1 + 1 = 2$.\n\nIn the second test case, you can choose $x = 2$. Then $f(2, 2) + f(2, 3) = 1 + 0 = 1$.\n\nIn the third test case, you can choose $x = 5$. Then $f(4, 5) + f(5, 6) = 0 + 0 = 0$.\n\nIn the fourth test case, you can choose $x = 15$. Then $f(15, 15) + f(15, 16) = 2 + 1 = 3$.\n\nIn the fifth test case, you can choose $x = 18$. Then $f(17, 18) + f(18, 19) = 1 + 1 = 2$.\n\nIn the sixth test case, you can choose $x = 200$. Then $f(199, 200) + f(200, 201) = 0 + 2 = 2$.\n\nIn the seventh test case, you can choose $x = 900$. Then $f(899, 900) + f(900, 999) = 0 + 1 = 1$.\n\nIn the eighth test case, you can choose $x = 1992$. Then $f(1990, 1992) + f(1992, 2001) = 3 + 0 = 3$.", "cfid": "2121E"}
{"problem_id": "2121D", "problem_title": "D. 1709", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2121/D", "problem_statement": "You are given two arrays of integers $a_1, a_2, \\ldots, a_n$ and $b_1, b_2, \\ldots, b_n$. It is guaranteed that each integer from $1$ to $2 \\cdot n$ appears in exactly one of the arrays.\n\nYou need to perform a certain number of operations (possibly zero) so that both of the following conditions are satisfied:\n\n- For each $1 \\leq i < n$, it holds that $a_i < a_{i + 1}$ and $b_i < b_{i + 1}$.\n- For each $1 \\leq i \\leq n$, it holds that $a_i < b_i$.\n\nDuring each operation, you can perform exactly one of the following three actions:\n\n1. Choose an index $1 \\leq i < n$ and swap the values $a_i$ and $a_{i + 1}$.\n2. Choose an index $1 \\leq i < n$ and swap the values $b_i$ and $b_{i + 1}$.\n3. Choose an index $1 \\leq i \\leq n$ and swap the values $a_i$ and $b_i$.\n\nYou do not need to minimize the number of operations, but the total number must not exceed $1709$. Find any sequence of operations that satisfies both conditions.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\leq t \\leq 100$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\leq n \\leq 40$) — the length of the arrays $a$ and $b$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 2 \\cdot n$).\n\nThe third line of each test case contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($1 \\leq b_i \\leq 2 \\cdot n$).\n\nIt is guaranteed that each integer from $1$ to $2 \\cdot n$ appears either in array $a$ or in array $b$.\n\n### Output\n\nFor each test case, output the sequence of operations.\n\nIn the first line for each test case, output the number of operations $k$. Note that $0 \\leq k \\leq 1709$.\n\nIn the following $k$ lines for each test case, output the operations themselves:\n\n- If you want to swap the values $a_i$ and $a_{i + 1}$, output two integers $1$ and $i$. Note that $1 \\leq i < n$.\n- If you want to swap the values $b_i$ and $b_{i + 1}$, output two integers $2$ and $i$. Note that $1 \\leq i < n$.\n- If you want to swap the values $a_i$ and $b_i$, output two integers $3$ and $i$. Note that $1 \\leq i \\leq n$.\n\nIt can be shown that under the given constraints, a solution always exists.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n1\n\n1\n\n2\n\n1\n\n2\n\n1\n\n2\n\n1 3\n\n4 2\n\n2\n\n1 4\n\n3 2\n\n3\n\n6 5 4\n\n3 2 1\n\n3\n\n5 3 4\n\n2 6 1\n\n```\n\n#### Output #1\n\n```\n0\n1\n3 1\n1\n2 1\n1\n3 2\n9\n3 1\n3 2\n3 3\n1 1\n2 1\n2 2\n1 2\n1 1\n2 1\n6\n2 2\n1 1\n1 2\n2 1\n3 1\n3 2\n```\n\n### Note\n\nIn the first test case, $a_1 < b_1$, so no operations need to be applied.\n\nIn the second test case, $a_1 > b_1$. After applying the operation, these values will be swapped.\n\nIn the third test case, after applying the operation, $a = [1, 3]$ and $b = [2, 4]$.\n\nIn the fourth test case, after applying the operation, $a = [1, 2]$ and $b = [3, 4]$.", "cfid": "2121D"}
{"problem_id": "2121C", "problem_title": "C. Those Who Are With Us", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2121/C", "problem_statement": "You are given a matrix of integers with $n$ rows and $m$ columns. The cell at the intersection of the $i$-th row and the $j$-th column contains the number $a_{ij}$.\n\nYou can perform the following operation exactly once:\n\n- Choose two numbers $1 \\leq r \\leq n$ and $1 \\leq c \\leq m$.\n- For all cells $(i, j)$ in the matrix such that $i = r$ or $j = c$, decrease $a_{ij}$ by one.\n\nYou need to find the minimal possible maximum value in the matrix $a$ after performing exactly one such operation.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\leq n \\cdot m \\leq 10^5$) — the number of rows and columns in the matrix.\n\nThe next $n$ lines of each test case describe the matrix $a$. The $i$-th line contains $m$ integers $a_{i1}, a_{i2}, \\ldots, a_{im}$ ($1 \\leq a_{ij} \\leq 100$) — the elements in the $i$-th row of the matrix.\n\nIt is guaranteed that the sum of $n \\cdot m$ across all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the minimum maximum value in the matrix $a$ after performing exactly one operation.\n\n### Example\n\n#### Input #1\n\n```\n\n10\n\n1 1\n\n1\n\n1 2\n\n1 2\n\n2 1\n\n2\n\n1\n\n2 2\n\n4 2\n\n3 4\n\n3 4\n\n1 2 3 2\n\n3 2 1 3\n\n2 1 3 2\n\n4 3\n\n1 5 1\n\n3 1 3\n\n5 5 5\n\n3 5 1\n\n4 4\n\n1 3 3 2\n\n2 3 2 2\n\n1 2 2 1\n\n3 3 2 3\n\n2 2\n\n2 2\n\n1 2\n\n3 2\n\n1 2\n\n2 1\n\n1 2\n\n3 3\n\n2 1 1\n\n1 2 1\n\n1 1 2\n\n```\n\n#### Output #1\n\n```\n0\n1\n1\n3\n2\n4\n3\n1\n1\n2\n```\n\n### Note\n\nIn the first three test cases, you can choose $r = 1$ and $c = 1$.\n\nIn the fourth test case, you can choose $r = 1$ and $c = 2$.\n\n![](https://espresso.codeforces.com/c17767a6920a311231f92f0369c10b9b6a34d491.png)\n\nIn the fifth test case, you can choose $r = 2$ and $c = 3$.\n\n![](https://espresso.codeforces.com/45bddc965ec3fa397cb2b518c9236cd1e45f846e.png)\n\nIn the sixth test case, you can choose $r = 3$ and $c = 2$.", "cfid": "2121C"}
{"problem_id": "2113B", "problem_title": "B. Good Start", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2113/B", "problem_statement": "The roof is a rectangle of size $w \\times h$ with the bottom left corner at the point $(0, 0)$ on the plane. Your team needs to completely cover this roof with identical roofing sheets of size $a \\times b$, with the following conditions:\n\n- The sheets cannot be rotated (not even by $90^\\circ$).\n- The sheets must not overlap (but they can touch at the edges).\n- The sheets can extend beyond the boundaries of the rectangular roof.\n\nA novice from your team has already placed two such sheets on the roof in such a way that the sheets do not overlap and each of them partially covers the roof.\n\nYour task is to determine whether it is possible to completely tile the roof without removing either of the two already placed sheets.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains four integers $w$, $h$, $a$, and $b$ ($1 \\le w, h, a, b \\le 10^9$) — the dimensions of the roof and the dimensions of the roofing sheets, respectively.\n\nThe second line of each test case contains four integers $x_1$, $y_1$, $x_2$, and $y_2$ ($-a + 1 \\le x_1, x_2 \\le w - 1, -b + 1 \\le y_1, y_2 \\le h - 1$) — the coordinates of the bottom left corners of the already placed roofing sheets. It is guaranteed that these sheets do not overlap.\n\n### Output\n\nFor each test case, output \"Yes\" (without quotes) if it is possible to completely tile the roof without removing either of the two already placed tiles, and \"No\" (without quotes) otherwise.\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n6 5 2 3\n\n-1 -2 5 4\n\n4 4 2 2\n\n0 0 3 1\n\n10 9 3 2\n\n0 0 4 3\n\n10 9 3 2\n\n0 0 6 3\n\n5 5 2 2\n\n-1 -1 4 -1\n\n5 5 2 2\n\n-1 -1 2 3\n\n7 8 2 4\n\n0 0 0 5\n\n```\n\n#### Output #1\n\n```\nYes\nNo\nNo\nYes\nNo\nYes\nNo\n```\n\n### Note\n\nIn the first test case, it is possible to add $8$ roofing sheets as follows:\n\n![](https://espresso.codeforces.com/76a7cc7bc4e86f820c778a0bb385668955eaab01.png)\n\nIn the second test case, it is impossible to completely tile the roof:\n\n![](https://espresso.codeforces.com/7a137282544846beb0e98facae5ddf58e8248fee.png)", "cfid": "2113B"}
{"problem_id": "2113C", "problem_title": "C. Smilo and Minecraft", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2113/C", "problem_statement": "The boy Smilo is playing Minecraft! To prepare for the battle with the dragon, he needs a lot of golden apples, and for that, he requires a lot of gold. Therefore, Smilo goes to the mine.\n\nThe mine is a rectangular grid of size $n \\times m$, where each cell can be either gold ore, stone, or an empty cell. Smilo can blow up dynamite in any empty cell. When dynamite explodes in an empty cell with coordinates $(x, y)$, all cells within a square of side $2k + 1$ centered at cell $(x, y)$ become empty. If gold ore was located strictly inside this square (not on the boundary), it disappears. However, if the gold ore was on the boundary of this square, Smilo collects that gold.\n\nDynamite can only be detonated inside the mine, but the explosion square can extend beyond the mine's boundaries.\n\nDetermine the maximum amount of gold that Smilo can collect.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n$, $m$, and $k$ ($1 \\leq n, m, k \\leq 500$) — the number of rows, columns, and the explosion parameter $k$, respectively.\n\nEach of the following $n$ lines contains $m$ characters, each of which is equal to '.', '#', or 'g', where '.' — is an empty cell, '#' — is stone, 'g' — is gold. It is guaranteed that at least one of the cells is empty.\n\nIt is guaranteed that the sum $n \\cdot m$ across all test cases does not exceed $2.5 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the maximum amount of gold that can be obtained.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2 3 1\n\n#.#\n\ng.g\n\n2 3 2\n\n#.#\n\ng.g\n\n3 4 2\n\n.gg.\n\ng..#\n\ng##.\n\n```\n\n#### Output #1\n\n```\n2\n0\n4\n```\n\n### Note\n\nIn the first test case, Smilo can detonate the dynamite in any empty cell and obtain $2$ gold:\n\n![](https://espresso.codeforces.com/8d84438b7b95b71aaa30d080d90a75329fdadcac.png)\n\nIn the second test case, no matter what Smilo does, he will not be able to obtain any gold:\n\n![](https://espresso.codeforces.com/98712070a6a4b0c65db7542b15f57d61ae19e48e.png)\n\nIn the third test case, it is possible to detonate the dynamite in the bottom right corner to obtain $2$ gold, and then make another explosion one cell to the left to obtain the remaining $2$ gold:\n\n![](https://espresso.codeforces.com/b781559838668a5220fc0c077b93d684cd0ee5ec.png)", "cfid": "2113C"}
{"problem_id": "2113A", "problem_title": "A. Shashliks", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2113/A", "problem_statement": "You are the owner of a popular shashlik restaurant, and your grill is the heart of your kitchen. However, the grill has a peculiarity: after cooking each shashlik, its temperature drops.\n\nYou need to cook as many portions of shashlik as possible, and you have an unlimited number of portions of two types available for cooking:\n\n- The first type requires a temperature of at least $a$ degrees at the start of cooking, and after cooking, the grill's temperature decreases by $x$ degrees.\n- The second type requires a temperature of at least $b$ degrees at the start of cooking, and after cooking, the grill's temperature decreases by $y$ degrees.\n\nInitially, the grill's temperature is $k$ degrees. Determine the maximum total number of portions of shashlik that can be cooked.\n\nNote that the grill's temperature can be negative.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe only line of each test case contains five integers $k$, $a$, $b$, $x$, and $y$ ($1 \\le k, a, b, x, y \\le 10^9$) — the initial temperature of the grill, the required temperature for cooking the first and second types of shashlik, respectively, as well as the temperature drop after cooking the first and second types of shashlik, respectively.\n\n### Output\n\nFor each test case, output a single integer — the maximum number of portions of shashlik that you can cook.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n10 3 4 2 1\n\n1 10 10 1 1\n\n100 17 5 2 3\n\n28 14 5 2 4\n\n277 5 14 1 3\n\n```\n\n#### Output #1\n\n```\n8\n0\n46\n10\n273\n```\n\n### Note\n\nIn the first test case, it is advantageous to cook $7$ portions of the second type of shashlik; after that, the grill's temperature will be $3$ degrees, and we can cook one more portion of the first type of shashlik.\n\nIn the second test case, we cannot cook either type of shashlik because the grill is too cold.\n\nIn the fourth test case, it is advantageous to cook $8$ portions of the first type of shashlik; after that, it will be possible to cook another $2$ portions of the second type of shashlik.", "cfid": "2113A"}
{"problem_id": "2118D1", "problem_title": "D1. Red Light, Green Light (Easy version)", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2118/D1", "problem_statement": "This is the easy version of the problem. The only difference is the constraint on $k$ and the total sum of $n$ and $q$ across all test cases. You can make hacks only if both versions of the problem are solved.\n\nYou are given a strip of length $10^{15}$ and a constant $k$. There are exactly $n$ cells that contain a traffic light; each has a position $p_i$ and an initial delay $d_i$ for which $d_i < k$. The $i$-th traffic light works the following way:\n\n- it shows red at the $l \\cdot k + d_i$-th second, where $l$ is an integer,\n- it shows green otherwise.\n\nAt second $0$, you are initially positioned at some cell on the strip, facing the positive direction. At each second, you perform the following actions in order:\n\n- If the current cell contains a red traffic light, you turn around.\n- Move one cell in the direction you are currently facing.\n\nYou are given $q$ different starting positions. For each one, determine whether you will eventually leave the strip within $10^{100}$ seconds.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 500$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$, $k$ ($\\mathbf{1 \\le n \\le 500}$ and $\\mathbf{1 \\le k \\le 500}$) — the number of traffic lights and the length of the period.\n\nThe second line of each test case contains $n$ integers $p_1, p_2, \\ldots p_n$ ($1 \\le p_1 < p_2 < \\cdots < p_n \\le 10^{15}$) — the positions of the traffic lights.\n\nThe third line of each test case contains $n$ integers $d_1, d_2, \\ldots d_n$ ($0 \\le d_i < k$) — the delays of the traffic lights.\n\nThe fourth line of each test case contains one integer $q$ ($\\mathbf{1 \\le q \\le 500}$) — the number of queries.\n\nThe fifth line of each test case contains $q$ integers $a_1, a_2, \\ldots, a_q$ ($1 \\leq a_i \\leq 10^{15}$) — the starting positions.\n\nIt is guaranteed that the sum of $n$ and $q$ over all test cases does not exceed $\\mathbf{500}$.\n\n### Output\n\nFor each test case, output $q$ lines. Each line should contain \"YES\" if you will eventually leave the strip and \"NO\" otherwise. You can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2 2\n\n1 4\n\n1 0\n\n3\n\n1 2 3\n\n9 4\n\n1 2 3 4 5 6 7 8 9\n\n3 2 1 0 1 3 3 1 1\n\n5\n\n2 5 6 7 8\n\n4 2\n\n1 2 3 4\n\n0 0 0 0\n\n4\n\n1 2 3 4\n\n3 4\n\n1 2 3\n\n3 1 1\n\n3\n\n1 2 3\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nYES\nYES\nYES\nYES\nNO\nNO\nYES\nYES\nNO\nNO\nYES\nNO\nYES\n```\n\n### Note\n\nIn the first test case, the following happens at starting positions $1$, $2$, and $3$:\n\n![](https://espresso.codeforces.com/63db34c82cbed1e62971514d85a4a6bf71302a79.png)\n\nAnd the following in the second test case at starting position $2$:\n\n![](https://espresso.codeforces.com/70971ec2952940a09246b1e55290386a0dec24a1.png)", "cfid": "2118D1"}
{"problem_id": "2118A", "problem_title": "A. Equal Subsequences", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2118/A", "problem_statement": "We call a bitstring$^{\\text{∗}}$ perfect if it has the same number of $\\mathtt{101}$ and $\\mathtt{010}$ subsequences$^{\\text{†}}$. Construct a perfect bitstring of length $n$ where the number of $\\mathtt{1}$ characters it contains is exactly $k$.\n\nIt can be proven that the construction is always possible. If there are multiple solutions, output any of them.\n\n$^{\\text{∗}}$A bitstring is a string consisting only of the characters $\\mathtt{0}$ and $\\mathtt{1}$.\n\n$^{\\text{†}}$A sequence $a$ is a subsequence of a string $b$ if $a$ can be obtained from $b$ by the deletion of several (possibly zero or all) characters.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 500$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\le n \\le 100$, $0 \\le k \\le n$) — the size of the bitstring and the number of $\\mathtt{1}$ characters in the bitstring.\n\n### Output\n\nFor each test case, output the constructed bitstring. If there are multiple solutions, output any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n4 2\n\n5 3\n\n5 5\n\n6 2\n\n1 1\n\n```\n\n#### Output #1\n\n```\n1010\n10110\n11111\n100010\n1```\n\n### Note\n\nIn the first test case, the number of $\\mathtt{101}$ and $\\mathtt{010}$ subsequences is the same, both being $1$, and the sequence contains exactly two $\\mathtt{1}$ characters.\n\nIn the second test case, the number of $\\mathtt{101}$ and $\\mathtt{010}$ subsequences is the same, both being $2$, and the sequence contains exactly three $\\mathtt{1}$ characters.\n\nIn the third test case, the number of $\\mathtt{101}$ and $\\mathtt{010}$ subsequences is the same, both being $0$, and the sequence contains exactly five $\\mathtt{1}$ characters.", "cfid": "2118A"}
{"problem_id": "2118C", "problem_title": "C. Make It Beautiful", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2118/C", "problem_statement": "You are given an array $a$ of $n$ integers. We define the $\\text{beauty}$ of a number $x$ to be the number of $1$ bits in its binary representation. We define the beauty of an array to be the sum of beauties of the numbers it contains.\n\nIn one operation, you can select an index $i$ $(1 \\le i \\le n)$ and increase $a_i$ by $1$.\n\nFind the maximum beauty of the array after doing at most $k$ operations.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 5000$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\le n \\le 5000$, $0 \\le k \\le 10^{18}$) — the length of the array and the maximal number of operations.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots a_n$ ($0 \\le a_i \\le 10^9$) —denoting the array $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5000$.\n\n### Output\n\nFor each test case, output a single integer, the maximum beauty after at most $k$ operations.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n5 2\n\n0 1 7 2 4\n\n5 3\n\n0 1 7 2 4\n\n1 1\n\n3\n\n3 0\n\n2 0 3\n\n1 100000000000\n\n0\n\n```\n\n#### Output #1\n\n```\n8\n9\n2\n3\n36\n```\n\n### Note\n\nIn the first test case, $a = [0, 1, 7, 2, 4]$.\n\n- apply the first operation at $i = 1$, the new array is $a = [1, 1, 7, 2, 4]$\n- apply the second operation at $i = 4$, the new array is $a = [1, 1, 7, 3, 4]$\n\nThe beauty of this array is $1 + 1 + 3 + 2 + 1 = 8$. One of the other valid solutions with the same beauty is $[0, 1, 7, 3, 5]$.\n\nIn the third test case, $a = [3]$. Since you are not required to use exactly $k$ operations, it is optimal to do none.", "cfid": "2118C"}
{"problem_id": "2118B", "problem_title": "B. Make It Permutation", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2118/B", "problem_statement": "There is a matrix $A$ of size $n\\times n$ where $A_{i,j}=j$ for all $1 \\le i,j \\le n$.\n\nIn one operation, you can select a row and reverse any subarray$^{\\text{∗}}$ in it.\n\nFind a sequence of at most $2n$ operations such that every column will contain a permutation$^{\\text{†}}$ of length $n$.\n\nIt can be proven that the construction is always possible. If there are multiple solutions, output any of them.\n\n$^{\\text{∗}}$An array $a$ is a subarray of an array $b$ if $a$ can be obtained from $b$ by deleting zero or more elements from the beginning and zero or more elements from the end.\n\n$^{\\text{†}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 100$). The description of the test cases follows.\n\nThe first line of each test case contains one integer $n$ ($3 \\le n \\le 5000$) — denoting the number of rows and columns in the matrix.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5000$.\n\n### Output\n\nFor each test case, on the first line, print an integer $k$ $(0 \\le k \\le 2n)$, the number of operations you wish to perform. On the next lines, you should print the operations.\n\nTo print an operation, use the format \"$i\\;l\\;r$\" ($1 \\leq l \\leq r \\leq n$ and $1 \\leq i \\leq n$) which reverses the subarray $A_{i, l}$, $A_{i, l+1}$, $\\ldots$, $A_{i, r}$.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n3\n\n4\n\n```\n\n#### Output #1\n\n```\n4\n2 1 3\n2 2 3\n3 1 2\n3 2 3\n5\n2 1 4\n3 1 3\n3 2 4\n4 3 4\n4 1 2```\n\n### Note\n\nIn the first test case, the following operations are a valid solution:\n\n![](https://espresso.codeforces.com/3b9509868f6d3b65d8a4a7a94688db76911f59b7.png)", "cfid": "2118B"}
{"problem_id": "2117D", "problem_title": "D. Retaliation", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2117/D", "problem_statement": "Yousef wants to explode an array $a_1, a_2, \\dots, a_n$. An array gets exploded when all of its elements become equal to zero.\n\nIn one operation, Yousef can do exactly one of the following:\n\n1. For every index $i$ in $a$, decrease $a_i$ by $i$.\n2. For every index $i$ in $a$, decrease $a_i$ by $n - i + 1$.\n\nYour task is to help Yousef determine if it is possible to explode the array using any number of operations.\n\n### Input\n\nThe first line of the input contains an integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains an integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$) — the size of the array.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$) — the elements of the array.\n\nIt is guaranteed that the sum of $n$ over all test cases doesn't exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print \"YES\" if Yousef can explode the array, otherwise output \"NO\".\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n4\n\n3 6 6 3\n\n5\n\n21 18 15 12 9\n\n10\n\n2 6 10 2 5 5 1 2 4 10\n\n7\n\n10 2 16 12 8 20 4\n\n2\n\n52 101\n\n2\n\n10 2\n\n```\n\n#### Output #1\n\n```\nNO\nYES\nNO\nNO\nYES\nNO\n```\n\n### Note\n\nIn the second test case, we can do the following:\n\n- Perform $1$ operation of the first type. The array becomes $[20, 16, 12, 8, 4]$.\n- Perform $4$ operations of the second type. The array becomes $[0, 0, 0, 0, 0]$.\n\nIn the first, third, fourth, and sixth test cases, it can be proven that it is impossible to make all elements equal to zero using any number of operations.", "cfid": "2117D"}
{"problem_id": "2117B", "problem_title": "B. Shrink", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2117/B", "problem_statement": "A shrink operation on an array $a$ of size $m$ is defined as follows:\n\n- Choose an index $i$ ($2 \\le i \\le m - 1$) such that $a_i \\gt a_{i - 1}$ and $a_i \\gt a_{i + 1}$.\n- Remove $a_i$ from the array.\n\nDefine the score of a permutation$^{\\text{∗}}$ $p$ as the maximum number of times that you can perform the shrink operation on $p$.\n\nYousef has given you a single integer $n$. Construct a permutation $p$ of length $n$ with the maximum possible score. If there are multiple answers, you can output any of them.\n\n$^{\\text{∗}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n### Input\n\nThe first line of the input contains an integer $t$ ($1 \\le t \\le 10^3$) — the number of test cases.\n\nEach test case contains an integer $n$ ($3 \\le n \\le 2 \\cdot 10^5$) — the size of the permutation.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output any permutation $p_1, p_2, \\dots, p_n$ that maximizes the number of shrink operations.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n3\n\n6\n\n```\n\n#### Output #1\n\n```\n1 3 2\n2 3 6 4 5 1\n```\n\n### Note\n\nIn the first test case:\n\n- We choose $p = [1, 3, 2]$.\n- Choose index $2$, and remove $p_2$ from the array. The array becomes $p = [1, 2]$.\n\nIt can be shown that the maximum number of operations we can perform is $1$. Another valid answer is $p = [2, 3, 1]$.\n\nIn the second test case:\n\n- We choose $p = [2, 3, 6, 4, 5, 1]$.\n- Choose index $5$, and remove $p_5$ from the array. The array becomes $p = [2, 3, 6, 4, 1]$.\n- Choose index $3$, and remove $p_3$ from the array. The array becomes $p = [2, 3, 4, 1]$.\n- Choose index $3$, and remove $p_3$ from the array. The array becomes $p = [2, 3, 1]$.\n- Choose index $2$, and remove $p_2$ from the array. The array becomes $p = [2, 1]$.\n\nThe maximum number of operations we can perform is $4$. Any permutation with a score of $4$ is valid.", "cfid": "2117B"}
{"problem_id": "2117E", "problem_title": "E. Lost Soul", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2117/E", "problem_statement": "You are given two integer arrays $a$ and $b$, each of length $n$.\n\nYou may perform the following operation any number of times:\n\n- Choose an index $i$ $(1 \\le i \\le n - 1)$, and set $a_i := b_{i + 1}$, or set $b_i := a_{i + 1}$.\n\nBefore performing any operations, you are allowed to choose an index $i$ $(1 \\le i \\le n)$ and remove both $a_i$ and $b_i$ from the arrays. This removal can be done at most once.\n\nLet the number of matches between two arrays $c$ and $d$ of length $m$ be the number of positions $j$ $(1 \\le j \\le m)$ such that $c_j = d_j$.\n\nYour task is to compute the maximum number of matches you can achieve.\n\n### Input\n\nThe first line of the input contains an integer $t$ $(1 \\le t \\le 10^4)$ — the number of test cases. The description of each test case follows.\n\nThe first line contains an integer $n$ $(2 \\le n \\le 2 \\cdot 10^5)$ — the length of $a$ and $b$.\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ $(1 \\le a_i \\le n)$ — the elements of $a$.\n\nThe third line contains $n$ integers $b_1, b_2, \\dots, b_n$ $(1 \\le b_i \\le n)$ — the elements of $b$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print a single integer — the answer for the test case.\n\n### Example\n\n#### Input #1\n\n```\n\n10\n\n4\n\n1 3 1 4\n\n4 3 2 2\n\n6\n\n2 1 5 3 6 4\n\n3 2 4 5 1 6\n\n2\n\n1 2\n\n2 1\n\n6\n\n2 5 1 3 6 4\n\n3 5 2 3 4 6\n\n4\n\n1 3 2 2\n\n2 1 3 4\n\n8\n\n3 1 4 6 2 2 5 7\n\n4 2 3 7 1 1 6 5\n\n10\n\n5 1 2 7 3 9 4 10 6 8\n\n6 2 3 6 4 10 5 1 7 9\n\n5\n\n3 2 4 1 5\n\n2 4 5 1 3\n\n7\n\n2 2 6 4 1 3 5\n\n3 1 6 5 1 4 2\n\n5\n\n4 1 3 2 5\n\n3 2 1 5 4\n\n```\n\n#### Output #1\n\n```\n3\n3\n0\n4\n3\n5\n6\n4\n5\n2\n```\n\n### Note\n\nIn the first test case, we can do the following:\n\n- We will choose not to remove any index.\n- Choose index $3$, and set $a_3 := b_4$. The arrays become: $a = [1, 3, 2, 4]$, $b = [4, 3, 2, 2]$.\n- Choose index $1$, and set $a_1 := b_2$. The arrays become: $a = [3, 3, 2, 4]$, $b = [4, 3, 2, 2]$.\n- Choose index $1$, and set $b_1 := a_2$. The arrays become: $a = [3, 3, 2, 4]$, $b = [3, 3, 2, 2]$. Notice that you can perform $a_i := b_{i + 1}$ and $b_i := a_{i + 1}$ on the same index $i$.\n\nThe number of matches is $3$. It can be shown that this is the maximum answer we can achieve.\n\nIn the second test case, we can do the following to achieve a maximum of $3$:\n\n- Let's choose to remove index $5$. The arrays become: $a = [2, 1, 5, 3, 4]$, $b = [3, 2, 4, 5, 6]$.\n- Choose index $4$, and set $b_4 := a_5$. The arrays become: $a = [2, 1, 5, 3, 4]$, $b = [3, 2, 4, 4, 6]$.\n- Choose index $3$, and set $a_3 := b_4$. The arrays become: $a = [2, 1, 4, 3, 4]$, $b = [3, 2, 4, 4, 6]$.\n- Choose index $2$, and set $a_2 := b_3$. The arrays become: $a = [2, 4, 4, 3, 4]$, $b = [3, 2, 4, 4, 6]$.\n- Choose index $1$, and set $b_1 := a_2$. The arrays become: $a = [2, 4, 4, 3, 4]$, $b = [4, 2, 4, 4, 6]$.\n- Choose index $2$, and set $b_2 := a_3$. The arrays become: $a = [2, 4, 4, 3, 4]$, $b = [4, 4, 4, 4, 6]$.\n- Choose index $1$, and set $a_1 := b_2$. The arrays become: $a = [4, 4, 4, 3, 4]$, $b = [4, 4, 4, 4, 6]$.\n\nIn the third test case, it can be shown that we can not get any matches. Therefore, the answer is $0$.", "cfid": "2117E"}
{"problem_id": "2117A", "problem_title": "A. False Alarm", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2117/A", "problem_statement": "Yousef is at the entrance of a long hallway with $n$ doors in a row, numbered from $1$ to $n$. He needs to pass through all the doors from $1$ to $n$ in order of numbering and reach the exit (past door $n$).\n\nEach door can be open or closed. If a door is open, Yousef passes through it in $1$ second. If the door is closed, Yousef can't pass through it.\n\nHowever, Yousef has a special button which he can use at most once at any moment. This button makes all closed doors become open for $x$ seconds.\n\nYour task is to determine if Yousef can pass through all the doors if he can use the button at most once.\n\n### Input\n\nThe first line of the input contains an integer $t$ ($1 \\le t \\le 1000$) — the number of test cases.\n\nThe first line of each test case contains two integers $n, x$ ($1 \\le n, x \\le 10$) — the number of doors and the number of seconds of the button, respectively.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, ..., a_n$ ($a_i \\in \\{0, 1\\}$) — the state of each door. Open doors are represented by '0', while closed doors are represented by '1'.\n\nIt is guaranteed that each test case contains at least one closed door.\n\n### Output\n\nFor each test case, output \"YES\" if Yousef can reach the exit, and \"NO\" otherwise.\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n4 2\n\n0 1 1 0\n\n6 3\n\n1 0 1 1 0 0\n\n8 8\n\n1 1 1 0 0 1 1 1\n\n1 2\n\n1\n\n5 1\n\n1 0 1 0 1\n\n7 4\n\n0 0 0 1 1 0 1\n\n10 3\n\n0 1 0 0 1 0 0 1 0 0\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nYES\nYES\nNO\nYES\nNO\n```\n\n### Note\n\nIn the first test case, the optimal way is as follows:\n\n- At time $0$, the door is open, so Yousef passes.\n- At time $1$, the door is closed, Yousef can use the button now and pass through the door.\n- At time $2$, the button's effect is still on, so Yousef can still pass.\n- At time $3$, the button's effect has finished, but the door is open. Yousef passes and reaches the exit.\n\nIn the second test case, Yousef has a 3-second button, but he would need at least a 4-second button to reach the exit. Therefore, the answer is NO.\n\nIn the third test case, Yousef can turn on the button before starting to move. All the doors will stay open until he reaches the exit.", "cfid": "2117A"}
{"problem_id": "2117F", "problem_title": "F. Wildflower", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2117/F", "problem_statement": "Yousef has a rooted tree$^{\\text{∗}}$ consisting of exactly $n$ vertices, which is rooted at vertex $1$. You would like to give Yousef an array $a$ of length $n$, where each $a_i$ $(1 \\le i \\le n)$ can either be $1$ or $2$.\n\nLet $s_u$ denote the sum of $a_v$ where vertex $v$ is in the subtree$^{\\text{†}}$ of vertex $u$. Yousef considers the tree special if all the values in $s$ are pairwise distinct (i.e., all subtree sums are unique).\n\nYour task is to help Yousef count the number of different arrays $a$ that result in the tree being special. Two arrays $b$ and $c$ are different if there exists an index $i$ such that $b_i \\neq c_i$.\n\nAs the result can be very large, you should print it modulo $10^9 + 7$.\n\n$^{\\text{∗}}$A tree is a connected undirected graph with $n - 1$ edges.\n\n$^{\\text{†}}$The subtree of a vertex $v$ is the set of all vertices that pass through $v$ on a simple path to the root. Note that vertex $v$ is also included in the set.\n\n### Input\n\nThe first line contains an integer $t$ $(1 \\le t \\le 10^4)$ — the number of test cases.\n\nEach test case consists of several lines. The first line of the test case contains an integer $n$ $(2 \\le n \\le 2 \\cdot 10^5)$ — the number of vertices in the tree.\n\nThen $n−1$ lines follow, each of them contains two integers $u$ and $v$ $(1 \\le u,v \\le n, u \\ne v)$ which describe a pair of vertices connected by an edge. It is guaranteed that the given graph is a tree and has no loops or multiple edges.\n\nIt is guaranteed that the sum of $n$ over all test cases doesn't exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print one integer $x$ — the number of different arrays $a$ that result in the tree being special, modulo $10^9 + 7$.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n2\n\n1 2\n\n8\n\n1 2\n\n2 3\n\n3 8\n\n2 4\n\n4 5\n\n5 6\n\n6 7\n\n10\n\n1 2\n\n2 3\n\n3 4\n\n4 5\n\n5 6\n\n4 7\n\n7 8\n\n4 9\n\n9 10\n\n7\n\n1 4\n\n4 2\n\n3 2\n\n3 5\n\n2 6\n\n6 7\n\n7\n\n1 2\n\n2 3\n\n3 4\n\n3 5\n\n4 6\n\n6 7\n\n7\n\n5 7\n\n4 6\n\n1 6\n\n1 3\n\n2 6\n\n6 7\n\n5\n\n3 4\n\n1 2\n\n1 3\n\n2 5\n\n```\n\n#### Output #1\n\n```\n4\n24\n0\n16\n48\n0\n4\n```\n\n### Note\n\nThe tree given in the fifth test case:\n\n![](https://espresso.codeforces.com/bd9f04ef8898b0b29a6e5e86a17295ed03a19d03.png)", "cfid": "2117F"}
{"problem_id": "2117C", "problem_title": "C. Cool Partition", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2117/C", "problem_statement": "Yousef has an array $a$ of size $n$. He wants to partition the array into one or more contiguous segments such that each element $a_i$ belongs to exactly one segment.\n\nA partition is called cool if, for every segment $b_j$, all elements in $b_j$ also appear in $b_{j + 1}$ (if it exists). That is, every element in a segment must also be present in the segment following it.\n\nFor example, if $a = [1, 2, 2, 3, 1, 5]$, a cool partition Yousef can make is $b_1 = [1, 2]$, $b_2 = [2, 3, 1, 5]$. This is a cool partition because every element in $b_1$ (which are $1$ and $2$) also appears in $b_2$. In contrast, $b_1 = [1, 2, 2]$, $b_2 = [3, 1, 5]$ is not a cool partition, since $2$ appears in $b_1$ but not in $b_2$.\n\nNote that after partitioning the array, you do not change the order of the segments. Also, note that if an element appears several times in some segment $b_j$, it only needs to appear at least once in $b_{j + 1}$.\n\nYour task is to help Yousef by finding the maximum number of segments that make a cool partition.\n\n### Input\n\nThe first line of the input contains integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains an integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) — the size of the array.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le n$) — the elements of the array.\n\nIt is guaranteed that the sum of $n$ over all test cases doesn't exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print one integer — the maximum number of segments that make a cool partition.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n6\n\n1 2 2 3 1 5\n\n8\n\n1 2 1 3 2 1 3 2\n\n5\n\n5 4 3 2 1\n\n10\n\n5 8 7 5 8 5 7 8 10 9\n\n3\n\n1 2 2\n\n9\n\n3 3 1 4 3 2 4 1 2\n\n6\n\n4 5 4 5 6 4\n\n8\n\n1 2 1 2 1 2 1 2\n\n```\n\n#### Output #1\n\n```\n2\n3\n1\n3\n1\n3\n3\n4\n```\n\n### Note\n\nThe first test case is explained in the statement. We can partition it into $b_1 = [1, 2]$, $b_2 = [2, 3, 1, 5]$. It can be shown there is no other partition with more segments.\n\nIn the second test case, we can partition the array into $b_1 = [1, 2]$, $b_2 = [1, 3, 2]$, $b_3 = [1, 3, 2]$. The maximum number of segments is $3$.\n\nIn the third test case, the only partition we can make is $b_1 = [5, 4, 3, 2, 1]$. Any other partition will not satisfy the condition. Therefore, the answer is $1$.", "cfid": "2117C"}
{"problem_id": "2111A", "problem_title": "A. Energy Crystals", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2111/A", "problem_statement": "There are three energy crystals numbered $1$, $2$, and $3$; let's denote the energy level of the $i$-th crystal as $a_i$. Initially, all of them are discharged, meaning their energy levels are equal to $0$. Each crystal needs to be charged to level $x$ (exactly $x$, not greater).\n\nIn one action, you can increase the energy level of any one crystal by any positive amount; however, the energy crystals are synchronized with each other, so an action can only be performed if the following condition is met afterward:\n\n- for each pair of crystals $i$, $j$, it must hold that $a_{i} \\ge \\lfloor\\frac{a_{j}}{2}\\rfloor$.\n\nWhat is the minimum number of actions required to charge all the crystals?\n\n### Input\n\nEach test consists of several test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10^{4}$) — the number of test cases. The description of the test cases follows.\n\nThe only line of each test case contains a single integer $x$ ($1 \\le x \\le 10^{9}$).\n\n### Output\n\nFor each test case, output a single integer — the minimum number of actions required to charge all energy crystals to level $x$.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n1\n\n5\n\n14\n\n2025\n\n31415\n\n536870910\n\n1000000000\n\n```\n\n#### Output #1\n\n```\n3\n7\n9\n23\n31\n59\n61\n```\n\n### Note\n\nIn the first test case, one possible sequence of actions is:\n\n\n\n$$[0, 0, 0] \\to [\\color{red}{1}, 0, 0] \\to [1, 0, \\color{red}{1}] \\to [1, \\color{red}{1}, 1]$$\n\nOne of the possible sequences of actions in the second test case is:\n\n\n\n$$[0, 0, 0] \\to [\\color{red}{1}, 0, 0] \\to [1, \\color{red}{1}, 0] \\to [1, 1, \\color{red}{2}] \\to [\\color{red}{3}, 1, 2] \\to [3, \\color{red}{5}, 2] \\to [\\color{red}{5}, 5, 2] \\to [5, 5, \\color{red}{5}]$$\n\n", "cfid": "2111A"}
{"problem_id": "2111B", "problem_title": "B. Fibonacci Cubes", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2111/B", "problem_statement": "There are $n$ Fibonacci cubes, where the side of the $i$-th cube is equal to $f_{i}$, where $f_{i}$ is the $i$-th Fibonacci number.\n\nIn this problem, the Fibonacci numbers are defined as follows:\n\n- $f_{1} = 1$\n- $f_{2} = 2$\n- $f_{i} = f_{i - 1} + f_{i - 2}$ for $i > 2$\n\nThere are also $m$ empty boxes, where the $i$-th box has a width of $w_{i}$, a length of $l_{i}$, and a height of $h_{i}$.\n\nFor each of the $m$ boxes, you need to determine whether all the cubes can fit inside that box. The cubes must be placed in the box following these rules:\n\n- The cubes can only be stacked in the box such that the sides of the cubes are parallel to the sides of the box;\n- Every cube must be placed either on the bottom of the box or on top of other cubes in such a way that all space below the cube is occupied;\n- A larger cube cannot be placed on top of a smaller cube.\n\n### Input\n\nEach test consists of several test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10^{3}$) — the number of test cases. The description of the test cases follows.\n\nIn the first line of each test case, there are two integers $n$ and $m$ ($2 \\le n \\le 10, 1 \\le m \\le 2 \\cdot 10^{5}$) — the number of cubes and the number of empty boxes.\n\nThe next $m$ lines of each test case contain $3$ integers $w_{i}$, $l_{i}$, and $h_{i}$ ($1 \\le w_{i}, l_{i}, h_{i} \\le 150$) — the dimensions of the $i$-th box.\n\nAdditional constraints on the input:\n\n- The sum of $m$ across all test cases does not exceed $2 \\cdot 10^{5}$.\n\n### Output\n\nFor each test case, output a string of length $m$, where the $i$-th character is equal to \"1\" if all $n$ cubes can fit into the $i$-th box; otherwise, the $i$-th character is equal to \"0\".\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n5 4\n\n3 1 2\n\n10 10 10\n\n9 8 13\n\n14 7 20\n\n2 6\n\n3 3 3\n\n1 2 1\n\n2 1 2\n\n3 2 2\n\n2 3 1\n\n3 2 4\n\n```\n\n#### Output #1\n\n```\n0010\n100101\n```\n\n### Note\n\nIn the first test case, only one box is suitable. The cubes can be placed in it as follows:\n\n![](https://espresso.codeforces.com/54966256bccdbc30210ab7bdc8f99c3da1e1312f.png)", "cfid": "2111B"}
{"problem_id": "2111C", "problem_title": "C. Equal Values", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2111/C", "problem_statement": "You are given an array $a_1, a_2, \\dots, a_n$, consisting of $n$ integers.\n\nIn one operation, you are allowed to perform one of the following actions:\n\n- Choose a position $i$ ($1 < i \\le n$) and make all elements to the left of $i$ equal to $a_i$. That is, assign the value $a_i$ to all $a_j$ ($1 \\le j < i$). The cost of such an operation is $(i - 1) \\cdot a_i$.\n- Choose a position $i$ ($1 \\le i < n$) and make all elements to the right of $i$ equal to $a_i$. That is, assign the value $a_i$ to all $a_j$ ($i < j \\le n$). The cost of such an operation is $(n - i) \\cdot a_i$.\n\nNote that the elements affected by an operation may already be equal to $a_i$, but that doesn't change the cost.\n\nYou are allowed to perform any number of operations (including zero). What is the minimum total cost to make all elements of the array equal?\n\n### Input\n\nThe first line contains one integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n \\le 5 \\cdot 10^5$).\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le n$).\n\nThe sum of $n$ over all test cases does not exceed $5 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print a single integer — the minimum total cost of operations to make all elements of the array equal.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n4\n\n2 4 1 3\n\n3\n\n1 1 1\n\n10\n\n7 5 5 5 10 9 9 4 6 10\n\n```\n\n#### Output #1\n\n```\n3\n0\n35\n```\n\n### Note\n\nIn the first test case, you can perform the operation twice:\n\n- choose $i = 3$ and make all elements to the left of it equal to it, the cost will be $2 \\cdot 1 = 2$;\n- choose $i = 3$ and make all elements to the right of it equal to it, the cost will be $1 \\cdot 1 = 1$.\n\nThe total cost is $2 + 1 = 3$.\n\nIn the second test case, all elements are already equal, so no operations need to be performed.", "cfid": "2111C"}
{"problem_id": "2111D", "problem_title": "D. Creating a Schedule", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2111/D", "problem_statement": "A new semester is about to begin, and it is necessary to create a schedule for the first day. There are a total of $n$ groups and $m$ classrooms in the faculty. It is also known that each group has exactly $6$ classes on the first day, and the $k$-th class of each group takes place at the same time. Each class must be held in a classroom, and at the same time, there cannot be classes for more than one group in the same classroom.\n\nEach classroom has its own index (at least three digits), and all digits of this index, except for the last two, indicate the floor on which the classroom is located. For example, classroom $479$ is located on the $4$-th floor, while classroom $31415$ is on the $314$-th floor. Between floors, one can move by stairs; for any floor $x > 1$, one can either go down to floor $x - 1$ or go up to floor $x + 1$; from the first floor, one can only go up to the second; from the floor $10^7$ (which is the last one), it is possible to go only to the floor $9999999$.\n\nThe faculty's dean's office has decided to create the schedule in such a way that students move as much as possible between floors, meaning that the total number of movements between floors across all groups should be maximized. When the students move from one floor to another floor, they take the shortest path.\n\nFor example, if there are $n = 2$ groups and $m = 4$ classrooms $[479, 290, 478, 293]$, the schedule can be arranged as follows:\n\nClass No.Group 1Group 2$1\n\n$$290$$\n\n293\n\n$$2$$\n\n478\n\n$$479$$\n\n3\n\n$$293$$\n\n290\n\n$$4$$\n\n479\n\n$$478$$\n\n5\n\n$$293$$\n\n290\n\n$$6$$\n\n479$$478$\n\nIn such a schedule, the groups will move between the $2$nd and $4$th floors each time, resulting in a total of $20$ movements between floors.\n\nHelp the dean's office create any suitable schedule!\n\n### Input\n\nEach test consists of several test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10^{3}$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\le n \\le m \\le 10^{5}$) — the number of groups and the number of available classrooms.\n\nThe second line of each test case contains $m$ integers $a_{i}$ ($100 \\le a_{i} < 10^{9}$) — the indices of the available classrooms.\n\nAdditional constraints on the input:\n\n- the numbers of all classrooms are pairwise distinct;\n- the sum of $m$ across all test cases does not exceed $10^{5}$.\n\n### Output\n\nFor each test case, output $n$ lines, where the $i$-th line should contain $6$ integers — the indices of the classrooms where the classes for the $i$-th group will be held.\n\nEach classroom must be occupied by at most one group during the $k$-th class.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2 4\n\n479 290 478 293\n\n1 1\n\n31415\n\n6 10\n\n479 385 290 293 384 383 297 478 291 382\n\n```\n\n#### Output #1\n\n```\n290 478 293 479 293 479\n293 479 290 478 290 478\n31415 31415 31415 31415 31415 31415\n479 290 479 290 479 290\n290 479 290 479 290 479\n293 478 293 478 293 478\n297 385 297 385 297 385\n478 293 478 293 478 293\n291 384 291 384 291 384\n```\n\n### Note\n\nIn the third test case, the maximum number of moves between classrooms is $50$.", "cfid": "2111D"}
{"problem_id": "2115A", "problem_title": "A. Gellyfish and Flaming Peony", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2115/A", "problem_statement": "Gellyfish hates math problems, but she has to finish her math homework:\n\nGellyfish is given an array of $n$ positive integers $a_1, a_2, \\ldots, a_n$.\n\nShe needs to do the following two-step operation until all elements of $a$ are equal:\n\n1. Select two indexes $i$, $j$ satisfying $1 \\leq i, j \\leq n$ and $i \\neq j$.\n2. Replace $a_i$ with $\\gcd(a_i, a_j)$.\n\nNow, Gellyfish asks you for the minimum number of operations to achieve her goal.\n\nIt can be proven that Gellyfish can always achieve her goal.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 5000$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\leq n \\leq 5000$) — the length of the array.\n\nThe second line of each test case contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($1 \\leq a_i \\leq 5000$) — the elements of the array.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5000$.\n\n### Output\n\nFor each test case, output a single integer — the minimum number of operations to achieve her goal.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3\n\n12 20 30\n\n6\n\n1 9 1 9 8 1\n\n3\n\n6 14 15\n\n```\n\n#### Output #1\n\n```\n4\n3\n3\n```\n\n### Note\n\nIn the first test case, the following is a way that minimizes the number of operations:\n\n1. Choose $i = 3$ and $j=2$ and replace $a_3$ with $\\gcd(a_3,a_2) = \\gcd(30, 20) = 10$, then $a$ becomes $[12, 20, 10]$.\n2. Choose $i=1$ and $j=3$ and replace $a_1$ with $\\gcd(a_1,a_3) = \\gcd(12, 10) = 2$, then $a$ becomes $[2, 20, 10]$.\n3. Choose $i=2$ and $j=1$ and replace $a_2$ with $\\gcd(a_2,a_1) = \\gcd(20, 2) = 2$, then $a$ becomes $[2, 2, 10]$.\n4. Choose $i=3$ and $j=1$ and replace $a_3$ with $\\gcd(a_3,a_1) = \\gcd(10, 2) = 2$, then $a$ becomes $[2, 2, 2]$.", "cfid": "2115A"}
{"problem_id": "2116A", "problem_title": "A. Gellyfish and Tricolor Pansy", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2116/A", "problem_statement": "Gellyfish and Flower are playing a game called \"Duel\".\n\nGellyfish has $a$ HP, while Flower has $b$ HP.\n\nEach of them has a knight. Gellyfish's knight has $c$ HP, while Flower's knight has $d$ HP.\n\nThey will play a game in rounds until one of the players wins. For $k = 1, 2, \\ldots$ in this order, they will perform the following actions:\n\n- If $k$ is odd and Gellyfish's knight is alive:\n  - Gellyfish's knight can attack Flower and reduce $b$ by $1$. If $b \\leq 0$, Gellyfish wins. Or,\n  - Gellyfish's knight can attack Flower's knight and reduce $d$ by $1$. If $d \\leq 0$, Flower's knight dies.\n- If $k$ is even and Flower's knight is alive:\n  - Flower's knight can attack Gellyfish and reduce $a$ by $1$. If $a \\leq 0$, Flower wins. Or,\n  - Flower's knight can attack Gellyfish's knight and reduce $c$ by $1$. If $c \\leq 0$, Gellyfish's knight dies.\n\nAs one of the smartest people in the world, you want to tell them who will win before the game. Assume both players play optimally.\n\nIt can be proven that the game will never end in a draw. That is, one player has a strategy to end the game in a finite number of moves.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first and only line of each test case contains four integers $a$, $b$, $c$, $d$ ($1 \\leq a, b, c, d \\leq 10^9$) — the HP of Gellyfish, the HP of Flower, the HP of Gellyfish's knight, and the HP of Flower's knight, respectively.\n\n### Output\n\nFor each test case, if Flower will win, output \"Flower\", otherwise output \"Gellyfish\".\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n1 2 3 4\n\n100 999 1 1\n\n10 20 10 30\n\n12 14 13 11\n\n998 244 353 107\n\n```\n\n#### Output #1\n\n```\nFlower\nGellyfish\nFlower\nGellyfish\nGellyfish\n```\n\n### Note\n\nIn the first test case, Gellyfish has only $1$ HP. Therefore, no matter what Gellyfish does in the first round, Flower's knight will attack Gellyfish in the second round, allowing Flower to win.\n\nIn the second test case, Flower's knight has only $1$ HP. Gellyfish will attack Flower's knight in the first round. Then Flower's knight will no longer be able to attack, allowing Gellyfish to win.", "cfid": "2116A"}
{"problem_id": "2116B", "problem_title": "B. Gellyfish and Baby's Breath", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2116/B", "problem_statement": "Flower gives Gellyfish two permutations$^{\\text{∗}}$ of $[0, 1, \\ldots, n-1]$: $p_0, p_1, \\ldots, p_{n-1}$ and $q_0, q_1, \\ldots, q_{n-1}$.\n\nNow Gellyfish wants to calculate an array $r_0,r_1,\\ldots,r_{n-1}$ through the following method:\n\n- For all $i$ ($0 \\leq i \\leq n-1$), $r_i = \\max\\limits_{j=0}^{i} \\left(2^{p_j} + 2^{q_{i-j}} \\right)$\n\nBut since Gellyfish is very lazy, you have to help her figure out the elements of $r$.\n\nSince the elements of $r$ are very large, you are only required to output the elements of $r$ modulo $998\\,244\\,353$.\n\n$^{\\text{∗}}$An array $b$ is a permutation of an array $a$ if $b$ consists of the elements of $a$ in arbitrary order. For example, $[4,2,3,4]$ is a permutation of $[3,2,4,4]$ while $[1,2,2]$ is not a permutation of $[1,2,3]$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\leq n \\leq 10^5$).\n\nThe second line of each test case contains $n$ integers $p_0, p_1, \\ldots,p_{n-1}$ ($0 \\leq p_i < n$).\n\nThe third line of each test case contains $n$ integers $q_0, q_1, \\ldots,q_{n-1}$ ($0 \\leq q_i < n$).\n\nIt is guaranteed that both $p$ and $q$ are permutations of $[0, 1, \\ldots, n-1]$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, output $n$ integers $r_0, r_1, \\ldots, r_{n-1}$ in a single line, modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3\n\n0 2 1\n\n1 2 0\n\n5\n\n0 1 2 3 4\n\n4 3 2 1 0\n\n10\n\n5 8 9 3 4 0 2 7 1 6\n\n9 5 1 4 0 3 2 8 7 6\n\n```\n\n#### Output #1\n\n```\n3 6 8\n17 18 20 24 32\n544 768 1024 544 528 528 516 640 516 768\n```\n\n### Note\n\nIn the first test case:\n\n- $r_0 = 2^{p_0} + 2^{q_0} = 1+2=3$\n- $r_1 = \\max(2^{p_0} + 2^{q_1}, 2^{p_1} + 2^{q_0}) = \\max(1+4, 4+2) = 6$\n- $r_2 = \\max(2^{p_0} + 2^{q_2}, 2^{p_1}+2^{q_1}, 2^{p_2}+2^{q_0}) = (1+1, 4+4, 2+2) = 8$", "cfid": "2116B"}
{"problem_id": "2114A", "problem_title": "A. Square Year", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2114/A", "problem_statement": "One can notice the following remarkable mathematical fact: the number $2025$ can be represented as $(20+25)^2$.\n\nYou are given a year represented by a string $s$, consisting of exactly $4$ characters. Thus, leading zeros are allowed in the year representation. For example, \"0001\", \"0185\", \"1375\" are valid year representations. You need to express it in the form $(a + b)^2$, where $a$ and $b$ are non-negative integers, or determine that it is impossible.\n\nFor example, if $s$ = \"0001\", you can choose $a = 0$, $b = 1$, and write the year as $(0 + 1)^2 = 1$.\n\n### Input\n\nThe first line of the input contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe following lines describe the test cases.\n\nThe only line of each test case contains a string $s$, consisting of exactly $4$ characters. Each character is a digit from $0$ to $9$.\n\n### Output\n\nOn a separate line for each test case, output:\n\n- Two numbers $a$ and $b$ ($a, b \\ge 0$) such that $(a + b)^2 = s$, if they exist. If there are multiple suitable pairs, you may output any of them.\n- The number $-1$ otherwise.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n0001\n\n1001\n\n1000\n\n4900\n\n2025\n\n```\n\n#### Output #1\n\n```\n0 1\n-1\n-1\n34 36\n20 25\n```", "cfid": "2114A"}
{"problem_id": "2114D", "problem_title": "D. Come a Little Closer", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2114/D", "problem_statement": "The game field is a matrix of size $10^9 \\times 10^9$, with a cell at the intersection of the $a$-th row and the $b$-th column denoted as ($a, b$).\n\nThere are $n$ monsters on the game field, with the $i$-th monster located in the cell ($x_i, y_i$), while the other cells are empty. No more than one monster can occupy a single cell.\n\nYou can move one monster to any cell on the field that is not occupied by another monster at most once .\n\nAfter that, you must select one rectangle on the field; all monsters within the selected rectangle will be destroyed. You must pay $1$ coin for each cell in the selected rectangle.\n\nYour task is to find the minimum number of coins required to destroy all the monsters.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) — the number of monsters on the field.\n\nThe following $n$ lines contain two integers $x_i$ and $y_i$ ($1 \\le x_i, y_i \\le 10^9$) — the coordinates of the cell with the $i$-th monster. All pairs ($x_i, y_i$) are distinct.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the minimum cost to destroy all $n$ monsters.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n3\n\n1 1\n\n1 2\n\n2 1\n\n5\n\n1 1\n\n2 6\n\n6 4\n\n3 3\n\n8 2\n\n4\n\n1 1\n\n1 1000000000\n\n1000000000 1\n\n1000000000 1000000000\n\n1\n\n1 1\n\n5\n\n1 2\n\n4 2\n\n4 3\n\n3 1\n\n3 2\n\n3\n\n1 1\n\n2 5\n\n2 2\n\n4\n\n4 3\n\n3 1\n\n4 4\n\n1 2\n\n```\n\n#### Output #1\n\n```\n3\n32\n1000000000000000000\n1\n6\n4\n8\n```\n\n### Note\n\nBelow are examples of optimal moves, with the cells of the rectangle to be selected highlighted in green.\n\n![](https://espresso.codeforces.com/3643346ebf05ce082dc5c0fca832e3d393fb161e.png)Required move for the first example.![](https://espresso.codeforces.com/2988e85c1854410b7f39678ab9de43d27f5cf6bc.png)Required move for the fifth example.", "cfid": "2114D"}
{"problem_id": "2114C", "problem_title": "C. Need More Arrays", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2114/C", "problem_statement": "Given an array $a$ and $n$ integers. It is sorted in non-decreasing order, that is, $a_i \\le a_{i + 1}$ for all $1 \\le i < n$.\n\nYou can remove any number of elements from the array (including the option of not removing any at all) without changing the order of the remaining elements. After the removals, the following will occur:\n\n- $a_1$ is written to a new array;\n- if $a_1 + 1 < a_2$, then $a_2$ is written to a new array; otherwise, $a_2$ is written to the same array as $a_1$;\n- if $a_2 + 1 < a_3$, then $a_3$ is written to a new array; otherwise, $a_3$ is written to the same array as $a_2$;\n- $\\cdots$\n\nFor example, if $a=[1, 2, 4, 6]$, then:\n\n- $a_1 = 1$ is written to the new array, resulting in arrays: $[1]$;\n- $a_1 + 1 = 2$, so $a_2 = 2$ is added to the existing array, resulting in arrays: $[1, 2]$;\n- $a_2 + 1 = 3$, so $a_3 = 4$ is written to a new array, resulting in arrays: $[1, 2]$ and $[4]$;\n- $a_3 + 1 = 5$, so $a_4 = 6$ is written to a new array, resulting in arrays: $[1, 2]$, $[4]$, and $[6]$.\n\nYour task is to remove elements in such a way that the described algorithm creates as many arrays as possible. If you remove all elements from the array, no new arrays will be created.\n\n### Input\n\nThe first line of input contains one integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) — the length of the array.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^6$, $a_i \\le a_{i + 1}$) — the elements of the array.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output one integer — the maximum number of arrays that can be obtained by removing any (possibly zero) number of elements.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n6\n\n1 2 3 4 5 6\n\n3\n\n1 2 3\n\n4\n\n1 2 2 4\n\n1\n\n2\n\n3\n\n1 4 8\n\n2\n\n1 1\n\n```\n\n#### Output #1\n\n```\n3\n2\n2\n1\n3\n1\n```\n\n### Note\n\nIn the first example, you can remove $a_3$ and $a_5$, then $a=[1, 2, 4, 6]$, the process of forming arrays for it is shown in the statement.\n\nIn the second example, you need to remove $a_2$, after which $a = [1, 3]$, and the arrays $[1]$ and $[3]$ will be written.\n\nIn the third example, no removals are needed; for $a = [1, 2, 2, 4]$, the arrays $[1, 2, 2]$ and $[4]$ will be written.", "cfid": "2114C"}
{"problem_id": "2114E", "problem_title": "E. Kirei Attacks the Estate", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2114/E", "problem_statement": "Once, Kirei stealthily infiltrated the trap-filled estate of the Ainzbern family but was discovered by Kiritugu's familiar. Assessing his strength, Kirei decided to retreat. The estate is represented as a tree with $n$ vertices, with the root at vertex $1$. Each vertex of the tree has a number $a_i$ recorded, which represents the danger of vertex $i$. Recall that a tree is a connected undirected graph without cycles.\n\nFor a successful retreat, Kirei must compute the threat value for each vertex. The threat of a vertex is equal to the maximumalternating sum along the vertical path starting from that vertex. The alternating sum along the vertical path starting from vertex $i$ is defined as $a_i - a_{p_i} + a_{p_{p_i}} - \\ldots$, where $p_i$ is the parent of vertex $i$ on the path to the root (to vertex $1$).\n\nFor example, in the tree below, vertex $4$ has the following vertical paths:\n\n- $[4]$ with an alternating sum of $a_4 = 6$;\n- $[4, 3]$ with an alternating sum of $a_4 - a_3 = 6 - 2 = 4$;\n- $[4, 3, 2]$ with an alternating sum of $a_4 - a_3 + a_2 = 6 - 2 + 5 = 9$;\n- $[4, 3, 2, 1]$ with an alternating sum of $a_4 - a_3 + a_2 - a_1 = 6 - 2 + 5 - 4 = 5$.\n\n![](https://espresso.codeforces.com/1d786fdded1f234d101767c2c7b55e98960c8af0.png)The dangers of the vertices are indicated in red.\n\nHelp Kirei compute the threat values for all vertices and escape the estate.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe following describes the test cases.\n\nThe first line contains an integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$) — the number of vertices in the tree.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$) — the dangers of the vertices.\n\nThe next $n - 1$ lines contain the numbers $v, u$ ($1 \\le v, u \\le n$, $v \\neq u$) — the description of the edges of the tree.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2 \\cdot 10^5$. It is also guaranteed that the given set of edges forms a tree.\n\n### Output\n\nFor each test case, output $n$ integers — the threat of each vertex.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n5\n\n4 5 2 6 7\n\n1 2\n\n3 2\n\n4 3\n\n5 1\n\n6\n\n1000000000 500500500 900900900 9 404 800800800\n\n3 4\n\n5 1\n\n2 5\n\n1 6\n\n6 4\n\n```\n\n#### Output #1\n\n```\n4 5 2 9 7\n1000000000 1500500096 1701701691 199199209 404 800800800\n```\n\n### Note\n\nThe tree from the first test case is depicted in the statement, and the maximum variable-sign sums are achieved as follows:\n\n1. $a_1 = 4$;\n2. $a_2 = 5$;\n3. $a_3 = 2$;\n4. $a_4 - a_3 + a_2 = 6 - 2 + 5 = 9$;\n5. $a_5 = 7$.", "cfid": "2114E"}
{"problem_id": "2114B", "problem_title": "B. Not Quite a Palindromic String", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2114/B", "problem_statement": "Vlad found a binary string$^{\\text{∗}}$ $s$ of even length $n$. He considers a pair of indices ($i, n - i + 1$), where $1 \\le i < n - i + 1$, to be good if $s_i = s_{n - i + 1}$ holds true.\n\nFor example, in the string '010001' there is only $1$ good pair, since $s_1 \\ne s_6$, $s_2 \\ne s_5$, and $s_3=s_4$. In the string '0101' there are no good pairs.\n\nVlad loves palindromes, but not too much, so he wants to rearrange some characters of the string so that there are exactly $k$ good pairs of indices.\n\nDetermine whether it is possible to rearrange the characters in the given string so that there are exactly $k$ good pairs of indices ($i, n - i + 1$).\n\n$^{\\text{∗}}$A string $s$ is called binary if it consists only of the characters '0' and '1'\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $k$ ($2 \\le n \\le 2 \\cdot 10^5$, $0 \\le k \\le \\frac{n}{2}$, $n$ is even) — the length of the string and the required number of good pairs.\n\nThe second line of each test case contains a binary string $s$ of length $n$.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output \"YES\" if there is a way to rearrange the characters of the string so that there are exactly $k$ good pairs, otherwise output \"NO\".\n\nYou may output each letter in any case (lowercase or uppercase). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be accepted as a positive answer.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n6 2\n\n000000\n\n2 1\n\n01\n\n4 1\n\n1011\n\n10 2\n\n1101011001\n\n10 1\n\n1101011001\n\n2 1\n\n11\n\n```\n\n#### Output #1\n\n```\nNO\nNO\nYES\nNO\nYES\nYES\n```", "cfid": "2114B"}
{"problem_id": "2110D", "problem_title": "D. Fewer Batteries", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2110/D", "problem_statement": "In 2077, when robots took over the world, they decided to compete in the following game.\n\nThere are $n$ checkpoints, and the $i$-th checkpoint contains $b_i$ batteries. Initially, the Robot starts at the $1$-st checkpoint with no batteries and must reach the $n$-th checkpoint.\n\nThere are a total of $m$ one-way passages between the checkpoints. The $i$-th passage allows movement from point $s_i$ to point $t_i$ ($s_i < t_i$), but not the other way. Additionally, the $i$-th passage can only be used if the robot has at least $w_i$ charged batteries; otherwise, it will run out of power on the way.\n\nWhen the robot arrives at point $v$, it can additionally take any number of batteries from $0$ to $b_v$, inclusive. Moreover, it always carries all previously collected batteries, and at each checkpoint, it recharges all previously collected batteries.\n\nFind the minimum number of batteries that the robot can have at the end of the journey, or report that it is impossible to reach from the first checkpoint to the last.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n, m$ ($2 \\leq n \\leq 2 \\cdot 10^5, 0 \\leq m \\leq 3 \\cdot 10^5$) — the number of checkpoints and the number of passages, respectively.\n\nThe second line contains $n$ numbers $b_i$ ($0 \\leq b_i \\leq 10^9$) — the number of batteries at the $i$-th checkpoint.\n\nThe next $m$ lines contain three integers $s_i, t_i, w_i$ ($1 \\leq s_i < t_i \\leq n, 1 \\leq w_i \\leq 10^9$) — the endpoints of the passage and the minimum number of batteries required to pass through it.\n\nIt is guaranteed that the sum of $n$ does not exceed $2 \\cdot 10^5$.\n\nIt is guaranteed that the sum of $m$ does not exceed $3 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the minimum number of batteries that you can have at the end of the journey, or $-1$ if it is impossible to reach point $n$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3 3\n\n2 0 0\n\n1 2 1\n\n2 3 1\n\n1 3 2\n\n5 6\n\n2 2 5 0 1\n\n1 2 2\n\n1 3 1\n\n1 4 3\n\n3 5 5\n\n2 4 4\n\n4 5 3\n\n2 0\n\n1 1\n\n4 4\n\n3 10 0 0\n\n1 2 1\n\n1 3 3\n\n2 3 10\n\n3 4 5\n\n```\n\n#### Output #1\n\n```\n1\n4\n-1\n10\n```\n\n### Note\n\nIn the first test case, you need to take $1$ battery at the starting point, then move to point $2$, and then to point $3$.\n\nIn the second test case, you need to take $2$ batteries at the starting point, then move to point $2$, take another $2$ batteries, move to point $4$, and then to point $5$.\n\nIn the third test case, there is no path from point $1$ to point $n$.\n\nIn the fourth test case, you need to take $1$ battery at the starting point, then move to point $2$, take another $9$ batteries, move to point $3$, and then to point $4$.", "cfid": "2110D"}
{"problem_id": "2110C", "problem_title": "C. Racing", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2110/C", "problem_statement": "In 2077, a sport called hobby-droning is gaining popularity among robots.\n\nYou already have a drone, and you want to win. For this, your drone needs to fly through a course with $n$ obstacles.\n\nThe $i$-th obstacle is defined by two numbers $l_i, r_i$. Let the height of your drone at the $i$-th obstacle be $h_i$. Then the drone passes through this obstacle if $l_i \\le h_i \\le r_i$. Initially, the drone is on the ground, meaning $h_0 = 0$.\n\nThe flight program for the drone is represented by an array $d_1, d_2, \\ldots, d_n$, where $h_{i} - h_{i-1} = d_i$, and $0 \\leq d_i \\leq 1$. This means that your drone either does not change height between obstacles or rises by $1$. You already have a flight program, but some $d_i$ in it are unknown and marked as $-1$. Replace the unknown $d_i$ with numbers $0$ and $1$ to create a flight program that passes through the entire obstacle course, or report that it is impossible.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nIn the first line of each test case, an integer $n$ ($1 \\le n \\le 2 \\cdot 10^5)$ is given — the size of the array $d$.\n\nIn the second line of each test case, there are $n$ integers $d_1, d_2, \\ldots, d_n$ ($-1 \\leq d_i \\leq 1$) — the elements of the array $d$. $d_i = -1$ means that this $d_i$ is unknown to you.\n\nNext, there are $n$ lines containing $2$ integers $l_i,r_i$ ($0\\leq l_i\\leq r_i\\leq n$) — descriptions of the obstacles.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, output $n$ integers $d_1,d_2,\\ldots,d_n$, if it is possible to correctly restore the array $d$, or $-1$ if it is not possible.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n4\n\n0 -1 -1 1\n\n0 4\n\n1 2\n\n2 4\n\n1 4\n\n3\n\n0 -1 -1\n\n0 1\n\n2 2\n\n0 3\n\n2\n\n-1 -1\n\n0 0\n\n2 2\n\n8\n\n-1 -1 1 -1 -1 0 0 -1\n\n0 0\n\n0 1\n\n0 2\n\n0 2\n\n1 3\n\n0 4\n\n2 5\n\n4 5\n\n1\n\n0\n\n1 1\n\n```\n\n#### Output #1\n\n```\n0 1 1 1\n-1\n-1\n0 1 1 0 1 0 0 1\n-1\n```\n\n### Note\n\nIn the first test case, one possible answer is $d=[0,1,1,1]$. The array $h$ will be $[0,0+1,0+1+1,0+1+1+1]=[0,1,2,3]$. This array meets the conditions of the problem.\n\nIn the second test case, it can be proven that there is no suitable array $d$, so the answer is $-1$.", "cfid": "2110C"}
{"problem_id": "2110A", "problem_title": "A. Fashionable Array", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2110/A", "problem_statement": "In 2077, everything became fashionable among robots, even arrays...\n\nWe will call an array of integers $a$ fashionable if $\\min(a) + \\max(a)$ is divisible by $2$ without a remainder, where $\\min(a)$ — the value of the minimum element of the array $a$, and $\\max(a)$ — the value of the maximum element of the array $a$.\n\nYou are given an array of integers $a_1, a_2, \\ldots, a_n$. In one operation, you can remove any element from this array. Your task is to determine the minimum number of operations required to make the array $a$ fashionable.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^3$). The description of the test cases follows.\n\nThe first line of each test case contains one integer $n$ ($1 \\leq n \\leq 50$) — the size of the array $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 50$) — the elements of the array $a$.\n\n### Output\n\nFor each test case, output one integer — the minimum number of operations required to make the array $a$ fashionable.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n2\n\n5 2\n\n7\n\n3 1 4 1 5 9 2\n\n7\n\n2 7 4 6 9 11 5\n\n3\n\n1 2 1\n\n2\n\n2 1\n\n8\n\n8 6 3 6 4 1 1 6\n\n```\n\n#### Output #1\n\n```\n1\n0\n2\n1\n1\n3\n```\n\n### Note\n\nIn the first test case, at least one element needs to be removed since $\\min(a)+\\max(a)=2+5=7$, and $7$ is not divisible by $2$. If any of the elements are removed, only one element will remain. Then $\\max(a) + \\min(a)$ will be divisible by $2$.\n\nIn the second test case, nothing needs to be removed since $\\min(a)+\\max(a)=1+9=10$, and $10$ is divisible by $2$.\n\nIn the third test case, you can remove the elements with values $2$ and $4$, then $\\min(a)+\\max(a)=5+11=16$, and $16$ is divisible by $2$.", "cfid": "2110A"}
{"problem_id": "2110B", "problem_title": "B. Down with Brackets", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2110/B", "problem_statement": "In 2077, robots decided to get rid of balanced bracket sequences once and for all!\n\nA bracket sequence is called balanced if it can be constructed by the following formal grammar.\n\n1. The empty sequence $\\varnothing$ is balanced.\n2. If the bracket sequence $A$ is balanced, then $\\mathtt{(}A\\mathtt{)}$ is also balanced.\n3. If the bracket sequences $A$ and $B$ are balanced, then the concatenated sequence $A B$ is also balanced.\n\nYou are the head of the department for combating balanced bracket sequences, and your main task is to determine which brackets you can destroy and which you cannot.\n\nYou are given a balanced bracket sequence represented by a string $s$, consisting of the characters ( and ). Since the robots' capabilities are not limitless, they can remove exactly one opening bracket and exactly one closing bracket from the string.\n\nYour task is to determine whether the robots can delete such two brackets so that the string $s$ is no longer a balanced bracket sequence.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nEach test case consists of a single string $s$ ($2 \\leq |s| \\leq 2 \\cdot 10^5$) — a sequence of the characters ( and ).\n\nIt is guaranteed that $s$ is a balanced bracket sequence.\n\nIt is also guaranteed that the sum of $|s|$ across all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, output \"YES\" if the robots can make the string stop being a balanced bracket sequence, and \"NO\" otherwise.\n\nYou may output each letter in any case (lowercase or uppercase). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be accepted as a positive answer.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n(())\n\n(())()()\n\n()\n\n(())(())\n\n```\n\n#### Output #1\n\n```\nNO\nYES\nNO\nYES\n```\n\n### Note\n\nIn the first test case, it can be shown that the robots will not be able to break the correct bracket sequence.\n\nIn the second test case, one of the options for removing brackets is as follows:\n\n$\\texttt{(())}\\color{red}{\\texttt{(}}\\texttt{)(}\\color{red}{\\texttt{)}} \\rightarrow \\texttt{(()))(}$, which is not a correct bracket sequence.\n\nIn the fourth test case, one of the options for removal is as follows:\n\n$\\texttt{(}\\color{red}{\\texttt{(}}\\texttt{))((}\\color{red}{\\texttt{)}}\\texttt{)}\\rightarrow \\texttt{())(()}$, which is not a correct bracket sequence.", "cfid": "2110B"}
{"problem_id": "2109C1", "problem_title": "C1. Hacking Numbers (Easy Version)", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2109/C1", "problem_statement": "This is the easy version of the problem. In this version, you can send at most $\\mathbf{7}$ commands. You can make hacks only if all versions of the problem are solved.\n\nThis is an interactive problem.\n\nWelcome, Duelists! In this interactive challenge, there is an unknown integer $x$ ($1 \\le x \\le 10^9$). You must make it equal to a given integer in the input $n$. By harnessing the power of \"Mathmech\" monsters, you can send a command to do one of the following:\n\nCommandConstraintResultCaseUpdateJury's response\"add $y$\"$-10^{18} \\le y \\le 10^{18}\n\n$$\\mathrm{res} = x + y$$\n\ntext{if } 1 \\le \\mathrm{res} \\le 10^{18}\n\n$$x \\leftarrow \\mathrm{res}$\"1\"$\\mathrm{else}$$\n\nx \\leftarrow x$\"0\"\"mul $y$\"$1 \\le y \\le 10^{18}\n\n$$\\mathrm{res} = x \\cdot y$$\n\ntext{if } 1 \\le \\mathrm{res} \\le 10^{18}\n\n$$x \\leftarrow \\mathrm{res}$\"1\"$\\mathrm{else}$$\n\nx \\leftarrow x$\"0\"\"div $y$\"$1 \\le y \\le 10^{18}\n\n$$\\mathrm{res} = x/y$$\n\ntext{if } y$ divides $x\n\n$$x \\leftarrow \\mathrm{res}$\"1\"$\\mathrm{else}$$\n\nx \\leftarrow x$\"0\"\"digit\"—$\\\\mathrm{res} = S(x)$$^{\\\\text{∗}}$—$x \\leftarrow \\mathrm{res}$\"1\"\n\nYou have to make $x$ equal to $n$ using at most $\\mathbf{7}$ commands.\n\n$^{\\\\text{∗}}$$S(n)$ is a function that returns the sum of all the individual digits of a non-negative integer $n$. For example, $S(123) = 1 + 2 + 3 = 6$\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 5000$). The description of the test cases follows.\n\nThe first and only line of each test case contains one integer $n$ ($1 \\le n \\le 10^9$).\n\n### Interaction\n\nThe interaction for each test case begins by reading the integer $n$.\n\nTo send a command, output a line in the following format:\n\n- \"add $y$\" Add some integer $y$ ($-10^{18} \\le y \\le 10^{18}$) to $x$.\nThe jury will output \"1\" if $x + y$ is within $[1, 10^{18}]$ (successful), and \"0\" otherwise. If successful, update $x \\leftarrow x + y$.\n\n- \"mul $y$\" Multiply $x$ by a positive integer $y$ ($1 \\le y \\le 10^{18}$).\nThe jury will output \"1\" if $x \\cdot y$ is within $[1, 10^{18}]$ (successful), and \"0\" otherwise. If successful, update $x \\leftarrow x \\cdot y$.\n\n- \"div $y$\" Divide $x$ by a positive integer $y$ ($1 \\le y \\le 10^{18}$).\nThe jury will output \"1\" if $y$ is a divisor of $x$ (successful), and \"0\" otherwise. If successful, update $x \\leftarrow \\frac{x}{y}$.\n\n- \"digit\" Make $x$ equal to the sum of its digits.\nThe jury will always output \"1\" and update $x \\leftarrow S(x)$.\n\n\nNote that commands are case sensitive.\n\nWhen you have determined that $x$ is equal to $n$, output a line in the following format:\n\n- \"!\" — where the jury will output a \"1\" if $n$ is equal to $x$, and \"-1\" otherwise.\n\nNote that answering does not count toward your limit of $\\mathbf{7}$ commands.\n\nIf your program makes more than $\\mathbf{7}$ commands for one test case, or makes an invalid command, then the response to the command will be \"-1\". After receiving such a response, your program should immediately terminate to receive the verdict Wrong Answer. Otherwise, it may receive any other verdict.\n\nAfter printing a command, do not forget to output the end of the line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- sys.stdout.flush() in Python;\n- std::io::stdout().flush() in Rust;\n- see the documentation for other languages.\n\nThe interactor is non-adaptive. The unknown integer $x$ does not change during the interaction.\n\nHacks\n\nTo hack, use the following format.\n\nThe first line should contain a single integer $t$ ($1 \\leq t \\leq 5000$) — the number of test cases.\n\nThe first line of each test case should contain two positive integers $n$ and $x$ ($1 \\leq n,x \\leq 10^9$) — denoting the unknown integer and the target value to which it should be made equal, respectively.\n\n### Example\n\n#### Input #1\n\n```\n2\n100\n\n0\n\n1\n\n1\n\n1\n\n5\n\n1\n\n1\n\n1```\n\n#### Output #1\n\n```\n\nadd -10\n\nadd 1\n\nmul 10\n\n!\n\ndigit\n\ndiv 2\n\n!```\n\n### Note\n\nSolutionJuryExplanation$\\texttt{2}$There are 2 test cases.$\\texttt{100}$In the first test case, the unknown integer $x = 9$ and we have to make it equal to $n = 100$.$\\texttt{add -10}\n\n$$\\texttt{0}$The answer to \"add -10\" is \"0\". This means that the addition command was not successful as $x + y = 9 + (-10) \\le 0$, and $x$ remains $9$ after the command$\\texttt{add 1}$$\n\ntexttt{1}$The answer to \"add 1\" is \"1\". This means that the addition command was successful as $x + y = 9 + 1 = 10$, and $x$ changes to $10$ after the command.$\\texttt{mul 10}\n\n$$\\texttt{1}$The answer to \"mul 10\" is \"1\". This means that the multiplication command was successful as $x \\cdot y = 10 \\cdot 10 = 100$, and $x$ changes to $100$ after the command.$\\texttt{!}$$\n\ntexttt{1}$The answer to \"!\" is \"1\". This means you have determined that $x$ equals $n$.$\\texttt{5}$In the second test case, the unknown integer $x = 1234$ and we have to make it equal to $n = 5$.$\\texttt{digit}\n\n$$\\texttt{1}$The answer to \"digit\" is \"1\". This means that $x$ turned into the sum of its digits $1 + 2 + 3 + 4 = 10$, and $x$ changes to $10$ after the command.$\\texttt{div 2}$$\n\ntexttt{1}$The answer to \"div 2\" is \"1\". This means that the division command was successful as $y = 2$ is a divisor of $x = 10$, and $x$ changes to $\\frac{x}{y} = \\frac{10}{2} = 5$ after the command.$\\texttt{!}$$\\texttt{1}$The answer to \"!\" is \"1\". This means you have determined that $x$ equals $n$.\n\nNote that the empty lines in the example input and output are for the sake of clarity, and do not occur in the real interaction.", "cfid": "2109C1"}
{"problem_id": "2109B", "problem_title": "B. Slice to Survive", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2109/B", "problem_statement": "Duelists Mouf and Fouad enter the arena, which is an $n \\times m$ grid!\n\nFouad's monster starts at cell $(a, b)$, where rows are numbered $1$ to $n$ and columns $1$ to $m$.\n\nMouf and Fouad will keep duelling until the grid consists of only one cell.\n\nIn each turn:\n\n- Mouf first cuts the grid along a row or column line into two parts, discarding the part without Fouad's monster. Note that the grid must have at least two cells; otherwise, the game has already ended.\n- After that, in the same turn, Fouad moves his monster to any cell (possibly the same one it was in) within the remaining grid.\n\n![](https://espresso.codeforces.com/8b1099cc13f7e0c8fbf449b3e7f2fcd1c9eec0b9.png)Visualization of the phases of the fourth test case.\n\nMouf wants to minimize the number of turns, while Fouad wants to maximize them. How many turns will this epic duel last if both play optimally?\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first and only line of each test case contains four integers $n$, $m$, $a$, and $b$ ($2 \\le n, m \\le 10^9$, $1 \\le a \\le n$, $1 \\le b \\le m$) — denoting the number of rows, the number of columns, the starting row of the monster, and the starting column of the monster, respectively.\n\n### Output\n\nFor each test case, output a single integer — the number of turns this epic duel will last if both play optimally.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n2 2 1 1\n\n3 3 2 2\n\n2 7 1 4\n\n2 7 2 2\n\n8 9 4 6\n\n9 9 5 5\n\n2 20 2 11\n\n22 99 20 70\n\n```\n\n#### Output #1\n\n```\n2\n4\n4\n3\n6\n8\n6\n10\n```\n\n### Note\n\nIn the first test case, one possible duel sequence is as follows:\n\n- Turn 1: Mouf cuts the grid horizontally along the line between the rows $1$ and $2$, removing the bottom half and leaving a $1 \\times 2$ grid.\n- Turn 1: Fouad's monster is at the cell $(1,1)$.\n- Turn 2: Mouf cuts the $1 \\times 2$ grid again, removes one column, and isolates the cell $(1,1)$.\n\nThe duel is completed in $2$ turns.\n\nIn the fourth case, one possible duel sequence is as follows:\n\n- Turn 1: Mouf cuts the grid vertically along the line between the columns $2$ and $3$, splitting it into a $2 \\times 2$ and a $2 \\times 5$ field, then removes the $2 \\times 5$ part.\n- Turn 1: Fouad moves the monster to the cell $(1,1)$.\n- From this point on, the duel plays out just like the first test case—two more turns trim down the grid from $2 \\times 2$ to a single $1 \\times 1$ cell.\n\nIn total, the duel is completed in $3$ turns.\n\nYou can refer to the pictures mentioned in the problem statement for illustrations of the fourth test case.", "cfid": "2109B"}
{"problem_id": "2109A", "problem_title": "A. It's Time To Duel", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2109/A", "problem_statement": "Something you may not know about Mouf is that he is a big fan of the Yu-Gi-Oh! card game. He loves to duel with anyone he meets. To gather all fans who love to play as well, he decided to organize a big Yu-Gi-Oh! tournament and invited $n$ players.\n\nMouf arranged the $n$ players in a line, numbered from $1$ to $n$. They then held $n - 1$ consecutive duels: for each $i$ from $1$ to $n - 1$, player $i$ faced player $i + 1$, producing one winner and one loser per match. Afterward, each player reports a value $a_i(0 \\le a_i \\le 1)$:\n\n- $0$ indicating they won no duels;\n- $1$ indicating they won at least one duel.\n\nSince some may lie about their results (e.g., reporting a $1$ instead of a $0$, or vice versa) to influence prize outcomes, Mouf will cancel the tournament if he can prove any report to be false.\n\nGiven the array $a$, determine whether at least one player must be lying.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 100$). The description of the test cases follows.\n\nThe first line of each test case contains one integer $n$ ($2 \\le n \\le 100$) — the number of players in the tournament.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le 1$) — denoting the report of the $i$-th player.\n\n### Output\n\nFor each test case, print \"YES\" (without quotes) if there is at least one liar among the players, and \"NO\" (without quotes) otherwise.\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n3\n\n0 1 0\n\n2\n\n0 0\n\n2\n\n1 1\n\n4\n\n0 1 1 1\n\n4\n\n1 0 0 1\n\n7\n\n0 1 0 1 0 1 0\n\n```\n\n#### Output #1\n\n```\nNO\nYES\nYES\nNO\nYES\nNO\n```\n\n### Note\n\nIn the first test case, it is consistent if player $2$ defeats both players $1$ and $3$, so nobody's report is necessarily false.\n\nIn the second test case, in the only match between players $1$ and $2$, one must win — but both claimed zero wins, so someone must be lying.\n\nIn the third test case, the tournament consists of exactly one duel between players $1$ and $2$ — but it's impossible for both to win, concluding that at least one report is false.\n\nIn the fourth test case, a possible scenario is that player $2$ won against player $1$, then $3$ won against $2$, and then $4$ won against $3$. All reports align, so there is no evidence that someone lied.", "cfid": "2109A"}
{"problem_id": "2109C2", "problem_title": "C2. Hacking Numbers (Medium Version)", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2109/C2", "problem_statement": "This is the medium version of the problem. In this version, you can send at most $\\mathbf{4}$ commands. You can make hacks only if all versions of the problem are solved.\n\nThis is an interactive problem.\n\nWelcome, Duelists! In this interactive challenge, there is an unknown integer $x$ ($1 \\le x \\le 10^9$). You must make it equal to a given integer in the input $n$. By harnessing the power of \"Mathmech\" monsters, you can send a command to do one of the following:\n\nCommandConstraintResultCaseUpdateJury's response\"add $y$\"$-10^{18} \\le y \\le 10^{18}\n\n$$\\mathrm{res} = x + y$$\n\ntext{if } 1 \\le \\mathrm{res} \\le 10^{18}\n\n$$x \\leftarrow \\mathrm{res}$\"1\"$\\mathrm{else}$$\n\nx \\leftarrow x$\"0\"\"mul $y$\"$1 \\le y \\le 10^{18}\n\n$$\\mathrm{res} = x \\cdot y$$\n\ntext{if } 1 \\le \\mathrm{res} \\le 10^{18}\n\n$$x \\leftarrow \\mathrm{res}$\"1\"$\\mathrm{else}$$\n\nx \\leftarrow x$\"0\"\"div $y$\"$1 \\le y \\le 10^{18}\n\n$$\\mathrm{res} = x/y$$\n\ntext{if } y$ divides $x\n\n$$x \\leftarrow \\mathrm{res}$\"1\"$\\mathrm{else}$$\n\nx \\leftarrow x$\"0\"\"digit\"—$\\\\mathrm{res} = S(x)$$^{\\\\text{∗}}$—$x \\leftarrow \\mathrm{res}$\"1\"\n\nYou have to make $x$ equal to $n$ using at most $\\mathbf{4}$ commands.\n\n$^{\\\\text{∗}}$$S(n)$ is a function that returns the sum of all the individual digits of a non-negative integer $n$. For example, $S(123) = 1 + 2 + 3 = 6$\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 5000$). The description of the test cases follows.\n\nThe first and only line of each test case contains one integer $n$ ($1 \\le n \\le 10^9$).\n\n### Interaction\n\nThe interaction for each test case begins by reading the integer $n$.\n\nTo send a command, output a line in the following format:\n\n- \"add $y$\" Add some integer $y$ ($-10^{18} \\le y \\le 10^{18}$) to $x$.\nThe jury will output \"1\" if $x + y$ is within $[1, 10^{18}]$ (successful), and \"0\" otherwise. If successful, update $x \\leftarrow x + y$.\n\n- \"mul $y$\" Multiply $x$ by a positive integer $y$ ($1 \\le y \\le 10^{18}$).\nThe jury will output \"1\" if $x \\cdot y$ is within $[1, 10^{18}]$ (successful), and \"0\" otherwise. If successful, update $x \\leftarrow x \\cdot y$.\n\n- \"div $y$\" Divide $x$ by a positive integer $y$ ($1 \\le y \\le 10^{18}$).\nThe jury will output \"1\" if $y$ is a divisor of $x$ (successful), and \"0\" otherwise. If successful, update $x \\leftarrow \\frac{x}{y}$.\n\n- \"digit\" Make $x$ equal to the sum of its digits.\nThe jury will always output \"1\" and update $x \\leftarrow S(x)$.\n\n\nNote that commands are case sensitive.\n\nWhen you have determined that $x$ is equal to $n$, output a line in the following format:\n\n- \"!\" — where the jury will output a \"1\" if $n$ is equal to $x$, and \"-1\" otherwise.\n\nNote that answering does not count toward your limit of $\\mathbf{4}$ commands.\n\nIf your program makes more than $\\mathbf{4}$ commands for one test case, or makes an invalid command, then the response to the command will be \"-1\". After receiving such a response, your program should immediately terminate to receive the verdict Wrong Answer. Otherwise, it may receive any other verdict.\n\nAfter printing a command, do not forget to output the end of the line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- sys.stdout.flush() in Python;\n- std::io::stdout().flush() in Rust;\n- see the documentation for other languages.\n\nThe interactor is non-adaptive. The unknown integer $x$ does not change during the interaction.\n\nHacks\n\nTo hack, use the following format.\n\nThe first line should contain a single integer $t$ ($1 \\leq t \\leq 5000$) — the number of test cases.\n\nThe first line of each test case should contain two positive integers $n$ and $x$ ($1 \\leq n,x \\leq 10^9$) — denoting the unknown integer and the target value to which it should be made equal, respectively.\n\n### Example\n\n#### Input #1\n\n```\n2\n100\n\n0\n\n1\n\n1\n\n1\n\n5\n\n1\n\n1\n\n1\n```\n\n#### Output #1\n\n```\n\nadd -10\n\nadd 1\n\nmul 10\n\n!\n\ndigit\n\ndiv 2\n\n!\n```\n\n### Note\n\nSolutionJuryExplanation$\\texttt{2}$There are 2 test cases.$\\texttt{100}$In the first test case, the unknown integer $x = 9$ and we have to make it equal to $n = 100$.$\\texttt{add -10}\n\n$$\\texttt{0}$The answer to \"add -10\" is \"0\". This means that the addition command was not successful as $x + y = 9 + (-10) \\le 0$, and $x$ remains $9$ after the command$\\texttt{add 1}$$\n\ntexttt{1}$The answer to \"add 1\" is \"1\". This means that the addition command was successful as $x + y = 9 + 1 = 10$, and $x$ changes to $10$ after the command.$\\texttt{mul 10}\n\n$$\\texttt{1}$The answer to \"mul 10\" is \"1\". This means that the multiplication command was successful as $x \\cdot y = 10 \\cdot 10 = 100$, and $x$ changes to $100$ after the command.$\\texttt{!}$$\n\ntexttt{1}$The answer to \"!\" is \"1\". This means you have determined that $x$ equals $n$.$\\texttt{5}$In the second test case, the unknown integer $x = 1234$ and we have to make it equal to $n = 5$.$\\texttt{digit}\n\n$$\\texttt{1}$The answer to \"digit\" is \"1\". This means that $x$ turned into the sum of its digits $1 + 2 + 3 + 4 = 10$, and $x$ changes to $10$ after the command.$\\texttt{div 2}$$\n\ntexttt{1}$The answer to \"div 2\" is \"1\". This means that the division command was successful as $y = 2$ is a divisor of $x = 10$, and $x$ changes to $\\frac{x}{y} = \\frac{10}{2} = 5$ after the command.$\\texttt{!}$$\\texttt{1}$The answer to \"!\" is \"1\". This means you have determined that $x$ equals $n$.\n\nNote that the empty lines in the example input and output are for the sake of clarity, and do not occur in the real interaction.", "cfid": "2109C2"}
{"problem_id": "2101A", "problem_title": "A. Mex in the Grid", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2101/A", "problem_statement": "You are given $n^2$ cards with values from $0$ to $n^2-1$. You are to arrange them in a $n$ by $n$ grid such that there is exactly one card in each cell.\n\nThe MEX (minimum excluded value) of a subgrid$^{\\text{∗}}$ is defined as the smallest non-negative integer that does not appear in the subgrid.\n\nYour task is to arrange the cards such that the sum of MEX values over all $\\left(\\frac{n(n+1)}{2}\\right)^2$ subgrids is maximized.\n\n$^{\\text{∗}}$A subgrid of a $n$ by $n$ grid is specified by four numbers $l_1, r_1, l_2, r_2$ satisfying $1\\le l_1\\le r_1\\le n$ and $1\\le l_2\\le r_2\\le n$. The element in the $i$-th row and the $j$-th column of the grid is part of the subgrid if and only if $l_1\\le i\\le r_1$ and $l_2\\le j\\le r_2$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 100$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1\\le n\\le 500$) — the side length of the grid.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $1000$.\n\n### Output\n\nFor each test case, output $n$ lines, each containing $n$ integers representing the elements of the grid.\n\nIf there are multiple answers, you can output any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n2\n\n3\n\n```\n\n#### Output #1\n\n```\n0 1\n2 3\n8 4 5\n6 0 1\n7 2 3```\n\n### Note\n\nIn the first test case, one valid arrangement is:\n\n0123\n\nThere are $9$ subgrids in total, and the $4$ of them with non-zero MEX are shown below:\n\n0values:$[0]$ — MEX: $1$\n\n01values:$[0, 1]$  — MEX: $2$\n\n02values:$[0, 2]$  — MEX: $1$\n\n0123values:$[0, 1, 2, 3]$  — MEX: $4$\n\nThe sum of MEX over all subgrids would be $1+2+1+4 = 8$. It can be proven that no other arrangements have a larger sum of MEX values.", "cfid": "2101A"}
{"problem_id": "2102A", "problem_title": "A. Dinner Time", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2102/A", "problem_statement": "Given four integers $n$, $m$, $p$, and $q$, determine whether there exists an integer array $a_1, a_2, \\ldots, a_n$ (elements may be negative) satisfying the following conditions:\n\n- The sum of all elements in the array is equal to $m$: \n\n$$a_1 + a_2 + \\ldots + a_n = m$$\n\nThe sum of every $p$ consecutive elements is equal to $q$: \n\n$$a_i + a_{i + 1} + \\ldots + a_{i + p - 1} = q,\\qquad\\text{ for all }1\\le i\\le n-p+1$$\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first and only line of each test case contains four integers $n$, $m$, $p$, and $q$ ($1 \\le p \\le n \\le 100$, $1 \\le q, m \\le 100$) — the length of the array, the sum of elements, the length of a segment, and the sum of a segment, respectively.\n\n### Output\n\nFor each test case, output \"YES\" (without quotes) if there exists an array satisfying the above conditions, and \"NO\" (without quotes) otherwise.\n\nYou can output \"YES\" and \"NO\" in any case (for example, strings \"yES\", \"yes\", and \"Yes\" will all be recognized as valid responses).\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3 2 2 1\n\n1 1 1 1\n\n5 4 2 3\n\n10 7 5 2\n\n4 4 1 3\n\n```\n\n#### Output #1\n\n```\nYES\nYES\nYES\nNO\nNO\n```\n\n### Note\n\nIn the first test case, an example of an array satisfying the condition is $[1, 0, 1]$. This is because:\n\n- $a_1+a_2+a_3 = 1+0+1 = 2 = m$\n- $a_1+a_2=1+0=1=q$\n- $a_2+a_3=0+1=1=q$\n\nIn the second test case, the only array satisfying the condition is $[1]$.\n\nIn the third test case, an example of an array satisfying the condition is $[-2, 5, -2, 5, -2]$.\n\nIn the fourth test case, it can be proven that there is no array satisfying the condition.", "cfid": "2102A"}
{"problem_id": "2102B", "problem_title": "B. The Picky Cat", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2102/B", "problem_statement": "You are given an array of integers $a_1, a_2, \\ldots, a_n$. You are allowed to do the following operation any number of times (possibly zero):\n\n- Choose an index $i$ ($1\\le i\\le n$). Multiply $a_i$ by $-1$ (i.e., update $a_i := -a_i$).\n\nYour task is to determine whether it is possible to make the element at index $1$ become the median of the array after doing the above operation any number of times. Note that operations can be applied to index $1$ as well, meaning the median can be either the original value of $a_1$ or its negation.\n\nThe median of an array $b_1, b_2, \\ldots, b_m$ is defined as the $\\left\\lceil \\frac{m}{2} \\right\\rceil$-th$^{\\text{∗}}$ smallest element of array $b$. For example, the median of the array $[3, 1, 2]$ is $2$, while the median of the array $[10, 1, 8, 3]$ is $3$.\n\nIt is guaranteed that the absolute value of the elements of $a$ are distinct. Formally, there are no pairs of indices $1\\le i < j\\le n$ where $|a_i| = |a_j|$.\n\n$^{\\\\text{∗}}$$\\\\lceil x \\\\rceil$ is the ceiling function which returns the least integer greater than or equal to $x$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1\\le n\\le 10^5$) — the length of the array $a$.\n\nThe second line of each test case contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($|a_i|\\le 10^6$, $|a_i|\\neq |a_j|$) — the elements of the array $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each testcase, output \"YES\" if it is possible to make the element at index $1$ become the median of the array, and \"NO\" otherwise.\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n3\n\n2 3 1\n\n5\n\n1 2 3 4 5\n\n4\n\n4 2 0 -5\n\n4\n\n-5 0 4 3\n\n4\n\n-10 8 3 2\n\n1\n\n1\n\n10\n\n9 1000 -999 -13 456 -223 23 24 10 0\n\n```\n\n#### Output #1\n\n```\nYES\nYES\nYES\nNO\nNO\nYES\nYES\n```\n\n### Note\n\nIn the first test case, $a_1 = 2$ is already the median of the array $a = [2, 3, 1]$, so no operation is required.\n\nIn the second test case, we can do two operations: one on index $2$, and one on index $5$. The array becomes $[1, -2, 3, 4, -5]$, which has a median of $1$.\n\nIn the third test case, if you do an operation on index $1$, the array will become $[-4, 2, 0, -5]$, which has a median of $-4$.\n\nIn the fourth test case, it can be proven that no sequence of operations can make the median of the array become $5$ or $-5$.", "cfid": "2102B"}
{"problem_id": "2101B", "problem_title": "B. Quartet Swapping", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2101/B", "problem_statement": "You are given a permutation $a$ of length $n$$^{\\\\text{∗}}$. You are allowed to do the following operation any number of times (possibly zero):\n\n- Choose an index $1\\le i\\le n - 3$. Then, swap $a_i$ with $a_{i + 2}$, and $a_{i + 1}$ with $a_{i + 3}$ simultaneously. In other words, permutation $a$ will be transformed from $[\\ldots, a_i, a_{i+1}, a_{i+2}, a_{i+3}, \\ldots]$ to $[\\ldots, a_{i+2}, a_{i+3}, a_{i}, a_{i+1}, \\ldots]$.\n\nDetermine the lexicographically smallest permutation$^{\\text{†}}$ that can be obtained by applying the above operation any number of times.\n\n$^{\\text{∗}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n$^{\\text{†}}$An array $x$ is lexicographically smaller than an array $y$ of the same size if and only if the following holds:\n\n- in the first position where $x$ and $y$ differ, the array $x$ has a smaller element than the corresponding element in $y$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($4\\le n\\le 2\\cdot 10^5$) — the length of permutation $a$.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le n$) — the elements of permutation $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, output the lexicographically smallest permutation that can be obtained by applying the above operation any number of times.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n4\n\n3 4 1 2\n\n5\n\n5 4 3 1 2\n\n10\n\n10 9 8 7 6 5 4 3 2 1\n\n```\n\n#### Output #1\n\n```\n1 2 3 4\n2 1 3 4 5\n2 1 4 3 6 5 8 7 10 9\n```\n\n### Note\n\nIn the first test case, an operation can be done on index $i = 1$, and the permutation will become $[1, 2, 3, 4]$, which is the lexicographically smallest permutation achievable.\n\nIn the second test case, we can do the following sequence of operations:\n\n- Do an operation on index $i = 2$. The permutation becomes $[5, 1, 2, 4, 3]$.\n- Do an operation on index $i = 1$. The permutation becomes $[2, 4, 5, 1, 3]$.\n- Do an operation on index $i = 2$. The permutation becomes $[2, 1, 3, 4, 5]$.", "cfid": "2101B"}
{"problem_id": "2107B", "problem_title": "B. Apples in Boxes", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2107/B", "problem_statement": "Tom and Jerry found some apples in the basement. They decided to play a game to get some apples.\n\nThere are $n$ boxes, and the $i$-th box has $a_i$ apples inside. Tom and Jerry take turns picking up apples. Tom goes first. On their turn, they have to do the following:\n\n- Choose a box $i$ ($1 \\le i \\le n$) with a positive number of apples, i.e. $a_i > 0$, and pick $1$ apple from this box. Note that this reduces $a_i$ by $1$.\n- If no valid box exists, the current player loses.\n- If after the move, $\\max(a_1, a_2, \\ldots, a_n) - \\min(a_1, a_2, \\ldots, a_n) > k$ holds, then the current player (who made the last move) also loses.\n\nIf both players play optimally, predict the winner of the game.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n,k$ ($2 \\le n \\le 10^5,1\\le k \\le 10^9$).\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, print \"Tom\" (without quotes) if Tom will win, or \"Jerry\" (without quotes) otherwise.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3 1\n\n2 1 2\n\n3 1\n\n1 1 3\n\n2 1\n\n1 4\n\n```\n\n#### Output #1\n\n```\nTom\nTom\nJerry\n```\n\n### Note\n\nNote that neither player is necessarily playing an optimal strategy in the following games, just to give you an idea of how the game is going.\n\nIn the first test case of the example, one possible situation is shown as follows.\n\n- Tom takes an apple from the first box. The array $a$ becomes $[1, 1, 2]$. Tom does not lose because $\\max(1, 1, 2) - \\min(1, 1, 2) = 1 \\le k$.\n- Jerry takes an apple from the first box as well. The array $a$ becomes $[0, 1, 2]$. Jerry loses because $\\max(0, 1, 2) - \\min(0, 1, 2) = 2 > k$.", "cfid": "2107B"}
{"problem_id": "2107A", "problem_title": "A. LRC and VIP", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2107/A", "problem_statement": "You have an array $a$ of size $n$ — $a_1, a_2, \\ldots a_n$.\n\nYou need to divide the $n$ elements into $2$ sequences $B$ and $C$, satisfying the following conditions:\n\n- Each element belongs to exactly one sequence.\n- Both sequences $B$ and $C$ contain at least one element.\n- $\\gcd$ $(B_1, B_2, \\ldots, B_{|B|}) \\ne \\gcd(C_1, C_2, \\ldots, C_{|C|})$ $^{\\text{∗}}$\n\n$^{\\\\text{∗}}$$\\\\gcd(x, y)$ denotes the [greatest common divisor (GCD)](https://en.wikipedia.org/wiki/Greatest_common_divisor) of integers $x$ and $y$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 500$). The description of the test cases follows.\n\nThe first line of each test case contains an integer $n$ ($2 \\le n \\le 100$).\n\nThe second line of each test case contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($1 \\le a_i \\le 10^4$).\n\n### Output\n\nFor each test case, first output $\\texttt{Yes}$ if a solution exists or $\\texttt{No}$ if no solution exists. You may print each character in either case, for example $\\texttt{YES}$ and $\\texttt{yEs}$ will also be accepted.\n\nOnly when there is a solution, output $n$ integers on the second line. The $i$-th number should be either $1$ or $2$. $1$ represents that the element belongs to sequence $B$ and $2$ represents that the element belongs to sequence $C$.\n\nYou should guarantee that $1$ and $2$ both appear at least once.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n4\n\n1 20 51 9\n\n4\n\n5 5 5 5\n\n3\n\n1 2 2\n\n```\n\n#### Output #1\n\n```\nYes\n2 2 1 1\nNo\nYes\n1 2 2\n```\n\n### Note\n\nIn the first test case, $B = [51, 9]$ and $C = [1, 20]$. You can verify $\\gcd(B_1, B_2) = 3 \\ne 1 = \\gcd(C_1, C_2)$.\n\nIn the second test case, it is impossible to find a solution. For example, suppose you distributed the first $3$ elements to array $B$ and then the last element to array $C$. You have $B = [5, 5, 5]$ and $C = [5]$, but $\\gcd(B_1, B_2, B_3) = 5 = \\gcd(C_1)$. Hence it is invalid.", "cfid": "2107A"}
{"problem_id": "2107C", "problem_title": "C. Maximum Subarray Sum", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2107/C", "problem_statement": "You are given an array $a_1,a_2,\\ldots,a_n$ of length $n$ and a positive integer $k$, but some parts of the array $a$ are missing. Your task is to fill the missing part so that the maximum subarray sum$^{\\text{∗}}$ of $a$ is exactly $k$, or report that no solution exists.\n\nFormally, you are given a binary string $s$ and a partially filled array $a$, where:\n\n- If you remember the value of $a_i$, $s_i = 1$ to indicate that, and you are given the real value of $a_i$.\n- If you don't remember the value of $a_i$, $s_i = 0$ to indicate that, and you are given $a_i = 0$.\n\nAll the values that you remember satisfy $|a_i| \\le 10^6$. However, you may use values up to $10^{18}$ to fill in the values that you do not remember. It can be proven that if a solution exists, a solution also exists satisfying $|a_i| \\le 10^{18}$.\n\n$^{\\text{∗}}$The maximum subarray sum of an array $a$ of length $n$, i.e. $a_1, a_2, \\ldots a_n$ is defined as $\\max_{1 \\le i \\le j \\le n} S(i, j)$ where $S(i, j) = a_i + a_{i + 1} + \\ldots + a_j$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two numbers $n,k$ ($1 \\le n \\le 2 \\cdot 10^5,1 \\le k \\le 10^{12}$).\n\nThe second line of each test case contains a binary ($\\texttt{01}$) string $s$ of length $n$.\n\nThe third line of each test case contains $n$ numbers $a_1,a_2,\\ldots,a_n$ ($|a_i| \\le 10^6$). If $s_i = \\texttt{0}$, then it's guaranteed that $a_i = 0$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, first output $\\texttt{Yes}$ if a solution exists or $\\texttt{No}$ if no solution exists. You may print each character in either case, for example $\\texttt{YES}$ and $\\texttt{yEs}$ will also be accepted.\n\nIf there's at least one solution, print $n$ numbers $a_1,a_2,\\ldots,a_n$ on the second line. $|a_i| \\le 10^{18}$ must hold.\n\n### Example\n\n#### Input #1\n\n```\n\n10\n\n3 5\n\n011\n\n0 0 1\n\n5 6\n\n11011\n\n4 -3 0 -2 1\n\n4 4\n\n0011\n\n0 0 -4 -5\n\n6 12\n\n110111\n\n1 2 0 5 -1 9\n\n5 19\n\n00000\n\n0 0 0 0 0\n\n5 19\n\n11001\n\n-8 6 0 0 -5\n\n5 10\n\n10101\n\n10 0 10 0 10\n\n1 1\n\n1\n\n0\n\n3 5\n\n111\n\n3 -1 3\n\n4 5\n\n1011\n\n-2 0 1 -5\n\n```\n\n#### Output #1\n\n```\nYes\n4 0 1\nYes\n4 -3 5 -2 1\nYes\n2 2 -4 -5\nNo\nYes\n5 1 9 2 2\nYes\n-8 6 6 7 -5\nYes\n10 -20 10 -20 10\nNo\nYes\n3 -1 3\nYes\n-2 4 1 -5\n```\n\n### Note\n\nIn test case $1$, only the first position is not filled. We can fill it with $4$ to get the array $[4, 0, 1]$ which has maximum subarray sum of $5$.\n\nIn test case $2$, only the third position is not filled. We can fill it with $5$ to get the array $[4, -3, 5, -2, 1]$. Here the maximum subarray sum comes from the subarray $[4, -3, 5]$ and it is $6$, as required.\n\nIn test case $3$, the first and second positions are unfilled. We can fill both with $2$ to get the array $[2, 2, -4, -5]$ which has a maximum subarray sum of $4$. Note that other outputs are also possible such as $[0, 4, -4, -5]$.\n\nIn test case $4$, it is impossible to get a valid array. For example, if we filled the third position with $0$, we get $[1, 2, 0, 5, -1, 9]$, but this has a maximum subarray sum of $16$, not $12$ as required.", "cfid": "2107C"}
{"problem_id": "2108C", "problem_title": "C. Neo's Escape", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2108/C", "problem_statement": "Neo wants to escape from the Matrix. In front of him are $n$ buttons arranged in a row. Each button has a weight given by an integer: $a_1, a_2, \\ldots, a_n$.\n\nNeo is immobilized, but he can create and move clones. This means he can perform an unlimited number of actions of the following two types in any order:\n\n1. Create a clone in front of a specific button.\n2. Move an existing clone one position to the left or right.\n\nAs soon as a clone is in front of another button that has not yet been pressed—regardless of whether he was created or moved — he immediately presses it. If the button has already been pressed, a clone does nothing — buttons can only be pressed once.\n\nFor Neo to escape, he needs to press all the buttons in such an order that the sequence of their weights is non-increasing — that is, if $b_1, b_2, \\ldots, b_n$ are the weights of the buttons in the order they are pressed, then it must hold that $b_1 \\geq b_2 \\geq \\cdots \\geq b_n$.\n\nYour task is to determine the minimum number of clones that Neo needs to create in order to press all the buttons in a valid order.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains one integer $n$ ($1 \\leq n \\leq 2 \\cdot 10^5$) — the number of buttons.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$) — the weights of the buttons.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output one integer — the minimum number of clones that need to be created to press all the buttons in a valid order.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n5\n\n4 3 2 1 5\n\n3\n\n1 1 1\n\n6\n\n7 8 1 5 9 2\n\n10\n\n1 7 9 7 1 10 2 10 10 7\n\n```\n\n#### Output #1\n\n```\n2\n1\n2\n3\n```\n\n### Note\n\nIn the first test case, Neo can act as follows:\n\n1. Create a clone in front of the fifth button (with weight $5$).\n2. Create a clone in front of the first button (with weight $4$).\n3. Move the second clone from the first button to the second (with weight $3$).\n4. Move the second clone from the second button to the third (with weight $2$).\n5. Move the first clone from the fifth button to the fourth (with weight $1$).\n\nThus, the sequence of button presses will be $5 \\rightarrow 4 \\rightarrow 3 \\rightarrow 2 \\rightarrow 1$, which meets the requirement. It can be shown that the number of clones created is the smallest possible.\n\nIn the second test case, Neo can act as follows:\n\n1. Create a clone in front of the second button (with weight $1$).\n2. Move the clone from the second button to the third (with weight $1$).\n3. Move the clone from the third button to the second (already pressed).\n4. Move the clone from the second button to the first (with weight $1$).\n\nThus, the sequence of button presses will be $1 \\rightarrow 1 \\rightarrow 1$.", "cfid": "2108C"}
{"problem_id": "2108A", "problem_title": "A. Permutation Warm-Up", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2108/A", "problem_statement": "For a permutation $p$ of length $n$$^{\\\\text{∗}}$, we define the function:\n\n\n\n$$ f(p) = \\sum_{i=1}^{n} \\lvert p_i - i \\rvert $$\n\nYou are given a number $n$. You need to compute how many distinct values the function $f(p)$ can take when considering all possible permutations of the numbers from $1$ to $n$.\n\n$^{\\text{∗}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 100$). The description of the test cases follows.\n\nThe first line of each test case contains an integer $n$ ($1 \\leq n \\leq 500$) — the number of numbers in the permutations.\n\n### Output\n\nFor each test case, output a single integer — the number of distinct values of the function $f(p)$ for the given length of permutations.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n2\n\n3\n\n8\n\n15\n\n43\n\n```\n\n#### Output #1\n\n```\n2\n3\n17\n57\n463\n```\n\n### Note\n\nConsider the first two examples of the input.\n\nFor $n = 2$, there are only $2$ permutations — $[1, 2]$ and $[2, 1]$. $f([1, 2]) = \\lvert 1 - 1 \\rvert + \\lvert 2 - 2 \\rvert = 0$, $f([2, 1]) = \\lvert 2 - 1 \\rvert + \\lvert 1 - 2 \\rvert = 1 + 1 = 2$. Thus, the function takes $2$ distinct values.\n\nFor $n=3$, there are already $6$ permutations: $[1, 2, 3]$, $[1, 3, 2]$, $[2, 1, 3]$, $[2, 3, 1]$, $[3, 1, 2]$, $[3, 2, 1]$, the function values of which will be $0, 2, 2, 4, 4$, and $4$ respectively, meaning there are a total of $3$ values.", "cfid": "2108A"}
{"problem_id": "2108B", "problem_title": "B. SUMdamental Decomposition", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2108/B", "problem_statement": "On a recent birthday, your best friend Maurice gave you a pair of numbers $n$ and $x$, and asked you to construct an array of positive numbers $a$ of length $n$ such that $a_1 \\oplus a_2 \\oplus \\cdots \\oplus a_n = x$ $^{\\text{∗}}$.\n\nThis task seemed too simple to you, and therefore you decided to give Maurice a return gift by constructing an array among all such arrays that has the smallest sum of its elements. You immediately thought of a suitable array; however, since writing it down turned out to be too time-consuming, Maurice will have to settle for just the sum of its elements.\n\n$^{\\\\text{∗}}$$\\\\oplus$ denotes the [bitwise XOR operation](https://en.wikipedia.org/wiki/Bitwise_operation#XOR).\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nEach test case consists of a single line containing a pair of numbers $n$ and $x$ ($1 \\le n \\le 10^9, \\; 0 \\le x \\le 10^9$) — the numbers given to you by Maurice.\n\n### Output\n\nFor each test case, output your gift to Maurice — the sum of the elements of the array that satisfies all the described properties. If a suitable array does not exist, output $-1$.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n2 1\n\n3 6\n\n1 0\n\n2 0\n\n5 0\n\n2 27\n\n15 43\n\n12345678 9101112\n\n```\n\n#### Output #1\n\n```\n5\n8\n-1\n2\n8\n27\n55\n21446778\n```\n\n### Note\n\nIn the first test case, one of the suitable arrays is $[2, 3]$. It can be shown that it is impossible to achieve a smaller sum of array elements.\n\nIn the second case, one of the suitable arrays is $[1, 3, 4]$. It can also be shown that this is the optimal amount.", "cfid": "2108B"}
{"problem_id": "2104C", "problem_title": "C. Card Game", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2104/C", "problem_statement": "Alice and Bob are playing a game. They have $n$ cards numbered from $1$ to $n$. At the beginning of the game, some of these cards are given to Alice, and the rest are given to Bob.\n\nCard with number $i$ beats card with number $j$ if and only if $i > j$, with one exception: card $1$ beats card $n$.\n\nThe game continues as long as each player has at least one card. During each turn, the following occurs:\n\n1. Alice chooses one of her cards and places it face up on the table;\n2. Bob, seeing Alice's card, chooses one of his cards and places it face up on the table;\n3. if Alice's card beats Bob's card, both cards are taken by Alice. Otherwise, both cards are taken by Bob.\n\nA player can use a card that they have taken during one of the previous turns.\n\nThe player who has no cards at the beginning of a turn loses. Determine who will win if both players play optimally.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 5000$) — the number of test cases.\n\nEach test case consists of two lines:\n\n- the first line contains a single integer $n$ ($2 \\le n \\le 50$) — the number of cards;\n- the second line contains $n$ characters, each either A or B. If the $i$-th character is A, then card number $i$ is initially given to Alice; otherwise, it is given to Bob.\n\nAdditional constraint on the input: in each test case, at least one card is initially given to Alice, and at least one card is initially given to Bob.\n\n### Output\n\nFor each test case, output Alice if Alice wins with optimal play, or Bob if Bob wins. It can be shown that if both players play optimally, the game will definitely end in a finite number of turns with one of the players winning.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n2\n\nAB\n\n2\n\nBA\n\n4\n\nABAB\n\n4\n\nBABA\n\n3\n\nBAA\n\n5\n\nAAAAB\n\n5\n\nBAAAB\n\n6\n\nBBBAAA\n\n```\n\n#### Output #1\n\n```\nAlice\nBob\nBob\nBob\nAlice\nAlice\nBob\nAlice\n```\n\n### Note\n\nIn the first test case, Alice has only one card, and Bob has only one card. Since Alice's card beats Bob's card, she wins after the first turn.\n\nIn the second test case, Alice has only one card, and Bob has only one card. Since Bob's card beats Alice's card, he wins after the first turn.\n\nIn the third test case, there are two possible game scenarios:\n\n- if Alice plays the card $1$ on the first turn, Bob can respond with the card $2$ and take both cards. Then, Alice has to play the card $3$ on the second turn, and Bob will respond by playing the card $4$. Then, he wins;\n- if Alice plays the card $3$ on the first turn, Bob can respond with the card $4$ and take both cards. Then, Alice has to play the card $1$, and Bob can respond either with the card $2$ or the card $3$. Then, he wins.\n\nIn the fourth test case, there are two possible game scenarios:\n\n- if Alice plays the card $2$ on the first turn, Bob can respond with the card $3$ and take both cards. Then, Alice has to play the card $4$ on the second turn, and Bob will respond by playing the card $1$. Then, he wins;\n- if Alice plays the card $4$ on the first turn, Bob can respond with the card $1$ and take both cards. Then, Alice has to play the card $2$, and Bob can respond either with the card $3$ or the card $4$. Then, he wins.", "cfid": "2104C"}
{"problem_id": "2104B", "problem_title": "B. Move to the End", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2104/B", "problem_statement": "You are given an array $a$ consisting of $n$ integers.\n\nFor every integer $k$ from $1$ to $n$, you have to do the following:\n\n1. choose an arbitrary element of $a$ and move it to the right end of the array (you can choose the last element, then the array won't change);\n2. print the sum of $k$ last elements of $a$;\n3. move the element you've chosen on the first step to its original position (restore the original array $a$).\n\nFor every $k$, you choose the element which you move so that the value you print is the maximum possible.\n\nCalculate the value you print for every $k$.\n\n### Input\n\nThe first line contains one integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nEach test case consists of two lines:\n\n- the first line contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$);\n- the second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$).\n\nAdditional constraint on the input: the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print $n$ integers. The $i$-th of these integers should be equal to the maximum value you can print if $k=i$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n7\n\n13 5 10 14 8 15 13\n\n6\n\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\n\n1\n\n42\n\n2\n\n7 5\n\n```\n\n#### Output #1\n\n```\n15 28 42 50 63 73 78\n1000000000 2000000000 3000000000 4000000000 5000000000 6000000000\n42\n7 12\n```\n\n### Note\n\nLet's consider the first test case from the statement:\n\n- when $k = 1$, you can move the $6$-th element to the end, the array becomes $[13, 5, 10, 14, 8, 13, 15]$, and the value you print is $15$;\n- when $k = 2$, you can move the $6$-th element to the end, the array becomes $[13, 5, 10, 14, 8, 13, 15]$, and the value you print is $13 + 15 = 28$;\n- when $k = 3$, you can move the $4$-th element to the end, the array becomes $[13, 5, 10, 8, 15, 13, 14]$, and the value you print is $15 + 13 + 14 = 42$;\n- when $k = 4$, you can move the $5$-th element to the end, the array becomes $[13, 5, 10, 14, 15, 13, 8]$, and the value you print is $14 + 15 + 13 + 8 = 50$;\n- when $k = 5$, you can move the $1$-st element to the end, the array becomes $[5, 10, 14, 8, 15, 13, 13]$, and the value you print is $14 + 8 + 15 + 13 + 13 = 63$;\n- when $k = 6$, you can move the $1$-st element to the end, the array becomes $[5, 10, 14, 8, 15, 13, 13]$, and the value you print is $10 + 14 + 8 + 15 + 13 + 13 = 73$;\n- when $k = 7$, you can move the $6$-th element to the end, the array becomes $[13, 5, 10, 14, 8, 13, 15]$, and the value you print is $13 + 5 + 10 + 14 + 8 + 13 + 15 = 78$.", "cfid": "2104B"}
{"problem_id": "2104A", "problem_title": "A. Three Decks", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2104/A", "problem_statement": "Monocarp placed three decks of cards in a row on the table. The first deck consists of $a$ cards, the second deck consists of $b$ cards, and the third deck consists of $c$ cards, with the condition $a < b < c$.\n\nMonocarp wants to take some number of cards (at least one, but no more than $c$) from the third deck and distribute them between the first two decks so that each of the taken cards ends up in either the first or the second deck. It is possible that all the cards taken from the third deck will go into the same deck.\n\nYour task is to determine whether Monocarp can make the number of cards in all three decks equal using the described operation.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe only line of each test case contains three integers $a, b$, and $c$ ($1 \\le a, b, c \\le 10^8$) — the number of cards in the first, second, and third decks, respectively.\n\nAdditional constraint on the input: $a < b < c$.\n\n### Output\n\nFor each test case, output \"YES\" (without quotes) if Monocarp can make the number of cards in all three decks equal using the described operation. Otherwise, output \"NO\" (without quotes).\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3 5 10\n\n12 20 30\n\n3 5 7\n\n1 5 6\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nYES\nNO\n```\n\n### Note\n\nIn the first test case, Monocarp has to take $4$ cards from the third deck, put $3$ cards in the first deck, and $1$ card in the second deck. Thus, there will be $6$ cards in all three decks.\n\nIn the second test case, it is impossible to make the number of cards in all three decks equal.\n\nIn the third test case, Monocarp has to take $2$ cards from the third deck and put both in the first deck. Thus, there will be $5$ cards in all three decks.\n\nIn the fourth test case, it is also impossible to make the number of cards in all three decks equal.", "cfid": "2104A"}
{"problem_id": "2104E", "problem_title": "E. Unpleasant Strings", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2104/E", "problem_statement": "Let's call a letter allowed if it is a lowercase letter and is one of the first $k$ letters of the Latin alphabet.\n\nYou are given a string $s$ of length $n$, consisting only of allowed letters.\n\nLet's call a string $t$ pleasant if $t$ is a subsequence of $s$.\n\nYou are given $q$ strings $t_1, t_2, \\dots, t_q$. All of them consist only of allowed letters. For each string $t_i$, calculate the minimum number of allowed letters you need to append to it on the right so that it stops being pleasant.\n\nA sequence $t$ is a subsequence of a sequence $s$ if $t$ can be obtained from $s$ by the deletion of several (possibly, zero or all) element from arbitrary positions.\n\n### Input\n\nThe first line contains two integers $n$ and $k$ ($1 \\le n \\le 10^6$; $1 \\le k \\le 26$) — the length of the string $s$ and the number of allowed letters.\n\nThe second line contains the string $s$, consisting of $n$ lowercase Latin letters. Each character of the string is one of the first $k$ letters of the Latin alphabet.\n\nThe third line contains one integer $q$ ($1 \\le q \\le 2 \\cdot 10^5$) — the number of queries.\n\nThe next $q$ lines contain queries: one query per line. The $i$-th line contains the string $t_i$, consisting only of allowed letters.\n\nAdditional constraint on input: the total length of all $t_i$ does not exceed $10^6$.\n\n### Output\n\nFor each query, output one integer — the minimum number of allowed letters that need to be appended to the string on the right so that it stops being pleasant.\n\n### Examples\n\n#### Input #1\n\n```\n\n7 3\n\nabacaba\n\n3\n\ncc\n\nbcb\n\nb\n\n```\n\n#### Output #1\n\n```\n0\n1\n2\n```\n\n#### Input #2\n\n```\n\n5 1\n\naaaaa\n\n6\n\na\n\naa\n\naaa\n\naaaa\n\naaaaa\n\naaaaaa\n\n```\n\n#### Output #2\n\n```\n5\n4\n3\n2\n1\n0\n```\n\n### Note\n\nIn the first example:\n\n1. The string cc is already unpleasant, so nothing needs to be appended to it;\n2. bcb is pleasant, so at least one letter needs to be appended to the right: bcba will not work, but bcbb and bcbc are unpleasant.\n3. To b, at least two letters need to be appended, since ba, bb, and bc are pleasant. For example, we can obtain an unpleasant string bbb.", "cfid": "2104E"}
{"problem_id": "2104D", "problem_title": "D. Array and GCD", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2104/D", "problem_statement": "You are given an integer array $a$ of size $n$.\n\nYou can perform the following operations any number of times (possibly, zero):\n\n- pay one coin and increase any element of the array by $1$ (you must have at least $1$ coin to perform this operation);\n- gain one coin and decrease any element of the array by $1$.\n\nLet's say that an array is ideal if both of the following conditions hold:\n\n- each element of the array is at least $2$;\n- for each pair of indices $i$ and $j$ ($1 \\le i, j \\le n$; $i \\ne j$) the greatest common divisor (GCD) of $a_i$ and $a_j$ is equal to $1$. If the array has less than $2$ elements, this condition is automatically satisfied.\n\nLet's say that an array is beautiful if it can be transformed into an ideal array using the aforementioned operations, provided that you initially have no coins. If the array is already ideal, then it is also beautiful.\n\nThe given array is not necessarily beautiful or ideal. You can remove any elements from it (including removing the entire array or not removing anything at all). Your task is to calculate the minimum number of elements you have to remove (possibly, zero) from the array $a$ to make it beautiful.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 4 \\cdot 10^5$).\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($2 \\le a_i \\le 10^9$).\n\nAdditional constraint on the input: the sum of $n$ over all test cases doesn't exceed $4 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print a single integer — the minimum number of elements you have to remove (possibly, zero) from the array $a$ to make it beautiful.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3\n\n5 5 5\n\n4\n\n2 3 2 4\n\n1\n\n3\n\n3\n\n2 100 2\n\n5\n\n2 4 2 11 2\n\n```\n\n#### Output #1\n\n```\n0\n2\n0\n0\n1\n```\n\n### Note\n\nIn the first example, you don't need to delete any elements, because the array is already beautiful. It can be transformed into an ideal array as follows: $[5, 5, 5] \\rightarrow [4, 5, 5] \\rightarrow [4, 4, 5] \\rightarrow [4, 3, 5]$ (you end up with $3$ coins).\n\nIn the second example, you need to remove $2$ elements so that the array becomes beautiful. If you leave the elements $[2, 3]$ and delete the other elements, then the given array is already ideal (and therefore, beautiful).\n\nIn the third example, you don't need to delete any elements because the array is already ideal (and thus, beautiful).\n\nIn the fourth example, the array is beautiful. It can be transformed into an ideal array as follows: $[2, 100, 2] \\rightarrow [2, 99, 2] \\rightarrow [2, 99, 3] \\rightarrow [2, 98, 3] \\rightarrow [2, 97, 3]$ (you end up with $2$ coins).", "cfid": "2104D"}
{"problem_id": "2098A", "problem_title": "A. Vadim's Collection", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2098/A", "problem_statement": "We call a phone number a beautiful if it is a string of $10$ digits, where the $i$-th digit from the left is at least $10 - i$. That is, the first digit must be at least $9$, the second at least $8$, $\\ldots$, with the last digit being at least $0$.\n\nFor example, 9988776655 is a beautiful phone number, while 9099999999 is not, since the second digit, which is $0$, is less than $8$.\n\nVadim has a beautiful phone number. He wants to rearrange its digits in such a way that the result is the smallest possible beautiful phone number. Help Vadim solve this problem.\n\nPlease note that the phone numbers are compared as integers.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe only line of each test case contains a single string $s$ of length $10$, consisting of digits. It is guaranteed that $s$ is a beautiful phone number.\n\n### Output\n\nFor each test case, output a single string of length $10$ — the smallest possible beautiful phone number that Vadim can obtain.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n9999999999\n\n9988776655\n\n9988776650\n\n9899999999\n\n```\n\n#### Output #1\n\n```\n9999999999\n9876556789\n9876567890\n9899999999\n```\n\n### Note\n\nIn the first test case, for the first phone number 9999999999, regardless of the rearrangement of digits, the same phone number is obtained.\n\nIn the second test case, for the phone number 9988776655, it can be proven that 9876556789 is the smallest phone number that can be obtained by rearranging the digits.", "cfid": "2098A"}
{"problem_id": "2097A", "problem_title": "A. Sports Betting", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2097/A", "problem_statement": "The boarding process for various flights can occur in different ways: either by bus or through a telescopic jet bridge. Every day, exactly one flight is made from St. Petersburg to Minsk, and Vadim decided to demonstrate to the students that he always knows in advance how the boarding will take place.\n\nVadim made a bet with $n$ students, and with the $i$-th student, he made a bet on day $a_i$. Vadim wins the bet if he correctly predicts the boarding process on both day $a_i+1$ and day $a_i+2$.\n\nAlthough Vadim does not know in advance how the boarding will occur, he really wants to win the bet at least with one student and convince him of his predictive abilities. Check if there exists a strategy for Vadim that allows him to guarantee success.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 10^5$) — the number of students Vadim made bets with.\n\nThe second line of each test case contains $n$ integers $a_1, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$) — the days on which Vadim made bets with the students.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, output \"Yes\" (without quotes) if Vadim can guarantee convincing at least one student, and \"No\" otherwise.\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n4\n\n1 1 1 1\n\n3\n\n2 2 2\n\n5\n\n2 4 3 2 4\n\n8\n\n6 3 1 1 5 1 2 6\n\n1\n\n1000000000\n\n```\n\n#### Output #1\n\n```\nYes\nNo\nYes\nNo\nNo\n```\n\n### Note\n\nIn the first test case, Vadim needs to make at least one correct prediction about the boarding process on the second and third days. There are a total of $4$ possible boarding scenarios for these days, so Vadim can give all $4$ students different predictions and guarantee that at least one of them will be correct.\n\nIn the second test case, Vadim only made bets with three students and cannot guarantee that he will provide at least one of them with a correct prediction.", "cfid": "2097A"}
{"problem_id": "2098B", "problem_title": "B. Sasha and the Apartment Purchase", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2098/B", "problem_statement": "Sasha wants to buy an apartment on a street where the houses are numbered from $1$ to $10^9$ from left to right.\n\nThere are $n$ bars on this street, located in houses with numbers $a_1, a_2, \\ldots, a_n$. Note that there might be multiple bars in the same house, and in this case, these bars are considered distinct.\n\nSasha is afraid that by the time he buys the apartment, some bars may close, but no more than $k$ bars can close.\n\nFor any house with number $x$, define $f(x)$ as the sum of $|x - y|$ over all open bars $y$ (that is, after closing some bars).\n\nSasha can potentially buy an apartment in a house with number $x$ (where $1 \\le x \\le 10^9$) if and only if it is possible to close at most $k$ bars so that after that $f(x)$ becomes minimal among all houses.\n\nDetermine how many different houses Sasha can potentially buy an apartment in.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\leq n \\leq 10^5, 0 \\leq k < n$) — the number of bars and the maximum number of bars that can close.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$) — the house numbers where the bars are located.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, output a single integer — the number of houses where Sasha can buy an apartment.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n4 0\n\n1 2 3 4\n\n5 2\n\n7 6 6 7 1\n\n3 1\n\n6 7 9\n\n6 2\n\n5 1 9 10 13 2\n\n```\n\n#### Output #1\n\n```\n2\n2\n4\n9\n```\n\n### Note\n\nIn the first test case, none of the bars can close, so only houses numbered $2$ and $3$ are suitable. For the house numbered $2$, the sum of distances is $|2 - 1| + |2 - 2| + |2 - 3| + |2 - 4| = 4$, and for the house numbered $3$, the sum of distances is $|3 - 1| + |3 - 2| + |3 - 3| + |3 - 4| = 4$. However, for the house numbered $1$, the sum of distances will be $|1 - 1| + |1 - 2| + |1 - 3| + |1 - 4| = 6$, so the house numbered $1$ is not suitable. It can also be proven that Sasha cannot buy apartments in other houses.\n\nIn the second test case, the suitable houses are numbered $6$ and $7$. For Sasha to choose the house numbered $6$, it is sufficient that none of the bars close. For Sasha to choose the house numbered $7$, the bars in houses $1$ and $6$ can close. Then the bars will be located in houses numbered $6$, $7$, and $7$.", "cfid": "2098B"}
{"problem_id": "2106D", "problem_title": "D. Flower Boy", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2106/D", "problem_statement": "Flower boy has a garden of $n$ flowers that can be represented as an integer sequence $a_1, a_2, \\dots, a_n$, where $a_i$ is the beauty of the $i$-th flower from the left.\n\nIgor wants to collect exactly $m$ flowers. To do so, he will walk the garden from left to right and choose whether to collect the flower at his current position. The $i$-th flower among ones he collects must have a beauty of at least $b_i$.\n\nIgor noticed that it might be impossible to collect $m$ flowers that satisfy his beauty requirements, so before he starts collecting flowers, he can pick any integer $k$ and use his magic wand to grow a new flower with beauty $k$ and place it anywhere in the garden (between two flowers, before the first flower, or after the last flower). Because his magic abilities are limited, he may do this at most once.\n\nOutput the minimum integer $k$ Igor must pick when he performs the aforementioned operation to ensure that he can collect $m$ flowers. If he can collect $m$ flowers without using the operation, output $0$. If it is impossible to collect $m$ flowers despite using the operation, output $-1$.\n\n### Input\n\nThe first line of the input contains a single integer $t$ $(1 \\le t \\le 10^4)$ — the number of test cases.\n\nThe first line of each test case contains exactly two integers $n$ and $m$ $(1 \\le m \\le n \\le 2 \\cdot 10^5)$ — the number of flowers in the garden and the number of flowers Igor wants to collect, respectively.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, ..., a_n$ $(1 \\le a_i \\le 10^9)$ — where $a_i$ is the beauty of the $i$-th flower from the left in the garden.\n\nThe third line of each test case contains $m$ integers $b_1, b_2, ..., b_m$ $(1 \\le b_i \\le 10^9)$ — where $b_i$ is the minimum beauty the $i$-th flower must have that Igor will collect.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, on a separate line, output the minimum integer $k$ Igor must pick when he performs the aforementioned operation to ensure that he can collect $m$ flowers. If he can collect $m$ flowers without using the operation, output $0$. If it is impossible to collect $m$ flowers despite using the operation, output $-1$.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n9 5\n\n3 5 2 3 3 5 8 1 2\n\n4 6 2 4 6\n\n6 3\n\n1 2 6 8 2 1\n\n5 4 3\n\n5 3\n\n4 3 5 4 3\n\n7 4 5\n\n6 3\n\n8 4 2 1 2 5\n\n6 1 4\n\n5 5\n\n1 2 3 4 5\n\n5 4 3 2 1\n\n6 3\n\n1 2 3 4 5 6\n\n9 8 7\n\n5 5\n\n7 7 6 7 7\n\n7 7 7 7 7\n\n```\n\n#### Output #1\n\n```\n6\n3\n7\n0\n-1\n-1\n7\n```\n\n### Note\n\nIn the first test case, suppose Igor grows a flower of beauty $6$ and places it between the third and the fourth flowers. Then, the garden will look like the following: $[3, 5, 2, 6, 3, 3, 5, 8, 1, 2]$. Then, he can select the second, fourth, sixth, seventh, and eighth flowers with beauties $[5, 6, 3, 5, 8]$.\n\nIn the third test case, he can grow a flower of beauty $7$ and place it before the first flower. The garden will look like the following: $[7, 4, 3, 5, 4, 3]$. Now, he can choose the first, second, and fourth flowers.\n\nIn the fourth test case, Igor does not need to use the operation, so the answer is $0$.\n\nIn the sixth test case, no matter how Igor performs the operation, he cannot collect $3$ flowers such that the $i$-th flower he collects has a beauty of at least $b_i$, therefore the answer is $-1$.", "cfid": "2106D"}
{"problem_id": "2106E", "problem_title": "E. Wolf", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2106/E", "problem_statement": "Wolf has found $n$ sheep with tastiness values $p_1, p_2, ..., p_n$ where $p$ is a permutation$^{\\text{∗}}$. Wolf wants to perform binary search on $p$ to find the sheep with tastiness of $k$, but $p$ may not necessarily be sorted. The success of binary search on the range $[l, r]$ for $k$ is represented as $f(l, r, k)$, which is defined as follows:\n\nIf $l > r$, then $f(l, r, k)$ fails. Otherwise, let $m = \\lfloor\\frac{l + r}{2}\\rfloor$, and:\n\n- If $p_m = k$, then $f(l, r, k)$ is successful,\n- If $p_m < k$, then $f(l, r, k) = f(m+1, r, k)$,\n- If $p_m > k$, then $f(l, r, k) = f(l, m-1, k)$.\n\nCow the Nerd decides to help Wolf out. Cow the Nerd is given $q$ queries, each consisting of three integers $l$, $r$, and $k$. Before the search begins, Cow the Nerd may choose a non-negative integer $d$, and $d$ indices $1 \\le i_1 < i_2 < \\ldots < i_d \\le n$ where $p_{i_j} \\neq k$ over all $1 \\leq j \\leq d$. Then, he may re-order the elements $p_{i_1}, p_{i_2}, ..., p_{i_d}$ however he likes.\n\nFor each query, output the minimum integer $d$ that Cow the Nerd must choose so that $f(l, r, k)$ can be successful, or report that it is impossible. Note that the queries are independent and the reordering is not actually performed.\n\n$^{\\text{∗}}$A permutation of length $n$ is an array that contains every integer from $1$ to $n$ exactly once.\n\n### Input\n\nThe first line of the input contains a single integer $t$ $(1 \\le t \\le 10^4)$ — the number of test cases.\n\nThe first line of each test contains two integers $n$ and $q$ $(1 \\le n, q \\le 2 \\cdot 10^5)$ — the length of $p$ and the number of queries respectively.\n\nThe second line contains $n$ integers $p_1, p_2, ..., p_n$ — the tastiness of the $i$-th sheep. It is guaranteed that every integer from $1$ to $n$ appears exactly once in $p$.\n\nThe following $q$ lines contain three integers $l$, $r$, and $k$ $(1 \\le l \\le r \\le n, 1 \\le k \\le n)$ — the range that the binary search will be performed on and the integer being searched for each query.\n\nIt is guaranteed that the sum of $n$ and the sum of $q$ over all cases do not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each query, output the minimum integer $d$ that Cow the Nerd must choose so that $f(l, r, k)$ is successful on a new line. If it is impossible, output $-1$.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n5 3\n\n1 2 3 4 5\n\n1 5 4\n\n1 3 4\n\n3 4 4\n\n7 4\n\n3 1 5 2 7 6 4\n\n3 4 2\n\n2 3 5\n\n1 5 6\n\n1 7 3\n\n2 1\n\n2 1\n\n1 2 1\n\n1 1\n\n1\n\n1 1 1\n\n7 1\n\n3 4 2 5 7 1 6\n\n1 7 1\n\n16 1\n\n16 10 12 6 13 9 14 3 8 11 15 2 7 1 5 4\n\n1 16 4\n\n16 1\n\n14 1 3 15 4 5 6 16 7 8 9 10 11 12 13 2\n\n1 16 14\n\n13 1\n\n12 13 10 9 8 4 11 5 7 6 2 1 3\n\n1 13 2\n\n```\n\n#### Output #1\n\n```\n0 -1 0\n2 0 -1 4\n-1\n0\n-1\n-1\n-1\n-1\n```\n\n### Note\n\nIn the first example, second query: Since $4$ does not exist in the first three elements, it is impossible to find it when searching for it in that range.\n\nIn the second example, on the first query, you may choose the indices $2$, $3$, and swap them so $p = [3, 5, 1, 2, 7, 6, 4]$. Then, $f(3, 4, 2)$ will work as follows:\n\n1. Let $m = \\lfloor \\frac{3 + 4}{2} \\rfloor = 3$. Because $p_3 = 1 < 2$, then $f(3, 4, 2) = f(4, 4, 2)$.\n2. Let $m = \\lfloor \\frac{4 + 4}{2} \\rfloor = 4$. Because $p_4 = 2 = k$, then $f(4, 4, 2)$ is successful. Therefore, $f(3, 4, 2)$ is also successful.\n\nThe total indices chosen were $2$, so the final cost is $2$, which can be shown that is minimum. Note that for this query we can't choose index $4$, since $p_4 = k = 2$.\n\nIn the last query of the second example, we can choose indices $2, 3, 4, 5$ and re-arrange them so $p = [3, 5, 2, 7, 1, 6, 4]$. Then, $f(1, 7, 3)$ is successful.", "cfid": "2106E"}
{"problem_id": "2106A", "problem_title": "A. Dr. TC", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2106/A", "problem_statement": "In order to test his patients' intelligence, Dr. TC created the following test.\n\nFirst, he creates a binary string$^{\\text{∗}}$ $s$ having $n$ characters. Then, he creates $n$ binary strings $a_1, a_2, \\ldots, a_n$. It is known that $a_i$ is created by first copying $s$, then flipping the $i$'th character ($\\texttt{1}$ becomes $\\texttt{0}$ and vice versa). After creating all $n$ strings, he arranges them into a grid where the $i$'th row is $a_i$.\n\nFor example,\n\n- If $s = \\texttt{101}$, $a = [\\texttt{001}, \\texttt{111}, \\texttt{100}]$.\n- If $s = \\texttt{0000}$, $a = [\\texttt{1000}, \\texttt{0100}, \\texttt{0010}, \\texttt{0001}]$.\n\nThe patient needs to count the number of $1$s written on the board in less than a second. Can you pass the test?\n\n$^{\\text{∗}}$A binary string is a string that only consists of characters $\\texttt{1}$ and $\\texttt{0}$.\n\n### Input\n\nThe first line of the input consists of a single integer $t$ ($1 \\le t \\le 1000$) — the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 10$) — the length of the binary string $s$.\n\nThe second line of each test case contains a single binary string $s$ of size $n$.\n\n### Output\n\nFor each test case, output a single integer, the number of $\\texttt{1}$s on the board.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3\n\n101\n\n1\n\n1\n\n5\n\n00000\n\n2\n\n11\n\n3\n\n010\n\n```\n\n#### Output #1\n\n```\n5\n0\n5\n2\n4\n```\n\n### Note\n\nThe first example is explained in the statement.\n\nFor the second example, the only string written on the board will be the string $\\texttt{0}$; therefore, the answer is $0$.\n\nIn the third example, the following strings will be written on the board: $[\\texttt{10000}, \\texttt{01000}, \\texttt{00100}, \\texttt{00010}, \\texttt{00001}]$; so there are five $\\texttt{1}$s written on the board.", "cfid": "2106A"}
{"problem_id": "2106B", "problem_title": "B. St. Chroma", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2106/B", "problem_statement": "Given a permutation$^{\\\\text{∗}}$ $p$ of length $n$ that contains every integer from $0$ to $n-1$ and a strip of $n$ cells, St. Chroma will paint the $i$-th cell of the strip in the color $\\\\operatorname{MEX}(p\\_1, p\\_2, ..., p\\_i)$$^{\\\\text{†}}$.\n\nFor example, suppose $p = [1, 0, 3, 2]$. Then, St. Chroma will paint the cells of the strip in the following way: $[0, 2, 2, 4]$.\n\nYou have been given two integers $n$ and $x$. Because St. Chroma loves color $x$, construct a permutation $p$ such that the number of cells in the strip that are painted color $x$ is maximized.\n\n$^{\\text{∗}}$A permutation of length $n$ is a sequence of $n$ elements that contains every integer from $0$ to $n-1$ exactly once. For example, $[0, 3, 1, 2]$ is a permutation, but $[1, 2, 0, 1]$ isn't since $1$ appears twice, and $[1, 3, 2]$ isn't since $0$ does not appear at all.\n\n$^{\\text{†}}$The $\\operatorname{MEX}$ of a sequence is defined as the first non-negative integer that does not appear in it. For example, $\\operatorname{MEX}(1, 3, 0, 2) = 4$, and $\\operatorname{MEX}(3, 1, 2) = 0$.\n\n### Input\n\nThe first line of the input contains a single integer $t$ ($1 \\le t \\le 4000$) — the number of test cases.\n\nThe only line of each test case contains two integers $n$ and $x$ ($1 \\le n \\le 2 \\cdot 10^5$, $0 \\le x \\le n$) — the number of cells and the color you want to maximize.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nOutput a permutation $p$ of length $n$ such that the number of cells in the strip that are painted color $x$ is maximized. If there exist multiple such permutations, output any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n4 2\n\n4 0\n\n5 0\n\n1 1\n\n3 3\n\n1 0\n\n4 3\n\n```\n\n#### Output #1\n\n```\n1 0 3 2\n2 3 1 0\n3 2 4 1 0\n0\n0 2 1\n0\n1 2 0 3```\n\n### Note\n\nThe first example is explained in the statement. It can be shown that $2$ is the maximum amount of cells that can be painted in color $2$. Note that another correct answer would be the permutation $[0, 1, 3, 2]$.\n\nIn the second example, the permutation gives the coloring $[0, 0, 0, 4]$, so $3$ cells are painted in color $0$, which can be shown to be maximum.", "cfid": "2106B"}
{"problem_id": "2106C", "problem_title": "C. Cherry Bomb", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2106/C", "problem_statement": "Two integer arrays $a$ and $b$ of size $n$ are complementary if there exists an integer $x$ such that $a_i + b_i = x$ over all $1 \\le i \\le n$. For example, the arrays $a = [2, 1, 4]$ and $b = [3, 4, 1]$ are complementary, since $a_i + b_i = 5$ over all $1 \\le i \\le 3$. However, the arrays $a = [1, 3]$ and $b = [2, 1]$ are not complementary.\n\nCow the Nerd thinks everybody is interested in math, so he gave Cherry Bomb two integer arrays $a$ and $b$. It is known that $a$ and $b$ both contain $n$ non-negative integers not greater than $k$.\n\nUnfortunately, Cherry Bomb has lost some elements in $b$. Lost elements in $b$ are denoted with $-1$. Help Cherry Bomb count the number of possible arrays $b$ such that:\n\n- $a$ and $b$ are complementary.\n- All lost elements are replaced with non-negative integers no more than $k$.\n\n### Input\n\nThe first line of the input contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\le n \\le 2 \\cdot 10^5$, $0 \\le k \\le 10^9$) — the size of the arrays and the maximum possible value of their elements.\n\nThe second line contains $n$ integers $a_1, a_2, ..., a_n$ ($0 \\le a_i \\le k$).\n\nThe third line contains $n$ integers $b_1, b_2, ..., b_n$ ($-1 \\le b_i \\le k$). If $b_i = -1$, then this element is missing.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nOutput exactly one integer, the number of ways Cherry Bomb can fill in the missing elements from $b$ such that $a$ and $b$ are complementary.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n3 10\n\n1 3 2\n\n-1 -1 1\n\n5 1\n\n0 1 0 0 1\n\n-1 0 1 0 -1\n\n5 1\n\n0 1 0 0 1\n\n-1 1 -1 1 -1\n\n5 10\n\n1 3 2 5 4\n\n-1 -1 -1 -1 -1\n\n5 4\n\n1 3 2 1 3\n\n1 -1 -1 1 -1\n\n5 4\n\n1 3 2 1 3\n\n2 -1 -1 2 0\n\n5 5\n\n5 0 5 4 3\n\n5 -1 -1 -1 -1\n\n```\n\n#### Output #1\n\n```\n1\n0\n0\n7\n0\n1\n0\n```\n\n### Note\n\nIn the first example, the only way to fill in the missing elements in $b$ such that $a$ and $b$ are complementary is if $b = [2, 0, 1]$.\n\nIn the second example, there is no way to fill in the missing elements of $b$ such that $a$ and $b$ are complementary.\n\nIn the fourth example, some $b$ arrays that are complementary to $a$ are: $[4, 2, 3, 0, 1], [7, 5, 6, 3, 4],$ and $[9, 7, 8, 5, 6]$.", "cfid": "2106C"}
{"problem_id": "2103A", "problem_title": "A. Common Multiple", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2103/A", "problem_statement": "You are given an array of integers $a_1, a_2, \\ldots, a_n$. An array $x_1, x_2, \\ldots, x_m$ is beautiful if there exists an array $y_1, y_2, \\ldots, y_m$ such that the elements of $y$ are distinct (in other words, $y_i\\neq y_j$ for all $1 \\le i < j \\le m$), and the product of $x_i$ and $y_i$ is the same for all $1 \\le i \\le m$ (in other words, $x_i\\cdot y_i = x_j\\cdot y_j$ for all $1 \\le i < j \\le m$).\n\nYour task is to determine the maximum size of a subsequence$^{\\text{∗}}$ of array $a$ that is beautiful.\n\n$^{\\text{∗}}$A sequence $b$ is a subsequence of a sequence $a$ if $b$ can be obtained from $a$ by the deletion of several (possibly, zero or all) element from arbitrary positions.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 500$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 100$) — the length of the array $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le n$) — the elements of array $a$.\n\nNote that there are no constraints on the sum of $n$ over all test cases.\n\n### Output\n\nFor each test case, output the maximum size of a subsequence of array $a$ that is beautiful.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3\n\n1 2 3\n\n5\n\n3 1 4 1 5\n\n1\n\n1\n\n```\n\n#### Output #1\n\n```\n3\n4\n1\n```\n\n### Note\n\nIn the first test case, the entire array $a = [1, 2, 3]$ is already beautiful. A possible array $y$ is $[6, 3, 2]$, which is valid since the elements of $y$ are distinct, and $1\\cdot 6 = 2\\cdot 3 = 3\\cdot 2$.\n\nIn the second test case, the subsequence $[3, 1, 4, 5]$ is beautiful. A possible array $y$ is $[20, 60, 15, 12]$. It can be proven that the entire array $a = [3, 1, 4, 1, 5]$ is not beautiful, so the maximum size of a subsequence of array $a$ that is beautiful is $4$.", "cfid": "2103A"}
{"problem_id": "2103C", "problem_title": "C. Median Splits", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2103/C", "problem_statement": "The median of an array $b_1, b_2, \\ldots b_m$, written as $\\operatorname{med}(b_1, b_2, \\ldots, b_m)$, is the $\\left\\lceil \\frac{m}{2} \\right\\rceil$-th$^{\\text{∗}}$ smallest element of array $b$.\n\nYou are given an array of integers $a_1, a_2, \\ldots, a_n$ and an integer $k$. You need to determine whether there exists a pair of indices $1 \\le l < r < n$ such that:\n\n\n\n$$\\operatorname{med}(\\operatorname{med}(a_1, a_2, \\ldots, a_l), \\operatorname{med}(a_{l+1}, a_{l+2}, \\ldots, a_r), \\operatorname{med}(a_{r+1}, a_{r+2}, \\ldots, a_n)) \\le k.$$\n\nIn other words, determine whether it is possible to split the array into three contiguous subarrays$^{\\text{†}}$ such that the median of the three subarray medians is less than or equal to $k$.\n\n$^{\\\\text{∗}}$$\\\\lceil x \\\\rceil$ is the ceiling function which returns the least integer greater than or equal to $x$.\n\n$^{\\text{†}}$An array $x$ is a subarray of an array $y$ if $x$ can be obtained from $y$ by the deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $k$ ($3 \\le n \\le 2 \\cdot 10^5$, $1 \\le k \\le 10^9$) — the length of the array $a$ and the constant $k$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$) — the elements of the array $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each testcase, output \"YES\" if such a split exists, and \"NO\" otherwise.\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n3 2\n\n3 2 1\n\n3 1\n\n3 2 1\n\n6 3\n\n8 5 3 1 6 4\n\n8 7\n\n10 7 12 16 3 15 6 11\n\n6 8\n\n7 11 12 4 9 17\n\n3 500000000\n\n1000 1000000000 1000\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nNO\nYES\nYES\nYES\n```\n\n### Note\n\nIn the first and second test case, the only possible partition of the array into three contiguous subarrays is $[3]$, $[2]$, $[1]$. Their respective medians are $3$, $2$, and $1$. The median of the three subarray medians is $\\operatorname{med}(3, 2, 1) = 2$. Therefore, the answer for the first test case is \"YES\" since $2\\le 2$, while the answer for the second test case is \"NO\" since $2 > 1$.\n\nIn the third test case, it can be proven that no partition satisfies the constraints.\n\nIn the fourth test case, one of the partitions satisfying the constraints is $[10, 7]$, $[12, 16, 3, 15]$, $[6, 11]$. The respective medians of subarrays are $7$, $12$, and $6$. The median of the three subarray medians is $\\operatorname{med}(7, 12, 6) = 7 \\le k$, hence this partition satisfies the constraints.\n\nIn the fifth test case, one of the partitions satisfying the constraints is $[7, 11]$, $[12, 4]$, $[9, 17]$. The respective medians of the subarrays are $7$, $4$, and $9$. The median of the three subarray medians is $\\operatorname{med}(7, 4, 9) = 7 \\le k$, hence this partition satisfies the constraints.\n\nIn the sixth test case, the only possible partition of the array into three contiguous subarrays is $[1000]$, $[10^9]$, $[1000]$. The respective medians of the subarrays are $1000$, $10^9$, and $1000$. The median of the three subarray medians is $\\operatorname{med}(1000, 10^9, 1000) = 1000 \\le k$, hence this partition satisfies the constraints.", "cfid": "2103C"}
{"problem_id": "2103B", "problem_title": "B. Binary Typewriter", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2103/B", "problem_statement": "You are given a binary string $s$ of length $n$ and a typewriter with two buttons: 0 and 1. Initially, your finger is on the button 0. You can do the following two operations:\n\n1. Press the button your finger is currently on. This will type out the character that is on the button.\n2. Move your finger to the other button. If your finger is on button 0, move it to button 1, and vice versa.\n\nThe cost of a binary string is defined as the minimum number of operations needed to type the entire string.\n\nBefore typing, you may reverse at most one substring$^{\\text{∗}}$ of $s$. More formally, you can choose two indices $1\\le l\\le r\\le n$, and reverse the substring $s_{l\\ldots r}$, resulting in the new string $s_1s_2\\ldots s_{l-1}s_rs_{r-1}\\ldots s_ls_{r+1}\\ldots s_n$.\n\nYour task is to find the minimum possible cost among all strings obtainable by performing at most one substring reversal on $s$.\n\n$^{\\text{∗}}$A string $a$ is a substring of a string $b$ if $a$ can be obtained from $b$ by the deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1\\le n\\le 2\\cdot 10^5$) — the length of the binary string $s$.\n\nThe second line of each test case contains a binary string $s_1s_2\\ldots s_n$ ($s_i = \\mathtt{0}$ or $s_i = \\mathtt{1}$) — the characters of the binary string $s$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the minimum cost of string $s$ after performing at most one substring reversal.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n3\n\n000\n\n3\n\n111\n\n3\n\n011\n\n3\n\n100\n\n5\n\n10101\n\n19\n\n1101010010011011100\n\n```\n\n#### Output #1\n\n```\n3\n4\n4\n4\n8\n29\n```\n\n### Note\n\nIn the first test case, we can choose not to reverse any substrings. We can do operation $1$ three times to type 000.\n\nIn the second test case, we can choose not to reverse any substrings. We can do operation $2$ to move our finger to button 1. Then, we do operation $1$ three times to type 111.\n\nIn the third test case, we can choose not to reverse any substring. We can do operation $1$ to type 0. Then, we do operation $2$ to move our finger to button 1. Finally, we do operation $1$ two times to type 11, resulting in the final string 011 using only $4$ operations.\n\nIn the fourth test case, we can reverse the substring $s_{1\\ldots 3}$, resulting in the string 001. We can do operation $1$ two times to type 00. Then we do operation $2$ to move our finger to button 1. Finally, we do operation $1$ once to type 1, resulting in the final string 001 using only $4$ operations.\n\nIn the fifth test case, we can reverse the substring $s_{2\\ldots 3}$, resulting in the string 11001. The cost of the string is $8$ as we can do the following sequence of operations:\n\n- Do operation $2$ to move our finger to button 1.\n- Do operation $1$ two times to type 11.\n- Do operation $2$ to move our finger to button 0.\n- Do operation $1$ two times to type 00.\n- Do operation $2$ to move our finger to button 1.\n- Do operation $1$ once to type 1.\n\nIn the sixth test case, we can reverse the substring $s_{5\\ldots 17}$, resulting in the string 1101111011001001000. It can be proven that the minimum number of operations needed to type the binary string is $29$.", "cfid": "2103B"}
{"problem_id": "2096B", "problem_title": "B. Wonderful Gloves", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2096/B", "problem_statement": "You are the proud owner of many colorful gloves, and you keep them in a drawer. Each glove is in one of $n$ colors numbered $1$ to $n$. Specifically, for each $i$ from $1$ to $n$, you have $l_i$ left gloves and $r_i$ right gloves with color $i$.\n\nUnfortunately, it's late at night, so you can't see any of your gloves. In other words, you will only know the color and the type (left or right) of a glove after you take it out of the drawer.\n\nA matching pair of gloves with color $i$ consists of exactly one left glove and one right glove with color $i$. Find the minimum number of gloves you need to take out of the drawer to guarantee that you have at least $k$ matching pairs of gloves with different colors.\n\nFormally, find the smallest positive integer $x$ such that:\n\n- For any set of $x$ gloves you take out of the drawer, there will always be at least $k$ matching pairs of gloves with different colors.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$, $k$ ($1 \\leq k \\leq n \\leq 2 \\cdot 10^5$) — the number of different colors, and the minimum number of required matching pairs of gloves.\n\nThe second line of each test case contains $n$ integers $l_1, l_2, \\ldots, l_n$ ($1 \\leq l_i \\leq 10^9$) — the number of left gloves with color $i$ for each $i$ from $1$ to $n$.\n\nThe third line of each test case contains $n$ integers $r_1, r_2, \\ldots, r_n$ ($1 \\leq r_i \\leq 10^9$) — the number of right gloves with color $i$ for each $i$ from $1$ to $n$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the minimum number of gloves you need to take out of the drawer.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3 3\n\n1 1 1\n\n1 1 1\n\n1 1\n\n100\n\n1\n\n3 2\n\n100 1 1\n\n200 1 1\n\n5 2\n\n97 59 50 87 36\n\n95 77 33 13 74\n\n10 6\n\n97 59 50 87 36 95 77 33 13 74\n\n91 14 84 33 54 89 68 34 14 15\n\n```\n\n#### Output #1\n\n```\n6\n101\n303\n481\n1010\n```\n\n### Note\n\nIn the first test case, you must take out all of the gloves, so the answer is $6$.\n\nIn the second test case, the answer is $101$. If you take out $100$ gloves or fewer, then it is possible that all of them are left gloves, which means you won't have a matching pair of gloves.\n\nIn the third test case, the answer is $303$. If you only take out $302$ gloves, then one possible scenario is as follows:\n\n- Color $1$: $100$ left gloves, $200$ right gloves\n- Color $2$: $1$ left glove, $0$ right gloves\n- Color $3$: $0$ left gloves, $1$ right glove\n\nYou only have multiple matching pairs of gloves with color $1$. So you won't have at least $2$ matching pairs of gloves with different colors.", "cfid": "2096B"}
{"problem_id": "2096C", "problem_title": "C. Wonderful City", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2096/C", "problem_statement": "You are the proud leader of a city in Ancient Berland. There are $n^2$ buildings arranged in a grid of $n$ rows and $n$ columns. The height of the building in row $i$ and column $j$ is $h_{i, j}$.\n\nThe city is beautiful if no two adjacent by side buildings have the same height. In other words, it must satisfy the following:\n\n- There does not exist a position $(i, j)$ ($1 \\leq i \\leq n$, $1 \\leq j \\leq n - 1$) such that $h_{i, j} = h_{i, j + 1}$.\n- There does not exist a position $(i, j)$ ($1 \\leq i \\leq n - 1$, $1 \\leq j \\leq n$) such that $h_{i, j} = h_{i + 1, j}$.\n\nThere are $n$ workers at company A, and $n$ workers at company B. Each worker can be hired at most once.\n\nIt costs $a_i$ coins to hire worker $i$ at company A. After hiring, worker $i$ will:\n\n- Increase the heights of all buildings in row $i$ by $1$. In other words, increase $h_{i, 1}, h_{i, 2}, \\ldots, h_{i, n}$ by $1$.\n\nIt costs $b_j$ coins to hire worker $j$ at company B. After hiring, worker $j$ will:\n\n- Increase the heights of all buildings in column $j$ by $1$. In other words, increase $h_{1, j}, h_{2, j}, \\ldots, h_{n, j}$ by $1$.\n\nFind the minimum number of coins needed to make the city beautiful, or report that it is impossible.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 100$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n \\le 1000$) — the size of the grid.\n\nThe $i$-th of the next $n$ lines of each test case contains $n$ integers $h_{i, 1}, h_{i, 2}, \\ldots, h_{i, n}$ ($1 \\le h_{i, j} \\le 10^9$) — the heights of the buildings in row $i$.\n\nThe next line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$) — the costs of hiring the workers at company A.\n\nThe next line of each test case contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($1 \\le b_j \\le 10^9$) — the costs of hiring the workers at company B.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $1000$.\n\n### Output\n\nFor each test case, output a single integer — the minimum number of coins needed, or $-1$ if it is impossible.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2\n\n1 2\n\n2 1\n\n100 100\n\n100 100\n\n4\n\n1 2 1 2\n\n3 2 1 2\n\n1 2 1 1\n\n1 3 1 2\n\n1 2 3 4\n\n5 6 7 8\n\n3\n\n1 2 2\n\n2 2 1\n\n2 1 1\n\n100 100 100\n\n100 100 100\n\n6\n\n8 7 2 8 4 8\n\n7 7 9 7 1 1\n\n8 3 1 1 8 5\n\n6 8 3 1 1 4\n\n1 4 5 1 9 6\n\n7 1 1 6 8 2\n\n11 23 20 79 30 15\n\n15 83 73 57 34 63\n\n```\n\n#### Output #1\n\n```\n0\n14\n-1\n183\n```\n\n### Note\n\nFor the first test case, we can see that the city is already beautiful. Thus, the answer is $0$.\n\nFor the second test case, we can hire worker $2$ from company A, worker $4$ from company A, and worker $4$ from company B:\n\n$1\n\n$$2$$\n\n1\n\n$$\\color{red}2$$\n\nimplies\n\n$$1$$\n\n2\n\n$$1$$\n\ncolor{red}3\n\n$$\\color{red}3$$\n\ncolor{red}2\n\n$$\\color{red}1$$\n\ncolor{red}2\n\n$$\\color{red}4$$\n\ncolor{red}3\n\n$$\\color{red}2$$\n\ncolor{red}4\n\n$$1$$\n\n2\n\n$$1$$\n\ncolor{red}1\n\n$$1$$\n\n2\n\n$$1$$\n\ncolor{red}2\n\n$$\\color{red}1$$\n\ncolor{red}3\n\n$$\\color{red}1$$\n\ncolor{red}2\n\n$$\\color{red}2$$\n\ncolor{red}4\n\n$$\\color{red}2$$\n\ncolor{red}4$\n\nThe cost of hiring the workers is $2 + 4 + 8 = 14$. This is the minimum possible cost.\n\nFor the third test case, no matter what we do, it is impossible to make the city beautiful. Thus, the answer is $-1$.", "cfid": "2096C"}
{"problem_id": "2096A", "problem_title": "A. Wonderful Sticks", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2096/A", "problem_statement": "You are the proud owner of $n$ sticks. Each stick has an integer length from $1$ to $n$. The lengths of the sticks are distinct.\n\nYou want to arrange the sticks in a row. There is a string $s$ of length $n - 1$ that describes the requirements of the arrangement.\n\nSpecifically, for each $i$ from $1$ to $n - 1$:\n\n- If $s_i = \\texttt{<}$, then the length of the stick at position $i + 1$ must be smaller than all sticks before it;\n- If $s_i = \\texttt{>}$, then the length of the stick at position $i + 1$ must be larger than all sticks before it.\n\nFind any valid arrangement of sticks. We can show that an answer always exists.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 500$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n \\le 100$) — the number of sticks.\n\nThe second line of each test case contains a single string $s$ of length $n - 1$ consisting of characters $\\texttt{<}$ and $\\texttt{>}$ — describing the requirements of the arrangement.\n\n### Output\n\nFor each test case, output $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq n$, the $a_i$ are distinct) — the lengths of the sticks in order. If there are multiple solutions, print any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n2\n\n<\n\n5\n\n<<><\n\n2\n\n>\n\n3\n\n<>\n\n7\n\n><>>><\n\n```\n\n#### Output #1\n\n```\n2 1\n4 3 2 5 1\n1 2\n2 1 3\n3 4 2 5 6 7 1\n```\n\n### Note\n\nFor the first test case, the requirements of the arrangement are as follows:\n\n- $s_1 = \\texttt{<}$, which means $a_2$ is smaller than $a_1$.\n\nThus, one possible arrangement is $[2, 1]$.\n\nFor the second test case, the requirements of the arrangement are as follows:\n\n- $s_1 = \\texttt{<}$, which means $a_2$ is smaller than $a_1$;\n- $s_2 = \\texttt{<}$, which means $a_3$ is smaller than $a_1$ and $a_2$;\n- $s_3 = \\texttt{>}$, which means $a_4$ is larger than $a_1$, $a_2$, and $a_3$;\n- $s_4 = \\texttt{<}$, which means $a_5$ is smaller than $a_1$, $a_2$, $a_3$, and $a_4$.\n\nThus, one possible arrangement is $[4, 3, 2, 5, 1]$.", "cfid": "2096A"}
{"problem_id": "2094B", "problem_title": "B. Bobritto Bandito", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2094/B", "problem_statement": "In Bobritto Bandito's home town of residence, there are an infinite number of houses on an infinite number line, with houses at $\\ldots, -2, -1, 0, 1, 2, \\ldots$. On day $0$, he started a plague by giving an infection to the unfortunate residents of house $0$. Each succeeding day, the plague spreads to exactly one healthy household that is next to an infected household. It can be shown that each day the infected houses form a continuous segment.\n\nLet the segment starting at the $l$-th house and ending at the $r$-th house be denoted as $[l, r]$. You know that after $n$ days, the segment $[l, r]$ became infected. Find any such segment $[l', r']$ that could have been infected on the $m$-th day ($m \\le n$).\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 100$) – the number of independent test cases.\n\nThe only line of each test case contains four integers $n$, $m$, $l$, and $r$ ($1 \\leq m\\leq n \\leq 2000, -n \\leq l \\leq 0 \\leq r \\leq n, r-l=n$).\n\n### Output\n\nFor each test case, output two integers $l'$ and $r'$ on a new line. If there are multiple solutions, output any.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n4 2 -2 2\n\n4 1 0 4\n\n3 3 -1 2\n\n9 8 -6 3\n\n```\n\n#### Output #1\n\n```\n-1 1\n0 1\n-1 2\n-5 3\n```\n\n### Note\n\nIn the first test case, it is possible that on the $1$-st, $2$-nd, and $3$-rd days the interval of houses affected is $[-1,0]$, $[-1,1]$, $[-2,1]$. Therefore, $[-1,1]$ is a valid output.", "cfid": "2094B"}
{"problem_id": "2094D", "problem_title": "D. Tung Tung Sahur", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2094/D", "problem_statement": "You have two drums in front of you: a left drum and a right drum. A hit on the left can be recorded as \"L\", and a hit on the right as \"R\".\n\nThe strange forces that rule this world are fickle: sometimes, a blow sounds once, and sometimes it sounds twice. Therefore, a hit on the left drum could have sounded as either \"L\" or \"LL\", and a hit on the right drum could have sounded as either \"R\" or \"RR\".\n\nThe sequence of hits made is recorded in the string $p$, and the sounds heard are in the string $s$. Given $p$ and $s$, determine whether it is true that the string $s$ could have been the result of the hits from the string $p$.\n\nFor example, if $p=$\"LR\", then the result of the hits could be any of the strings \"LR\", \"LRR\", \"LLR\", and \"LLRR\", but the strings \"LLLR\" or \"LRL\" cannot.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) – the number of independent test cases.\n\nThe first line of each test case contains the string $p$ ($1 \\le |p| \\le 2 \\cdot 10^5$) consisting only of the characters \"R\" and \"L\", where $|p|$ denotes the length of the string $p$.\n\nThe second line of each test case contains the string $s$ ($1 \\le |p| \\le |s| \\le 2 \\cdot 10^5$) consisting only of the characters \"R\" and \"L\".\n\nIt is guaranteed that the sum of $|s|$ does not exceed $2\\cdot 10^5$ across all test cases.\n\n### Output\n\nFor each set of input data, output \"YES\" if $s$ can be the heard sound, and \"NO\" otherwise. You may output in any case.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\nR\n\nRR\n\nLRLR\n\nLRLR\n\nLR\n\nLLLR\n\nLLLLLRL\n\nLLLLRRLL\n\nLLRLRLRRL\n\nLLLRLRRLLRRRL\n\n```\n\n#### Output #1\n\n```\nYES\nYES\nNO\nNO\nYES\n```", "cfid": "2094D"}
{"problem_id": "2094A", "problem_title": "A. Trippi Troppi", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2094/A", "problem_statement": "Trippi Troppi resides in a strange world. The ancient name of each country consists of three strings. The first letter of each string is concatenated to form the country's modern name.\n\nGiven the country's ancient name, please output the modern name.\n\n### Input\n\nThe first line contains an integer $t$ – the number of independent test cases ($1 \\leq t \\leq 100$).\n\nThe following $t$ lines each contain three space-separated strings. Each string has a length of no more than $10$, and contains only lowercase Latin characters.\n\n### Output\n\nFor each test case, output the string formed by concatenating the first letter of each word.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\nunited states america\n\noh my god\n\ni cant lie\n\nbinary indexed tree\n\nbelieve in yourself\n\nskibidi slay sigma\n\ngod bless america\n\n```\n\n#### Output #1\n\n```\nusa\nomg\nicl\nbit\nbiy\nsss\ngba\n```", "cfid": "2094A"}
{"problem_id": "2094G", "problem_title": "G. Chimpanzini Bananini", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2094/G", "problem_statement": "Chimpanzini Bananini stands on the brink of a momentous battle—one destined to bring finality.\n\nFor an arbitrary array $b$ of length $m$, let's denote the rizziness of the array to be $\\sum_{i=1}^mb_i\\cdot i=b_1\\cdot 1+b_2\\cdot 2+b_3\\cdot 3+\\ldots + b_m\\cdot m$.\n\nChimpanzini Bananini gifts you an empty array. There are three types of operations you can perform on it.\n\n1. Perform a cyclic shift on the array. That is, the array $[a_1, a_2, \\ldots, a_n]$ becomes $[a_n, a_1, a_2, \\ldots, a_{n-1}].$\n2. Reverse the entire array. That is, the array $[a_1, a_2, \\ldots, a_n]$ becomes $[a_n, a_{n-1}, \\ldots, a_1].$\n3. Append an element to the end of the array. The array $[a_1, a_2, \\ldots, a_n]$ becomes $[a_1, a_2, \\ldots, a_n, k]$ after appending $k$ to the end of the array.\n\nAfter each operation, you are interested in calculating the rizziness of your array.\n\nNote that all operations are persistent. This means that each operation modifies the array, and subsequent operations should be applied to the current state of the array after the previous operations.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe first line of the input contains an integer $q$ ($1 \\leq q \\leq 2\\cdot 10^5$) — the number of operations you perform on your array.\n\nThe following $q$ lines first contain a single integer $s$ ($1 \\leq s \\leq 3$) — the operation type.\n\n- If $s=1$, then the cyclic shift operation should be performed.\n- If $s=2$, then the reversal operation should be performed.\n- If $s=3$, then the line will contain an additional integer $k$ ($1 \\leq k \\leq 10^6$), denoting the element appended to the back of the array.\n\nIt is guaranteed that the sum of $q$ will not exceed $2\\cdot 10^5$ over all test cases. Additionally, it is guaranteed that the first operation on each test case will be one with $s=3$.\n\n### Output\n\nFor each test case, output $q$ lines, outputting the rizziness of your array after each operation.\n\n### Example\n\n#### Input #1\n\n```\n\n1\n\n13\n\n3 1\n\n3 2\n\n3 3\n\n1\n\n3 4\n\n2\n\n3 5\n\n1\n\n3 6\n\n2\n\n3 7\n\n2\n\n1\n\n```\n\n#### Output #1\n\n```\n1\n5\n14\n11\n27\n23\n48\n38\n74\n73\n122\n102\n88\n```\n\n### Note\n\nThe first six states of the array:\n\n- $[1]$\n- $[1, 2]$\n- $[1, 2, 3]$\n- $[3, 1, 2]$\n- $[3, 1, 2, 4]$\n- $[4, 2, 1, 3]$", "cfid": "2094G"}
{"problem_id": "2094E", "problem_title": "E. Boneca Ambalabu", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2094/E", "problem_statement": "Boneca Ambalabu gives you a sequence of $n$ integers $a_1,a_2,\\ldots,a_n$.\n\nOutput the maximum value of $(a_k\\oplus a_1)+(a_k\\oplus a_2)+\\ldots+(a_k\\oplus a_n)$ among all $1 \\leq k \\leq n$. Note that $\\oplus$ denotes the [bitwise XOR operation](https://en.wikipedia.org/wiki/Bitwise_operation#XOR).\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) – the number of independent test cases.\n\nThe first line of each test case contains an integer $n$ ($1 \\leq n\\leq 2\\cdot 10^5$) – the length of the array.\n\nThe second line of each test case contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($0 \\leq a_i < 2^{30}$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, output the maximum value on a new line.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3\n\n18 18 18\n\n5\n\n1 2 4 8 16\n\n5\n\n8 13 4 5 15\n\n6\n\n625 676 729 784 841 900\n\n1\n\n1\n\n```\n\n#### Output #1\n\n```\n0\n79\n37\n1555\n0\n```\n\n### Note\n\nIn the first test case, the best we can do is $(18\\oplus18)+(18\\oplus18)+(18\\oplus18)=0$.\n\nIn the second test case, we choose $k=5$ to get $(16\\oplus1)+(16\\oplus2)+(16\\oplus4)+(16\\oplus8)+(16\\oplus16)=79$.", "cfid": "2094E"}
{"problem_id": "2094F", "problem_title": "F. Trulimero Trulicina", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2094/F", "problem_statement": "Trulicina gives you integers $n$, $m$, and $k$. It is guaranteed that $k\\geq 2$ and $n\\cdot m\\equiv 0 \\pmod{k}$.\n\nOutput a $n$ by $m$ grid of integers such that each of the following criteria hold:\n\n- Each integer in the grid is between $1$ and $k$, inclusive.\n- Each integer from $1$ to $k$ appears an equal number of times.\n- No two cells that share an edge have the same integer.\n\nIt can be shown that such a grid always exists. If there are multiple solutions, output any.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe first line of each test case contains three integers $n$, $m$, and $k$ ($2 \\leq n\\cdot m\\leq 2\\cdot 10^5, 2\\leq k\\leq n\\cdot m, n\\cdot m\\equiv 0 \\pmod{k})$.\n\nIt is guaranteed that the sum of $n\\cdot m$ over all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, output $n$ lines, each containing $m$ integers that satisfy the criteria. If there are multiple solutions, output any.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2 2 2\n\n3 4 6\n\n5 5 25\n\n```\n\n#### Output #1\n\n```\n1 2\n2 1\n1 6 1 6\n2 5 2 5\n3 4 3 4\n17 2 12 25 14\n3 1 6 19 11\n8 20 23 24 4\n9 10 5 13 21\n22 7 15 18 16\n```", "cfid": "2094F"}
{"problem_id": "2094C", "problem_title": "C. Brr Brrr Patapim", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2094/C", "problem_statement": "Brr Brrr Patapim is trying to learn of Tiramisù's secret passcode, which is a permutation$^{\\text{∗}}$ of $2\\cdot n$ elements. To help Patapim guess, Tiramisù gave him an $n\\times n$ grid $G$, in which $G_{i,j}$ (or the element in the $i$-th row and $j$-th column of the grid) contains $p_{i+j}$, or the $(i+j)$-th element in the permutation.\n\nGiven this grid, please help Patapim crack the forgotten code. It is guaranteed that the permutation exists, and it can be shown that the permutation can be determined uniquely.\n\n$^{\\text{∗}}$A permutation of $m$ integers is a sequence of $m$ integers which contains each of $1,2,\\ldots,m$ exactly once. For example, $[1, 3, 2]$ and $[2, 1]$ are permutations, while $[1, 2, 4]$ and $[1, 3, 2, 3]$ are not.\n\n### Input\n\nThe first line contains an integer $t$ — the number of test cases ($1 \\leq t \\leq 200$).\n\nThe first line of each test case contains an integer $n$ ($1 \\leq n \\leq 800$).\n\nEach of the following $n$ lines contains $n$ integers, giving the grid $G$. The first of these lines contains $G_{1,1}, G_{1,2},\\ldots,G_{1,n}$; the second of these lines contains $G_{2,1}, G_{2,2},\\ldots,G_{2,n}$, and so on. ($1 \\leq G_{i,j} \\leq 2\\cdot n$).\n\nIt is guaranteed that the grid encodes a valid permutation, and the sum of $n$ over all test cases does not exceed $800$.\n\n### Output\n\nFor each test case, please output $2n$ numbers on a new line: $p_1,p_2,\\ldots,p_{2n}$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3\n\n1 6 2\n\n6 2 4\n\n2 4 3\n\n1\n\n1\n\n2\n\n2 3\n\n3 4\n\n```\n\n#### Output #1\n\n```\n5 1 6 2 4 3\n2 1\n1 2 3 4\n```", "cfid": "2094C"}
{"problem_id": "2093A", "problem_title": "A. Ideal Generator", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2093/A", "problem_statement": "We call an array $a$, consisting of $k$ positive integers, palindromic if $[a_1, a_2, \\dots, a_k] = [a_k, a_{k-1}, \\dots, a_1]$. For example, the arrays $[1, 2, 1]$ and $[5, 1, 1, 5]$ are palindromic, while the arrays $[1, 2, 3]$ and $[21, 12]$ are not.\n\nWe call a number $k$ an ideal generator if any integer $n$ ($n \\ge k$) can be represented as the sum of the elements of a palindromic array of length exactly $k$. Each element of the array must be greater than $0$.\n\nFor example, the number $1$ is an ideal generator because any natural number $n$ can be generated using the array $[n]$. However, the number $2$ is not an ideal generator — there is no palindromic array of length $2$ that sums to $3$.\n\nDetermine whether the given number $k$ is an ideal generator.\n\n### Input\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 1000$) — the number of test cases.\n\nThe first and only line of each test case contains one integer $k$ ($1 \\le k \\le 1000$).\n\n### Output\n\nFor each number $k$, you need to output the word \"YES\" if it is an ideal generator, or \"NO\" otherwise.\n\nYou may output \"Yes\" and \"No\" in any case (for example, the strings \"yES\", \"yes\", and \"Yes\" will be recognized as a positive answer).\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n1\n\n2\n\n3\n\n73\n\n1000\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nYES\nYES\nNO\n```", "cfid": "2093A"}
{"problem_id": "2093F", "problem_title": "F. Hackers and Neural Networks", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2093/F", "problem_statement": "Hackers are once again trying to create entertaining phrases using the output of neural networks. This time, they want to obtain an array of strings $a$ of length $n$.\n\nInitially, they have an array $c$ of length $n$, filled with blanks, which are denoted by the symbol $*$. Thus, if $n=4$, then initially $c=[*,*,*,*]$.\n\nThe hackers have access to $m$ neural networks, each of which has its own version of the answer to their request – an array of strings $b_i$ of length $n$.\n\nThe hackers are trying to obtain the array $a$ from the array $c$ using the following operations:\n\n1. Choose a neural network $i$, which will perform the next operation on the array $c$: it will select a randomblank, for example, at position $j$, and replace $c_j$ with $b_{i, j}$.\nFor example, if the first neural network is chosen and $c = [*, \\text{«like»}, *]$, and $b_1 = [\\text{«I»}, \\text{«love»}, \\text{«apples»}]$, then after the operation with the first neural network, $c$ may become either $[\\text{«I»}, \\text{«like»}, *]$ or $[*, \\text{«like»}, \\text{«apples»}]$.\n\n2. Choose position $j$ and replace $c_j$ with a blank.\n\nUnfortunately, because of the way hackers access neural networks, they will only be able to see the modified array $c$ after all operations are completed, so they will have to specify the entire sequence of operations in advance.\n\nHowever, the random behavior of the neural networks may lead to the situation where the desired array is never obtained, or obtaining it requires an excessive number of operations.\n\nTherefore, the hackers are counting on your help in choosing a sequence of operations that will guarantee the acquisition of array $a$ in the minimum number of operations.\n\nMore formally, if there exists a sequence of operations that can guarantee obtaining array $a$ from array $c$, then among all such sequences, find the one with the minimum number of operations, and output the number of operations in it.\n\nIf there is no sequence of operations that transforms array $c$ into array $a$, then output $-1$.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 1000$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\le n, m \\le 500$) — the length of the original array $a$ and the number of neural networks, respectively.\n\nThe second line of each test case contains the array $a$, consisting of $n$ strings $a_i$ ($1 \\le |a_i| \\le 10$), separated by spaces.\n\nThe next $m$ lines of each test case contain the arrays $b_i$ — one in each line, consisting of $n$ strings $b_{i, j}$ ($1 \\le |b_{i,j}| \\le 10$), separated by spaces.\n\nIt is guaranteed that the sum of $|a_i|$ and $|b_{i, j}|$ across all test cases does not exceed $2 \\cdot 10^5$, and that the sum of $n \\cdot m$ across all test cases also does not exceed $2 \\cdot 10^5$.\n\nIt is guaranteed that the input strings consist only of characters from the Latin alphabet in both lowercase and uppercase.\n\nNote that the length of each individual input string does not exceed $10$.\n\n### Output\n\nOutput $t$ numbers — one number for each test case, each on a separate line.\n\nIf there exists a sequence of operations that guarantees obtaining array $a$ from the $i$-th test case, then the $i$-th number is the number of operations in the minimum such sequence.\n\nOtherwise, for the $i$-th number, output $-1$.\n\n### Example\n\n#### Input #1\n\n```\n4\n3 3\nI love apples\nHe likes apples\nI love cats\nThey love dogs\n3 2\nIcy wake up\nwake Icy up\nwake up Icy\n4 3\nc o D E\nc o D s\nc O l S\nc o m E\n4 5\na s k A\nd s D t\nO R i A\na X b Y\nb a k A\nu s k J\n```\n\n#### Output #1\n\n```\n5\n-1\n6\n8\n```", "cfid": "2093F"}
{"problem_id": "2093B", "problem_title": "B. Expensive Number", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2093/B", "problem_statement": "The cost of a positive integer $n$ is defined as the result of dividing the number $n$ by the sum of its digits.\n\nFor example, the cost of the number $104$ is $\\frac{104}{1 + 0 + 4} = 20.8$, and the cost of the number $111$ is $\\frac{111}{1 + 1 + 1} = 37$.\n\nYou are given a positive integer $n$ that does not contain leading zeros. You can remove any number of digits from the number $n$ (including none) so that the remaining number contains at least one digit and is strictly greater than zero. The remaining digits cannot be rearranged. As a result, you may end up with a number that has leading zeros.\n\nFor example, you are given the number $103554$. If you decide to remove the digits $1$, $4$, and one digit $5$, you will end up with the number $035$, whose cost is $\\frac{035}{0 + 3 + 5} = 4.375$.\n\nWhat is the minimum number of digits you need to remove from the number so that its cost becomes the minimum possible?\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 1000$) — the number of test cases.\n\nThe only line of each test case contains a positive integer $n$ ($1 \\leq n < 10^{100}$) without leading zeros.\n\n### Output\n\nFor each test case, output one integer on a new line — the number of digits that need to be removed from the number so that its cost becomes minimal.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n666\n\n13700\n\n102030\n\n7\n\n```\n\n#### Output #1\n\n```\n2\n4\n3\n0\n```", "cfid": "2093B"}
{"problem_id": "2093C", "problem_title": "C. Simple Repetition", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2093/C", "problem_statement": "Pasha loves prime numbers$^{\\text{∗}}$! Once again, in his attempts to find a new way to generate prime numbers, he became interested in an algorithm he found on the internet:\n\n- To obtain a new number $y$, repeat $k$ times the decimal representation of the number $x$ (without leading zeros).\n\nFor example, for $x = 52$ and $k = 3$, we get $y = 525252$, and for $x = 6$ and $k = 7$, we get $y = 6666666$.\n\nPasha really wants the resulting number $y$ to be prime, but he doesn't yet know how to check the primality of numbers generated by this algorithm. Help Pasha and tell him whether $y$ is prime!\n\n$^{\\text{∗}}$An integer $x$ is considered prime if it has exactly $2$ distinct divisors: $1$ and $x$. For example, $13$ is prime because it has only $2$ divisors: $1$ and $13$. Note that the number $1$ is not prime, as it has only one divisor.\n\n### Input\n\nEach test consists of several sets of input data. The first line contains a single integer $t$ ($1 \\leq t \\leq 100$) — the number of sets of input data. The following lines describe the sets of input data.\n\nThe first and only line of each data set contains two integers: $x$ and $k$ ($1 \\leq x \\leq 10^9$, $1 \\leq k \\leq 7$).\n\n### Output\n\nFor each set of input data, output «YES» (without quotes) if the resulting number $y$ will be prime, and «NO» otherwise.\n\nYou may output «Yes» and «No» in any case (for example, the strings «yES», «yes», and «Yes» will be recognized as positive answers).\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n52 3\n\n6 7\n\n7 1\n\n1 7\n\n```\n\n#### Output #1\n\n```\nNO\nNO\nYES\nNO\n```", "cfid": "2093C"}
{"problem_id": "2093E", "problem_title": "E. Min Max MEX", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2093/E", "problem_statement": "You are given an array $a$ of length $n$ and a number $k$.\n\nA subarray is defined as a sequence of one or more consecutive elements of the array. You need to split the array $a$ into $k$ non-overlapping subarrays $b_1, b_2, \\dots, b_k$ such that the union of these subarrays equals the entire array. Additionally, you need to maximize the value of $x$, which is equal to the minimum MEX$(b_i)$, for $i \\in [1..k]$.\n\nMEX$(v)$ denotes the smallest non-negative integer that is not present in the array $v$.\n\n### Input\n\nThe first line contains an integer $t$ $(1\\leq t\\leq 10^4)$  — the number of test cases.\n\nThe first line of each test case contains two integers $n$, $k$ $(1\\leq k \\leq n \\leq 2 \\cdot 10^5)$  — the length of the array and the number of segments to split the array into.\n\nThe second line of each test case contains $n$ integers $a_i$ $(0\\leq a_i\\leq 10^9)$  — the elements of the array.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each query, output a single number  — the maximum value $x$ such that there exists a partition of the array $a$ into $k$ subarrays where the minimum MEX equals $x$.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n1 1\n\n0\n\n5 1\n\n0 1 3 2 4\n\n6 2\n\n2 1 0 0 1 2\n\n5 5\n\n0 0 0 0 0\n\n5 2\n\n2 3 4 5 6\n\n6 2\n\n0 0 1 1 2 2\n\n4 4\n\n1 0 0 0\n\n```\n\n#### Output #1\n\n```\n1\n5\n3\n1\n0\n1\n0\n```", "cfid": "2093E"}
{"problem_id": "2093D", "problem_title": "D. Skibidi Table", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2093/D", "problem_statement": "Vadim loves filling square tables with integers. But today he came up with a way to do it for fun! Let's take, for example, a table of size $2 \\times 2$, with rows numbered from top to bottom and columns numbered from left to right. We place $1$ in the top left cell, $2$ in the bottom right, $3$ in the bottom left, and $4$ in the top right. That's all he needs for fun!\n\nFortunately for Vadim, he has a table of size $2^n \\times 2^n$. He plans to fill it with integers from $1$ to $2^{2n}$ in ascending order. To fill such a large table, Vadim will divide it into $4$ equal square tables, filling the top left one first, then the bottom right one, followed by the bottom left one, and finally the top right one. Each smaller table will be divided into even smaller ones as he fills them until he reaches tables of size $2 \\times 2$, which he will fill in the order described above.\n\nNow Vadim is eager to start filling the table, but he has $q$ questions of two types:\n\n- what number will be in the cell at the $x$-th row and $y$-th column;\n- in which cell coordinates will the number $d$ be located.\n\nHelp answer Vadim's questions.\n\n### Input\n\nEach test consists of several sets of input data. The first line contains a single integer $t$ $(1 \\leq t \\leq 10)$  — the number of sets of input data. The following lines describe the input data sets.\n\nIn the first line of each data set, there is an integer $n$, describing the size of the table $(1 \\le n \\le 30)$.\n\nIn the second line of each data set, there is an integer $q$  — the number of questions $(1 \\le q \\le 20\\,000)$.\n\nIn the following $q$ lines of each data set, the questions are described in the following formats:\n\n- -\\> x y  — What number will be in the cell $(1 \\le x, y \\le 2^n)$;\n- <\\- d  — In which cell coordinates will the number $(1 \\le d \\le 2^{2n})$ be located.\n\nIt is guaranteed that the sum of $q$ over all test cases does not exceed $20\\,000$.\n\n### Output\n\nOutput the answers to each question on a separate line.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n2\n\n5\n\n-\\> 4 3\n\n<\\- 15\n\n<\\- 4\n\n-\\> 3 1\n\n-\\> 1 3\n\n1\n\n8\n\n-\\> 1 1\n\n-\\> 1 2\n\n-\\> 2 1\n\n-\\> 2 2\n\n<\\- 1\n\n<\\- 2\n\n<\\- 3\n\n<\\- 4\n\n```\n\n#### Output #1\n\n```\n7\n2 3\n1 2\n9\n13\n1\n4\n3\n2\n1 1\n2 2\n2 1\n1 2\n```\n\n### Note\n\nThis is how the filled table from the first example looks:\n\n![](https://espresso.codeforces.com/da748157aec3b2f6a243518e84d255f6a0b8b6c6.png)", "cfid": "2093D"}
{"problem_id": "2084A", "problem_title": "A. Max and Mod", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2084/A", "problem_statement": "You are given an integer $n$. Find any permutation $p$ of length $n$$^{\\\\text{∗}}$ such that:\n\n- For all $2 \\le i \\le n$, $\\max(p_{i - 1}, p_i) \\bmod i$ $^{\\text{†}}$ $= i - 1$ is satisfied.\n\nIf it is impossible to find such a permutation $p$, output $-1$.\n\n$^{\\text{∗}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n$^{\\\\text{†}}$$x \\\\bmod y$ denotes the remainder from dividing $x$ by $y$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 99$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n \\le 100$).\n\n### Output\n\nFor each test case:\n\n- If such a permutation $p$ doesn't exist, output a single integer $-1$.\n- Otherwise, output $n$ integers $p_1, p_2, \\ldots, p_n$ — the permutation $p$ you've found. If there are multiple answers, output any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2\n\n3\n\n4\n\n5\n\n```\n\n#### Output #1\n\n```\n-1\n3 2 1\n-1\n1 5 2 3 4\n```\n\n### Note\n\nIn the first test case, it is impossible to find such a permutation $p$, so you should output $-1$.\n\nIn the fourth test case, $p = [1, 5, 2, 3, 4]$ satisfies the condition:\n\n- For $i = 2$, $\\max(p_1, p_2) = 5$ and $5 \\bmod 2 = 1$.\n- For $i = 3$, $\\max(p_2, p_3) = 5$ and $5 \\bmod 3 = 2$.\n- For $i = 4$, $\\max(p_3, p_4) = 3$ and $3 \\bmod 4 = 3$.\n- For $i = 5$, $\\max(p_4, p_5) = 4$ and $4 \\bmod 5 = 4$.", "cfid": "2084A"}
{"problem_id": "2084D", "problem_title": "D. Arcology On Permafrost", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2084/D", "problem_statement": "You are given three integers $n$, $m$, and $k$, where $m \\cdot k < n$.\n\nFor a sequence $b$ consisting of non-negative integers, define $f(b)$ as follows:\n\n- You may perform the following operation on $b$:\n  - Let $l$ denote the current length of $b$. Choose a positive integer $1 \\\\leq i \\\\leq l - k + 1$, remove the subarray from index $i$ to $i + k - 1$ and concatenate the remaining parts. In other words, replace $b$ with \n\n$$[b_1, b_2, \\ldots, b_{i - 1}, b_{i + k}, b_{i + k + 1}, \\ldots, b_l].$$\n\nf(b)$ is defined as the minimum possible value of $\\\\operatorname{mex}(b)$$^{\\\\text{∗}}$ after performing the above operation at most $m$ times (possibly zero).\n\nYou need to construct a sequence $a$ of length $n$ consisting of non-negative integers, such that:\n\n- For all $1 \\le i \\le n$, $0 \\le a_i \\le 10^9$.\n- Over all such sequences $a$, $f(a)$ is maximized.\n\n$^{\\text{∗}}$The minimum excluded (MEX) of a collection of integers $c_1, c_2, \\ldots, c_k$ is defined as the smallest non-negative integer $x$ which does not occur in the collection $c$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n$, $m$, and $k$ ($2 \\le n \\le 2 \\cdot 10^5$, $1 \\le m < n$, $1 \\le k < n$, $1 \\le m \\cdot k < n$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le 10^9$).\n\nIf there are multiple answers, print any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n2 1 1\n\n5 2 2\n\n6 1 4\n\n8 2 2\n\n8 1 5\n\n11 3 3\n\n22 6 3\n\n17 2 2\n\n```\n\n#### Output #1\n\n```\n0 0\n0 1 0 0 0\n0 1 2 2 0 1\n0 2 1 0 1 0 8 1\n0 1 2 1000000000 1 0 1 2\n1 0 0 1 0 2 1 0 2 1 0\n0 2 1 0 2 1 0 3 2 1 0 2 1 0 2 1 0 2 1 0 2 1\n4 0 2 1 3 4 0 2 1 0 3 4 0 1 2 1 3\n```\n\n### Note\n\nIn the first test case, it can be shown that $f(a) = 1$, which is maximized.\n\nIn the second test case, it can be shown that $f(a) = 1$, which is maximized. $f(a) = 1$ since you can perform the following operations:\n\n- Choose $i = 3$, remove the subarray from index $3$ to $4$ and concatenate the remaining parts. The sequence $a$ becomes $[0, 1, 0]$.\n- Choose $i = 1$, remove the subarray from index $1$ to $2$ and concatenate the remaining parts. The sequence $a$ becomes $[0]$.\n\nIn the third test case, it can be shown that $f(a) = 2$, which is maximized. $f(a) = 2$ since you can perform the following operation:\n\n- Choose $i = 2$, remove the subarray from index $2$ to $5$ and concatenate the remaining parts. The sequence $a$ becomes $[0, 1]$.\n\nIn the fourth test case, it can be shown that $f(a) = 2$, which is maximized.\n\nIn the fifth test case, it can be shown that $f(a) = 3$, which is maximized.\n\nIn the sixth test case, it can be shown that $f(a) = 2$, which is maximized.", "cfid": "2084D"}
{"problem_id": "2084B", "problem_title": "B. MIN = GCD", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2084/B", "problem_statement": "You are given a positive integer sequence $a$ of length $n$. Determine if it is possible to rearrange $a$ such that there exists an integer $i$ ($1 \\\\le i<n$) satisfying \n\n$$ \\min([a_1,a_2,\\ldots,a_i])=\\gcd([a_{i+1},a_{i+2},\\ldots,a_n]). $$\n\nHere $\\gcd(c)$ denotes the [greatest common divisor](https://en.wikipedia.org/wiki/Greatest_common_divisor) of $c$, which is the maximum positive integer that divides all integers in $c$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n \\le 10^5$).\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^{18}$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, output \"Yes\" if it is possible, and \"No\" otherwise.\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n2\n\n1 1\n\n2\n\n1 2\n\n3\n\n2 2 3\n\n3\n\n2 3 4\n\n5\n\n4 5 6 9 3\n\n3\n\n998244359987710471 99824435698771045 1000000007\n\n6\n\n1 1 4 5 1 4\n\n```\n\n#### Output #1\n\n```\nYes\nNo\nYes\nNo\nYes\nYes\nYes\n```\n\n### Note\n\nIn the first test case, rearrange $a$ to $[1,1]$ and let $i=1$, then $\\min([1])=\\gcd([1])$.\n\nIn the second test case, it can be shown that it is impossible.\n\nIn the third test case, rearrange $a$ to $[3,2,2]$ and let $i=2$, then $\\min([3,2])=\\gcd([2])$.\n\nIn the fifth test case, rearrange $a$ to $[3,4,5,6,9]$ and let $i=3$, then $\\min([3,4,5])=\\gcd([6,9])$.", "cfid": "2084B"}
{"problem_id": "2084C", "problem_title": "C. You Soared Afar With Grace", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2084/C", "problem_statement": "You are given a permutation $a$ and $b$ of length $n$$^{\\\\text{∗}}$. You can perform the following operation at most $n$ times:\n\n- Choose two indices $i$ and $j$ ($1 \\le i, j \\le n$, $i \\ne j$), swap $a_i$ with $a_j$, swap $b_i$ with $b_j$.\n\nDetermine whether $a$ and $b$ can be reverses of each other after operations. In other words, for each $i = 1, 2, \\ldots, n$, $a_i = b_{n + 1 - i}$.\n\nIf it is possible, output any valid sequence of operations. Otherwise, output $-1$.\n\n$^{\\text{∗}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$) — the length of the permutations.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le n$).\n\nThe third line contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($1 \\le b_i \\le n$).\n\nIt is guaranteed that $a$ and $b$ are permutations of length $n$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, if it is impossible, output $-1$ in the only line. Otherwise, output a single integer $m$ ($0 \\le m \\le n$) — the number of operations in the first line. In the following $m$ lines, output two integers — the indices $i$ and $j$ ($1 \\le i, j \\le n$, $i \\ne j$) in each operation in order. If there are multiple solutions, print any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n2\n\n1 2\n\n1 2\n\n2\n\n1 2\n\n2 1\n\n4\n\n1 3 2 4\n\n2 4 1 3\n\n5\n\n2 5 1 3 4\n\n3 5 4 2 1\n\n5\n\n3 1 2 4 5\n\n1 2 3 4 5\n\n```\n\n#### Output #1\n\n```\n-1\n0\n1\n1 2\n2\n1 2\n1 3\n-1\n```\n\n### Note\n\nIn the second test case, $b$ is already the reverse of $a$.\n\nIn the third test case, after performing the following operation, $b$ will become the reverse of $a$:\n\n- Swap $a_1, a_2$ and swap $b_1, b_2$. Now $a = [3, 1, 2, 4]$ and $b = [4, 2, 1, 3]$.\n\nIn the fourth test case, after performing the following operations in order, $b$ will become the reverse of $a$:\n\n- Swap $a_1, a_2$ and swap $b_1, b_2$. Now $a = [5, 2, 1, 3, 4]$ and $b = [5, 3, 4, 2, 1]$.\n- Swap $a_1, a_3$ and swap $b_1, b_3$. Now $a = [1, 2, 5, 3, 4]$ and $b = [4, 3, 5, 2, 1]$.", "cfid": "2084C"}
{"problem_id": "2086A", "problem_title": "A. Cloudberry Jam", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2086/A", "problem_statement": "The most valuable berry of the Karelian forests is cloudberry. To make jam from cloudberries, you take equal amounts of berries and sugar and cook them. Thus, if you have $2$ kg of berries, you need $2$ kg of sugar. However, from $2$ kg of berries and $2$ kg of sugar, you will not get $4$ kg of jam, as one might expect, but only $3$ kg, since some of the jam evaporates during cooking. Specifically, during standard cooking, exactly a quarter (or $25\\%$) of the jam evaporates.\n\nHow many kilograms of cloudberries are needed to prepare $n$ $3$-kilogram jars of jam?\n\n![](https://espresso.codeforces.com/85e4f865ff1296d55236c63df0157f7da4c779b6.png)\n\n### Input\n\nEach test consists of several test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10^{4}$) — the number of test cases. The following lines describe the test cases.\n\nEach test case contains a single integer $n$ ($1 \\le n \\le 10^8$) — the number of jars of jam that need to be prepared.\n\n### Output\n\nFor each test case, output a single integer — the amount of berries needed for the jam in kilograms.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n1\n\n3\n\n```\n\n#### Output #1\n\n```\n2\n6\n```\n\n### Note\n\nFor the test case $1$, explanations are given in the text of the statement — to prepare $1$ jar of jam, you need $2$ kilograms of cloudberries.\n\nConsider the test case $2$: if we take $6$ kilograms of berries and $6$ kilograms of sugar, we get $\\frac{(6 + 6) \\cdot 3}{4} = 9$ kilograms of jam; which gives $\\frac{9}{3} = 3$ jars of jam.", "cfid": "2086A"}
{"problem_id": "2086D", "problem_title": "D. Even String", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2086/D", "problem_statement": "You would like to construct a string $s$, consisting of lowercase Latin letters, such that the following condition holds:\n\n- For every pair of indices $i$ and $j$ such that $s_{i} = s_{j}$, the difference of these indices is even, that is, $|i - j| \\bmod 2 = 0$.\n\nConstructing any string is too easy, so you will be given an array $c$ of $26$ numbers — the required number of occurrences of each individual letter in the string $s$. So, for every $i \\in [1, 26]$, the $i$-th letter of the Latin alphabet should occur exactly $c_i$ times.\n\nYour task is to count the number of distinct strings $s$ that satisfy all these conditions. Since the answer can be huge, output it modulo $998\\,244\\,353$.\n\n### Input\n\nEach test consists of several test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10^{4}$)— the number of test cases. The description of test cases follows.\n\nEach test case contains $26$ integers $c_{i}$ ($0 \\le c_{i} \\le 5 \\cdot 10^{5}$)— the elements of the array $c$.\n\nAdditional constraints on the input data:\n\n- The sum of $c_{i}$ for every test case is positive;\n- The sum of $c_{i}$ over all test cases does not exceed $5 \\cdot 10^{5}$.\n\n### Output\n\nFor each test case, print one integer — the number of suitable strings $s$, taken modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n2 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n\n3 1 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 1 0\n\n0 0 0 0 0 0 0 0 0 0 0 0 1 0 3 0 0 0 0 0 0 0 0 0 0 0\n\n1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 233527 233827\n\n```\n\n#### Output #1\n\n```\n4\n960\n0\n1\n789493841\n```\n\n### Note\n\nIn the first test case, there are $4$ suitable strings: \"abak\", \"akab\", \"baka\" and \"kaba\".", "cfid": "2086D"}
{"problem_id": "2086B", "problem_title": "B. Large Array and Segments", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2086/B", "problem_statement": "There is an array $a$ consisting of $n$ positive integers, and a positive integer $k$. An array $b$ is created from array $a$ according to the following rules:\n\n- $b$ contains $n \\cdot k$ numbers;\n- the first $n$ numbers of array $b$ are the same as the numbers of array $a$, that is, $b_{i} = a_{i}$ for $i \\le n$;\n- for any $i > n$, it holds that $b_{i} = b_{i - n}$.\n\nFor example, if $a = [2, 3, 1, 4]$ and $k = 3$, then $b = [2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4]$.\n\nGiven a number $x$, it is required to count the number of such positions $l$ ($1 \\le l \\le n \\cdot k$), for which there exists a position $r \\ge l$, such that the sum of the elements of array $b$ on the segment $[l, r]$ is at least $x$ (in other words, $b_{l} + b_{l+1} + \\dots + b_{r} \\ge x$).\n\n### Input\n\nEach test consists of several test cases. The first line contains one integer $t$ ($1 \\le t \\le 10^{4}$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains three integers $n$, $k$, $x$ ($1 \\le n, k \\le 10^{5}$; $1 \\le x \\le 10^{18}$).\n\nThe second line of each test case contains $n$ integers $a_{i}$ ($1 \\le a_{i} \\le 10^{8}$).\n\nAdditional constraints on the input:\n\n- the sum of $n$ across all test cases does not exceed $2 \\cdot 10^{5}$;\n- the sum of $k$ across all test cases does not exceed $2 \\cdot 10^{5}$.\n\n### Output\n\nFor each test case, output one integer — the number of suitable positions $l$ in the array $b$.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n5 3 10\n\n3 4 2 1 5\n\n15 97623 1300111\n\n105 95 108 111 118 101 95 118 97 108 111 114 97 110 116\n\n1 100000 1234567891011\n\n1\n\n1 1 1\n\n1\n\n1 1 1\n\n2\n\n2 1 2\n\n1 1\n\n2 1 5\n\n2 1\n\n```\n\n#### Output #1\n\n```\n12\n1452188\n0\n1\n1\n1\n0\n```\n\n### Note\n\nIn the first test case, the array $b$ looks like this:\n\n\n\n$$[3, 4, 2, 1, 5, 3, 4, 2, 1, 5, 3, 4, 2, 1, 5]$$\n\nThere are $12$ positions $l$ for which there exists a suitable position $r$. Here are some (not all) of them:\n\n- $l = 1$, for which there is a position $r = 6$, the sum over the segment $[1, 6]$ equals $18$;\n- $l = 2$, for which there is a position $r = 5$, the sum over the segment $[2, 5]$ equals $12$;\n- $l = 6$, for which there is a position $r = 9$, the sum over the segment $[6, 9]$ equals $10$.", "cfid": "2086B"}
{"problem_id": "2086C", "problem_title": "C. Disappearing Permutation", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2086/C", "problem_statement": "A permutation of integers from $1$ to $n$ is an array of size $n$ where each integer from $1$ to $n$ appears exactly once.\n\nYou are given a permutation $p$ of integers from $1$ to $n$. You have to process $n$ queries. During the $i$-th query, you replace $p_{d_i}$ with $0$. Each element is replaced with $0$ exactly once. The changes made in the queries are saved, that is, after the $i$-th query, all integers $p_{d_1}, p_{d_2}, \\dots, p_{d_i}$ are zeroes.\n\nAfter each query, you have to find the minimum number of operations required to fix the array; in other words, to transform the current array into any permutation of integers from $1$ to $n$ (possibly into the original permutation $p$, possibly into some other permutation).\n\nThe operation you can perform to fix the array is the following one:\n\n- choose the integer $i$ from $1$ to $n$, replace the $i$-th element of the array with $i$.\n\nNote that the answer for each query is calculated independently, meaning you do not actually apply any operations, just calculate the minimum number of operations.\n\n### Input\n\nEach test consists of several test cases. The first line contains one integer $t$ ($1 \\le t \\le 10^{4}$) — the number of test cases. Then the test cases follow.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 10^{5}$).\n\nThe second line of each test case contains $n$ integers $p_1, p_2, \\dots, p_n$ ($1 \\le p_{i} \\le n$) — the original permutation. All $p_i$ are distinct.\n\nThe third line of each test case contains $n$ integers $d_1, d_2, \\dots, d_n$ ($1 \\le d_{i} \\le n$). All $d_{i}$ are distinct.\n\nAdditional constraint on the input:\n\n- the sum of $n$ across all test cases does not exceed $2 \\cdot 10^{5}$.\n\n### Output\n\nFor each test case, output a line containing $n$ integers, where the $i$-th integer should be equal to the minimum number of operations required to fix the array which was obtained after the $i$-th query (i.e., the permutation $p$ where all integers $p_{d_1}, p_{d_2}, \\dots, p_{d_i}$ are replaced by zeroes).\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3\n\n1 2 3\n\n3 2 1\n\n5\n\n4 5 3 1 2\n\n4 5 1 3 2\n\n7\n\n4 3 1 2 7 5 6\n\n1 2 3 4 5 6 7\n\n```\n\n#### Output #1\n\n```\n1 2 3\n2 4 4 5 5\n4 4 4 4 7 7 7\n```\n\n### Note\n\nIn the first test case, after each query, every integer which was replaced by $0$ can be restored by one operation.\n\nIn the second test case, you can act as follows:\n\n- Query $1$: $p = [4, 5, 3, 0, 2]$, it can be transformed into $[{\\color{red}1}, 5, 3, {\\color{red}4}, 2]$.\n- Query $2$: $p = [4, 5, 3, 0, 0]$, it can be transformed into $[{\\color{red}1}, {\\color{red}2}, 3, {\\color{red}4}, {\\color{red}5}]$.\n- Query $3$: $p = [0, 5, 3, 0, 0]$, it can be transformed into $[{\\color{red}1}, {\\color{red}2}, 3, {\\color{red}4}, {\\color{red}5}]$.\n- Query $4$: $p = [0, 5, 0, 0, 0]$, it can be transformed into $[{\\color{red}1}, {\\color{red}2}, {\\color{red}3}, {\\color{red}4}, {\\color{red}5}]$.\n- Query $5$: $p = [0, 0, 0, 0, 0]$, it can be transformed into $[{\\color{red}1}, {\\color{red}2}, {\\color{red}3}, {\\color{red}4}, {\\color{red}5}]$.\n\nThe numbers that were changed are highlighted in red.", "cfid": "2086C"}
{"problem_id": "2112F", "problem_title": "F. Variables and Operations", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2112/F", "problem_statement": "There are $n$ variables; let's denote the value of the $i$-th variable as $a_i$.\n\nThere are also $m$ operations which will be applied to these variables; the $i$-th operation is described by three integers $x_i, y_i, z_i$. When the $i$-th operation is applied, the variable $x_i$ gets assigned the following value: $\\min(a_{x_i}, a_{y_i} + z_i)$.\n\nEvery operation will be applied exactly once, but their order is not fixed; they can be applied in any order.\n\nLet's call a sequence of initial variable values $a_1, a_2, \\dots, a_n$ stable, if no matter in which order we apply operations, the resulting values will be the same. If the resulting value of the $i$-th variable depends on the order of operations, then the sequence of initial variable values is called $i$-unstable.\n\nYou have to process $q$ queries. In each query, you will be given initial values $a_1, a_2, \\dots, a_n$ and an integer $k$; before applying the operations, you can at most $k$ times choose a variable and decrease it by $1$. For every variable $i$, you have to independently determine if it is possible to transform the given values into an $i$-unstable sequence.\n\n### Input\n\nThe first line contains two integers $n$ and $m$ ($2 \\le n \\le 500$; $1 \\le m \\le 4 \\cdot 10^5$) — the number of variables and operations, respectively.\n\nThen, $m$ lines follow. The $i$-th of them contains three integers $x_i, y_i, z_i$ ($1 \\le x_i, y_i \\le n$; $x_i \\ne y_i$; $0 \\le z_i \\le 10^5$) — the description of the $i$-th operation.\n\nThe next line contains one integer $q$ ($1 \\le q \\le 1000$) — the number of queries.\n\nEach query consists of two lines:\n\n- the first line contains one integer $k$ ($0 \\le k \\le 10^9$) — the maximum number of times you can choose a variable and decrease it by $1$;\n- the second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($0 \\le a_i \\le 10^9$) — the initial values of the variables.\n\n### Output\n\nFor each query, print a string of $n$ zeroes and/or ones. The $i$-th character should be 1 if it is possible to obtain an $i$-unstable sequence, or 0 otherwise.\n\n### Examples\n\n#### Input #1\n\n```\n\n4 5\n\n2 1 10\n\n3 2 5\n\n1 4 8\n\n1 2 6\n\n3 1 17\n\n3\n\n0\n\n20 0 15 5\n\n10\n\n20 0 15 5\n\n30\n\n20 0 15 5\n\n```\n\n#### Output #1\n\n```\n0000\n0000\n0110\n```\n\n#### Input #2\n\n```\n\n3 5\n\n1 2 100\n\n1 2 10\n\n1 3 5\n\n1 2 100\n\n3 2 5\n\n1\n\n1000000000\n\n0 0 0\n\n```\n\n#### Output #2\n\n```\n000\n```\n\n#### Input #3\n\n```\n\n3 4\n\n2 3 5\n\n1 2 0\n\n3 1 4\n\n1 3 4\n\n10\n\n5\n\n7 5 3\n\n2\n\n5 7 0\n\n1\n\n1 1 1\n\n5\n\n3 0 1\n\n0\n\n5 3 5\n\n5\n\n6 0 4\n\n5\n\n1 5 6\n\n1\n\n7 7 2\n\n1\n\n1 6 6\n\n4\n\n7 7 2\n\n```\n\n#### Output #3\n\n```\n000\n000\n000\n001\n000\n001\n001\n000\n000\n000\n```\n\n### Note\n\nConsider the first example. If the initial variable values are $[20, 0, 15, 5]$, the resulting values will be $[6, 0, 5, 5]$ with any order of operations. Decreasing the variables $10$ times is not enough. However, if we can apply no more than $30$ changes, we can decrease the $1$-st variable by $2$, and the $4$-th variable by $25$, we get initial values equal to $[18, 0, 15, -20]$, and this sequence is $2$-unstable and $3$-unstable:\n\n- if you apply the operations in the order they are given, you will get $[-12, 0, 5, -20]$;\n- however, if you apply the operations in order $[3, 2, 4, 1, 5]$, you will get $[-12, -2, 5, -20]$;\n- and if you apply the operations in order $[3, 4, 5, 1, 2]$, you will get $[-12, -2, 3, -20]$.", "cfid": "2112F"}
{"problem_id": "2112E", "problem_title": "E. Tree Colorings", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2112/E", "problem_statement": "Consider a rooted undirected tree. Each vertex can be colored blue, green, or yellow. A coloring is called beautiful if it meets these conditions:\n\n- the root of the tree is green;\n- if you consider all blue and green vertices, they are reachable from each other without passing through any yellow vertices;\n- if you consider all yellow and green vertices, they are reachable from each other without passing through any blue vertices;\n\nYou are given an integer $m$. Your task is to calculate the minimum number of vertices in a tree with exactly $m$ beautiful colorings.\n\n### Input\n\nThe first line contains a single integer ($1 \\le t \\le 10^5$) — the number of test cases.\n\nThe only line of each test case contains a single integer $m$ ($1 \\le m \\le 5 \\cdot 10^5$).\n\n### Output\n\nFor each test case, print a single integer — the minimum number of vertices in a tree with exactly $m$ beautiful colorings. If such a tree does not exist, print $-1$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n1\n\n3\n\n5\n\n7\n\n9\n\n```\n\n#### Output #1\n\n```\n1\n2\n3\n4\n3\n```\n\n### Note\n\nIn the following notes, let $g$ describe green color, $b$ be blue, and $y$ be yellow.\n\nIn the first example, consider a simple tree with just $1$ vertex. This tree has exactly $1$ beautiful coloring: the root is green.\n\nIn the second example, consider a simple tree with $2$ vertices with a root at the $1$-st vertex. There are exactly $3$ beautiful colorings: $[g, g]$, $[g, b]$ and $[g, y]$.\n\nIn the third example, consider a bamboo tree with $3$ vertices with a root at the $1$-st vertex. There are exactly $5$ beautiful colorings: $[g, g, g]$, $[g, g, b]$, $[g, g, y]$, $[g, b, b]$ and $[g, y, y]$.\n\nIn the fifth example, consider a tree with $3$ vertices with a root at the $1$-st vertex, and the other $2$ vertices connected to it. There are exactly $9$ beautiful colorings: $[g, g, g]$, $[g, g, b]$, $[g, g, y]$, $[g, b, g]$, $[g, b, b]$, $[g, b, y]$, $[g, y, g]$, $[g, y, b]$ and $[g, y, y]$.", "cfid": "2112E"}
{"problem_id": "2120F", "problem_title": "F. Superb Graphs", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2120/F", "problem_statement": "As we all know, Aryan is a funny guy. He decides to create fun graphs. For a graph $G$, he defines fun graph $G'$ of $G$ as follows:\n\n- Every vertex $v'$ of $G'$ maps to a non-empty independent set$^{\\text{∗}}$ or clique$^{\\text{†}}$ in $G$.\n- The sets of vertices of $G$ that the vertices of $G'$ map to are pairwise disjoint and combined cover all the vertices of $G$, i.e., the sets of vertices of $G$ mapped by vertices of $G'$ form a partition of the vertex set of $G$.\n- If an edge connects two vertices $v_1'$ and $v_2'$ in $G'$, then there is an edge between every vertex of $G$ in the set mapped to $v_1'$ and every vertex of $G$ in the set mapped to $v_2'$.\n- If an edge does not connect two vertices $v_1'$ and $v_2'$ in $G'$, then there is not an edge between any vertex of $G$ in the set mapped to $v_1'$ and any vertex of $G$ in the set mapped to $v_2'$.\n\nAs we all know again, Harshith is a superb guy. He decides to use fun graphs to create his own superb graphs. For a graph $G$, a fun graph $G' '$ is called a superb graph of $G$ if $G' '$ has the minimum number of vertices among all possible fun graphs of $G$.\n\nAryan gives Harshith $k$ simple undirected graphs$^{\\text{‡}}$ $G_1, G_2,\\ldots,G_k$, all on the same vertex set $V$. Harshith then wonders if there exist $k$ other graphs $H_1, H_2,\\ldots,H_k$, all on some other vertex set $V'$ such that:\n\n- $G_i$ is a superb graph of $H_i$ for all $i\\in \\{1,2,\\ldots,k\\}$.\n- If a vertex $v\\in V$ maps to an independent set of size greater than $1$ in one $G_i, H_i$ ($1\\leq i\\leq k$) pair, then there exists no pair $G_j, H_j$ ($1\\leq j\\leq k, j\\neq i$) where $v$ maps to a clique of size greater than $1$.\n\nHelp Harshith solve his wonder.\n\n$^{\\text{∗}}$For a graph $G$, a subset $S$ of vertices is called an independent set if no two vertices of $S$ are connected with an edge.\n\n$^{\\text{†}}$For a graph $G$, a subset $S$ of vertices is called a clique if every vertex of $S$ is connected to every other vertex of $S$ with an edge.\n\n$^{\\text{‡}}$A graph is a simple undirected graph if its edges are undirected and there are no self-loops or multiple edges between the same pair of vertices.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 100$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1\\leq n\\leq 300, 1\\leq k\\leq 10$).\n\nThen, there are $k$ graphs described. The first line of each graph description contains a single integer $m$ ($0\\leq m\\leq \\frac{n\\cdot(n-1)}{2} $).\n\nNext $m$ lines each contain two space-separated integers $u$ and $v$ ($1\\leq u, v\\leq n, u\\neq v$), denoting that an edge connects vertices $u$ and $v$.\n\nIt is guaranteed that the sum of $m$ over all graphs over all test cases does not exceed $2\\cdot 10^5$, and the sum of $n$ over all test cases does not exceed $300$.\n\n### Output\n\nFor each testcase, print \"Yes\" if there exists $k$ graphs satisfying the conditions; otherwise, \"No\".\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n5 2\n\n3\n\n3 4\n\n5 3\n\n5 1\n\n6\n\n3 5\n\n3 4\n\n1 4\n\n1 2\n\n2 3\n\n4 2\n\n4 3\n\n0\n\n3\n\n3 1\n\n1 4\n\n1 2\n\n4\n\n4 2\n\n4 3\n\n1 2\n\n2 3\n\n3 2\n\n0\n\n3\n\n3 1\n\n3 2\n\n1 2\n\n```\n\n#### Output #1\n\n```\nYes\nYes\nNo\n```\n\n### Note\n\nFor the first test case, the following are the graphs of $G_1, H_1$ and $G_2, H_2$ such that $G_1$ is superb graph of $H_1$ and $G_2$ is superb graph of $H_2$.\n\n![](https://espresso.codeforces.com/452753955813c595256b6b1fee9c2f4329c082e5.png)\n\nIn each graph, vertex $2$ of $G_i$ corresonds to independent set $\\{2\\_1, 2\\_2\\}$ of corresponding $H_i$ and remaining vertices $v\\in\\{1,3,4,5\\}$ of $G_i$ correspond to independent set/clique $\\{v\\}$ in corresponding $H_i$(a single vertex set can be considered both an independent set and a clique).\n\nIn the third test case, it can be proven that the answer is \"No\".", "cfid": "2120F"}
{"problem_id": "2120G", "problem_title": "G. Eulerian Line Graph", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2120/G", "problem_statement": "Aryan loves graph theory more than anything. Well, no, he likes to flex his research paper on line graphs to everyone more. To start a conversation with you, he decides to give you a problem on line graphs. In the mathematical discipline of graph theory, the line graph of a simple undirected graph $G$ is another simple undirected graph $L(G)$ that represents the adjacency between every two edges in $G$.\n\nPrecisely speaking, for an undirected graph $G$ without self-loops or multiple edges, its line graph $L(G)$ is a graph such that\n\n- Each vertex of $L(G)$ represents an edge of $G$.\n- Two vertices of $L(G)$ are adjacent if and only if their corresponding edges share a common endpoint in $G$.\n\n![](https://espresso.codeforces.com/7c4456d69ec30bde9274559f9dca34dcf6879258.png)\n\nAlso, $L^0(G)=G$ and $L^k(G)=L(L^{k-1}(G))$ for $k\\geq 1$.\n\nAn Euler trail is a sequence of edges that visits every edge of the graph exactly once. This trail can be either a path (starting and ending at different vertices) or a cycle (starting and ending at the same vertex). Vertices may be revisited during the trail, but each edge must be used exactly once.\n\nAryan gives you a simple connected graph $G$ with $n$ vertices and $m$ edges and an integer $k$, and it is guaranteed that $G$ has an Euler trail and it is not a path graph$^{\\text{∗}}$. He asks you to determine if $L^k(G)$ has an Euler trail.\n\n$^{\\text{∗}}$A path graph is a tree where every vertex is connected to atmost two other vertices.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains three space-separated integers $n$, $m$, and $k$ ($5 \\le n \\le 2 \\cdot 10^5$, $n-1 \\le m \\le \\min(\\frac{n\\cdot(n-1)}{2} ,2 \\cdot 10^5)$, $1 \\le k \\le 2 \\cdot 10^5$).\n\nThe next $m$ lines of each test case contain two space-separated integers $u$ and $v$ ($1 \\le u,v \\le n$, $u \\neq v$), denoting that an edge connects vertices $u$ and $v$.\n\nIt is guaranteed that the sum of $n$ and $m$ over all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each testcase, print \"YES\" if $L^k(G)$ has an Euler trail; otherwise, \"NO\".\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n5 5 2\n\n1 2\n\n2 3\n\n3 4\n\n4 5\n\n5 1\n\n5 6 1\n\n1 2\n\n2 3\n\n3 4\n\n4 5\n\n5 1\n\n1 3\n\n10 11 3\n\n1 2\n\n2 3\n\n3 4\n\n4 5\n\n4 6\n\n4 7\n\n5 7\n\n6 7\n\n7 8\n\n8 9\n\n9 10\n\n7 8 2\n\n1 3\n\n2 3\n\n1 4\n\n4 5\n\n2 5\n\n1 6\n\n6 7\n\n2 7\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nYES\nNO\n```\n\n### Note\n\nFor the first test case, $L^2(G)$ is isomorphic to $G$ itself. So, since $G$ has an Euler trail, $L^2(G)$ also has an Euler trail.\n\nFor the second test case, $L(G)$ looks as follows(Vertex $i-j$ of $L(G)$ in figure corresponds to edge between vertices $i$ and $j$ of $G$). It can be proven that this doesn't have an Euler trail.\n\n![](https://espresso.codeforces.com/b376c533b0c565921bd0995db02694519661b79c.png)", "cfid": "2120G"}
{"problem_id": "2120E", "problem_title": "E. Lanes of Cars", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2120/E", "problem_statement": "Harshith is the president of TollClub. He tasks his subordinate Aryan to oversee a toll plaza with $n$ lanes. Initially, the $i$-th lane has $a_i$ cars waiting in a queue. Exactly one car from the front of each lane passes through the toll every second.\n\nThe angriness of a car is defined as the number of seconds it had to wait before passing through the toll. Consider it takes 1 sec for each car to pass the toll, i.e., the first car in a lane has angriness $1$, the second car has angriness $2$, and so on.\n\nTo reduce congestion and frustration, cars are allowed to switch lanes. A car can instantly move to the back of any other lane at any time. However, changing lanes increases its angriness by an additional $k$ units due to the confusion caused by the lane change.\n\nHarshith, being the awesome person he is, wants to help the drivers by minimising the total angriness of all cars. He asks Aryan to do so or get fired. Aryan is allowed to change lanes of any car anytime (possibly zero), but his goal is to find the minimum possible total angriness if the lane changes are done optimally. Help Aryan retain his job by determining the minimum angriness he can achieve.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\le n \\le 2 \\cdot 10^5$, $1 \\le k \\le 10^6$) — the number of lanes and the increment in angriness on a lane change.\n\nThe second line of each test case contains $n$ space-separated integers, denoting array $a$ — the $i$-th number representing the number of cars in the $i$-th lane ($1 \\le a_i \\le 10^6$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\nNote that the sum of $\\max a_i$ over all test cases is not bounded.\n\n### Output\n\nFor each test case, output a single integer in a new line, denoting the minimum total angriness.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n3 4\n\n13 7 4\n\n4 9\n\n6 12 14 5\n\n5 3\n\n2 4 13 5 10\n\n1 7\n\n6\n\n13 4\n\n10 26 34 39 9 43 48 41 1 38 13 4 46\n\n16 3\n\n176342 171863 70145 80835 160257 136105 78541 100795 114461 45482 68210 51656 29593 8750 173743 156063\n\n```\n\n#### Output #1\n\n```\n123\n219\n156\n21\n5315\n82302351405\n```\n\n### Note\n\nIn the first test case, Aryan shifts two cars from lane $1$ to lane $3$, after which the array becomes $[11, 7, 6]$. The total angriness is $\\frac{11\\cdot 12}{2}+\\frac{7\\cdot 8}{2}+\\frac{6\\cdot 7}{2}+2\\cdot 4=123$. It can be proven that this is the minimum possible angriness.\n\nIn the fourth test case, there is only one lane, so cars can't shift lanes. Total angriness is $\\frac{6\\cdot7}{2}=21$.", "cfid": "2120E"}
{"problem_id": "2121G", "problem_title": "G. Gangsta", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2121/G", "problem_statement": "You are given a binary string $s_1s_2 \\ldots s_n$ of length $n$. A string $s$ is called binary if it consists only of zeros and ones.\n\nFor a string $p$, we define the function $f(p)$ as the maximum number of occurrences of any character in the string $p$. For example, $f(00110) = 3$, $f(01) = 1$.\n\nYou need to find the sum $f(s_ls_{l+1} \\ldots s_r)$ for all pairs $1 \\leq l \\leq r \\leq n$.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. Then follows their descriptions.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) — the length of the binary string.\n\nThe second line of each test case contains a string of length $n$, consisting of $0$s and $1$s — the binary string $s$.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the sum $f(s_ls_{l+1} \\ldots s_r)$ for all pairs $1 \\leq l \\leq r \\leq n$.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n1\n\n0\n\n2\n\n01\n\n4\n\n0110\n\n6\n\n110001\n\n8\n\n10011100\n\n11\n\n01011011100\n\n```\n\n#### Output #1\n\n```\n1\n3\n14\n40\n78\n190\n```\n\n### Note\n\nIn the first test case, the string $s$ has one substring, and the value $f(0) = 1$.\n\nIn the second test case, all substrings of the string $s$ are $0$, $01$, $1$. And the answer is $1 + 1 + 1 = 3$, respectively.\n\nIn the third test case, all substrings of the string $s$ are $0$, $01$, $011$, $0110$, $1$, $11$, $110$, $1$, $10$, $0$. And the answer is $1 + 1 + 2 + 2 + 1 + 2 + 2 + 1 + 1 + 1 = 14$, respectively.", "cfid": "2121G"}
{"problem_id": "2121H", "problem_title": "H. Ice Baby", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2121/H", "problem_statement": "The longest non-decreasing subsequence of an array of integers $a_1, a_2, \\ldots, a_n$ is the longest sequence of indices $1 \\leq i_1 < i_2 < \\ldots < i_k \\leq n$ such that $a_{i_1} \\leq a_{i_2} \\leq \\ldots \\leq a_{i_k}$. The length of the sequence is defined as the number of elements in the sequence. For example, the length of the longest non-decreasing subsequence of the array $a = [3, 1, 4, 1, 2]$ is $3$.\n\nYou are given two arrays of integers $l_1, l_2, \\ldots, l_n$ and $r_1, r_2, \\ldots, r_n$. For each $1 \\le k \\le n$, solve the following problem:\n\n- Consider all arrays of integers $a$ of length $k$, such that for each $1 \\leq i \\leq k$, it holds that $l_i \\leq a_i \\leq r_i$. Find the maximum length of the longest non-decreasing subsequence among all such arrays.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\leq n \\leq 2 \\cdot 10^5$) — the length of the arrays $l$ and $r$.\n\nThe next $n$ lines of each test case contain two integers $l_i$ and $r_i$ ($1 \\leq l_i \\leq r_i \\leq 10^9$).\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output $n$ integers: for each $k$ from $1$ to $n$, output the maximum length of the longest non-decreasing subsequence among all suitable arrays.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n1\n\n1 1\n\n2\n\n3 4\n\n1 2\n\n4\n\n4 5\n\n3 4\n\n1 3\n\n3 3\n\n8\n\n6 8\n\n4 6\n\n3 5\n\n5 5\n\n3 4\n\n1 3\n\n2 4\n\n3 3\n\n5\n\n1 2\n\n6 8\n\n4 5\n\n2 3\n\n3 3\n\n11\n\n35 120\n\n66 229\n\n41 266\n\n98 164\n\n55 153\n\n125 174\n\n139 237\n\n30 72\n\n138 212\n\n109 123\n\n174 196\n\n```\n\n#### Output #1\n\n```\n1\n1 1\n1 2 2 3\n1 2 2 3 3 3 4 5\n1 2 2 2 3\n1 2 3 4 5 6 7 7 8 8 9\n```\n\n### Note\n\nIn the first test case, the only possible array is $a = [1]$. The length of the longest non-decreasing subsequence of this array is $1$.\n\nIn the second test case, for $k = 2$, no matter how we choose the values of $a_1$ and $a_2$, the condition $a_1 > a_2$ will always hold. Therefore, the answer for $k = 2$ will be $1$.\n\nIn the third test case, for $k = 4$, we can choose the array $a = [5, 3, 3, 3]$. The length of the longest non-decreasing subsequence of this array is $3$.\n\nIn the fourth test case, for $k = 8$, we can choose the array $a = [7, 5, 3, 5, 3, 3, 3, 3]$. The length of the longest non-decreasing subsequence of this array is $5$.\n\nIn the fifth test case, for $k = 5$, we can choose the array $a = [2, 8, 5, 3, 3]$. The length of the longest non-decreasing subsequence of this array is $3$.", "cfid": "2121H"}
{"problem_id": "2113F", "problem_title": "F. Two Arrays", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2113/F", "problem_statement": "You are given two arrays $a$ and $b$ of length $n$. You can perform the following operation an unlimited number of times:\n\n- Choose an integer $i$ from $1$ to $n$ and swap $a_i$ and $b_i$.\n\nLet $f(c)$ be the number of distinct numbers in array $c$. Find the maximum value of $f(a) + f(b)$. Also, output the arrays $a$ and $b$ after performing all operations.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 10^5$) — the length of the arrays.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 2n$) — the elements of array $a$.\n\nThe third line of each test case contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($1 \\le b_i \\le 2n$) — the elements of array $b$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, print a single integer in the first line — the maximum value of $f(a) + f(b)$.\n\nIn the second line, print $n$ integers — the elements of array $a$ after performing the operations.\n\nIn the third line, print $n$ integers — the elements of array $b$ after performing the operations.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n5\n\n1 2 4 4 4\n\n1 3 3 5 2\n\n7\n\n2 2 4 4 5 5 5\n\n1 3 3 2 1 6 6\n\n7\n\n12 3 3 4 5 6 4\n\n1 2 13 8 10 13 7\n\n```\n\n#### Output #1\n\n```\n9\n1 3 4 5 2\n1 2 3 4 4\n12\n2 3 4 2 1 5 6\n1 2 3 4 5 6 5\n14\n12 3 13 8 10 6 4\n1 2 3 4 5 13 7\n```\n\n### Note\n\nIn the first test case, after applying three operations with $i=2$, $i=4$, and $i=5$, we obtain $a = [1, 3, 4, 5, 2]$ and $b = [1, 2, 3, 4, 4]$. After that, $f(a) + f(b) = 5 + 4 = 9$. It can be shown that it is not possible to achieve a greater answer.\n\nIn the second test case, after applying the operations: \n\n$$f([2, 3, 4, 2, 1, 5, 6]) + f([1, 2, 3, 4, 5, 6, 5]) = 6 + 6 = 12$$\n\n", "cfid": "2113F"}
{"problem_id": "2113E", "problem_title": "E. From Kazan with Love", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2113/E", "problem_statement": "Marat is a native of Kazan. Kazan can be represented as an undirected tree consisting of $n$ vertices. In his youth, Marat often got into street fights, and now he has $m$ enemies, numbered from $1$ to $m$, living in Kazan along with him.\n\nEvery day, all the people living in the city go to work. Marat knows that the $i$-th of his enemies lives at vertex $a_i$ and works at vertex $b_i$. He himself lives at vertex $x$ and works at vertex $y$. It is guaranteed that $a_i \\ne x$.\n\nAll enemies go to work via the shortest path and leave their homes at time $1$. That is, if we represent the shortest path between vertices $a_i$ and $b_i$ as $c_1, c_2, c_3, \\ldots, c_k$ (where $c_1 = a_i$ and $c_k = b_i$), then at the moment $p$ ($1 \\le p \\le k$), the enemy numbered $i$ will be at vertex $c_p$.\n\nMarat really does not want to meet any of his enemies at the same vertex at the same time, as this would create an awkward situation, but they can meet on an edge. Marat also leaves his home at time $1$, and at each subsequent moment in time, he can either move to an adjacent vertex or stay at his current one.\n\nNote that Marat can only meet the $i$-th enemy at the moments $2, 3, \\ldots, k$ (where $c_1, c_2, \\ldots, c_k$ is the shortest path between vertices $a_i$ and $b_i$). In other words, starting from the moment after the enemy reaches work, Marat can no longer meet him.\n\nHelp Marat find the earliest moment in time when he can reach work without encountering any enemies along the way, or determine that it is impossible.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains four integers $n$, $m$, $x$, and $y$ ($2 \\le n \\le 10^5$, $1 \\le m \\le 200$, $1 \\le x, y \\le n$, $x \\neq y$) — the number of vertices in the tree, the number of enemies, and the vertex numbers from which Marat starts his journey and where he needs to arrive, respectively.\n\nThe $j$-th of the following $n - 1$ lines contains two integers $v_j$ and $u_j$ ($1 \\le v_j, u_j \\le n$, $v_j \\neq u_j$) — the endpoints of the $j$-th edge of the tree.\n\nThe $i$-th of the following $m$ lines contains two integers $a_i$ and $b_i$ ($1 \\le a_i, b_i \\le n$, $a_i \\neq b_i$, $a_i \\ne x$) — the description of the routes of Marat's enemies.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, output a single integer — the minimum moment in time when Marat can reach work, or $-1$ if it is impossible.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n4 1 1 4\n\n1 2\n\n2 3\n\n3 4\n\n4 1\n\n5 1 1 5\n\n1 2\n\n2 3\n\n3 4\n\n4 5\n\n5 1\n\n9 2 1 9\n\n1 2\n\n2 3\n\n3 4\n\n3 5\n\n5 6\n\n6 7\n\n6 8\n\n8 9\n\n9 1\n\n7 1\n\n9 2 7 2\n\n1 4\n\n2 5\n\n3 6\n\n4 5\n\n5 6\n\n4 7\n\n5 8\n\n6 9\n\n2 8\n\n3 7\n\n3 2 1 3\n\n1 2\n\n2 3\n\n2 1\n\n3 1\n\n```\n\n#### Output #1\n\n```\n4\n6\n10\n5\n-1\n```\n\n### Note\n\nIn the first test case, it is possible to reach vertex number $4$ from vertex number $1$ via the shortest path. Note that Marat will meet a single enemy on an edge, not at a vertex.\n\nIn the second test case, the optimal strategy is to wait for one moment in time at the starting vertex and then go along the shortest path from vertex $1$ to vertex $5$. If he does not stop at the beginning, Marat will meet his enemy at a vertex, not on an edge.\n\nIn the third test case, it is beneficial to go from vertex $1$ to vertex $4$. After that, he should not move anywhere for one moment in time, and then go along the shortest path from vertex $4$ to vertex $9$.", "cfid": "2113E"}
{"problem_id": "2113D", "problem_title": "D. Cheater", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2113/D", "problem_statement": "You are playing a new card game in a casino with the following rules:\n\n1. The game uses a deck of $2n$ cards with different values.\n2. The deck is evenly split between the player and the dealer: each receives $n$ cards.\n3. Over $n$ rounds, the player and the dealer simultaneously play one top card from their hand. The cards are compared, and the point goes to the one whose card has a higher value. The winning card is removed from the game, while the losing card is returned to the hand and placed on top of the other cards in the hand of the player who played it.\n\nNote that the game always lasts exactly $n$ rounds.\n\nYou have tracked the shuffling of the cards and know the order of the cards in the dealer's hand (from top to bottom). You want to maximize your score, so you can swap any two cards in your hand no more than once (to avoid raising suspicion).\n\nDetermine the maximum number of points you can achieve.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 5 \\cdot 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\leq n \\leq 2 \\cdot 10^{5}$) — the number of cards in the player's hand.\n\nThe second line of each test case contains $n$ integers $a_{1}, a_{2}, \\ldots, a_{n}$ ($1 \\leq a_{i} \\leq 2n$) — the values of the cards in the player's hand from top to bottom.\n\nThe third line of each test case contains $n$ integers $b_{1}, b_{2}, \\ldots, b_{n}$ ($1 \\leq b_{i} \\leq 2n$) — the values of the cards in the dealer's hand from top to bottom.\n\nIt is guaranteed that the values of all cards are distinct.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the maximum number of points you can achieve.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n7\n\n13 7 4 9 12 10 2\n\n6 1 14 3 8 5 11\n\n3\n\n1 6 5\n\n2 3 4\n\n5\n\n8 6 3 10 1\n\n7 9 5 2 4\n\n```\n\n#### Output #1\n\n```\n6\n2\n3\n```\n\n### Note\n\nIn the first test case, the cards can remain unchanged. The gameplay will be organized as follows:\n\n1. The cards with values $13$ and $6$ are compared. The player wins and receives a point.\n2. The cards with values $7$ and $6$ are compared. The player wins and receives a point.\n3. The cards with values $4$ and $6$ are compared. The dealer wins.\n4. The cards with values $4$ and $1$ are compared. The player wins and receives a point.\n5. The cards with values $9$ and $1$ are compared. The player wins and receives a point.\n6. The cards with values $12$ and $1$ are compared. The player wins and receives a point.\n7. The cards with values $10$ and $1$ are compared. The player wins and receives a point.\n\nThus, the player received $6$ points.\n\nIn the second test case, the cards with values $1$ and $5$ can be swapped, then the player's hand looks as follows $[5, 6, 1]$. The gameplay will be organized as follows:\n\n1. The cards with values $5$ and $2$ are compared. The player wins and receives a point.\n2. The cards with values $6$ and $2$ are compared. The player wins and receives a point.\n3. The cards with values $1$ and $2$ are compared. The dealer wins.\n\nThus, the player received $2$ points.\n\nIn the third test case, the cards with values $3$ and $10$ can be swapped, then the player's hand looks as follows $[8, 6, 10, 3, 1]$. The gameplay will be organized as follows:\n\n1. The cards with values $8$ and $7$ are compared. The player wins and receives a point.\n2. The cards with values $6$ and $7$ are compared. The dealer wins.\n3. The cards with values $6$ and $9$ are compared. The dealer wins.\n4. The cards with values $6$ and $5$ are compared. The player wins and receives a point.\n5. The cards with values $10$ and $5$ are compared. The player wins and receives a point.\n\nThus, the player received $3$ points.", "cfid": "2113D"}
{"problem_id": "2118E", "problem_title": "E. Grid Coloring", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2118/E", "problem_statement": "There is a $n\\times m$ grid with each cell initially white. You have to color all the cells one-by-one. After you color a cell, all the colored cells furthest from it receive a penalty. Find a coloring order, where no cell has more than $3$ penalties.\n\nNote that $n$ and $m$ are both odd.\n\nThe distance metric used is the [chessboard distance](https://en.wikipedia.org/wiki/Chebyshev_distance) while we decide ties between cells with [Manhattan distance](https://en.wikipedia.org/wiki/Taxicab_geometry#Formal_definition). Formally, a cell $(x_2, y_2)$ is further away than $(x_3, y_3)$ from a cell $(x_1, y_1)$ if one of the following holds:\n\n- $\\max\\big(\\lvert x_1 - x_2 \\rvert, \\lvert y_1 - y_2 \\rvert\\big)>\\max\\big(\\lvert x_1 - x_3 \\rvert, \\lvert y_1 - y_3 \\rvert\\big)$\n- $\\max\\big(\\lvert x_1 - x_2 \\rvert, \\lvert y_1 - y_2 \\rvert\\big)=\\max\\big(\\lvert x_1 - x_3 \\rvert, \\lvert y_1 - y_3 \\rvert\\big)$ and $\\lvert x_1 - x_2 \\rvert + \\lvert y_1 - y_2 \\rvert>\\lvert x_1 - x_3 \\rvert + \\lvert y_1 - y_3 \\rvert$\n\nIt can be proven that at least one solution always exists.\n\n![](https://espresso.codeforces.com/426e6caed4dd02a8735e6ae056f6458c2ef70599.png)Example showing penalty changes after coloring the center of a $5 \\times 5$ grid. The numbers indicate the penalty of the cells.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 100$). The description of the test cases follows.\n\nThe first line of each test case contains two odd integers $n$ and $m$ ($1 \\le n, m \\le 4999$) — the number of rows and columns.\n\nIt is guaranteed that the sum of $n \\cdot m$ over all test cases does not exceed $5000$.\n\n### Output\n\nFor each test case, output $n \\cdot m$ lines where the $i$-th line should contain the coordinates of the $i$-th cell in your coloring order. If there are multiple solutions, print any of them.\n\nThe empty lines in the example output are just for increased readability. You're not required to print them.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3 3\n\n1 1\n\n1 5\n\n```\n\n#### Output #1\n\n```\n2 1\n2 3\n2 2\n1 1\n3 2\n3 3\n3 1\n1 3\n1 2\n\n1 1\n\n1 2\n1 4\n1 5\n1 1\n1 3```\n\n### Note\n\nIn the first test case, the grid can be colored as follows:\n\n![](https://espresso.codeforces.com/fcb29d564cde5c0f485e668c35cf05566b558ec8.png)The numbers indicate the penalty of the cells.", "cfid": "2118E"}
{"problem_id": "2118D2", "problem_title": "D2. Red Light, Green Light (Hard version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2118/D2", "problem_statement": "This is the hard version of the problem. The only difference is the constraint on $k$ and the total sum of $n$ and $q$ across all test cases. You can make hacks only if both versions of the problem are solved.\n\nYou are given a strip of length $10^{15}$ and a constant $k$. There are exactly $n$ cells that contain a traffic light; each has a position $p_i$ and an initial delay $d_i$ for which $d_i < k$. The $i$-th traffic light works the following way:\n\n- it shows red at the $l \\cdot k + d_i$-th second, where $l$ is an integer,\n- it shows green otherwise.\n\nAt second $0$, you are initially positioned at some cell on the strip, facing the positive direction. At each second, you perform the following actions in order:\n\n- If the current cell contains a red traffic light, you turn around.\n- Move one cell in the direction you are currently facing.\n\nYou are given $q$ different starting positions. For each one, determine whether you will eventually leave the strip within $10^{100}$ seconds.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 2\\cdot10^5$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$, $k$ ($\\mathbf{1 \\le n \\le 2\\cdot10^5}$ and $\\mathbf{1 \\le k \\le 10^{15}}$) — the number of traffic lights and the length of the period.\n\nThe second line of each test case contains $n$ integers $p_1, p_2, \\ldots p_n$ ($1 \\le p_1 < p_2 < \\ldots < p_n \\le 10^{15}$) — the positions of the traffic lights.\n\nThe third line of each test case contains $n$ integers $d_1, d_2, \\ldots d_n$ ($0 \\le d_i < k$) — the delays of the traffic lights.\n\nThe fourth line of each test case contains one integer $q$ ($\\mathbf{1 \\le q \\le 2\\cdot10^5}$) — the number of queries.\n\nThe fifth line of each test case contains $q$ integers $a_1, a_2, \\ldots, a_q$ ($1 \\leq a_i \\leq 10^{15}$) — the starting positions.\n\nIt is guaranteed that the sum of $n$ and $q$ over all test cases does not exceed $\\mathbf{2\\cdot10^5}$.\n\n### Output\n\nFor each test case, output $q$ lines. Each line should contain \"YES\" if you will eventually leave the strip and \"NO\" otherwise. You can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2 2\n\n1 4\n\n1 0\n\n3\n\n1 2 3\n\n9 4\n\n1 2 3 4 5 6 7 8 9\n\n3 2 1 0 1 3 3 1 1\n\n5\n\n2 5 6 7 8\n\n4 2\n\n1 2 3 4\n\n0 0 0 0\n\n4\n\n1 2 3 4\n\n3 4\n\n1 2 3\n\n3 1 1\n\n3\n\n1 2 3\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nYES\nYES\nYES\nYES\nNO\nNO\nYES\nYES\nNO\nNO\nYES\nNO\nYES\n```\n\n### Note\n\nIn the first test case, the following happens at starting positions $1$, $2$, and $3$:\n\n![](https://espresso.codeforces.com/63db34c82cbed1e62971514d85a4a6bf71302a79.png)\n\nAnd the following in the second test case at starting position $2$:\n\n![](https://espresso.codeforces.com/70971ec2952940a09246b1e55290386a0dec24a1.png)", "cfid": "2118D2"}
{"problem_id": "2117G", "problem_title": "G. Omg Graph", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2117/G", "problem_statement": "You are given an undirected connected weighted graph. Define the cost of a path of length $k$ to be as follows:\n\n- Let the weights of all the edges on the path be $w_1,...,w_k$.\n- The cost of the path is $(\\min_{i = 1}^{k}{w_i}) + (\\max_{i=1}^{k}{w_i})$, or in other words, the maximum edge weight + the minimum edge weight.\n\nAcross all paths from vertex $1$ to $n$, report the cost of the path with minimum cost. Note that the path is not necessarily simple.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $m$ ($2 \\le n \\le 2 \\cdot 10^5, n - 1 \\le m \\le \\min(2 \\cdot 10^5, \\frac{n(n - 1)}{2})$).\n\nThe next $m$ lines each contain integers $u, v$ and $w$ ($1 \\le u, v \\le n, 1 \\le w \\le 10^9$) representing an edge from vertex $u$ to $v$ with weight $w$. It is guaranteed that the graph does not contain self-loops or multiple edges and the resulting graph is connected.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$ and that the sum of $m$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer, the minimum cost path from vertex $1$ to $n$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3 2\n\n1 2 1\n\n2 3 1\n\n3 2\n\n1 3 13\n\n1 2 5\n\n8 9\n\n1 2 6\n\n2 3 5\n\n3 8 6\n\n1 4 7\n\n4 5 4\n\n5 8 7\n\n1 6 5\n\n6 7 5\n\n7 8 5\n\n3 3\n\n1 3 9\n\n1 2 8\n\n2 3 3\n\n```\n\n#### Output #1\n\n```\n2\n18\n10\n11\n```\n\n### Note\n\nFor the second test case, the optimal path is $1 \\rightarrow 2 \\rightarrow 1 \\rightarrow 3$, the edge weights are $5, 5, 13$ so the cost is $\\min(5, 5, 13) + \\max(5, 5, 13) = 5 + 13 = 18$. It can be proven that there is no path with lower cost.", "cfid": "2117G"}
{"problem_id": "2117H", "problem_title": "H. Incessant Rain", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2117/H", "problem_statement": "Note the unusual memory limit.\n\nSilver Wolf gives you an array $a$ of length $n$ and $q$ queries. In each query, she replaces an element in $a$. After each query, she asks you to output the maximum integer $k$ such that there exists an integer $x$ such that it is the $k$-majority of a subarray$^{\\text{∗}}$ of $a$.\n\nAn integer $y$ is the $k$-majority of array $b$ if $y$ appears at least $\\lfloor \\frac{|b|+1}{2} \\rfloor +k$ times in $b$, where $|b|$ represents the length of $b$. Note that $b$ may not necessarily have a $k$-majority.\n\n$^{\\text{∗}}$An array $b$ is a subarray of an array $a$ if $b$ can be obtained from $a$ by the deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$)  — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $q$ ($1 \\leq n, q \\leq 3 \\cdot 10^5$)  — the length of $a$ and the number of queries.\n\nThe following line contains $n$ space-separated integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq n$).\n\nThe following $q$ lines contain two integers $i$ and $x$, denoting the query that replaces $a_i$ with $x$ ($1 \\leq i, x \\leq n$).\n\nIt is guaranteed that the sum of $n$ and the sum of $q$ over all test cases does not exceed $3 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the answer to all queries on a single new line, separated by a space.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n5 5\n\n1 2 3 4 5\n\n3 4\n\n1 4\n\n2 4\n\n4 3\n\n2 3\n\n7 8\n\n3 2 3 3 2 2 3\n\n2 3\n\n5 3\n\n6 3\n\n3 4\n\n4 4\n\n7 4\n\n6 4\n\n2 4\n\n```\n\n#### Output #1\n\n```\n1 1 2 1 0\n2 2 3 2 1 1 1 2\n```", "cfid": "2117H"}
{"problem_id": "2111E", "problem_title": "E. Changing the String", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2111/E", "problem_statement": "Given a string $s$ that consists only of the first three letters of the Latin alphabet, meaning each character of the string is either a, b, or c.\n\nAlso given are $q$ operations that need to be performed on the string. In each operation, two letters $x$ and $y$ from the set of the first three letters of the Latin alphabet are provided, and for each operation, one of the following two actions must be taken:\n\n- change any (one) occurrence of the letter $x$ in the string $s$ to the letter $y$ (if at least one occurrence of the letter $x$ exists);\n- do nothing.\n\nThe goal is to perform all operations in the given order in such a way that the string $s$ becomes lexicographically minimal.\n\nRecall that a string $a$ is lexicographically less than a string $b$ if and only if one of the following conditions holds:\n\n- $a$ is a prefix of $b$, but $a \\neq b$;\n- at the first position where $a$ and $b$ differ, the string $a$ has a letter that comes earlier in the alphabet than the corresponding letter in $b$.\n\n### Input\n\nEach test consists of several test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10^{3}$) — the number of test cases. The description of the test cases follows.\n\nIn the first line of each test case, there are two integers $n$ and $q$ ($1 \\le n, q \\le 2 \\cdot 10^{5}$) — the length of the string $s$ and the number of operations.\n\nIn the second line of each test case, the string $s$ is given — a string of exactly $n$ characters, each of which is a, b, or c.\n\nThe next $q$ lines of each test case contain the description of the operations. Each line contains two characters $x$ and $y$, each of which is a, b, or c.\n\nAdditional constraints on the input:\n\n- the sum of $n$ across all test cases does not exceed $2 \\cdot 10^{5}$;\n- the sum of $q$ across all test cases does not exceed $2 \\cdot 10^{5}$.\n\n### Output\n\nFor each test case, output the lexicographically minimal string that can be obtained from $s$ using the given operations.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2 2\n\ncb\n\nc b\n\nb a\n\n10 10\n\nbbbbbbbbbb\n\nb a\n\nb c\n\nc b\n\nb a\n\nc a\n\nb c\n\nb c\n\nb a\n\na b\n\nc a\n\n30 20\n\nabcaababcbbcabcbbcabcbabbbbabc\n\nb c\n\nb c\n\nc a\n\nb c\n\nb c\n\nb a\n\nb c\n\nb c\n\nb a\n\nb a\n\nb a\n\nb a\n\nc a\n\nb c\n\nc a\n\nb c\n\nc a\n\nc a\n\nb c\n\nc b\n\n```\n\n#### Output #1\n\n```\nab\naaaaabbbbb\naaaaaaaaaaaaaaabbbabcbabbbbabc\n```\n\n### Note\n\nIn the first test case, both operations need to be applied to the first letter:\n\n1. after the first operation, $s = $ \"bb\"\n2. after the second operation, $s = $ \"ab\"\n\nIn the second test case, the string could change as follows:\n\n01. \"bbbbabbbbb\" (changed the $5$-th letter)\n02. \"cbbbabbbbb\" (changed the $1$-st letter)\n03. \"cbbbabbbbb\" (did nothing)\n04. \"cbbaabbbbb\" (changed the $4$-th letter)\n05. \"abbaabbbbb\" (changed the $1$-st letter)\n06. \"abcaabbbbb\" (changed the $3$-rd letter)\n07. \"abcaabbbbb\" (did nothing)\n08. \"aacaabbbbb\" (changed the $2$-nd letter)\n09. \"aacaabbbbb\" (did nothing)\n10. \"aaaaabbbbb\" (changed the $3$-rd letter)", "cfid": "2111E"}
{"problem_id": "2111G", "problem_title": "G. Divisible Subarrays", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2111/G", "problem_statement": "Technically, this is an interactive problem.\n\nAn array $a$ of $m$ numbers is called divisible if at least one of the following conditions holds:\n\n- There exists an index $i$ ($1 \\le i < m$) and an integer $x$ such that for all indices $j$ ($j \\le i$), it holds that $a_{j} \\le x$ and for all indices $k$ ($k > i$), it holds that $a_{k} > x$.\n- There exists an index $i$ ($1 \\le i < m$) and an integer $x$ such that for all indices $j$ ($j \\le i$), it holds that $a_{j} > x$ and for all indices $k$ ($k > i$), it holds that $a_{k} \\le x$.\n\nYou are given a permutation $p$ of integers $1, 2, \\dots, n$. Your task is to answer queries of the following form fast: if we take only the segment \\[$l$, $r$\\] from the permutation, that is, the numbers $p_{l}, p_{l + 1}, \\dots, p_{r}$, is this subarray of numbers divisible?\n\nQueries will be submitted in interactive mode in groups of $10$, meaning you will not receive the next group of queries until you output all answers for the current group.\n\n### Input\n\nThe first line contains one integer $n$ ($2 \\le n \\le 2 \\cdot 10^{5}$) — the size of the permutation.\n\nThe second line contains $n$ integers $p_{i}$ ($1 \\le p_{i} \\le n$) — the permutation of natural numbers itself.\n\nThe third line contains one integer $q$ ($10 \\le q \\le 10^{6}, q \\bmod 10 = 0$) — the number of queries.\n\nThe following $q$ lines contain two integers $l$ and $r$ ($1 \\le l < r \\le n$) — the parameters of the query.\n\n### Output\n\nFor each query, output the string \"YES\" if the subarray from this query is divisible and \"NO\" otherwise.\n\nAfter printing the answers to a group of queries, do not forget to output the end of line and flush the output buffer. Otherwise, you may get the Idleness Limit Exceeded verdict. To flush the buffer, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- flush(output) in Pascal;\n- stdout.flush() in Python;\n- refer to the documentation for other languages.\n\nYou have to flush the output buffer after the $10$-th, $20$-th, $30$-th query (and so on), i. e. after each query with index divisible by $10$. After that, you can read the next group of queries.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n4 2 3 6 1 5 7\n\n20\n\n1 2\n\n1 3\n\n1 4\n\n1 5\n\n1 6\n\n2 3\n\n2 4\n\n2 5\n\n2 6\n\n3 4\n\n3 5\n\n3 6\n\n4 5\n\n4 6\n\n5 6\n\n1 7\n\n2 7\n\n3 7\n\n4 7\n\n5 7\n\n```\n\n#### Output #1\n\n```\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n```", "cfid": "2111G"}
{"problem_id": "2111F", "problem_title": "F. Puzzle", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2111/F", "problem_statement": "You have been gifted a puzzle, where each piece of this puzzle is a square with a side length of one. You can glue any picture onto this puzzle, cut it, and obtain an almost ordinary jigsaw puzzle.\n\nYour friend is an avid mathematician, so he suggested you consider the following problem. Is it possible to arrange the puzzle pieces in such a way that the following conditions are met:\n\n- the pieces are aligned parallel to the coordinate axes;\n- the pieces do not overlap each other;\n- all pieces form a single connected component (i.e., there exists a path from each piece to every other piece along the pieces, where each two consecutive pieces share a side);\n- the ratio of the perimeter of this component to the area of this component equals $\\frac{p}{s}$;\n- the number of pieces used does not exceed $50\\,000$.\n\nCan you handle it?\n\n![](https://espresso.codeforces.com/21225771b06e268653d52533d80b6910fcaf58fb.png)For this figure, the ratio of the perimeter to the area is $\\frac{11}{9}$\n\n### Input\n\nEach test consists of several test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10$) — the number of test cases. The description of the test cases follows.\n\nThe only line of each test case contains two integers $p$ and $s$ ($1 \\le p, s \\le 50$).\n\n### Output\n\nFor each test case:\n\n- if it is impossible to arrange the pieces as described above, output a single integer $-1$;\n- otherwise, in the first line output a single integer $k$ ($1 \\le k \\le 50\\,000$), and then in $k$ lines output the coordinates of the pieces: each line should contain two integers $x_{i}$ and $y_{i}$ ($-10^{9} \\le x_{i}, y_{i} \\le 10^{9}$). If there are multiple suitable arrangements of the pieces, output any of them.\n\n### Examples\n\n#### Input #1\n\n```\n\n2\n\n1 1\n\n31 4\n\n```\n\n#### Output #1\n\n```\n20\n3 7\n3 8\n6 4\n6 5\n3 5\n4 4\n4 5\n4 3\n3 4\n5 3\n5 4\n5 7\n3 6\n4 6\n5 5\n5 6\n4 7\n4 8\n6 6\n6 7\n-1\n```\n\n#### Input #2\n\n```\n\n2\n\n4 2\n\n12 5\n\n```\n\n#### Output #2\n\n```\n24\n-7 2\n-3 -3\n-7 -5\n-7 1\n-3 2\n-7 -2\n-3 -5\n-7 -6\n-5 -6\n-3 -4\n-3 -6\n-7 0\n-6 -6\n-7 -3\n-5 2\n-7 -1\n-3 1\n-4 -6\n-3 0\n-7 -4\n-6 2\n-4 2\n-3 -1\n-3 -2\n5\n0 0\n0 1\n1 0\n-1 0\n0 -1\n```\n\n### Note\n\nIn the first test case of the first test, the figure may look like this:\n\n![](https://espresso.codeforces.com/c78a4676f61c6a56a17a58a94d80b977997a016f.png)\n\nIn the second test, the figures look like this:\n\n![](https://espresso.codeforces.com/2d4ef6ccde7efc7b4b537794e8dec6817d5235f2.png)![](https://espresso.codeforces.com/54d05bdd77431e3f82d36d7b022980f2a2ecafa8.png)\n\nNote that the internal perimeter is also taken into account!", "cfid": "2111F"}
{"problem_id": "2115C", "problem_title": "C. Gellyfish and Eternal Violet", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2115/C", "problem_statement": "There are $n$ monsters, numbered from $1$ to $n$, in front of Gellyfish. The HP of the $i$-th monster is $h_i$.\n\nGellyfish doesn't want to kill them, but she wants to keep these monsters from being a threat to her. So she wants to reduce the HP of all the monsters to exactly $1$.\n\nNow, Gellyfish, with The Sword Sharpened with Tears, is going to attack the monsters for $m$ rounds. For each round:\n\n1. The Sword Sharpened with Tears shines with a probability of $p$.\n2. Gellyfish can choose whether to attack:\n   - If Gellyfish doesn't attack, nothing happens.\n   - If Gellyfish chooses to attack and The Sword Sharpened with Tears shines, the HP of all the monsters will be reduced by $1$.\n   - If Gellyfish chooses to attack and The Sword Sharpened with Tears does not shine, Gellyfish can choose one of the monsters and reduce its HP by $1$.\n\nPlease note that before Gellyfish decides whether or not to attack, she will know whether the sword shines or not. Also, when the sword shines, Gellyfish can only make attacks on all the monsters and cannot make an attack on only one monster.\n\nNow, Gellyfish wants to know what the probability is that she will reach her goal if she makes choices optimally during the battle.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 100$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n$, $m$, and $p'$ ($1 \\leq n \\leq 20$, $1 \\leq m \\leq 4000$, $0 \\leq p' \\leq 100$) — the number of monsters, the number of rounds of attacks, and an integer representing the probability $p = \\frac {p'} {100}$ that the Sword Sharpened with Tears shines.\n\nThe second line of each test case contains $n$ integers $h_1,h_2,\\ldots,h_n$ ($1 \\leq h_i \\leq 400$) — the HP of the monsters.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $100$.\n\n### Output\n\nFor each test case, output a single real number representing the probability that Gellyfish will reach her goal.\n\nYour answer is considered correct if its absolute or relative error does not exceed $10^{-6}$.\n\nFormally, let your answer be $a$, and the jury's answer be $b$. Your answer is accepted if and only if $\\frac{|a - b|}{\\max{(1, |b|)}} \\le 10^{-6}$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2 2 10\n\n2 2\n\n5 5 20\n\n2 2 2 2 2\n\n6 20 50\n\n1 1 4 5 1 4\n\n9 50 33\n\n9 9 8 2 4 4 3 5 3\n\n```\n\n#### Output #1\n\n```\n0.910000\n0.672320\n0.588099\n0.931474\n```\n\n### Note\n\nIn the first test case, Gellyfish will always attack whether the sword shines or not in the first round.\n\nIf the sword shines in the first round, then Gellyfish can reach her goal after the attack in the first round.\n\nOtherwise, if the sword does not shine in the first round, she will attack monster $1$ in the first round. For the second round:\n\n- If the sword shines, since monster $1$ was attacked in the first round, Gellyfish can't reach her goal.\n- Otherwise, Gellyfish can attack monster $2$, allowing her to reach her goal.\n\nTherefore, the probability that Gellyfish can reach her goal is $10\\% + (90\\% \\cdot 90\\%) = 91\\%$.\n\nIn the second test case, Gellyfish will only attack in the first round where the sword shines. It can be observed that the only way Gellyfish can't reach her goal is if the sword never shines in all $5$ rounds. The probability that Gellyfish can reach her goal is $100\\% - (80\\%)^5 = 67.232\\%$.", "cfid": "2115C"}
{"problem_id": "2115B", "problem_title": "B. Gellyfish and Camellia Japonica", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2115/B", "problem_statement": "Gellyfish has an array of $n$ integers $c_1, c_2, \\ldots, c_n$. In the beginning, $c = [a_1, a_2, \\ldots, a_n]$.\n\nGellyfish will make $q$ modifications to $c$.\n\nFor $i = 1,2,\\ldots,q$, Gellyfish is given three integers $x_i$, $y_i$, and $z_i$ between $1$ and $n$. Then Gellyfish will set $c_{z_i} := \\min(c_{x_i}, c_{y_i})$.\n\nAfter the $q$ modifications, $c = [b_1, b_2, \\ldots, b_n]$.\n\nNow Flower knows the value of $b$ and the value of the integers $x_i$, $y_i$, and $z_i$ for all $1 \\leq i \\leq q$, but she doesn't know the value of $a$.\n\nFlower wants to find any possible value of the array $a$ or report that no such $a$ exists.\n\nIf there are multiple possible values of the array $a$, you may output any of them.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $q$ ($1 \\leq n, q \\leq 3 \\cdot 10^5$) — the size of the array and the number of modifications.\n\nThe second line of each test case contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($1 \\leq b_i \\leq 10^9$) — the value of the array $c$ after the $q$ modifications.\n\nThe following $q$ lines each contain three integers $x_i$, $y_i$, and $z_i$ ($1 \\leq x_i, y_i, z_i \\leq n$) — describing the $i$-th modification.\n\nIt is guaranteed that the sum of $n$ and the sum of $q$ over all test cases does not exceed $3 \\cdot 10^5$.\n\n### Output\n\nFor each test case, if $a$ exists, output $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\leq a_i \\leq 10^9$) in a single line. Otherwise, output \"-1\" in a single line.\n\nIf there are multiple solutions, print any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2 1\n\n1 2\n\n2 1 2\n\n3 2\n\n1 2 3\n\n2 3 2\n\n1 2 1\n\n6 4\n\n1 2 2 3 4 5\n\n5 6 6\n\n4 5 5\n\n3 4 4\n\n2 3 3\n\n```\n\n#### Output #1\n\n```\n-1\n1 2 3\n1 2 3 4 5 5\n```\n\n### Note\n\nIn the first test case, based on the given sequence of modifications, we know that $b_1 = a_1$ and $b_2 = \\min(a_1, a_2)$. Therefore, it is necessary that $b_2 \\leq b_1$. However, for the given $b$, we have $b_1<b_2$. Therefore, there is no solution.\n\nIn the second test case, we can see that the given $c$ becomes $b$ from $a$ after the given modifications, and $c$ is not changed at each modification.", "cfid": "2115B"}
{"problem_id": "2115D", "problem_title": "D. Gellyfish and Forget-Me-Not", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2115/D", "problem_statement": "Gellyfish and Flower are playing a game.\n\nThe game consists of two arrays of $n$ integers $a_1,a_2,\\ldots,a_n$ and $b_1,b_2,\\ldots,b_n$, along with a binary string $c_1c_2\\ldots c_n$ of length $n$.\n\nThere is also an integer $x$ which is initialized to $0$.\n\nThe game consists of $n$ rounds. For $i = 1,2,\\ldots,n$, the round proceeds as follows:\n\n1. If $c_i = \\mathtt{0}$, Gellyfish will be the active player. Otherwise, if $c_i = \\mathtt{1}$, Flower will be the active player.\n2. The active player will perform exactly one of the following operations:\n   - Set $x:=x \\oplus a_i$.\n   - Set $x:=x \\oplus b_i$.\n\nHere, $\\oplus$ denotes the [bitwise XOR operation](https://en.wikipedia.org/wiki/Bitwise_operation#XOR).\n\nGellyfish wants to minimize the final value of $ x $ after $ n $ rounds, while Flower wants to maximize it.\n\nFind the final value of $ x $ after all $ n $ rounds if both players play optimally.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\leq n \\leq 10^5$) — the number of rounds of the game.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\leq a_i < 2^{60}$).\n\nThe third line of each test case contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($0 \\leq b_i < 2^{60}$).\n\nThe fourth line of each test case contains a binary string $c$ of length $n$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, output a single integer — the final value of $ x $ after all $ n $ rounds.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n1\n\n0\n\n2\n\n0\n\n2\n\n12 2\n\n13 3\n\n11\n\n3\n\n6 1 2\n\n6 2 3\n\n010\n\n4\n\n1 12 7 2\n\n4 14 4 2\n\n0111\n\n9\n\n0 5 10 6 6 2 6 2 11\n\n7 3 15 3 6 7 6 7 8\n\n110010010\n\n```\n\n#### Output #1\n\n```\n0\n15\n6\n11\n5\n```\n\n### Note\n\nIn the first test case, there's only one round and Gellyfish is the active player of that round. Therefore, she will choose $a_1$, and the final value of $x$ is $0$.\n\nIn the second test case, Flower will be the active player in both rounds. She will choose $a_1$ and $b_2$, and the final value of $x$ is $a_1 \\oplus b_2 = 15$. Flower may also choose $b_1$ and $a_2$ instead for the same result of $x=a_2 \\oplus b_1 = 15$.\n\nIn the third test case, $a_1 = b_1$ so it doesn't matter what decision Gellyfish makes in the first round. In the second round:\n\n- If Flower chooses $a_2$, then $x$ will become $7$. Gellyfish will choose $b_3$ in the third round, so the final value of $x$ will be $4$.\n- Otherwise, Flower chooses $b_2$, then $x$ will become $4$. Gellyfish will choose $a_3$ in the third round, so the final value of $x$ will be $6$.\n\nFlower wants to maximize the final value of $x$, so Flower will choose $b_2$ in the second round. Therefore, the final value of $x$ will be $6$.", "cfid": "2115D"}
{"problem_id": "2114G", "problem_title": "G. Build an Array", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2114/G", "problem_statement": "Yesterday, Dima found an empty array and decided to add some integers to it. He can perform the following operation an unlimited number of times:\n\n- add any integer to the left or right end of the array.\n- then, as long as there is a pair of identical adjacent elements in the array, they will be replaced by their sum.\n\nIt can be shown that there can be at most one such pair in the array at the same time.\n\nFor example, if the array is $[3, 6, 4]$ and we add the number $3$ to the left, the array will first become $[3, 3, 6, 4]$, then the first two elements will be replaced by $6$, and the array will become $[6, 6, 4]$, and then — $[12, 4]$.\n\nAfter performing the operation exactly $k$ times, he thinks he has obtained an array $a$ of length $n$, but he does not remember which operations he applied. Determine if there exists a sequence of $k$ operations that could result in the given array $a$ from an empty array, or determine that it is impossible.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. The descriptions of the test cases follow.\n\nThe first line of each test case description contains two integers $n$ and $k$ ($1 \\le n \\le 10^5$, $n \\le k \\le 10^6$) — the length of the resulting array and the number of operations.\n\nThe second line contains $n$ integers $a_i$ ($1 \\le a_i \\le 10^9, a_{i - 1} \\ne a_i$) — the elements of the resulting array.\n\nIt is guaranteed that the sum of the values of $n$ across all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, if there is no suitable sequence of operations of length $k$, output \"NO\". Otherwise, output \"YES\".\n\nYou may output \"YES\" and \"NO\" in any case (for example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as a positive answer).\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n3 3\n\n2 1 4\n\n3 7\n\n2 1 4\n\n2 15\n\n2 16\n\n3 10\n\n256 32 1\n\n3 289\n\n768 96 1\n\n3 290\n\n768 96 1\n\n5 7\n\n5 1 6 3 10\n\n4 6\n\n6 8 5 10\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nYES\nYES\nYES\nNO\nYES\nYES\n```", "cfid": "2114G"}
{"problem_id": "2114F", "problem_title": "F. Small Operations", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2114/F", "problem_statement": "Given an integer $x$ and an integer $k$. In one operation, you can perform one of two actions:\n\n- choose an integer $1 \\le a \\le k$ and assign $x = x \\cdot a$;\n- choose an integer $1 \\le a \\le k$ and assign $x = \\frac{x}{a}$, where the value of $\\frac{x}{a}$ must be an integer.\n\nFind the minimum number of operations required to make the number $x$ equal to $y$, or determine that it is impossible.\n\n### Input\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe only line of each test case contains three integers $x$, $y$ and $k$ ($1 \\le x, y, k \\le 10^6$).\n\nIt is guaranteed that the sum of $x$ and the sum of $y$ across all test cases does not exceed $10^8$.\n\n### Output\n\nFor each test case, output $-1$ if it is impossible to achieve $x=y$ using the given operations, and the minimum number of required operations otherwise.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n4 6 3\n\n4 5 3\n\n4 6 2\n\n10 45 3\n\n780 23 42\n\n11 270 23\n\n1 982800 13\n\n1 6 2\n\n```\n\n#### Output #1\n\n```\n2\n-1\n-1\n3\n3\n3\n6\n-1\n```", "cfid": "2114F"}
{"problem_id": "2110E", "problem_title": "E. Melody", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2110/E", "problem_statement": "In 2077, the robots that took over the world realized that human music wasn't that great, so they started composing their own.\n\nTo write music, the robots have a special musical instrument capable of producing $n$ different sounds. Each sound is characterized by its volume and pitch. A sequence of sounds is called music. Music is considered beautiful if any two consecutive sounds differ either only in volume or only in pitch. Music is considered boring if the volume or pitch of any three consecutive sounds is the same.\n\nYou want to compose beautiful, non-boring music that contains each sound produced by your musical instrument exactly once.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nIn the first line of each test case, there is a number $n$ ($1 \\le n \\le 2 \\cdot 10^5$) — the number of sounds that the musical instrument can produce.\n\nNext, there are $n$ lines, where the $i$-th line contains a pair of numbers $v_i, p_i$ ($1 \\le v_i,\\space p_i \\le 10^9$) — the volume and pitch of the $i$-th sound, respectively. It is guaranteed that among all $n$ sounds, there are no duplicates, meaning for any $i \\neq j$, at least one of the conditions $v_i \\neq v_j$ or $p_i \\neq p_j$ holds.\n\nThe sum of $n$ across all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, if it is possible to compose such music, output \"YES\", and on the next line, output $n$ numbers — the indices of the sounds in the order that forms beautiful non-boring music. Otherwise, output \"NO\".\n\nYou may output each letter in any case (lowercase or uppercase). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be accepted as a positive answer.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n4\n\n179 239\n\n179 179\n\n239 179\n\n239 239\n\n3\n\n1 1\n\n2 1\n\n3 1\n\n1\n\n5 7\n\n5\n\n1 1\n\n1 2\n\n2 1\n\n2 2\n\n99 99\n\n7\n\n1 1\n\n1 3\n\n2 1\n\n2 2\n\n3 1\n\n3 2\n\n3 3\n\n```\n\n#### Output #1\n\n```\nYES\n4 3 2 1\nNO\nYES\n1\nNO\nYES\n3 4 6 7 2 1 5\n```\n\n### Note\n\nIn the first test case, the music $(239,239)-(239,179)-(179,179)-(179,239)$ is suitable, contains all sounds, and all consecutive sounds differ either only in volume or only in pitch.\n\nIn the second test case, it can be shown that there is no suitable music with the given sounds.", "cfid": "2110E"}
{"problem_id": "2110F", "problem_title": "F. Faculty", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2110/F", "problem_statement": "In 2077, after the world was enslaved by robots, the robots decided to implement an educational reform, and now the operation of taking the modulus is only taught in the faculty of \"Ancient World History\". Here is one of the entrance tasks for this faculty:\n\nWe define the beauty of an array of positive integers $b$ as the maximum $f(b_i, b_j)$ over all pairs $1 \\leq i, j \\leq n$, where $f(x, y) = (x \\bmod y) + (y \\bmod x)$.\n\nGiven an array of positive integers $a$ of length $n$, output $n$ numbers, where the $i$-th number ($1 \\leq i \\leq n$) is the beauty of the array $a_1, a_2, \\ldots, a_i$.\n\n$x \\bmod y$ is the remainder of the division of $x$ by $y$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\leq n \\leq 10^6$) — the size of the array $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$).\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case, output $n$ integers — the beauties of all prefixes of the array $a$.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n5\n\n3 1 4 1 5\n\n7\n\n5 11 11 4 2 1 10\n\n```\n\n#### Output #1\n\n```\n0 1 4 4 5\n0 6 6 7 7 7 11\n```\n\n### Note\n\nThe beauty of the array $3$ is $0$.\n\nThe beauty of the array $3, 1$ is $f(3, 1) = 1$.\n\nThe beauty of the array $3, 1, 4$ is $f(3, 4) = 4$.\n\nThe beauty of the array $3, 1, 4, 1$ is $f(4, 3) = 4$.\n\nThe beauty of the array $3, 1, 4, 1, 5$ is $f(4, 5) = 5$.", "cfid": "2110F"}
{"problem_id": "2109E", "problem_title": "E. Binary String Wowee", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2109/E", "problem_statement": "Mouf is bored with themes, so he decided not to use any themes for this problem.\n\nYou are given a binary$^{\\text{∗}}$ string $s$ of length $n$. You are to perform the following operation exactly $k$ times:\n\n- select an index $i$ ($1 \\le i \\le n$) such that $s_i = \\mathtt{0}$;\n- then flip$^{\\text{†}}$ each $s_j$ for all indices $j$ ($1 \\le j \\le i$).\n\nYou need to count the number of possible ways to perform all $k$ operations.\n\nSince the answer could be ginormous, print it modulo $998\\,244\\,353$.\n\nTwo sequences of operations are considered different if they differ in the index selected at any step.\n\n$^{\\text{∗}}$A binary string is a string that consists only of the characters $\\mathtt{0}$ and $\\mathtt{1}$.\n\n$^{\\text{†}}$Flipping a binary character is changing it from $\\mathtt{0}$ to $\\mathtt{1}$ or vice versa.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 100$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\le k \\le n \\le 500$) — the length of the binary string $s$ and the number of times the operation must be performed, respectively.\n\nThe second line of each test case contains a binary string $s$ of length $n$ consisting of only characters $\\mathtt{0}$ and $\\mathtt{1}$.\n\nIt is guaranteed that the sum of $n$ does not exceed $500$ over all test cases.\n\n### Output\n\nFor each test case, output a single integer — the number of ways you can perform exactly $k$ operations, modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3 1\n\n010\n\n3 2\n\n000\n\n5 4\n\n01001\n\n8 8\n\n11001100\n\n20 20\n\n10010110101101010110\n\n```\n\n#### Output #1\n\n```\n2\n3\n10\n27286\n915530405\n```\n\n### Note\n\nIn the first test case, here are all the possible sequences of operations:\n\n- $\\mathtt{\\color{red}{0}10} \\xrightarrow{i = 1} \\mathtt{110}$\n- $\\mathtt{\\color{red}{010}} \\xrightarrow{i = 3} \\mathtt{101}$\n\nIn the second test case, here are all the possible sequences of operations:\n\n- $\\mathtt{\\color{red}{0}00} \\xrightarrow{i = 1} \\mathtt{\\color{red}{1}00} \\xrightarrow{i = 2} \\mathtt{010}$\n- $\\mathtt{\\color{red}{0}00} \\xrightarrow{i = 1} \\mathtt{\\color{red}{1}00} \\xrightarrow{i = 3} \\mathtt{011}$\n- $\\mathtt{\\color{red}{00}0} \\xrightarrow{i = 2} \\mathtt{\\color{red}{11}0} \\xrightarrow{i = 3} \\mathtt{001}$", "cfid": "2109E"}
{"problem_id": "2109C3", "problem_title": "C3. Hacking Numbers (Hard Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2109/C3", "problem_statement": "This is the hard version of the problem. In this version, the limit of commands you can send is described in the statement. You can make hacks only if all versions of the problem are solved.\n\nThis is an interactive problem.\n\nWelcome, Duelists! In this interactive challenge, there is an unknown integer $x$ ($1 \\le x \\le 10^9$). You must make it equal to a given integer in the input $n$. By harnessing the power of \"Mathmech\" monsters, you can send a command to do one of the following:\n\nCommandConstraintResultCaseUpdateJury's response\"add $y$\"$-10^{18} \\le y \\le 10^{18}\n\n$$\\mathrm{res} = x + y$$\n\ntext{if } 1 \\le \\mathrm{res} \\le 10^{18}\n\n$$x \\leftarrow \\mathrm{res}$\"1\"$\\mathrm{else}$$\n\nx \\leftarrow x$\"0\"\"mul $y$\"$1 \\le y \\le 10^{18}\n\n$$\\mathrm{res} = x \\cdot y$$\n\ntext{if } 1 \\le \\mathrm{res} \\le 10^{18}\n\n$$x \\leftarrow \\mathrm{res}$\"1\"$\\mathrm{else}$$\n\nx \\leftarrow x$\"0\"\"div $y$\"$1 \\le y \\le 10^{18}\n\n$$\\mathrm{res} = x/y$$\n\ntext{if } y$ divides $x\n\n$$x \\leftarrow \\mathrm{res}$\"1\"$\\mathrm{else}$$\n\nx \\leftarrow x$\"0\"\"digit\"—$\\\\mathrm{res} = S(x)$$^{\\\\text{∗}}$—$x \\leftarrow \\mathrm{res}$\"1\"\n\nLet $f(n)$ be the minimum integer such that there is a sequence of $f(n)$ commands that transforms $x$ into $n$ for all $x(1 \\le x \\le 10^9)$. You do not know the value of $x$ in advance. Find $f(n)$ such that, no matter what $x$ is, you can always transform it into $n$ using at most $f(n)$ commands.\n\nYour task is to change $x$ into $n$ using at most $f(n)$ commands.\n\n$^{\\\\text{∗}}$$S(n)$ is a function that returns the sum of all the individual digits of a non-negative integer $n$. For example, $S(123) = 1 + 2 + 3 = 6$\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 5000$). The description of the test cases follows.\n\nThe first and only line of each test case contains one integer $n$ ($1 \\le n \\le 10^9$).\n\n### Interaction\n\nThe interaction for each test case begins by reading the integer $n$.\n\nTo send a command, output a line in the following format:\n\n- \"add $y$\" Add some integer $y$ ($-10^{18} \\le y \\le 10^{18}$) to $x$.\nThe jury will output \"1\" if $x + y$ is within $[1, 10^{18}]$ (successful), and \"0\" otherwise. If successful, update $x \\leftarrow x + y$.\n\n- \"mul $y$\" Multiply $x$ by a positive integer $y$ ($1 \\le y \\le 10^{18}$).\nThe jury will output \"1\" if $x \\cdot y$ is within $[1, 10^{18}]$ (successful), and \"0\" otherwise. If successful, update $x \\leftarrow x \\cdot y$.\n\n- \"div $y$\" Divide $x$ by a positive integer $y$ ($1 \\le y \\le 10^{18}$).\nThe jury will output \"1\" if $y$ is a divisor of $x$ (successful), and \"0\" otherwise. If successful, update $x \\leftarrow \\frac{x}{y}$.\n\n- \"digit\" Make $x$ equal to the sum of its digits.\nThe jury will always output \"1\" and update $x \\leftarrow S(x)$.\n\n\nNote that commands are case sensitive.\n\nWhen you have determined that $x$ is equal to $n$, output a line in the following format:\n\n- \"!\" — where the jury will output a \"1\" if $n$ is equal to $x$, and \"-1\" otherwise.\n\nNote that answering does not count toward your limit of commands.\n\nIf your program makes more than $f(n)$ commands ($f(n)$ is described above) for one test case, or makes an invalid command, then the response to the command will be \"-1\". After receiving such a response, your program should immediately terminate to receive the verdict Wrong Answer. Otherwise, it may receive any other verdict.\n\nAfter printing a command, do not forget to output the end of the line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- sys.stdout.flush() in Python;\n- std::io::stdout().flush() in Rust;\n- see the documentation for other languages.\n\nThe interactor is non-adaptive. The unknown integer $x$ does not change during the interaction.\n\nHacks\n\nTo hack, use the following format.\n\nThe first line should contain a single integer $t$ ($1 \\leq t \\leq 5000$) — the number of test cases.\n\nThe first line of each test case should contain two positive integers $n$ and $x$ ($1 \\leq n,x \\leq 10^9$) — denoting the unknown integer and the target value to which it should be made equal, respectively.\n\n### Example\n\n#### Input #1\n\n```\n2\n100\n\n0\n\n1\n\n1\n\n1\n\n5\n\n1\n\n1\n\n1\n```\n\n#### Output #1\n\n```\n\nadd -10\n\nadd 1\n\nmul 10\n\n!\n\ndigit\n\ndiv 2\n\n!\n```\n\n### Note\n\nSolutionJuryExplanation$\\texttt{2}$There are 2 test cases.$\\texttt{100}$In the first test case, the unknown integer $x = 9$ and we have to make it equal to $n = 100$.$\\texttt{add -10}\n\n$$\\texttt{0}$The answer to \"add -10\" is \"0\". This means that the addition command was not successful as $x + y = 9 + (-10) \\le 0$, and $x$ remains $9$ after the command$\\texttt{add 1}$$\n\ntexttt{1}$The answer to \"add 1\" is \"1\". This means that the addition command was successful as $x + y = 9 + 1 = 10$, and $x$ changes to $10$ after the command.$\\texttt{mul 10}\n\n$$\\texttt{1}$The answer to \"mul 10\" is \"1\". This means that the multiplication command was successful as $x \\cdot y = 10 \\cdot 10 = 100$, and $x$ changes to $100$ after the command.$\\texttt{!}$$\n\ntexttt{1}$The answer to \"!\" is \"1\". This means you have determined that $x$ equals $n$.$\\texttt{5}$In the second test case, the unknown integer $x = 1234$ and we have to make it equal to $n = 5$.$\\texttt{digit}\n\n$$\\texttt{1}$The answer to \"digit\" is \"1\". This means that $x$ turned into the sum of its digits $1 + 2 + 3 + 4 = 10$, and $x$ changes to $10$ after the command.$\\texttt{div 2}$$\n\ntexttt{1}$The answer to \"div 2\" is \"1\". This means that the division command was successful as $y = 2$ is a divisor of $x = 10$, and $x$ changes to $\\frac{x}{y} = \\frac{10}{2} = 5$ after the command.$\\texttt{!}$$\\texttt{1}$The answer to \"!\" is \"1\". This means you have determined that $x$ equals $n$.\n\nNote that the empty lines in the example input and output are for the sake of clarity, and do not occur in the real interaction.", "cfid": "2109C3"}
{"problem_id": "2109D", "problem_title": "D. D/D/D", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2109/D", "problem_statement": "Of course, a problem with the letter D is sponsored by Declan Akaba.\n\nYou are given a simple, connected, undirected graph with $n$ vertices and $m$ edges. The graph contains no self-loops or multiple edges. You are also given a multiset $A$ consisting of $\\\\ell$ elements: \n\n$$ A = \\{A_1, A_2, \\ldots, A_\\ell\\} $$\n\nStarting from vertex $1$, you may perform the following move any number of times, as long as the multiset $A$ is not empty:\n\n- Select an element $k \\in A$ and remove it from the multiset . You must remove exactly one occurrence of $k$ from $A$.\n- Traverse any walk$^{\\text{∗}}$ of exactly $k$ edges to reach some vertex (possibly the same one you started from).\n\nFor each $i$ ($1 \\le i \\le n$), determine whether there exists a sequence of such moves that starts at vertex $1$ and ends at vertex $i$, using the original multiset $A$.\n\nNote that the check for each vertex $i$ is independent — you restart from vertex $1$ and use the original multiset $A$ for each case.\n\n$^{\\text{∗}}$A walk of length $k$ is a sequence of vertices $v_0, v_1, \\ldots, v_{k - 1}, v_k$ such that each consecutive pair of vertices $(v_i, v_{i + 1})$ is connected by an edge in the graph. The sequence may include repeated vertices.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n$, $m$, and $\\ell$ ($2 \\leq n \\leq 2 \\cdot 10^5$, $n-1 \\leq m \\leq 4 \\cdot 10^5$, $1 \\leq \\ell \\leq 2 \\cdot 10^5$) — the number of vertices, the number of edges, and the size of the multiset, respectively.\n\nThe second line of each test case contains $\\ell$ integers $A_1, A_2, \\ldots, A_{\\ell}$ ($1 \\leq A_i \\leq 10^4$) — the elements of the multiset.\n\nEach of the following $m$ lines contains two integers $u$ and $v$ ($1 \\le u < v \\le n$) — the endpoints of an edge in the graph.\n\nIt is guaranteed that the edges form a simple, connected graph without self-loops or multiple edges.\n\nIt is guaranteed that the sum of $n$, the sum of $m$, and the sum of $\\ell$ over all test cases does not exceed $2 \\cdot 10^5$, $4 \\cdot 10^5$, and $2 \\cdot 10^5$, respectively.\n\n### Output\n\nFor each test case, output a binary string of length $n$, where the $i$-th character is $\\mathtt{1}$ if there exists a sequence of moves ending at vertex $i$, and $\\mathtt{0}$ otherwise.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n6 5 2\n\n2 3\n\n1 2\n\n2 3\n\n3 4\n\n4 5\n\n5 6\n\n5 5 1\n\n5\n\n1 2\n\n2 3\n\n3 4\n\n4 5\n\n3 5\n\n5 4 3\n\n100 200 300\n\n1 2\n\n1 3\n\n1 4\n\n2 5\n\n```\n\n#### Output #1\n\n```\n111101\n11111\n10001\n```\n\n### Note\n\nIn the first test case:\n\n- Vertex $1$ is reachable without making any moves.\n- Vertex $2$ is reachable by selecting element $3 \\in A$; one possible walk is \\[$1 \\rightarrow 2 \\rightarrow 1 \\rightarrow 2$\\].\n- Vertex $3$ can be reached by selecting element $2 \\in A$ and taking the walk \\[$1 \\rightarrow 2 \\rightarrow 3$\\].\n- Vertex $4$ is reachable by selecting element $3 \\in A$ and following the walk \\[$1 \\rightarrow 2 \\rightarrow 3 \\rightarrow 4$\\].\n- Vertex $5$ is not reachable by any valid sequence of moves.\n- Vertex $6$ is reachable by first selecting element $2 \\in A$ and taking the walk \\[$1 \\rightarrow 2 \\rightarrow 3$\\], followed by selecting element $3 \\in A$ and taking the walk \\[$3 \\rightarrow 4 \\rightarrow 5 \\rightarrow 6$\\].", "cfid": "2109D"}
{"problem_id": "2109F", "problem_title": "F. Penguin Steps", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2109/F", "problem_statement": "Mouf, the clever master of Darkness, and Fouad, the brave champion of Light, have entered the Grid Realm once more. This time, they have found the exit, but it is guarded by fierce monsters! They must fight with their bare hands instead of summoning monsters!\n\nMouf and Fouad are standing on an $n \\times n$ grid. Each cell $(i, j)$ has a value $a_{i,j}$ and a color. The color of a cell is white if $c_{i,j} = 0$ and black if $c_{i,j} = 1$.\n\nMouf starts at the top-left corner $(1, 1)$, and Fouad starts at the bottom-left corner $(n, 1)$. Both are trying to reach the exit cell at $(r, n)$.\n\nA path is defined as a sequence of adjacent cells (sharing a horizontal or vertical edge). The cost of a path is the maximum value of $a_{i, j}$ among all cells included in the path (including the first and last cells).\n\nLet:\n\n- $\\mathrm{dis}_M$ denote the minimum possible cost of a valid path from Mouf's starting position $(1, 1)$ to the exit $(r, n)$;\n- $\\mathrm{dis}_F$ denote the minimum possible cost of a valid path from Fouad's starting position $(n, 1)$ to the exit $(r, n)$.\n\nBefore moving, Mouf can perform up to $k$ operations. In each operation, he may select any black cell and increment its value by $1$ (possibly choosing the same cell multiple times).\n\nMouf wants to maximize $\\mathrm{dis}_F$ while ensuring that his own cost $\\mathrm{dis}_M$ remains unchanged (as if he performed no operations). If Mouf acts optimally, what are the values of $\\mathrm{dis}_M$ and $\\mathrm{dis}_F$?\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^3$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n$, $r$, and $k$ ($2 \\le n \\le 300$, $1 \\le r \\le n$, $0 \\le k \\le 10^6$) — the length of the grid, the row number of the exit cell, and the number of allowed operations.\n\nThe $i$-th of the next $n$ lines contains $n$ integers $a_{i,1}, a_{i,2}, \\ldots, a_{i,n}$ ($1 \\le a_{ij} \\le 10^6$) — the values of the cells in the $i$-th row.\n\nThe $i$-th of the next $n$ lines contains a binary string $c_i$ of length $n$ — denoting the color of the cells in the $i$-th row (cell $(i,j)$ is white if $c_{i,j}=\\mathtt{0}$ and black if $c_{i,j} = \\mathtt{1}$).\n\nIt is guaranteed that the sum of $n^2$ over all test cases does not exceed $9 \\cdot 10^4$.\n\n### Output\n\nFor each test case, output two integers — $\\mathrm{dis}_M$ and $\\mathrm{dis}_F$ if Mouf performs the operations optimally.\n\n### Examples\n\n#### Input #1\n\n```\n\n4\n\n2 1 30\n\n2 2\n\n1 1\n\n11\n\n01\n\n3 3 5\n\n9 2 2\n\n2 3 2\n\n2 2 2\n\n111\n\n111\n\n010\n\n7 3 12\n\n3 3 3 3 5 1 1\n\n9 4 8 3 3 5 5\n\n9 4 8 7 3 3 3\n\n4 4 4 4 9 4 9\n\n4 4 4 4 9 4 9\n\n1 4 4 4 4 4 9\n\n1 1 4 4 9 9 9\n\n1111111\n\n1011111\n\n1011111\n\n1111111\n\n1111101\n\n1110001\n\n0111111\n\n5 3 1419\n\n1219 678 1672 1858 1210\n\n535 732 1316 345 296\n\n1106 3060 507 216 1943\n\n194 2124 47 87 4818\n\n1007 329 1425 284 660\n\n00010\n\n10111\n\n00101\n\n10001\n\n10100\n\n```\n\n#### Output #1\n\n```\n2 2\n9 5\n3 8\n1943 2426\n```\n\n#### Input #2\n\n```\n\n1\n\n8 2 2216\n\n429 589 675 2022 259 452 733 967\n\n1097 2880 256 1894 259 1052 345 692\n\n911 831 513 1243 200 14 854 217\n\n611 882 681 279 54 719 1469 1885\n\n504 2524 1332 17 3113 34 1281 717\n\n498 1896 1800 2231 731 364 69 1247\n\n1397 399 68 448 1337 1076 166 3786\n\n16 857 91 475 106 102 1517 1949\n\n01010100\n\n00101100\n\n00001000\n\n10100110\n\n00001000\n\n00100000\n\n01100011\n\n00001000\n\n```\n\n#### Output #2\n\n```\n733 1671\n```\n\n### Note\n\nIn the first test case:\n\n- Although Mouf can perform up to $30$ operations, he can not increase $\\mathrm{dis}_F$ beyond $2$; he is restricted to applying operations only on $(2,2)$, because performing operations on $(1,1)$ or $(1,2)$ would change $\\mathrm{dis}_M$.\n- Mouf may apply all $30$ operations on cell $(2,2)$; however, Fouad can still follow the path $(2,1) \\rightarrow (1,1) \\rightarrow (1,2)$ with a cost of $2$.\n\nIn the second test case, Mouf can apply two operations on $(2,2)$ and three operations on $(3,2)$. It can be shown that Mouf can not increase $\\mathrm{dis}_F$ beyond $5$.", "cfid": "2109F"}
{"problem_id": "2101D", "problem_title": "D. Mani and Segments", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2101/D", "problem_statement": "An array $b$ of length $|b|$ is cute if the sum of the length of its Longest Increasing Subsequence (LIS) and the length of its Longest Decreasing Subsequence (LDS)$^{\\text{∗}}$ is exactly one more than the length of the array. More formally, the array $b$ is cute if $\\operatorname{LIS}(b) + \\operatorname{LDS}(b) = |b| + 1$.\n\nYou are given a permutation $a$ of length $n$$^{\\\\text{†}}$. Your task is to count the number of non-empty subarrays$^{\\\\text{‡}}$ of permutation $a$ that are cute.\n\n$^{\\text{∗}}$A sequence $x$ is a subsequence of a sequence $y$ if $x$ can be obtained from $y$ by the deletion of several (possibly, zero or all) element from arbitrary positions.\n\nThe longest increasing (decreasing) subsequence of an array is the longest subsequence such that its elements are ordered in strictly increasing (decreasing) order.\n\n$^{\\text{†}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n$^{\\text{‡}}$An array $x$ is a subarray of an array $y$ if $x$ can be obtained from $y$ by the deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1\\le n\\le 2 \\cdot 10^5 $) — the length of permutation $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le n$) — the elements of permutation $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the number of cute non-empty subarrays of permutation $a$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3\n\n3 1 2\n\n5\n\n2 3 4 5 1\n\n4\n\n3 4 1 2\n\n7\n\n1 2 3 4 5 6 7\n\n10\n\n7 8 2 4 5 10 1 3 6 9\n\n```\n\n#### Output #1\n\n```\n6\n15\n9\n28\n36\n```\n\n### Note\n\nIn the first test case, all of the $6$ non-empty subarrays are cute:\n\n- $[3]$: $\\operatorname{LIS}([3]) + \\operatorname{LDS}([3]) = 1 + 1 = 2$.\n- $[1]$: $\\operatorname{LIS}([1]) + \\operatorname{LDS}([1]) = 1 + 1 = 2$.\n- $[2]$: $\\operatorname{LIS}([2]) + \\operatorname{LDS}([2]) = 1 + 1 = 2$.\n- $[3, 1]$: $\\operatorname{LIS}([3, 1]) + \\operatorname{LDS}([3, 1]) = 1 + 2 = 3$.\n- $[1, 2]$: $\\operatorname{LIS}([1, 2]) + \\operatorname{LDS}([1, 2]) = 2 + 1 = 3$.\n- $[3, 1, 2]$: $\\operatorname{LIS}([3, 1, 2]) + \\operatorname{LDS}([3, 1, 2]) = 2 + 2 = 4$.\n\nIn the second test case, one of the cute subarrays is $[2, 3, 4, 5, 1]$ as $\\operatorname{LIS}([2, 3, 4, 5, 1]) = 4$ and $\\operatorname{LDS}([2, 3, 4, 5, 1]) = 2$, which satisfies $4 + 2 = 5 + 1$.", "cfid": "2101D"}
{"problem_id": "2101C", "problem_title": "C. 23 Kingdom", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2101/C", "problem_statement": "The distance of a value $x$ in an array $c$, denoted as $d_x(c)$, is defined as the largest gap between any two occurrences of $x$ in $c$.\n\nFormally, $d_x(c) = \\max(j - i)$ over all pairs $i < j$ where $c_i = c_j = x$. If $x$ appears only once or not at all in $c$, then $d_x(c) = 0$.\n\nThe beauty of an array is the sum of the distances of each distinct value in the array. Formally, the beauty of an array $c$ is equal to $\\sum\\limits_{1\\le x\\le n} d_x(c)$.\n\nGiven an array $a$ of length $n$, an array $b$ is nice if it also has length $n$ and its elements satisfy $1\\le b_i\\le a_i$ for all $1\\le i\\le n$. Your task is to find the maximum possible beauty of any nice array.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1\\le n\\le 2\\cdot10^5$) — the length of array $a$.\n\nThe second line of each test case contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($1\\le a_i\\le n$) — the elements of array $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2\\cdot10^5$.\n\n### Output\n\nFor each test case, output a single integer representing the maximum possible beauty among all nice arrays.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n4\n\n1 2 1 2\n\n2\n\n2 2\n\n10\n\n1 2 1 5 1 2 2 1 1 2\n\n8\n\n1 5 2 8 4 1 4 2\n\n```\n\n#### Output #1\n\n```\n4\n1\n16\n16\n```\n\n### Note\n\nIn the first test case, if $b = [1, 2, 1, 2]$, then $d_1(b) = 3 - 1 = 2$ and $d_2(b) = 4 - 2 = 2$, resulting in a beauty of $2 + 2 = 4$. It can be proven that there are no nice arrays with a beauty greater than $4$.\n\nIn the second test case, both $b = [1, 1]$ and $b = [2, 2]$ are valid solutions with a beauty of $1$.\n\nIn the third test case, if $b = [1, 2, 1, 4, 1, 2, 1, 1, 1, 2]$ with $d_1(b) = 9 - 1 = 8$, $d_2(b) = 10 - 2 = 8$, and $d_4(b) = 0$, resulting in a beauty of $16$.", "cfid": "2101C"}
{"problem_id": "2107D", "problem_title": "D. Apple Tree Traversing", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2107/D", "problem_statement": "There is an apple tree with $n$ nodes, initially with one apple at each node. You have a paper with you, initially with nothing written on it.\n\nYou are traversing on the apple tree, by doing the following action as long as there is at least one apple left:\n\n- Choose an apple path $(u,v)$. A path $(u,v)$ is called an apple path if and only if for every node on the path $(u,v)$, there's an apple on it.\n- Let $d$ be the number of apples on the path, write down three numbers $(d,u,v)$, in this order, on the paper.\n- Then remove all the apples on the path $(u,v)$.\n\nHere, the path $(u, v)$ refers to the sequence of vertices on the unique shortest walk from $u$ to $v$.\n\nLet the number sequence on the paper be $a$. Your task is to find the lexicographically largest possible sequence $a$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a number $n$ ($1 \\le n \\le 1.5 \\cdot 10^5$).\n\nThe following $n-1$ lines of each test case contain two numbers $u,v$ ($1 \\le u,v \\le n$). It's guaranteed that the input forms a tree.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $1.5 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the lexicographically largest sequence possible $a_1, a_2, \\ldots, a_{|a|}$. It can be shown that $|a| \\le 3 \\cdot n$.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n4\n\n1 2\n\n1 3\n\n1 4\n\n4\n\n2 1\n\n2 4\n\n2 3\n\n5\n\n1 2\n\n2 3\n\n3 4\n\n4 5\n\n1\n\n8\n\n6 3\n\n3 5\n\n5 4\n\n4 2\n\n5 1\n\n1 8\n\n3 7\n\n6\n\n3 2\n\n2 6\n\n2 5\n\n5 4\n\n4 1\n\n```\n\n#### Output #1\n\n```\n3 4 3 1 2 2\n3 4 3 1 1 1\n5 5 1\n1 1 1\n5 8 7 2 4 2 1 6 6\n5 6 1 1 3 3\n```\n\n### Note\n\nIn the first test case, we do the following steps:\n\n- Choose the apple path $(4, 3)$. This path consists of the nodes $4, 1, 3$, and each of them have an apple (so it is a valid apple path). $d = 3$ as there are $3$ apples on this path. Append $3, 4, 3$ in that order to our sequence $a$. Now, remove the apples from these $3$ vertices.\n- Only node $2$ has an apple left. Choose the apple path $(2, 2)$. This path only consists of the single node $2$. $d = 1$ as there is $1$ apple on this path. Append $1, 2, 2$ in that order to our sequence $a$ and remove the apple from $2$.\n\nThe final sequence is thus $[3, 4, 3, 1, 2, 2]$. It can be shown this is the lexicographically largest sequence possible.", "cfid": "2107D"}
{"problem_id": "2107F2", "problem_title": "F2. Cycling (Hard Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2107/F2", "problem_statement": "This is the hard version of the problem. The difference between the versions is that in this version, $1\\le n\\le 10^6$ and you need to output the answer for each prefix. You can hack only if you solved all versions of this problem.\n\nLeo works as a programmer in the city center, and his lover teaches at a high school in the suburbs. Every weekend, Leo would ride his bike to the suburbs to spend a nice weekend with his lover.\n\nThere are $n$ cyclists riding in front of Leo on this road right now. They are numbered $1$, $2$, $\\ldots$, $n$ from front to back. Initially, Leo is behind the $n$-th cyclist. The $i$-th cyclist has an agility value $a_i$.\n\nLeo wants to get ahead of the $1$-st cyclist. Leo can take the following actions as many times as he wants:\n\n- Assuming that the first person in front of Leo is cyclist $i$, he can go in front of cyclist $i$ for a cost of $a_i$. This puts him behind cyclist $i - 1$.\n- Using his super powers, swap $a_i$ and $a_j$ ($1\\le i < j\\le n$) for a cost of $(j - i)$.\n\nLeo wants to know the minimum cost to get in front of the $1$-st cyclist.\n\nIn addition, he wants to know the answer for each $1\\le i \\le n$, $[a_1, a_2, \\ldots, a_i]$ as the original array. The problems of different $i$ are independent. To be more specific, in the $i$-th problem, Leo starts behind the $i$-th cyclist instead of the $n$-th cyclist, and cyclists numbered $i + 1, i + 2, \\ldots, n$ are not present.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a positive integer $n$ ($1 \\leq n \\leq 10^6$), representing the number of the cyclists.\n\nThe second line of each test case contains $n$ integers $a_1, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case, print $n$ integers, the answers for the array $[a_1, a_2, \\ldots, a_i]$ for each $i = 1, 2, \\ldots n$ in this order.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3\n\n1 2 4\n\n4\n\n1 1 1 1\n\n2\n\n1 2\n\n4\n\n4 1 3 2\n\n```\n\n#### Output #1\n\n```\n1 3 7\n1 2 3 4\n1 3\n4 3 6 8\n```\n\n### Note\n\nIn the first test case, one possible way to move from the position behind the $n$-th cyclist to the position in front of the $1$-st cyclist is:\n\n- Leo swaps $a_2$ $(i=2)$ and $a_3$ $(j=3)$, then the array becomes $[1,4,2]$; it costs $j-i=3-2=1$.\n- Leo is behind the $3$-rd cyclist and moves behind the $2$-nd cyclist; it costs $a_3=2$.\n- Leo swaps $a_1$ $(i=1)$ and $a_2$ $(j=2)$, then the array becomes $[4,1,2]$; it costs $j-i=2-1=1$.\n- Leo is behind the $2$-nd cyclist and moves behind the $1$-st cyclist; it costs $a_2=1$.\n- Leo swaps $a_1$ $(i=1)$ and $a_2$ $(j=2)$, then the array becomes $[1,4,2]$; it costs $j-i=2-1=1$.\n- Leo moves ahead of the $1$-st cyclist; it costs $a_1=1$.\n\nSo the total cost is $1+2+1+1+1+1=7$. It can be proved that $7$ is the minimum cost.\n\nIn the second test case, to move ahead of the $1$-st cyclist from the position behind the $n$-th cyclist, Leo should not swap anyone's agility value. The total cost is $1+1+1+1=4$.", "cfid": "2107F2"}
{"problem_id": "2107F1", "problem_title": "F1. Cycling (Easy Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2107/F1", "problem_statement": "This is the easy version of the problem. The difference between the versions is that in this version, $1\\le n\\le 5\\cdot 10^3$ and you don't need to output the answer for each prefix. You can hack only if you solved all versions of this problem.\n\nLeo works as a programmer in the city center, and his lover teaches at a high school in the suburbs. Every weekend, Leo would ride his bike to the suburbs to spend a nice weekend with his lover.\n\nThere are $n$ cyclists riding in front of Leo on this road right now. They are numbered $1$, $2$, $\\ldots$, $n$ from front to back. Initially, Leo is behind the $n$-th cyclist. The $i$-th cyclist has an agility value $a_i$.\n\nLeo wants to get ahead of the $1$-st cyclist. Leo can take the following actions as many times as he wants:\n\n- Assuming that the first person in front of Leo is cyclist $i$, he can go in front of cyclist $i$ for a cost of $a_i$. This puts him behind cyclist $i - 1$.\n- Using his super powers, swap $a_i$ and $a_j$ ($1\\le i < j\\le n$) for a cost of $(j - i)$.\n\nLeo wants to know the minimum cost to get in front of the $1$-st cyclist. Here you only need to print the answer for the whole array, i.e. $[a_1, a_2, \\ldots, a_n]$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^3$). The description of the test cases follows.\n\nThe first line of each test case contains a positive integer $n$ ($1 \\leq n \\leq 5\\cdot 10^3$), representing the number of the cyclists.\n\nThe second line of each test case contains $n$ integers $a_1, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5\\cdot 10^3$.\n\n### Output\n\nFor each test case, print one integer representing the minimum cost for Leo to go from behind the $n$-th cyclist to in front of the $1$-st cyclist.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3\n\n1 2 4\n\n4\n\n1 1 1 1\n\n2\n\n1 2\n\n4\n\n4 1 3 2\n\n```\n\n#### Output #1\n\n```\n7\n4\n3\n8\n```\n\n### Note\n\nIn the first test case, one possible way to move from the position behind the $n$-th cyclist to the position in front of the $1$-st cyclist is:\n\n- Leo swaps $a_2$ $(i=2)$ and $a_3$ $(j=3)$, then the array becomes $[1,4,2]$; it costs $j-i=3-2=1$.\n- Leo is behind the $3$-rd cyclist and moves behind the $2$-nd cyclist; it costs $a_3=2$.\n- Leo swaps $a_1$ $(i=1)$ and $a_2$ $(j=2)$, then the array becomes $[4,1,2]$; it costs $j-i=2-1=1$.\n- Leo is behind the $2$-nd cyclist and moves behind the $1$-st cyclist; it costs $a_2=1$.\n- Leo swaps $a_1$ $(i=1)$ and $a_2$ $(j=2)$, then the array becomes $[1,4,2]$; it costs $j-i=2-1=1$.\n- Leo moves ahead of the $1$-st cyclist; it costs $a_1=1$.\n\nSo the total cost is $1+2+1+1+1+1=7$. It can be proved that $7$ is the minimum cost.\n\nIn the second test case, to move ahead of the $1$-st cyclist from the position behind the $n$-th cyclist, Leo should not swap anyone's agility value. The total cost is $1+1+1+1=4$.", "cfid": "2107F1"}
{"problem_id": "2107E", "problem_title": "E. Ain and Apple Tree", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2107/E", "problem_statement": "If I was also hit by an apple falling from an apple tree, could I become as good at physics as Newton?\n\nTo be better at physics, Ain wants to build an apple tree so that she can get hit by apples on it. Her apple tree has $n$ nodes and is rooted at $1$. She defines the weight of an apple tree as $\\sum \\limits_{i=1}^n \\sum \\limits_{j=i+1}^n \\text{dep}(\\operatorname{lca}(i,j))$.\n\nHere, $\\text{dep}(x)$ is defined as the number of edges on the unique shortest path from node $1$ to node $x$. $\\operatorname{lca}(i, j)$ is defined as the unique node $x$ with the largest value of $\\text{dep}(x)$ and which is present on both the paths $(1, i)$ and $(1, j)$.\n\nFrom some old books Ain reads, she knows that Newton's apple tree's weight is around $k$, but the exact value of it is lost.\n\nAs Ain's friend, you want to build an apple tree with $n$ nodes for her, and the absolute difference between your tree's weight and $k$ should be at most $1$, i.e. $|\\text{weight} - k| \\le 1$. Unfortunately, this is not always possible, in this case please report it.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two numbers $n,k$ ($2 \\le n \\le 10^5,0 \\le k \\le 10^{15}$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, first output $\\texttt{Yes}$ if a solution exists or $\\texttt{No}$ if no solution exists. You may print each character in either case, for example $\\texttt{YES}$ and $\\texttt{yEs}$ will also be accepted.\n\nIf there's at least one solution, print $n-1$ lines and each line contains two numbers $u,v$ $(1 \\le u,v \\le n)$ represents the apple tree.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n2 1\n\n2 2\n\n4 0\n\n5 7\n\n5 5\n\n```\n\n#### Output #1\n\n```\nYes\n1 2\nNo\nYes\n1 2\n1 3\n1 4\nYes\n1 3\n3 5\n4 5\n3 2\nYes\n1 2\n2 3\n2 4\n2 5\n```\n\n### Note\n\nIn the first test case, we can check that the weight is $0$. This satisfies the condition because $k = 1$ and so the absolute difference is only $1$.\n\nIn the second test case, there exists no solution because there are no trees of $2$ nodes with weights of either $1, 2$ or $3$.", "cfid": "2107E"}
{"problem_id": "2108F", "problem_title": "F. Fallen Towers", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2108/F", "problem_statement": "Pizano built an array $a$ of $n$ towers, each consisting of $a_i \\ge 0$ blocks.\n\nPizano can knock down a tower so that the next $a_i$ towers grow by $1$. In other words, he can take the element $a_i$, increase the next $a_i$ elements by one, and then set $a_i$ to $0$. The blocks that fall outside the array of towers disappear. If Pizano knocks down a tower with $0$ blocks, nothing happens.\n\nPizano wants to knock down all $n$ towers in any order, each exactly once. That is, for each $i$ from $1$ to $n$, he will knock down the tower at position $i$ exactly once.\n\nMoreover, the resulting array of tower heights must be non-decreasing. This means that after he knocks down all $n$ towers, for any $i < j$, the tower at position $i$ must not be taller than the tower at position $j$.\n\nYou are required to output the maximum $\\text{MEX}$ of the resulting array of tower heights.\n\nThe $\\text{MEX}$ of an array is the smallest non-negative integer that is not present in the array.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains an integer $n$ ($1 \\leq n \\leq 10^5$) — the number of towers.\n\nThe second line of each test case contains $n$ integers — the initial heights of the towers $a_1, \\ldots, a_n$ ($0 \\leq a_i \\leq 10^9$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, output a single integer — the maximum $\\text{MEX}$ of the final array.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n2\n\n1 2\n\n4\n\n2 1 0 0\n\n10\n\n5 9 3 7 1 5 1 5 4 3\n\n10\n\n1 1 1 1 1 1 1 1 1 1\n\n10\n\n3 2 1 0 3 2 1 0 3 2\n\n5\n\n5 2 0 5 5\n\n1\n\n1000000000\n\n7\n\n4 0 1 0 2 7 7\n\n```\n\n#### Output #1\n\n```\n2\n3\n7\n4\n5\n4\n1\n3\n```\n\n### Note\n\nExplanation for the first test case.\n\n![](https://espresso.codeforces.com/b27f3ad036c335f58fe3b07c11f325fd39450091.png)\n\nExplanation for the second test case. Note that all towers were knocked down exactly once, and the final array of heights is non-decreasing.\n\n![](https://espresso.codeforces.com/5d8740d0c655899ee758c6d450d7dca858b1f65d.png)", "cfid": "2108F"}
{"problem_id": "2108D", "problem_title": "D. Needle in a Numstack", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2108/D", "problem_statement": "This is an interactive problem.\n\nYou found the numbers $k$ and $n$ in the attic, but lost two arrays $A$ and $B$.\n\nYou remember that:\n\n- $|A| + |B| = n$, the total length of the arrays is $n$.\n- $|A| \\geq k$ and $|B| \\geq k$, the length of each array is at least $k$.\n- The arrays consist only of numbers from $1$ to $k$.\n- If you take any $k$ consecutive elements from array $A$, they will all be different. Also, if you take any $k$ consecutive elements from array $B$, they will all be different.\n\nFortunately, a kind spirit that settled in the attic found these arrays and concatenated them into an array $C$ of length $n$. That is, the elements of array $A$ were first written into array $C$, followed by the elements of array $B$.\n\nYou can ask the kind spirit up to $250$ questions. Each question contains an index $i$ ($1 \\leq i \\leq n$). In response, you will receive the $i$-th element of the concatenated array $C$.\n\nYou need to find the lengths of arrays $A$ and $B$, or report that it is impossible to determine them uniquely.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 300$). The description of the test cases follows.\n\nThe only line of each test case contains two integers $n$ and $k$ ($1 \\leq k \\leq 50$, $2 k \\leq n \\leq 10^{6}$).\n\nNote that the sum of $n$ across test cases is not limited.\n\n### Interaction\n\nThe interaction for each test case begins with reading the integer $n$.\n\nThen you can make up to $250$ queries.\n\nTo make a query, output a string in the format \"? x\" (without quotes) ($1 \\leq x \\leq n$). After each query, read an integer — the answer to your query.\n\nIf you make too many queries, you will receive a verdict of Wrong answer.\n\nTo report your answer, output a string in the format \"! a b\" (without quotes), where $a$ and $b$ are the lengths of arrays $A$ and $B$ that you found, respectively. The answer is not counted when counting the number of queries.\n\nIf it is impossible to determine the lengths of the arrays uniquely, output \"! -1\" (without quotes). Note that if you answer $-1$ while there is a sequence of at most $250$ queries that uniquely determines the lengths of arrays, you will get a Wrong answer verdict.\n\nIt is guaranteed that there are arrays $A$ and $B$ that do not contradict the statement, for which the interactor output is correct.\n\nThe interactor is not adaptive, which means that the answer is known before the participant makes queries and does not depend on the queries made by the participant.\n\nIf your program makes more than $250$ queries, your program should immediately terminate to receive the verdict Wrong answer. Otherwise, you can get an arbitrary verdict because your solution will continue to read from a closed stream.\n\nAfter outputting a query, do not forget to output a newline and flush the output buffer. Otherwise, you will receive a verdict of \"IL\" (Idleness limit exceeded). To flush the buffer, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- flush(output) in Pascal;\n- stdout.flush() in Python;\n- see the documentation for other languages.\n\nHacks\n\nHacks are disabled for this problem.\n\n### Example\n\n#### Input #1\n\n```\n6\n5 2\n\n1\n\n2\n\n2\n\n18 4\n\n2\n\n4\n\n1\n\n1\n\n4\n\n3 1\n\n10 5\n\n9 3\n\n3\n\n3\n\n2\n\n12 4\n\n1\n\n3\n\n1\n\n3\n\n1\n\n3\n```\n\n#### Output #1\n\n```\n\n? 1\n\n? 2\n\n? 3\n\n! 2 3\n\n? 9\n\n? 13\n\n? 10\n\n? 14\n\n? 6\n\n! 9 9\n\n! -1\n\n! 5 5\n\n? 3\n\n? 6\n\n? 9\n\n! 6 3\n\n? 1\n\n? 2\n\n? 5\n\n? 6\n\n? 9\n\n? 10\n\n! -1\n```\n\n### Note\n\nConsider the first example. We queried the first $3$ elements out of $5$. Now we know that the array $C$ looks like $[1, 2, 2, ?, ?]$. We know for sure that the third element is not from array $A$ — because according to the condition, any $k$ consecutive elements (in our case $k = 2$) in array $A$ are different. Thus, the third element is definitely located in array $B$. This means that the length of array $A$ is $2$, and the length of array $B$ is $3$.\n\nThe picture shows arrays from all test cases. The elements whose values were requested are marked in yellow.\n\n![](https://espresso.codeforces.com/1981313348269cab100360e478a64874954e4b27.png)", "cfid": "2108D"}
{"problem_id": "2108E", "problem_title": "E. Spruce Dispute", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2108/E", "problem_statement": "It's already a hot April outside, and Polycarp decided that this is the perfect time to finally take down the spruce tree he set up several years ago. As he spent several hours walking around it, gathering his strength, he noticed something curious: the spruce is actually a tree$^{\\text{∗}}$ — and not just any tree, but one consisting of an odd number of vertices $n$. Moreover, on $n-1$ of the vertices hang Christmas ornaments, painted in exactly $\\frac{n-1}{2}$ distinct colors, with exactly two ornaments painted in each color. The remaining vertex, as tradition dictates, holds the tree's topper.\n\nAt last, after several days of mental preparation, Polycarp began dismantling the spruce. First, he removed the topper and had already started taking apart some branches when suddenly a natural question struck him: how can he remove one of the tree's edges and rearrange the ornaments in such a way that the sum of the lengths of the simple paths between ornaments of the same color is as large as possible?\n\nIn this problem, removing an edge from the tree is defined as follows: choose a pair of adjacent vertices $a$ and $b$ ($a < b$), then remove vertex $b$ from the tree and reattach all of $b$'s adjacent vertices (except for $a$) directly to $a$.\n\nPolycarp cannot continue dismantling his spruce until he gets an answer to this question. However, checking all possible options would take him several more years. Knowing your experience in competitive programming, he turned to you for help. But can you solve this dispute?\n\n$^{\\text{∗}}$A tree is a connected graph without cycles.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains an odd number $n$ ($3 \\le n < 2 \\cdot 10^5$) — the number of vertices in the tree.\n\nThe following $n-1$ lines describe the tree, given by pairs of adjacent vertices $u$, $v$ ($1 \\le u, v \\le n, u \\neq v$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, you need to output two lines.\n\nIn the first line, output the pair of vertices $u$, $v$, the edge between which Polycarp is going to remove.\n\nIn the next line, output the array $c$ of $n$ numbers from $0$ to $\\frac{n-1}{2}$, where $c[i]$ — the positive color number assigned to vertex $i$. Note that $c[\\text{max}(u, v)]= 0$, since this vertex has been removed.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n5\n\n1 2\n\n2 3\n\n2 4\n\n4 5\n\n5\n\n1 2\n\n1 3\n\n1 4\n\n1 5\n\n7\n\n1 5\n\n5 4\n\n4 3\n\n3 2\n\n2 6\n\n6 7\n\n```\n\n#### Output #1\n\n```\n1 2\n2 0 1 1 2\n1 5\n1 1 2 2 0\n4 3\n1 3 3 0 2 2 1\n```\n\n### Note\n\nConsider the first test case.\n\nRemove the edge connecting vertices $1$ and $2$. After this, vertex $2$ will be removed from the tree, and vertices $3$ and $4$ will be connected to vertex $1$.\n\nColor vertices $3$ and $4$ with the first color, and vertices $1$ and $5$ with the second. The sum of the lengths of simple paths between ornaments of the same color is equal to $2 + 2 = 4$. It can be shown that this value is the largest possible.\n\n![](https://espresso.codeforces.com/187d5439eac93442b727d84bea394613d3a21efe.png)\n\nIn the second and third examples, the maximum sum of path lengths will be $3$ and $9$, respectively.", "cfid": "2108E"}
{"problem_id": "2104G", "problem_title": "G. Modulo 3", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2104/G", "problem_statement": "Surely, you have seen problems which require you to output the answer modulo $10^9+7$, $10^9+9$, or $998244353$. But have you ever seen a problem where you have to print the answer modulo $3$?\n\nYou are given a functional graph consisting of $n$ vertices, numbered from $1$ to $n$. It is a directed graph, in which each vertex has exactly one outgoing arc. The graph is given as the array $g_1, g_2, \\dots, g_n$, where $g_i$ means that there is an arc that goes from $i$ to $g_i$. For some vertices, the outgoing arcs might be self-loops.\n\nInitially, all vertices of the graph are colored in color $1$. You can perform the following operation: select a vertex and a color from $1$ to $k$, and then color this vertex and all vertices that are reachable from it. You can perform this operation any number of times (even zero).\n\nYou should process $q$ queries. The query is described by three integers $x$, $y$ and $k$. For each query, you should:\n\n- assign $g_x := y$;\n- then calculate the number of different graph colorings for the given value of $k$ (two colorings are different if there exists at least one vertex that is colored in different colors in these two colorings); since the answer can be very large, print it modulo $3$.\n\nNote that in every query, the initial coloring of the graph is reset (all vertices initially have color $1$ in each query).\n\n### Input\n\nThe first line contains two integers $n$ and $q$ ($1 \\le n, q \\le 2 \\cdot 10^5$).\n\nThe second line contains $n$ integers $g_1, g_2, \\dots, g_n$ ($1 \\le g_i \\le n$).\n\nThe $q$ lines follow. The $i$-th line contains three integers $x_i$, $y_i$ and $k_i$ ($1 \\le x_i, y_i \\le n$; $1 \\le k_i \\le 10^9$).\n\n### Output\n\nFor each query, print a single integer — the number of different graph colorings for the given value of $k$, taken modulo $3$.\n\n### Examples\n\n#### Input #1\n\n```\n\n4 5\n\n2 3 1 4\n\n4 3 1\n\n2 1 2\n\n3 4 3\n\n4 1 5\n\n2 4 4\n\n```\n\n#### Output #1\n\n```\n1\n2\n0\n2\n1\n```\n\n#### Input #2\n\n```\n\n8 10\n\n7 4 6 8 7 7 1 4\n\n1 7 5\n\n2 3 3\n\n8 6 1\n\n3 1 3\n\n7 2 5\n\n5 2 4\n\n2 7 4\n\n4 6 5\n\n5 2 3\n\n4 5 1\n\n```\n\n#### Output #2\n\n```\n1\n0\n1\n0\n2\n1\n1\n2\n0\n1\n```", "cfid": "2104G"}
{"problem_id": "2104F", "problem_title": "F. Numbers and Strings", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2104/F", "problem_statement": "For each integer $x$ from $1$ to $n$, we will form the string $S(x)$ according to the following rules:\n\n- compute $(x+1)$;\n- write $x$ and $x+1$ next to each other in the decimal system without separators and leading zeros;\n- in the resulting string, sort all digits in non-decreasing order.\n\nFor example, the string $S(139)$ is 011349 (before sorting the digits, it is 139140). The string $S(99)$ is 00199.\n\nYour task is to count the number of distinct strings among $S(1), S(2), \\dots, S(n)$.\n\n### Input\n\nThe first line contains one integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nEach test case consists of one line containing a single integer $n$ ($1 \\le n \\le 10^{9} - 2$).\n\n### Output\n\nFor each test case, output a single integer — the number of distinct strings among $S(1), S(2), \\dots, S(n)$.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n42\n\n1337\n\n```\n\n#### Output #1\n\n```\n42\n948\n```", "cfid": "2104F"}
{"problem_id": "2097D", "problem_title": "D. Homework", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2097/D", "problem_statement": "Some teachers work at the educational center \"Sirius\" while simultaneously studying at the university. In this case, the trip does not exempt them from completing their homework, so they do their homework right on the plane. Artem is one of those teachers, and he was assigned the following homework at the university.\n\nWith an arbitrary string $a$ of even length $m$, he can perform the following operation. Artem splits the string $a$ into two halves $x$ and $y$ of equal length, after which he performs exactly one of three actions:\n\n- For each $i \\in \\left\\{ 1, 2, \\ldots, \\frac{m}{2}\\right\\}$ assign $x_i = (x_i + y_i) \\bmod 2$;\n- For each $i \\in \\left\\{ 1, 2, \\ldots, \\frac{m}{2}\\right\\}$ assign $y_i = (x_i + y_i) \\bmod 2$;\n- Perform an arbitrary number of operations (the same operations defined above, applied recursively) on the strings $x$ and $y$, independently of each other. Note that in this case, the strings $x$ and $y$ must be of even length.\n\nAfter that, the string $a$ is replaced by the strings $x$ and $y$, concatenated in the same order.\n\nUnfortunately, Artem fell asleep on the plane, so you will have to complete his homework. Artem has two binary strings $s$ and $t$ of length $n$, each consisting of $n$ characters 0 or 1. Determine whether it is possible to make string $s$ equal to string $t$ with an arbitrary number of operations.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^5$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 10^6$) — the length of the strings $s$ and $t$.\n\nThe second line of each test case contains the string $s$ of length $n$, consisting only of characters 0 and 1.\n\nThe third line of each test case contains the string $t$ of length $n$, consisting only of characters 0 and 1.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case, output \"Yes\" (without quotes) if it is possible to make string $s$ equal to string $t$, and \"No\" otherwise.\n\nYou can output each letter in any case (lowercase or uppercase). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be accepted as a positive answer.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n8\n\n00001001\n\n10101001\n\n8\n\n00000000\n\n00001001\n\n6\n\n010110\n\n100010\n\n```\n\n#### Output #1\n\n```\nYes\nNo\nYes\n```\n\n### Note\n\nIn the first test case, the string 00001001 can be transformed into the string 10101001 in two operations. The sequence of actions is illustrated in the figure below:\n\n![](https://espresso.codeforces.com/db22dab7fd76e815ff8fea8c2beaa45cc9e94441.png)\n\nIn the second test case, the string 00000000 cannot be transformed into any string other than 00000000, as no non-zero elements can be formed during any operation.", "cfid": "2097D"}
{"problem_id": "2097C", "problem_title": "C. Bermuda Triangle", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2097/C", "problem_statement": "The Bermuda Triangle — a mysterious area in the Atlantic Ocean where, according to rumors, ships and airplanes disappear without a trace. Some blame magnetic anomalies, others — portals to other worlds, but the truth remains hidden in a fog of mysteries.\n\nA regular passenger flight 814 was traveling from Miami to Nassau on a clear sunny day. Nothing foreshadowed trouble until the plane entered a zone of strange flickering fog. Radio communication was interrupted, the instruments spun wildly, and flashes of unearthly light flickered outside the windows.\n\nFor simplicity, we will assume that the Bermuda Triangle and the airplane are on a plane, and the vertices of the triangle have coordinates $(0, 0)$, $(0, n)$, and $(n, 0)$. Initially, the airplane is located at the point $(x, y)$ strictly inside the Bermuda Triangle and is moving with a velocity vector $(v_x, v_y)$. All instruments have failed, so the crew cannot control the airplane.\n\nThe airplane can escape from the triangle if it ever reaches exactly one of the vertices of the triangle. However, if at any moment (possibly non-integer) the airplane hits the boundary of the triangle (but not at a vertex), its velocity vector is immediately reflected relative to that side$^\\dagger$, and the airplane continues to move in the new direction.\n\nDetermine whether the airplane can ever escape from the Bermuda Triangle (i.e., reach exactly one of its vertices). If this is possible, also calculate how many times before that moment the airplane will hit the boundary of the triangle (each touch of the boundary, even at the same point, counts; crossing a vertex does not count).\n\n$^\\dagger$ Reflection occurs according to the usual laws of physics. The angle of incidence equals the angle of reflection.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe only line of each test case contains five integers $n$, $x$, $y$, $v_x$, and $v_y$ ($3 \\le n \\le 10^9$, $1 \\le x, y$, $x+y < n$, $1 \\le v_x, v_y \\le 10^9$) — numbers describing the vertices of the triangle, the initial coordinates of the airplane, and the initial velocity vector.\n\n### Output\n\nFor each test case, output a single integer — the number of times the airplane will hit the boundary of the triangle before it escapes. If the airplane never escapes from the triangle, output $-1$.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n6 2 2 5 2\n\n6 2 2 20 8\n\n4 1 2 1 1\n\n4 1 1 1 2\n\n4 1 1 2 1\n\n6 2 3 2 3\n\n```\n\n#### Output #1\n\n```\n2\n2\n-1\n-1\n-1\n5\n```\n\n### Note\n\nAn illustration for the first test case is provided below:\n\n![](https://espresso.codeforces.com/b61bf649673fea524553cda5382f6c8b913e886d.png)\n\nIn the second test case, the answer is the same as in the first, as all initial data, except for the speed, are the same, but the airplanes are initially moving in the same direction.\n\nIn the third test case, the answer is $-1$, as the airplane will move exclusively along the segments marked in green. An illustration is provided below:\n\n![](https://espresso.codeforces.com/a9f5835b971419e77d90e52946f6bf0f9559d1d8.png)", "cfid": "2097C"}
{"problem_id": "2097B", "problem_title": "B. Baggage Claim", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2097/B", "problem_statement": "Every airport has a baggage claim area, and Balbesovo Airport is no exception. At some point, one of the administrators at Sheremetyevo came up with an unusual idea: to change the traditional shape of the baggage claim conveyor from a carousel to a more complex form.\n\nSuppose that the baggage claim area is represented as a rectangular grid of size $n \\times m$. The administration proposed that the path of the conveyor should pass through the cells $p_1, p_2, \\ldots, p_{2k+1}$, where $p_i = (x_i, y_i)$.\n\nFor each cell $p_i$ and the next cell $p_{i+1}$ (where $1 \\leq i \\leq 2k$), these cells must share a common side. Additionally, the path must be simple, meaning that for no pair of indices $i \\neq j$ should the cells $p_i$ and $p_j$ coincide.\n\nUnfortunately, the route plan was accidentally spoiled by spilled coffee, and only the cells with odd indices of the path were preserved: $p_1, p_3, p_5, \\ldots, p_{2k+1}$. Your task is to determine the number of ways to restore the original complete path $p_1, p_2, \\ldots, p_{2k+1}$ given these $k+1$ cells.\n\nSince the answer can be very large, output it modulo $10^9+7$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 3 \\cdot 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n$, $m$, and $k$ ($1 \\le n, m \\le 1000$, $n \\cdot m \\ge 3$, $1 \\le k \\le \\left\\lfloor \\frac12 (n m - 1) \\right\\rfloor$) — the dimensions of the grid and a parameter defining the length of the path.\n\nNext, there are $k+1$ lines, the $i$-th of which contains two integers $x_{2i-1}$ and $y_{2i-1}$ ($1 \\le x_{2i-1} \\le n$, $1 \\le y_{2i-1} \\le m$) — the coordinates of the cell $p_{2i-1}$ that lies on the path.\n\nIt is guaranteed that all pairs $(x_{2i-1}, y_{2i-1})$ are distinct.\n\nIt is guaranteed that the sum $n \\cdot m$ over all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case, output a single integer — the number of ways to restore the original complete path modulo $10^9+7$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n2 4 2\n\n1 1\n\n2 2\n\n2 4\n\n1 4 1\n\n1 1\n\n1 4\n\n5 5 11\n\n2 5\n\n3 4\n\n4 5\n\n5 4\n\n4 3\n\n5 2\n\n4 1\n\n3 2\n\n2 1\n\n1 2\n\n2 3\n\n1 4\n\n3 4 4\n\n1 2\n\n2 1\n\n3 2\n\n2 3\n\n3 4\n\n3 3 2\n\n2 2\n\n1 1\n\n1 3\n\n```\n\n#### Output #1\n\n```\n2\n0\n2\n5\n1\n```\n\n### Note\n\nIn the first test case, there are two possible paths:\n\n- $(1,1) \\to (2,1) \\to (2, 2) \\to (2, 3) \\to (2, 4)$\n- $(1,1) \\to (1,2) \\to (2, 2) \\to (2, 3) \\to (2, 4)$\n\nIn the second test case, there is no suitable path, as the cells $(1,1)$ and $(1,4)$ do not have a common neighboring cell.", "cfid": "2097B"}
{"problem_id": "2106G2", "problem_title": "G2. Baudelaire (hard version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2106/G2", "problem_statement": "This is the Hard Version of the problem. The only difference between the two versions is that in the Hard Version the tree may be of any shape.\n\nThis problem is interactive.\n\nBaudelaire is very rich, so he bought a tree of size $n$, rooted at some arbitrary node. Additionally, every node has a value of $1$ or $-1$.\n\nCow the Nerd saw the tree and fell in love with it. However, computer science doesn't pay him enough, so he can't afford to buy it. Baudelaire decided to play a game with Cow the Nerd, and if he won, he would gift him the tree.\n\nCow the Nerd does not know which node is the root, and he doesn't know the values of the nodes either. However, he can ask Baudelaire queries of two types:\n\n- $1$ $k$ $u_1$ $u_2$ $...$ $u_k$: Let $f(u)$ be the sum of the values of all nodes in the path from the root of the tree to node $u$. Cow the Nerd may choose an integer $k$ $(1 \\le k \\le n)$ and $k$ nodes $u_1, u_2, ..., u_k$, and he will receive the value $f(u_1) + f(u_2) + ... + f(u_k)$.\n- $2$ $u$: Baudelaire will toggle the value of node $u$. Specifically, if the value of $u$ is $1$, it will become $-1$, and vice versa.\n\nCow the Nerd wins if he guesses the value of every node correctly (the values of the final tree, after performing the queries) within $n + 200$ total queries. Can you help him win?\n\n### Input\n\nThe first line of the input contains a single integer $t$ $(1 \\le t \\le 100)$, the number of test cases.\n\nThe first line of each test case contains a single integer $n$ $(2 \\le n \\le 10^3)$, the size of the tree.\n\nEach of the next $n-1$ lines contains two integers $u$ and $v$ $(1 \\le u, v \\le n, u \\neq v)$, denoting an edge between nodes $u$ and $v$ in the tree.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^3$ and that each graph provided is a valid tree.\n\n### Interaction\n\nTo ask a query of type $1$, output a line in the following format (without the quotes):\n\n- \"? 1 k $u_1$ $u_2$ $...$ $u_k$\", ($1 \\le k, u_i \\le n$)\n\nThe jury will return a single integer, $f(u_1) + f(u_2) + ... + f(u_k)$.\n\nTo ask a query of type $2$, output a line in the following format:\n\n- \"? 2 $u$\" ($1 \\le u \\le n$)\n\nThe jury will toggle the value of node $u$: if its value is $1$, it will become $-1$ and vice versa.\n\nWhen you have found the answer, output a single line in the following format:\n\n- \"! $v_1, v_2, ..., v_n$\" ($v_i = 1$ or $v_i = -1$, and $v_i$ is the value of node $i$ after performing the queries)\n\nAfter that, proceed to process the next test case or terminate the program if it was the last test case. Printing the answer does not count as a query.\n\nThe interactor is not adaptive, meaning that the values of the tree are known before the participant asks the queries.\n\nIf your program makes more than $n + 200$ queries, your program should immediately terminate to receive the verdict Wrong Answer. Otherwise, you can get an arbitrary verdict because your solution will continue to read from a closed stream.\n\nAfter printing a query do not forget to output the end of line and flush the output. Otherwise, you may get the Idleness Limit Exceeded verdict. To do this, use:\n\n- fflush(stdout) or cout.flush() in C++\n- System.out.flush() in Java;\n- flush(output) in Pascal;\n- stdout.flush() in Python;\n- see the documentation for other languages.\n\nHacks\n\nFor hacks, use the following format.\n\nThe first line should contain a single integer $t$ $(1 \\le t \\le 100)$ — the number of test cases.\n\nThe first line of each test case must contain exactly two integers $n$ and $root$ $(2 \\le n \\le 10^3, 1 \\le root \\le n)$ — the size of the tree and the root of the tree.\n\nThe second line of each test case must contain exactly $n$ integers $a_1, a_2, ..., a_n$ $(|a_i| = 1)$ — where $a_i$ is the value of node $i$.\n\nEach of the following $n-1$ lines must contain exactly two integers $u$ and $v$ $(1 \\le u, v \\le n)$ — denoting an edge of the tree between nodes $u$ and $v$.\n\nThe sum of $n$ over all test cases must not exceed $10^3$ and every graph provided must be a valid tree.\n\n### Example\n\n#### Input #1\n\n```\n3\n4\n1 4\n4 2\n2 3\n\n1\n\n-1\n\n-5\n\n-5\n\n2\n1 2\n\n2\n\n7\n1 2\n2 7\n7 3\n7 4\n7 5\n7 6\n\n-1\n\n```\n\n#### Output #1\n\n```\n\n? 1 3 1 2 4\n\n? 1 2 3 1\n\n? 2 4\n? 1 3 1 2 4\n\n? 1 2 3 1\n\n! -1 -1 -1 -1\n\n? 1 1 1\n\n! 1 1\n\n? 1 1 1\n\n! -1 1 1 1 1 1 -1```\n\n### Note\n\nIn the first example, the root of the tree is node $4$ and the values are: $[-1, -1, -1, 1]$ (the $i$-th value is the value of node $i$).\n\nInitially, $f(1) = 0, f(2) = 0, f(3) = -1, f(4) = 1$. Therefore, the answer to our first query is $f(1) + f(2) + f(4) = 1$, and of the second query is $f(3) + f(1) = -1$.\n\nAfter toggling the value of node $4$, the values are $[-1, -1, -1, -1]$. In addition, $f(1) = -2, f(2) = -2, f(3) = -3, f(4) = -1$. Therefore, $f(1) + f(2) + f(4) = -5$ and $f(3) + f(1) = -5$.\n\nWe answer that the final values of the nodes are $[-1, -1, -1, -1]$, which is correct. Notice that we report the values of the nodes after the changes, and not before.\n\nIn the second example, the root of the tree is $2$ and the initial values are $[1, 1]$.\n\nIn the last example, the root of the tree is $1$ and the initial values are $[-1, 1, 1, 1, 1, 1, -1]$.\n\nNote that this is just an explanation of how the queries work, and it is not supposed to use any specific strategy to solve the problem.", "cfid": "2106G2"}
{"problem_id": "2106G1", "problem_title": "G1. Baudelaire (easy version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2106/G1", "problem_statement": "This is the easy version of the problem. The only difference between the two versions is that in this version, it is guaranteed that every node is adjacent to node $1$.\n\nThis problem is interactive.\n\nBaudelaire is very rich, so he bought a tree of size $n$ that is rooted at some arbitrary node. Additionally, every node has a value of $1$ or $-1$. In this version, every node is adjacent to node $1$. However, please note that node $1$ is not necessarily the root.\n\nCow the Nerd saw the tree and fell in love with it. However, computer science doesn't pay him enough, so he can't afford to buy it. Baudelaire decided to play a game with Cow the Nerd, and if he won, he would gift him the tree.\n\nCow the Nerd does not know which node is the root, and he doesn't know the values of the nodes either. However, he can ask Baudelaire queries of two types:\n\n- $1$ $k$ $u_1$ $u_2$ $...$ $u_k$: Let $f(u)$ be the sum of the values of all nodes in the path from the root of the tree to node $u$. Cow the Nerd may choose an integer $k$ $(1 \\le k \\le n)$ and $k$ nodes $u_1, u_2, ..., u_k$, and he will receive the value $f(u_1) + f(u_2) + ... + f(u_k)$.\n- $2$ $u$: Baudelaire will toggle the value of node $u$. Specifically, if the value of $u$ is $1$ it will become $-1$, and vice versa.\n\nCow the Nerd wins if he guesses the value of every node correctly (the values of the final tree, after performing the queries) within $n + 200$ total queries. Can you help him win?\n\n### Input\n\nThe first line of the input contains a single integer $t$ $(1 \\le t \\le 100)$, the number of test cases.\n\nThe first line of each test case contains a single integer $n$ $(2 \\le n \\le 10^3)$, the size of the tree.\n\nEach of the next $n-1$ lines contains two integers $u$ and $v$ $(1 \\le u, v \\le n, u \\neq v)$, denoting an edge between nodes $u$ and $v$ in the tree. In this version, it is guaranteed that either $u = 1$ or $v = 1$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^3$ and that each graph provided is a valid tree.\n\n### Interaction\n\nTo ask a query of type $1$, output a line in the following format (without the quotes):\n\n- \"? 1 k $u_1$ $u_2$ $...$ $u_k$\", ($1 \\le k, u_i \\le n$)\n\nThe jury will return a single integer, $f(u_1) + f(u_2) + ... + f(u_k)$.\n\nTo ask a query of type $2$, output a line in the following format:\n\n- \"? 2 $u$\" ($1 \\le u \\le n$)\n\nThe jury will toggle the value of node $u$: if its value is $1$ it will become $-1$ and vice versa.\n\nWhen you have found the answer, output a single line in the following format:\n\n- \"! $v_1, v_2, ..., v_n$\" ($v_i = 1$ or $v_i = -1$, and $v_i$ is the value of node $i$ after performing the queries)\n\nAfter that, proceed to process the next test case or terminate the program if it was the last test case. Printing the answer does not count as a query.\n\nThe interactor is not adaptive, meaning that the values of the tree are known before the participant asks the queries.\n\nIf your program makes more than $n + 200$ queries, your program should immediately terminate to receive the verdict Wrong Answer. Otherwise, you can get an arbitrary verdict because your solution will continue to read from a closed stream.\n\nAfter printing a query do not forget to output the end of line and flush the output. Otherwise, you may get the Idleness Limit Exceeded verdict. To do this, use:\n\n- fflush(stdout) or cout.flush() in C++\n- System.out.flush() in Java;\n- flush(output) in Pascal;\n- stdout.flush() in Python;\n- see the documentation for other languages.\n\nHacks\n\nFor hacks, use the following format.\n\nThe first line should contain a single integer $t$ $(1 \\le t \\le 100)$ — the number of test cases.\n\nThe first line of each test case must contain exactly two integers $n$ and $root$ $(2 \\le n \\le 10^3, 1 \\le root \\le n)$ — the size of the tree and the root of the tree.\n\nThe second line of each test case must contain exactly $n$ integers $a_1, a_2, ..., a_n$ $(|a_i| = 1)$ — where $a_i$ is the value of node $i$.\n\nEach of the following $n-1$ lines must contain exactly two integers $u$ and $v$ $(1 \\le u, v \\le n)$ — denoting an edge of the tree between nodes $u$ and $v$.\n\nThe sum of $n$ over all test cases must not exceed $10^3$ and every graph provided must be a valid tree. For this version, every node must be adjacent to node $1$.\n\n### Example\n\n#### Input #1\n\n```\n1\n4\n1 2\n3 1\n1 4\n\n0\n\n-6\n\n```\n\n#### Output #1\n\n```\n\n? 1 3 1 2 3\n\n? 2 2\n? 1 3 1 2 3\n\n! -1 -1 -1 1```\n\n### Note\n\nIn the example, the root of the tree is node $2$, and the values of the nodes are $[-1, 1, -1, 1]$. Therefore, $f(1) = 0, f(2) = 1, f(3) = -1, f(4) = 1$.\n\nFirst, we query about the sum $f(1) + f(2) + f(3)$, so we receive the value $0$. Then, we toggle the value of node $2$, and the values are: $[-1, -1, -1, 1]$. Therefore, $f(1) = -2, f(2) = -1, f(3) = -3, f(4) = -1$, and $f(1) + f(2) + f(3) = -6$.\n\nFinally, we figure out that the values of the nodes are $[-1, -1, -1, 1]$, so we answer that.\n\nNote that this is just an explanation of how the queries work, and it is not supposed to use any specific strategy to solve the problem.", "cfid": "2106G1"}
{"problem_id": "2106F", "problem_title": "F. Goblin", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2106/F", "problem_statement": "Dr. TC has a new patient called Goblin. He wants to test Goblin's intelligence, but he has gotten bored of his standard test. So, he decided to make it a bit harder.\n\nFirst, he creates a binary string$^{\\text{∗}}$ $s$ having $n$ characters. Then, he creates $n$ binary strings $a_1, a_2, \\ldots, a_n$. It is known that $a_i$ is created by first copying $s$, then flipping the $i$-th character ($\\texttt{1}$ becomes $\\texttt{0}$ and vice versa). After creating all $n$ strings, he arranges them into an $n \\times n$ grid $g$ where $g_{i, j} = a_{i_j}$.\n\nA set $S$ of size $k$ containing distinct integer pairs $\\{(x_1, y_1), (x_2, y_2), \\ldots, (x_k, y_k)\\}$ is considered good if:\n\n- $1 \\leq x_i, y_i \\leq n$ for all $1 \\leq i \\leq k$.\n- $g_{x_i, y_i} = \\texttt{0}$ for all $1 \\leq i \\leq k$.\n- For any two integers $i$ and $j$ ($1 \\leq i, j \\leq k$), coordinate $(x_i, y_i)$ is reachable from coordinate $(x_j, y_j)$ by traveling through a sequence of adjacent cells (which share a side) that all have a value of $\\texttt{0}$.\n\nGoblin's task is to find the maximum possible size of a good set $S$. Because Dr. TC is generous, this time he gave him two seconds to find the answer instead of one. Goblin is not known for his honesty, so he has asked you to help him cheat.\n\n$^{\\text{∗}}$A binary string is a string that only consists of characters $\\texttt{1}$ and $\\texttt{0}$.\n\n### Input\n\nThe first line of the input consists of a single integer $t$ $(1 \\le t \\le 10^3)$ — the number of test cases.\n\nThe first line of each test contains a single integer $n$ $(1 \\le n \\le 2 \\cdot 10^5)$ — the length of the binary string $s$.\n\nThe second line of each test contains a single binary string $s$ of length $n$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single number, the maximum possible size of a good set of cells from the grid.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n3\n\n000\n\n4\n\n0010\n\n7\n\n1011001\n\n4\n\n0001\n\n2\n\n11\n\n1\n\n0\n\n```\n\n#### Output #1\n\n```\n3\n9\n10\n7\n1\n0\n```\n\n### Note\n\nIn the first example, the following grid has been written on the board:\n\n\n\n$$ 1 0 0 $$\n\n0 1 0 \n\n$$ $$\n\n0 0 1 $$\n\nThe set that consists of cells $(1, 2)$ and $(1, 3)$ is good. The set that consists of cells $(1, 1)$ and $(1, 2)$ is not good, since the value of cell $(1, 1)$ is not $0$. The set of cells $(1, 2)$, $(1, 3)$, $(2, 3)$ is good and has a maximum size of $3$. Note that the set of cells $(2, 1)$, $(3, 1)$, and $(3, 2)$ is also good with a maximum size of $3$.\n\nIn the second example, the following grid is written on the board:\n\n\n\n$$ 1 0 1 0 $$\n\n0 1 1 0 \n\n$$ $$\n\n0 0 0 0 \n\n$$ $$\n\n0 0 1 1 $$\n\nAnd the maximum possible size of a good set is $9$.", "cfid": "2106F"}
{"problem_id": "2103E", "problem_title": "E. Keep the Sum", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2103/E", "problem_statement": "You are given an integer $k$ and an array $a$ of length $n$, where each element satisfies $0 \\le a_i \\le k$ for all $1 \\le i \\le n$. You can perform the following operation on the array:\n\n- Choose two distinct indices $i$ and $j$ ($1 \\le i,j \\le n$ and $i \\neq j$) such that $a_i + a_j = k$.\n- Select an integer $x$ satisfying $-a_j \\le x \\le a_i$.\n- Decrease $a_i$ by $x$ and increase $a_j$ by $x$. In other words, update $a_i := a_i - x$ and $a_j := a_j + x$.\n\nNote that the constraints on $x$ ensure that all elements of array $a$ remain between $0$ and $k$ throughout the operations.\n\nYour task is to determine whether it is possible to make the array $a$ non-decreasing$^{\\text{∗}}$ using the above operation. If it is possible, find a sequence of at most $3n$ operations that transforms the array into a non-decreasing one.\n\nIt can be proven that if it is possible to make the array non-decreasing using the above operation, there exists a solution that uses at most $3n$ operations.\n\n$^{\\text{∗}}$ An array $a_1, a_2, \\ldots, a_n$ is said to be non-decreasing if for all $1 \\le i \\le n - 1$, it holds that $a_i \\le a_{i+1}$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers, $n$ and $k$ ($4 \\le n \\le 2 \\cdot 10^5$, $1 \\le k \\le 10^9$) — the length of the array $a$ and the required sum for the operation.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le k$) — the elements of array $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output $-1$ if it is not possible to make the array non-decreasing using the operation.\n\nOtherwise, output the number of operations $m$ ($0 \\le m \\le 3n$). On each of the next $m$ lines, output three integers $i$, $j$, and $x$ representing an operation where $a_i$ is decreased by $x$ and $a_j$ is increased by $x$.\n\nNote that you are not required to minimize the number of operations. If there are multiple solutions requiring at most $3n$ operations, you may output any.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n5 100\n\n1 2 3 4 5\n\n5 6\n\n1 2 3 5 4\n\n5 7\n\n7 1 5 3 1\n\n10 10\n\n2 5 3 2 7 3 1 8 4 0\n\n```\n\n#### Output #1\n\n```\n0\n1\n4 1 1\n-1\n6\n1 8 2\n3 5 2\n5 7 3\n5 9 3\n8 10 5\n2 10 4```\n\n### Note\n\nIn the first test case, the array is already non-decreasing, so we do not need to perform any operations.\n\nIn the second test case, we can perform an operation with $i=4$, $j=1$, and $x=1$. $a_4$ decreases by $1$ to become $5 - 1 = 4$ while $a_1$ increases by $1$ to become $1 + 1 = 2$. After the operation, the array becomes $[2, 2, 3, 4, 4]$, which is non-decreasing.\n\nNote that there are other ways to make the array non-decreasing, all of which would be considered correct as long as they do not use more than $3 \\cdot n = 15$ operations.\n\nIn the third test case, it is not possible to make the array non-decreasing. This is because there are no distinct pairs of indices $i$ and $j$ where $a_i + a_j = 7$, so no operation can be done on the array.\n\nIn the fourth test case, the array is transformed as follows:\n\n1. $[\\textbf{0}, 5, 3, 2, 7, 3, 1, \\textbf{10}, 4, 0]$\n2. $[0, 5, \\textbf{1}, 2, \\textbf{9}, 3, 1, 10, 4, 0]$\n3. $[0, 5, 1, 2, \\textbf{6}, 3, \\textbf{4}, 10, 4, 0]$\n4. $[0, 5, 1, 2, \\textbf{3}, 3, 4, 10, \\textbf{7}, 0]$\n5. $[0, 5, 1, 2, 3, 3, 4, \\textbf{5}, 7, \\textbf{5}]$\n6. $[0, \\textbf{1}, 1, 2, 3, 3, 4, 5, 7, \\textbf{9}]$", "cfid": "2103E"}
{"problem_id": "2103F", "problem_title": "F. Maximize Nor", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2103/F", "problem_statement": "The bitwise nor$^{\\text{∗}}$ of an array of $k$-bit integers $b_1, b_2, \\ldots, b_m$ can be computed by calculating the bitwise nor cumulatively from left to right. More formally, $\\operatorname{nor}(b_1, b_2, \\ldots, b_m) = \\operatorname{nor}(\\operatorname{nor}(b_1, b_2, \\ldots, b_{m - 1}), b_m)$ for $m\\ge 2$, and $\\operatorname{nor}(b_1) = b_1$.\n\nYou are given an array of $k$-bit integers $a_1, a_2, \\ldots, a_n$. For each index $i$ ($1\\le i\\le n$), find the maximum bitwise nor among all subarrays$^{\\text{†}}$ of $a$ containing index $i$. In other words, for each index $i$, find the maximum value of $\\operatorname{nor}(a_l, a_{l+1}, \\ldots, a_r)$ among all $1 \\le l \\le i \\le r \\le n$.\n\n$^{\\text{∗}}$ The [logical nor](https://en.m.wikipedia.org/wiki/Logical_NOR) of two boolean values is $1$ if both values are $0$, and $0$ otherwise. The bitwise nor of two $k$-bit integers is calculated by performing the logical nor operation on each pair of the corresponding bits.\n\nFor example, let us compute $\\operatorname{nor}(2, 6)$ when they are represented as $4$-bit numbers. In binary, $2$=$0010_2$ and $6=0110_2$. Therefore, $\\operatorname{nor}(2,6) = 1001_2 = 9$ as by performing the logical nor operations from left to right, we have:\n\n- $\\operatorname{nor}(0,0) = 1$\n- $\\operatorname{nor}(0,1) = 0$\n- $\\operatorname{nor}(1,0) = 0$\n- $\\operatorname{nor}(1,1) = 0$\n\nNote that if $2$ and $6$ were represented as $3$-bit integers instead, then $\\operatorname{nor}(2,6) = 1$.\n\n$^{\\text{†}}$An array $x$ is a subarray of an array $y$ if $x$ can be obtained from $y$ by the deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\le n \\le 10^5$, $1 \\le k \\le 17$) — the number of elements in the array and the number of bits of the array elements.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le 2^k - 1$) — the elements of array $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, output $n$ integers, the $i$-th of which is the maximum bitwise nor among all subarrays of $a$ containing index $i$.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n2 2\n\n1 3\n\n5 3\n\n1 7 4 6 2\n\n```\n\n#### Output #1\n\n```\n1 3\n5 7 5 6 5\n```\n\n### Note\n\nIn the first test case, subarrays that have index $1$ are $[1]$ and $[1, 3]$. The values of their bitwise nor are $1$ and $0$ respectively. Hence, the answer for index $1$ is $1$. Subarrays that have index $2$ are $[3]$ and $[1, 3]$. The values of their bitwise nor are $3$ and $0$ respectively. Hence, the answer for index $2$ is $3$.\n\nIn the second test case:\n\n- For $i = 1$, the subarray with maximum bitwise nor is $[a_1, a_2, a_3, a_4, a_5] = [1, 7, 4, 6, 2]$, $\\operatorname{nor}(1, 7, 4, 6, 2) = 5$\n- For $i = 2$, the subarray with maximum bitwise nor is $[a_2] = [7]$, $\\operatorname{nor}(7) = 7$\n- For $i = 3$, the subarray with maximum bitwise nor is $[a_1, a_2, a_3, a_4, a_5] = [1, 7, 4, 6, 2]$, $\\operatorname{nor}(1, 7, 4, 6, 2) = 5$\n- For $i = 4$, the subarray with maximum bitwise nor is $[a_4] = [6]$, $\\operatorname{nor}(6) = 6$\n- For $i = 5$, the subarray with maximum bitwise nor is $[a_1, a_2, a_3, a_4, a_5] = [1, 7, 4, 6, 2]$, $\\operatorname{nor}(1, 7, 4, 6, 2) = 5$", "cfid": "2103F"}
{"problem_id": "2103D", "problem_title": "D. Local Construction", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2103/D", "problem_statement": "An element $b_i$ ($1\\le i\\le m$) in an array $b_1, b_2, \\ldots, b_m$ is a local minimum if at least one of the following holds:\n\n- $2\\le i\\le m - 1$ and $b_i < b_{i - 1}$ and $b_i < b_{i + 1}$, or\n- $i = 1$ and $b_1 < b_2$, or\n- $i = m$ and $b_m < b_{m - 1}$.\n\nSimilarly, an element $b_i$ ($1\\le i\\le m$) in an array $b_1, b_2, \\ldots, b_m$ is a local maximum if at least one of the following holds:\n\n- $2\\le i\\le m - 1$ and $b_i > b_{i - 1}$ and $b_i > b_{i + 1}$, or\n- $i = 1$ and $b_1 > b_2$, or\n- $i = m$ and $b_m > b_{m - 1}$.\n\nNote that local minima and maxima are not defined for arrays with only one element.\n\nThere is a hidden permutation$^{\\text{∗}}$ $p$ of length $n$. The following two operations are applied to permutation $p$ alternately, starting from operation 1, until there is only one element left in $p$:\n\n- Operation 1 — remove all elements of $p$ which are not local minima.\n- Operation 2 — remove all elements of $p$ which are not local maxima.\n\nMore specifically, operation 1 is applied during every odd iteration, and operation 2 is applied during every even iteration, until there is only one element left in $p$.\n\nFor each index $i$ ($1\\le i\\le n$), let $a_i$ be the iteration number that element $p_i$ is removed, or $-1$ if it was never removed.\n\nIt can be proven that there will be only one element left in $p$ after at most $\\lceil \\log_2 n\\rceil$ iterations (in other words, $a_i \\le \\lceil \\log_2 n\\rceil$).\n\nYou are given the array $a_1, a_2, \\ldots, a_n$. Your task is to construct any permutation $p$ of $n$ elements that satisfies array $a$.\n\n$^{\\text{∗}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$) — the number of elements in permutation $p$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le \\lceil\\log_2 n\\rceil$ or $a_i = -1$) — the iteration number that element $p_i$ is removed.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\nIt is guaranteed that there exists at least one permutation $p$ that satisfies array $a$.\n\n### Output\n\nFor each test case, output $n$ integers representing the elements of the permutation satisfying array $a$.\n\nIf there are multiple solutions, you may output any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n3\n\n1 1 -1\n\n5\n\n1 -1 1 2 1\n\n8\n\n3 1 2 1 -1 1 1 2\n\n7\n\n1 1 1 -1 1 1 1\n\n5\n\n1 1 1 1 -1\n\n5\n\n-1 1 1 1 1\n\n5\n\n-1 1 2 1 2\n\n```\n\n#### Output #1\n\n```\n3 2 1\n4 3 5 1 2\n6 7 2 4 3 8 5 1\n6 5 2 1 3 4 7\n5 4 3 2 1\n1 2 3 4 5\n4 5 2 3 1```\n\n### Note\n\nIn the first test case, operations will be applied to permutation $[3, 2, 1]$ as follows:\n\n1. The only local minimum in $[3, 2, 1]$ is $1$. Hence, elements $3$ and $2$ are removed. There is only one remaining element; hence the process terminates.\n\nThis satisfies array $a = [1, 1, -1]$ as both $p_1$ and $p_2$ were removed on iteration number $1$, while $p_3$ was not removed.\n\nIn the second test case, operations will be applied to permutation $p = [4, 3, 5, 1, 2]$ as follows:\n\n1. The local minima in $[4, 3, 5, 1, 2]$ are $3$ and $1$. Hence, elements $4$, $5$, and $2$ are removed.\n2. The only local maximum in $[3, 1]$ is $3$. Hence, element $1$ is removed. There is only one remaining element; hence the process terminates.\n\nThis satisfies array $a = [1, -1, 1, 2, 1]$ as elements $p_1 = 4$, $p_3 = 5$, and $p_5 = 2$ were removed on iteration $1$, element $p_4 = 1$ was removed on iteration $2$, and element $p_2 = 3$ was not removed.\n\nIn the third test case, operations will be applied on permutation $[6, 7, 2, 4, 3, 8, 5, 1]$ as follows:\n\n1. The local minima in $[6, 7, 2, 4, 3, 8, 5, 1]$ are $6$, $2$, $3$, and $1$. Hence, elements $7$, $4$, $8$, and $5$ are removed.\n2. The local maxima in $[6, 2, 3, 1]$ are $6$ and $3$. Hence, elements $2$ and $1$ are removed.\n3. The only local minimum in $[6, 3]$ is $3$. Hence, element $6$ is removed. There is only one remaining element; hence the process terminates.\n\nIn the fourth test case, one permutation satisfying the constraints is \\[$6$, $5$, $2$, $1$, $3$, $4$, $7$\\]. $1$ is the only local minimum, so only it will stay after the first iteration. Note that there are other valid permutations; for example, \\[$6$, $4$, $3$, $1$, $2$, $5$, $7$\\] would also be considered correct.", "cfid": "2103D"}
{"problem_id": "2096E", "problem_title": "E. Wonderful Teddy Bears", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2096/E", "problem_statement": "You are the proud owner of $n$ teddy bears, which are arranged in a row on a shelf. Each teddy bear is colored either black or pink.\n\nAn arrangement of teddy bears is beautiful if all the black teddy bears are to the left of all the pink teddy bears. In other words, there does not exist a pair of indices $(i, j)$ ($1 \\leq i < j \\leq n$) such that the $i$-th teddy bear is pink, and the $j$-th teddy bear is black.\n\nYou want to reorder the teddy bears into a beautiful arrangement. You are too short to reach the shelf, but luckily, you can send instructions to a robot to move the teddy bears around. In a single instruction, the robot can:\n\n- Choose an index $i$ ($1 \\le i \\le n - 2$) and reorder the teddy bears at positions $i$, $i + 1$ and $i + 2$ so that all the black teddy bears are to the left of all the pink teddy bears.\n\nWhat is the minimum number of instructions needed to reorder the teddy bears?\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($3 \\le n \\le 2 \\cdot 10^5$) — the number of teddy bears.\n\nThe second line of each test case contains a single string $s$ of length $n$ consisting of characters B and P — the colors of the teddy bears. For each $i$ from $1$ to $n$, the $i$-th teddy bear is colored black if $s_i = \\texttt{B}$ and pink if $s_i = \\texttt{P}$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the minimum number of instructions needed to reorder the teddy bears.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3\n\nPPP\n\n3\n\nBPP\n\n3\n\nPPB\n\n7\n\nPPBPPBB\n\n15\n\nBPBPBBBBBPBBBBB\n\n```\n\n#### Output #1\n\n```\n0\n0\n1\n5\n14\n```\n\n### Note\n\nFor the first test case, all the teddy bears are pink. Thus, the arrangement is already beautiful, so the answer is $0$.\n\nFor the second test case, all the black teddy bears are to the left of all the pink teddy bears. Thus, the answer is $0$.\n\nFor the third test case, we can perform $1$ instruction with $i = 1$.\n\nAfter the instruction, the sequence of colors changes from $\\texttt{PPB}$ to $\\texttt{BPP}$, and we are done.\n\nFor the fourth test case, we can perform $5$ instructions as follows:\n\n- $i = 1$: $\\texttt{}\\color{magenta}{\\texttt{PPB}}\\texttt{PPBB} \\rightarrow \\texttt{}\\color{magenta}{\\texttt{BPP}}\\texttt{PPBB}$\n- $i = 5$: $\\texttt{BPPP}\\color{magenta}{\\texttt{PBB}}\\texttt{} \\rightarrow \\texttt{BPPP}\\color{magenta}{\\texttt{BBP}}\\texttt{}$\n- $i = 4$: $\\texttt{BPP}\\color{magenta}{\\texttt{PBB}}\\texttt{P} \\rightarrow \\texttt{BPP}\\color{magenta}{\\texttt{BBP}}\\texttt{P}$\n- $i = 3$: $\\texttt{BP}\\color{magenta}{\\texttt{PBB}}\\texttt{PP} \\rightarrow \\texttt{BP}\\color{magenta}{\\texttt{BBP}}\\texttt{PP}$\n- $i = 2$: $\\texttt{B}\\color{magenta}{\\texttt{PBB}}\\texttt{PPP} \\rightarrow \\texttt{B}\\color{magenta}{\\texttt{BBP}}\\texttt{PPP}$", "cfid": "2096E"}
{"problem_id": "2096D", "problem_title": "D. Wonderful Lightbulbs", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2096/D", "problem_statement": "You are the proud owner of an infinitely large grid of lightbulbs, represented by a [Cartesian coordinate system](https://en.wikipedia.org/wiki/Cartesian_coordinate_system). Initially, all of the lightbulbs are turned off, except for one lightbulb, where you buried your proudest treasure.\n\nIn order to hide your treasure's position, you perform the following operation an arbitrary number of times (possibly zero):\n\n- Choose two integer numbers $x$ and $y$, and switch the state of the $4$ lightbulbs at $(x, y)$, $(x, y + 1)$, $(x + 1, y - 1)$, and $(x + 1, y)$. In other words, for each lightbulb, turn it on if it was off, and turn it off if it was on. Note that there are no constraints on $x$ and $y$.\n\nIn the end, there are $n$ lightbulbs turned on at coordinates $(x_1, y_1), (x_2, y_2), \\ldots, (x_n, y_n)$. Unfortunately, you have already forgotten where you buried your treasure, so now you have to figure out one possible position of the treasure. Good luck!\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) — the number of lightbulbs that are on.\n\nThe $i$-th of the next $n$ lines contains two integers $x_i$ and $y_i$ ($\\color{red}{-10^8} \\le x_i, y_i \\le \\color{red}{10^8}$) — the coordinates of the $i$-th lightbulb. It is guaranteed that all coordinates are distinct.\n\nAdditional constraint: There exists at least one position $(s, t)$ ($\\color{red}{-10^9} \\le s, t \\le \\color{red}{10^9}$), such that if the lightbulb at position $(s, t)$ is initially turned on, then after performing an arbitrary number of operations (possibly zero), we will get the given configuration of lightbulbs.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output two integers $s$ and $t$ ($-10^9 \\le s, t \\le 10^9$) — one possible position of the buried treasure. If there are multiple solutions, print any of them.\n\nFor this problem, hacks are disabled.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n1\n\n2 3\n\n3\n\n-2 -1\n\n-1 -2\n\n-1 -3\n\n7\n\n7 26\n\n6 27\n\n6 28\n\n7 27\n\n8 26\n\n8 27\n\n7 28\n\n11\n\n70 9\n\n69 8\n\n69 0\n\n73 5\n\n70 -1\n\n70 5\n\n71 7\n\n70 4\n\n73 4\n\n71 3\n\n72 3\n\n```\n\n#### Output #1\n\n```\n2 3\n-2 -2\n7 27\n72 7\n```\n\n### Note\n\nFor the first test case, one possible scenario is that you hid your treasure at position $(2, 3)$. Then, you did not perform any operations.\n\nIn the end, only the lightbulb at $(2, 3)$ is turned on.\n\nFor the second test case, one possible scenario is that you hid your treasure at position $(-2, -2)$. Then, you performed $1$ operation with $x = -2$, $y = -2$.\n\nThe operation switches the state of the $4$ lightbulbs at $(-2, -2)$, $(-2, -1)$, $(-1, -3)$, and $(-1, -2)$.\n\nIn the end, the lightbulbs at $(-2, -1)$, $(-1, -2)$, and $(-1, -3)$ are turned on.", "cfid": "2096D"}
{"problem_id": "2094H", "problem_title": "H. La Vaca Saturno Saturnita", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2094/H", "problem_statement": "Saturnita's mood depends on an array $a$ of length $n$, which only he knows the meaning of, and a function $f(k, a, l, r)$, which only he knows how to compute. Shown below is the pseudocode for his function $f(k, a, l, r)$.\n\n```\n`function f(k, a, l, r):<br/>   ans := 0<br/>   for i from l to r (inclusive):<br/>      while k is divisible by a[i]:<br/>         k := k/a[i]<br/>      ans := ans + k<br/>   return ans<br/>````\n\nYou are given $q$ queries, each containing integers $k$, $l$, and $r$. For each query, please output $f(k,a,l,r)$.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $q$ ($1 \\leq n \\leq 10^5, 1 \\leq q \\leq 5\\cdot 10^4$).\n\nThe following line contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($2 \\leq a_i \\leq 10^5$).\n\nThe following $q$ lines each contain three integers $k$, $l$, and $r$ ($1 \\leq k \\leq 10^5, 1 \\leq l \\leq r \\leq n$).\n\nIt is guaranteed that the sum of $n$ does not exceed $10^5$ over all test cases, and the sum of $q$ does not exceed $5\\cdot 10^4$ over all test cases.\n\n### Output\n\nFor each query, output the answer on a new line.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n5 3\n\n2 3 5 7 11\n\n2 1 5\n\n2 2 4\n\n2310 1 5\n\n4 3\n\n18 12 8 9\n\n216 1 2\n\n48 2 4\n\n82944 1 4\n\n```\n\n#### Output #1\n\n```\n5\n6\n1629\n13\n12\n520\n```", "cfid": "2094H"}
{"problem_id": "2093G", "problem_title": "G. Shorten the Array", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2093/G", "problem_statement": "The beauty of an array $b$ of length $m$ is defined as $\\max(b_i \\oplus b_j)$ among all possible pairs $1 \\le i \\le j \\le m$, where $x \\oplus y$ is the [bitwise XOR](https://en.wikipedia.org/wiki/Bitwise_operation#XOR) of numbers $x$ and $y$. We denote the beauty value of the array $b$ as $f(b)$.\n\nAn array $b$ is called beautiful if $f(b) \\ge k$.\n\nRecently, Kostya bought an array $a$ of length $n$ from the store. He considers this array too long, so he plans to cut out some beautiful subarray from it. That is, he wants to choose numbers $l$ and $r$ ($1 \\le l \\le r \\le n$) such that the array $a_{l \\dots r}$ is beautiful. The length of such a subarray will be the number $r - l + 1$. The entire array $a$ is also considered a subarray (with $l = 1$ and $r = n$).\n\nYour task is to find the length of the shortest beautiful subarray in the array $a$. If no subarray is beautiful, you should output the number $-1$.\n\n### Input\n\nThe first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$).\n\nNext, there are $t$ blocks of two lines:\n\nIn the first line of the block, there are two integers $n$ and $k$ ($1 \\le n \\le 2 \\cdot 10^5$, $0 \\le k \\le 10^9$).\n\nIn the second line of the block, there is the array $a$ consisting of $n$ integers ($0 \\le a_i \\le 10^9$).\n\nIt is guaranteed that the sum of $n$ across all tests does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, you need to output a single integer — the minimum length of the segment $(l, r)$ for which $f(a_{l \\dots r}) \\ge k$. If such a segment is not found, you should output $-1$.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n5 0\n\n1 2 3 4 5\n\n5 7\n\n1 2 3 4 5\n\n5 8\n\n1 2 3 4 5\n\n5 7\n\n3 5 1 4 2\n\n5 3\n\n3 5 1 4 2\n\n6 71\n\n26 56 12 45 60 27\n\n```\n\n#### Output #1\n\n```\n1\n2\n-1\n4\n2\n-1\n```", "cfid": "2093G"}
{"problem_id": "2084G1", "problem_title": "G1. Wish Upon a Satellite (Easy Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2084/G1", "problem_statement": "This is the easy version of the problem. The difference between the versions is that in this version, $t \\le 1000$, $n \\le 5000$ and the sum of $n$ does not exceed $5000$. You can hack only if you solved all versions of this problem.\n\nFor a non-empty sequence $c$ of length $k$, define $f(c)$ as follows:\n\n- Turtle and Piggy are playing a game on a sequence. They are given the sequence $c_1, c_2, \\ldots, c_k$, and Turtle goes first. Turtle and Piggy alternate in turns (so, Turtle does the first turn, Piggy does the second, Turtle does the third, etc.).\n- The game goes as follows:\n  - Let the current length of the sequence be $m$. If $m = 1$, the game ends.\n  - If the game does not end and it's Turtle's turn, then Turtle must choose an integer $i$ such that $1 \\le i \\le m - 1$, set $c_i$ to $\\min(c_i, c_{i + 1})$, and remove $c_{i + 1}$.\n  - If the game does not end and it's Piggy's turn, then Piggy must choose an integer $i$ such that $1 \\le i \\le m - 1$, set $c_i$ to $\\max(c_i, c_{i + 1})$, and remove $c_{i + 1}$.\n- Turtle wants to maximize the value of $c_1$ in the end, while Piggy wants to minimize the value of $c_1$ in the end.\n- $f(c)$ is the value of $c_1$ in the end if both players play optimally.\n\nFor a permutation $p$ of length $n$$^{\\\\text{∗}}$, Turtle defines the beauty of the permutation as $\\sum\\limits_{i = 1}^n \\sum\\limits_{j = i}^n f([p_i, p_{i + 1}, \\ldots, p_j])$ (i.e., the sum of $f(c)$ where $c$ is a non-empty subsegment$^{\\text{†}}$ of $p$).\n\nPiggy gives Turtle a permutation $a$ of length $n$ where some elements are missing and represented by $0$.\n\nTurtle asks you to determine a permutation $b$ of length $n$ such that:\n\n- $b$ can be formed by filling in the missing elements of $a$ (i.e., for all $1 \\le i \\le n$, if $a_i \\ne 0$, then $b_i = a_i$).\n- The beauty of the permutation $b$ is maximized.\n\nFor convenience, you only need to find the maximum beauty of such permutation $b$.\n\n$^{\\text{∗}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n$^{\\text{†}}$A sequence $a$ is a subsegment of a sequence $b$ if $a$ can be obtained from $b$ by the deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 5000$).\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le n$). It is guaranteed that the elements of $a$ that are not $0$ are distinct.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5000$.\n\n### Output\n\nFor each test case, output a single integer — the maximum beauty of the permutation $b$.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n2\n\n1 0\n\n3\n\n0 0 0\n\n3\n\n0 1 0\n\n5\n\n3 2 4 5 1\n\n7\n\n0 3 2 5 0 0 0\n\n10\n\n1 2 6 5 8 9 0 0 0 0\n\n5\n\n0 4 1 0 0\n\n5\n\n0 1 5 2 3\n\n```\n\n#### Output #1\n\n```\n4\n12\n11\n44\n110\n300\n45\n40\n```\n\n### Note\n\nIn the first test case, the permutation $b$ with the maximum beauty is $[1, 2]$. The beauty of $[1, 2]$ is $4$ since $f([1]) + f([2]) + f([1, 2]) = 1 + 2 + 1 = 4$. If $c = [1, 2]$, then $f(c) = 1$ since Turtle can only choose $i = 1$ and he will set $c_1$ to $\\min(c_1, c_2) = 1$.\n\nIn the second test case, one of the permutations $b$ with the maximum beauty is $[3, 2, 1]$. The beauty of $[3, 2, 1]$ is $12$ since $f([3]) + f([2]) + f([1]) + f([3, 2]) + f([2, 1]) + f([3, 2, 1]) = 3 + 2 + 1 + 2 + 1 + 3 = 12$.\n\nIn the third test case, one of the permutations $b$ with the maximum beauty is $[2, 1, 3]$.\n\nIn the fourth test case, if $c = [3, 2, 4, 5, 1]$, then $f(c) = 3$. One of the possible game processes is as follows:\n\n- Turtle can choose $i = 3$. Then he will set $c_3$ to $\\min(c_3, c_4) = 4$ and remove $c_4$. The sequence $c$ will become $[3, 2, 4, 1]$.\n- Piggy can choose $i = 1$. Then he will set $c_1$ to $\\max(c_1, c_2) = 3$ and remove $c_2$. The sequence $c$ will become $[3, 4, 1]$.\n- Turtle can choose $i = 2$. Then he will set $c_2$ to $\\min(c_2, c_3) = 1$ and remove $c_3$. The sequence $c$ will become $[3, 1]$.\n- Piggy can choose $i = 1$. Then he will set $c_1$ to $\\max(c_1, c_2) = 3$ and remove $c_2$. The sequence $c$ will become $[3]$.\n- The length of the sequence becomes $1$, so the game will end. The value of $c_1$ will be $3$ in the end.\n\nIn the fifth test case, one of the permutations $b$ with the maximum beauty is $[1, 3, 2, 5, 6, 4, 7]$.", "cfid": "2084G1"}
{"problem_id": "2084E", "problem_title": "E. Blossom", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2084/E", "problem_statement": "You are given a permutation $a$ of length $n$$^{\\\\text{∗}}$ where some elements are missing and represented by $-1$.\n\nDefine the value of a permutation as the sum of the MEX$^{\\text{†}}$ of all its non-empty subsegments$^{\\text{‡}}$.\n\nFind the sum of the value of all possible valid permutations that can be formed by filling in the missing elements of $a$ modulo $10^9 + 7$.\n\n$^{\\text{∗}}$ A permutation of length $n$ is an array consisting of $n$ distinct integers from $\\bf{0}$ to $\\bf{n - 1}$ in arbitrary order. For example, $[1,2,0,4,3]$ is a permutation, but $[0,1,1]$ is not a permutation ($1$ appears twice in the array), and $[0,2,3]$ is also not a permutation ($n=3$ but there is $3$ in the array).\n\n$^{\\text{†}}$The minimum excluded (MEX) of a collection of integers $c_1, c_2, \\ldots, c_k$ is defined as the smallest non-negative integer $x$ which does not occur in the collection $c$.\n\n$^{\\text{‡}}$A sequence $a$ is a subsegment of a sequence $b$ if $a$ can be obtained from $b$ by the deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 5000$).\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($-1 \\le a_i < n$).\n\nIt is guaranteed that the elements of $a$ that are not $-1$ are distinct.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5000$.\n\n### Output\n\nFor each test case, output a single integer — the sum of the value of all possible valid permutations modulo $10^9 + 7$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n2\n\n0 -1\n\n2\n\n-1 -1\n\n3\n\n2 0 1\n\n3\n\n-1 2 -1\n\n5\n\n-1 0 -1 2 -1\n\n```\n\n#### Output #1\n\n```\n3\n6\n7\n10\n104\n```\n\n### Note\n\nIn the first test case, the only valid permutation is $[0, 1]$, and the value of $[0, 1]$ is $3$ since:\n\n\n\n$$\\operatorname{mex}([0]) + \\operatorname{mex}([1]) + \\operatorname{mex}([0, 1]) = 1 + 0 + 2 = 3$$\n\nSo the answer is $3$.\n\nIn the second test case, there are two valid permutations: $[0, 1]$ and $[1, 0]$. The value of $[0, 1]$ and the value of $[1, 0]$ is $3$, so the answer is $3 + 3 = 6$.\n\nIn the fourth test case, there are two valid permutations: $[0, 2, 1]$ and $[1, 2, 0]$. The value of $[0, 2, 1]$ is $5$ since:\n\n\n\n$$\\operatorname{mex}([0]) + \\operatorname{mex}([2]) + \\operatorname{mex}([1]) + \\operatorname{mex}([0, 2]) + \\operatorname{mex}([2, 1]) + \\operatorname{mex}([0, 2, 1]) = 1 + 0 + 0 + 1 + 0 + 3 = 5$$\n\nAnd the value of $[1, 2, 0]$ is $5$ since:\n\n\n\n$$\\operatorname{mex}([1]) + \\operatorname{mex}([2]) + \\operatorname{mex}([0]) + \\operatorname{mex}([1, 2]) + \\operatorname{mex}([2, 0]) + \\operatorname{mex}([1, 2, 0]) = 0 + 0 + 1 + 0 + 1 + 3 = 5$$\n\nSo the answer is $5 + 5 = 10$.", "cfid": "2084E"}
{"problem_id": "2084F", "problem_title": "F. Skyscape", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2084/F", "problem_statement": "You are given a permutation $a$ of length $n$$^{\\\\text{∗}}$.\n\nWe say that a permutation $b$ of length $n$ is good if the two permutations $a$ and $b$ can become the same after performing the following operation at most $n$ times (possibly zero):\n\n- Choose two integers $l, r$ such that $1 \\le l < r \\le n$ and $a_r = \\min(a_l, a_{l + 1}, \\ldots, a_r)$.\n- Cyclically shift the subsegment $[a_l, a_{l + 1}, \\ldots, a_r]$ one position to the right. In other words, replace $a$ with $[a_1, \\ldots, a_{l - 1}, \\; a_r, a_l, a_{l + 1}, \\ldots, a_{r - 1}, \\; a_{r + 1}, \\ldots, a_n]$.\n\nYou are also given a permutation $c$ of length $n$ where some elements are missing and represented by $0$.\n\nYou need to find a good permutation $b_1, b_2, \\ldots, b_n$ such that $b$ can be formed by filling in the missing elements of $c$ (i.e., for all $1 \\le i \\le n$, if $c_i \\ne 0$, then $b_i = c_i$). If it is impossible, output $-1$.\n\n$^{\\text{∗}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n \\le 5 \\cdot 10^5$).\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le n$). It is guaranteed that $a$ is a permutation of length $n$.\n\nThe third line of each test case contains $n$ integers $c_1, c_2, \\ldots, c_n$ ($0 \\le c_i \\le n$). It is guaranteed that the elements of $c$ that are not $0$ are distinct.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5 \\cdot 10^5$.\n\n### Output\n\nFor each test case:\n\n- If it is impossible to find such a good permutation $b$, output a single integer $-1$.\n- Otherwise, output $n$ integers $b_1, b_2, \\ldots, b_n$ — the good permutation $b$ you've found. You need to ensure that for all $1 \\le i \\le n$, if $c_i \\ne 0$, then $b_i = c_i$. If there are multiple answers, output any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n9\n\n2\n\n2 1\n\n1 2\n\n4\n\n3 2 4 1\n\n2 0 0 1\n\n5\n\n3 2 1 5 4\n\n1 3 0 0 0\n\n5\n\n3 2 1 5 4\n\n3 2 1 5 4\n\n5\n\n3 2 1 5 4\n\n3 2 5 1 4\n\n6\n\n3 5 6 2 1 4\n\n0 2 0 5 0 0\n\n6\n\n3 5 6 2 1 4\n\n0 2 0 6 4 0\n\n9\n\n6 9 2 4 1 7 8 3 5\n\n0 2 5 9 0 0 0 8 0\n\n9\n\n8 5 3 9 1 7 4 6 2\n\n0 0 8 0 7 0 4 0 2\n\n```\n\n#### Output #1\n\n```\n1 2\n2 3 4 1\n1 3 2 4 5\n3 2 1 5 4\n-1\n3 2 1 5 4 6\n-1\n-1\n1 3 8 5 7 9 4 6 2\n```\n\n### Note\n\nIn the first test case, $b = [1, 2]$ is a valid answer since after performing the following operation, $a$ and $b$ will become the same:\n\n- Choose $l = 1, r = 2$ and cyclically shift the subsegment $[a_1, a_2]$ one position to the right. Then $a$ will become $[1, 2]$.\n\nIn the second test case, $b = [2, 3, 4, 1]$ is a valid answer since after performing the following operation, $a$ and $b$ will become the same:\n\n- Choose $l = 1, r = 2$ and cyclically shift the subsegment $[a_1, a_2]$ one position to the right. Then $a$ will become $[2, 3, 4, 1]$.\n\nIn the third test case, $b = [1, 3, 2, 4, 5]$ is a valid answer since after performing the following operation, $a$ and $b$ will become the same:\n\n- Choose $l = 1, r = 3$ and cyclically shift the subsegment $[a_1, a_2, a_3]$ one position to the right. Then $a$ will become $[1, 3, 2, 5, 4]$.\n- Choose $l = 4, r = 5$ and cyclically shift the subsegment $[a_4, a_5]$ one position to the right. Then $a$ will become $[1, 3, 2, 4, 5]$.\n\nIn the fourth test case, $b = [3, 2, 1, 5, 4]$ is a valid answer since $a$ and $b$ are already the same.\n\nIn the fifth test case, it is impossible to find such a good permutation $b$, so you should output $-1$.\n\nIn the sixth test case, $b = [3, 2, 1, 5, 4, 6]$ is a valid answer since after performing the following operation, $a$ and $b$ will become the same:\n\n- Choose $l = 2, r = 4$ and cyclically shift the subsegment $[a_2, a_3, a_4]$ one position to the right. Then $a$ will become $[3, 2, 5, 6, 1, 4]$.\n- Choose $l = 3, r = 5$ and cyclically shift the subsegment $[a_3, a_4, a_5]$ one position to the right. Then $a$ will become $[3, 2, 1, 5, 6, 4]$.\n- Choose $l = 5, r = 6$ and cyclically shift the subsegment $[a_5, a_6]$ one position to the right. Then $a$ will become $[3, 2, 1, 5, 4, 6]$.", "cfid": "2084F"}
{"problem_id": "2086E", "problem_title": "E. Zebra-like Numbers", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2086/E", "problem_statement": "We call a positive integer zebra-like if its binary representation has alternating bits up to the most significant bit, and the least significant bit is equal to $1$. For example, the numbers $1$, $5$, and $21$ are zebra-like, as their binary representations $1$, $101$, and $10101$ meet the requirements, while the number $10$ is not zebra-like, as the least significant bit of its binary representation $1010$ is $0$.\n\nWe define the zebra value of a positive integer $e$ as the minimum integer $p$ such that $e$ can be expressed as the sum of $p$ zebra-like numbers (possibly the same, possibly different)\n\nGiven three integers $l$, $r$, and $k$, calculate the number of integers $x$ such that $l \\le x \\le r$ and the zebra value of $x$ equals $k$.\n\n### Input\n\nEach test consists of several test cases. The first line contains a single integer $t$ ($1 \\le t \\le 100$) — the number of test cases. The description of test cases follows.\n\nThe only line of each test case contains three integers $l$, $r$ ($1 \\le l \\le r \\le 10^{18}$) and $k$ ($1 \\le k \\le 10^{18}$).\n\n### Output\n\nFor each test case, output a single integer — the number of integers in $[l, r]$ with zebra value $k$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n1 100 3\n\n1 1 1\n\n15 77 2\n\n2 10 100\n\n1234567 123456789101112131 12\n\n```\n\n#### Output #1\n\n```\n13\n1\n3\n0\n4246658701\n```\n\n### Note\n\nIn the first test case, there are $13$ suitable numbers: $3, 7, 11, 15, 23, 27, 31, 43, 47, 63, 87, 91, 95$.\n\nEach of them can be represented as a sum of $3$ zebra-like numbers.", "cfid": "2086E"}
{"problem_id": "2086F", "problem_title": "F. Online Palindrome", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2086/F", "problem_statement": "This is an interactive problem.\n\nThe jury has a string $s$ consisting of lowercase Latin letters. The following constraints apply to this string:\n\n- the string has an odd length that does not exceed $99$;\n- the string consists only of the characters \"a\" and \"b\".\n\nThere is also a string $t$, which is initially empty. Then, $|s|$ steps happen. During the $i$-th step, the following events occur:\n\n- first, the jury tells you the character $s_i$ and appends it to the end of the string $t$;\n- then, you may swap any two characters in $t$, or do nothing.\n\nYour task is to ensure that after the $|s|$-th step, the string $t$ is a palindrome.\n\n### Interaction\n\nThe interactive interaction starts immediately.\n\nDuring each step, your program will receive one character — the next character of the string $s$ or \"0\" (zero) if the string has ended. If the character \"0\" is received, your program must terminate immediately.\n\nAfter receiving $s_{i}$, you must output the positions of the characters to be swapped, that is, two integers $l$ and $r$ ($1 \\le l,r \\le i$) or, if you do not want to swap characters, then \"0 0\".\n\nIf your program makes an invalid operation, for example, by trying to swap characters from non-existing positions, or the resulting string $t$ is not a palindrome, the jury program will print one character \"X\" on a separate line. If your program receives \"X\" as the response, it should terminate immediately; otherwise, the verdict of your submission will be undefined.\n\nThe interactor in this problem is not adaptive, meaning that the string $s$ does not change during the interaction.\n\nAfter each output request, do not forget to output a newline and flush the output buffer. Otherwise, you will receive a verdict of \"Idleness limit exceeded\". To do this, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- sys.stdout.flush() in Python;\n- refer to the documentation for other languages.\n\nHack format\n\nFor hacks, use the following format.\n\nThe first line should contain a single integer $|s|$ — the length of the string $s$.\n\nThe second line should contain the $s$ itself ($1 \\le |s| \\le 99, |s| \\bmod 2 = 1$), consisting of lowercase Latin letters \"a\" and \"b\".\n\n### Examples\n\n#### Input #1\n\n```\na\n\na\n\nb\n\n0```\n\n#### Output #1\n\n```\n\n0 0\n\n1 2\n\n2 3\n```\n\n#### Input #2\n\n```\na\n\na\n\nb\n\na\n\nb\n\n0\n```\n\n#### Output #2\n\n```\n\n0 0\n\n2 1\n\n3 2\n\n4 4\n\n4 5\n```", "cfid": "2086F"}
{"problem_id": "2118F", "problem_title": "F. Shifts and Swaps", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2118/F", "problem_statement": "You are given arrays $a$ and $b$ of length $n$ and an integer $m$.\n\nThe arrays only contain integers from $1$ to $m$, and both arrays contain all integers from $1$ to $m$.\n\nYou may repeatedly perform either of the following operations on $a$:\n\n- cyclic shift$^{\\text{∗}}$ the array to the left\n- swap two neighboring elements if their difference is at least $2$.\n\nIs it possible to transform the first array into the second?\n\n$^{\\text{∗}}$A left cyclic shift of a zero-indexed array $p$ of length $n$ is an array $q$ such that $q_i = p_{(i + 1) \\bmod n}$ for all $0 \\le i < n$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^5$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($2 \\le m \\le n \\le 5\\cdot10^5$) — the length of the arrays and the number of distinct elements in $a$.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le m$) — denoting the array $a$.\n\nThe third line contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($1 \\le b_i \\le m$) — denoting the array $b$.\n\nIt is guaranteed that both arrays contain all integers from $1$ to $m$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5\\cdot10^5$.\n\n### Output\n\nFor each test case, output \"YES\" if it is possible to transform the first array into the second and \"NO\" otherwise. You can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n3 3\n\n1 2 3\n\n3 2 1\n\n4 3\n\n1 1 2 3\n\n1 2 2 3\n\n4 4\n\n1 3 2 4\n\n2 3 4 1\n\n6 3\n\n1 1 2 1 2 3\n\n2 1 1 2 3 1\n\n5 4\n\n2 3 4 1 1\n\n3 2 1 1 4\n\n9 7\n\n2 4 6 7 3 1 5 4 6\n\n6 7 3 5 6 4 2 4 1\n\n9 8\n\n8 3 5 6 5 4 1 7 2\n\n7 5 3 5 8 4 6 2 1\n\n8 6\n\n2 1 5 4 6 3 5 4\n\n6 1 5 2 4 5 3 4\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nYES\nNO\nYES\nYES\nNO\nNO\n```\n\n### Note\n\nIn the first test case, you can transform array $a$ into array $b$ with the following steps:\n\n- \\[$1$, $2$, $3$\\] — shift to the left\n- \\[$2$, $3$, $1$\\] — swap indices $2$ and $3$\n- \\[$2$, $1$, $3$\\] — shift to the left\n- \\[$1$, $3$, $2$\\] — shift to the left\n- \\[$3$, $2$, $1$\\]\n\nIn the second test case, it can be proven that it is impossible to transform array $a$ into array $b$ with the given operations.", "cfid": "2118F"}
{"problem_id": "2115E", "problem_title": "E. Gellyfish and Mayflower", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2115/E", "problem_statement": "[Mayflower by Plum](https://www.youtube.com/watch?v=wD6_6R7dhnE/)\n\nMay, Gellyfish's friend, loves playing a game called \"Inscryption\" which is played on a directed acyclic graph with $n$ vertices and $m$ edges. All edges $ a \\rightarrow b$ satisfy $a<b$.\n\nYou start in vertex $1$ with some coins. You need to move from vertex $1$ to the vertex where the boss is located along the directed edges, and then fight with the final boss.\n\nEach of the $n$ vertices of the graph contains a Trader who will sell you a card with power $w_i$ for $c_i$ coins. You can buy as many cards as you want from each Trader. However, you can only trade with the trader on the $i$-th vertex if you are currently on the $i$-th vertex.\n\nIn order to defeat the boss, you want the sum of the power of your cards to be as large as possible.\n\nYou will have to answer the following $q$ queries:\n\n- Given integers $p$ and $r$. If the final boss is located at vertex $p$, and you have $r$ coins in the beginning, what is the maximum sum of the power of your cards when you fight the final boss? Note that you are allowed to trade cards on vertex $p$.\n\n### Input\n\nThe first line of input contains two integers $n$ and $m$ ($1 \\leq n \\leq 200$, $n - 1 \\leq m \\leq \\min(\\frac {n(n-1)} 2, 2000)$) — the number of vertices and the number of edges.\n\nThe $i$-th of the following $n$ lines of input each contains two integers $c_i$ and $w_i$ ($1 \\leq c_i \\leq 200$, $1 \\leq w_i \\leq 10^9$) — describing the cards of the Trader on the $i$-th vertex.\n\nIn the following $m$ lines of input, each line contains two integers $u$ and $v$ ($1 \\leq u < v \\leq n$), indicating a directed edge from vertex $u$ to vertex $v$. It is guaranteed that every edge $(u,v)$ appears at most once.\n\nThe next line of input contains one single integer $q$ ($1 \\leq q \\leq 2 \\cdot 10^5$) — the number of queries.\n\nIn the following $q$ lines of input, each line contains two integers $p$ and $r$ ($1 \\leq p \\leq n$, $1 \\leq r \\leq 10^9$).\n\nIt is guaranteed that for all $i$, there exists a path from vertex $1$ to vertex $i$.\n\n### Output\n\nFor each query, output the answer to the query.\n\n### Examples\n\n#### Input #1\n\n```\n\n3 2\n\n3 9\n\n2 5\n\n1 2\n\n1 2\n\n2 3\n\n6\n\n1 4\n\n2 4\n\n3 4\n\n1 5\n\n2 5\n\n3 5\n\n```\n\n#### Output #1\n\n```\n9\n10\n11\n9\n14\n14\n```\n\n#### Input #2\n\n```\n\n4 4\n\n10 1000\n\n2 5\n\n1 2\n\n3 9\n\n1 2\n\n1 3\n\n2 4\n\n3 4\n\n9\n\n2 3\n\n3 3\n\n4 1\n\n4 2\n\n4 4\n\n4 5\n\n4 101\n\n4 102\n\n4 103\n\n```\n\n#### Output #2\n\n```\n5\n6\n2\n5\n11\n14\n10002\n10005\n10009\n```\n\n#### Input #3\n\n```\n\n6 8\n\n9 5\n\n4 1\n\n8 9\n\n10 4\n\n9 4\n\n8 2\n\n3 5\n\n4 6\n\n3 4\n\n2 3\n\n1 2\n\n2 5\n\n4 5\n\n1 3\n\n10\n\n3 12\n\n1 9\n\n6 47\n\n2 19\n\n1 129\n\n5 140\n\n2 148\n\n1 63\n\n2 43\n\n3 102\n\n```\n\n#### Output #3\n\n```\n10\n5\n46\n10\n70\n154\n81\n35\n21\n109\n```\n\n### Note\n\nFor the third query in the first example, we will play the game in the following order:\n\n- buy $1$ card with $9$ power from the trader on vertex $1$, and you'll still have $1$ coin after the trade.\n- move from vertex $1$ to vertex $2$.\n- move from vertex $2$ to vertex $3$.\n- buy $1$ card with $2$ power from the trader on vertex $3$, and you'll have no coins after the trade.\n\nIn the end, we will have $1$ card with $9$ power and $1$ card with $2$, so the sum of the power of the cards is $9+2=11$.\n\nFor the fifth query in the second example, we will play the game in the following order:\n\n- move from vertex $1$ to vertex $3$.\n- buy $1$ card with $2$ power from the trader on vertex $3$, and you'll still have $3$ coins after the trade.\n- move from vertex $3$ to vertex $4$.\n- buy $1$ card with $9$ power from the trader on vertex $4$, and you'll have no coins after the trade.\n\nIn the end, we will have $1$ card with $2$ power and $1$ card with $9$, so the sum of the power of the cards is $2+9=11$.\n\nFor the sixth query in the second example, we will play the game in the following order:\n\n- move from vertex $1$ to vertex $2$.\n- buy $1$ card with $5$ power from the trader on vertex $2$, and you'll still have $3$ coins after the trade.\n- move from vertex $2$ to vertex $4$.\n- buy $1$ card with $9$ power from the trader on vertex $4$, and you'll have no coins after the trade.\n\nIn the end, we will have $1$ card with $5$ power and $1$ card with $9$, so the sum of the power of the cards is $5+9=14$.\n\nFor the seventh query in the second example, we will play the game in the following order:\n\n- buy $10$ cards with $1000$ power from the trader on vertex $1$, and you'll still have $1$ coin after the trade.\n- move from vertex $1$ to vertex $3$.\n- buy $1$ card with $2$ power from the trader on vertex $3$, and you'll have no coins after the trade.\n- move from vertex $3$ to vertex $4$.\n\nIn the end, we will have $10$ cards with $1000$ power and $1$ card with $2$ power, so the sum of the power of the cards is $10 \\cdot 1000+2=10\\,002$.", "cfid": "2115E"}
{"problem_id": "2115F1", "problem_title": "F1. Gellyfish and Lycoris Radiata (Easy Version)", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2115/F1", "problem_statement": "This is the easy version of the problem. The difference between the versions is that in this version, the time limit and the constraints on $n$ and $q$ are lower. You can hack only if you solved all versions of this problem.\n\nGellyfish has an array consisting of $n$ sets. Initially, all the sets are empty.\n\nNow Gellyfish will do $q$ operations. Each operation contains one modification operation and one query operation, for the $i$-th ($1 \\leq i \\leq q$) operation:\n\nFirst, there will be a modification operation, which is one of the following:\n\n1. Insert operation: You are given an integer $r$. For the $1$-th to $r$-th sets, insert element $i$. Note that the element inserted here is $i$, the index of the operation, not the index of the set.\n2. Reverse operation: You are given an integer $r$. Reverse the $1$-th to $r$-th sets.\n3. Delete operation: You are given an integer $x$. Delete element $x$ from all sets that contain $x$.\n\nFollowed by a query operation:\n\n- Query operation: You are given an integer $p$. Output the smallest element in the $p$-th set (If the $p$-th set is empty, the answer is considered to be $0$).\n\nNow, Flower needs to provide the answer for each query operation. Please help her!\n\nAdditional constraint on the problem: Gellyfish will only give the next operation after Flower has answered the previous query operation. That is, you need to solve this problem online. Please refer to the input format for more details.\n\n### Input\n\nThe first line contains two integers $n$ and $q$ ($1 \\leq n, q \\leq 10^5$) — the number of the sets and the number of operations.\n\nAs you need to respond to the operations online, the operations will be encoded.\n\nThe $i$-th line of the following $q$ lines contains three integers $a$, $b$, and $c$ ($1 \\leq a \\leq 3$, $1 \\leq c \\leq n$) — describing the $i$-th operation in an encoded form.\n\nHere, $a$ represents the type of modification operation. Among them, $a=1$ represents Insert operation, $a=2$ represents Reverse operation, $a=3$ represents Delete operation.\n\n- If $a = 1$, then the modification operation is the Insert operation. It will be guaranteed that $1 \\leq b \\leq n$. $r$ will be calculated as $r=(b+\\text{ans}_{i-1}-1) \\bmod n + 1$.\n- If $a=2$, then the modification operation is the Reverse operation. It will be guaranteed that $1 \\leq b \\leq n$. $r$ will be calculated as $r=(b+\\text{ans}_{i-1}-1) \\bmod n + 1$.\n- If $a=3$, then the modification operation is the Delete operation. It will be guaranteed that $1 \\leq b \\leq q$. $x$ will be calculated as $x=(b+\\text{ans}_{i-1}-1) \\bmod q + 1$.\n\nFor the query operation, $p$ will be calculated as $p = (c+\\text{ans}_{i-1}-1) \\bmod n + 1$.\n\nHere $ \\text{ans}_{i} (1 \\leq i \\leq q)$ represents the answer to the query operation in the $i$-th operation. Additionally, we define $ \\text{ans}_{0} = 0$.\n\n### Output\n\nFor each query operation, output the answer to the query.\n\n### Example\n\n#### Input #1\n\n```\n\n5 10\n\n1 2 2\n\n2 3 1\n\n1 5 3\n\n2 2 5\n\n1 5 2\n\n2 4 4\n\n3 2 2\n\n3 1 2\n\n3 10 5\n\n3 2 4\n\n```\n\n#### Output #1\n\n```\n1\n0\n1\n1\n3\n1\n0\n5\n0\n0\n```\n\n### Note\n\nAll the sets are empty in the beginning, so the array is $[\\{\\}, \\{\\}, \\{\\}, \\{\\}, \\{\\}]$.\n\nWith the decoding method given before, we can see what happens in each operation:\n\n01. For the first operation: $a = 1, r = 2, p = 2$. The modification operation is an Insert operation; element $1$ is inserted into the first two sets; so the array becomes $[\\{1\\}, \\{1\\}, \\{\\}, \\{\\}, \\{\\}]$, and the smallest element in the second set is $1$.\n02. For the second operation: $a = 2, r = 4, p = 2$. The modification operation is a Reverse operation; the first four sets are reversed; so the array becomes $[\\{\\}, \\{\\}, \\{1\\}, \\{1\\}, \\{\\}]$, and the second set is empty, which means the answer is $0$.\n03. For the third operation: $a = 1, r = 5, p = 3$. The modification operation is an Insert operation; element $3$ is inserted into all the sets; so the array becomes $[\\{3\\}, \\{3\\}, \\{1, 3\\}, \\{1, 3\\}, \\{3\\}]$, and the smallest element in the third set is $1$.\n04. For the fourth operation: $a = 2, r = 3, p = 1$. The modification operation is a Reverse operation; the first three sets are reversed; so the array becomes $[\\{1, 3\\}, \\{3\\}, \\{3\\}, \\{1, 3\\}, \\{3\\}]$, and the smallest element in the first set is $1$.\n05. For the fifth operation: $a = 1, r = 1, p = 3$. The modification operation is an Insert operation; element $5$ is inserted into the first set; so the array becomes $[\\{1, 3, 5\\}, \\{3\\}, \\{3\\}, \\{1, 3\\}, \\{3\\}]$, and the smallest element in the third set is $3$.\n06. For the sixth operation: $a = 2, r = 2, p = 2$. The modification operation is a Reverse operation; the first two sets are reversed; so the array becomes $[\\{3\\}, \\{1, 3, 5\\}, \\{3\\}, \\{1, 3\\}, \\{3\\}]$, and the smallest element in the second set is $1$.\n07. For the seventh operation: $a = 3, x = 3, p = 3$. The modification operation is a Delete operation; element $3$ is deleted from all the sets; so the array becomes $[\\{\\}, \\{1, 5\\}, \\{\\}, \\{1\\}, \\{\\}]$, and the third set is empty, which means the answer is $0$.\n08. For the eighth operation: $a = 3, x = 1, p = 2$. The modification operation is a Delete operation; element $1$ is deleted from all the sets; so the array becomes $[\\{\\}, \\{5\\}, \\{\\}, \\{\\}, \\{\\}]$, and the smallest element in the second set is $5$.\n09. For the ninth operation: $a = 3, x = 5, p = 5$. The modification operation is a Delete operation; element $5$ is deleted from all the sets; so the array becomes $[\\{\\}, \\{\\}, \\{\\}, \\{\\}, \\{\\}]$, and the fifth set is empty, which means the answer is $0$.\n10. For the tenth operation: $a = 3, x = 2, p = 4$. The modification operation is a Delete operation; element $2$ is deleted from all the sets; so the array becomes $[\\{\\}, \\{\\}, \\{\\}, \\{\\}, \\{\\}]$, and the fourth set is empty, which means the answer is $0$.\n\nPlease note that although we have not inserted element $2$ into the sets, we still delete element $2$ from all the sets in the tenth operation, which means that the Delete operation doesn't necessarily require the existence of a set to contain the deleted element. It also shows that it is possible to have two Delete operations that delete the same element.", "cfid": "2115F1"}
{"problem_id": "2115F2", "problem_title": "F2. Gellyfish and Lycoris Radiata (Hard Version)", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2115/F2", "problem_statement": "This is the hard version of the problem. The difference between the versions is that in this version, the time limit and the constraints on $n$ and $q$ are higher. You can hack only if you solved all versions of this problem.\n\nGellyfish has an array consisting of $n$ sets. Initially, all the sets are empty.\n\nNow Gellyfish will do $q$ operations. Each operation contains one modification operation and one query operation, for the $i$-th ($1 \\leq i \\leq q$) operation:\n\nFirst, there will be a modification operation, which is one of the following:\n\n1. Insert operation: You are given an integer $r$. For the $1$-th to $r$-th sets, insert element $i$. Note that the element inserted here is $i$, the index of the operation, not the index of the set.\n2. Reverse operation: You are given an integer $r$. Reverse the $1$-th to $r$-th sets.\n3. Delete operation: You are given an integer $x$. Delete element $x$ from all sets that contain $x$.\n\nFollowed by a query operation:\n\n- Query operation: You are given an integer $p$. Output the smallest element in the $p$-th set (If the $p$-th set is empty, the answer is considered to be $0$).\n\nNow, Flower needs to provide the answer for each query operation. Please help her!\n\nAdditional constraint on the problem: Gellyfish will only give the next operation after Flower has answered the previous query operation. That is, you need to solve this problem online. Please refer to the input format for more details.\n\n### Input\n\nThe first line contains two integers $n$ and $q$ ($1 \\leq n, q \\leq 3 \\cdot 10^5$) — the number of the sets and the number of operations.\n\nAs you need to respond to the operations online, the operations will be encoded.\n\nThe $i$-th line of the following $q$ lines contains three integers $a$, $b$, and $c$ ($1 \\leq a \\leq 3$, $1 \\leq c \\leq n$) — describing the $i$-th operation in an encoded form.\n\nHere, $a$ represents the type of modification operation. Among them, $a=1$ represents Insert operation, $a=2$ represents Reverse operation, $a=3$ represents Delete operation.\n\n- If $a = 1$, then the modification operation is the Insert operation. It will be guaranteed that $1 \\leq b \\leq n$. $r$ will be calculated as $r=(b+\\text{ans}_{i-1}-1) \\bmod n + 1$.\n- If $a=2$, then the modification operation is the Reverse operation. It will be guaranteed that $1 \\leq b \\leq n$. $r$ will be calculated as $r=(b+\\text{ans}_{i-1}-1) \\bmod n + 1$.\n- If $a=3$, then the modification operation is the Delete operation. It will be guaranteed that $1 \\leq b \\leq q$. $x$ will be calculated as $x=(b+\\text{ans}_{i-1}-1) \\bmod q + 1$.\n\nFor the query operation, $p$ will be calculated as $p = (c+\\text{ans}_{i-1}-1) \\bmod n + 1$.\n\nHere $ \\text{ans}_{i} (1 \\leq i \\leq q)$ represents the answer to the query operation in the $i$-th operation. Additionally, we define $ \\text{ans}_{0} = 0$.\n\n### Output\n\nFor each query operation, output the answer to the query.\n\n### Example\n\n#### Input #1\n\n```\n\n5 10\n\n1 2 2\n\n2 3 1\n\n1 5 3\n\n2 2 5\n\n1 5 2\n\n2 4 4\n\n3 2 2\n\n3 1 2\n\n3 10 5\n\n3 2 4\n\n```\n\n#### Output #1\n\n```\n1\n0\n1\n1\n3\n1\n0\n5\n0\n0\n```\n\n### Note\n\nAll the sets are empty in the beginning, so the array is $[\\{\\}, \\{\\}, \\{\\}, \\{\\}, \\{\\}]$.\n\nWith the decoding method given before, we can see what happens in each operation:\n\n01. For the first operation: $a = 1, r = 2, p = 2$. The modification operation is an Insert operation; element $1$ is inserted into the first two sets; so the array becomes $[\\{1\\}, \\{1\\}, \\{\\}, \\{\\}, \\{\\}]$, and the smallest element in the second set is $1$.\n02. For the second operation: $a = 2, r = 4, p = 2$. The modification operation is a Reverse operation; the first four sets are reversed; so the array becomes $[\\{\\}, \\{\\}, \\{1\\}, \\{1\\}, \\{\\}]$, and the second set is empty, which means the answer is $0$.\n03. For the third operation: $a = 1, r = 5, p = 3$. The modification operation is an Insert operation; element $3$ is inserted into all the sets; so the array becomes $[\\{3\\}, \\{3\\}, \\{1, 3\\}, \\{1, 3\\}, \\{3\\}]$, and the smallest element in the third set is $1$.\n04. For the fourth operation: $a = 2, r = 3, p = 1$. The modification operation is a Reverse operation; the first three sets are reversed; so the array becomes $[\\{1, 3\\}, \\{3\\}, \\{3\\}, \\{1, 3\\}, \\{3\\}]$, and the smallest element in the first set is $1$.\n05. For the fifth operation: $a = 1, r = 1, p = 3$. The modification operation is an Insert operation; element $5$ is inserted into the first set; so the array becomes $[\\{1, 3, 5\\}, \\{3\\}, \\{3\\}, \\{1, 3\\}, \\{3\\}]$, and the smallest element in the third set is $3$.\n06. For the sixth operation: $a = 2, r = 2, p = 2$. The modification operation is a Reverse operation; the first two sets are reversed; so the array becomes $[\\{3\\}, \\{1, 3, 5\\}, \\{3\\}, \\{1, 3\\}, \\{3\\}]$, and the smallest element in the second set is $1$.\n07. For the seventh operation: $a = 3, x = 3, p = 3$. The modification operation is a Delete operation; element $3$ is deleted from all the sets; so the array becomes $[\\{\\}, \\{1, 5\\}, \\{\\}, \\{1\\}, \\{\\}]$, and the third set is empty, which means the answer is $0$.\n08. For the eighth operation: $a = 3, x = 1, p = 2$. The modification operation is a Delete operation; element $1$ is deleted from all the sets; so the array becomes $[\\{\\}, \\{5\\}, \\{\\}, \\{\\}, \\{\\}]$, and the smallest element in the second set is $5$.\n09. For the ninth operation: $a = 3, x = 5, p = 5$. The modification operation is a Delete operation; element $5$ is deleted from all the sets; so the array becomes $[\\{\\}, \\{\\}, \\{\\}, \\{\\}, \\{\\}]$, and the fifth set is empty, which means the answer is $0$.\n10. For the tenth operation: $a = 3, x = 2, p = 4$. The modification operation is a Delete operation; element $2$ is deleted from all the sets; so the array becomes $[\\{\\}, \\{\\}, \\{\\}, \\{\\}, \\{\\}]$, and the fourth set is empty, which means the answer is $0$.\n\nPlease note that although we have not inserted element $2$ into the sets, we still delete element $2$ from all the sets in the tenth operation, which means that the Delete operation doesn't necessarily require the existence of a set to contain the deleted element. It also shows that it is possible to have two Delete operations that delete the same element.", "cfid": "2115F2"}
{"problem_id": "2101E", "problem_title": "E. Kia Bakes a Cake", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2101/E", "problem_statement": "You are given a binary string $s$ of length $n$ and a tree $T$ with $n$ vertices. Let $k$ be the number of 1s in $s$. We will construct a complete undirected weighted graph with $k$ vertices as follows:\n\n- For each $1\\le i\\le n$ with $s_i = \\mathtt{1}$, create a vertex labeled $i$.\n- For any two vertices labeled $u$ and $v$ that are created in the above step, define the edge weight between them $w(u, v)$ as the distance$^{\\text{∗}}$ between vertex $u$ and vertex $v$ in the tree $T$.\n\nA simple path$^{\\text{†}}$ that visits vertices labeled $v_1, v_2, \\ldots, v_m$ in this order is nice if for all $1\\le i\\le m - 2$, the condition $2\\cdot w(v_i, v_{i + 1})\\le w(v_{i + 1}, v_{i + 2})$ holds. In other words, the weight of each edge in the path must be at least twice the weight of the previous edge. Note that $s_{v_i} = \\mathtt{1}$ has to be satisfied for all $1\\le i\\le m$, as otherwise, there would be no vertex with the corresponding label.\n\nFor each vertex labeled $i$ ($1\\le i\\le n$ and $s_i = \\mathtt{1}$) in the complete undirected weighted graph, determine the maximum number of vertices in any nice simple path starting from the vertex labeled $i$.\n\n$^{\\text{∗}}$The distance between two vertices $a$ and $b$ in a tree is equal to the number of edges on the unique simple path between vertex $a$ and vertex $b$.\n\n$^{\\text{†}}$A path is a sequence of vertices $v_1, v_2, \\ldots, v_m$ such that there is an edge between $v_i$ and $v_{i + 1}$ for all $1\\le i\\le m - 1$. A simple path is a path with no repeated vertices, i.e., $v_i\\neq v_j$ for all $1\\le i < j\\le m$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1\\le n\\le 7\\cdot10^4$) — the length of the binary string $s$ and the number of vertices in the tree $T$.\n\nThe second line of each test case contains a binary string with $n$ characters $s_1s_2\\ldots s_n$ ($s_i\\in \\{\\mathtt{0}, \\mathtt{1}\\}$) — the string representing the vertices to be constructed in the complete undirected weighted graph.\n\nEach of the next $n - 1$ lines contains two integers $u$ and $v$ ($1\\le u, v\\le n$) — the endpoints of the edges of the tree $T$.\n\nIt is guaranteed that the given edges form a tree.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $7\\cdot10^4$.\n\n### Output\n\nFor each test case, output $n$ integers, the $i$-th integer representing the maximum number of vertices in any nice simple path starting from the vertex labeled $i$. If there is no vertex labeled $i$, i.e., $s_i = \\mathtt{0}$, output $-1$ instead.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n5\n\n01111\n\n1 2\n\n2 3\n\n3 4\n\n4 5\n\n17\n\n01101011110101101\n\n1 2\n\n2 3\n\n3 4\n\n4 5\n\n5 6\n\n6 7\n\n7 8\n\n8 9\n\n9 10\n\n10 11\n\n11 12\n\n12 13\n\n13 14\n\n14 15\n\n15 16\n\n16 17\n\n2\n\n01\n\n1 2\n\n```\n\n#### Output #1\n\n```\n-1 3 3 3 3\n-1 5 4 -1 4 -1 5 5 5 5 -1 4 -1 5 5 -1 3\n-1 1\n```\n\n### Note\n\nIn the first test case, the tree $T$ and the constructed graph are as follows:\n\n![](https://espresso.codeforces.com/2c018d3678fcc993cea93af930f4bc10bd9d0bed.png)Left side is the tree $T$ with selected nodes colored yellow. The right side is the constructed complete graph.\n\nThe nice path shown in the diagram is $3\\rightarrow 4\\rightarrow 2$. The path is nice as $w(4, 2) = 2$ is at least twice of $w(3, 4) = 1$. Extending the path using $2\\rightarrow 5$ is not possible as $w(2, 5) = 3$ is less than twice of $w(4, 2) = 2$.\n\nIn the second test case, the tree $T$ is a simple path of length $17$. An example of a nice path starting from the vertex labeled $2$ is $2\\rightarrow 3\\rightarrow 5\\rightarrow 9\\rightarrow 17$, which has edge weights of $1, 2, 4, 8$ doubling each time.", "cfid": "2101E"}
{"problem_id": "2101F", "problem_title": "F. Shoo Shatters the Sunshine", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2101/F", "problem_statement": "You are given a tree with $n$ vertices, where each vertex can be colored red, blue, or white. The coolness of a coloring is defined as the maximum distance$^{\\text{∗}}$ between a red and a blue vertex.\n\nFormally, if we denote the color of the $i$-th vertex as $c_i$, the coolness of a coloring is $\\max d(u, v)$ over all pairs of vertices $1\\le u, v\\le n$ where $c_u$ is red and $c_v$ is blue. If there are no red or no blue vertices, the coolness is zero.\n\nYour task is to calculate the sum of coolness over all $3^n$ possible colorings of the tree, modulo $998\\,244\\,353$.\n\n$^{\\text{∗}}$The distance between two vertices $a$ and $b$ in a tree is equal to the number of edges on the unique simple path between vertex $a$ and vertex $b$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 50$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2\\le n\\le 3000$) — the number of vertices in the tree.\n\nEach of the next $n - 1$ lines contains two integers $u$ and $v$ ($1\\le u, v\\le n$) — the endpoints of the edges of the tree.\n\nIt is guaranteed that the given edges form a tree.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $3000$.\n\n### Output\n\nFor each test case, output the sum of coolness over all $3^n$ possible colorings of the tree, modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3\n\n1 2\n\n2 3\n\n6\n\n1 2\n\n1 3\n\n1 4\n\n3 5\n\n5 6\n\n17\n\n1 2\n\n1 3\n\n1 4\n\n1 5\n\n2 6\n\n2 7\n\n2 8\n\n3 9\n\n3 10\n\n7 11\n\n7 12\n\n11 13\n\n13 14\n\n14 15\n\n10 16\n\n16 17\n\n```\n\n#### Output #1\n\n```\n18\n1920\n78555509\n```\n\n### Note\n\nIn the first test case, there are $12$ colorings that have at least one blue and one red node. The following pictures show their coloring and their coolness:\n\n![](https://espresso.codeforces.com/15dd2aaf8c69f02fa71a455d40f5b7dc08ca4311.png)All these colorings have coolness $2$![](https://espresso.codeforces.com/921c5954be27aa779f596f91411b63f11d4f661a.png)All these colorings have coolness $1$\n\nTherefore, the sum of coolness over all possible colorings is $6\\cdot 2 + 6\\cdot 1 = 18$.\n\nIn the second test case, the following are some examples of colorings with a coolness of $3$:\n\n![](https://espresso.codeforces.com/24a643356f55c5c5cb134dfece58f952a4c90566.png)", "cfid": "2101F"}
{"problem_id": "2097E", "problem_title": "E. Clearing the Snowdrift", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2097/E", "problem_statement": "Boy Vasya loves to travel very much. In particular, flying in airplanes brings him extraordinary pleasure. He was about to fly to another city, but the runway was heavily covered with snow and needed to be cleared.\n\nThe runway can be represented as $n$ consecutive sections numbered from $1$ to $n$. The snowstorm was quite strong, but it has already stopped, so Vasya managed to calculate that the $i$-th section is covered with $a_i$ meters of snow. For such situations, the airport has a snowplow that works in a rather unusual way. In one minute, the snowplow can do the following:\n\n- Choose a consecutive segment of length no more than $d$ and remove one meter of snow from the most snow-covered sections.\nFormally, one can choose $1 \\le l \\le r \\le n$ ($r - l + 1 \\le d$). After that, $c = \\max \\{ a_l, a_{l + 1}, \\ldots , a_r \\}$ is calculated, and if $c > 0$, then for all $i \\colon l \\le i \\le r$ such that $a_i = c$, the value of $a_i$ is decreased by one.\n\n\nVasya has been preparing for the flight for a long time and wants to understand how much time he has left to wait until all sections are completely cleared of snow. In other words, it is required to calculate the minimum number of minutes that the snowplow will need to achieve $a_i = 0$ for all $i$ from $1$ to $n$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 2 \\cdot 10^5$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $d$ ($1 \\le n \\le 5 \\cdot 10^5, 1 \\le d \\le n$) — the number of sections on the runway and the maximum length of the segment that the snowplow can choose.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$), where $a_i$ is the number of meters of snow on the $i$-th section.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the minimum number of minutes required for the snowplow to achieve $a_i = 0$ for all $i$ from $1$ to $n$.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n5 2\n\n1 5 2 1 2\n\n3 1\n\n1000000000 1000000000 1000000000\n\n```\n\n#### Output #1\n\n```\n8\n3000000000\n```\n\n### Note\n\nIn the first test case, there is an optimal sequence of operations. First, select the segment $[2, 3]$ four times. After three operations, $a_2$ will turn into $2$, and the array $a$ will look like $[1, 2, 2, 1, 2]$. After the fourth operation, the array $a$ will become $[1, 1, 1, 1, 2]$. Next, the array can be transformed into zeros by selecting the segments $[1, 2]$, $[3, 3]$, $[5, 5]$, and $[4, 5]$ (in that exact order).\n\nIn the second test case, $d = 1$, which means that each section is cleared independently of the others, and the answer is equal to the sum of all $a_i$.", "cfid": "2097E"}
{"problem_id": "2097F", "problem_title": "F. Lost Luggage", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2097/F", "problem_statement": "As is known, the airline \"Trouble\" often loses luggage, and concerned journalists decided to calculate the maximum number of luggage pieces that may not return to travelers.\n\nThe airline \"Trouble\" operates flights between $n$ airports, numbered from $1$ to $n$. The journalists' experiment will last for $m$ days. It is known that at midnight before the first day of the experiment, there were $s_j$ lost pieces of luggage in the $j$-th airport. On the $i$-th day, the following occurs:\n\n- In the morning, $2n$ flights take off simultaneously, including $n$ flights of the first type and $n$ flights of the second type.\n  - The $j$-th flight of the first type flies from airport $j$ to airport $(((j-2) \\bmod n )+ 1)$ (the previous airport, with the first airport being the last), and it can carry no more than $a_{i,j}$ lost pieces of luggage.\n  - The $j$-th flight of the second type flies from airport $j$ to airport $((j \\bmod n) + 1)$ (the next airport, with the last airport being the first), and it can carry no more than $c_{i,j}$ lost pieces of luggage.\n- In the afternoon, a check of lost luggage is conducted at the airports. If after the flights have departed on that day, there are $x$ pieces of luggage remaining in the $j$-th airport and $x \\ge b_{i, j}$, then at least $x - b_{i, j}$ pieces of luggage are found, and they cease to be lost.\n- In the evening, all $2n$ flights conclude, and the lost luggage transported that day arrives at the corresponding airports.\n\nFor each $k$ from $1$ to $m$, the journalists want to know the maximum number of lost pieces of luggage that may be unfound during the checks over the first $k$ days. Note that for each $k$, these values are calculated independently.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 100$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($3 \\le n \\le 12$, $1 \\le m \\le 2000$) — the number of airports and the number of days of the experiment.\n\nThe second line of each test case contains $n$ integers $s_1, s_2, \\ldots, s_n$ ($0 \\le s_i \\le 10^8$) — the initial number of lost pieces of luggage in each airport.\n\nNext, the descriptions for each of the $m$ days follow in order.\n\nThe first line of the description of the $i$-th day contains $n$ integers $a_{i,1}, a_{i,2}, \\ldots, a_{i,n}$ ($0 \\le a_{i, j} \\le 10^8$) — the maximum number of lost pieces of luggage that can be transported to the previous airport for each airport.\n\nThe second line of the description of the $i$-th day contains $n$ integers $b_{i,1}, \\ldots, b_{i,n}$ ($0 \\le b_{i, j} \\le 10^8$) — the minimum number of lost pieces of luggage that will be found on the $i$-th day in each airport.\n\nThe third line of the description of the $i$-th day contains $n$ integers $c_{i,1}, \\ldots, c_{i,n}$ ($0 \\le c_{i, j} \\le 10^8$) — the maximum number of lost pieces of luggage that can be transported to the next airport for each airport.\n\nIt is guaranteed that the sum of $m$ over all test cases does not exceed $2000$.\n\n### Output\n\nFor each test case, output $m$ integers — the maximum number of unfound pieces of luggage for each number of days from $1$ to $m$.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n5 3\n\n1 1 1 1 1\n\n0 0 1 0 0\n\n0 1 0 0 1\n\n1 0 0 1 0\n\n0 1 0 0 0\n\n9 0 9 9 9\n\n0 1 0 0 0\n\n0 0 0 0 0\n\n9 0 9 0 0\n\n0 0 0 0 0\n\n3 1\n\n0 100000000 5\n\n0 100000000 5\n\n0 100000000 5\n\n0 100000000 5\n\n```\n\n#### Output #1\n\n```\n5\n4\n2\n100000005\n```\n\n### Note\n\nIn the first test case:\n\n- On the first day, all $5$ pieces of luggage may not be found, as the lost luggage can be sent on flights from each airport.\n- In the morning of the second day, there may be no more than $3$ pieces of luggage in the $2$-nd airport, no more than $2$ pieces in the $5$-th airport, and no luggage in the other airports. All luggage from the $5$-th airport may remain there. In the $2$-nd airport, no more than $2$ pieces of luggage can be sent on flights to neighboring airports. Thus, at least $1$ piece of luggage will be found.\n- By the end of the third day, lost luggage may only be in the $1$-st and $2$-nd airports. There can be no more than one piece in each, meaning that at most $2$ pieces of luggage will remain unfound in total.\n\n![](https://espresso.codeforces.com/75b781e883fa683f8e14854d82606ce873c13b96.png)The found luggage is marked in green.\n\nIn the second test case, all pieces of luggage may remain in their original airports, and the inspection won't find any lost suitcases. Therefore, the answer is $10^9 + 5$.", "cfid": "2097F"}
{"problem_id": "2096F", "problem_title": "F. Wonderful Impostors", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2096/F", "problem_statement": "You are a proud live streamer known as Gigi Murin. Today, you will play a game with $n$ viewers numbered $1$ to $n$.\n\nIn the game, each player is either a crewmate or an impostor. You don't know the role of each viewer.\n\nThere are $m$ statements numbered $1$ to $m$, which are either true or false. For each $i$ from $1$ to $m$, statement $i$ is one of two types:\n\n- $0\\:a_i\\:b_i$ ($1 \\leq a_i \\leq b_i \\leq n$) — there are no impostors among viewers $a_i, a_i + 1, \\ldots, b_i$;\n- $1\\:a_i\\:b_i$ ($1 \\leq a_i \\leq b_i \\leq n$) — there is at least one impostor among viewers $a_i, a_i + 1, \\ldots, b_i$.\n\nAnswer $q$ questions of the following form:\n\n- $l\\:r$ ($1 \\leq l \\leq r \\leq m$) — is it possible that statements $l, l + 1, \\ldots, r$ are all true?\n\nNote that it is not guaranteed that there is at least one impostor among all viewers, and it is not guaranteed that there is at least one crewmate among all viewers.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$, $m$ ($1 \\leq n, m \\leq 2 \\cdot 10^5$) — the number of viewers, and the number of statements.\n\nThe $i$-th of the next $m$ lines contains three integers $x_i$, $a_i$, $b_i$ ($x_i \\in \\{0, 1\\}$, $1 \\leq a_i \\leq b_i \\leq n$) — describing statement $i$.\n\nThe next line contains a single integer $q$ ($1 \\le q \\le 2 \\cdot 10^5$) — the number of questions.\n\nEach of the next $q$ lines contains two integers $l$ and $r$ ($1 \\leq l \\leq r \\leq m$) — describing a question.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$, the sum of $m$ over all test cases does not exceed $2 \\cdot 10^5$, and the sum of $q$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each question, output \"YES\" if it is possible that the requested statements are all true. Otherwise, output \"NO\".\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n4 3\n\n1 1 3\n\n1 2 4\n\n0 2 3\n\n1\n\n1 3\n\n5 2\n\n0 1 5\n\n1 1 5\n\n3\n\n1 1\n\n2 2\n\n1 2\n\n1 2\n\n0 1 1\n\n1 1 1\n\n2\n\n1 1\n\n2 2\n\n7 9\n\n1 2 2\n\n1 4 5\n\n0 5 6\n\n1 2 2\n\n1 1 1\n\n0 4 7\n\n0 3 7\n\n0 2 7\n\n0 6 6\n\n5\n\n1 5\n\n2 6\n\n3 7\n\n4 8\n\n5 9\n\n```\n\n#### Output #1\n\n```\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nNO\nYES\nNO\nYES\n```\n\n### Note\n\nIn the first test case, there are $4$ viewers and $3$ statements. The statements are as follows:\n\n- Statement $1$: There is at least one impostor among viewers $1$, $2$, and $3$;\n- Statement $2$: There is at least one impostor among viewers $2$, $3$, and $4$;\n- Statement $3$: There are no impostors among viewers $2$ and $3$.\n\nWe can see that it is possible that statements $1$, $2$, and $3$ are all true. For example, this is one possible scenario:\n\n- Viewer $1$ is an impostor;\n- Viewer $2$ is a crewmate;\n- Viewer $3$ is a crewmate;\n- Viewer $4$ is an impostor.\n\nIn the second test case, there are $5$ viewers and $2$ statements. The statements are as follows:\n\n- Statement $1$: There is at least one impostor among viewers $1$, $2$, $3$, $4$, and $5$;\n- Statement $2$: There are no impostors among viewers $1$, $2$, $3$, $4$, and $5$.\n\nWe can see that it is possible that statement $1$ is true, and it is possible that statement $2$ is true. However, it is not possible that both statements $1$ and $2$ are true.", "cfid": "2096F"}
{"problem_id": "2096H", "problem_title": "H. Wonderful XOR Problem", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2096/H", "problem_statement": "You are the proud... never mind, just solve this problem.\n\nThere are $n$ intervals $[l_1, r_1], [l_2, r_2], \\ldots [l_n, r_n]$. For each $x$ from $0$ to $2^m - 1$, find the number, modulo $998\\,244\\,353$, of sequences $a_1, a_2, \\ldots a_n$ such that:\n\n- $l_i \\leq a_i \\leq r_i$ for all $i$ from $1$ to $n$;\n- $a_1 \\oplus a_2 \\oplus \\ldots \\oplus a_n = x$, where $\\oplus$ denotes the [bitwise XOR operator](https://en.wikipedia.org/wiki/Bitwise_operation#XOR).\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line contains two integers $n$ and $m$ ($1 \\leq n \\leq 2 \\cdot 10^5$, $1 \\leq m \\leq 18$).\n\nThe $i$-th of the next $n$ lines contains two integers $l_i$ and $r_i$ ($0 \\leq l_i \\leq r_i < 2^m$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$, and the sum of $2^m$ over all test cases does not exceed $2^{18}$.\n\n### Output\n\nFor each $x$ from $0$ to $2^m - 1$, let:\n\n- $f_x$ be the number of valid sequences, modulo $998\\,244\\,353$;\n- $g_x = f_x \\cdot 2^x \\mod 998\\,244\\,353$.\n\nHere, $f_x$ and $g_x$ are both integers in the interval $[0, 998\\,244\\,352]$.\n\nLet $h = g_0 \\oplus g_1 \\oplus \\ldots \\oplus g_{2^m - 1}$.\n\nOutput a single integer — the value of $h$ itself. Do not perform a modulo operation.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2 2\n\n0 2\n\n1 3\n\n5 3\n\n3 7\n\n1 3\n\n0 2\n\n1 5\n\n3 6\n\n10 14\n\n314 1592\n\n653 5897\n\n932 3846\n\n264 3383\n\n279 5028\n\n841 9716\n\n939 9375\n\n105 8209\n\n749 4459\n\n230 7816\n\n1 5\n\n0 29\n\n```\n\n#### Output #1\n\n```\n22\n9812\n75032210\n1073741823\n```\n\n### Note\n\nFor the first test case, the values of $f_x$ are as follows:\n\n- $f_0 = 2$, because there are $2$ valid sequences: $[1, 1]$ and $[2, 2]$;\n- $f_1 = 2$, because there are $2$ valid sequences: $[0, 1]$ and $[2, 3]$;\n- $f_2 = 2$, because there are $2$ valid sequences: $[0, 2]$ and $[1, 3]$;\n- $f_3 = 3$, because there are $3$ valid sequences: $[0, 3]$, $[1, 2]$, and $[2, 1]$.\n\nThe values of $g_x$ are as follows:\n\n- $g_0 = f_0 \\cdot 2^0 = 2 \\cdot 2^0 = 2$;\n- $g_1 = f_1 \\cdot 2^1 = 2 \\cdot 2^1 = 4$;\n- $g_2 = f_2 \\cdot 2^2 = 2 \\cdot 2^2 = 8$;\n- $g_3 = f_3 \\cdot 2^3 = 3 \\cdot 2^3 = 24$.\n\nThus, the value to output is $2 \\oplus 4 \\oplus 8 \\oplus 24 = 22$.\n\nFor the second test case, the values of $f_x$ are as follows:\n\n- $f_{0} = 120$;\n- $f_{1} = 120$;\n- $f_{2} = 119$;\n- $f_{3} = 118$;\n- $f_{4} = 105$;\n- $f_{5} = 105$;\n- $f_{6} = 106$;\n- $f_{7} = 107$.", "cfid": "2096H"}
{"problem_id": "2096G", "problem_title": "G. Wonderful Guessing Game", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2096/G", "problem_statement": "This is an interactive problem.\n\nYou are a proud teacher at the Millennium Science School. Today, a student named Alice challenges you to a guessing game.\n\nAlice is thinking of an integer from $1$ to $n$, and you must guess it by asking her some queries.\n\nTo make things harder, she says you must ask all the queries first, and she will ignore exactly $1$ query.\n\nFor each query, you choose an array of $k$ distinct integers from $1$ to $n$, where $k$ is even. Then, Alice will respond with one of the following:\n\n- $\\texttt{L}$: the number is one of the first $\\frac{k}{2}$ elements of the array;\n- $\\texttt{R}$: the number is one of the last $\\frac{k}{2}$ elements of the array;\n- $\\texttt{N}$: the number is not in the array;\n- $\\texttt{?}$: this query is ignored.\n\nAlice is impatient, so you must find a strategy that minimizes the number of queries. Can you do it?\n\nFormally, let $f(n)$ be the minimum number of queries required to determine Alice's number. Then you must find a strategy that uses exactly $f(n)$ queries.\n\nNote that the interactor is adaptive, which means Alice's number is not fixed at the beginning and may depend on your queries. However, it is guaranteed that there exists at least one number that is consistent with Alice's responses.\n\nWe can show that $f(n) \\leq 20$ for all $n$ such that $2 \\le n \\le 2 \\cdot 10^5$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe only line of each test case contains a single integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$) — the maximum possible value of Alice's number.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Interaction\n\nThe interaction begins by reading the integer $n$.\n\nThen, output a single integer $q$ ($1 \\leq q \\leq 20$) — the number of queries.\n\nTo ask a query, output a line in the following format:\n\n- $k\\,a_1\\,a_2 \\ldots a_k$ ($2 \\leq k \\leq n$, $k$ is even, $1 \\leq a_i \\leq n$, the $a_i$ are distinct) — the length of the array, and the array itself.\n\nOnce you've asked all $q$ queries, read a string $s$ ($|s| = q$) — the responses to the queries as described above.\n\nWhen you know Alice's number, output a single integer $x$ ($1 \\leq x \\leq n$) — the value of the number.\n\nThen, move on to the next test case, or terminate the program if there are no more test cases.\n\nAfter outputting all $q$ queries, do not forget to output the end of the line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- flush(output) in Pascal;\n- stdout.flush() in Python;\n- See the documentation for other languages.\n\nNote that even if you correctly determine Alice's number but use more than $f(n)$ queries, you will get Wrong answer.\n\nFor this problem, hacks are disabled.\n\n### Example\n\n#### Input #1\n\n```\n2\n3\n\n?N\n\n5\n\nR?L\n\n```\n\n#### Output #1\n\n```\n\n2\n2 1 2\n2 1 2\n\n3\n\n3\n4 3 2 4 1\n4 5 4 3 1\n4 1 5 3 4\n\n1\n```\n\n### Note\n\nIn the first test case, $n = 3$. We ask $2$ queries: $[1, 2]$, and $[1, 2]$ again.\n\n- For the first query, Alice's response is $\\texttt{?}$, which means this query is ignored.\n- For the second query, Alice's response is $\\texttt{N}$, which means her number is not in the array $[1, 2]$.\n\nFrom the information above, we can determine that Alice's number is $3$.\n\nIt can be shown that all valid strategies for $n = 3$ require at least $2$ queries.\n\nIn the second test case, $n = 5$. We ask $3$ queries: $[3, 2, 4, 1]$, $[5, 4, 3, 1]$, and $[1, 5, 3, 4]$.\n\n- For the first query, Alice's response is $\\texttt{R}$, which means her number is in the array $[4, 1]$.\n- For the second query, Alice's response is $\\texttt{?}$, which means this query is ignored.\n- For the third query, Alice's response is $\\texttt{L}$, which means her number is in the array $[1, 5]$.\n\nFrom the information above, we can determine that Alice's number is $1$.\n\nIt can be shown that all valid strategies for $n = 5$ require at least $3$ queries.", "cfid": "2096G"}
{"problem_id": "2084G2", "problem_title": "G2. Wish Upon a Satellite (Hard Version)", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2084/G2", "problem_statement": "This is the hard version of the problem. The difference between the versions is that in this version, $t \\le 10^4$, $n \\le 5 \\cdot 10^5$ and the sum of $n$ does not exceed $5 \\cdot 10^5$. You can hack only if you solved all versions of this problem.\n\nFor a non-empty sequence $c$ of length $k$, define $f(c)$ as follows:\n\n- Turtle and Piggy are playing a game on a sequence. They are given the sequence $c_1, c_2, \\ldots, c_k$, and Turtle goes first. Turtle and Piggy alternate in turns (so, Turtle does the first turn, Piggy does the second, Turtle does the third, etc.).\n- The game goes as follows:\n  - Let the current length of the sequence be $m$. If $m = 1$, the game ends.\n  - If the game does not end and it's Turtle's turn, then Turtle must choose an integer $i$ such that $1 \\le i \\le m - 1$, set $c_i$ to $\\min(c_i, c_{i + 1})$, and remove $c_{i + 1}$.\n  - If the game does not end and it's Piggy's turn, then Piggy must choose an integer $i$ such that $1 \\le i \\le m - 1$, set $c_i$ to $\\max(c_i, c_{i + 1})$, and remove $c_{i + 1}$.\n- Turtle wants to maximize the value of $c_1$ in the end, while Piggy wants to minimize the value of $c_1$ in the end.\n- $f(c)$ is the value of $c_1$ in the end if both players play optimally.\n\nFor a permutation $p$ of length $n$$^{\\\\text{∗}}$, Turtle defines the beauty of the permutation as $\\sum\\limits_{i = 1}^n \\sum\\limits_{j = i}^n f([p_i, p_{i + 1}, \\ldots, p_j])$ (i.e., the sum of $f(c)$ where $c$ is a non-empty subsegment$^{\\text{†}}$ of $p$).\n\nPiggy gives Turtle a permutation $a$ of length $n$ where some elements are missing and represented by $0$.\n\nTurtle asks you to determine a permutation $b$ of length $n$ such that:\n\n- $b$ can be formed by filling in the missing elements of $a$ (i.e., for all $1 \\le i \\le n$, if $a_i \\ne 0$, then $b_i = a_i$).\n- The beauty of the permutation $b$ is maximized.\n\nFor convenience, you only need to find the maximum beauty of such permutation $b$.\n\n$^{\\text{∗}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n$^{\\text{†}}$A sequence $a$ is a subsegment of a sequence $b$ if $a$ can be obtained from $b$ by the deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 5 \\cdot 10^5$).\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le n$). It is guaranteed that the elements of $a$ that are not $0$ are distinct.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the maximum beauty of the permutation $b$.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n2\n\n1 0\n\n3\n\n0 0 0\n\n3\n\n0 1 0\n\n5\n\n3 2 4 5 1\n\n7\n\n0 3 2 5 0 0 0\n\n10\n\n1 2 6 5 8 9 0 0 0 0\n\n5\n\n0 4 1 0 0\n\n5\n\n0 1 5 2 3\n\n```\n\n#### Output #1\n\n```\n4\n12\n11\n44\n110\n300\n45\n40\n```\n\n### Note\n\nIn the first test case, the permutation $b$ with the maximum beauty is $[1, 2]$. The beauty of $[1, 2]$ is $4$ since $f([1]) + f([2]) + f([1, 2]) = 1 + 2 + 1 = 4$. If $c = [1, 2]$, then $f(c) = 1$ since Turtle can only choose $i = 1$ and he will set $c_1$ to $\\min(c_1, c_2) = 1$.\n\nIn the second test case, one of the permutations $b$ with the maximum beauty is $[3, 2, 1]$. The beauty of $[3, 2, 1]$ is $12$ since $f([3]) + f([2]) + f([1]) + f([3, 2]) + f([2, 1]) + f([3, 2, 1]) = 3 + 2 + 1 + 2 + 1 + 3 = 12$.\n\nIn the third test case, one of the permutations $b$ with the maximum beauty is $[2, 1, 3]$.\n\nIn the fourth test case, if $c = [3, 2, 4, 5, 1]$, then $f(c) = 3$. One of the possible game processes is as follows:\n\n- Turtle can choose $i = 3$. Then he will set $c_3$ to $\\min(c_3, c_4) = 4$ and remove $c_4$. The sequence $c$ will become $[3, 2, 4, 1]$.\n- Piggy can choose $i = 1$. Then he will set $c_1$ to $\\max(c_1, c_2) = 3$ and remove $c_2$. The sequence $c$ will become $[3, 4, 1]$.\n- Turtle can choose $i = 2$. Then he will set $c_2$ to $\\min(c_2, c_3) = 1$ and remove $c_3$. The sequence $c$ will become $[3, 1]$.\n- Piggy can choose $i = 1$. Then he will set $c_1$ to $\\max(c_1, c_2) = 3$ and remove $c_2$. The sequence $c$ will become $[3]$.\n- The length of the sequence becomes $1$, so the game will end. The value of $c_1$ will be $3$ in the end.\n\nIn the fifth test case, one of the permutations $b$ with the maximum beauty is $[1, 3, 2, 5, 6, 4, 7]$.", "cfid": "2084G2"}
{"problem_id": "2084H", "problem_title": "H. Turtle and Nediam 2", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2084/H", "problem_statement": "[LGR-205-Div.1 C Turtle and Nediam](https://www.luogu.com.cn/problem/P11283)\n\nYou are given a binary sequence $s$ of length $n$ which only consists of $0$ and $1$.\n\nYou can do the following operation at most $n - 2$ times (possibly zero):\n\n- Let $m$ denote the current length of $s$. Choose an integer $i$ such that $1 \\le i \\le m - 2$.\n- Let the median$^{\\text{∗}}$ of the subarray $[s_i, s_{i + 1}, s_{i + 2}]$ be $x$, and let $j$ be the smallest integer such that $j \\ge i$ and $s_j = x$.\n- Remove $s_j$ from the sequence and concatenate the remaining parts. In other words, replace $s$ with $[s_1, s_2, \\ldots, s_{j - 1}, s_{j + 1}, s_{j + 2}, \\ldots, s_m]$.\n\nNote that after every operation, the length of $s$ decreases by $1$.\n\nFind how many different binary sequences can be obtained after performing the operation, modulo $10^9 + 7$.\n\n$^{\\text{∗}}$The median of an array of odd length $k$ is the $\\frac{k + 1}{2}$-th element when sorted.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($3 \\le n \\le 2 \\cdot 10^6$) — the length of the binary sequence.\n\nThe second line of each test case contains a string $s$ of length $n$, consisting of only $0$ and $1$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^6$.\n\n### Output\n\nFor each test case, output a single integer — the number of binary sequences that can be obtained, modulo $10^9 + 7$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n5\n\n11111\n\n6\n\n100011\n\n9\n\n000111000\n\n14\n\n11001111111000\n\n16\n\n0010000110100011\n\n```\n\n#### Output #1\n\n```\n4\n8\n30\n114\n514\n```\n\n### Note\n\nIn the first test case, the following binary sequences can be obtained: $[1, 1]$, $[1, 1, 1]$, $[1, 1, 1, 1]$, $[1, 1, 1, 1, 1]$.\n\nIn the second test case, the following binary sequences can be obtained: $[0, 1]$, $[0, 1, 1]$, $[1, 0, 1]$, $[1, 0, 0, 1]$, $[1, 0, 1, 1]$, $[1, 0, 0, 0, 1]$, $[1, 0, 0, 1, 1]$, $[1, 0, 0, 0, 1, 1]$. For example, to obtain $[0, 1, 1]$, you can:\n\n- Choose $i = 2$. The median of $[0, 0, 0]$ is $0$. Remove $s_2$. The sequence becomes $[1, 0, 0, 1, 1]$.\n- Choose $i = 1$. The median of $[1, 0, 0]$ is $0$. Remove $s_2$. The sequence becomes $[1, 0, 1, 1]$.\n- Choose $i = 1$. The median of $[1, 0, 1]$ is $1$. Remove $s_1$. The sequence becomes $[0, 1, 1]$.", "cfid": "2084H"}
{"problem_id": "2112B", "problem_title": "B. Shrinking Array", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2112/B", "problem_statement": "Let's call an array $b$ beautiful if it consists of at least two elements and there exists a position $i$ such that $|b_i - b_{i + 1}| \\le 1$ (where $|x|$ is the absolute value of $x$).\n\nYou are given an array $a$, and as long as it consists of at least two elements, you can perform the following operation:\n\n1. Choose two adjacent positions $i$ and $i + 1$ in the array $a$.\n2. Choose an integer $x$ such that $\\min(a_i, a_{i + 1}) \\le x \\le \\max(a_i, a_{i + 1})$.\n3. Remove the numbers $a_i$ and $a_{i + 1}$ from the array, and insert the number $x$ in their place. Obviously, the size of the array will decrease by $1$.\n\nCalculate the minimum number of operations required to make the array beautiful, or report that it is impossible.\n\n### Input\n\nThe first line contains one integer $t$ ($1 \\le t \\le 200$) — the number of test cases.\n\nThe first line of each test case contains one integer $n$ ($2 \\le n \\le 1000$) — the size of the array $a$.\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^6$) — the array $a$ itself.\n\n### Output\n\nFor each test case, output one integer — the minimum number of operations needed to make the array $a$ beautiful, or $-1$ if it is impossible to make it beautiful.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n4\n\n1 3 3 7\n\n2\n\n6 9\n\n4\n\n3 1 3 7\n\n4\n\n1 3 5 2\n\n```\n\n#### Output #1\n\n```\n0\n-1\n1\n1\n```\n\n### Note\n\nIn the first test case, the given array is already beautiful, as $|a_2 - a_3| = |3 - 3| = 0$.\n\nIn the second test case, it is impossible to make the array beautiful, as applying the operation would reduce its size to less than two.\n\nIn the third test case, you can, for example, choose $a_1$ and $a_2$ and replace them with the number $2$. The resulting array $[2, 3, 7]$ is beautiful.\n\nIn the fourth test case, you can, for example, choose $a_2$ and $a_3$ and replace them with the number $3$. The resulting array $[1, 3, 2]$ is beautiful.", "cfid": "2112B"}
{"problem_id": "2112A", "problem_title": "A. Race", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2112/A", "problem_statement": "Alice and Bob participate in a game TV show. When the game starts, the prize will be dropped to a certain point, and whoever gets to it first will get the prize.\n\nAlice decided that she would start running from point $a$. Bob, however, has not yet chosen his starting position.\n\nBob knows that the prize could drop either at point $x$ or at point $y$. He also knows that he can reach the prize faster than Alice if the distance from his starting position to the prize is strictly less than the distance from Alice's starting position to the prize. The distance between any two points $c$ and $d$ is calculated as $|c-d|$.\n\nYour task is to determine whether Bob can choose an integer point that is guarantee to get to the prize faster, regardless of where it appears (at point $x$ or $y$). Bob can choose any integer point, except for $a$ (in particular, he can choose to start in point $x$, point $y$, or any other point, but not $a$).\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 1000$) — the number of test cases.\n\nThe only line of each test case contains three integers $a$, $x$, $y$ ($1 \\le a, x, y \\le 100$). Points $a$, $x$, and $y$ are pairwise distinct.\n\n### Output\n\nFor each test case, print \"YES\" (case insensitive) if Bob can choose an integer point that is guarantee to get to the prize faster, regardless of where it appears. Otherwise, print \"NO\" (case insensitive).\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n1 3 4\n\n5 3 1\n\n3 1 5\n\n```\n\n#### Output #1\n\n```\nYES\nYES\nNO\n```\n\n### Note\n\nIn the first example, Bob can choose point $4$. If the prize will be at point $x$, then Bob's distance is $|4-3|=1$ and Alice's distance is $|1-3|=2$. If the prize will be at point $y$, then Bob's distance is $|4-4|=0$ and Alice's distance is $|1-4|=3$.\n\nIn the second example, Bob can choose point $2$. If the prize will be at point $x$, then Bob's distance is $|2-3|=1$ and Alice's distance is $|5-3|=2$. If the prize will be at point $y$, then Bob's distance is $|2-1|=1$ and Alice's distance is $|5-1|=4$.\n\nIn the third example, Bob cannot choose a point to guarantee his victory.", "cfid": "2112A"}
{"problem_id": "2112C", "problem_title": "C. Coloring Game", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2112/C", "problem_statement": "Alice and Bob are playing a game using an integer array $a$ of size $n$.\n\nInitially, all elements of the array are colorless. First, Alice chooses $3$ elements and colors them red. Then Bob chooses any element and colors it blue (if it was red — recolor it). Alice wins if the sum of the red elements is strictly greater than the value of the blue element.\n\nYour task is to calculate the number of ways that Alice can choose $3$ elements in order to win regardless of Bob's actions.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 1000$) — the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($3 \\le n \\le 5000$).\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_1 \\le a_2 \\le \\cdots \\le a_n \\le 10^5$).\n\nAdditional constraint on the input: the sum of $n$ over all test cases doesn't exceed $5000$.\n\n### Output\n\nFor each test case, print a single integer — the number of ways that Alice can choose $3$ elements in order to win regardless of Bob's actions.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n3\n\n1 2 3\n\n4\n\n1 1 2 4\n\n5\n\n7 7 7 7 7\n\n5\n\n1 1 2 2 4\n\n6\n\n2 3 3 4 5 5\n\n5\n\n1 1 1 1 3\n\n```\n\n#### Output #1\n\n```\n0\n0\n10\n2\n16\n0\n```\n\n### Note\n\nIn the first two test cases, no matter which three elements Alice chooses, Bob will be able to paint one element blue so that Alice does not win.\n\nIn the third test case, Alice can choose any three elements. If Bob colors one of the red elements, the sum of red elements will be $14$, and the sum of blue elements will be $7$. If Bob chooses an uncolored element, the sum of red elements will be $21$, and the sum of blue elements will be $7$.\n\nIn the fourth test case, Alice can choose either the $1$-st, $3$-rd and $4$-th element, or the $2$-nd, $3$-rd and $4$-th element.", "cfid": "2112C"}
{"problem_id": "2112D", "problem_title": "D. Reachability and Tree", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2112/D", "problem_statement": "Let $u$ and $v$ be two distinct vertices in a directed graph. Let's call the ordered pair $(u, v)$ good if there exists a path from vertex $u$ to vertex $v$ along the edges of the graph.\n\nYou are given an undirected tree with $n$ vertices and $n - 1$ edges. Determine whether it is possible to assign a direction to each edge of this tree so that the number of good pairs in it is exactly $n$. If it is possible, print any way to direct the edges resulting in exactly $n$ good pairs.\n\n![](https://espresso.codeforces.com/0f17bdc8df6de9dcbcefe04d44049c8911e607a8.png)One possible directed version of the tree for the first test case.\n\n### Input\n\nThe first line contains one integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains one integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$) — the number of vertices in the tree.\n\nThe next $n - 1$ lines describe the edges. The $i$-th line contains two integers $u_i$ and $v_i$ ($1 \\le u_i, v_i \\le n$; $u_i \\neq v_i$) — the vertices connected by the $i$-th edge.\n\nIt is guaranteed that the edges in each test case form an undirected tree and that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print \"NO\" (case-insensitive) if it is impossible to direct all edges of the tree and obtain exactly $n$ good pairs of vertices.\n\nOtherwise, print \"YES\" (case-insensitive) and then print $n - 1$ pairs of integers $u_i$ and $v_i$ separated by spaces — the edges directed from $u_i$ to $v_i$.\n\nThe edges can be printed in any order. If there are multiple answers, output any.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n5\n\n1 2\n\n2 4\n\n1 3\n\n3 5\n\n5\n\n1 2\n\n1 3\n\n1 4\n\n4 5\n\n2\n\n2 1\n\n4\n\n3 1\n\n1 2\n\n2 4\n\n```\n\n#### Output #1\n\n```\nYES\n1 2\n3 1\n3 5\n4 2\nYES\n2 1\n3 1\n4 1\n5 4\nNO\nYES\n1 3\n2 1\n2 4\n```\n\n### Note\n\nThe tree from the first test case and its possible directed version are shown in the legend above. In this version, there are exactly $5$ good pairs of vertices: $(3, 5)$, $(3, 1)$, $(3, 2)$, $(1, 2)$, and $(4, 2)$.\n\nOne possible directed version of the tree from the second test case is shown below:\n\n![](https://espresso.codeforces.com/e52886ce22e1a452186a3dfa3c2cc602f6c4d2ec.png)\n\nIn the presented answer, there are exactly $5$ good pairs of vertices: $(2, 1)$, $(3, 1)$, $(4, 1)$, $(5, 4)$, and $(5, 1)$.\n\nIn the third test case, there are only two directed pairs of vertices, but for any direction of the edge, only one pair will be good.", "cfid": "2112D"}
{"problem_id": "2120A", "problem_title": "A. Square of Rectangles", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2120/A", "problem_statement": "Aryan is an ardent lover of squares but a hater of rectangles (Yes, he knows all squares are rectangles). But Harshith likes to mess with Aryan. Harshith gives Aryan three rectangles of sizes $l_1\\times b_1$, $l_2\\times b_2$, and $l_3\\times b_3$ such that $l_3\\leq l_2\\leq l_1$ and $b_3\\leq b_2\\leq b_1$. Aryan, in order to defeat Harshith, decides to arrange these three rectangles to form a square such that no two rectangles overlap and the rectangles are aligned along edges. Rotating rectangles is not allowed. Help Aryan determine if he can defeat Harshith.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 100$). The description of the test cases follows.\n\nEach test case contains a single line with $6$ space-separated integers $l_1, b_1, l_2, b_2, l_3$, and $b_3$ ($1 \\leq l_3\\le l_2\\le l_1\\le 100$, $1\\le b_3\\le b_2\\le b_1 \\leq 100$) — the dimensions of the three rectangles.\n\n### Output\n\nFor each testcase, print \"YES\" if the rectangles can be arranged to form a square; otherwise, \"NO\".\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n100 100 10 10 1 1\n\n5 3 5 1 5 1\n\n2 3 1 2 1 1\n\n8 5 3 5 3 3\n\n3 3 3 3 2 1\n\n```\n\n#### Output #1\n\n```\nNO\nYES\nYES\nNO\nNO\n```\n\n### Note\n\nIn the second test case, the three rectangles $5\\times 3$, $5\\times 1$, and $5\\times 1$ can be arranged as follows to form a square.\n\n![](https://espresso.codeforces.com/fbd9b47dd2b494552b66f9254bd5f01de239c196.png)\n\nIn the fourth test case, it can be proven that the rectangles can't be arranged to form a square with the given constraints.", "cfid": "2120A"}
{"problem_id": "2120B", "problem_title": "B. Square Pool", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2120/B", "problem_statement": "Aryan and Harshith are playing pool in universe AX120 on a fixed square pool table of side $s$ with pockets at its $4$ corners. The corners are situated at $(0,0)$, $(0,s)$, $(s,0)$, and $(s,s)$. In this game variation, $n$ identical balls are placed on the table with integral coordinates such that no ball lies on the edge or corner of the table. Then, they are all simultaneously shot at $10^{100}$ units/sec speed (only at $45$ degrees with the axes).\n\nIn universe AX120, balls and pockets are almost point-sized, and the collisions are elastic, i.e., the ball, on hitting any surface, bounces off at the same angle and with the same speed.\n\n![](https://espresso.codeforces.com/03698e95411a27b6d9ed22ef294c00b49125be41.png)\n\nHarshith shot the balls, and he provided Aryan with the balls' positions and the angles at which he shot them. Help Aryan determine the number of balls potted into the pockets by Harshith.\n\nIt is guaranteed that multiple collisions do not occur at the same moment and position.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $s$ ($1 \\le n \\le 10^3$, $2 \\le s\\le 10^9$) — the number of balls placed on the table and the side length of the square pool table.\n\nThe $i$-th of the next $n$ lines contains four integers $d_x$, $d_y$, $x_i$, and $y_i$ ($d_x,d_y \\in \\{-1, 1\\}$, $0 \\lt x_i, y_i \\lt s$) — the direction vectors of the launch on the $X$-axis and $Y$-axis respectively, and the coordinates of the location where the $i$-th ball was placed. It is guaranteed that no two balls coincide at the initial moment.\n\nIt is also guaranteed that the sum of $n$ over all test cases does not exceed $10^3$.\n\n### Output\n\nFor each test case, print a single integer — the number of balls potted in that game.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n1 2\n\n1 1 1 1\n\n5 4\n\n1 -1 1 1\n\n1 -1 2 2\n\n-1 1 2 3\n\n1 -1 1 3\n\n-1 1 3 1\n\n```\n\n#### Output #1\n\n```\n1\n3\n```\n\n### Note\n\nIn the first test case, there is a single ball and it's shot directly towards the pocket at $(2, 2)$, thus potted.\n\nIn the second test case, the state progresses as\n\n![](https://espresso.codeforces.com/277925e8c841d4b0517ff0b6c8561252258511eb.png)$\\rightarrow$![](https://espresso.codeforces.com/44f2f377936021e233b12e14f5dba0e6d1d000e9.png)![](https://espresso.codeforces.com/9a80571022f338294cd4ac9550a4c0daa39dfd87.png)$\\rightarrow$![](https://espresso.codeforces.com/51469a70832c0ea702ea3cae0a23f7a02a03e9f8.png)![](https://espresso.codeforces.com/34ce4b1e26c93608354db73a1fa858ec6f750908.png)$\\rightarrow$![](https://espresso.codeforces.com/0174e1fba22cc3437a8783afa0e59b94a2f56cc3.png)![](https://espresso.codeforces.com/5ffdf60ffaaf63625debb70d5e8b9040ef9a496b.png)$\\rightarrow$![](https://espresso.codeforces.com/520e6431370faf82a9f177c2dfc707b39e191c9b.png)", "cfid": "2120B"}
{"problem_id": "2120C", "problem_title": "C. Divine Tree", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2120/C", "problem_statement": "Harshith attained enlightenment in Competitive Programming by training under a Divine Tree. A divine tree is a rooted tree$^{\\text{∗}}$ with $n$ nodes, labelled from $1$ to $n$. The divineness of a node $v$, denoted $d(v)$, is defined as the smallest node label on the unique simple path from the root to node $v$.\n\nAryan, being a hungry Competitive Programmer, asked Harshith to pass on the knowledge. Harshith agreed on the condition that Aryan would be given two positive integers $n$ and $m$, and he had to construct a divine tree with $n$ nodes such that the total divineness of the tree is $m$, i.e., $\\displaystyle\\sum\\limits_{i=1}^n d(i)=m$. If no such tree exists, Aryan must report that it is impossible.\n\nDesperate for knowledge, Aryan turned to you for help in completing this task. As a good friend of his, help him solve the task.\n\n$^{\\text{∗}}$A tree is a connected graph without cycles. A rooted tree is a tree where one vertex is special and called the root.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\le n \\le 10^6$, $1 \\le m \\le 10^{12}$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case, output a single integer $k$ in one line — the root of the tree.\n\nThen $n-1$ lines follow, each containing a description of an edge of the tree — a pair of positive integers $u_i,v_i$ ($1\\le u_i,v_i\\le n$, $u_i\\ne v_i$), denoting the $i$-th edge connects vertices $u_i$ and $v_i$.\n\nThe edges and vertices of the edges can be printed in any order. If there are multiple solutions, print any of them.\n\nIf there is no solution, print \"-1\" instead.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n1 2\n\n4 6\n\n```\n\n#### Output #1\n\n```\n-1\n3\n3 1\n1 2\n2 4\n```\n\n### Note\n\nIn the first test case, there is a single node with a value of $1$, so getting a sum of $2$ is impossible.\n\nIn the second test case, getting a sum of $6$ is possible with the given tree rooted at $3$.", "cfid": "2120C"}
{"problem_id": "2120D", "problem_title": "D. Matrix game", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2120/D", "problem_statement": "Aryan and Harshith play a game. They both start with three integers $a$, $b$, and $k$. Aryan then gives Harshith two integers $n$ and $m$. Harshith then gives Aryan a matrix $X$ with $n$ rows and $m$ columns, such that each of the elements of $X$ is between $1$ and $k$(inclusive). After that, Aryan wins if he can find a submatrix$^{\\text{∗}}$ $Y$ of $X$ with $a$ rows and $b$ columns such that all elements of $Y$ are equal.\n\nFor example, when $a=2, b=2, k=6, n=3$ and $m=3$, if Harshith gives Aryan the matrix below, it is a win for Aryan as it has a submatrix of size $2\\times 2$ with all elements equal to $1$ as shown below.\n\n![](https://espresso.codeforces.com/69d24173a1df27d03c8b9991eba30c6d7e1b139e.png) Example of a matrix where Aryan wins\n\nAryan gives you the values of $a$, $b$, and $k$. He asks you to find the lexicographically minimum tuple $(n,m)$ that he should give to Harshith such that Aryan always wins. Help Aryan win the game. Assume that Harshith plays optimally. The values of $n$ and $m$ can be large, so output them modulo $10^9+7$. A tuple $(n_1, m_1)$ is said to be lexicographically smaller than $(n_2, m_2)$ if either $n_1<n_2$ or $n_1=n_2$ and $m_1<m_2$.\n\n$^{\\text{∗}}$A submatrix of a matrix is obtained by removing some rows and/or columns from the original matrix.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nEach test case contains a single line with three space-separated integers $a, b$ and $k$ ($1\\leq a,b,k\\leq 10^5$).\n\nIt is guaranteed that the sum of $\\max(a, b, k)$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, output a single line containing two space-separated integers $n$ and $m$, denoting the answer to the problem. The values of $n$ and $m$ can be large, so output them modulo $10^9+7$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n1 1 5\n\n2 2 2\n\n90000 80000 70000\n\n```\n\n#### Output #1\n\n```\n1 1\n3 7\n299929959 603196135\n```\n\n### Note\n\nFor the first test case, every $n\\times m$ matrix contains a $1\\times 1$ submatrix with all elements equal. $(1,1)$ is the lexicographically minimum tuple among all of them.\n\nFor the second test case, it can be verified that whatever $3\\times 7$ matrix Harshith gives to Aryan, Aryan can always win by finding a $2\\times 2$ submatrix with all elements equal. $(3,7)$ is also the lexicographically minimum tuple among all possible tuples where Aryan always wins.", "cfid": "2120D"}
{"problem_id": "2121E", "problem_title": "E. Sponsor of Your Problems", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2121/E", "problem_statement": "For two integers $a$ and $b$, we define $f(a, b)$ as the number of positions in the decimal representation of the numbers $a$ and $b$ where their digits are the same. For example, $f(12, 21) = 0$, $f(31, 37) = 1$, $f(19891, 18981) = 2$, $f(54321, 24361) = 3$.\n\nYou are given two integers $l$ and $r$ of the same length in decimal representation. Consider all integers $l \\leq x \\leq r$. Your task is to find the minimum value of $f(l, x) + f(x, r)$.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases. The description of the test cases follows.\n\nEach test case consists of a single line containing two integers $l$ and $r$ ($1 \\leq l \\leq r < 10^9$).\n\nIt is guaranteed that the numbers $l$ and $r$ have the same length in decimal representation and do not have leading zeros.\n\n### Output\n\nFor each test case, output the minimum value of $f(l, x) + f(x, r)$ among all integer values $l \\leq x \\leq r$.\n\n### Example\n\n#### Input #1\n\n```\n\n14\n\n1 1\n\n2 3\n\n4 6\n\n15 16\n\n17 19\n\n199 201\n\n899 999\n\n1990 2001\n\n6309 6409\n\n12345 12501\n\n19987 20093\n\n746814 747932\n\n900990999 900991010\n\n999999999 999999999\n\n```\n\n#### Output #1\n\n```\n2\n1\n0\n3\n2\n2\n1\n3\n3\n4\n3\n5\n12\n18\n```\n\n### Note\n\nIn the first test case, you can choose $x = 1$. Then $f(1, 1) + f(1, 1) = 1 + 1 = 2$.\n\nIn the second test case, you can choose $x = 2$. Then $f(2, 2) + f(2, 3) = 1 + 0 = 1$.\n\nIn the third test case, you can choose $x = 5$. Then $f(4, 5) + f(5, 6) = 0 + 0 = 0$.\n\nIn the fourth test case, you can choose $x = 15$. Then $f(15, 15) + f(15, 16) = 2 + 1 = 3$.\n\nIn the fifth test case, you can choose $x = 18$. Then $f(17, 18) + f(18, 19) = 1 + 1 = 2$.\n\nIn the sixth test case, you can choose $x = 200$. Then $f(199, 200) + f(200, 201) = 0 + 2 = 2$.\n\nIn the seventh test case, you can choose $x = 900$. Then $f(899, 900) + f(900, 999) = 0 + 1 = 1$.\n\nIn the eighth test case, you can choose $x = 1992$. Then $f(1990, 1992) + f(1992, 2001) = 3 + 0 = 3$.", "cfid": "2121E"}
{"problem_id": "2121C", "problem_title": "C. Those Who Are With Us", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2121/C", "problem_statement": "You are given a matrix of integers with $n$ rows and $m$ columns. The cell at the intersection of the $i$-th row and the $j$-th column contains the number $a_{ij}$.\n\nYou can perform the following operation exactly once:\n\n- Choose two numbers $1 \\leq r \\leq n$ and $1 \\leq c \\leq m$.\n- For all cells $(i, j)$ in the matrix such that $i = r$ or $j = c$, decrease $a_{ij}$ by one.\n\nYou need to find the minimal possible maximum value in the matrix $a$ after performing exactly one such operation.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\leq n \\cdot m \\leq 10^5$) — the number of rows and columns in the matrix.\n\nThe next $n$ lines of each test case describe the matrix $a$. The $i$-th line contains $m$ integers $a_{i1}, a_{i2}, \\ldots, a_{im}$ ($1 \\leq a_{ij} \\leq 100$) — the elements in the $i$-th row of the matrix.\n\nIt is guaranteed that the sum of $n \\cdot m$ across all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the minimum maximum value in the matrix $a$ after performing exactly one operation.\n\n### Example\n\n#### Input #1\n\n```\n\n10\n\n1 1\n\n1\n\n1 2\n\n1 2\n\n2 1\n\n2\n\n1\n\n2 2\n\n4 2\n\n3 4\n\n3 4\n\n1 2 3 2\n\n3 2 1 3\n\n2 1 3 2\n\n4 3\n\n1 5 1\n\n3 1 3\n\n5 5 5\n\n3 5 1\n\n4 4\n\n1 3 3 2\n\n2 3 2 2\n\n1 2 2 1\n\n3 3 2 3\n\n2 2\n\n2 2\n\n1 2\n\n3 2\n\n1 2\n\n2 1\n\n1 2\n\n3 3\n\n2 1 1\n\n1 2 1\n\n1 1 2\n\n```\n\n#### Output #1\n\n```\n0\n1\n1\n3\n2\n4\n3\n1\n1\n2\n```\n\n### Note\n\nIn the first three test cases, you can choose $r = 1$ and $c = 1$.\n\nIn the fourth test case, you can choose $r = 1$ and $c = 2$.\n\n![](https://espresso.codeforces.com/c17767a6920a311231f92f0369c10b9b6a34d491.png)\n\nIn the fifth test case, you can choose $r = 2$ and $c = 3$.\n\n![](https://espresso.codeforces.com/45bddc965ec3fa397cb2b518c9236cd1e45f846e.png)\n\nIn the sixth test case, you can choose $r = 3$ and $c = 2$.", "cfid": "2121C"}
{"problem_id": "2121D", "problem_title": "D. 1709", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2121/D", "problem_statement": "You are given two arrays of integers $a_1, a_2, \\ldots, a_n$ and $b_1, b_2, \\ldots, b_n$. It is guaranteed that each integer from $1$ to $2 \\cdot n$ appears in exactly one of the arrays.\n\nYou need to perform a certain number of operations (possibly zero) so that both of the following conditions are satisfied:\n\n- For each $1 \\leq i < n$, it holds that $a_i < a_{i + 1}$ and $b_i < b_{i + 1}$.\n- For each $1 \\leq i \\leq n$, it holds that $a_i < b_i$.\n\nDuring each operation, you can perform exactly one of the following three actions:\n\n1. Choose an index $1 \\leq i < n$ and swap the values $a_i$ and $a_{i + 1}$.\n2. Choose an index $1 \\leq i < n$ and swap the values $b_i$ and $b_{i + 1}$.\n3. Choose an index $1 \\leq i \\leq n$ and swap the values $a_i$ and $b_i$.\n\nYou do not need to minimize the number of operations, but the total number must not exceed $1709$. Find any sequence of operations that satisfies both conditions.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\leq t \\leq 100$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\leq n \\leq 40$) — the length of the arrays $a$ and $b$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 2 \\cdot n$).\n\nThe third line of each test case contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($1 \\leq b_i \\leq 2 \\cdot n$).\n\nIt is guaranteed that each integer from $1$ to $2 \\cdot n$ appears either in array $a$ or in array $b$.\n\n### Output\n\nFor each test case, output the sequence of operations.\n\nIn the first line for each test case, output the number of operations $k$. Note that $0 \\leq k \\leq 1709$.\n\nIn the following $k$ lines for each test case, output the operations themselves:\n\n- If you want to swap the values $a_i$ and $a_{i + 1}$, output two integers $1$ and $i$. Note that $1 \\leq i < n$.\n- If you want to swap the values $b_i$ and $b_{i + 1}$, output two integers $2$ and $i$. Note that $1 \\leq i < n$.\n- If you want to swap the values $a_i$ and $b_i$, output two integers $3$ and $i$. Note that $1 \\leq i \\leq n$.\n\nIt can be shown that under the given constraints, a solution always exists.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n1\n\n1\n\n2\n\n1\n\n2\n\n1\n\n2\n\n1 3\n\n4 2\n\n2\n\n1 4\n\n3 2\n\n3\n\n6 5 4\n\n3 2 1\n\n3\n\n5 3 4\n\n2 6 1\n\n```\n\n#### Output #1\n\n```\n0\n1\n3 1\n1\n2 1\n1\n3 2\n9\n3 1\n3 2\n3 3\n1 1\n2 1\n2 2\n1 2\n1 1\n2 1\n6\n2 2\n1 1\n1 2\n2 1\n3 1\n3 2\n```\n\n### Note\n\nIn the first test case, $a_1 < b_1$, so no operations need to be applied.\n\nIn the second test case, $a_1 > b_1$. After applying the operation, these values will be swapped.\n\nIn the third test case, after applying the operation, $a = [1, 3]$ and $b = [2, 4]$.\n\nIn the fourth test case, after applying the operation, $a = [1, 2]$ and $b = [3, 4]$.", "cfid": "2121D"}
{"problem_id": "2121F", "problem_title": "F. Yamakasi", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2121/F", "problem_statement": "You are given an array of integers $a_1, a_2, \\ldots, a_n$ and two integers $s$ and $x$. Count the number of subsegments of the array whose sum of elements equals $s$ and whose maximum value equals $x$.\n\nMore formally, count the number of pairs $1 \\leq l \\leq r \\leq n$ such that:\n\n- $a_l + a_{l + 1} + \\ldots + a_r = s$.\n- $\\max(a_l, a_{l + 1}, \\ldots, a_r) = x$.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains three integers $n$, $s$, and $x$ ($1 \\leq n \\leq 2 \\cdot 10^5$, $-2 \\cdot 10^{14} \\leq s \\leq 2 \\cdot 10^{14}$, $-10^9 \\leq x \\leq 10^9$).\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($-10^9 \\leq a_i \\leq 10^9$).\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the number of subsegments of the array whose sum of elements equals $s$ and whose maximum value equals $x$.\n\n### Example\n\n#### Input #1\n\n```\n\n9\n\n1 0 0\n\n0\n\n1 -2 -1\n\n-2\n\n3 -1 -1\n\n-1 1 -1\n\n6 -3 -2\n\n-1 -1 -1 -2 -1 -1\n\n8 3 2\n\n2 2 -1 -2 3 -1 2 2\n\n9 6 3\n\n1 2 3 1 2 3 1 2 3\n\n13 7 3\n\n0 -1 3 3 3 -2 1 2 2 3 -1 0 3\n\n2 -2 -1\n\n-2 -1\n\n2 -2 -1\n\n-1 -2\n\n```\n\n#### Output #1\n\n```\n1\n0\n2\n0\n2\n7\n8\n0\n0\n```\n\n### Note\n\nIn the first test case, the suitable subsegment is $l = 1$, $r = 1$.\n\nIn the third test case, the suitable subsegments are $l = 1$, $r = 1$ and $l = 3$, $r = 3$.\n\nIn the fifth test case, the suitable subsegments are $l = 1$, $r = 3$ and $l = 6$, $r = 8$.\n\nIn the sixth test case, the suitable subsegments are those for which $r = l + 2$.\n\nIn the seventh test case, the following subsegments are suitable:\n\n- $l = 1$, $r = 7$.\n- $l = 2$, $r = 7$.\n- $l = 3$, $r = 6$.\n- $l = 4$, $r = 8$.\n- $l = 7$, $r = 11$.\n- $l = 7$, $r = 12$.\n- $l = 8$, $r = 10$.\n- $l = 9$, $r = 13$.", "cfid": "2121F"}
{"problem_id": "2121A", "problem_title": "A. Letter Home", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2121/A", "problem_statement": "You are given an array of distinct integers $x_1, x_2, \\ldots, x_n$ and an integer $s$.\n\nInitially, you are at position $pos = s$ on the $X$ axis. In one step, you can perform exactly one of the following two actions:\n\n- Move from position $pos$ to position $pos + 1$.\n- Move from position $pos$ to position $pos - 1$.\n\nA sequence of steps will be considered successful if, during the entire journey, you visit each position $x_i$ on the $X$ axis at least once. Note that the initial position $pos = s$ is also considered visited.\n\nYour task is to determine the minimum number of steps in any successful sequence of steps.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\leq t \\leq 1000$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $s$ ($1 \\leq n \\leq 10$, $1 \\leq s \\leq 100$) — the number of positions to visit and the starting position.\n\nThe second line of each test case contains $n$ integers $x_1, x_2, \\ldots, x_n$ ($1 \\leq x_i \\leq 100$). It is guaranteed that for all $1 \\leq i < n$, it holds that $x_i < x_{i + 1}$.\n\n### Output\n\nFor each test case, output the minimum number of steps in any successful sequence of steps.\n\n### Example\n\n#### Input #1\n\n```\n\n12\n\n1 1\n\n1\n\n1 2\n\n1\n\n1 1\n\n2\n\n2 1\n\n2 3\n\n2 2\n\n1 3\n\n2 3\n\n1 2\n\n3 1\n\n1 2 3\n\n3 2\n\n1 3 4\n\n3 3\n\n1 2 3\n\n4 3\n\n1 2 3 10\n\n5 5\n\n1 2 3 6 7\n\n6 6\n\n1 2 3 9 10 11\n\n```\n\n#### Output #1\n\n```\n0\n1\n1\n2\n3\n2\n2\n4\n2\n11\n8\n15\n```\n\n### Note\n\nIn the first test case, no steps need to be taken, so the only visited position will be $1$.\n\nIn the second test case, the following path can be taken: $2 \\rightarrow 1$. The number of steps is $1$.\n\nIn the third test case, the following path can be taken: $1 \\rightarrow 2$. The number of steps is $1$.\n\nIn the fifth test case, the following path can be taken: $2 \\rightarrow 1 \\rightarrow 2 \\rightarrow 3$. The number of steps is $3$.", "cfid": "2121A"}
{"problem_id": "2121B", "problem_title": "B. Above the Clouds", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2121/B", "problem_statement": "You are given a string $s$ of length $n$, consisting of lowercase letters of the Latin alphabet. Determine whether there exist three non-empty strings $a$, $b$, and $c$ such that:\n\n- $a + b + c = s$, meaning the concatenation$^{\\text{∗}}$ of strings $a$, $b$, and $c$ equals $s$.\n- The string $b$ is a substring$^{\\text{†}}$ of the string $a + c$, which is the concatenation of strings $a$ and $c$.\n\n$^{\\text{∗}}$Concatenation of strings $a$ and $b$ is defined as the string $a + b = a_1a_2 \\ldots a_pb_1b_2 \\ldots b_q$, where $p$ and $q$ are the lengths of strings $a$ and $b$, respectively. For example, the concatenation of the strings \"code\" and \"forces\" is \"codeforces\".\n\n$^{\\text{†}}$A string $a$ is a substring of a string $b$ if $a$ can be obtained from $b$ by the deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($3 \\leq n \\leq 10^5$) — the length of the string $s$.\n\nThe second line of each test case contains the string $s$ of length $n$, consisting of lowercase letters of the Latin alphabet.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output \"Yes\" if there exist three non-empty strings $a$, $b$, and $c$ that satisfy the conditions, and \"No\" otherwise.\n\nYou may output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive answers.\n\n### Example\n\n#### Input #1\n\n```\n\n12\n\n3\n\naaa\n\n3\n\naba\n\n3\n\naab\n\n4\n\nabca\n\n4\n\nabba\n\n4\n\naabb\n\n5\n\nabaca\n\n5\n\nabcda\n\n5\n\nabcba\n\n6\n\nabcbbf\n\n6\n\nabcdaa\n\n3\n\nabb\n\n```\n\n#### Output #1\n\n```\nYes\nNo\nYes\nNo\nYes\nYes\nYes\nNo\nYes\nYes\nYes\nYes\n```\n\n### Note\n\nIn the first test case, there exist unique non-empty strings $a$, $b$, and $c$ such that $a + b + c = s$. These are the strings $a =$ \"a\", $b =$ \"a\", and $c =$ \"a\". The concatenation of strings $a$ and $c$ equals $a + c = $ \"aa\". The string $b$ is a substring of this string.\n\nIn the sixth test case, one can choose $a = $ \"a\", $b = $ \"ab\", and $c = $ \"b\". The concatenation of strings $a$ and $c$ equals $a + c = $ \"ab\". The string $b$ is a substring of this string.\n\nIn the seventh test case, one can choose $a = $ \"ab\", $b = $ \"a\", and $c = $ \"ca\". The concatenation of strings $a$ and $c$ equals $a + c = $ \"abca\". The string $b$ is a substring of this string.", "cfid": "2121B"}
{"problem_id": "2113C", "problem_title": "C. Smilo and Minecraft", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2113/C", "problem_statement": "The boy Smilo is playing Minecraft! To prepare for the battle with the dragon, he needs a lot of golden apples, and for that, he requires a lot of gold. Therefore, Smilo goes to the mine.\n\nThe mine is a rectangular grid of size $n \\times m$, where each cell can be either gold ore, stone, or an empty cell. Smilo can blow up dynamite in any empty cell. When dynamite explodes in an empty cell with coordinates $(x, y)$, all cells within a square of side $2k + 1$ centered at cell $(x, y)$ become empty. If gold ore was located strictly inside this square (not on the boundary), it disappears. However, if the gold ore was on the boundary of this square, Smilo collects that gold.\n\nDynamite can only be detonated inside the mine, but the explosion square can extend beyond the mine's boundaries.\n\nDetermine the maximum amount of gold that Smilo can collect.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n$, $m$, and $k$ ($1 \\leq n, m, k \\leq 500$) — the number of rows, columns, and the explosion parameter $k$, respectively.\n\nEach of the following $n$ lines contains $m$ characters, each of which is equal to '.', '#', or 'g', where '.' — is an empty cell, '#' — is stone, 'g' — is gold. It is guaranteed that at least one of the cells is empty.\n\nIt is guaranteed that the sum $n \\cdot m$ across all test cases does not exceed $2.5 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the maximum amount of gold that can be obtained.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2 3 1\n\n#.#\n\ng.g\n\n2 3 2\n\n#.#\n\ng.g\n\n3 4 2\n\n.gg.\n\ng..#\n\ng##.\n\n```\n\n#### Output #1\n\n```\n2\n0\n4\n```\n\n### Note\n\nIn the first test case, Smilo can detonate the dynamite in any empty cell and obtain $2$ gold:\n\n![](https://espresso.codeforces.com/8d84438b7b95b71aaa30d080d90a75329fdadcac.png)\n\nIn the second test case, no matter what Smilo does, he will not be able to obtain any gold:\n\n![](https://espresso.codeforces.com/98712070a6a4b0c65db7542b15f57d61ae19e48e.png)\n\nIn the third test case, it is possible to detonate the dynamite in the bottom right corner to obtain $2$ gold, and then make another explosion one cell to the left to obtain the remaining $2$ gold:\n\n![](https://espresso.codeforces.com/b781559838668a5220fc0c077b93d684cd0ee5ec.png)", "cfid": "2113C"}
{"problem_id": "2113B", "problem_title": "B. Good Start", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2113/B", "problem_statement": "The roof is a rectangle of size $w \\times h$ with the bottom left corner at the point $(0, 0)$ on the plane. Your team needs to completely cover this roof with identical roofing sheets of size $a \\times b$, with the following conditions:\n\n- The sheets cannot be rotated (not even by $90^\\circ$).\n- The sheets must not overlap (but they can touch at the edges).\n- The sheets can extend beyond the boundaries of the rectangular roof.\n\nA novice from your team has already placed two such sheets on the roof in such a way that the sheets do not overlap and each of them partially covers the roof.\n\nYour task is to determine whether it is possible to completely tile the roof without removing either of the two already placed sheets.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains four integers $w$, $h$, $a$, and $b$ ($1 \\le w, h, a, b \\le 10^9$) — the dimensions of the roof and the dimensions of the roofing sheets, respectively.\n\nThe second line of each test case contains four integers $x_1$, $y_1$, $x_2$, and $y_2$ ($-a + 1 \\le x_1, x_2 \\le w - 1, -b + 1 \\le y_1, y_2 \\le h - 1$) — the coordinates of the bottom left corners of the already placed roofing sheets. It is guaranteed that these sheets do not overlap.\n\n### Output\n\nFor each test case, output \"Yes\" (without quotes) if it is possible to completely tile the roof without removing either of the two already placed tiles, and \"No\" (without quotes) otherwise.\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n6 5 2 3\n\n-1 -2 5 4\n\n4 4 2 2\n\n0 0 3 1\n\n10 9 3 2\n\n0 0 4 3\n\n10 9 3 2\n\n0 0 6 3\n\n5 5 2 2\n\n-1 -1 4 -1\n\n5 5 2 2\n\n-1 -1 2 3\n\n7 8 2 4\n\n0 0 0 5\n\n```\n\n#### Output #1\n\n```\nYes\nNo\nNo\nYes\nNo\nYes\nNo\n```\n\n### Note\n\nIn the first test case, it is possible to add $8$ roofing sheets as follows:\n\n![](https://espresso.codeforces.com/76a7cc7bc4e86f820c778a0bb385668955eaab01.png)\n\nIn the second test case, it is impossible to completely tile the roof:\n\n![](https://espresso.codeforces.com/7a137282544846beb0e98facae5ddf58e8248fee.png)", "cfid": "2113B"}
{"problem_id": "2113A", "problem_title": "A. Shashliks", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2113/A", "problem_statement": "You are the owner of a popular shashlik restaurant, and your grill is the heart of your kitchen. However, the grill has a peculiarity: after cooking each shashlik, its temperature drops.\n\nYou need to cook as many portions of shashlik as possible, and you have an unlimited number of portions of two types available for cooking:\n\n- The first type requires a temperature of at least $a$ degrees at the start of cooking, and after cooking, the grill's temperature decreases by $x$ degrees.\n- The second type requires a temperature of at least $b$ degrees at the start of cooking, and after cooking, the grill's temperature decreases by $y$ degrees.\n\nInitially, the grill's temperature is $k$ degrees. Determine the maximum total number of portions of shashlik that can be cooked.\n\nNote that the grill's temperature can be negative.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe only line of each test case contains five integers $k$, $a$, $b$, $x$, and $y$ ($1 \\le k, a, b, x, y \\le 10^9$) — the initial temperature of the grill, the required temperature for cooking the first and second types of shashlik, respectively, as well as the temperature drop after cooking the first and second types of shashlik, respectively.\n\n### Output\n\nFor each test case, output a single integer — the maximum number of portions of shashlik that you can cook.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n10 3 4 2 1\n\n1 10 10 1 1\n\n100 17 5 2 3\n\n28 14 5 2 4\n\n277 5 14 1 3\n\n```\n\n#### Output #1\n\n```\n8\n0\n46\n10\n273\n```\n\n### Note\n\nIn the first test case, it is advantageous to cook $7$ portions of the second type of shashlik; after that, the grill's temperature will be $3$ degrees, and we can cook one more portion of the first type of shashlik.\n\nIn the second test case, we cannot cook either type of shashlik because the grill is too cold.\n\nIn the fourth test case, it is advantageous to cook $8$ portions of the first type of shashlik; after that, it will be possible to cook another $2$ portions of the second type of shashlik.", "cfid": "2113A"}
{"problem_id": "2118A", "problem_title": "A. Equal Subsequences", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2118/A", "problem_statement": "We call a bitstring$^{\\text{∗}}$ perfect if it has the same number of $\\mathtt{101}$ and $\\mathtt{010}$ subsequences$^{\\text{†}}$. Construct a perfect bitstring of length $n$ where the number of $\\mathtt{1}$ characters it contains is exactly $k$.\n\nIt can be proven that the construction is always possible. If there are multiple solutions, output any of them.\n\n$^{\\text{∗}}$A bitstring is a string consisting only of the characters $\\mathtt{0}$ and $\\mathtt{1}$.\n\n$^{\\text{†}}$A sequence $a$ is a subsequence of a string $b$ if $a$ can be obtained from $b$ by the deletion of several (possibly zero or all) characters.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 500$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\le n \\le 100$, $0 \\le k \\le n$) — the size of the bitstring and the number of $\\mathtt{1}$ characters in the bitstring.\n\n### Output\n\nFor each test case, output the constructed bitstring. If there are multiple solutions, output any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n4 2\n\n5 3\n\n5 5\n\n6 2\n\n1 1\n\n```\n\n#### Output #1\n\n```\n1010\n10110\n11111\n100010\n1```\n\n### Note\n\nIn the first test case, the number of $\\mathtt{101}$ and $\\mathtt{010}$ subsequences is the same, both being $1$, and the sequence contains exactly two $\\mathtt{1}$ characters.\n\nIn the second test case, the number of $\\mathtt{101}$ and $\\mathtt{010}$ subsequences is the same, both being $2$, and the sequence contains exactly three $\\mathtt{1}$ characters.\n\nIn the third test case, the number of $\\mathtt{101}$ and $\\mathtt{010}$ subsequences is the same, both being $0$, and the sequence contains exactly five $\\mathtt{1}$ characters.", "cfid": "2118A"}
{"problem_id": "2118D1", "problem_title": "D1. Red Light, Green Light (Easy version)", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2118/D1", "problem_statement": "This is the easy version of the problem. The only difference is the constraint on $k$ and the total sum of $n$ and $q$ across all test cases. You can make hacks only if both versions of the problem are solved.\n\nYou are given a strip of length $10^{15}$ and a constant $k$. There are exactly $n$ cells that contain a traffic light; each has a position $p_i$ and an initial delay $d_i$ for which $d_i < k$. The $i$-th traffic light works the following way:\n\n- it shows red at the $l \\cdot k + d_i$-th second, where $l$ is an integer,\n- it shows green otherwise.\n\nAt second $0$, you are initially positioned at some cell on the strip, facing the positive direction. At each second, you perform the following actions in order:\n\n- If the current cell contains a red traffic light, you turn around.\n- Move one cell in the direction you are currently facing.\n\nYou are given $q$ different starting positions. For each one, determine whether you will eventually leave the strip within $10^{100}$ seconds.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 500$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$, $k$ ($\\mathbf{1 \\le n \\le 500}$ and $\\mathbf{1 \\le k \\le 500}$) — the number of traffic lights and the length of the period.\n\nThe second line of each test case contains $n$ integers $p_1, p_2, \\ldots p_n$ ($1 \\le p_1 < p_2 < \\cdots < p_n \\le 10^{15}$) — the positions of the traffic lights.\n\nThe third line of each test case contains $n$ integers $d_1, d_2, \\ldots d_n$ ($0 \\le d_i < k$) — the delays of the traffic lights.\n\nThe fourth line of each test case contains one integer $q$ ($\\mathbf{1 \\le q \\le 500}$) — the number of queries.\n\nThe fifth line of each test case contains $q$ integers $a_1, a_2, \\ldots, a_q$ ($1 \\leq a_i \\leq 10^{15}$) — the starting positions.\n\nIt is guaranteed that the sum of $n$ and $q$ over all test cases does not exceed $\\mathbf{500}$.\n\n### Output\n\nFor each test case, output $q$ lines. Each line should contain \"YES\" if you will eventually leave the strip and \"NO\" otherwise. You can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2 2\n\n1 4\n\n1 0\n\n3\n\n1 2 3\n\n9 4\n\n1 2 3 4 5 6 7 8 9\n\n3 2 1 0 1 3 3 1 1\n\n5\n\n2 5 6 7 8\n\n4 2\n\n1 2 3 4\n\n0 0 0 0\n\n4\n\n1 2 3 4\n\n3 4\n\n1 2 3\n\n3 1 1\n\n3\n\n1 2 3\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nYES\nYES\nYES\nYES\nNO\nNO\nYES\nYES\nNO\nNO\nYES\nNO\nYES\n```\n\n### Note\n\nIn the first test case, the following happens at starting positions $1$, $2$, and $3$:\n\n![](https://espresso.codeforces.com/63db34c82cbed1e62971514d85a4a6bf71302a79.png)\n\nAnd the following in the second test case at starting position $2$:\n\n![](https://espresso.codeforces.com/70971ec2952940a09246b1e55290386a0dec24a1.png)", "cfid": "2118D1"}
{"problem_id": "2118C", "problem_title": "C. Make It Beautiful", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2118/C", "problem_statement": "You are given an array $a$ of $n$ integers. We define the $\\text{beauty}$ of a number $x$ to be the number of $1$ bits in its binary representation. We define the beauty of an array to be the sum of beauties of the numbers it contains.\n\nIn one operation, you can select an index $i$ $(1 \\le i \\le n)$ and increase $a_i$ by $1$.\n\nFind the maximum beauty of the array after doing at most $k$ operations.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 5000$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\le n \\le 5000$, $0 \\le k \\le 10^{18}$) — the length of the array and the maximal number of operations.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots a_n$ ($0 \\le a_i \\le 10^9$) —denoting the array $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5000$.\n\n### Output\n\nFor each test case, output a single integer, the maximum beauty after at most $k$ operations.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n5 2\n\n0 1 7 2 4\n\n5 3\n\n0 1 7 2 4\n\n1 1\n\n3\n\n3 0\n\n2 0 3\n\n1 100000000000\n\n0\n\n```\n\n#### Output #1\n\n```\n8\n9\n2\n3\n36\n```\n\n### Note\n\nIn the first test case, $a = [0, 1, 7, 2, 4]$.\n\n- apply the first operation at $i = 1$, the new array is $a = [1, 1, 7, 2, 4]$\n- apply the second operation at $i = 4$, the new array is $a = [1, 1, 7, 3, 4]$\n\nThe beauty of this array is $1 + 1 + 3 + 2 + 1 = 8$. One of the other valid solutions with the same beauty is $[0, 1, 7, 3, 5]$.\n\nIn the third test case, $a = [3]$. Since you are not required to use exactly $k$ operations, it is optimal to do none.", "cfid": "2118C"}
{"problem_id": "2118B", "problem_title": "B. Make It Permutation", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2118/B", "problem_statement": "There is a matrix $A$ of size $n\\times n$ where $A_{i,j}=j$ for all $1 \\le i,j \\le n$.\n\nIn one operation, you can select a row and reverse any subarray$^{\\text{∗}}$ in it.\n\nFind a sequence of at most $2n$ operations such that every column will contain a permutation$^{\\text{†}}$ of length $n$.\n\nIt can be proven that the construction is always possible. If there are multiple solutions, output any of them.\n\n$^{\\text{∗}}$An array $a$ is a subarray of an array $b$ if $a$ can be obtained from $b$ by deleting zero or more elements from the beginning and zero or more elements from the end.\n\n$^{\\text{†}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 100$). The description of the test cases follows.\n\nThe first line of each test case contains one integer $n$ ($3 \\le n \\le 5000$) — denoting the number of rows and columns in the matrix.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5000$.\n\n### Output\n\nFor each test case, on the first line, print an integer $k$ $(0 \\le k \\le 2n)$, the number of operations you wish to perform. On the next lines, you should print the operations.\n\nTo print an operation, use the format \"$i\\;l\\;r$\" ($1 \\leq l \\leq r \\leq n$ and $1 \\leq i \\leq n$) which reverses the subarray $A_{i, l}$, $A_{i, l+1}$, $\\ldots$, $A_{i, r}$.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n3\n\n4\n\n```\n\n#### Output #1\n\n```\n4\n2 1 3\n2 2 3\n3 1 2\n3 2 3\n5\n2 1 4\n3 1 3\n3 2 4\n4 3 4\n4 1 2```\n\n### Note\n\nIn the first test case, the following operations are a valid solution:\n\n![](https://espresso.codeforces.com/3b9509868f6d3b65d8a4a7a94688db76911f59b7.png)", "cfid": "2118B"}
{"problem_id": "2117C", "problem_title": "C. Cool Partition", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2117/C", "problem_statement": "Yousef has an array $a$ of size $n$. He wants to partition the array into one or more contiguous segments such that each element $a_i$ belongs to exactly one segment.\n\nA partition is called cool if, for every segment $b_j$, all elements in $b_j$ also appear in $b_{j + 1}$ (if it exists). That is, every element in a segment must also be present in the segment following it.\n\nFor example, if $a = [1, 2, 2, 3, 1, 5]$, a cool partition Yousef can make is $b_1 = [1, 2]$, $b_2 = [2, 3, 1, 5]$. This is a cool partition because every element in $b_1$ (which are $1$ and $2$) also appears in $b_2$. In contrast, $b_1 = [1, 2, 2]$, $b_2 = [3, 1, 5]$ is not a cool partition, since $2$ appears in $b_1$ but not in $b_2$.\n\nNote that after partitioning the array, you do not change the order of the segments. Also, note that if an element appears several times in some segment $b_j$, it only needs to appear at least once in $b_{j + 1}$.\n\nYour task is to help Yousef by finding the maximum number of segments that make a cool partition.\n\n### Input\n\nThe first line of the input contains integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains an integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) — the size of the array.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le n$) — the elements of the array.\n\nIt is guaranteed that the sum of $n$ over all test cases doesn't exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print one integer — the maximum number of segments that make a cool partition.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n6\n\n1 2 2 3 1 5\n\n8\n\n1 2 1 3 2 1 3 2\n\n5\n\n5 4 3 2 1\n\n10\n\n5 8 7 5 8 5 7 8 10 9\n\n3\n\n1 2 2\n\n9\n\n3 3 1 4 3 2 4 1 2\n\n6\n\n4 5 4 5 6 4\n\n8\n\n1 2 1 2 1 2 1 2\n\n```\n\n#### Output #1\n\n```\n2\n3\n1\n3\n1\n3\n3\n4\n```\n\n### Note\n\nThe first test case is explained in the statement. We can partition it into $b_1 = [1, 2]$, $b_2 = [2, 3, 1, 5]$. It can be shown there is no other partition with more segments.\n\nIn the second test case, we can partition the array into $b_1 = [1, 2]$, $b_2 = [1, 3, 2]$, $b_3 = [1, 3, 2]$. The maximum number of segments is $3$.\n\nIn the third test case, the only partition we can make is $b_1 = [5, 4, 3, 2, 1]$. Any other partition will not satisfy the condition. Therefore, the answer is $1$.", "cfid": "2117C"}
{"problem_id": "2117D", "problem_title": "D. Retaliation", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2117/D", "problem_statement": "Yousef wants to explode an array $a_1, a_2, \\dots, a_n$. An array gets exploded when all of its elements become equal to zero.\n\nIn one operation, Yousef can do exactly one of the following:\n\n1. For every index $i$ in $a$, decrease $a_i$ by $i$.\n2. For every index $i$ in $a$, decrease $a_i$ by $n - i + 1$.\n\nYour task is to help Yousef determine if it is possible to explode the array using any number of operations.\n\n### Input\n\nThe first line of the input contains an integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains an integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$) — the size of the array.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$) — the elements of the array.\n\nIt is guaranteed that the sum of $n$ over all test cases doesn't exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print \"YES\" if Yousef can explode the array, otherwise output \"NO\".\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n4\n\n3 6 6 3\n\n5\n\n21 18 15 12 9\n\n10\n\n2 6 10 2 5 5 1 2 4 10\n\n7\n\n10 2 16 12 8 20 4\n\n2\n\n52 101\n\n2\n\n10 2\n\n```\n\n#### Output #1\n\n```\nNO\nYES\nNO\nNO\nYES\nNO\n```\n\n### Note\n\nIn the second test case, we can do the following:\n\n- Perform $1$ operation of the first type. The array becomes $[20, 16, 12, 8, 4]$.\n- Perform $4$ operations of the second type. The array becomes $[0, 0, 0, 0, 0]$.\n\nIn the first, third, fourth, and sixth test cases, it can be proven that it is impossible to make all elements equal to zero using any number of operations.", "cfid": "2117D"}
{"problem_id": "2117A", "problem_title": "A. False Alarm", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2117/A", "problem_statement": "Yousef is at the entrance of a long hallway with $n$ doors in a row, numbered from $1$ to $n$. He needs to pass through all the doors from $1$ to $n$ in order of numbering and reach the exit (past door $n$).\n\nEach door can be open or closed. If a door is open, Yousef passes through it in $1$ second. If the door is closed, Yousef can't pass through it.\n\nHowever, Yousef has a special button which he can use at most once at any moment. This button makes all closed doors become open for $x$ seconds.\n\nYour task is to determine if Yousef can pass through all the doors if he can use the button at most once.\n\n### Input\n\nThe first line of the input contains an integer $t$ ($1 \\le t \\le 1000$) — the number of test cases.\n\nThe first line of each test case contains two integers $n, x$ ($1 \\le n, x \\le 10$) — the number of doors and the number of seconds of the button, respectively.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, ..., a_n$ ($a_i \\in \\{0, 1\\}$) — the state of each door. Open doors are represented by '0', while closed doors are represented by '1'.\n\nIt is guaranteed that each test case contains at least one closed door.\n\n### Output\n\nFor each test case, output \"YES\" if Yousef can reach the exit, and \"NO\" otherwise.\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n4 2\n\n0 1 1 0\n\n6 3\n\n1 0 1 1 0 0\n\n8 8\n\n1 1 1 0 0 1 1 1\n\n1 2\n\n1\n\n5 1\n\n1 0 1 0 1\n\n7 4\n\n0 0 0 1 1 0 1\n\n10 3\n\n0 1 0 0 1 0 0 1 0 0\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nYES\nYES\nNO\nYES\nNO\n```\n\n### Note\n\nIn the first test case, the optimal way is as follows:\n\n- At time $0$, the door is open, so Yousef passes.\n- At time $1$, the door is closed, Yousef can use the button now and pass through the door.\n- At time $2$, the button's effect is still on, so Yousef can still pass.\n- At time $3$, the button's effect has finished, but the door is open. Yousef passes and reaches the exit.\n\nIn the second test case, Yousef has a 3-second button, but he would need at least a 4-second button to reach the exit. Therefore, the answer is NO.\n\nIn the third test case, Yousef can turn on the button before starting to move. All the doors will stay open until he reaches the exit.", "cfid": "2117A"}
{"problem_id": "2117B", "problem_title": "B. Shrink", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2117/B", "problem_statement": "A shrink operation on an array $a$ of size $m$ is defined as follows:\n\n- Choose an index $i$ ($2 \\le i \\le m - 1$) such that $a_i \\gt a_{i - 1}$ and $a_i \\gt a_{i + 1}$.\n- Remove $a_i$ from the array.\n\nDefine the score of a permutation$^{\\text{∗}}$ $p$ as the maximum number of times that you can perform the shrink operation on $p$.\n\nYousef has given you a single integer $n$. Construct a permutation $p$ of length $n$ with the maximum possible score. If there are multiple answers, you can output any of them.\n\n$^{\\text{∗}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n### Input\n\nThe first line of the input contains an integer $t$ ($1 \\le t \\le 10^3$) — the number of test cases.\n\nEach test case contains an integer $n$ ($3 \\le n \\le 2 \\cdot 10^5$) — the size of the permutation.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output any permutation $p_1, p_2, \\dots, p_n$ that maximizes the number of shrink operations.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n3\n\n6\n\n```\n\n#### Output #1\n\n```\n1 3 2\n2 3 6 4 5 1\n```\n\n### Note\n\nIn the first test case:\n\n- We choose $p = [1, 3, 2]$.\n- Choose index $2$, and remove $p_2$ from the array. The array becomes $p = [1, 2]$.\n\nIt can be shown that the maximum number of operations we can perform is $1$. Another valid answer is $p = [2, 3, 1]$.\n\nIn the second test case:\n\n- We choose $p = [2, 3, 6, 4, 5, 1]$.\n- Choose index $5$, and remove $p_5$ from the array. The array becomes $p = [2, 3, 6, 4, 1]$.\n- Choose index $3$, and remove $p_3$ from the array. The array becomes $p = [2, 3, 4, 1]$.\n- Choose index $3$, and remove $p_3$ from the array. The array becomes $p = [2, 3, 1]$.\n- Choose index $2$, and remove $p_2$ from the array. The array becomes $p = [2, 1]$.\n\nThe maximum number of operations we can perform is $4$. Any permutation with a score of $4$ is valid.", "cfid": "2117B"}
{"problem_id": "2117E", "problem_title": "E. Lost Soul", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2117/E", "problem_statement": "You are given two integer arrays $a$ and $b$, each of length $n$.\n\nYou may perform the following operation any number of times:\n\n- Choose an index $i$ $(1 \\le i \\le n - 1)$, and set $a_i := b_{i + 1}$, or set $b_i := a_{i + 1}$.\n\nBefore performing any operations, you are allowed to choose an index $i$ $(1 \\le i \\le n)$ and remove both $a_i$ and $b_i$ from the arrays. This removal can be done at most once.\n\nLet the number of matches between two arrays $c$ and $d$ of length $m$ be the number of positions $j$ $(1 \\le j \\le m)$ such that $c_j = d_j$.\n\nYour task is to compute the maximum number of matches you can achieve.\n\n### Input\n\nThe first line of the input contains an integer $t$ $(1 \\le t \\le 10^4)$ — the number of test cases. The description of each test case follows.\n\nThe first line contains an integer $n$ $(2 \\le n \\le 2 \\cdot 10^5)$ — the length of $a$ and $b$.\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ $(1 \\le a_i \\le n)$ — the elements of $a$.\n\nThe third line contains $n$ integers $b_1, b_2, \\dots, b_n$ $(1 \\le b_i \\le n)$ — the elements of $b$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print a single integer — the answer for the test case.\n\n### Example\n\n#### Input #1\n\n```\n\n10\n\n4\n\n1 3 1 4\n\n4 3 2 2\n\n6\n\n2 1 5 3 6 4\n\n3 2 4 5 1 6\n\n2\n\n1 2\n\n2 1\n\n6\n\n2 5 1 3 6 4\n\n3 5 2 3 4 6\n\n4\n\n1 3 2 2\n\n2 1 3 4\n\n8\n\n3 1 4 6 2 2 5 7\n\n4 2 3 7 1 1 6 5\n\n10\n\n5 1 2 7 3 9 4 10 6 8\n\n6 2 3 6 4 10 5 1 7 9\n\n5\n\n3 2 4 1 5\n\n2 4 5 1 3\n\n7\n\n2 2 6 4 1 3 5\n\n3 1 6 5 1 4 2\n\n5\n\n4 1 3 2 5\n\n3 2 1 5 4\n\n```\n\n#### Output #1\n\n```\n3\n3\n0\n4\n3\n5\n6\n4\n5\n2\n```\n\n### Note\n\nIn the first test case, we can do the following:\n\n- We will choose not to remove any index.\n- Choose index $3$, and set $a_3 := b_4$. The arrays become: $a = [1, 3, 2, 4]$, $b = [4, 3, 2, 2]$.\n- Choose index $1$, and set $a_1 := b_2$. The arrays become: $a = [3, 3, 2, 4]$, $b = [4, 3, 2, 2]$.\n- Choose index $1$, and set $b_1 := a_2$. The arrays become: $a = [3, 3, 2, 4]$, $b = [3, 3, 2, 2]$. Notice that you can perform $a_i := b_{i + 1}$ and $b_i := a_{i + 1}$ on the same index $i$.\n\nThe number of matches is $3$. It can be shown that this is the maximum answer we can achieve.\n\nIn the second test case, we can do the following to achieve a maximum of $3$:\n\n- Let's choose to remove index $5$. The arrays become: $a = [2, 1, 5, 3, 4]$, $b = [3, 2, 4, 5, 6]$.\n- Choose index $4$, and set $b_4 := a_5$. The arrays become: $a = [2, 1, 5, 3, 4]$, $b = [3, 2, 4, 4, 6]$.\n- Choose index $3$, and set $a_3 := b_4$. The arrays become: $a = [2, 1, 4, 3, 4]$, $b = [3, 2, 4, 4, 6]$.\n- Choose index $2$, and set $a_2 := b_3$. The arrays become: $a = [2, 4, 4, 3, 4]$, $b = [3, 2, 4, 4, 6]$.\n- Choose index $1$, and set $b_1 := a_2$. The arrays become: $a = [2, 4, 4, 3, 4]$, $b = [4, 2, 4, 4, 6]$.\n- Choose index $2$, and set $b_2 := a_3$. The arrays become: $a = [2, 4, 4, 3, 4]$, $b = [4, 4, 4, 4, 6]$.\n- Choose index $1$, and set $a_1 := b_2$. The arrays become: $a = [4, 4, 4, 3, 4]$, $b = [4, 4, 4, 4, 6]$.\n\nIn the third test case, it can be shown that we can not get any matches. Therefore, the answer is $0$.", "cfid": "2117E"}
{"problem_id": "2117F", "problem_title": "F. Wildflower", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2117/F", "problem_statement": "Yousef has a rooted tree$^{\\text{∗}}$ consisting of exactly $n$ vertices, which is rooted at vertex $1$. You would like to give Yousef an array $a$ of length $n$, where each $a_i$ $(1 \\le i \\le n)$ can either be $1$ or $2$.\n\nLet $s_u$ denote the sum of $a_v$ where vertex $v$ is in the subtree$^{\\text{†}}$ of vertex $u$. Yousef considers the tree special if all the values in $s$ are pairwise distinct (i.e., all subtree sums are unique).\n\nYour task is to help Yousef count the number of different arrays $a$ that result in the tree being special. Two arrays $b$ and $c$ are different if there exists an index $i$ such that $b_i \\neq c_i$.\n\nAs the result can be very large, you should print it modulo $10^9 + 7$.\n\n$^{\\text{∗}}$A tree is a connected undirected graph with $n - 1$ edges.\n\n$^{\\text{†}}$The subtree of a vertex $v$ is the set of all vertices that pass through $v$ on a simple path to the root. Note that vertex $v$ is also included in the set.\n\n### Input\n\nThe first line contains an integer $t$ $(1 \\le t \\le 10^4)$ — the number of test cases.\n\nEach test case consists of several lines. The first line of the test case contains an integer $n$ $(2 \\le n \\le 2 \\cdot 10^5)$ — the number of vertices in the tree.\n\nThen $n−1$ lines follow, each of them contains two integers $u$ and $v$ $(1 \\le u,v \\le n, u \\ne v)$ which describe a pair of vertices connected by an edge. It is guaranteed that the given graph is a tree and has no loops or multiple edges.\n\nIt is guaranteed that the sum of $n$ over all test cases doesn't exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print one integer $x$ — the number of different arrays $a$ that result in the tree being special, modulo $10^9 + 7$.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n2\n\n1 2\n\n8\n\n1 2\n\n2 3\n\n3 8\n\n2 4\n\n4 5\n\n5 6\n\n6 7\n\n10\n\n1 2\n\n2 3\n\n3 4\n\n4 5\n\n5 6\n\n4 7\n\n7 8\n\n4 9\n\n9 10\n\n7\n\n1 4\n\n4 2\n\n3 2\n\n3 5\n\n2 6\n\n6 7\n\n7\n\n1 2\n\n2 3\n\n3 4\n\n3 5\n\n4 6\n\n6 7\n\n7\n\n5 7\n\n4 6\n\n1 6\n\n1 3\n\n2 6\n\n6 7\n\n5\n\n3 4\n\n1 2\n\n1 3\n\n2 5\n\n```\n\n#### Output #1\n\n```\n4\n24\n0\n16\n48\n0\n4\n```\n\n### Note\n\nThe tree given in the fifth test case:\n\n![](https://espresso.codeforces.com/bd9f04ef8898b0b29a6e5e86a17295ed03a19d03.png)", "cfid": "2117F"}
{"problem_id": "2111B", "problem_title": "B. Fibonacci Cubes", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2111/B", "problem_statement": "There are $n$ Fibonacci cubes, where the side of the $i$-th cube is equal to $f_{i}$, where $f_{i}$ is the $i$-th Fibonacci number.\n\nIn this problem, the Fibonacci numbers are defined as follows:\n\n- $f_{1} = 1$\n- $f_{2} = 2$\n- $f_{i} = f_{i - 1} + f_{i - 2}$ for $i > 2$\n\nThere are also $m$ empty boxes, where the $i$-th box has a width of $w_{i}$, a length of $l_{i}$, and a height of $h_{i}$.\n\nFor each of the $m$ boxes, you need to determine whether all the cubes can fit inside that box. The cubes must be placed in the box following these rules:\n\n- The cubes can only be stacked in the box such that the sides of the cubes are parallel to the sides of the box;\n- Every cube must be placed either on the bottom of the box or on top of other cubes in such a way that all space below the cube is occupied;\n- A larger cube cannot be placed on top of a smaller cube.\n\n### Input\n\nEach test consists of several test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10^{3}$) — the number of test cases. The description of the test cases follows.\n\nIn the first line of each test case, there are two integers $n$ and $m$ ($2 \\le n \\le 10, 1 \\le m \\le 2 \\cdot 10^{5}$) — the number of cubes and the number of empty boxes.\n\nThe next $m$ lines of each test case contain $3$ integers $w_{i}$, $l_{i}$, and $h_{i}$ ($1 \\le w_{i}, l_{i}, h_{i} \\le 150$) — the dimensions of the $i$-th box.\n\nAdditional constraints on the input:\n\n- The sum of $m$ across all test cases does not exceed $2 \\cdot 10^{5}$.\n\n### Output\n\nFor each test case, output a string of length $m$, where the $i$-th character is equal to \"1\" if all $n$ cubes can fit into the $i$-th box; otherwise, the $i$-th character is equal to \"0\".\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n5 4\n\n3 1 2\n\n10 10 10\n\n9 8 13\n\n14 7 20\n\n2 6\n\n3 3 3\n\n1 2 1\n\n2 1 2\n\n3 2 2\n\n2 3 1\n\n3 2 4\n\n```\n\n#### Output #1\n\n```\n0010\n100101\n```\n\n### Note\n\nIn the first test case, only one box is suitable. The cubes can be placed in it as follows:\n\n![](https://espresso.codeforces.com/54966256bccdbc30210ab7bdc8f99c3da1e1312f.png)", "cfid": "2111B"}
{"problem_id": "2111D", "problem_title": "D. Creating a Schedule", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2111/D", "problem_statement": "A new semester is about to begin, and it is necessary to create a schedule for the first day. There are a total of $n$ groups and $m$ classrooms in the faculty. It is also known that each group has exactly $6$ classes on the first day, and the $k$-th class of each group takes place at the same time. Each class must be held in a classroom, and at the same time, there cannot be classes for more than one group in the same classroom.\n\nEach classroom has its own index (at least three digits), and all digits of this index, except for the last two, indicate the floor on which the classroom is located. For example, classroom $479$ is located on the $4$-th floor, while classroom $31415$ is on the $314$-th floor. Between floors, one can move by stairs; for any floor $x > 1$, one can either go down to floor $x - 1$ or go up to floor $x + 1$; from the first floor, one can only go up to the second; from the floor $10^7$ (which is the last one), it is possible to go only to the floor $9999999$.\n\nThe faculty's dean's office has decided to create the schedule in such a way that students move as much as possible between floors, meaning that the total number of movements between floors across all groups should be maximized. When the students move from one floor to another floor, they take the shortest path.\n\nFor example, if there are $n = 2$ groups and $m = 4$ classrooms $[479, 290, 478, 293]$, the schedule can be arranged as follows:\n\nClass No.Group 1Group 2$1\n\n$$290$$\n\n293\n\n$$2$$\n\n478\n\n$$479$$\n\n3\n\n$$293$$\n\n290\n\n$$4$$\n\n479\n\n$$478$$\n\n5\n\n$$293$$\n\n290\n\n$$6$$\n\n479$$478$\n\nIn such a schedule, the groups will move between the $2$nd and $4$th floors each time, resulting in a total of $20$ movements between floors.\n\nHelp the dean's office create any suitable schedule!\n\n### Input\n\nEach test consists of several test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10^{3}$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\le n \\le m \\le 10^{5}$) — the number of groups and the number of available classrooms.\n\nThe second line of each test case contains $m$ integers $a_{i}$ ($100 \\le a_{i} < 10^{9}$) — the indices of the available classrooms.\n\nAdditional constraints on the input:\n\n- the numbers of all classrooms are pairwise distinct;\n- the sum of $m$ across all test cases does not exceed $10^{5}$.\n\n### Output\n\nFor each test case, output $n$ lines, where the $i$-th line should contain $6$ integers — the indices of the classrooms where the classes for the $i$-th group will be held.\n\nEach classroom must be occupied by at most one group during the $k$-th class.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2 4\n\n479 290 478 293\n\n1 1\n\n31415\n\n6 10\n\n479 385 290 293 384 383 297 478 291 382\n\n```\n\n#### Output #1\n\n```\n290 478 293 479 293 479\n293 479 290 478 290 478\n31415 31415 31415 31415 31415 31415\n479 290 479 290 479 290\n290 479 290 479 290 479\n293 478 293 478 293 478\n297 385 297 385 297 385\n478 293 478 293 478 293\n291 384 291 384 291 384\n```\n\n### Note\n\nIn the third test case, the maximum number of moves between classrooms is $50$.", "cfid": "2111D"}
{"problem_id": "2111A", "problem_title": "A. Energy Crystals", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2111/A", "problem_statement": "There are three energy crystals numbered $1$, $2$, and $3$; let's denote the energy level of the $i$-th crystal as $a_i$. Initially, all of them are discharged, meaning their energy levels are equal to $0$. Each crystal needs to be charged to level $x$ (exactly $x$, not greater).\n\nIn one action, you can increase the energy level of any one crystal by any positive amount; however, the energy crystals are synchronized with each other, so an action can only be performed if the following condition is met afterward:\n\n- for each pair of crystals $i$, $j$, it must hold that $a_{i} \\ge \\lfloor\\frac{a_{j}}{2}\\rfloor$.\n\nWhat is the minimum number of actions required to charge all the crystals?\n\n### Input\n\nEach test consists of several test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10^{4}$) — the number of test cases. The description of the test cases follows.\n\nThe only line of each test case contains a single integer $x$ ($1 \\le x \\le 10^{9}$).\n\n### Output\n\nFor each test case, output a single integer — the minimum number of actions required to charge all energy crystals to level $x$.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n1\n\n5\n\n14\n\n2025\n\n31415\n\n536870910\n\n1000000000\n\n```\n\n#### Output #1\n\n```\n3\n7\n9\n23\n31\n59\n61\n```\n\n### Note\n\nIn the first test case, one possible sequence of actions is:\n\n\n\n$$[0, 0, 0] \\to [\\color{red}{1}, 0, 0] \\to [1, 0, \\color{red}{1}] \\to [1, \\color{red}{1}, 1]$$\n\nOne of the possible sequences of actions in the second test case is:\n\n\n\n$$[0, 0, 0] \\to [\\color{red}{1}, 0, 0] \\to [1, \\color{red}{1}, 0] \\to [1, 1, \\color{red}{2}] \\to [\\color{red}{3}, 1, 2] \\to [3, \\color{red}{5}, 2] \\to [\\color{red}{5}, 5, 2] \\to [5, 5, \\color{red}{5}]$$\n\n", "cfid": "2111A"}
{"problem_id": "2111C", "problem_title": "C. Equal Values", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2111/C", "problem_statement": "You are given an array $a_1, a_2, \\dots, a_n$, consisting of $n$ integers.\n\nIn one operation, you are allowed to perform one of the following actions:\n\n- Choose a position $i$ ($1 < i \\le n$) and make all elements to the left of $i$ equal to $a_i$. That is, assign the value $a_i$ to all $a_j$ ($1 \\le j < i$). The cost of such an operation is $(i - 1) \\cdot a_i$.\n- Choose a position $i$ ($1 \\le i < n$) and make all elements to the right of $i$ equal to $a_i$. That is, assign the value $a_i$ to all $a_j$ ($i < j \\le n$). The cost of such an operation is $(n - i) \\cdot a_i$.\n\nNote that the elements affected by an operation may already be equal to $a_i$, but that doesn't change the cost.\n\nYou are allowed to perform any number of operations (including zero). What is the minimum total cost to make all elements of the array equal?\n\n### Input\n\nThe first line contains one integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n \\le 5 \\cdot 10^5$).\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le n$).\n\nThe sum of $n$ over all test cases does not exceed $5 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print a single integer — the minimum total cost of operations to make all elements of the array equal.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n4\n\n2 4 1 3\n\n3\n\n1 1 1\n\n10\n\n7 5 5 5 10 9 9 4 6 10\n\n```\n\n#### Output #1\n\n```\n3\n0\n35\n```\n\n### Note\n\nIn the first test case, you can perform the operation twice:\n\n- choose $i = 3$ and make all elements to the left of it equal to it, the cost will be $2 \\cdot 1 = 2$;\n- choose $i = 3$ and make all elements to the right of it equal to it, the cost will be $1 \\cdot 1 = 1$.\n\nThe total cost is $2 + 1 = 3$.\n\nIn the second test case, all elements are already equal, so no operations need to be performed.", "cfid": "2111C"}
{"problem_id": "2115A", "problem_title": "A. Gellyfish and Flaming Peony", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2115/A", "problem_statement": "Gellyfish hates math problems, but she has to finish her math homework:\n\nGellyfish is given an array of $n$ positive integers $a_1, a_2, \\ldots, a_n$.\n\nShe needs to do the following two-step operation until all elements of $a$ are equal:\n\n1. Select two indexes $i$, $j$ satisfying $1 \\leq i, j \\leq n$ and $i \\neq j$.\n2. Replace $a_i$ with $\\gcd(a_i, a_j)$.\n\nNow, Gellyfish asks you for the minimum number of operations to achieve her goal.\n\nIt can be proven that Gellyfish can always achieve her goal.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 5000$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\leq n \\leq 5000$) — the length of the array.\n\nThe second line of each test case contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($1 \\leq a_i \\leq 5000$) — the elements of the array.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5000$.\n\n### Output\n\nFor each test case, output a single integer — the minimum number of operations to achieve her goal.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3\n\n12 20 30\n\n6\n\n1 9 1 9 8 1\n\n3\n\n6 14 15\n\n```\n\n#### Output #1\n\n```\n4\n3\n3\n```\n\n### Note\n\nIn the first test case, the following is a way that minimizes the number of operations:\n\n1. Choose $i = 3$ and $j=2$ and replace $a_3$ with $\\gcd(a_3,a_2) = \\gcd(30, 20) = 10$, then $a$ becomes $[12, 20, 10]$.\n2. Choose $i=1$ and $j=3$ and replace $a_1$ with $\\gcd(a_1,a_3) = \\gcd(12, 10) = 2$, then $a$ becomes $[2, 20, 10]$.\n3. Choose $i=2$ and $j=1$ and replace $a_2$ with $\\gcd(a_2,a_1) = \\gcd(20, 2) = 2$, then $a$ becomes $[2, 2, 10]$.\n4. Choose $i=3$ and $j=1$ and replace $a_3$ with $\\gcd(a_3,a_1) = \\gcd(10, 2) = 2$, then $a$ becomes $[2, 2, 2]$.", "cfid": "2115A"}
{"problem_id": "2116B", "problem_title": "B. Gellyfish and Baby's Breath", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2116/B", "problem_statement": "Flower gives Gellyfish two permutations$^{\\text{∗}}$ of $[0, 1, \\ldots, n-1]$: $p_0, p_1, \\ldots, p_{n-1}$ and $q_0, q_1, \\ldots, q_{n-1}$.\n\nNow Gellyfish wants to calculate an array $r_0,r_1,\\ldots,r_{n-1}$ through the following method:\n\n- For all $i$ ($0 \\leq i \\leq n-1$), $r_i = \\max\\limits_{j=0}^{i} \\left(2^{p_j} + 2^{q_{i-j}} \\right)$\n\nBut since Gellyfish is very lazy, you have to help her figure out the elements of $r$.\n\nSince the elements of $r$ are very large, you are only required to output the elements of $r$ modulo $998\\,244\\,353$.\n\n$^{\\text{∗}}$An array $b$ is a permutation of an array $a$ if $b$ consists of the elements of $a$ in arbitrary order. For example, $[4,2,3,4]$ is a permutation of $[3,2,4,4]$ while $[1,2,2]$ is not a permutation of $[1,2,3]$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\leq n \\leq 10^5$).\n\nThe second line of each test case contains $n$ integers $p_0, p_1, \\ldots,p_{n-1}$ ($0 \\leq p_i < n$).\n\nThe third line of each test case contains $n$ integers $q_0, q_1, \\ldots,q_{n-1}$ ($0 \\leq q_i < n$).\n\nIt is guaranteed that both $p$ and $q$ are permutations of $[0, 1, \\ldots, n-1]$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, output $n$ integers $r_0, r_1, \\ldots, r_{n-1}$ in a single line, modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3\n\n0 2 1\n\n1 2 0\n\n5\n\n0 1 2 3 4\n\n4 3 2 1 0\n\n10\n\n5 8 9 3 4 0 2 7 1 6\n\n9 5 1 4 0 3 2 8 7 6\n\n```\n\n#### Output #1\n\n```\n3 6 8\n17 18 20 24 32\n544 768 1024 544 528 528 516 640 516 768\n```\n\n### Note\n\nIn the first test case:\n\n- $r_0 = 2^{p_0} + 2^{q_0} = 1+2=3$\n- $r_1 = \\max(2^{p_0} + 2^{q_1}, 2^{p_1} + 2^{q_0}) = \\max(1+4, 4+2) = 6$\n- $r_2 = \\max(2^{p_0} + 2^{q_2}, 2^{p_1}+2^{q_1}, 2^{p_2}+2^{q_0}) = (1+1, 4+4, 2+2) = 8$", "cfid": "2116B"}
{"problem_id": "2116A", "problem_title": "A. Gellyfish and Tricolor Pansy", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2116/A", "problem_statement": "Gellyfish and Flower are playing a game called \"Duel\".\n\nGellyfish has $a$ HP, while Flower has $b$ HP.\n\nEach of them has a knight. Gellyfish's knight has $c$ HP, while Flower's knight has $d$ HP.\n\nThey will play a game in rounds until one of the players wins. For $k = 1, 2, \\ldots$ in this order, they will perform the following actions:\n\n- If $k$ is odd and Gellyfish's knight is alive:\n  - Gellyfish's knight can attack Flower and reduce $b$ by $1$. If $b \\leq 0$, Gellyfish wins. Or,\n  - Gellyfish's knight can attack Flower's knight and reduce $d$ by $1$. If $d \\leq 0$, Flower's knight dies.\n- If $k$ is even and Flower's knight is alive:\n  - Flower's knight can attack Gellyfish and reduce $a$ by $1$. If $a \\leq 0$, Flower wins. Or,\n  - Flower's knight can attack Gellyfish's knight and reduce $c$ by $1$. If $c \\leq 0$, Gellyfish's knight dies.\n\nAs one of the smartest people in the world, you want to tell them who will win before the game. Assume both players play optimally.\n\nIt can be proven that the game will never end in a draw. That is, one player has a strategy to end the game in a finite number of moves.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first and only line of each test case contains four integers $a$, $b$, $c$, $d$ ($1 \\leq a, b, c, d \\leq 10^9$) — the HP of Gellyfish, the HP of Flower, the HP of Gellyfish's knight, and the HP of Flower's knight, respectively.\n\n### Output\n\nFor each test case, if Flower will win, output \"Flower\", otherwise output \"Gellyfish\".\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n1 2 3 4\n\n100 999 1 1\n\n10 20 10 30\n\n12 14 13 11\n\n998 244 353 107\n\n```\n\n#### Output #1\n\n```\nFlower\nGellyfish\nFlower\nGellyfish\nGellyfish\n```\n\n### Note\n\nIn the first test case, Gellyfish has only $1$ HP. Therefore, no matter what Gellyfish does in the first round, Flower's knight will attack Gellyfish in the second round, allowing Flower to win.\n\nIn the second test case, Flower's knight has only $1$ HP. Gellyfish will attack Flower's knight in the first round. Then Flower's knight will no longer be able to attack, allowing Gellyfish to win.", "cfid": "2116A"}
{"problem_id": "2114C", "problem_title": "C. Need More Arrays", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2114/C", "problem_statement": "Given an array $a$ and $n$ integers. It is sorted in non-decreasing order, that is, $a_i \\le a_{i + 1}$ for all $1 \\le i < n$.\n\nYou can remove any number of elements from the array (including the option of not removing any at all) without changing the order of the remaining elements. After the removals, the following will occur:\n\n- $a_1$ is written to a new array;\n- if $a_1 + 1 < a_2$, then $a_2$ is written to a new array; otherwise, $a_2$ is written to the same array as $a_1$;\n- if $a_2 + 1 < a_3$, then $a_3$ is written to a new array; otherwise, $a_3$ is written to the same array as $a_2$;\n- $\\cdots$\n\nFor example, if $a=[1, 2, 4, 6]$, then:\n\n- $a_1 = 1$ is written to the new array, resulting in arrays: $[1]$;\n- $a_1 + 1 = 2$, so $a_2 = 2$ is added to the existing array, resulting in arrays: $[1, 2]$;\n- $a_2 + 1 = 3$, so $a_3 = 4$ is written to a new array, resulting in arrays: $[1, 2]$ and $[4]$;\n- $a_3 + 1 = 5$, so $a_4 = 6$ is written to a new array, resulting in arrays: $[1, 2]$, $[4]$, and $[6]$.\n\nYour task is to remove elements in such a way that the described algorithm creates as many arrays as possible. If you remove all elements from the array, no new arrays will be created.\n\n### Input\n\nThe first line of input contains one integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) — the length of the array.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^6$, $a_i \\le a_{i + 1}$) — the elements of the array.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output one integer — the maximum number of arrays that can be obtained by removing any (possibly zero) number of elements.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n6\n\n1 2 3 4 5 6\n\n3\n\n1 2 3\n\n4\n\n1 2 2 4\n\n1\n\n2\n\n3\n\n1 4 8\n\n2\n\n1 1\n\n```\n\n#### Output #1\n\n```\n3\n2\n2\n1\n3\n1\n```\n\n### Note\n\nIn the first example, you can remove $a_3$ and $a_5$, then $a=[1, 2, 4, 6]$, the process of forming arrays for it is shown in the statement.\n\nIn the second example, you need to remove $a_2$, after which $a = [1, 3]$, and the arrays $[1]$ and $[3]$ will be written.\n\nIn the third example, no removals are needed; for $a = [1, 2, 2, 4]$, the arrays $[1, 2, 2]$ and $[4]$ will be written.", "cfid": "2114C"}
{"problem_id": "2114B", "problem_title": "B. Not Quite a Palindromic String", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2114/B", "problem_statement": "Vlad found a binary string$^{\\text{∗}}$ $s$ of even length $n$. He considers a pair of indices ($i, n - i + 1$), where $1 \\le i < n - i + 1$, to be good if $s_i = s_{n - i + 1}$ holds true.\n\nFor example, in the string '010001' there is only $1$ good pair, since $s_1 \\ne s_6$, $s_2 \\ne s_5$, and $s_3=s_4$. In the string '0101' there are no good pairs.\n\nVlad loves palindromes, but not too much, so he wants to rearrange some characters of the string so that there are exactly $k$ good pairs of indices.\n\nDetermine whether it is possible to rearrange the characters in the given string so that there are exactly $k$ good pairs of indices ($i, n - i + 1$).\n\n$^{\\text{∗}}$A string $s$ is called binary if it consists only of the characters '0' and '1'\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $k$ ($2 \\le n \\le 2 \\cdot 10^5$, $0 \\le k \\le \\frac{n}{2}$, $n$ is even) — the length of the string and the required number of good pairs.\n\nThe second line of each test case contains a binary string $s$ of length $n$.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output \"YES\" if there is a way to rearrange the characters of the string so that there are exactly $k$ good pairs, otherwise output \"NO\".\n\nYou may output each letter in any case (lowercase or uppercase). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be accepted as a positive answer.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n6 2\n\n000000\n\n2 1\n\n01\n\n4 1\n\n1011\n\n10 2\n\n1101011001\n\n10 1\n\n1101011001\n\n2 1\n\n11\n\n```\n\n#### Output #1\n\n```\nNO\nNO\nYES\nNO\nYES\nYES\n```", "cfid": "2114B"}
{"problem_id": "2114D", "problem_title": "D. Come a Little Closer", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2114/D", "problem_statement": "The game field is a matrix of size $10^9 \\times 10^9$, with a cell at the intersection of the $a$-th row and the $b$-th column denoted as ($a, b$).\n\nThere are $n$ monsters on the game field, with the $i$-th monster located in the cell ($x_i, y_i$), while the other cells are empty. No more than one monster can occupy a single cell.\n\nYou can move one monster to any cell on the field that is not occupied by another monster at most once .\n\nAfter that, you must select one rectangle on the field; all monsters within the selected rectangle will be destroyed. You must pay $1$ coin for each cell in the selected rectangle.\n\nYour task is to find the minimum number of coins required to destroy all the monsters.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) — the number of monsters on the field.\n\nThe following $n$ lines contain two integers $x_i$ and $y_i$ ($1 \\le x_i, y_i \\le 10^9$) — the coordinates of the cell with the $i$-th monster. All pairs ($x_i, y_i$) are distinct.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the minimum cost to destroy all $n$ monsters.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n3\n\n1 1\n\n1 2\n\n2 1\n\n5\n\n1 1\n\n2 6\n\n6 4\n\n3 3\n\n8 2\n\n4\n\n1 1\n\n1 1000000000\n\n1000000000 1\n\n1000000000 1000000000\n\n1\n\n1 1\n\n5\n\n1 2\n\n4 2\n\n4 3\n\n3 1\n\n3 2\n\n3\n\n1 1\n\n2 5\n\n2 2\n\n4\n\n4 3\n\n3 1\n\n4 4\n\n1 2\n\n```\n\n#### Output #1\n\n```\n3\n32\n1000000000000000000\n1\n6\n4\n8\n```\n\n### Note\n\nBelow are examples of optimal moves, with the cells of the rectangle to be selected highlighted in green.\n\n![](https://espresso.codeforces.com/3643346ebf05ce082dc5c0fca832e3d393fb161e.png)Required move for the first example.![](https://espresso.codeforces.com/2988e85c1854410b7f39678ab9de43d27f5cf6bc.png)Required move for the fifth example.", "cfid": "2114D"}
{"problem_id": "2114E", "problem_title": "E. Kirei Attacks the Estate", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2114/E", "problem_statement": "Once, Kirei stealthily infiltrated the trap-filled estate of the Ainzbern family but was discovered by Kiritugu's familiar. Assessing his strength, Kirei decided to retreat. The estate is represented as a tree with $n$ vertices, with the root at vertex $1$. Each vertex of the tree has a number $a_i$ recorded, which represents the danger of vertex $i$. Recall that a tree is a connected undirected graph without cycles.\n\nFor a successful retreat, Kirei must compute the threat value for each vertex. The threat of a vertex is equal to the maximumalternating sum along the vertical path starting from that vertex. The alternating sum along the vertical path starting from vertex $i$ is defined as $a_i - a_{p_i} + a_{p_{p_i}} - \\ldots$, where $p_i$ is the parent of vertex $i$ on the path to the root (to vertex $1$).\n\nFor example, in the tree below, vertex $4$ has the following vertical paths:\n\n- $[4]$ with an alternating sum of $a_4 = 6$;\n- $[4, 3]$ with an alternating sum of $a_4 - a_3 = 6 - 2 = 4$;\n- $[4, 3, 2]$ with an alternating sum of $a_4 - a_3 + a_2 = 6 - 2 + 5 = 9$;\n- $[4, 3, 2, 1]$ with an alternating sum of $a_4 - a_3 + a_2 - a_1 = 6 - 2 + 5 - 4 = 5$.\n\n![](https://espresso.codeforces.com/1d786fdded1f234d101767c2c7b55e98960c8af0.png)The dangers of the vertices are indicated in red.\n\nHelp Kirei compute the threat values for all vertices and escape the estate.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe following describes the test cases.\n\nThe first line contains an integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$) — the number of vertices in the tree.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$) — the dangers of the vertices.\n\nThe next $n - 1$ lines contain the numbers $v, u$ ($1 \\le v, u \\le n$, $v \\neq u$) — the description of the edges of the tree.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2 \\cdot 10^5$. It is also guaranteed that the given set of edges forms a tree.\n\n### Output\n\nFor each test case, output $n$ integers — the threat of each vertex.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n5\n\n4 5 2 6 7\n\n1 2\n\n3 2\n\n4 3\n\n5 1\n\n6\n\n1000000000 500500500 900900900 9 404 800800800\n\n3 4\n\n5 1\n\n2 5\n\n1 6\n\n6 4\n\n```\n\n#### Output #1\n\n```\n4 5 2 9 7\n1000000000 1500500096 1701701691 199199209 404 800800800\n```\n\n### Note\n\nThe tree from the first test case is depicted in the statement, and the maximum variable-sign sums are achieved as follows:\n\n1. $a_1 = 4$;\n2. $a_2 = 5$;\n3. $a_3 = 2$;\n4. $a_4 - a_3 + a_2 = 6 - 2 + 5 = 9$;\n5. $a_5 = 7$.", "cfid": "2114E"}
{"problem_id": "2114A", "problem_title": "A. Square Year", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2114/A", "problem_statement": "One can notice the following remarkable mathematical fact: the number $2025$ can be represented as $(20+25)^2$.\n\nYou are given a year represented by a string $s$, consisting of exactly $4$ characters. Thus, leading zeros are allowed in the year representation. For example, \"0001\", \"0185\", \"1375\" are valid year representations. You need to express it in the form $(a + b)^2$, where $a$ and $b$ are non-negative integers, or determine that it is impossible.\n\nFor example, if $s$ = \"0001\", you can choose $a = 0$, $b = 1$, and write the year as $(0 + 1)^2 = 1$.\n\n### Input\n\nThe first line of the input contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe following lines describe the test cases.\n\nThe only line of each test case contains a string $s$, consisting of exactly $4$ characters. Each character is a digit from $0$ to $9$.\n\n### Output\n\nOn a separate line for each test case, output:\n\n- Two numbers $a$ and $b$ ($a, b \\ge 0$) such that $(a + b)^2 = s$, if they exist. If there are multiple suitable pairs, you may output any of them.\n- The number $-1$ otherwise.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n0001\n\n1001\n\n1000\n\n4900\n\n2025\n\n```\n\n#### Output #1\n\n```\n0 1\n-1\n-1\n34 36\n20 25\n```", "cfid": "2114A"}
{"problem_id": "2110C", "problem_title": "C. Racing", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2110/C", "problem_statement": "In 2077, a sport called hobby-droning is gaining popularity among robots.\n\nYou already have a drone, and you want to win. For this, your drone needs to fly through a course with $n$ obstacles.\n\nThe $i$-th obstacle is defined by two numbers $l_i, r_i$. Let the height of your drone at the $i$-th obstacle be $h_i$. Then the drone passes through this obstacle if $l_i \\le h_i \\le r_i$. Initially, the drone is on the ground, meaning $h_0 = 0$.\n\nThe flight program for the drone is represented by an array $d_1, d_2, \\ldots, d_n$, where $h_{i} - h_{i-1} = d_i$, and $0 \\leq d_i \\leq 1$. This means that your drone either does not change height between obstacles or rises by $1$. You already have a flight program, but some $d_i$ in it are unknown and marked as $-1$. Replace the unknown $d_i$ with numbers $0$ and $1$ to create a flight program that passes through the entire obstacle course, or report that it is impossible.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nIn the first line of each test case, an integer $n$ ($1 \\le n \\le 2 \\cdot 10^5)$ is given — the size of the array $d$.\n\nIn the second line of each test case, there are $n$ integers $d_1, d_2, \\ldots, d_n$ ($-1 \\leq d_i \\leq 1$) — the elements of the array $d$. $d_i = -1$ means that this $d_i$ is unknown to you.\n\nNext, there are $n$ lines containing $2$ integers $l_i,r_i$ ($0\\leq l_i\\leq r_i\\leq n$) — descriptions of the obstacles.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, output $n$ integers $d_1,d_2,\\ldots,d_n$, if it is possible to correctly restore the array $d$, or $-1$ if it is not possible.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n4\n\n0 -1 -1 1\n\n0 4\n\n1 2\n\n2 4\n\n1 4\n\n3\n\n0 -1 -1\n\n0 1\n\n2 2\n\n0 3\n\n2\n\n-1 -1\n\n0 0\n\n2 2\n\n8\n\n-1 -1 1 -1 -1 0 0 -1\n\n0 0\n\n0 1\n\n0 2\n\n0 2\n\n1 3\n\n0 4\n\n2 5\n\n4 5\n\n1\n\n0\n\n1 1\n\n```\n\n#### Output #1\n\n```\n0 1 1 1\n-1\n-1\n0 1 1 0 1 0 0 1\n-1\n```\n\n### Note\n\nIn the first test case, one possible answer is $d=[0,1,1,1]$. The array $h$ will be $[0,0+1,0+1+1,0+1+1+1]=[0,1,2,3]$. This array meets the conditions of the problem.\n\nIn the second test case, it can be proven that there is no suitable array $d$, so the answer is $-1$.", "cfid": "2110C"}
{"problem_id": "2110D", "problem_title": "D. Fewer Batteries", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2110/D", "problem_statement": "In 2077, when robots took over the world, they decided to compete in the following game.\n\nThere are $n$ checkpoints, and the $i$-th checkpoint contains $b_i$ batteries. Initially, the Robot starts at the $1$-st checkpoint with no batteries and must reach the $n$-th checkpoint.\n\nThere are a total of $m$ one-way passages between the checkpoints. The $i$-th passage allows movement from point $s_i$ to point $t_i$ ($s_i < t_i$), but not the other way. Additionally, the $i$-th passage can only be used if the robot has at least $w_i$ charged batteries; otherwise, it will run out of power on the way.\n\nWhen the robot arrives at point $v$, it can additionally take any number of batteries from $0$ to $b_v$, inclusive. Moreover, it always carries all previously collected batteries, and at each checkpoint, it recharges all previously collected batteries.\n\nFind the minimum number of batteries that the robot can have at the end of the journey, or report that it is impossible to reach from the first checkpoint to the last.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n, m$ ($2 \\leq n \\leq 2 \\cdot 10^5, 0 \\leq m \\leq 3 \\cdot 10^5$) — the number of checkpoints and the number of passages, respectively.\n\nThe second line contains $n$ numbers $b_i$ ($0 \\leq b_i \\leq 10^9$) — the number of batteries at the $i$-th checkpoint.\n\nThe next $m$ lines contain three integers $s_i, t_i, w_i$ ($1 \\leq s_i < t_i \\leq n, 1 \\leq w_i \\leq 10^9$) — the endpoints of the passage and the minimum number of batteries required to pass through it.\n\nIt is guaranteed that the sum of $n$ does not exceed $2 \\cdot 10^5$.\n\nIt is guaranteed that the sum of $m$ does not exceed $3 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the minimum number of batteries that you can have at the end of the journey, or $-1$ if it is impossible to reach point $n$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3 3\n\n2 0 0\n\n1 2 1\n\n2 3 1\n\n1 3 2\n\n5 6\n\n2 2 5 0 1\n\n1 2 2\n\n1 3 1\n\n1 4 3\n\n3 5 5\n\n2 4 4\n\n4 5 3\n\n2 0\n\n1 1\n\n4 4\n\n3 10 0 0\n\n1 2 1\n\n1 3 3\n\n2 3 10\n\n3 4 5\n\n```\n\n#### Output #1\n\n```\n1\n4\n-1\n10\n```\n\n### Note\n\nIn the first test case, you need to take $1$ battery at the starting point, then move to point $2$, and then to point $3$.\n\nIn the second test case, you need to take $2$ batteries at the starting point, then move to point $2$, take another $2$ batteries, move to point $4$, and then to point $5$.\n\nIn the third test case, there is no path from point $1$ to point $n$.\n\nIn the fourth test case, you need to take $1$ battery at the starting point, then move to point $2$, take another $9$ batteries, move to point $3$, and then to point $4$.", "cfid": "2110D"}
{"problem_id": "2110B", "problem_title": "B. Down with Brackets", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2110/B", "problem_statement": "In 2077, robots decided to get rid of balanced bracket sequences once and for all!\n\nA bracket sequence is called balanced if it can be constructed by the following formal grammar.\n\n1. The empty sequence $\\varnothing$ is balanced.\n2. If the bracket sequence $A$ is balanced, then $\\mathtt{(}A\\mathtt{)}$ is also balanced.\n3. If the bracket sequences $A$ and $B$ are balanced, then the concatenated sequence $A B$ is also balanced.\n\nYou are the head of the department for combating balanced bracket sequences, and your main task is to determine which brackets you can destroy and which you cannot.\n\nYou are given a balanced bracket sequence represented by a string $s$, consisting of the characters ( and ). Since the robots' capabilities are not limitless, they can remove exactly one opening bracket and exactly one closing bracket from the string.\n\nYour task is to determine whether the robots can delete such two brackets so that the string $s$ is no longer a balanced bracket sequence.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nEach test case consists of a single string $s$ ($2 \\leq |s| \\leq 2 \\cdot 10^5$) — a sequence of the characters ( and ).\n\nIt is guaranteed that $s$ is a balanced bracket sequence.\n\nIt is also guaranteed that the sum of $|s|$ across all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, output \"YES\" if the robots can make the string stop being a balanced bracket sequence, and \"NO\" otherwise.\n\nYou may output each letter in any case (lowercase or uppercase). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be accepted as a positive answer.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n(())\n\n(())()()\n\n()\n\n(())(())\n\n```\n\n#### Output #1\n\n```\nNO\nYES\nNO\nYES\n```\n\n### Note\n\nIn the first test case, it can be shown that the robots will not be able to break the correct bracket sequence.\n\nIn the second test case, one of the options for removing brackets is as follows:\n\n$\\texttt{(())}\\color{red}{\\texttt{(}}\\texttt{)(}\\color{red}{\\texttt{)}} \\rightarrow \\texttt{(()))(}$, which is not a correct bracket sequence.\n\nIn the fourth test case, one of the options for removal is as follows:\n\n$\\texttt{(}\\color{red}{\\texttt{(}}\\texttt{))((}\\color{red}{\\texttt{)}}\\texttt{)}\\rightarrow \\texttt{())(()}$, which is not a correct bracket sequence.", "cfid": "2110B"}
{"problem_id": "2110A", "problem_title": "A. Fashionable Array", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2110/A", "problem_statement": "In 2077, everything became fashionable among robots, even arrays...\n\nWe will call an array of integers $a$ fashionable if $\\min(a) + \\max(a)$ is divisible by $2$ without a remainder, where $\\min(a)$ — the value of the minimum element of the array $a$, and $\\max(a)$ — the value of the maximum element of the array $a$.\n\nYou are given an array of integers $a_1, a_2, \\ldots, a_n$. In one operation, you can remove any element from this array. Your task is to determine the minimum number of operations required to make the array $a$ fashionable.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^3$). The description of the test cases follows.\n\nThe first line of each test case contains one integer $n$ ($1 \\leq n \\leq 50$) — the size of the array $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 50$) — the elements of the array $a$.\n\n### Output\n\nFor each test case, output one integer — the minimum number of operations required to make the array $a$ fashionable.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n2\n\n5 2\n\n7\n\n3 1 4 1 5 9 2\n\n7\n\n2 7 4 6 9 11 5\n\n3\n\n1 2 1\n\n2\n\n2 1\n\n8\n\n8 6 3 6 4 1 1 6\n\n```\n\n#### Output #1\n\n```\n1\n0\n2\n1\n1\n3\n```\n\n### Note\n\nIn the first test case, at least one element needs to be removed since $\\min(a)+\\max(a)=2+5=7$, and $7$ is not divisible by $2$. If any of the elements are removed, only one element will remain. Then $\\max(a) + \\min(a)$ will be divisible by $2$.\n\nIn the second test case, nothing needs to be removed since $\\min(a)+\\max(a)=1+9=10$, and $10$ is divisible by $2$.\n\nIn the third test case, you can remove the elements with values $2$ and $4$, then $\\min(a)+\\max(a)=5+11=16$, and $16$ is divisible by $2$.", "cfid": "2110A"}
{"problem_id": "2109B", "problem_title": "B. Slice to Survive", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2109/B", "problem_statement": "Duelists Mouf and Fouad enter the arena, which is an $n \\times m$ grid!\n\nFouad's monster starts at cell $(a, b)$, where rows are numbered $1$ to $n$ and columns $1$ to $m$.\n\nMouf and Fouad will keep duelling until the grid consists of only one cell.\n\nIn each turn:\n\n- Mouf first cuts the grid along a row or column line into two parts, discarding the part without Fouad's monster. Note that the grid must have at least two cells; otherwise, the game has already ended.\n- After that, in the same turn, Fouad moves his monster to any cell (possibly the same one it was in) within the remaining grid.\n\n![](https://espresso.codeforces.com/8b1099cc13f7e0c8fbf449b3e7f2fcd1c9eec0b9.png)Visualization of the phases of the fourth test case.\n\nMouf wants to minimize the number of turns, while Fouad wants to maximize them. How many turns will this epic duel last if both play optimally?\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first and only line of each test case contains four integers $n$, $m$, $a$, and $b$ ($2 \\le n, m \\le 10^9$, $1 \\le a \\le n$, $1 \\le b \\le m$) — denoting the number of rows, the number of columns, the starting row of the monster, and the starting column of the monster, respectively.\n\n### Output\n\nFor each test case, output a single integer — the number of turns this epic duel will last if both play optimally.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n2 2 1 1\n\n3 3 2 2\n\n2 7 1 4\n\n2 7 2 2\n\n8 9 4 6\n\n9 9 5 5\n\n2 20 2 11\n\n22 99 20 70\n\n```\n\n#### Output #1\n\n```\n2\n4\n4\n3\n6\n8\n6\n10\n```\n\n### Note\n\nIn the first test case, one possible duel sequence is as follows:\n\n- Turn 1: Mouf cuts the grid horizontally along the line between the rows $1$ and $2$, removing the bottom half and leaving a $1 \\times 2$ grid.\n- Turn 1: Fouad's monster is at the cell $(1,1)$.\n- Turn 2: Mouf cuts the $1 \\times 2$ grid again, removes one column, and isolates the cell $(1,1)$.\n\nThe duel is completed in $2$ turns.\n\nIn the fourth case, one possible duel sequence is as follows:\n\n- Turn 1: Mouf cuts the grid vertically along the line between the columns $2$ and $3$, splitting it into a $2 \\times 2$ and a $2 \\times 5$ field, then removes the $2 \\times 5$ part.\n- Turn 1: Fouad moves the monster to the cell $(1,1)$.\n- From this point on, the duel plays out just like the first test case—two more turns trim down the grid from $2 \\times 2$ to a single $1 \\times 1$ cell.\n\nIn total, the duel is completed in $3$ turns.\n\nYou can refer to the pictures mentioned in the problem statement for illustrations of the fourth test case.", "cfid": "2109B"}
{"problem_id": "2109C1", "problem_title": "C1. Hacking Numbers (Easy Version)", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2109/C1", "problem_statement": "This is the easy version of the problem. In this version, you can send at most $\\mathbf{7}$ commands. You can make hacks only if all versions of the problem are solved.\n\nThis is an interactive problem.\n\nWelcome, Duelists! In this interactive challenge, there is an unknown integer $x$ ($1 \\le x \\le 10^9$). You must make it equal to a given integer in the input $n$. By harnessing the power of \"Mathmech\" monsters, you can send a command to do one of the following:\n\nCommandConstraintResultCaseUpdateJury's response\"add $y$\"$-10^{18} \\le y \\le 10^{18}\n\n$$\\mathrm{res} = x + y$$\n\ntext{if } 1 \\le \\mathrm{res} \\le 10^{18}\n\n$$x \\leftarrow \\mathrm{res}$\"1\"$\\mathrm{else}$$\n\nx \\leftarrow x$\"0\"\"mul $y$\"$1 \\le y \\le 10^{18}\n\n$$\\mathrm{res} = x \\cdot y$$\n\ntext{if } 1 \\le \\mathrm{res} \\le 10^{18}\n\n$$x \\leftarrow \\mathrm{res}$\"1\"$\\mathrm{else}$$\n\nx \\leftarrow x$\"0\"\"div $y$\"$1 \\le y \\le 10^{18}\n\n$$\\mathrm{res} = x/y$$\n\ntext{if } y$ divides $x\n\n$$x \\leftarrow \\mathrm{res}$\"1\"$\\mathrm{else}$$\n\nx \\leftarrow x$\"0\"\"digit\"—$\\\\mathrm{res} = S(x)$$^{\\\\text{∗}}$—$x \\leftarrow \\mathrm{res}$\"1\"\n\nYou have to make $x$ equal to $n$ using at most $\\mathbf{7}$ commands.\n\n$^{\\\\text{∗}}$$S(n)$ is a function that returns the sum of all the individual digits of a non-negative integer $n$. For example, $S(123) = 1 + 2 + 3 = 6$\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 5000$). The description of the test cases follows.\n\nThe first and only line of each test case contains one integer $n$ ($1 \\le n \\le 10^9$).\n\n### Interaction\n\nThe interaction for each test case begins by reading the integer $n$.\n\nTo send a command, output a line in the following format:\n\n- \"add $y$\" Add some integer $y$ ($-10^{18} \\le y \\le 10^{18}$) to $x$.\nThe jury will output \"1\" if $x + y$ is within $[1, 10^{18}]$ (successful), and \"0\" otherwise. If successful, update $x \\leftarrow x + y$.\n\n- \"mul $y$\" Multiply $x$ by a positive integer $y$ ($1 \\le y \\le 10^{18}$).\nThe jury will output \"1\" if $x \\cdot y$ is within $[1, 10^{18}]$ (successful), and \"0\" otherwise. If successful, update $x \\leftarrow x \\cdot y$.\n\n- \"div $y$\" Divide $x$ by a positive integer $y$ ($1 \\le y \\le 10^{18}$).\nThe jury will output \"1\" if $y$ is a divisor of $x$ (successful), and \"0\" otherwise. If successful, update $x \\leftarrow \\frac{x}{y}$.\n\n- \"digit\" Make $x$ equal to the sum of its digits.\nThe jury will always output \"1\" and update $x \\leftarrow S(x)$.\n\n\nNote that commands are case sensitive.\n\nWhen you have determined that $x$ is equal to $n$, output a line in the following format:\n\n- \"!\" — where the jury will output a \"1\" if $n$ is equal to $x$, and \"-1\" otherwise.\n\nNote that answering does not count toward your limit of $\\mathbf{7}$ commands.\n\nIf your program makes more than $\\mathbf{7}$ commands for one test case, or makes an invalid command, then the response to the command will be \"-1\". After receiving such a response, your program should immediately terminate to receive the verdict Wrong Answer. Otherwise, it may receive any other verdict.\n\nAfter printing a command, do not forget to output the end of the line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- sys.stdout.flush() in Python;\n- std::io::stdout().flush() in Rust;\n- see the documentation for other languages.\n\nThe interactor is non-adaptive. The unknown integer $x$ does not change during the interaction.\n\nHacks\n\nTo hack, use the following format.\n\nThe first line should contain a single integer $t$ ($1 \\leq t \\leq 5000$) — the number of test cases.\n\nThe first line of each test case should contain two positive integers $n$ and $x$ ($1 \\leq n,x \\leq 10^9$) — denoting the unknown integer and the target value to which it should be made equal, respectively.\n\n### Example\n\n#### Input #1\n\n```\n2\n100\n\n0\n\n1\n\n1\n\n1\n\n5\n\n1\n\n1\n\n1```\n\n#### Output #1\n\n```\n\nadd -10\n\nadd 1\n\nmul 10\n\n!\n\ndigit\n\ndiv 2\n\n!```\n\n### Note\n\nSolutionJuryExplanation$\\texttt{2}$There are 2 test cases.$\\texttt{100}$In the first test case, the unknown integer $x = 9$ and we have to make it equal to $n = 100$.$\\texttt{add -10}\n\n$$\\texttt{0}$The answer to \"add -10\" is \"0\". This means that the addition command was not successful as $x + y = 9 + (-10) \\le 0$, and $x$ remains $9$ after the command$\\texttt{add 1}$$\n\ntexttt{1}$The answer to \"add 1\" is \"1\". This means that the addition command was successful as $x + y = 9 + 1 = 10$, and $x$ changes to $10$ after the command.$\\texttt{mul 10}\n\n$$\\texttt{1}$The answer to \"mul 10\" is \"1\". This means that the multiplication command was successful as $x \\cdot y = 10 \\cdot 10 = 100$, and $x$ changes to $100$ after the command.$\\texttt{!}$$\n\ntexttt{1}$The answer to \"!\" is \"1\". This means you have determined that $x$ equals $n$.$\\texttt{5}$In the second test case, the unknown integer $x = 1234$ and we have to make it equal to $n = 5$.$\\texttt{digit}\n\n$$\\texttt{1}$The answer to \"digit\" is \"1\". This means that $x$ turned into the sum of its digits $1 + 2 + 3 + 4 = 10$, and $x$ changes to $10$ after the command.$\\texttt{div 2}$$\n\ntexttt{1}$The answer to \"div 2\" is \"1\". This means that the division command was successful as $y = 2$ is a divisor of $x = 10$, and $x$ changes to $\\frac{x}{y} = \\frac{10}{2} = 5$ after the command.$\\texttt{!}$$\\texttt{1}$The answer to \"!\" is \"1\". This means you have determined that $x$ equals $n$.\n\nNote that the empty lines in the example input and output are for the sake of clarity, and do not occur in the real interaction.", "cfid": "2109C1"}
{"problem_id": "2109C2", "problem_title": "C2. Hacking Numbers (Medium Version)", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2109/C2", "problem_statement": "This is the medium version of the problem. In this version, you can send at most $\\mathbf{4}$ commands. You can make hacks only if all versions of the problem are solved.\n\nThis is an interactive problem.\n\nWelcome, Duelists! In this interactive challenge, there is an unknown integer $x$ ($1 \\le x \\le 10^9$). You must make it equal to a given integer in the input $n$. By harnessing the power of \"Mathmech\" monsters, you can send a command to do one of the following:\n\nCommandConstraintResultCaseUpdateJury's response\"add $y$\"$-10^{18} \\le y \\le 10^{18}\n\n$$\\mathrm{res} = x + y$$\n\ntext{if } 1 \\le \\mathrm{res} \\le 10^{18}\n\n$$x \\leftarrow \\mathrm{res}$\"1\"$\\mathrm{else}$$\n\nx \\leftarrow x$\"0\"\"mul $y$\"$1 \\le y \\le 10^{18}\n\n$$\\mathrm{res} = x \\cdot y$$\n\ntext{if } 1 \\le \\mathrm{res} \\le 10^{18}\n\n$$x \\leftarrow \\mathrm{res}$\"1\"$\\mathrm{else}$$\n\nx \\leftarrow x$\"0\"\"div $y$\"$1 \\le y \\le 10^{18}\n\n$$\\mathrm{res} = x/y$$\n\ntext{if } y$ divides $x\n\n$$x \\leftarrow \\mathrm{res}$\"1\"$\\mathrm{else}$$\n\nx \\leftarrow x$\"0\"\"digit\"—$\\\\mathrm{res} = S(x)$$^{\\\\text{∗}}$—$x \\leftarrow \\mathrm{res}$\"1\"\n\nYou have to make $x$ equal to $n$ using at most $\\mathbf{4}$ commands.\n\n$^{\\\\text{∗}}$$S(n)$ is a function that returns the sum of all the individual digits of a non-negative integer $n$. For example, $S(123) = 1 + 2 + 3 = 6$\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 5000$). The description of the test cases follows.\n\nThe first and only line of each test case contains one integer $n$ ($1 \\le n \\le 10^9$).\n\n### Interaction\n\nThe interaction for each test case begins by reading the integer $n$.\n\nTo send a command, output a line in the following format:\n\n- \"add $y$\" Add some integer $y$ ($-10^{18} \\le y \\le 10^{18}$) to $x$.\nThe jury will output \"1\" if $x + y$ is within $[1, 10^{18}]$ (successful), and \"0\" otherwise. If successful, update $x \\leftarrow x + y$.\n\n- \"mul $y$\" Multiply $x$ by a positive integer $y$ ($1 \\le y \\le 10^{18}$).\nThe jury will output \"1\" if $x \\cdot y$ is within $[1, 10^{18}]$ (successful), and \"0\" otherwise. If successful, update $x \\leftarrow x \\cdot y$.\n\n- \"div $y$\" Divide $x$ by a positive integer $y$ ($1 \\le y \\le 10^{18}$).\nThe jury will output \"1\" if $y$ is a divisor of $x$ (successful), and \"0\" otherwise. If successful, update $x \\leftarrow \\frac{x}{y}$.\n\n- \"digit\" Make $x$ equal to the sum of its digits.\nThe jury will always output \"1\" and update $x \\leftarrow S(x)$.\n\n\nNote that commands are case sensitive.\n\nWhen you have determined that $x$ is equal to $n$, output a line in the following format:\n\n- \"!\" — where the jury will output a \"1\" if $n$ is equal to $x$, and \"-1\" otherwise.\n\nNote that answering does not count toward your limit of $\\mathbf{4}$ commands.\n\nIf your program makes more than $\\mathbf{4}$ commands for one test case, or makes an invalid command, then the response to the command will be \"-1\". After receiving such a response, your program should immediately terminate to receive the verdict Wrong Answer. Otherwise, it may receive any other verdict.\n\nAfter printing a command, do not forget to output the end of the line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- sys.stdout.flush() in Python;\n- std::io::stdout().flush() in Rust;\n- see the documentation for other languages.\n\nThe interactor is non-adaptive. The unknown integer $x$ does not change during the interaction.\n\nHacks\n\nTo hack, use the following format.\n\nThe first line should contain a single integer $t$ ($1 \\leq t \\leq 5000$) — the number of test cases.\n\nThe first line of each test case should contain two positive integers $n$ and $x$ ($1 \\leq n,x \\leq 10^9$) — denoting the unknown integer and the target value to which it should be made equal, respectively.\n\n### Example\n\n#### Input #1\n\n```\n2\n100\n\n0\n\n1\n\n1\n\n1\n\n5\n\n1\n\n1\n\n1\n```\n\n#### Output #1\n\n```\n\nadd -10\n\nadd 1\n\nmul 10\n\n!\n\ndigit\n\ndiv 2\n\n!\n```\n\n### Note\n\nSolutionJuryExplanation$\\texttt{2}$There are 2 test cases.$\\texttt{100}$In the first test case, the unknown integer $x = 9$ and we have to make it equal to $n = 100$.$\\texttt{add -10}\n\n$$\\texttt{0}$The answer to \"add -10\" is \"0\". This means that the addition command was not successful as $x + y = 9 + (-10) \\le 0$, and $x$ remains $9$ after the command$\\texttt{add 1}$$\n\ntexttt{1}$The answer to \"add 1\" is \"1\". This means that the addition command was successful as $x + y = 9 + 1 = 10$, and $x$ changes to $10$ after the command.$\\texttt{mul 10}\n\n$$\\texttt{1}$The answer to \"mul 10\" is \"1\". This means that the multiplication command was successful as $x \\cdot y = 10 \\cdot 10 = 100$, and $x$ changes to $100$ after the command.$\\texttt{!}$$\n\ntexttt{1}$The answer to \"!\" is \"1\". This means you have determined that $x$ equals $n$.$\\texttt{5}$In the second test case, the unknown integer $x = 1234$ and we have to make it equal to $n = 5$.$\\texttt{digit}\n\n$$\\texttt{1}$The answer to \"digit\" is \"1\". This means that $x$ turned into the sum of its digits $1 + 2 + 3 + 4 = 10$, and $x$ changes to $10$ after the command.$\\texttt{div 2}$$\n\ntexttt{1}$The answer to \"div 2\" is \"1\". This means that the division command was successful as $y = 2$ is a divisor of $x = 10$, and $x$ changes to $\\frac{x}{y} = \\frac{10}{2} = 5$ after the command.$\\texttt{!}$$\\texttt{1}$The answer to \"!\" is \"1\". This means you have determined that $x$ equals $n$.\n\nNote that the empty lines in the example input and output are for the sake of clarity, and do not occur in the real interaction.", "cfid": "2109C2"}
{"problem_id": "2109A", "problem_title": "A. It's Time To Duel", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2109/A", "problem_statement": "Something you may not know about Mouf is that he is a big fan of the Yu-Gi-Oh! card game. He loves to duel with anyone he meets. To gather all fans who love to play as well, he decided to organize a big Yu-Gi-Oh! tournament and invited $n$ players.\n\nMouf arranged the $n$ players in a line, numbered from $1$ to $n$. They then held $n - 1$ consecutive duels: for each $i$ from $1$ to $n - 1$, player $i$ faced player $i + 1$, producing one winner and one loser per match. Afterward, each player reports a value $a_i(0 \\le a_i \\le 1)$:\n\n- $0$ indicating they won no duels;\n- $1$ indicating they won at least one duel.\n\nSince some may lie about their results (e.g., reporting a $1$ instead of a $0$, or vice versa) to influence prize outcomes, Mouf will cancel the tournament if he can prove any report to be false.\n\nGiven the array $a$, determine whether at least one player must be lying.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 100$). The description of the test cases follows.\n\nThe first line of each test case contains one integer $n$ ($2 \\le n \\le 100$) — the number of players in the tournament.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le 1$) — denoting the report of the $i$-th player.\n\n### Output\n\nFor each test case, print \"YES\" (without quotes) if there is at least one liar among the players, and \"NO\" (without quotes) otherwise.\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n3\n\n0 1 0\n\n2\n\n0 0\n\n2\n\n1 1\n\n4\n\n0 1 1 1\n\n4\n\n1 0 0 1\n\n7\n\n0 1 0 1 0 1 0\n\n```\n\n#### Output #1\n\n```\nNO\nYES\nYES\nNO\nYES\nNO\n```\n\n### Note\n\nIn the first test case, it is consistent if player $2$ defeats both players $1$ and $3$, so nobody's report is necessarily false.\n\nIn the second test case, in the only match between players $1$ and $2$, one must win — but both claimed zero wins, so someone must be lying.\n\nIn the third test case, the tournament consists of exactly one duel between players $1$ and $2$ — but it's impossible for both to win, concluding that at least one report is false.\n\nIn the fourth test case, a possible scenario is that player $2$ won against player $1$, then $3$ won against $2$, and then $4$ won against $3$. All reports align, so there is no evidence that someone lied.", "cfid": "2109A"}
{"problem_id": "2102B", "problem_title": "B. The Picky Cat", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2102/B", "problem_statement": "You are given an array of integers $a_1, a_2, \\ldots, a_n$. You are allowed to do the following operation any number of times (possibly zero):\n\n- Choose an index $i$ ($1\\le i\\le n$). Multiply $a_i$ by $-1$ (i.e., update $a_i := -a_i$).\n\nYour task is to determine whether it is possible to make the element at index $1$ become the median of the array after doing the above operation any number of times. Note that operations can be applied to index $1$ as well, meaning the median can be either the original value of $a_1$ or its negation.\n\nThe median of an array $b_1, b_2, \\ldots, b_m$ is defined as the $\\left\\lceil \\frac{m}{2} \\right\\rceil$-th$^{\\text{∗}}$ smallest element of array $b$. For example, the median of the array $[3, 1, 2]$ is $2$, while the median of the array $[10, 1, 8, 3]$ is $3$.\n\nIt is guaranteed that the absolute value of the elements of $a$ are distinct. Formally, there are no pairs of indices $1\\le i < j\\le n$ where $|a_i| = |a_j|$.\n\n$^{\\\\text{∗}}$$\\\\lceil x \\\\rceil$ is the ceiling function which returns the least integer greater than or equal to $x$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1\\le n\\le 10^5$) — the length of the array $a$.\n\nThe second line of each test case contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($|a_i|\\le 10^6$, $|a_i|\\neq |a_j|$) — the elements of the array $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each testcase, output \"YES\" if it is possible to make the element at index $1$ become the median of the array, and \"NO\" otherwise.\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n3\n\n2 3 1\n\n5\n\n1 2 3 4 5\n\n4\n\n4 2 0 -5\n\n4\n\n-5 0 4 3\n\n4\n\n-10 8 3 2\n\n1\n\n1\n\n10\n\n9 1000 -999 -13 456 -223 23 24 10 0\n\n```\n\n#### Output #1\n\n```\nYES\nYES\nYES\nNO\nNO\nYES\nYES\n```\n\n### Note\n\nIn the first test case, $a_1 = 2$ is already the median of the array $a = [2, 3, 1]$, so no operation is required.\n\nIn the second test case, we can do two operations: one on index $2$, and one on index $5$. The array becomes $[1, -2, 3, 4, -5]$, which has a median of $1$.\n\nIn the third test case, if you do an operation on index $1$, the array will become $[-4, 2, 0, -5]$, which has a median of $-4$.\n\nIn the fourth test case, it can be proven that no sequence of operations can make the median of the array become $5$ or $-5$.", "cfid": "2102B"}
{"problem_id": "2102A", "problem_title": "A. Dinner Time", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2102/A", "problem_statement": "Given four integers $n$, $m$, $p$, and $q$, determine whether there exists an integer array $a_1, a_2, \\ldots, a_n$ (elements may be negative) satisfying the following conditions:\n\n- The sum of all elements in the array is equal to $m$: \n\n$$a_1 + a_2 + \\ldots + a_n = m$$\n\nThe sum of every $p$ consecutive elements is equal to $q$: \n\n$$a_i + a_{i + 1} + \\ldots + a_{i + p - 1} = q,\\qquad\\text{ for all }1\\le i\\le n-p+1$$\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first and only line of each test case contains four integers $n$, $m$, $p$, and $q$ ($1 \\le p \\le n \\le 100$, $1 \\le q, m \\le 100$) — the length of the array, the sum of elements, the length of a segment, and the sum of a segment, respectively.\n\n### Output\n\nFor each test case, output \"YES\" (without quotes) if there exists an array satisfying the above conditions, and \"NO\" (without quotes) otherwise.\n\nYou can output \"YES\" and \"NO\" in any case (for example, strings \"yES\", \"yes\", and \"Yes\" will all be recognized as valid responses).\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3 2 2 1\n\n1 1 1 1\n\n5 4 2 3\n\n10 7 5 2\n\n4 4 1 3\n\n```\n\n#### Output #1\n\n```\nYES\nYES\nYES\nNO\nNO\n```\n\n### Note\n\nIn the first test case, an example of an array satisfying the condition is $[1, 0, 1]$. This is because:\n\n- $a_1+a_2+a_3 = 1+0+1 = 2 = m$\n- $a_1+a_2=1+0=1=q$\n- $a_2+a_3=0+1=1=q$\n\nIn the second test case, the only array satisfying the condition is $[1]$.\n\nIn the third test case, an example of an array satisfying the condition is $[-2, 5, -2, 5, -2]$.\n\nIn the fourth test case, it can be proven that there is no array satisfying the condition.", "cfid": "2102A"}
{"problem_id": "2101B", "problem_title": "B. Quartet Swapping", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2101/B", "problem_statement": "You are given a permutation $a$ of length $n$$^{\\\\text{∗}}$. You are allowed to do the following operation any number of times (possibly zero):\n\n- Choose an index $1\\le i\\le n - 3$. Then, swap $a_i$ with $a_{i + 2}$, and $a_{i + 1}$ with $a_{i + 3}$ simultaneously. In other words, permutation $a$ will be transformed from $[\\ldots, a_i, a_{i+1}, a_{i+2}, a_{i+3}, \\ldots]$ to $[\\ldots, a_{i+2}, a_{i+3}, a_{i}, a_{i+1}, \\ldots]$.\n\nDetermine the lexicographically smallest permutation$^{\\text{†}}$ that can be obtained by applying the above operation any number of times.\n\n$^{\\text{∗}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n$^{\\text{†}}$An array $x$ is lexicographically smaller than an array $y$ of the same size if and only if the following holds:\n\n- in the first position where $x$ and $y$ differ, the array $x$ has a smaller element than the corresponding element in $y$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($4\\le n\\le 2\\cdot 10^5$) — the length of permutation $a$.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le n$) — the elements of permutation $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, output the lexicographically smallest permutation that can be obtained by applying the above operation any number of times.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n4\n\n3 4 1 2\n\n5\n\n5 4 3 1 2\n\n10\n\n10 9 8 7 6 5 4 3 2 1\n\n```\n\n#### Output #1\n\n```\n1 2 3 4\n2 1 3 4 5\n2 1 4 3 6 5 8 7 10 9\n```\n\n### Note\n\nIn the first test case, an operation can be done on index $i = 1$, and the permutation will become $[1, 2, 3, 4]$, which is the lexicographically smallest permutation achievable.\n\nIn the second test case, we can do the following sequence of operations:\n\n- Do an operation on index $i = 2$. The permutation becomes $[5, 1, 2, 4, 3]$.\n- Do an operation on index $i = 1$. The permutation becomes $[2, 4, 5, 1, 3]$.\n- Do an operation on index $i = 2$. The permutation becomes $[2, 1, 3, 4, 5]$.", "cfid": "2101B"}
{"problem_id": "2101A", "problem_title": "A. Mex in the Grid", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2101/A", "problem_statement": "You are given $n^2$ cards with values from $0$ to $n^2-1$. You are to arrange them in a $n$ by $n$ grid such that there is exactly one card in each cell.\n\nThe MEX (minimum excluded value) of a subgrid$^{\\text{∗}}$ is defined as the smallest non-negative integer that does not appear in the subgrid.\n\nYour task is to arrange the cards such that the sum of MEX values over all $\\left(\\frac{n(n+1)}{2}\\right)^2$ subgrids is maximized.\n\n$^{\\text{∗}}$A subgrid of a $n$ by $n$ grid is specified by four numbers $l_1, r_1, l_2, r_2$ satisfying $1\\le l_1\\le r_1\\le n$ and $1\\le l_2\\le r_2\\le n$. The element in the $i$-th row and the $j$-th column of the grid is part of the subgrid if and only if $l_1\\le i\\le r_1$ and $l_2\\le j\\le r_2$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 100$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1\\le n\\le 500$) — the side length of the grid.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $1000$.\n\n### Output\n\nFor each test case, output $n$ lines, each containing $n$ integers representing the elements of the grid.\n\nIf there are multiple answers, you can output any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n2\n\n3\n\n```\n\n#### Output #1\n\n```\n0 1\n2 3\n8 4 5\n6 0 1\n7 2 3```\n\n### Note\n\nIn the first test case, one valid arrangement is:\n\n0123\n\nThere are $9$ subgrids in total, and the $4$ of them with non-zero MEX are shown below:\n\n0values:$[0]$ — MEX: $1$\n\n01values:$[0, 1]$  — MEX: $2$\n\n02values:$[0, 2]$  — MEX: $1$\n\n0123values:$[0, 1, 2, 3]$  — MEX: $4$\n\nThe sum of MEX over all subgrids would be $1+2+1+4 = 8$. It can be proven that no other arrangements have a larger sum of MEX values.", "cfid": "2101A"}
{"problem_id": "2107B", "problem_title": "B. Apples in Boxes", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2107/B", "problem_statement": "Tom and Jerry found some apples in the basement. They decided to play a game to get some apples.\n\nThere are $n$ boxes, and the $i$-th box has $a_i$ apples inside. Tom and Jerry take turns picking up apples. Tom goes first. On their turn, they have to do the following:\n\n- Choose a box $i$ ($1 \\le i \\le n$) with a positive number of apples, i.e. $a_i > 0$, and pick $1$ apple from this box. Note that this reduces $a_i$ by $1$.\n- If no valid box exists, the current player loses.\n- If after the move, $\\max(a_1, a_2, \\ldots, a_n) - \\min(a_1, a_2, \\ldots, a_n) > k$ holds, then the current player (who made the last move) also loses.\n\nIf both players play optimally, predict the winner of the game.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n,k$ ($2 \\le n \\le 10^5,1\\le k \\le 10^9$).\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, print \"Tom\" (without quotes) if Tom will win, or \"Jerry\" (without quotes) otherwise.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3 1\n\n2 1 2\n\n3 1\n\n1 1 3\n\n2 1\n\n1 4\n\n```\n\n#### Output #1\n\n```\nTom\nTom\nJerry\n```\n\n### Note\n\nNote that neither player is necessarily playing an optimal strategy in the following games, just to give you an idea of how the game is going.\n\nIn the first test case of the example, one possible situation is shown as follows.\n\n- Tom takes an apple from the first box. The array $a$ becomes $[1, 1, 2]$. Tom does not lose because $\\max(1, 1, 2) - \\min(1, 1, 2) = 1 \\le k$.\n- Jerry takes an apple from the first box as well. The array $a$ becomes $[0, 1, 2]$. Jerry loses because $\\max(0, 1, 2) - \\min(0, 1, 2) = 2 > k$.", "cfid": "2107B"}
{"problem_id": "2107A", "problem_title": "A. LRC and VIP", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2107/A", "problem_statement": "You have an array $a$ of size $n$ — $a_1, a_2, \\ldots a_n$.\n\nYou need to divide the $n$ elements into $2$ sequences $B$ and $C$, satisfying the following conditions:\n\n- Each element belongs to exactly one sequence.\n- Both sequences $B$ and $C$ contain at least one element.\n- $\\gcd$ $(B_1, B_2, \\ldots, B_{|B|}) \\ne \\gcd(C_1, C_2, \\ldots, C_{|C|})$ $^{\\text{∗}}$\n\n$^{\\\\text{∗}}$$\\\\gcd(x, y)$ denotes the [greatest common divisor (GCD)](https://en.wikipedia.org/wiki/Greatest_common_divisor) of integers $x$ and $y$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 500$). The description of the test cases follows.\n\nThe first line of each test case contains an integer $n$ ($2 \\le n \\le 100$).\n\nThe second line of each test case contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($1 \\le a_i \\le 10^4$).\n\n### Output\n\nFor each test case, first output $\\texttt{Yes}$ if a solution exists or $\\texttt{No}$ if no solution exists. You may print each character in either case, for example $\\texttt{YES}$ and $\\texttt{yEs}$ will also be accepted.\n\nOnly when there is a solution, output $n$ integers on the second line. The $i$-th number should be either $1$ or $2$. $1$ represents that the element belongs to sequence $B$ and $2$ represents that the element belongs to sequence $C$.\n\nYou should guarantee that $1$ and $2$ both appear at least once.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n4\n\n1 20 51 9\n\n4\n\n5 5 5 5\n\n3\n\n1 2 2\n\n```\n\n#### Output #1\n\n```\nYes\n2 2 1 1\nNo\nYes\n1 2 2\n```\n\n### Note\n\nIn the first test case, $B = [51, 9]$ and $C = [1, 20]$. You can verify $\\gcd(B_1, B_2) = 3 \\ne 1 = \\gcd(C_1, C_2)$.\n\nIn the second test case, it is impossible to find a solution. For example, suppose you distributed the first $3$ elements to array $B$ and then the last element to array $C$. You have $B = [5, 5, 5]$ and $C = [5]$, but $\\gcd(B_1, B_2, B_3) = 5 = \\gcd(C_1)$. Hence it is invalid.", "cfid": "2107A"}
{"problem_id": "2107C", "problem_title": "C. Maximum Subarray Sum", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2107/C", "problem_statement": "You are given an array $a_1,a_2,\\ldots,a_n$ of length $n$ and a positive integer $k$, but some parts of the array $a$ are missing. Your task is to fill the missing part so that the maximum subarray sum$^{\\text{∗}}$ of $a$ is exactly $k$, or report that no solution exists.\n\nFormally, you are given a binary string $s$ and a partially filled array $a$, where:\n\n- If you remember the value of $a_i$, $s_i = 1$ to indicate that, and you are given the real value of $a_i$.\n- If you don't remember the value of $a_i$, $s_i = 0$ to indicate that, and you are given $a_i = 0$.\n\nAll the values that you remember satisfy $|a_i| \\le 10^6$. However, you may use values up to $10^{18}$ to fill in the values that you do not remember. It can be proven that if a solution exists, a solution also exists satisfying $|a_i| \\le 10^{18}$.\n\n$^{\\text{∗}}$The maximum subarray sum of an array $a$ of length $n$, i.e. $a_1, a_2, \\ldots a_n$ is defined as $\\max_{1 \\le i \\le j \\le n} S(i, j)$ where $S(i, j) = a_i + a_{i + 1} + \\ldots + a_j$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two numbers $n,k$ ($1 \\le n \\le 2 \\cdot 10^5,1 \\le k \\le 10^{12}$).\n\nThe second line of each test case contains a binary ($\\texttt{01}$) string $s$ of length $n$.\n\nThe third line of each test case contains $n$ numbers $a_1,a_2,\\ldots,a_n$ ($|a_i| \\le 10^6$). If $s_i = \\texttt{0}$, then it's guaranteed that $a_i = 0$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, first output $\\texttt{Yes}$ if a solution exists or $\\texttt{No}$ if no solution exists. You may print each character in either case, for example $\\texttt{YES}$ and $\\texttt{yEs}$ will also be accepted.\n\nIf there's at least one solution, print $n$ numbers $a_1,a_2,\\ldots,a_n$ on the second line. $|a_i| \\le 10^{18}$ must hold.\n\n### Example\n\n#### Input #1\n\n```\n\n10\n\n3 5\n\n011\n\n0 0 1\n\n5 6\n\n11011\n\n4 -3 0 -2 1\n\n4 4\n\n0011\n\n0 0 -4 -5\n\n6 12\n\n110111\n\n1 2 0 5 -1 9\n\n5 19\n\n00000\n\n0 0 0 0 0\n\n5 19\n\n11001\n\n-8 6 0 0 -5\n\n5 10\n\n10101\n\n10 0 10 0 10\n\n1 1\n\n1\n\n0\n\n3 5\n\n111\n\n3 -1 3\n\n4 5\n\n1011\n\n-2 0 1 -5\n\n```\n\n#### Output #1\n\n```\nYes\n4 0 1\nYes\n4 -3 5 -2 1\nYes\n2 2 -4 -5\nNo\nYes\n5 1 9 2 2\nYes\n-8 6 6 7 -5\nYes\n10 -20 10 -20 10\nNo\nYes\n3 -1 3\nYes\n-2 4 1 -5\n```\n\n### Note\n\nIn test case $1$, only the first position is not filled. We can fill it with $4$ to get the array $[4, 0, 1]$ which has maximum subarray sum of $5$.\n\nIn test case $2$, only the third position is not filled. We can fill it with $5$ to get the array $[4, -3, 5, -2, 1]$. Here the maximum subarray sum comes from the subarray $[4, -3, 5]$ and it is $6$, as required.\n\nIn test case $3$, the first and second positions are unfilled. We can fill both with $2$ to get the array $[2, 2, -4, -5]$ which has a maximum subarray sum of $4$. Note that other outputs are also possible such as $[0, 4, -4, -5]$.\n\nIn test case $4$, it is impossible to get a valid array. For example, if we filled the third position with $0$, we get $[1, 2, 0, 5, -1, 9]$, but this has a maximum subarray sum of $16$, not $12$ as required.", "cfid": "2107C"}
{"problem_id": "2108B", "problem_title": "B. SUMdamental Decomposition", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2108/B", "problem_statement": "On a recent birthday, your best friend Maurice gave you a pair of numbers $n$ and $x$, and asked you to construct an array of positive numbers $a$ of length $n$ such that $a_1 \\oplus a_2 \\oplus \\cdots \\oplus a_n = x$ $^{\\text{∗}}$.\n\nThis task seemed too simple to you, and therefore you decided to give Maurice a return gift by constructing an array among all such arrays that has the smallest sum of its elements. You immediately thought of a suitable array; however, since writing it down turned out to be too time-consuming, Maurice will have to settle for just the sum of its elements.\n\n$^{\\\\text{∗}}$$\\\\oplus$ denotes the [bitwise XOR operation](https://en.wikipedia.org/wiki/Bitwise_operation#XOR).\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nEach test case consists of a single line containing a pair of numbers $n$ and $x$ ($1 \\le n \\le 10^9, \\; 0 \\le x \\le 10^9$) — the numbers given to you by Maurice.\n\n### Output\n\nFor each test case, output your gift to Maurice — the sum of the elements of the array that satisfies all the described properties. If a suitable array does not exist, output $-1$.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n2 1\n\n3 6\n\n1 0\n\n2 0\n\n5 0\n\n2 27\n\n15 43\n\n12345678 9101112\n\n```\n\n#### Output #1\n\n```\n5\n8\n-1\n2\n8\n27\n55\n21446778\n```\n\n### Note\n\nIn the first test case, one of the suitable arrays is $[2, 3]$. It can be shown that it is impossible to achieve a smaller sum of array elements.\n\nIn the second case, one of the suitable arrays is $[1, 3, 4]$. It can also be shown that this is the optimal amount.", "cfid": "2108B"}
{"problem_id": "2108A", "problem_title": "A. Permutation Warm-Up", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2108/A", "problem_statement": "For a permutation $p$ of length $n$$^{\\\\text{∗}}$, we define the function:\n\n\n\n$$ f(p) = \\sum_{i=1}^{n} \\lvert p_i - i \\rvert $$\n\nYou are given a number $n$. You need to compute how many distinct values the function $f(p)$ can take when considering all possible permutations of the numbers from $1$ to $n$.\n\n$^{\\text{∗}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 100$). The description of the test cases follows.\n\nThe first line of each test case contains an integer $n$ ($1 \\leq n \\leq 500$) — the number of numbers in the permutations.\n\n### Output\n\nFor each test case, output a single integer — the number of distinct values of the function $f(p)$ for the given length of permutations.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n2\n\n3\n\n8\n\n15\n\n43\n\n```\n\n#### Output #1\n\n```\n2\n3\n17\n57\n463\n```\n\n### Note\n\nConsider the first two examples of the input.\n\nFor $n = 2$, there are only $2$ permutations — $[1, 2]$ and $[2, 1]$. $f([1, 2]) = \\lvert 1 - 1 \\rvert + \\lvert 2 - 2 \\rvert = 0$, $f([2, 1]) = \\lvert 2 - 1 \\rvert + \\lvert 1 - 2 \\rvert = 1 + 1 = 2$. Thus, the function takes $2$ distinct values.\n\nFor $n=3$, there are already $6$ permutations: $[1, 2, 3]$, $[1, 3, 2]$, $[2, 1, 3]$, $[2, 3, 1]$, $[3, 1, 2]$, $[3, 2, 1]$, the function values of which will be $0, 2, 2, 4, 4$, and $4$ respectively, meaning there are a total of $3$ values.", "cfid": "2108A"}
{"problem_id": "2108C", "problem_title": "C. Neo's Escape", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2108/C", "problem_statement": "Neo wants to escape from the Matrix. In front of him are $n$ buttons arranged in a row. Each button has a weight given by an integer: $a_1, a_2, \\ldots, a_n$.\n\nNeo is immobilized, but he can create and move clones. This means he can perform an unlimited number of actions of the following two types in any order:\n\n1. Create a clone in front of a specific button.\n2. Move an existing clone one position to the left or right.\n\nAs soon as a clone is in front of another button that has not yet been pressed—regardless of whether he was created or moved — he immediately presses it. If the button has already been pressed, a clone does nothing — buttons can only be pressed once.\n\nFor Neo to escape, he needs to press all the buttons in such an order that the sequence of their weights is non-increasing — that is, if $b_1, b_2, \\ldots, b_n$ are the weights of the buttons in the order they are pressed, then it must hold that $b_1 \\geq b_2 \\geq \\cdots \\geq b_n$.\n\nYour task is to determine the minimum number of clones that Neo needs to create in order to press all the buttons in a valid order.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains one integer $n$ ($1 \\leq n \\leq 2 \\cdot 10^5$) — the number of buttons.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$) — the weights of the buttons.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output one integer — the minimum number of clones that need to be created to press all the buttons in a valid order.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n5\n\n4 3 2 1 5\n\n3\n\n1 1 1\n\n6\n\n7 8 1 5 9 2\n\n10\n\n1 7 9 7 1 10 2 10 10 7\n\n```\n\n#### Output #1\n\n```\n2\n1\n2\n3\n```\n\n### Note\n\nIn the first test case, Neo can act as follows:\n\n1. Create a clone in front of the fifth button (with weight $5$).\n2. Create a clone in front of the first button (with weight $4$).\n3. Move the second clone from the first button to the second (with weight $3$).\n4. Move the second clone from the second button to the third (with weight $2$).\n5. Move the first clone from the fifth button to the fourth (with weight $1$).\n\nThus, the sequence of button presses will be $5 \\rightarrow 4 \\rightarrow 3 \\rightarrow 2 \\rightarrow 1$, which meets the requirement. It can be shown that the number of clones created is the smallest possible.\n\nIn the second test case, Neo can act as follows:\n\n1. Create a clone in front of the second button (with weight $1$).\n2. Move the clone from the second button to the third (with weight $1$).\n3. Move the clone from the third button to the second (already pressed).\n4. Move the clone from the second button to the first (with weight $1$).\n\nThus, the sequence of button presses will be $1 \\rightarrow 1 \\rightarrow 1$.", "cfid": "2108C"}
{"problem_id": "2104D", "problem_title": "D. Array and GCD", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2104/D", "problem_statement": "You are given an integer array $a$ of size $n$.\n\nYou can perform the following operations any number of times (possibly, zero):\n\n- pay one coin and increase any element of the array by $1$ (you must have at least $1$ coin to perform this operation);\n- gain one coin and decrease any element of the array by $1$.\n\nLet's say that an array is ideal if both of the following conditions hold:\n\n- each element of the array is at least $2$;\n- for each pair of indices $i$ and $j$ ($1 \\le i, j \\le n$; $i \\ne j$) the greatest common divisor (GCD) of $a_i$ and $a_j$ is equal to $1$. If the array has less than $2$ elements, this condition is automatically satisfied.\n\nLet's say that an array is beautiful if it can be transformed into an ideal array using the aforementioned operations, provided that you initially have no coins. If the array is already ideal, then it is also beautiful.\n\nThe given array is not necessarily beautiful or ideal. You can remove any elements from it (including removing the entire array or not removing anything at all). Your task is to calculate the minimum number of elements you have to remove (possibly, zero) from the array $a$ to make it beautiful.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 4 \\cdot 10^5$).\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($2 \\le a_i \\le 10^9$).\n\nAdditional constraint on the input: the sum of $n$ over all test cases doesn't exceed $4 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print a single integer — the minimum number of elements you have to remove (possibly, zero) from the array $a$ to make it beautiful.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3\n\n5 5 5\n\n4\n\n2 3 2 4\n\n1\n\n3\n\n3\n\n2 100 2\n\n5\n\n2 4 2 11 2\n\n```\n\n#### Output #1\n\n```\n0\n2\n0\n0\n1\n```\n\n### Note\n\nIn the first example, you don't need to delete any elements, because the array is already beautiful. It can be transformed into an ideal array as follows: $[5, 5, 5] \\rightarrow [4, 5, 5] \\rightarrow [4, 4, 5] \\rightarrow [4, 3, 5]$ (you end up with $3$ coins).\n\nIn the second example, you need to remove $2$ elements so that the array becomes beautiful. If you leave the elements $[2, 3]$ and delete the other elements, then the given array is already ideal (and therefore, beautiful).\n\nIn the third example, you don't need to delete any elements because the array is already ideal (and thus, beautiful).\n\nIn the fourth example, the array is beautiful. It can be transformed into an ideal array as follows: $[2, 100, 2] \\rightarrow [2, 99, 2] \\rightarrow [2, 99, 3] \\rightarrow [2, 98, 3] \\rightarrow [2, 97, 3]$ (you end up with $2$ coins).", "cfid": "2104D"}
{"problem_id": "2104E", "problem_title": "E. Unpleasant Strings", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2104/E", "problem_statement": "Let's call a letter allowed if it is a lowercase letter and is one of the first $k$ letters of the Latin alphabet.\n\nYou are given a string $s$ of length $n$, consisting only of allowed letters.\n\nLet's call a string $t$ pleasant if $t$ is a subsequence of $s$.\n\nYou are given $q$ strings $t_1, t_2, \\dots, t_q$. All of them consist only of allowed letters. For each string $t_i$, calculate the minimum number of allowed letters you need to append to it on the right so that it stops being pleasant.\n\nA sequence $t$ is a subsequence of a sequence $s$ if $t$ can be obtained from $s$ by the deletion of several (possibly, zero or all) element from arbitrary positions.\n\n### Input\n\nThe first line contains two integers $n$ and $k$ ($1 \\le n \\le 10^6$; $1 \\le k \\le 26$) — the length of the string $s$ and the number of allowed letters.\n\nThe second line contains the string $s$, consisting of $n$ lowercase Latin letters. Each character of the string is one of the first $k$ letters of the Latin alphabet.\n\nThe third line contains one integer $q$ ($1 \\le q \\le 2 \\cdot 10^5$) — the number of queries.\n\nThe next $q$ lines contain queries: one query per line. The $i$-th line contains the string $t_i$, consisting only of allowed letters.\n\nAdditional constraint on input: the total length of all $t_i$ does not exceed $10^6$.\n\n### Output\n\nFor each query, output one integer — the minimum number of allowed letters that need to be appended to the string on the right so that it stops being pleasant.\n\n### Examples\n\n#### Input #1\n\n```\n\n7 3\n\nabacaba\n\n3\n\ncc\n\nbcb\n\nb\n\n```\n\n#### Output #1\n\n```\n0\n1\n2\n```\n\n#### Input #2\n\n```\n\n5 1\n\naaaaa\n\n6\n\na\n\naa\n\naaa\n\naaaa\n\naaaaa\n\naaaaaa\n\n```\n\n#### Output #2\n\n```\n5\n4\n3\n2\n1\n0\n```\n\n### Note\n\nIn the first example:\n\n1. The string cc is already unpleasant, so nothing needs to be appended to it;\n2. bcb is pleasant, so at least one letter needs to be appended to the right: bcba will not work, but bcbb and bcbc are unpleasant.\n3. To b, at least two letters need to be appended, since ba, bb, and bc are pleasant. For example, we can obtain an unpleasant string bbb.", "cfid": "2104E"}
{"problem_id": "2104C", "problem_title": "C. Card Game", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2104/C", "problem_statement": "Alice and Bob are playing a game. They have $n$ cards numbered from $1$ to $n$. At the beginning of the game, some of these cards are given to Alice, and the rest are given to Bob.\n\nCard with number $i$ beats card with number $j$ if and only if $i > j$, with one exception: card $1$ beats card $n$.\n\nThe game continues as long as each player has at least one card. During each turn, the following occurs:\n\n1. Alice chooses one of her cards and places it face up on the table;\n2. Bob, seeing Alice's card, chooses one of his cards and places it face up on the table;\n3. if Alice's card beats Bob's card, both cards are taken by Alice. Otherwise, both cards are taken by Bob.\n\nA player can use a card that they have taken during one of the previous turns.\n\nThe player who has no cards at the beginning of a turn loses. Determine who will win if both players play optimally.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 5000$) — the number of test cases.\n\nEach test case consists of two lines:\n\n- the first line contains a single integer $n$ ($2 \\le n \\le 50$) — the number of cards;\n- the second line contains $n$ characters, each either A or B. If the $i$-th character is A, then card number $i$ is initially given to Alice; otherwise, it is given to Bob.\n\nAdditional constraint on the input: in each test case, at least one card is initially given to Alice, and at least one card is initially given to Bob.\n\n### Output\n\nFor each test case, output Alice if Alice wins with optimal play, or Bob if Bob wins. It can be shown that if both players play optimally, the game will definitely end in a finite number of turns with one of the players winning.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n2\n\nAB\n\n2\n\nBA\n\n4\n\nABAB\n\n4\n\nBABA\n\n3\n\nBAA\n\n5\n\nAAAAB\n\n5\n\nBAAAB\n\n6\n\nBBBAAA\n\n```\n\n#### Output #1\n\n```\nAlice\nBob\nBob\nBob\nAlice\nAlice\nBob\nAlice\n```\n\n### Note\n\nIn the first test case, Alice has only one card, and Bob has only one card. Since Alice's card beats Bob's card, she wins after the first turn.\n\nIn the second test case, Alice has only one card, and Bob has only one card. Since Bob's card beats Alice's card, he wins after the first turn.\n\nIn the third test case, there are two possible game scenarios:\n\n- if Alice plays the card $1$ on the first turn, Bob can respond with the card $2$ and take both cards. Then, Alice has to play the card $3$ on the second turn, and Bob will respond by playing the card $4$. Then, he wins;\n- if Alice plays the card $3$ on the first turn, Bob can respond with the card $4$ and take both cards. Then, Alice has to play the card $1$, and Bob can respond either with the card $2$ or the card $3$. Then, he wins.\n\nIn the fourth test case, there are two possible game scenarios:\n\n- if Alice plays the card $2$ on the first turn, Bob can respond with the card $3$ and take both cards. Then, Alice has to play the card $4$ on the second turn, and Bob will respond by playing the card $1$. Then, he wins;\n- if Alice plays the card $4$ on the first turn, Bob can respond with the card $1$ and take both cards. Then, Alice has to play the card $2$, and Bob can respond either with the card $3$ or the card $4$. Then, he wins.", "cfid": "2104C"}
{"problem_id": "2104A", "problem_title": "A. Three Decks", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2104/A", "problem_statement": "Monocarp placed three decks of cards in a row on the table. The first deck consists of $a$ cards, the second deck consists of $b$ cards, and the third deck consists of $c$ cards, with the condition $a < b < c$.\n\nMonocarp wants to take some number of cards (at least one, but no more than $c$) from the third deck and distribute them between the first two decks so that each of the taken cards ends up in either the first or the second deck. It is possible that all the cards taken from the third deck will go into the same deck.\n\nYour task is to determine whether Monocarp can make the number of cards in all three decks equal using the described operation.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe only line of each test case contains three integers $a, b$, and $c$ ($1 \\le a, b, c \\le 10^8$) — the number of cards in the first, second, and third decks, respectively.\n\nAdditional constraint on the input: $a < b < c$.\n\n### Output\n\nFor each test case, output \"YES\" (without quotes) if Monocarp can make the number of cards in all three decks equal using the described operation. Otherwise, output \"NO\" (without quotes).\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3 5 10\n\n12 20 30\n\n3 5 7\n\n1 5 6\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nYES\nNO\n```\n\n### Note\n\nIn the first test case, Monocarp has to take $4$ cards from the third deck, put $3$ cards in the first deck, and $1$ card in the second deck. Thus, there will be $6$ cards in all three decks.\n\nIn the second test case, it is impossible to make the number of cards in all three decks equal.\n\nIn the third test case, Monocarp has to take $2$ cards from the third deck and put both in the first deck. Thus, there will be $5$ cards in all three decks.\n\nIn the fourth test case, it is also impossible to make the number of cards in all three decks equal.", "cfid": "2104A"}
{"problem_id": "2104B", "problem_title": "B. Move to the End", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2104/B", "problem_statement": "You are given an array $a$ consisting of $n$ integers.\n\nFor every integer $k$ from $1$ to $n$, you have to do the following:\n\n1. choose an arbitrary element of $a$ and move it to the right end of the array (you can choose the last element, then the array won't change);\n2. print the sum of $k$ last elements of $a$;\n3. move the element you've chosen on the first step to its original position (restore the original array $a$).\n\nFor every $k$, you choose the element which you move so that the value you print is the maximum possible.\n\nCalculate the value you print for every $k$.\n\n### Input\n\nThe first line contains one integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nEach test case consists of two lines:\n\n- the first line contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$);\n- the second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$).\n\nAdditional constraint on the input: the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print $n$ integers. The $i$-th of these integers should be equal to the maximum value you can print if $k=i$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n7\n\n13 5 10 14 8 15 13\n\n6\n\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\n\n1\n\n42\n\n2\n\n7 5\n\n```\n\n#### Output #1\n\n```\n15 28 42 50 63 73 78\n1000000000 2000000000 3000000000 4000000000 5000000000 6000000000\n42\n7 12\n```\n\n### Note\n\nLet's consider the first test case from the statement:\n\n- when $k = 1$, you can move the $6$-th element to the end, the array becomes $[13, 5, 10, 14, 8, 13, 15]$, and the value you print is $15$;\n- when $k = 2$, you can move the $6$-th element to the end, the array becomes $[13, 5, 10, 14, 8, 13, 15]$, and the value you print is $13 + 15 = 28$;\n- when $k = 3$, you can move the $4$-th element to the end, the array becomes $[13, 5, 10, 8, 15, 13, 14]$, and the value you print is $15 + 13 + 14 = 42$;\n- when $k = 4$, you can move the $5$-th element to the end, the array becomes $[13, 5, 10, 14, 15, 13, 8]$, and the value you print is $14 + 15 + 13 + 8 = 50$;\n- when $k = 5$, you can move the $1$-st element to the end, the array becomes $[5, 10, 14, 8, 15, 13, 13]$, and the value you print is $14 + 8 + 15 + 13 + 13 = 63$;\n- when $k = 6$, you can move the $1$-st element to the end, the array becomes $[5, 10, 14, 8, 15, 13, 13]$, and the value you print is $10 + 14 + 8 + 15 + 13 + 13 = 73$;\n- when $k = 7$, you can move the $6$-th element to the end, the array becomes $[13, 5, 10, 14, 8, 13, 15]$, and the value you print is $13 + 5 + 10 + 14 + 8 + 13 + 15 = 78$.", "cfid": "2104B"}
{"problem_id": "2097A", "problem_title": "A. Sports Betting", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2097/A", "problem_statement": "The boarding process for various flights can occur in different ways: either by bus or through a telescopic jet bridge. Every day, exactly one flight is made from St. Petersburg to Minsk, and Vadim decided to demonstrate to the students that he always knows in advance how the boarding will take place.\n\nVadim made a bet with $n$ students, and with the $i$-th student, he made a bet on day $a_i$. Vadim wins the bet if he correctly predicts the boarding process on both day $a_i+1$ and day $a_i+2$.\n\nAlthough Vadim does not know in advance how the boarding will occur, he really wants to win the bet at least with one student and convince him of his predictive abilities. Check if there exists a strategy for Vadim that allows him to guarantee success.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 10^5$) — the number of students Vadim made bets with.\n\nThe second line of each test case contains $n$ integers $a_1, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$) — the days on which Vadim made bets with the students.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, output \"Yes\" (without quotes) if Vadim can guarantee convincing at least one student, and \"No\" otherwise.\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n4\n\n1 1 1 1\n\n3\n\n2 2 2\n\n5\n\n2 4 3 2 4\n\n8\n\n6 3 1 1 5 1 2 6\n\n1\n\n1000000000\n\n```\n\n#### Output #1\n\n```\nYes\nNo\nYes\nNo\nNo\n```\n\n### Note\n\nIn the first test case, Vadim needs to make at least one correct prediction about the boarding process on the second and third days. There are a total of $4$ possible boarding scenarios for these days, so Vadim can give all $4$ students different predictions and guarantee that at least one of them will be correct.\n\nIn the second test case, Vadim only made bets with three students and cannot guarantee that he will provide at least one of them with a correct prediction.", "cfid": "2097A"}
{"problem_id": "2098A", "problem_title": "A. Vadim's Collection", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2098/A", "problem_statement": "We call a phone number a beautiful if it is a string of $10$ digits, where the $i$-th digit from the left is at least $10 - i$. That is, the first digit must be at least $9$, the second at least $8$, $\\ldots$, with the last digit being at least $0$.\n\nFor example, 9988776655 is a beautiful phone number, while 9099999999 is not, since the second digit, which is $0$, is less than $8$.\n\nVadim has a beautiful phone number. He wants to rearrange its digits in such a way that the result is the smallest possible beautiful phone number. Help Vadim solve this problem.\n\nPlease note that the phone numbers are compared as integers.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe only line of each test case contains a single string $s$ of length $10$, consisting of digits. It is guaranteed that $s$ is a beautiful phone number.\n\n### Output\n\nFor each test case, output a single string of length $10$ — the smallest possible beautiful phone number that Vadim can obtain.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n9999999999\n\n9988776655\n\n9988776650\n\n9899999999\n\n```\n\n#### Output #1\n\n```\n9999999999\n9876556789\n9876567890\n9899999999\n```\n\n### Note\n\nIn the first test case, for the first phone number 9999999999, regardless of the rearrangement of digits, the same phone number is obtained.\n\nIn the second test case, for the phone number 9988776655, it can be proven that 9876556789 is the smallest phone number that can be obtained by rearranging the digits.", "cfid": "2098A"}
{"problem_id": "2098B", "problem_title": "B. Sasha and the Apartment Purchase", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2098/B", "problem_statement": "Sasha wants to buy an apartment on a street where the houses are numbered from $1$ to $10^9$ from left to right.\n\nThere are $n$ bars on this street, located in houses with numbers $a_1, a_2, \\ldots, a_n$. Note that there might be multiple bars in the same house, and in this case, these bars are considered distinct.\n\nSasha is afraid that by the time he buys the apartment, some bars may close, but no more than $k$ bars can close.\n\nFor any house with number $x$, define $f(x)$ as the sum of $|x - y|$ over all open bars $y$ (that is, after closing some bars).\n\nSasha can potentially buy an apartment in a house with number $x$ (where $1 \\le x \\le 10^9$) if and only if it is possible to close at most $k$ bars so that after that $f(x)$ becomes minimal among all houses.\n\nDetermine how many different houses Sasha can potentially buy an apartment in.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\leq n \\leq 10^5, 0 \\leq k < n$) — the number of bars and the maximum number of bars that can close.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$) — the house numbers where the bars are located.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, output a single integer — the number of houses where Sasha can buy an apartment.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n4 0\n\n1 2 3 4\n\n5 2\n\n7 6 6 7 1\n\n3 1\n\n6 7 9\n\n6 2\n\n5 1 9 10 13 2\n\n```\n\n#### Output #1\n\n```\n2\n2\n4\n9\n```\n\n### Note\n\nIn the first test case, none of the bars can close, so only houses numbered $2$ and $3$ are suitable. For the house numbered $2$, the sum of distances is $|2 - 1| + |2 - 2| + |2 - 3| + |2 - 4| = 4$, and for the house numbered $3$, the sum of distances is $|3 - 1| + |3 - 2| + |3 - 3| + |3 - 4| = 4$. However, for the house numbered $1$, the sum of distances will be $|1 - 1| + |1 - 2| + |1 - 3| + |1 - 4| = 6$, so the house numbered $1$ is not suitable. It can also be proven that Sasha cannot buy apartments in other houses.\n\nIn the second test case, the suitable houses are numbered $6$ and $7$. For Sasha to choose the house numbered $6$, it is sufficient that none of the bars close. For Sasha to choose the house numbered $7$, the bars in houses $1$ and $6$ can close. Then the bars will be located in houses numbered $6$, $7$, and $7$.", "cfid": "2098B"}
{"problem_id": "2106C", "problem_title": "C. Cherry Bomb", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2106/C", "problem_statement": "Two integer arrays $a$ and $b$ of size $n$ are complementary if there exists an integer $x$ such that $a_i + b_i = x$ over all $1 \\le i \\le n$. For example, the arrays $a = [2, 1, 4]$ and $b = [3, 4, 1]$ are complementary, since $a_i + b_i = 5$ over all $1 \\le i \\le 3$. However, the arrays $a = [1, 3]$ and $b = [2, 1]$ are not complementary.\n\nCow the Nerd thinks everybody is interested in math, so he gave Cherry Bomb two integer arrays $a$ and $b$. It is known that $a$ and $b$ both contain $n$ non-negative integers not greater than $k$.\n\nUnfortunately, Cherry Bomb has lost some elements in $b$. Lost elements in $b$ are denoted with $-1$. Help Cherry Bomb count the number of possible arrays $b$ such that:\n\n- $a$ and $b$ are complementary.\n- All lost elements are replaced with non-negative integers no more than $k$.\n\n### Input\n\nThe first line of the input contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\le n \\le 2 \\cdot 10^5$, $0 \\le k \\le 10^9$) — the size of the arrays and the maximum possible value of their elements.\n\nThe second line contains $n$ integers $a_1, a_2, ..., a_n$ ($0 \\le a_i \\le k$).\n\nThe third line contains $n$ integers $b_1, b_2, ..., b_n$ ($-1 \\le b_i \\le k$). If $b_i = -1$, then this element is missing.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nOutput exactly one integer, the number of ways Cherry Bomb can fill in the missing elements from $b$ such that $a$ and $b$ are complementary.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n3 10\n\n1 3 2\n\n-1 -1 1\n\n5 1\n\n0 1 0 0 1\n\n-1 0 1 0 -1\n\n5 1\n\n0 1 0 0 1\n\n-1 1 -1 1 -1\n\n5 10\n\n1 3 2 5 4\n\n-1 -1 -1 -1 -1\n\n5 4\n\n1 3 2 1 3\n\n1 -1 -1 1 -1\n\n5 4\n\n1 3 2 1 3\n\n2 -1 -1 2 0\n\n5 5\n\n5 0 5 4 3\n\n5 -1 -1 -1 -1\n\n```\n\n#### Output #1\n\n```\n1\n0\n0\n7\n0\n1\n0\n```\n\n### Note\n\nIn the first example, the only way to fill in the missing elements in $b$ such that $a$ and $b$ are complementary is if $b = [2, 0, 1]$.\n\nIn the second example, there is no way to fill in the missing elements of $b$ such that $a$ and $b$ are complementary.\n\nIn the fourth example, some $b$ arrays that are complementary to $a$ are: $[4, 2, 3, 0, 1], [7, 5, 6, 3, 4],$ and $[9, 7, 8, 5, 6]$.", "cfid": "2106C"}
{"problem_id": "2106A", "problem_title": "A. Dr. TC", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2106/A", "problem_statement": "In order to test his patients' intelligence, Dr. TC created the following test.\n\nFirst, he creates a binary string$^{\\text{∗}}$ $s$ having $n$ characters. Then, he creates $n$ binary strings $a_1, a_2, \\ldots, a_n$. It is known that $a_i$ is created by first copying $s$, then flipping the $i$'th character ($\\texttt{1}$ becomes $\\texttt{0}$ and vice versa). After creating all $n$ strings, he arranges them into a grid where the $i$'th row is $a_i$.\n\nFor example,\n\n- If $s = \\texttt{101}$, $a = [\\texttt{001}, \\texttt{111}, \\texttt{100}]$.\n- If $s = \\texttt{0000}$, $a = [\\texttt{1000}, \\texttt{0100}, \\texttt{0010}, \\texttt{0001}]$.\n\nThe patient needs to count the number of $1$s written on the board in less than a second. Can you pass the test?\n\n$^{\\text{∗}}$A binary string is a string that only consists of characters $\\texttt{1}$ and $\\texttt{0}$.\n\n### Input\n\nThe first line of the input consists of a single integer $t$ ($1 \\le t \\le 1000$) — the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 10$) — the length of the binary string $s$.\n\nThe second line of each test case contains a single binary string $s$ of size $n$.\n\n### Output\n\nFor each test case, output a single integer, the number of $\\texttt{1}$s on the board.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3\n\n101\n\n1\n\n1\n\n5\n\n00000\n\n2\n\n11\n\n3\n\n010\n\n```\n\n#### Output #1\n\n```\n5\n0\n5\n2\n4\n```\n\n### Note\n\nThe first example is explained in the statement.\n\nFor the second example, the only string written on the board will be the string $\\texttt{0}$; therefore, the answer is $0$.\n\nIn the third example, the following strings will be written on the board: $[\\texttt{10000}, \\texttt{01000}, \\texttt{00100}, \\texttt{00010}, \\texttt{00001}]$; so there are five $\\texttt{1}$s written on the board.", "cfid": "2106A"}
{"problem_id": "2106B", "problem_title": "B. St. Chroma", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2106/B", "problem_statement": "Given a permutation$^{\\\\text{∗}}$ $p$ of length $n$ that contains every integer from $0$ to $n-1$ and a strip of $n$ cells, St. Chroma will paint the $i$-th cell of the strip in the color $\\\\operatorname{MEX}(p\\_1, p\\_2, ..., p\\_i)$$^{\\\\text{†}}$.\n\nFor example, suppose $p = [1, 0, 3, 2]$. Then, St. Chroma will paint the cells of the strip in the following way: $[0, 2, 2, 4]$.\n\nYou have been given two integers $n$ and $x$. Because St. Chroma loves color $x$, construct a permutation $p$ such that the number of cells in the strip that are painted color $x$ is maximized.\n\n$^{\\text{∗}}$A permutation of length $n$ is a sequence of $n$ elements that contains every integer from $0$ to $n-1$ exactly once. For example, $[0, 3, 1, 2]$ is a permutation, but $[1, 2, 0, 1]$ isn't since $1$ appears twice, and $[1, 3, 2]$ isn't since $0$ does not appear at all.\n\n$^{\\text{†}}$The $\\operatorname{MEX}$ of a sequence is defined as the first non-negative integer that does not appear in it. For example, $\\operatorname{MEX}(1, 3, 0, 2) = 4$, and $\\operatorname{MEX}(3, 1, 2) = 0$.\n\n### Input\n\nThe first line of the input contains a single integer $t$ ($1 \\le t \\le 4000$) — the number of test cases.\n\nThe only line of each test case contains two integers $n$ and $x$ ($1 \\le n \\le 2 \\cdot 10^5$, $0 \\le x \\le n$) — the number of cells and the color you want to maximize.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nOutput a permutation $p$ of length $n$ such that the number of cells in the strip that are painted color $x$ is maximized. If there exist multiple such permutations, output any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n4 2\n\n4 0\n\n5 0\n\n1 1\n\n3 3\n\n1 0\n\n4 3\n\n```\n\n#### Output #1\n\n```\n1 0 3 2\n2 3 1 0\n3 2 4 1 0\n0\n0 2 1\n0\n1 2 0 3```\n\n### Note\n\nThe first example is explained in the statement. It can be shown that $2$ is the maximum amount of cells that can be painted in color $2$. Note that another correct answer would be the permutation $[0, 1, 3, 2]$.\n\nIn the second example, the permutation gives the coloring $[0, 0, 0, 4]$, so $3$ cells are painted in color $0$, which can be shown to be maximum.", "cfid": "2106B"}
{"problem_id": "2106E", "problem_title": "E. Wolf", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2106/E", "problem_statement": "Wolf has found $n$ sheep with tastiness values $p_1, p_2, ..., p_n$ where $p$ is a permutation$^{\\text{∗}}$. Wolf wants to perform binary search on $p$ to find the sheep with tastiness of $k$, but $p$ may not necessarily be sorted. The success of binary search on the range $[l, r]$ for $k$ is represented as $f(l, r, k)$, which is defined as follows:\n\nIf $l > r$, then $f(l, r, k)$ fails. Otherwise, let $m = \\lfloor\\frac{l + r}{2}\\rfloor$, and:\n\n- If $p_m = k$, then $f(l, r, k)$ is successful,\n- If $p_m < k$, then $f(l, r, k) = f(m+1, r, k)$,\n- If $p_m > k$, then $f(l, r, k) = f(l, m-1, k)$.\n\nCow the Nerd decides to help Wolf out. Cow the Nerd is given $q$ queries, each consisting of three integers $l$, $r$, and $k$. Before the search begins, Cow the Nerd may choose a non-negative integer $d$, and $d$ indices $1 \\le i_1 < i_2 < \\ldots < i_d \\le n$ where $p_{i_j} \\neq k$ over all $1 \\leq j \\leq d$. Then, he may re-order the elements $p_{i_1}, p_{i_2}, ..., p_{i_d}$ however he likes.\n\nFor each query, output the minimum integer $d$ that Cow the Nerd must choose so that $f(l, r, k)$ can be successful, or report that it is impossible. Note that the queries are independent and the reordering is not actually performed.\n\n$^{\\text{∗}}$A permutation of length $n$ is an array that contains every integer from $1$ to $n$ exactly once.\n\n### Input\n\nThe first line of the input contains a single integer $t$ $(1 \\le t \\le 10^4)$ — the number of test cases.\n\nThe first line of each test contains two integers $n$ and $q$ $(1 \\le n, q \\le 2 \\cdot 10^5)$ — the length of $p$ and the number of queries respectively.\n\nThe second line contains $n$ integers $p_1, p_2, ..., p_n$ — the tastiness of the $i$-th sheep. It is guaranteed that every integer from $1$ to $n$ appears exactly once in $p$.\n\nThe following $q$ lines contain three integers $l$, $r$, and $k$ $(1 \\le l \\le r \\le n, 1 \\le k \\le n)$ — the range that the binary search will be performed on and the integer being searched for each query.\n\nIt is guaranteed that the sum of $n$ and the sum of $q$ over all cases do not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each query, output the minimum integer $d$ that Cow the Nerd must choose so that $f(l, r, k)$ is successful on a new line. If it is impossible, output $-1$.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n5 3\n\n1 2 3 4 5\n\n1 5 4\n\n1 3 4\n\n3 4 4\n\n7 4\n\n3 1 5 2 7 6 4\n\n3 4 2\n\n2 3 5\n\n1 5 6\n\n1 7 3\n\n2 1\n\n2 1\n\n1 2 1\n\n1 1\n\n1\n\n1 1 1\n\n7 1\n\n3 4 2 5 7 1 6\n\n1 7 1\n\n16 1\n\n16 10 12 6 13 9 14 3 8 11 15 2 7 1 5 4\n\n1 16 4\n\n16 1\n\n14 1 3 15 4 5 6 16 7 8 9 10 11 12 13 2\n\n1 16 14\n\n13 1\n\n12 13 10 9 8 4 11 5 7 6 2 1 3\n\n1 13 2\n\n```\n\n#### Output #1\n\n```\n0 -1 0\n2 0 -1 4\n-1\n0\n-1\n-1\n-1\n-1\n```\n\n### Note\n\nIn the first example, second query: Since $4$ does not exist in the first three elements, it is impossible to find it when searching for it in that range.\n\nIn the second example, on the first query, you may choose the indices $2$, $3$, and swap them so $p = [3, 5, 1, 2, 7, 6, 4]$. Then, $f(3, 4, 2)$ will work as follows:\n\n1. Let $m = \\lfloor \\frac{3 + 4}{2} \\rfloor = 3$. Because $p_3 = 1 < 2$, then $f(3, 4, 2) = f(4, 4, 2)$.\n2. Let $m = \\lfloor \\frac{4 + 4}{2} \\rfloor = 4$. Because $p_4 = 2 = k$, then $f(4, 4, 2)$ is successful. Therefore, $f(3, 4, 2)$ is also successful.\n\nThe total indices chosen were $2$, so the final cost is $2$, which can be shown that is minimum. Note that for this query we can't choose index $4$, since $p_4 = k = 2$.\n\nIn the last query of the second example, we can choose indices $2, 3, 4, 5$ and re-arrange them so $p = [3, 5, 2, 7, 1, 6, 4]$. Then, $f(1, 7, 3)$ is successful.", "cfid": "2106E"}
{"problem_id": "2106D", "problem_title": "D. Flower Boy", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2106/D", "problem_statement": "Flower boy has a garden of $n$ flowers that can be represented as an integer sequence $a_1, a_2, \\dots, a_n$, where $a_i$ is the beauty of the $i$-th flower from the left.\n\nIgor wants to collect exactly $m$ flowers. To do so, he will walk the garden from left to right and choose whether to collect the flower at his current position. The $i$-th flower among ones he collects must have a beauty of at least $b_i$.\n\nIgor noticed that it might be impossible to collect $m$ flowers that satisfy his beauty requirements, so before he starts collecting flowers, he can pick any integer $k$ and use his magic wand to grow a new flower with beauty $k$ and place it anywhere in the garden (between two flowers, before the first flower, or after the last flower). Because his magic abilities are limited, he may do this at most once.\n\nOutput the minimum integer $k$ Igor must pick when he performs the aforementioned operation to ensure that he can collect $m$ flowers. If he can collect $m$ flowers without using the operation, output $0$. If it is impossible to collect $m$ flowers despite using the operation, output $-1$.\n\n### Input\n\nThe first line of the input contains a single integer $t$ $(1 \\le t \\le 10^4)$ — the number of test cases.\n\nThe first line of each test case contains exactly two integers $n$ and $m$ $(1 \\le m \\le n \\le 2 \\cdot 10^5)$ — the number of flowers in the garden and the number of flowers Igor wants to collect, respectively.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, ..., a_n$ $(1 \\le a_i \\le 10^9)$ — where $a_i$ is the beauty of the $i$-th flower from the left in the garden.\n\nThe third line of each test case contains $m$ integers $b_1, b_2, ..., b_m$ $(1 \\le b_i \\le 10^9)$ — where $b_i$ is the minimum beauty the $i$-th flower must have that Igor will collect.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, on a separate line, output the minimum integer $k$ Igor must pick when he performs the aforementioned operation to ensure that he can collect $m$ flowers. If he can collect $m$ flowers without using the operation, output $0$. If it is impossible to collect $m$ flowers despite using the operation, output $-1$.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n9 5\n\n3 5 2 3 3 5 8 1 2\n\n4 6 2 4 6\n\n6 3\n\n1 2 6 8 2 1\n\n5 4 3\n\n5 3\n\n4 3 5 4 3\n\n7 4 5\n\n6 3\n\n8 4 2 1 2 5\n\n6 1 4\n\n5 5\n\n1 2 3 4 5\n\n5 4 3 2 1\n\n6 3\n\n1 2 3 4 5 6\n\n9 8 7\n\n5 5\n\n7 7 6 7 7\n\n7 7 7 7 7\n\n```\n\n#### Output #1\n\n```\n6\n3\n7\n0\n-1\n-1\n7\n```\n\n### Note\n\nIn the first test case, suppose Igor grows a flower of beauty $6$ and places it between the third and the fourth flowers. Then, the garden will look like the following: $[3, 5, 2, 6, 3, 3, 5, 8, 1, 2]$. Then, he can select the second, fourth, sixth, seventh, and eighth flowers with beauties $[5, 6, 3, 5, 8]$.\n\nIn the third test case, he can grow a flower of beauty $7$ and place it before the first flower. The garden will look like the following: $[7, 4, 3, 5, 4, 3]$. Now, he can choose the first, second, and fourth flowers.\n\nIn the fourth test case, Igor does not need to use the operation, so the answer is $0$.\n\nIn the sixth test case, no matter how Igor performs the operation, he cannot collect $3$ flowers such that the $i$-th flower he collects has a beauty of at least $b_i$, therefore the answer is $-1$.", "cfid": "2106D"}
{"problem_id": "2103C", "problem_title": "C. Median Splits", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2103/C", "problem_statement": "The median of an array $b_1, b_2, \\ldots b_m$, written as $\\operatorname{med}(b_1, b_2, \\ldots, b_m)$, is the $\\left\\lceil \\frac{m}{2} \\right\\rceil$-th$^{\\text{∗}}$ smallest element of array $b$.\n\nYou are given an array of integers $a_1, a_2, \\ldots, a_n$ and an integer $k$. You need to determine whether there exists a pair of indices $1 \\le l < r < n$ such that:\n\n\n\n$$\\operatorname{med}(\\operatorname{med}(a_1, a_2, \\ldots, a_l), \\operatorname{med}(a_{l+1}, a_{l+2}, \\ldots, a_r), \\operatorname{med}(a_{r+1}, a_{r+2}, \\ldots, a_n)) \\le k.$$\n\nIn other words, determine whether it is possible to split the array into three contiguous subarrays$^{\\text{†}}$ such that the median of the three subarray medians is less than or equal to $k$.\n\n$^{\\\\text{∗}}$$\\\\lceil x \\\\rceil$ is the ceiling function which returns the least integer greater than or equal to $x$.\n\n$^{\\text{†}}$An array $x$ is a subarray of an array $y$ if $x$ can be obtained from $y$ by the deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $k$ ($3 \\le n \\le 2 \\cdot 10^5$, $1 \\le k \\le 10^9$) — the length of the array $a$ and the constant $k$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$) — the elements of the array $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each testcase, output \"YES\" if such a split exists, and \"NO\" otherwise.\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n3 2\n\n3 2 1\n\n3 1\n\n3 2 1\n\n6 3\n\n8 5 3 1 6 4\n\n8 7\n\n10 7 12 16 3 15 6 11\n\n6 8\n\n7 11 12 4 9 17\n\n3 500000000\n\n1000 1000000000 1000\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nNO\nYES\nYES\nYES\n```\n\n### Note\n\nIn the first and second test case, the only possible partition of the array into three contiguous subarrays is $[3]$, $[2]$, $[1]$. Their respective medians are $3$, $2$, and $1$. The median of the three subarray medians is $\\operatorname{med}(3, 2, 1) = 2$. Therefore, the answer for the first test case is \"YES\" since $2\\le 2$, while the answer for the second test case is \"NO\" since $2 > 1$.\n\nIn the third test case, it can be proven that no partition satisfies the constraints.\n\nIn the fourth test case, one of the partitions satisfying the constraints is $[10, 7]$, $[12, 16, 3, 15]$, $[6, 11]$. The respective medians of subarrays are $7$, $12$, and $6$. The median of the three subarray medians is $\\operatorname{med}(7, 12, 6) = 7 \\le k$, hence this partition satisfies the constraints.\n\nIn the fifth test case, one of the partitions satisfying the constraints is $[7, 11]$, $[12, 4]$, $[9, 17]$. The respective medians of the subarrays are $7$, $4$, and $9$. The median of the three subarray medians is $\\operatorname{med}(7, 4, 9) = 7 \\le k$, hence this partition satisfies the constraints.\n\nIn the sixth test case, the only possible partition of the array into three contiguous subarrays is $[1000]$, $[10^9]$, $[1000]$. The respective medians of the subarrays are $1000$, $10^9$, and $1000$. The median of the three subarray medians is $\\operatorname{med}(1000, 10^9, 1000) = 1000 \\le k$, hence this partition satisfies the constraints.", "cfid": "2103C"}
{"problem_id": "2103B", "problem_title": "B. Binary Typewriter", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2103/B", "problem_statement": "You are given a binary string $s$ of length $n$ and a typewriter with two buttons: 0 and 1. Initially, your finger is on the button 0. You can do the following two operations:\n\n1. Press the button your finger is currently on. This will type out the character that is on the button.\n2. Move your finger to the other button. If your finger is on button 0, move it to button 1, and vice versa.\n\nThe cost of a binary string is defined as the minimum number of operations needed to type the entire string.\n\nBefore typing, you may reverse at most one substring$^{\\text{∗}}$ of $s$. More formally, you can choose two indices $1\\le l\\le r\\le n$, and reverse the substring $s_{l\\ldots r}$, resulting in the new string $s_1s_2\\ldots s_{l-1}s_rs_{r-1}\\ldots s_ls_{r+1}\\ldots s_n$.\n\nYour task is to find the minimum possible cost among all strings obtainable by performing at most one substring reversal on $s$.\n\n$^{\\text{∗}}$A string $a$ is a substring of a string $b$ if $a$ can be obtained from $b$ by the deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1\\le n\\le 2\\cdot 10^5$) — the length of the binary string $s$.\n\nThe second line of each test case contains a binary string $s_1s_2\\ldots s_n$ ($s_i = \\mathtt{0}$ or $s_i = \\mathtt{1}$) — the characters of the binary string $s$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the minimum cost of string $s$ after performing at most one substring reversal.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n3\n\n000\n\n3\n\n111\n\n3\n\n011\n\n3\n\n100\n\n5\n\n10101\n\n19\n\n1101010010011011100\n\n```\n\n#### Output #1\n\n```\n3\n4\n4\n4\n8\n29\n```\n\n### Note\n\nIn the first test case, we can choose not to reverse any substrings. We can do operation $1$ three times to type 000.\n\nIn the second test case, we can choose not to reverse any substrings. We can do operation $2$ to move our finger to button 1. Then, we do operation $1$ three times to type 111.\n\nIn the third test case, we can choose not to reverse any substring. We can do operation $1$ to type 0. Then, we do operation $2$ to move our finger to button 1. Finally, we do operation $1$ two times to type 11, resulting in the final string 011 using only $4$ operations.\n\nIn the fourth test case, we can reverse the substring $s_{1\\ldots 3}$, resulting in the string 001. We can do operation $1$ two times to type 00. Then we do operation $2$ to move our finger to button 1. Finally, we do operation $1$ once to type 1, resulting in the final string 001 using only $4$ operations.\n\nIn the fifth test case, we can reverse the substring $s_{2\\ldots 3}$, resulting in the string 11001. The cost of the string is $8$ as we can do the following sequence of operations:\n\n- Do operation $2$ to move our finger to button 1.\n- Do operation $1$ two times to type 11.\n- Do operation $2$ to move our finger to button 0.\n- Do operation $1$ two times to type 00.\n- Do operation $2$ to move our finger to button 1.\n- Do operation $1$ once to type 1.\n\nIn the sixth test case, we can reverse the substring $s_{5\\ldots 17}$, resulting in the string 1101111011001001000. It can be proven that the minimum number of operations needed to type the binary string is $29$.", "cfid": "2103B"}
{"problem_id": "2103A", "problem_title": "A. Common Multiple", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2103/A", "problem_statement": "You are given an array of integers $a_1, a_2, \\ldots, a_n$. An array $x_1, x_2, \\ldots, x_m$ is beautiful if there exists an array $y_1, y_2, \\ldots, y_m$ such that the elements of $y$ are distinct (in other words, $y_i\\neq y_j$ for all $1 \\le i < j \\le m$), and the product of $x_i$ and $y_i$ is the same for all $1 \\le i \\le m$ (in other words, $x_i\\cdot y_i = x_j\\cdot y_j$ for all $1 \\le i < j \\le m$).\n\nYour task is to determine the maximum size of a subsequence$^{\\text{∗}}$ of array $a$ that is beautiful.\n\n$^{\\text{∗}}$A sequence $b$ is a subsequence of a sequence $a$ if $b$ can be obtained from $a$ by the deletion of several (possibly, zero or all) element from arbitrary positions.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 500$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 100$) — the length of the array $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le n$) — the elements of array $a$.\n\nNote that there are no constraints on the sum of $n$ over all test cases.\n\n### Output\n\nFor each test case, output the maximum size of a subsequence of array $a$ that is beautiful.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3\n\n1 2 3\n\n5\n\n3 1 4 1 5\n\n1\n\n1\n\n```\n\n#### Output #1\n\n```\n3\n4\n1\n```\n\n### Note\n\nIn the first test case, the entire array $a = [1, 2, 3]$ is already beautiful. A possible array $y$ is $[6, 3, 2]$, which is valid since the elements of $y$ are distinct, and $1\\cdot 6 = 2\\cdot 3 = 3\\cdot 2$.\n\nIn the second test case, the subsequence $[3, 1, 4, 5]$ is beautiful. A possible array $y$ is $[20, 60, 15, 12]$. It can be proven that the entire array $a = [3, 1, 4, 1, 5]$ is not beautiful, so the maximum size of a subsequence of array $a$ that is beautiful is $4$.", "cfid": "2103A"}
{"problem_id": "2096B", "problem_title": "B. Wonderful Gloves", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2096/B", "problem_statement": "You are the proud owner of many colorful gloves, and you keep them in a drawer. Each glove is in one of $n$ colors numbered $1$ to $n$. Specifically, for each $i$ from $1$ to $n$, you have $l_i$ left gloves and $r_i$ right gloves with color $i$.\n\nUnfortunately, it's late at night, so you can't see any of your gloves. In other words, you will only know the color and the type (left or right) of a glove after you take it out of the drawer.\n\nA matching pair of gloves with color $i$ consists of exactly one left glove and one right glove with color $i$. Find the minimum number of gloves you need to take out of the drawer to guarantee that you have at least $k$ matching pairs of gloves with different colors.\n\nFormally, find the smallest positive integer $x$ such that:\n\n- For any set of $x$ gloves you take out of the drawer, there will always be at least $k$ matching pairs of gloves with different colors.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$, $k$ ($1 \\leq k \\leq n \\leq 2 \\cdot 10^5$) — the number of different colors, and the minimum number of required matching pairs of gloves.\n\nThe second line of each test case contains $n$ integers $l_1, l_2, \\ldots, l_n$ ($1 \\leq l_i \\leq 10^9$) — the number of left gloves with color $i$ for each $i$ from $1$ to $n$.\n\nThe third line of each test case contains $n$ integers $r_1, r_2, \\ldots, r_n$ ($1 \\leq r_i \\leq 10^9$) — the number of right gloves with color $i$ for each $i$ from $1$ to $n$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the minimum number of gloves you need to take out of the drawer.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3 3\n\n1 1 1\n\n1 1 1\n\n1 1\n\n100\n\n1\n\n3 2\n\n100 1 1\n\n200 1 1\n\n5 2\n\n97 59 50 87 36\n\n95 77 33 13 74\n\n10 6\n\n97 59 50 87 36 95 77 33 13 74\n\n91 14 84 33 54 89 68 34 14 15\n\n```\n\n#### Output #1\n\n```\n6\n101\n303\n481\n1010\n```\n\n### Note\n\nIn the first test case, you must take out all of the gloves, so the answer is $6$.\n\nIn the second test case, the answer is $101$. If you take out $100$ gloves or fewer, then it is possible that all of them are left gloves, which means you won't have a matching pair of gloves.\n\nIn the third test case, the answer is $303$. If you only take out $302$ gloves, then one possible scenario is as follows:\n\n- Color $1$: $100$ left gloves, $200$ right gloves\n- Color $2$: $1$ left glove, $0$ right gloves\n- Color $3$: $0$ left gloves, $1$ right glove\n\nYou only have multiple matching pairs of gloves with color $1$. So you won't have at least $2$ matching pairs of gloves with different colors.", "cfid": "2096B"}
{"problem_id": "2096A", "problem_title": "A. Wonderful Sticks", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2096/A", "problem_statement": "You are the proud owner of $n$ sticks. Each stick has an integer length from $1$ to $n$. The lengths of the sticks are distinct.\n\nYou want to arrange the sticks in a row. There is a string $s$ of length $n - 1$ that describes the requirements of the arrangement.\n\nSpecifically, for each $i$ from $1$ to $n - 1$:\n\n- If $s_i = \\texttt{<}$, then the length of the stick at position $i + 1$ must be smaller than all sticks before it;\n- If $s_i = \\texttt{>}$, then the length of the stick at position $i + 1$ must be larger than all sticks before it.\n\nFind any valid arrangement of sticks. We can show that an answer always exists.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 500$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n \\le 100$) — the number of sticks.\n\nThe second line of each test case contains a single string $s$ of length $n - 1$ consisting of characters $\\texttt{<}$ and $\\texttt{>}$ — describing the requirements of the arrangement.\n\n### Output\n\nFor each test case, output $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq n$, the $a_i$ are distinct) — the lengths of the sticks in order. If there are multiple solutions, print any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n2\n\n<\n\n5\n\n<<><\n\n2\n\n>\n\n3\n\n<>\n\n7\n\n><>>><\n\n```\n\n#### Output #1\n\n```\n2 1\n4 3 2 5 1\n1 2\n2 1 3\n3 4 2 5 6 7 1\n```\n\n### Note\n\nFor the first test case, the requirements of the arrangement are as follows:\n\n- $s_1 = \\texttt{<}$, which means $a_2$ is smaller than $a_1$.\n\nThus, one possible arrangement is $[2, 1]$.\n\nFor the second test case, the requirements of the arrangement are as follows:\n\n- $s_1 = \\texttt{<}$, which means $a_2$ is smaller than $a_1$;\n- $s_2 = \\texttt{<}$, which means $a_3$ is smaller than $a_1$ and $a_2$;\n- $s_3 = \\texttt{>}$, which means $a_4$ is larger than $a_1$, $a_2$, and $a_3$;\n- $s_4 = \\texttt{<}$, which means $a_5$ is smaller than $a_1$, $a_2$, $a_3$, and $a_4$.\n\nThus, one possible arrangement is $[4, 3, 2, 5, 1]$.", "cfid": "2096A"}
{"problem_id": "2096C", "problem_title": "C. Wonderful City", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2096/C", "problem_statement": "You are the proud leader of a city in Ancient Berland. There are $n^2$ buildings arranged in a grid of $n$ rows and $n$ columns. The height of the building in row $i$ and column $j$ is $h_{i, j}$.\n\nThe city is beautiful if no two adjacent by side buildings have the same height. In other words, it must satisfy the following:\n\n- There does not exist a position $(i, j)$ ($1 \\leq i \\leq n$, $1 \\leq j \\leq n - 1$) such that $h_{i, j} = h_{i, j + 1}$.\n- There does not exist a position $(i, j)$ ($1 \\leq i \\leq n - 1$, $1 \\leq j \\leq n$) such that $h_{i, j} = h_{i + 1, j}$.\n\nThere are $n$ workers at company A, and $n$ workers at company B. Each worker can be hired at most once.\n\nIt costs $a_i$ coins to hire worker $i$ at company A. After hiring, worker $i$ will:\n\n- Increase the heights of all buildings in row $i$ by $1$. In other words, increase $h_{i, 1}, h_{i, 2}, \\ldots, h_{i, n}$ by $1$.\n\nIt costs $b_j$ coins to hire worker $j$ at company B. After hiring, worker $j$ will:\n\n- Increase the heights of all buildings in column $j$ by $1$. In other words, increase $h_{1, j}, h_{2, j}, \\ldots, h_{n, j}$ by $1$.\n\nFind the minimum number of coins needed to make the city beautiful, or report that it is impossible.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 100$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n \\le 1000$) — the size of the grid.\n\nThe $i$-th of the next $n$ lines of each test case contains $n$ integers $h_{i, 1}, h_{i, 2}, \\ldots, h_{i, n}$ ($1 \\le h_{i, j} \\le 10^9$) — the heights of the buildings in row $i$.\n\nThe next line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$) — the costs of hiring the workers at company A.\n\nThe next line of each test case contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($1 \\le b_j \\le 10^9$) — the costs of hiring the workers at company B.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $1000$.\n\n### Output\n\nFor each test case, output a single integer — the minimum number of coins needed, or $-1$ if it is impossible.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2\n\n1 2\n\n2 1\n\n100 100\n\n100 100\n\n4\n\n1 2 1 2\n\n3 2 1 2\n\n1 2 1 1\n\n1 3 1 2\n\n1 2 3 4\n\n5 6 7 8\n\n3\n\n1 2 2\n\n2 2 1\n\n2 1 1\n\n100 100 100\n\n100 100 100\n\n6\n\n8 7 2 8 4 8\n\n7 7 9 7 1 1\n\n8 3 1 1 8 5\n\n6 8 3 1 1 4\n\n1 4 5 1 9 6\n\n7 1 1 6 8 2\n\n11 23 20 79 30 15\n\n15 83 73 57 34 63\n\n```\n\n#### Output #1\n\n```\n0\n14\n-1\n183\n```\n\n### Note\n\nFor the first test case, we can see that the city is already beautiful. Thus, the answer is $0$.\n\nFor the second test case, we can hire worker $2$ from company A, worker $4$ from company A, and worker $4$ from company B:\n\n$1\n\n$$2$$\n\n1\n\n$$\\color{red}2$$\n\nimplies\n\n$$1$$\n\n2\n\n$$1$$\n\ncolor{red}3\n\n$$\\color{red}3$$\n\ncolor{red}2\n\n$$\\color{red}1$$\n\ncolor{red}2\n\n$$\\color{red}4$$\n\ncolor{red}3\n\n$$\\color{red}2$$\n\ncolor{red}4\n\n$$1$$\n\n2\n\n$$1$$\n\ncolor{red}1\n\n$$1$$\n\n2\n\n$$1$$\n\ncolor{red}2\n\n$$\\color{red}1$$\n\ncolor{red}3\n\n$$\\color{red}1$$\n\ncolor{red}2\n\n$$\\color{red}2$$\n\ncolor{red}4\n\n$$\\color{red}2$$\n\ncolor{red}4$\n\nThe cost of hiring the workers is $2 + 4 + 8 = 14$. This is the minimum possible cost.\n\nFor the third test case, no matter what we do, it is impossible to make the city beautiful. Thus, the answer is $-1$.", "cfid": "2096C"}
{"problem_id": "2094D", "problem_title": "D. Tung Tung Sahur", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2094/D", "problem_statement": "You have two drums in front of you: a left drum and a right drum. A hit on the left can be recorded as \"L\", and a hit on the right as \"R\".\n\nThe strange forces that rule this world are fickle: sometimes, a blow sounds once, and sometimes it sounds twice. Therefore, a hit on the left drum could have sounded as either \"L\" or \"LL\", and a hit on the right drum could have sounded as either \"R\" or \"RR\".\n\nThe sequence of hits made is recorded in the string $p$, and the sounds heard are in the string $s$. Given $p$ and $s$, determine whether it is true that the string $s$ could have been the result of the hits from the string $p$.\n\nFor example, if $p=$\"LR\", then the result of the hits could be any of the strings \"LR\", \"LRR\", \"LLR\", and \"LLRR\", but the strings \"LLLR\" or \"LRL\" cannot.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) – the number of independent test cases.\n\nThe first line of each test case contains the string $p$ ($1 \\le |p| \\le 2 \\cdot 10^5$) consisting only of the characters \"R\" and \"L\", where $|p|$ denotes the length of the string $p$.\n\nThe second line of each test case contains the string $s$ ($1 \\le |p| \\le |s| \\le 2 \\cdot 10^5$) consisting only of the characters \"R\" and \"L\".\n\nIt is guaranteed that the sum of $|s|$ does not exceed $2\\cdot 10^5$ across all test cases.\n\n### Output\n\nFor each set of input data, output \"YES\" if $s$ can be the heard sound, and \"NO\" otherwise. You may output in any case.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\nR\n\nRR\n\nLRLR\n\nLRLR\n\nLR\n\nLLLR\n\nLLLLLRL\n\nLLLLRRLL\n\nLLRLRLRRL\n\nLLLRLRRLLRRRL\n\n```\n\n#### Output #1\n\n```\nYES\nYES\nNO\nNO\nYES\n```", "cfid": "2094D"}
{"problem_id": "2094F", "problem_title": "F. Trulimero Trulicina", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2094/F", "problem_statement": "Trulicina gives you integers $n$, $m$, and $k$. It is guaranteed that $k\\geq 2$ and $n\\cdot m\\equiv 0 \\pmod{k}$.\n\nOutput a $n$ by $m$ grid of integers such that each of the following criteria hold:\n\n- Each integer in the grid is between $1$ and $k$, inclusive.\n- Each integer from $1$ to $k$ appears an equal number of times.\n- No two cells that share an edge have the same integer.\n\nIt can be shown that such a grid always exists. If there are multiple solutions, output any.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe first line of each test case contains three integers $n$, $m$, and $k$ ($2 \\leq n\\cdot m\\leq 2\\cdot 10^5, 2\\leq k\\leq n\\cdot m, n\\cdot m\\equiv 0 \\pmod{k})$.\n\nIt is guaranteed that the sum of $n\\cdot m$ over all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, output $n$ lines, each containing $m$ integers that satisfy the criteria. If there are multiple solutions, output any.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2 2 2\n\n3 4 6\n\n5 5 25\n\n```\n\n#### Output #1\n\n```\n1 2\n2 1\n1 6 1 6\n2 5 2 5\n3 4 3 4\n17 2 12 25 14\n3 1 6 19 11\n8 20 23 24 4\n9 10 5 13 21\n22 7 15 18 16\n```", "cfid": "2094F"}
{"problem_id": "2094A", "problem_title": "A. Trippi Troppi", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2094/A", "problem_statement": "Trippi Troppi resides in a strange world. The ancient name of each country consists of three strings. The first letter of each string is concatenated to form the country's modern name.\n\nGiven the country's ancient name, please output the modern name.\n\n### Input\n\nThe first line contains an integer $t$ – the number of independent test cases ($1 \\leq t \\leq 100$).\n\nThe following $t$ lines each contain three space-separated strings. Each string has a length of no more than $10$, and contains only lowercase Latin characters.\n\n### Output\n\nFor each test case, output the string formed by concatenating the first letter of each word.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\nunited states america\n\noh my god\n\ni cant lie\n\nbinary indexed tree\n\nbelieve in yourself\n\nskibidi slay sigma\n\ngod bless america\n\n```\n\n#### Output #1\n\n```\nusa\nomg\nicl\nbit\nbiy\nsss\ngba\n```", "cfid": "2094A"}
{"problem_id": "2094B", "problem_title": "B. Bobritto Bandito", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2094/B", "problem_statement": "In Bobritto Bandito's home town of residence, there are an infinite number of houses on an infinite number line, with houses at $\\ldots, -2, -1, 0, 1, 2, \\ldots$. On day $0$, he started a plague by giving an infection to the unfortunate residents of house $0$. Each succeeding day, the plague spreads to exactly one healthy household that is next to an infected household. It can be shown that each day the infected houses form a continuous segment.\n\nLet the segment starting at the $l$-th house and ending at the $r$-th house be denoted as $[l, r]$. You know that after $n$ days, the segment $[l, r]$ became infected. Find any such segment $[l', r']$ that could have been infected on the $m$-th day ($m \\le n$).\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 100$) – the number of independent test cases.\n\nThe only line of each test case contains four integers $n$, $m$, $l$, and $r$ ($1 \\leq m\\leq n \\leq 2000, -n \\leq l \\leq 0 \\leq r \\leq n, r-l=n$).\n\n### Output\n\nFor each test case, output two integers $l'$ and $r'$ on a new line. If there are multiple solutions, output any.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n4 2 -2 2\n\n4 1 0 4\n\n3 3 -1 2\n\n9 8 -6 3\n\n```\n\n#### Output #1\n\n```\n-1 1\n0 1\n-1 2\n-5 3\n```\n\n### Note\n\nIn the first test case, it is possible that on the $1$-st, $2$-nd, and $3$-rd days the interval of houses affected is $[-1,0]$, $[-1,1]$, $[-2,1]$. Therefore, $[-1,1]$ is a valid output.", "cfid": "2094B"}
{"problem_id": "2094G", "problem_title": "G. Chimpanzini Bananini", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2094/G", "problem_statement": "Chimpanzini Bananini stands on the brink of a momentous battle—one destined to bring finality.\n\nFor an arbitrary array $b$ of length $m$, let's denote the rizziness of the array to be $\\sum_{i=1}^mb_i\\cdot i=b_1\\cdot 1+b_2\\cdot 2+b_3\\cdot 3+\\ldots + b_m\\cdot m$.\n\nChimpanzini Bananini gifts you an empty array. There are three types of operations you can perform on it.\n\n1. Perform a cyclic shift on the array. That is, the array $[a_1, a_2, \\ldots, a_n]$ becomes $[a_n, a_1, a_2, \\ldots, a_{n-1}].$\n2. Reverse the entire array. That is, the array $[a_1, a_2, \\ldots, a_n]$ becomes $[a_n, a_{n-1}, \\ldots, a_1].$\n3. Append an element to the end of the array. The array $[a_1, a_2, \\ldots, a_n]$ becomes $[a_1, a_2, \\ldots, a_n, k]$ after appending $k$ to the end of the array.\n\nAfter each operation, you are interested in calculating the rizziness of your array.\n\nNote that all operations are persistent. This means that each operation modifies the array, and subsequent operations should be applied to the current state of the array after the previous operations.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe first line of the input contains an integer $q$ ($1 \\leq q \\leq 2\\cdot 10^5$) — the number of operations you perform on your array.\n\nThe following $q$ lines first contain a single integer $s$ ($1 \\leq s \\leq 3$) — the operation type.\n\n- If $s=1$, then the cyclic shift operation should be performed.\n- If $s=2$, then the reversal operation should be performed.\n- If $s=3$, then the line will contain an additional integer $k$ ($1 \\leq k \\leq 10^6$), denoting the element appended to the back of the array.\n\nIt is guaranteed that the sum of $q$ will not exceed $2\\cdot 10^5$ over all test cases. Additionally, it is guaranteed that the first operation on each test case will be one with $s=3$.\n\n### Output\n\nFor each test case, output $q$ lines, outputting the rizziness of your array after each operation.\n\n### Example\n\n#### Input #1\n\n```\n\n1\n\n13\n\n3 1\n\n3 2\n\n3 3\n\n1\n\n3 4\n\n2\n\n3 5\n\n1\n\n3 6\n\n2\n\n3 7\n\n2\n\n1\n\n```\n\n#### Output #1\n\n```\n1\n5\n14\n11\n27\n23\n48\n38\n74\n73\n122\n102\n88\n```\n\n### Note\n\nThe first six states of the array:\n\n- $[1]$\n- $[1, 2]$\n- $[1, 2, 3]$\n- $[3, 1, 2]$\n- $[3, 1, 2, 4]$\n- $[4, 2, 1, 3]$", "cfid": "2094G"}
{"problem_id": "2094E", "problem_title": "E. Boneca Ambalabu", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2094/E", "problem_statement": "Boneca Ambalabu gives you a sequence of $n$ integers $a_1,a_2,\\ldots,a_n$.\n\nOutput the maximum value of $(a_k\\oplus a_1)+(a_k\\oplus a_2)+\\ldots+(a_k\\oplus a_n)$ among all $1 \\leq k \\leq n$. Note that $\\oplus$ denotes the [bitwise XOR operation](https://en.wikipedia.org/wiki/Bitwise_operation#XOR).\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) – the number of independent test cases.\n\nThe first line of each test case contains an integer $n$ ($1 \\leq n\\leq 2\\cdot 10^5$) – the length of the array.\n\nThe second line of each test case contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($0 \\leq a_i < 2^{30}$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, output the maximum value on a new line.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3\n\n18 18 18\n\n5\n\n1 2 4 8 16\n\n5\n\n8 13 4 5 15\n\n6\n\n625 676 729 784 841 900\n\n1\n\n1\n\n```\n\n#### Output #1\n\n```\n0\n79\n37\n1555\n0\n```\n\n### Note\n\nIn the first test case, the best we can do is $(18\\oplus18)+(18\\oplus18)+(18\\oplus18)=0$.\n\nIn the second test case, we choose $k=5$ to get $(16\\oplus1)+(16\\oplus2)+(16\\oplus4)+(16\\oplus8)+(16\\oplus16)=79$.", "cfid": "2094E"}
{"problem_id": "2094C", "problem_title": "C. Brr Brrr Patapim", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2094/C", "problem_statement": "Brr Brrr Patapim is trying to learn of Tiramisù's secret passcode, which is a permutation$^{\\text{∗}}$ of $2\\cdot n$ elements. To help Patapim guess, Tiramisù gave him an $n\\times n$ grid $G$, in which $G_{i,j}$ (or the element in the $i$-th row and $j$-th column of the grid) contains $p_{i+j}$, or the $(i+j)$-th element in the permutation.\n\nGiven this grid, please help Patapim crack the forgotten code. It is guaranteed that the permutation exists, and it can be shown that the permutation can be determined uniquely.\n\n$^{\\text{∗}}$A permutation of $m$ integers is a sequence of $m$ integers which contains each of $1,2,\\ldots,m$ exactly once. For example, $[1, 3, 2]$ and $[2, 1]$ are permutations, while $[1, 2, 4]$ and $[1, 3, 2, 3]$ are not.\n\n### Input\n\nThe first line contains an integer $t$ — the number of test cases ($1 \\leq t \\leq 200$).\n\nThe first line of each test case contains an integer $n$ ($1 \\leq n \\leq 800$).\n\nEach of the following $n$ lines contains $n$ integers, giving the grid $G$. The first of these lines contains $G_{1,1}, G_{1,2},\\ldots,G_{1,n}$; the second of these lines contains $G_{2,1}, G_{2,2},\\ldots,G_{2,n}$, and so on. ($1 \\leq G_{i,j} \\leq 2\\cdot n$).\n\nIt is guaranteed that the grid encodes a valid permutation, and the sum of $n$ over all test cases does not exceed $800$.\n\n### Output\n\nFor each test case, please output $2n$ numbers on a new line: $p_1,p_2,\\ldots,p_{2n}$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3\n\n1 6 2\n\n6 2 4\n\n2 4 3\n\n1\n\n1\n\n2\n\n2 3\n\n3 4\n\n```\n\n#### Output #1\n\n```\n5 1 6 2 4 3\n2 1\n1 2 3 4\n```", "cfid": "2094C"}
{"problem_id": "2093E", "problem_title": "E. Min Max MEX", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2093/E", "problem_statement": "You are given an array $a$ of length $n$ and a number $k$.\n\nA subarray is defined as a sequence of one or more consecutive elements of the array. You need to split the array $a$ into $k$ non-overlapping subarrays $b_1, b_2, \\dots, b_k$ such that the union of these subarrays equals the entire array. Additionally, you need to maximize the value of $x$, which is equal to the minimum MEX$(b_i)$, for $i \\in [1..k]$.\n\nMEX$(v)$ denotes the smallest non-negative integer that is not present in the array $v$.\n\n### Input\n\nThe first line contains an integer $t$ $(1\\leq t\\leq 10^4)$  — the number of test cases.\n\nThe first line of each test case contains two integers $n$, $k$ $(1\\leq k \\leq n \\leq 2 \\cdot 10^5)$  — the length of the array and the number of segments to split the array into.\n\nThe second line of each test case contains $n$ integers $a_i$ $(0\\leq a_i\\leq 10^9)$  — the elements of the array.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each query, output a single number  — the maximum value $x$ such that there exists a partition of the array $a$ into $k$ subarrays where the minimum MEX equals $x$.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n1 1\n\n0\n\n5 1\n\n0 1 3 2 4\n\n6 2\n\n2 1 0 0 1 2\n\n5 5\n\n0 0 0 0 0\n\n5 2\n\n2 3 4 5 6\n\n6 2\n\n0 0 1 1 2 2\n\n4 4\n\n1 0 0 0\n\n```\n\n#### Output #1\n\n```\n1\n5\n3\n1\n0\n1\n0\n```", "cfid": "2093E"}
{"problem_id": "2093C", "problem_title": "C. Simple Repetition", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2093/C", "problem_statement": "Pasha loves prime numbers$^{\\text{∗}}$! Once again, in his attempts to find a new way to generate prime numbers, he became interested in an algorithm he found on the internet:\n\n- To obtain a new number $y$, repeat $k$ times the decimal representation of the number $x$ (without leading zeros).\n\nFor example, for $x = 52$ and $k = 3$, we get $y = 525252$, and for $x = 6$ and $k = 7$, we get $y = 6666666$.\n\nPasha really wants the resulting number $y$ to be prime, but he doesn't yet know how to check the primality of numbers generated by this algorithm. Help Pasha and tell him whether $y$ is prime!\n\n$^{\\text{∗}}$An integer $x$ is considered prime if it has exactly $2$ distinct divisors: $1$ and $x$. For example, $13$ is prime because it has only $2$ divisors: $1$ and $13$. Note that the number $1$ is not prime, as it has only one divisor.\n\n### Input\n\nEach test consists of several sets of input data. The first line contains a single integer $t$ ($1 \\leq t \\leq 100$) — the number of sets of input data. The following lines describe the sets of input data.\n\nThe first and only line of each data set contains two integers: $x$ and $k$ ($1 \\leq x \\leq 10^9$, $1 \\leq k \\leq 7$).\n\n### Output\n\nFor each set of input data, output «YES» (without quotes) if the resulting number $y$ will be prime, and «NO» otherwise.\n\nYou may output «Yes» and «No» in any case (for example, the strings «yES», «yes», and «Yes» will be recognized as positive answers).\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n52 3\n\n6 7\n\n7 1\n\n1 7\n\n```\n\n#### Output #1\n\n```\nNO\nNO\nYES\nNO\n```", "cfid": "2093C"}
{"problem_id": "2093F", "problem_title": "F. Hackers and Neural Networks", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2093/F", "problem_statement": "Hackers are once again trying to create entertaining phrases using the output of neural networks. This time, they want to obtain an array of strings $a$ of length $n$.\n\nInitially, they have an array $c$ of length $n$, filled with blanks, which are denoted by the symbol $*$. Thus, if $n=4$, then initially $c=[*,*,*,*]$.\n\nThe hackers have access to $m$ neural networks, each of which has its own version of the answer to their request – an array of strings $b_i$ of length $n$.\n\nThe hackers are trying to obtain the array $a$ from the array $c$ using the following operations:\n\n1. Choose a neural network $i$, which will perform the next operation on the array $c$: it will select a randomblank, for example, at position $j$, and replace $c_j$ with $b_{i, j}$.\nFor example, if the first neural network is chosen and $c = [*, \\text{«like»}, *]$, and $b_1 = [\\text{«I»}, \\text{«love»}, \\text{«apples»}]$, then after the operation with the first neural network, $c$ may become either $[\\text{«I»}, \\text{«like»}, *]$ or $[*, \\text{«like»}, \\text{«apples»}]$.\n\n2. Choose position $j$ and replace $c_j$ with a blank.\n\nUnfortunately, because of the way hackers access neural networks, they will only be able to see the modified array $c$ after all operations are completed, so they will have to specify the entire sequence of operations in advance.\n\nHowever, the random behavior of the neural networks may lead to the situation where the desired array is never obtained, or obtaining it requires an excessive number of operations.\n\nTherefore, the hackers are counting on your help in choosing a sequence of operations that will guarantee the acquisition of array $a$ in the minimum number of operations.\n\nMore formally, if there exists a sequence of operations that can guarantee obtaining array $a$ from array $c$, then among all such sequences, find the one with the minimum number of operations, and output the number of operations in it.\n\nIf there is no sequence of operations that transforms array $c$ into array $a$, then output $-1$.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 1000$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\le n, m \\le 500$) — the length of the original array $a$ and the number of neural networks, respectively.\n\nThe second line of each test case contains the array $a$, consisting of $n$ strings $a_i$ ($1 \\le |a_i| \\le 10$), separated by spaces.\n\nThe next $m$ lines of each test case contain the arrays $b_i$ — one in each line, consisting of $n$ strings $b_{i, j}$ ($1 \\le |b_{i,j}| \\le 10$), separated by spaces.\n\nIt is guaranteed that the sum of $|a_i|$ and $|b_{i, j}|$ across all test cases does not exceed $2 \\cdot 10^5$, and that the sum of $n \\cdot m$ across all test cases also does not exceed $2 \\cdot 10^5$.\n\nIt is guaranteed that the input strings consist only of characters from the Latin alphabet in both lowercase and uppercase.\n\nNote that the length of each individual input string does not exceed $10$.\n\n### Output\n\nOutput $t$ numbers — one number for each test case, each on a separate line.\n\nIf there exists a sequence of operations that guarantees obtaining array $a$ from the $i$-th test case, then the $i$-th number is the number of operations in the minimum such sequence.\n\nOtherwise, for the $i$-th number, output $-1$.\n\n### Example\n\n#### Input #1\n\n```\n4\n3 3\nI love apples\nHe likes apples\nI love cats\nThey love dogs\n3 2\nIcy wake up\nwake Icy up\nwake up Icy\n4 3\nc o D E\nc o D s\nc O l S\nc o m E\n4 5\na s k A\nd s D t\nO R i A\na X b Y\nb a k A\nu s k J\n```\n\n#### Output #1\n\n```\n5\n-1\n6\n8\n```", "cfid": "2093F"}
{"problem_id": "2093B", "problem_title": "B. Expensive Number", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2093/B", "problem_statement": "The cost of a positive integer $n$ is defined as the result of dividing the number $n$ by the sum of its digits.\n\nFor example, the cost of the number $104$ is $\\frac{104}{1 + 0 + 4} = 20.8$, and the cost of the number $111$ is $\\frac{111}{1 + 1 + 1} = 37$.\n\nYou are given a positive integer $n$ that does not contain leading zeros. You can remove any number of digits from the number $n$ (including none) so that the remaining number contains at least one digit and is strictly greater than zero. The remaining digits cannot be rearranged. As a result, you may end up with a number that has leading zeros.\n\nFor example, you are given the number $103554$. If you decide to remove the digits $1$, $4$, and one digit $5$, you will end up with the number $035$, whose cost is $\\frac{035}{0 + 3 + 5} = 4.375$.\n\nWhat is the minimum number of digits you need to remove from the number so that its cost becomes the minimum possible?\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 1000$) — the number of test cases.\n\nThe only line of each test case contains a positive integer $n$ ($1 \\leq n < 10^{100}$) without leading zeros.\n\n### Output\n\nFor each test case, output one integer on a new line — the number of digits that need to be removed from the number so that its cost becomes minimal.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n666\n\n13700\n\n102030\n\n7\n\n```\n\n#### Output #1\n\n```\n2\n4\n3\n0\n```", "cfid": "2093B"}
{"problem_id": "2093A", "problem_title": "A. Ideal Generator", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2093/A", "problem_statement": "We call an array $a$, consisting of $k$ positive integers, palindromic if $[a_1, a_2, \\dots, a_k] = [a_k, a_{k-1}, \\dots, a_1]$. For example, the arrays $[1, 2, 1]$ and $[5, 1, 1, 5]$ are palindromic, while the arrays $[1, 2, 3]$ and $[21, 12]$ are not.\n\nWe call a number $k$ an ideal generator if any integer $n$ ($n \\ge k$) can be represented as the sum of the elements of a palindromic array of length exactly $k$. Each element of the array must be greater than $0$.\n\nFor example, the number $1$ is an ideal generator because any natural number $n$ can be generated using the array $[n]$. However, the number $2$ is not an ideal generator — there is no palindromic array of length $2$ that sums to $3$.\n\nDetermine whether the given number $k$ is an ideal generator.\n\n### Input\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 1000$) — the number of test cases.\n\nThe first and only line of each test case contains one integer $k$ ($1 \\le k \\le 1000$).\n\n### Output\n\nFor each number $k$, you need to output the word \"YES\" if it is an ideal generator, or \"NO\" otherwise.\n\nYou may output \"Yes\" and \"No\" in any case (for example, the strings \"yES\", \"yes\", and \"Yes\" will be recognized as a positive answer).\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n1\n\n2\n\n3\n\n73\n\n1000\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nYES\nYES\nNO\n```", "cfid": "2093A"}
{"problem_id": "2093D", "problem_title": "D. Skibidi Table", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2093/D", "problem_statement": "Vadim loves filling square tables with integers. But today he came up with a way to do it for fun! Let's take, for example, a table of size $2 \\times 2$, with rows numbered from top to bottom and columns numbered from left to right. We place $1$ in the top left cell, $2$ in the bottom right, $3$ in the bottom left, and $4$ in the top right. That's all he needs for fun!\n\nFortunately for Vadim, he has a table of size $2^n \\times 2^n$. He plans to fill it with integers from $1$ to $2^{2n}$ in ascending order. To fill such a large table, Vadim will divide it into $4$ equal square tables, filling the top left one first, then the bottom right one, followed by the bottom left one, and finally the top right one. Each smaller table will be divided into even smaller ones as he fills them until he reaches tables of size $2 \\times 2$, which he will fill in the order described above.\n\nNow Vadim is eager to start filling the table, but he has $q$ questions of two types:\n\n- what number will be in the cell at the $x$-th row and $y$-th column;\n- in which cell coordinates will the number $d$ be located.\n\nHelp answer Vadim's questions.\n\n### Input\n\nEach test consists of several sets of input data. The first line contains a single integer $t$ $(1 \\leq t \\leq 10)$  — the number of sets of input data. The following lines describe the input data sets.\n\nIn the first line of each data set, there is an integer $n$, describing the size of the table $(1 \\le n \\le 30)$.\n\nIn the second line of each data set, there is an integer $q$  — the number of questions $(1 \\le q \\le 20\\,000)$.\n\nIn the following $q$ lines of each data set, the questions are described in the following formats:\n\n- -\\> x y  — What number will be in the cell $(1 \\le x, y \\le 2^n)$;\n- <\\- d  — In which cell coordinates will the number $(1 \\le d \\le 2^{2n})$ be located.\n\nIt is guaranteed that the sum of $q$ over all test cases does not exceed $20\\,000$.\n\n### Output\n\nOutput the answers to each question on a separate line.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n2\n\n5\n\n-\\> 4 3\n\n<\\- 15\n\n<\\- 4\n\n-\\> 3 1\n\n-\\> 1 3\n\n1\n\n8\n\n-\\> 1 1\n\n-\\> 1 2\n\n-\\> 2 1\n\n-\\> 2 2\n\n<\\- 1\n\n<\\- 2\n\n<\\- 3\n\n<\\- 4\n\n```\n\n#### Output #1\n\n```\n7\n2 3\n1 2\n9\n13\n1\n4\n3\n2\n1 1\n2 2\n2 1\n1 2\n```\n\n### Note\n\nThis is how the filled table from the first example looks:\n\n![](https://espresso.codeforces.com/da748157aec3b2f6a243518e84d255f6a0b8b6c6.png)", "cfid": "2093D"}
{"problem_id": "2084C", "problem_title": "C. You Soared Afar With Grace", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2084/C", "problem_statement": "You are given a permutation $a$ and $b$ of length $n$$^{\\\\text{∗}}$. You can perform the following operation at most $n$ times:\n\n- Choose two indices $i$ and $j$ ($1 \\le i, j \\le n$, $i \\ne j$), swap $a_i$ with $a_j$, swap $b_i$ with $b_j$.\n\nDetermine whether $a$ and $b$ can be reverses of each other after operations. In other words, for each $i = 1, 2, \\ldots, n$, $a_i = b_{n + 1 - i}$.\n\nIf it is possible, output any valid sequence of operations. Otherwise, output $-1$.\n\n$^{\\text{∗}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$) — the length of the permutations.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le n$).\n\nThe third line contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($1 \\le b_i \\le n$).\n\nIt is guaranteed that $a$ and $b$ are permutations of length $n$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, if it is impossible, output $-1$ in the only line. Otherwise, output a single integer $m$ ($0 \\le m \\le n$) — the number of operations in the first line. In the following $m$ lines, output two integers — the indices $i$ and $j$ ($1 \\le i, j \\le n$, $i \\ne j$) in each operation in order. If there are multiple solutions, print any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n2\n\n1 2\n\n1 2\n\n2\n\n1 2\n\n2 1\n\n4\n\n1 3 2 4\n\n2 4 1 3\n\n5\n\n2 5 1 3 4\n\n3 5 4 2 1\n\n5\n\n3 1 2 4 5\n\n1 2 3 4 5\n\n```\n\n#### Output #1\n\n```\n-1\n0\n1\n1 2\n2\n1 2\n1 3\n-1\n```\n\n### Note\n\nIn the second test case, $b$ is already the reverse of $a$.\n\nIn the third test case, after performing the following operation, $b$ will become the reverse of $a$:\n\n- Swap $a_1, a_2$ and swap $b_1, b_2$. Now $a = [3, 1, 2, 4]$ and $b = [4, 2, 1, 3]$.\n\nIn the fourth test case, after performing the following operations in order, $b$ will become the reverse of $a$:\n\n- Swap $a_1, a_2$ and swap $b_1, b_2$. Now $a = [5, 2, 1, 3, 4]$ and $b = [5, 3, 4, 2, 1]$.\n- Swap $a_1, a_3$ and swap $b_1, b_3$. Now $a = [1, 2, 5, 3, 4]$ and $b = [4, 3, 5, 2, 1]$.", "cfid": "2084C"}
{"problem_id": "2084D", "problem_title": "D. Arcology On Permafrost", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2084/D", "problem_statement": "You are given three integers $n$, $m$, and $k$, where $m \\cdot k < n$.\n\nFor a sequence $b$ consisting of non-negative integers, define $f(b)$ as follows:\n\n- You may perform the following operation on $b$:\n  - Let $l$ denote the current length of $b$. Choose a positive integer $1 \\\\leq i \\\\leq l - k + 1$, remove the subarray from index $i$ to $i + k - 1$ and concatenate the remaining parts. In other words, replace $b$ with \n\n$$[b_1, b_2, \\ldots, b_{i - 1}, b_{i + k}, b_{i + k + 1}, \\ldots, b_l].$$\n\nf(b)$ is defined as the minimum possible value of $\\\\operatorname{mex}(b)$$^{\\\\text{∗}}$ after performing the above operation at most $m$ times (possibly zero).\n\nYou need to construct a sequence $a$ of length $n$ consisting of non-negative integers, such that:\n\n- For all $1 \\le i \\le n$, $0 \\le a_i \\le 10^9$.\n- Over all such sequences $a$, $f(a)$ is maximized.\n\n$^{\\text{∗}}$The minimum excluded (MEX) of a collection of integers $c_1, c_2, \\ldots, c_k$ is defined as the smallest non-negative integer $x$ which does not occur in the collection $c$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n$, $m$, and $k$ ($2 \\le n \\le 2 \\cdot 10^5$, $1 \\le m < n$, $1 \\le k < n$, $1 \\le m \\cdot k < n$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le 10^9$).\n\nIf there are multiple answers, print any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n2 1 1\n\n5 2 2\n\n6 1 4\n\n8 2 2\n\n8 1 5\n\n11 3 3\n\n22 6 3\n\n17 2 2\n\n```\n\n#### Output #1\n\n```\n0 0\n0 1 0 0 0\n0 1 2 2 0 1\n0 2 1 0 1 0 8 1\n0 1 2 1000000000 1 0 1 2\n1 0 0 1 0 2 1 0 2 1 0\n0 2 1 0 2 1 0 3 2 1 0 2 1 0 2 1 0 2 1 0 2 1\n4 0 2 1 3 4 0 2 1 0 3 4 0 1 2 1 3\n```\n\n### Note\n\nIn the first test case, it can be shown that $f(a) = 1$, which is maximized.\n\nIn the second test case, it can be shown that $f(a) = 1$, which is maximized. $f(a) = 1$ since you can perform the following operations:\n\n- Choose $i = 3$, remove the subarray from index $3$ to $4$ and concatenate the remaining parts. The sequence $a$ becomes $[0, 1, 0]$.\n- Choose $i = 1$, remove the subarray from index $1$ to $2$ and concatenate the remaining parts. The sequence $a$ becomes $[0]$.\n\nIn the third test case, it can be shown that $f(a) = 2$, which is maximized. $f(a) = 2$ since you can perform the following operation:\n\n- Choose $i = 2$, remove the subarray from index $2$ to $5$ and concatenate the remaining parts. The sequence $a$ becomes $[0, 1]$.\n\nIn the fourth test case, it can be shown that $f(a) = 2$, which is maximized.\n\nIn the fifth test case, it can be shown that $f(a) = 3$, which is maximized.\n\nIn the sixth test case, it can be shown that $f(a) = 2$, which is maximized.", "cfid": "2084D"}
{"problem_id": "2084B", "problem_title": "B. MIN = GCD", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2084/B", "problem_statement": "You are given a positive integer sequence $a$ of length $n$. Determine if it is possible to rearrange $a$ such that there exists an integer $i$ ($1 \\\\le i<n$) satisfying \n\n$$ \\min([a_1,a_2,\\ldots,a_i])=\\gcd([a_{i+1},a_{i+2},\\ldots,a_n]). $$\n\nHere $\\gcd(c)$ denotes the [greatest common divisor](https://en.wikipedia.org/wiki/Greatest_common_divisor) of $c$, which is the maximum positive integer that divides all integers in $c$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n \\le 10^5$).\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^{18}$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, output \"Yes\" if it is possible, and \"No\" otherwise.\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n2\n\n1 1\n\n2\n\n1 2\n\n3\n\n2 2 3\n\n3\n\n2 3 4\n\n5\n\n4 5 6 9 3\n\n3\n\n998244359987710471 99824435698771045 1000000007\n\n6\n\n1 1 4 5 1 4\n\n```\n\n#### Output #1\n\n```\nYes\nNo\nYes\nNo\nYes\nYes\nYes\n```\n\n### Note\n\nIn the first test case, rearrange $a$ to $[1,1]$ and let $i=1$, then $\\min([1])=\\gcd([1])$.\n\nIn the second test case, it can be shown that it is impossible.\n\nIn the third test case, rearrange $a$ to $[3,2,2]$ and let $i=2$, then $\\min([3,2])=\\gcd([2])$.\n\nIn the fifth test case, rearrange $a$ to $[3,4,5,6,9]$ and let $i=3$, then $\\min([3,4,5])=\\gcd([6,9])$.", "cfid": "2084B"}
{"problem_id": "2084A", "problem_title": "A. Max and Mod", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2084/A", "problem_statement": "You are given an integer $n$. Find any permutation $p$ of length $n$$^{\\\\text{∗}}$ such that:\n\n- For all $2 \\le i \\le n$, $\\max(p_{i - 1}, p_i) \\bmod i$ $^{\\text{†}}$ $= i - 1$ is satisfied.\n\nIf it is impossible to find such a permutation $p$, output $-1$.\n\n$^{\\text{∗}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n$^{\\\\text{†}}$$x \\\\bmod y$ denotes the remainder from dividing $x$ by $y$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 99$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n \\le 100$).\n\n### Output\n\nFor each test case:\n\n- If such a permutation $p$ doesn't exist, output a single integer $-1$.\n- Otherwise, output $n$ integers $p_1, p_2, \\ldots, p_n$ — the permutation $p$ you've found. If there are multiple answers, output any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2\n\n3\n\n4\n\n5\n\n```\n\n#### Output #1\n\n```\n-1\n3 2 1\n-1\n1 5 2 3 4\n```\n\n### Note\n\nIn the first test case, it is impossible to find such a permutation $p$, so you should output $-1$.\n\nIn the fourth test case, $p = [1, 5, 2, 3, 4]$ satisfies the condition:\n\n- For $i = 2$, $\\max(p_1, p_2) = 5$ and $5 \\bmod 2 = 1$.\n- For $i = 3$, $\\max(p_2, p_3) = 5$ and $5 \\bmod 3 = 2$.\n- For $i = 4$, $\\max(p_3, p_4) = 3$ and $3 \\bmod 4 = 3$.\n- For $i = 5$, $\\max(p_4, p_5) = 4$ and $4 \\bmod 5 = 4$.", "cfid": "2084A"}
{"problem_id": "2086A", "problem_title": "A. Cloudberry Jam", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2086/A", "problem_statement": "The most valuable berry of the Karelian forests is cloudberry. To make jam from cloudberries, you take equal amounts of berries and sugar and cook them. Thus, if you have $2$ kg of berries, you need $2$ kg of sugar. However, from $2$ kg of berries and $2$ kg of sugar, you will not get $4$ kg of jam, as one might expect, but only $3$ kg, since some of the jam evaporates during cooking. Specifically, during standard cooking, exactly a quarter (or $25\\%$) of the jam evaporates.\n\nHow many kilograms of cloudberries are needed to prepare $n$ $3$-kilogram jars of jam?\n\n![](https://espresso.codeforces.com/85e4f865ff1296d55236c63df0157f7da4c779b6.png)\n\n### Input\n\nEach test consists of several test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10^{4}$) — the number of test cases. The following lines describe the test cases.\n\nEach test case contains a single integer $n$ ($1 \\le n \\le 10^8$) — the number of jars of jam that need to be prepared.\n\n### Output\n\nFor each test case, output a single integer — the amount of berries needed for the jam in kilograms.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n1\n\n3\n\n```\n\n#### Output #1\n\n```\n2\n6\n```\n\n### Note\n\nFor the test case $1$, explanations are given in the text of the statement — to prepare $1$ jar of jam, you need $2$ kilograms of cloudberries.\n\nConsider the test case $2$: if we take $6$ kilograms of berries and $6$ kilograms of sugar, we get $\\frac{(6 + 6) \\cdot 3}{4} = 9$ kilograms of jam; which gives $\\frac{9}{3} = 3$ jars of jam.", "cfid": "2086A"}
{"problem_id": "2086D", "problem_title": "D. Even String", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2086/D", "problem_statement": "You would like to construct a string $s$, consisting of lowercase Latin letters, such that the following condition holds:\n\n- For every pair of indices $i$ and $j$ such that $s_{i} = s_{j}$, the difference of these indices is even, that is, $|i - j| \\bmod 2 = 0$.\n\nConstructing any string is too easy, so you will be given an array $c$ of $26$ numbers — the required number of occurrences of each individual letter in the string $s$. So, for every $i \\in [1, 26]$, the $i$-th letter of the Latin alphabet should occur exactly $c_i$ times.\n\nYour task is to count the number of distinct strings $s$ that satisfy all these conditions. Since the answer can be huge, output it modulo $998\\,244\\,353$.\n\n### Input\n\nEach test consists of several test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10^{4}$)— the number of test cases. The description of test cases follows.\n\nEach test case contains $26$ integers $c_{i}$ ($0 \\le c_{i} \\le 5 \\cdot 10^{5}$)— the elements of the array $c$.\n\nAdditional constraints on the input data:\n\n- The sum of $c_{i}$ for every test case is positive;\n- The sum of $c_{i}$ over all test cases does not exceed $5 \\cdot 10^{5}$.\n\n### Output\n\nFor each test case, print one integer — the number of suitable strings $s$, taken modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n2 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n\n3 1 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 1 0\n\n0 0 0 0 0 0 0 0 0 0 0 0 1 0 3 0 0 0 0 0 0 0 0 0 0 0\n\n1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 233527 233827\n\n```\n\n#### Output #1\n\n```\n4\n960\n0\n1\n789493841\n```\n\n### Note\n\nIn the first test case, there are $4$ suitable strings: \"abak\", \"akab\", \"baka\" and \"kaba\".", "cfid": "2086D"}
{"problem_id": "2086C", "problem_title": "C. Disappearing Permutation", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2086/C", "problem_statement": "A permutation of integers from $1$ to $n$ is an array of size $n$ where each integer from $1$ to $n$ appears exactly once.\n\nYou are given a permutation $p$ of integers from $1$ to $n$. You have to process $n$ queries. During the $i$-th query, you replace $p_{d_i}$ with $0$. Each element is replaced with $0$ exactly once. The changes made in the queries are saved, that is, after the $i$-th query, all integers $p_{d_1}, p_{d_2}, \\dots, p_{d_i}$ are zeroes.\n\nAfter each query, you have to find the minimum number of operations required to fix the array; in other words, to transform the current array into any permutation of integers from $1$ to $n$ (possibly into the original permutation $p$, possibly into some other permutation).\n\nThe operation you can perform to fix the array is the following one:\n\n- choose the integer $i$ from $1$ to $n$, replace the $i$-th element of the array with $i$.\n\nNote that the answer for each query is calculated independently, meaning you do not actually apply any operations, just calculate the minimum number of operations.\n\n### Input\n\nEach test consists of several test cases. The first line contains one integer $t$ ($1 \\le t \\le 10^{4}$) — the number of test cases. Then the test cases follow.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 10^{5}$).\n\nThe second line of each test case contains $n$ integers $p_1, p_2, \\dots, p_n$ ($1 \\le p_{i} \\le n$) — the original permutation. All $p_i$ are distinct.\n\nThe third line of each test case contains $n$ integers $d_1, d_2, \\dots, d_n$ ($1 \\le d_{i} \\le n$). All $d_{i}$ are distinct.\n\nAdditional constraint on the input:\n\n- the sum of $n$ across all test cases does not exceed $2 \\cdot 10^{5}$.\n\n### Output\n\nFor each test case, output a line containing $n$ integers, where the $i$-th integer should be equal to the minimum number of operations required to fix the array which was obtained after the $i$-th query (i.e., the permutation $p$ where all integers $p_{d_1}, p_{d_2}, \\dots, p_{d_i}$ are replaced by zeroes).\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3\n\n1 2 3\n\n3 2 1\n\n5\n\n4 5 3 1 2\n\n4 5 1 3 2\n\n7\n\n4 3 1 2 7 5 6\n\n1 2 3 4 5 6 7\n\n```\n\n#### Output #1\n\n```\n1 2 3\n2 4 4 5 5\n4 4 4 4 7 7 7\n```\n\n### Note\n\nIn the first test case, after each query, every integer which was replaced by $0$ can be restored by one operation.\n\nIn the second test case, you can act as follows:\n\n- Query $1$: $p = [4, 5, 3, 0, 2]$, it can be transformed into $[{\\color{red}1}, 5, 3, {\\color{red}4}, 2]$.\n- Query $2$: $p = [4, 5, 3, 0, 0]$, it can be transformed into $[{\\color{red}1}, {\\color{red}2}, 3, {\\color{red}4}, {\\color{red}5}]$.\n- Query $3$: $p = [0, 5, 3, 0, 0]$, it can be transformed into $[{\\color{red}1}, {\\color{red}2}, 3, {\\color{red}4}, {\\color{red}5}]$.\n- Query $4$: $p = [0, 5, 0, 0, 0]$, it can be transformed into $[{\\color{red}1}, {\\color{red}2}, {\\color{red}3}, {\\color{red}4}, {\\color{red}5}]$.\n- Query $5$: $p = [0, 0, 0, 0, 0]$, it can be transformed into $[{\\color{red}1}, {\\color{red}2}, {\\color{red}3}, {\\color{red}4}, {\\color{red}5}]$.\n\nThe numbers that were changed are highlighted in red.", "cfid": "2086C"}
{"problem_id": "2086B", "problem_title": "B. Large Array and Segments", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2086/B", "problem_statement": "There is an array $a$ consisting of $n$ positive integers, and a positive integer $k$. An array $b$ is created from array $a$ according to the following rules:\n\n- $b$ contains $n \\cdot k$ numbers;\n- the first $n$ numbers of array $b$ are the same as the numbers of array $a$, that is, $b_{i} = a_{i}$ for $i \\le n$;\n- for any $i > n$, it holds that $b_{i} = b_{i - n}$.\n\nFor example, if $a = [2, 3, 1, 4]$ and $k = 3$, then $b = [2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4]$.\n\nGiven a number $x$, it is required to count the number of such positions $l$ ($1 \\le l \\le n \\cdot k$), for which there exists a position $r \\ge l$, such that the sum of the elements of array $b$ on the segment $[l, r]$ is at least $x$ (in other words, $b_{l} + b_{l+1} + \\dots + b_{r} \\ge x$).\n\n### Input\n\nEach test consists of several test cases. The first line contains one integer $t$ ($1 \\le t \\le 10^{4}$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains three integers $n$, $k$, $x$ ($1 \\le n, k \\le 10^{5}$; $1 \\le x \\le 10^{18}$).\n\nThe second line of each test case contains $n$ integers $a_{i}$ ($1 \\le a_{i} \\le 10^{8}$).\n\nAdditional constraints on the input:\n\n- the sum of $n$ across all test cases does not exceed $2 \\cdot 10^{5}$;\n- the sum of $k$ across all test cases does not exceed $2 \\cdot 10^{5}$.\n\n### Output\n\nFor each test case, output one integer — the number of suitable positions $l$ in the array $b$.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n5 3 10\n\n3 4 2 1 5\n\n15 97623 1300111\n\n105 95 108 111 118 101 95 118 97 108 111 114 97 110 116\n\n1 100000 1234567891011\n\n1\n\n1 1 1\n\n1\n\n1 1 1\n\n2\n\n2 1 2\n\n1 1\n\n2 1 5\n\n2 1\n\n```\n\n#### Output #1\n\n```\n12\n1452188\n0\n1\n1\n1\n0\n```\n\n### Note\n\nIn the first test case, the array $b$ looks like this:\n\n\n\n$$[3, 4, 2, 1, 5, 3, 4, 2, 1, 5, 3, 4, 2, 1, 5]$$\n\nThere are $12$ positions $l$ for which there exists a suitable position $r$. Here are some (not all) of them:\n\n- $l = 1$, for which there is a position $r = 6$, the sum over the segment $[1, 6]$ equals $18$;\n- $l = 2$, for which there is a position $r = 5$, the sum over the segment $[2, 5]$ equals $12$;\n- $l = 6$, for which there is a position $r = 9$, the sum over the segment $[6, 9]$ equals $10$.", "cfid": "2086B"}
{"problem_id": "2092C", "problem_title": "C. Asuna and the Mosquitoes", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2092/C", "problem_statement": "For her birthday, each of Asuna's $n$ admirers gifted her a tower. The height of the tower from the $i$-th admirer is equal to $a_i$.\n\nAsuna evaluates the beauty of the received gifts as $\\max(a_1, a_2, \\ldots, a_n)$. She can perform the following operation an arbitrary number of times (possibly, zero).\n\n- Take such $1 \\le i \\neq j \\le n$ that $a_i + a_j$ is odd and $a_i > 0$, then decrease $a_i$ by $1$ and increase $a_j$ by $1$.\n\nIt is easy to see that the heights of the towers remain non-negative during the operations.\n\nHelp Asuna find the maximum possible beauty of the gifts after any number of operations!\n\n### Input\n\nEach test consists of several test cases. The first line of the input data contains one integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\leq n \\leq 2 \\cdot 10^5$) — the number of admirers of Asuna.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n \\ (1 \\le a_i \\le 10^9)$ — the heights of the towers.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer: the maximum value of the beauty of the gifts that Asuna can achieve.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3\n\n5 3 9\n\n2\n\n3 2\n\n4\n\n1 2 2 1\n\n5\n\n5 4 3 2 9\n\n```\n\n#### Output #1\n\n```\n9\n5\n5\n21\n```\n\n### Note\n\nIn the first test case, no pair of towers satisfies the required condition for applying the operation, so no operations can be performed. In this case, the answer is $\\max(5, \\ 3, \\ 9) = 9$.\n\nIn the second test case, the operation with $i = 2$ and $j = 1$ can be applied twice. After that, the array becomes: $a \\ = \\ [5, \\ 0]$. Thus, the answer is 5.\n\nIn the third test case, the following sequence of operations can be applied:\n\n1. Operation with $i=1$ and $j=2$.\n$[1, \\ 2, \\ 2, \\ 1] \\quad \\rightarrow \\quad [0, \\ 3, \\ 2, \\ 1]$\n\n2. Operation with $i=3$ and $j=2$.\n$[0, \\ 3, \\ 2, \\ 1] \\quad \\rightarrow \\quad [0, \\ 4, \\ 1, \\ 1]$\n\n3. Operation with $i=3$ and $j=2$.\n$[0, \\ 4, \\ 1, \\ 1] \\quad \\rightarrow \\quad [0, \\ 5, \\ 0, \\ 1]$\n\n\n$\\max(0, \\ 5, \\ 0, \\ 1) \\ = \\ 5$.\n\nTherefore, the answer is 5.", "cfid": "2092C"}
{"problem_id": "2092B", "problem_title": "B. Lady Bug", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2092/B", "problem_statement": "As soon as Dasha Purova crossed the border of France, the villain Markaron kidnapped her and placed her in a prison under his large castle. Fortunately, the wonderful Lady Bug, upon hearing the news about Dasha, immediately ran to save her in Markaron's castle. However, to get there, she needs to crack a complex password.\n\nThe password consists of two bit strings $a$ and $b$, each of which has a length of $n$. In one operation, Lady Bug can choose any index $2 \\le i \\le n$ and perform one of the following actions:\n\n1. swap($a_i$, $b_{i-1}$) (swap the values of $a_i$ and $b_{i-1}$), or\n2. swap($b_i$, $a_{i-1}$) (swap the values of $b_i$ and $a_{i-1}$).\n\nLady Bug can perform any number of operations. The password is considered cracked if she can ensure that the first string consists only of zeros. Help her understand whether or not she will be able to save the unfortunate Dasha.\n\n### Input\n\nEach test consists of several test cases. The first line of the input data contains one integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains one integer $n$ ($2 \\leq n \\leq 2 \\cdot 10^5$) — the length of the bit strings of the password.\n\nThe next two lines contain the bit strings of length $n$, $a$ and $b$, which represent the password. Each of the strings contains only the characters 0 and '1'.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output \"YES\" if Lady Bug can crack the password after any number of operations; otherwise, output \"NO\".\n\nYou can output each letter in any case (lowercase or uppercase). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be accepted as a positive answer.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3\n\n000\n\n000\n\n6\n\n010001\n\n010111\n\n5\n\n10000\n\n01010\n\n2\n\n11\n\n00\n\n```\n\n#### Output #1\n\n```\nYES\nYES\nNO\nYES\n```\n\n### Note\n\nIn the first test case, the string $a$ immediately consists only of zeros.\n\nIn the second test case, a possible sequence of operations is:\n\n1. swap$(a_2, \\ b_{1})$\n\n$\\mathtt{0{\\color{red}{1}}0001}$\n\n$\\mathtt{{\\color{red}{0}}10111}$\n\n2. swap$(b_5, \\ a_{4})$\n\n$\\mathtt{000{\\color{red}{0}}01}$\n\n$\\mathtt{1101{\\color{red}{1}}1}$\n\n3. swap$(a_4, \\ b_{3})$\n\n$\\mathtt{000{\\color{red}{1}}01}$\n\n$\\mathtt{11{\\color{red}{0}}101}$\n\n4. swap$(a_5, \\ b_{4})$\n\n$\\mathtt{00000{\\color{red}{1}}}$\n\n$\\mathtt{1111{\\color{red}{0}}1}$", "cfid": "2092B"}
{"problem_id": "2092D", "problem_title": "D. Mishkin Energizer", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2092/D", "problem_statement": "In anticipation of a duel with his old friend Fernan, Edmond is preparing an energy drink called \"Mishkin Energizer\". The drink consists of a string $s$ of length $n$, made up only of the characters L, I, and T, which correspond to the content of three different substances in the drink.\n\nWe call the drink balanced if it contains an equal number of all substances. To boost his aura and ensure victory in the duel, Edmond must make the initial string balanced by applying the following operation:\n\n1. Choose an index $i$ such that $s_i \\neq s_{i+1}$ (where $i + 1$ must not exceed the current size of the string).\n2. Insert a character $x$, either L, I, or T, between them such that $x \\neq s_i$ and $x \\neq s_{i+1}$.\n\nHelp Edmond make the drink balanced and win the duel by performing no more than $\\textbf{2n}$ operations. If there are multiple solutions, any one of them can be output. If it is impossible, you must report this.\n\n### Input\n\nEach test consists of several test cases. The first line of the input data contains one integer $t$ ($1 \\le t \\le 100$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains one integer $n$ ($1 \\le n \\le 100$) — the length of the string $s$.\n\nThe second line of each test case contains a string $s$ of length $n$, consisting only of the characters L, I, and T.\n\n### Output\n\nFor each test case, output $-1$ if there is no solution. Otherwise, in the first line, output a single integer $m$ ($0 \\le m \\le 2n$) — the number of operations you performed.\n\nThen the $l$-th of the following $m$ lines should contain a single integer $i$ ($1 \\le i < n+l-1$), indicating the operation of inserting a character between $s_i$ and $s_{i+1}$. It must hold that $s_i \\neq s_{i+1}$.\n\nIf there are multiple solutions, any one of them can be output. Note that you do not need to minimize the number of operations in this problem.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n5\n\nTILII\n\n1\n\nL\n\n3\n\nLIT\n\n```\n\n#### Output #1\n\n```\n4\n1\n2\n3\n4\n-1\n0\n```\n\n### Note\n\nIn the first test case, the following sequence of operations can be performed: TILII $\\rightarrow$ TLILII $\\rightarrow$ TLTILII $\\rightarrow$ TLTLILII $\\rightarrow$ TLTLTILII.\n\nIn the second test case, no operations can be performed, so the answer is $-1$.\n\nIn the third test case, the initial string already has equal quantities of all substances.", "cfid": "2092D"}
{"problem_id": "2092A", "problem_title": "A. Kamilka and the Sheep", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2092/A", "problem_statement": "Kamilka has a flock of $n$ sheep, the $i$-th of which has a beauty level of $a_i$. All $a_i$ are distinct. Morning has come, which means they need to be fed. Kamilka can choose a non-negative integer $d$ and give each sheep $d$ bunches of grass. After that, the beauty level of each sheep increases by $d$.\n\nIn the evening, Kamilka must choose exactly two sheep and take them to the mountains. If the beauty levels of these two sheep are $x$ and $y$ (after they have been fed), then Kamilka's pleasure from the walk is equal to $\\gcd(x, y)$, where $\\gcd(x, y)$ denotes the [greatest common divisor (GCD)](https://en.wikipedia.org/wiki/Greatest_common_divisor) of integers $x$ and $y$.\n\nThe task is to find the maximum possible pleasure that Kamilka can get from the walk.\n\n### Input\n\nEach test consists of several test cases. The first line contains one integer $t$ ($1 \\le t \\le 500$), the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains one integer $n$ ($2 \\leq n \\leq 100$), the number of sheep Kamilka has.\n\nThe second line of each test case contains $n$ distinct integers $a_1, a_2, \\ldots, a_n \\ (1 \\le a_i \\le 10^9)$ — the beauty levels of the sheep.\n\nIt is guaranteed that all $a_i$ are distinct.\n\n### Output\n\nFor each test case, output a single integer: the maximum possible pleasure that Kamilka can get from the walk.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2\n\n1 3\n\n5\n\n5 4 3 2 1\n\n3\n\n5 6 7\n\n3\n\n1 11 10\n\n```\n\n#### Output #1\n\n```\n2\n4\n2\n10\n```\n\n### Note\n\nIn the first test case, $d=1$ works. In this case, the pleasure is $\\gcd(1+1, \\ 1+3)=\\gcd(2, \\ 4)=2$. It can be shown that a greater answer cannot be obtained.\n\nIn the second test case, let's take $d=3$. In this case, the pleasure is $\\gcd(1+3, \\ 5+3)=\\gcd(4, \\ 8)=4$. Thus, for this test case, the answer is $4$.", "cfid": "2092A"}
{"problem_id": "2091D", "problem_title": "D. Place of the Olympiad", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2091/D", "problem_statement": "For the final of the first Olympiad by IT Campus \"NEIMARK\", a rectangular venue was prepared. You may assume that the venue is divided into $n$ rows, each containing $m$ spots for participants' desks. A total of $k$ participants have registered for the final, and each participant will sit at an individual desk. Now, the organizing committee must choose the locations for the desks in the venue.\n\nEach desk occupies one of the $m$ spots in a row. Moreover, if several desks occupy consecutive spots in the same row, we call such a group of desks a bench, and the number of desks in the group is the bench's length. For example, seating $7$ participants on a $3 \\times 4$ venue (with $n = 3, m = 4$) can be arranged as follows:\n\n![](https://espresso.codeforces.com/a88b2d657543c3b25d3dfed67c6579aaafc3d212.png)\n\nIn the figure above, the first row has one bench of length $3$, the second row has one bench of length $2$, and the third row has two benches of length $1$.\n\nThe organizing committee wants to choose the locations so that the length of the longest bench is as small as possible. In particular, the same $7$ desks can be arranged in a more optimal way, so that the lengths of all benches do not exceed $2$:\n\n![](https://espresso.codeforces.com/fd55912ea252e536c3c4396358cdbde3be0f8870.png)\n\nGiven the integers $n$, $m$, and $k$, determine the minimum possible length of the longest bench.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\leq t \\leq 10^4$). The description of the test cases follows.\n\nA single line of each test case contains three positive integers — $n$, $m$, $k$ ($1 \\leq n, m, k \\leq 10^9$, $k \\leq n\\cdot m$).\n\n### Output\n\nFor each test case, output a single number — the minimum possible length of the longest bench.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3 4 7\n\n5 5 5\n\n1 13 2\n\n2 4 7\n\n1 5 4\n\n```\n\n#### Output #1\n\n```\n2\n1\n1\n4\n2\n```", "cfid": "2091D"}
{"problem_id": "2091F", "problem_title": "F. Igor and Mountain", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2091/F", "problem_statement": "The visitors of the IT Campus \"NEIMARK\" are not only strong programmers but also physically robust individuals! Some practice swimming, some rowing, and some rock climbing!\n\nMaster Igor is a prominent figure in the local rock climbing community. One day, he went on a mountain hike to ascend one of the peaks. As an experienced climber, Igor decided not to follow the established trails but to use his skills to climb strictly vertically.\n\nIgor found a rectangular vertical section of the mountain and mentally divided it into $n$ horizontal levels. He then split each level into $m$ segments using vertical partitions. Upon inspecting these segments, Igor discovered convenient protrusions that can be grasped (hereafter referred to as holds). Thus, the selected part of the mountain can be represented as an $n \\times m$ rectangle, with some cells containing holds.\n\nBeing an experienced programmer, Igor decided to count the number of valid routes. A route is defined as a sequence of distinct holds. A route is considered valid if the following conditions are satisfied:\n\n- The first hold in the route is located on the very bottom level (row $n$);\n- The last hold in the route is located on the very top level (row $1$);\n- Each subsequent hold is not lower than the previous one;\n- At least one hold is used on each level (i.e., in every row of the rectangle);\n- At most two holds are used on each level (since Igor has only two hands);\n- Igor can reach from the current hold to the next one if the distance between the centers of the corresponding sections does not exceed Igor's arm span.\n\nIgor's arm span is $d$, which means he can move from one hold to another if the Euclidean distance between the centers of the corresponding segments does not exceed $d$. The distance between sections ($i_1, j_1$) and ($i_2, j_2$) is given by $\\sqrt{(i_1 - i_2) ^ 2 + (j_1 - j_2) ^ 2}$.\n\nCalculate the number of different valid routes. Two routes are considered different if they differ in the list of holds used or in the order in which these holds are visited.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\leq t \\leq 10^3$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n$, $m$, $d$ ($2 \\leq n \\leq 2000$, $1 \\leq m, d \\leq 2000$).\n\nEach of the following $n$ lines contains $m$ characters — the description of the corresponding level of the mountain. The symbol '#' represents an empty section, and the symbol 'X' represents a section with a hold. The levels are described from top to bottom.\n\nIt is guaranteed that the sum of $n \\cdot m$ over all test cases does not exceed $4 \\cdot 10^6$.\n\n### Output\n\nFor each test case, output the number of different routes modulo $998244353$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3 4 1\n\nXX#X\n\n#XX#\n\n#X#X\n\n3 4 2\n\nXX#X\n\n#XX#\n\n#X#X\n\n3 1 3\n\nX\n\nX\n\n#\n\n```\n\n#### Output #1\n\n```\n2\n60\n0\n```\n\n### Note\n\nPossible routes in the first case:\n\n![](https://espresso.codeforces.com/4abfb72944041c37716a0906437d686506431681.png)\n\nIn the second example, Igor's arm span has become larger, so new routes are available to him, for example this one:\n\n![](https://espresso.codeforces.com/5d1a6871d19f072dc888770deff1f3cb1426148b.png)\n\nIn the third example, there are no holds on the lower level, so there are no correct routes.", "cfid": "2091F"}
{"problem_id": "2091A", "problem_title": "A. Olympiad Date", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2091/A", "problem_statement": "The final of the first Olympiad by IT Campus \"NEIMARK\" is scheduled for March 1, 2025. A nameless intern was tasked with forming the date of the Olympiad using digits — 01.03.2025.\n\nTo accomplish this, the intern took a large bag of digits and began drawing them one by one. In total, he drew $n$ digits — the digit $a_i$ was drawn in the $i$-th turn.\n\nYou suspect that the intern did extra work. Determine at which step the intern could have first assembled the digits to form the date of the Olympiad (the separating dots can be ignored), or report that it is impossible to form this date from the drawn digits. Note that leading zeros must be displayed.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\leq t \\leq 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 20$).\n\nThe second line of each test case contains $n$ integers $a_i$ ($0 \\leq a_i \\leq 9$) — the numbers that the intern pulled out in chronological order.\n\n### Output\n\nFor each test case, output the minimum number of digits that the intern could pull out. If all the digits cannot be used to make a date, output the number $0$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n10\n\n2 0 1 2 3 2 5 0 0 1\n\n8\n\n2 0 1 2 3 2 5 0\n\n8\n\n2 0 1 0 3 2 5 0\n\n16\n\n2 3 1 2 3 0 1 9 2 1 0 3 5 4 0 3\n\n```\n\n#### Output #1\n\n```\n9\n0\n8\n15\n```", "cfid": "2091A"}
{"problem_id": "2091E", "problem_title": "E. Interesting Ratio", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2091/E", "problem_statement": "Recently, Misha at the IT Campus \"NEIMARK\" camp learned a new topic — the Euclidean algorithm.\n\nHe was somewhat surprised when he realized that $a \\cdot b = lcm(a, b) \\cdot gcd(a, b)$, where $gcd(a, b)$ — is [the greatest common divisor (GCD)](https://en.wikipedia.org/wiki/Greatest_common_divisor) of the numbers $a$ and $b$ and $lcm(a, b)$ — is [the least common multiple (LCM)](https://en.wikipedia.org/wiki/Least_common_multiple). Misha thought that since the product of LCM and GCD exists, it might be interesting to consider their quotient: $F(a,b)=\\frac{lcm(a, b)}{gcd(a, b)}$.\n\nFor example, he took $a = 2$ and $b = 4$, computed $F(2, 4) = \\frac{4}{2} = 2$ and obtained a prime number (a number is prime if it has exactly two divisors)! Now he considers $F(a, b)$ to be an interesting ratio if $a < b$ and $F(a, b)$ is a prime number.\n\nSince Misha has just started studying number theory, he needs your help to calculate — how many different pairs of numbers $a$ and $b$ are there such that $F(a, b)$ is an interesting ratio and $1 \\leq a < b \\leq n$?\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\leq t \\leq 10^3$). The description of the test cases follows.\n\nA single line of each test case contains a single integer $n$ ($2 \\leq n \\leq 10^7$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^7$.\n\n### Output\n\nFor each test case, output the number of interesting ratios $F(a, b)$ for pairs satisfying $1 \\leq a < b \\leq n$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n5\n\n10\n\n34\n\n10007\n\n```\n\n#### Output #1\n\n```\n4\n11\n49\n24317\n```", "cfid": "2091E"}
{"problem_id": "2091B", "problem_title": "B. Team Training", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2091/B", "problem_statement": "At the IT Campus \"NEIMARK\", there are training sessions in competitive programming — both individual and team-based!\n\nFor the next team training session, $n$ students will attend, and the skill of the $i$-th student is given by a positive integer $a_i$.\n\nThe coach considers a team strong if its strength is at least $x$. The strength of a team is calculated as the number of team members multiplied by the minimum skill among the team members.\n\nFor example, if a team consists of $4$ members with skills $[5, 3, 6, 8]$, then the team's strength is $4 \\cdot min([5, 3, 6, 8]) = 12$.\n\nOutput the maximum possible number of strong teams, given that each team must have at least one participant and every participant must belong to exactly one team.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\leq t \\leq 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $x$ ($1 \\leq n \\leq 2 \\cdot 10^5$, $1 \\leq x \\leq 10^9$) — the number of students in training and the minimum strength of a team to be considered strong.\n\nThe second line of each test case contains $n$ integers $a_i$ ($1 \\leq a_i \\leq 10^9$) — the skill of each student.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the maximum possible number of teams with strength at least $x$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n6 4\n\n4 5 3 3 2 6\n\n4 10\n\n4 2 1 3\n\n5 3\n\n5 3 2 3 2\n\n3 6\n\n9 1 7\n\n6 10\n\n6 1 3 6 3 2\n\n```\n\n#### Output #1\n\n```\n4\n0\n4\n2\n1\n```", "cfid": "2091B"}
{"problem_id": "2091C", "problem_title": "C. Combination Lock", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2091/C", "problem_statement": "At the IT Campus \"NEIMARK\", there are several top-secret rooms where problems for major programming competitions are developed. To enter one of these rooms, you must unlock a circular lock by selecting the correct code. This code is updated every day.\n\nToday's code is a permutation$^{\\text{∗}}$ of the numbers from $1$ to $n$, with the property that in every cyclic shift$^{\\text{†}}$ of it, there is exactly one fixed point. That is, in every cyclic shift, there exists exactly one element whose value is equal to its position in the permutation.\n\nOutput any valid permutation that satisfies this condition. Keep in mind that a valid permutation might not exist, then output $-1$.\n\n$^{\\text{∗}}$A permutation is defined as a sequence of length $n$ consisting of integers from $1$ to $n$, where each number appears exactly once. For example, (2 1 3), (1), (4 3 1 2) are permutations; (1 2 2), (3), (1 3 2 5) are not.\n\n$^{\\text{†}}$A cyclic shift of an array is obtained by moving the last element to the beginning of the array. A permutation of length $n$ has exactly $n$ cyclic shifts.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\leq t \\leq 500$). The description of the test cases follows.\n\nA single line of each test case contains a single integer $n$ ($1 \\leq n \\leq 2 \\cdot 10^5$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the desired permutation. If multiple solutions exist, output any one of them. If no suitable permutations exist, output $-1$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n4\n\n5\n\n3\n\n```\n\n#### Output #1\n\n```\n-1\n4 1 3 5 2\n1 3 2\n```\n\n### Note\n\nIn the second example, there is a permutation such that in each cyclic shift there is a fixed point (highlighted in dark red):\n\n![](https://espresso.codeforces.com/e1f7f024e13851731c4a34d583c32d16a0e2a8e9.png)\n\nThe first line contains the element numbers, and the second line contains all the shifts of the desired permutation.", "cfid": "2091C"}
{"problem_id": "2090A", "problem_title": "A. Treasure Hunt", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2090/A", "problem_statement": "Little B and his friend Little K found a treasure map, and now they just need to dig up the treasure, which is buried at a depth of $a.5$ meters.\n\nThey take turns digging. On the first day, Little B digs; on the second day, Little K. After each day, they switch. Little B digs exactly $x$ meters of soil each day, while Little K digs $y$ meters. They became curious about who will dig up the treasure first, meaning during whose day the total dug depth will exceed $a.5$.\n\nBut they are too busy digging, so help them and tell who will dig up the treasure!\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\le t \\le 1000$) — the number of test cases. The description of the test cases follows.\n\nIn a single line of each test case, three integers $x, y, a$ are given ($1 \\leq x, y, a \\leq 10^9$).\n\n### Output\n\nFor each test case, output \"NO\" if Little B digs it up first; otherwise, output \"YES\". You can output the answer in any case.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n1 2 4\n\n2 1 4\n\n2 2 1\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nNO\n```\n\n### Note\n\nIn the first test case, on the first day they will dig $1$ meter; on the second day $1 + 2 = 3$ meters in total; on the third day $1 + 2 + 1 = 4$ meters; and on the fourth day they will dig $6$ meters. Thus, the treasure will be dug up first by Little K.\n\nIn the second test case, on the first day they will dig $2$ meters; on the second day $2 + 1 = 3$ meters in total; on the third day $2 + 1 + 2 = 5$ meters, meaning it was dug up first by Little B.", "cfid": "2090A"}
{"problem_id": "2090B", "problem_title": "B. Pushing Balls", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2090/B", "problem_statement": "Ecrade has an $n \\times m$ grid, originally empty, and he has pushed several (possibly, zero) balls in it.\n\nEach time, he can push one ball into the grid either from the leftmost edge of a particular row or the topmost edge of a particular column of the grid.\n\nWhen a ball moves towards a position:\n\n- If there is no ball originally at that position, the incoming ball will stop and occupy the position.\n- If there is already a ball at that position, the incoming ball will stop and occupy the position, while the original ball will continue moving to the next position in the same direction.\n\nNote that if a row or column is full (i.e., all positions in that row or column have balls), he cannot push a ball into that row or column.\n\nGiven the final state of whether there is a ball at each position of the grid, you need to determine whether it is possible for Ecrade to push the balls to reach the final state.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10\\,000$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\le n, m \\le 50$).\n\nThis is followed by $n$ lines, each containing exactly $m$ characters and consisting only of $0$ and $1$, describing the final state of the grid. There is a ball at one position of the grid if and only if the corresponding position of the given input is $1$.\n\nIt is guaranteed that the sum of $n\\cdot m$ over all test cases does not exceed $10\\,000$.\n\n### Output\n\nFor each test case, output \"Yes\" (without quotes) if it is possible for Ecrade to push the balls to reach the final state, and \"No\" (without quotes) otherwise.\n\nYou can output \"Yes\" and \"No\" in any case (for example, strings \"YES\", \"yEs\" and \"yes\" will be recognized as a positive response).\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3 3\n\n001\n\n001\n\n110\n\n3 3\n\n010\n\n111\n\n010\n\n3 3\n\n111\n\n111\n\n111\n\n3 3\n\n000\n\n000\n\n000\n\n3 3\n\n000\n\n000\n\n001\n\n```\n\n#### Output #1\n\n```\nYES\nYES\nYES\nYES\nNO\n```\n\n### Note\n\nFor simplicity, if Ecrade pushes a ball from the leftmost edge of the $i$-th row, we call the operation $\\text{ROW}\\ i$; if he pushes a ball from the topmost edge of the $i$-th column, we call the operation $\\text{COL}\\ i$.\n\nFor intuitive understanding, a non-zero number $x$ in the matrix given below represents the $x$-th ball that is pushed in.\n\nIn the first test case, a possible series of operations:\n\n$\\begin{pmatrix}0&0&0\\\\0&0&0\\\\0&0&0\\end{pmatrix}\\xrightarrow{\\text{ROW}\\ 3}\\xrightarrow{\\text{ROW}\\ 3} \\begin{pmatrix}0&0&0\\\\0&0&0\\\\2&1&0\\end{pmatrix}\\xrightarrow{\\text{COL}\\ 3}\\xrightarrow{\\text{COL}\\ 3} \\begin{pmatrix}0&0&4\\\\0&0&3\\\\2&1&0\\end{pmatrix}$\n\nIn the second test case, a possible series of operations:\n\n$\\begin{pmatrix}0&0&0\\\\0&0&0\\\\0&0&0\\end{pmatrix}\\xrightarrow{\\text{ROW}\\ 2}\\xrightarrow{\\text{ROW}\\ 2}\\xrightarrow{\\text{ROW}\\ 2} \\begin{pmatrix}0&0&0\\\\3&2&1\\\\0&0&0\\end{pmatrix}\\xrightarrow{\\text{COL}\\ 2}\\xrightarrow{\\text{COL}\\ 2} \\begin{pmatrix}0&5&0\\\\3&4&1\\\\0&2&0\\end{pmatrix}$\n\nIn the third test case, a possible series of operations:\n\n$\\begin{pmatrix}0&0&0\\\\0&0&0\\\\0&0&0\\end{pmatrix}\\xrightarrow{\\text{ROW}\\ 1}\\xrightarrow{\\text{ROW}\\ 2}\\xrightarrow{\\text{ROW}\\ 3} \\begin{pmatrix}1&0&0\\\\2&0&0\\\\3&0&0\\end{pmatrix}\\xrightarrow{\\text{COL}\\ 3}\\xrightarrow{\\text{COL}\\ 3}\\xrightarrow{\\text{COL}\\ 3} \\begin{pmatrix}1&0&6\\\\2&0&5\\\\3&0&4\\end{pmatrix}\\xrightarrow{\\text{ROW}\\ 1}\\xrightarrow{\\text{ROW}\\ 2}\\xrightarrow{\\text{ROW}\\ 3} \\begin{pmatrix}7&1&6\\\\8&2&5\\\\9&3&4\\end{pmatrix}$", "cfid": "2090B"}
{"problem_id": "2089A", "problem_title": "A. Simple Permutation", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2089/A", "problem_statement": "Given an integer $n$. Construct a permutation $p_1, p_2, \\ldots, p_n$ of length $n$ that satisfies the following property:\n\nFor $1 \\le i \\le n$, define $c_i = \\lceil \\frac{p_1+p_2+\\ldots +p_i}{i} \\rceil$, then among $c_1,c_2,\\ldots,c_n$ there must be at least $\\lfloor \\frac{n}{3} \\rfloor - 1$ prime numbers.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10$) — the number of test cases. The description of the test cases follows.\n\nIn a single line of each test case, there is a single integer $n$ ($2 \\le n \\le 10^5)$ — the size of the permutation.\n\n### Output\n\nFor each test case, output the permutation $p_1,p_2,\\ldots,p_n$ of length $n$ that satisfies the condition. It is guaranteed that such a permutation always exists.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2\n\n3\n\n5\n\n```\n\n#### Output #1\n\n```\n2 1\n2 1 3\n2 1 3 4 5\n```\n\n### Note\n\nIn the first test case, $c_1 = \\lceil \\frac{2}{1} \\rceil = 2$, $c_2 = \\lceil \\frac{2+1}{2} \\rceil = 2$. Both are prime numbers.\n\nIn the third test case, $c_1 = \\lceil \\frac{2}{1} \\rceil = 2$, $c_2 = \\lceil \\frac{3}{2} \\rceil = 2$, $c_3 = \\lceil \\frac{6}{3} \\rceil = 2$, $c_4 = \\lceil \\frac{10}{4} \\rceil = 3$, $c_5 = \\lceil \\frac{15}{5} \\rceil = 3$. All these numbers are prime.", "cfid": "2089A"}
{"problem_id": "2090C", "problem_title": "C. Dining Hall", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2090/C", "problem_statement": "Inside the large kingdom, there is an infinite dining hall. It can be represented as a set of cells ($x, y$), where $x$ and $y$ are non-negative integers. There are an infinite number of tables in the hall. Each table occupies four cells ($3x + 1, 3y + 1$), ($3x + 1, 3y + 2$), ($3x + 2, 3y + 1$), ($3x + 2, 3y + 2$), where $x$ and $y$ are arbitrary non-negative integers. All cells that do not belong to any of the tables are corridors.\n\nThere are $n$ guests that come to the dining hall one by one. Each guest appears in the cell $(0, 0)$ and wants to reach a table cell. In one step, they can move to any neighboring by side corridor cell, and in their last step, they must move to a neighboring by side a free table cell. They occupy the chosen table cell, and no other guest can move there.\n\nEach guest has a characteristic $t_i$, which can either be $0$ or $1$. They enter the hall in order, starting to walk from the cell ($0, 0$). If $t_i=1$, the $i$-th guest walks to the nearest vacant table cell. If $t_i=0$, they walk to the nearest table cell that belongs to a completely unoccupied table. Note that other guests may choose the same table later.\n\nThe distance is defined as the smallest number of steps needed to reach the table cell. If there are multiple table cells at the same distance, the guests choose the cell with the smallest $x$, and if there are still ties, they choose among those the cell with the smallest $y$.\n\nFor each guest, find the table cell which they choose.\n\n### Input\n\nThe first line contains a single integer $q$ ($1 \\leq q \\leq 5000$) — the number of test cases. Then follows their description.\n\nThe first line of each test case contains a single integer $n$ ($1 \\leq n \\leq 50\\,000$) — the number of guests.\n\nThe second line of each test case contains $n$ integers $t_1, t_2, \\ldots, t_n$ ($t_i \\in \\{0, 1\\}$) — the characteristics of the guests.\n\nIt is guaranteed that the sum of $n$ for all test cases does not exceed $50\\,000$.\n\n### Output\n\nFor each test case, output $n$ lines — for each guest, the cell where they sit.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n6\n\n0 1 1 0 0 1\n\n5\n\n1 0 0 1 1\n\n```\n\n#### Output #1\n\n```\n1 1\n1 2\n2 1\n1 4\n4 1\n1 5\n1 1\n1 4\n4 1\n1 2\n2 1\n```\n\n### Note\n\nConsider the first test case:\n\nThe distance from the first guest to the cell ($1, 1$) is $2$, so he sits there.\n\nThe distance from the second guest to the cell ($1, 2$) is $3$, as is the distance to the cell ($2, 1$), but since the first coordinate is smaller for the first option, he will choose it.\n\nThe distance from the third guest to the cell ($2, 1$) is $3$, so he will choose it.\n\nThe distance from the fourth guest to the cell ($1, 4$) is $5$, and he will choose it.\n\nThe distance from the fifth guest to the cell ($4, 1$) is $5$.\n\nThe distance from the sixth guest to the cell ($1, 5$) is $6$, as is the distance to the cell ($2, 2$), but since the first coordinate is smaller, he will choose the first option.\n\n![](https://espresso.codeforces.com/de2d3d52460fa589b580b4819006756c0733b1ab.png)", "cfid": "2090C"}
{"problem_id": "2085A", "problem_title": "A. Serval and String Theory", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2085/A", "problem_statement": "A string $r$ consisting only of lowercase Latin letters is called universal if and only if $r$ is lexicographically smaller$^{\\text{∗}}$ than the reversal$^{\\text{†}}$ of $r$.\n\nYou are given a string $s$ consisting of $n$ lowercase Latin letters. You are required to make $s$ universal. To achieve this, you can perform the following operation on $s$ at most $k$ times:\n\n- Choose two indices $i$ and $j$ ($1\\le i,j\\le n$), then swap $s_i$ and $s_j$. Note that if $i=j$, you do nothing.\n\nDetermine whether you can make $s$ universal by performing the above operation at most $k$ times.\n\n$^{\\text{∗}}$A string $a$ is lexicographically smaller than a string $b$ of the same length, if and only if the following holds:\n\n- in the first position where $a$ and $b$ differ, the string $a$ has a letter that appears earlier in the alphabet than the corresponding letter in $b$.\n\n$^{\\text{†}}$The reversal of a string $r$ is the string obtained by writing $r$ from right to left. For example, the reversal of the string $\\texttt{abcad}$ is $\\texttt{dacba}$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 500$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1\\le n\\le 100$, $0\\le k\\le 10^4$) — the length of the string $s$, and the maximum number of operations you can perform.\n\nThe second line contains a string $s$ consisting of $n$ lowercase Latin letters.\n\n### Output\n\nFor each test case, print \"YES\" if it is possible to make $s$ universal by performing the operation at most $k$ times. Otherwise, print \"NO\".\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n1 10000\n\na\n\n3 3\n\nrev\n\n6 0\n\nstring\n\n6 0\n\ntheory\n\n9 2\n\nuniversal\n\n19 0\n\ncodeforcesecrofedoc\n\n19 1\n\ncodeforcesecrofedoc\n\n3 1\n\nzzz\n\n```\n\n#### Output #1\n\n```\nNO\nYES\nNO\nYES\nYES\nNO\nYES\nNO\n```\n\n### Note\n\nIn the first test case, $s$ will keep the same after any operations. However, the reversal of $\\texttt{a}$ is still $\\texttt{a}$, so it is impossible to make $s$ universal.\n\nIn the second test case, the string $\\texttt{rev}$ is lexicographically smaller than $\\texttt{ver}$. Thus, $s$ is already universal.\n\nIn the fifth test case, you can perform the operations as follows:\n\n1. Swap $s_4$ and $s_7$. After this operation, $s$ becomes $\\texttt{uniserval}$;\n2. Swap $s_1$ and $s_3$. After this operation, $s$ becomes $\\texttt{inuserval}$.\n\nAnd the string $\\texttt{inuserval}$ is universal.", "cfid": "2085A"}
{"problem_id": "2085C", "problem_title": "C. Serval and The Formula", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2085/C", "problem_statement": "You are given two positive integers $x$ and $y$ ($1\\le x, y\\le 10^9$).\n\nFind a non-negative integer $k\\le 10^{18}$, such that $(x+k) + (y+k) = (x+k)\\oplus (y+k)$ holds$^{\\text{∗}}$, or determine that such an integer does not exist.\n\n$^{\\\\text{∗}}$$\\\\oplus$ denotes the [bitwise XOR operation](https://en.wikipedia.org/wiki/Bitwise_operation#XOR).\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe only line of each test case contains two integers $x$ and $y$ ($1\\le x, y\\le 10^9$) — the given integers.\n\n### Output\n\nFor each test case, output a single integer $k$ ($0\\le k\\le 10^{18}$) — the integer you found. Print $-1$ if it is impossible to find such an integer.\n\nIf there are multiple answers, you may print any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n2 5\n\n6 6\n\n19 10\n\n1024 4096\n\n1198372 599188\n\n```\n\n#### Output #1\n\n```\n0\n-1\n1\n1024\n28\n```\n\n### Note\n\nIn the first test case, since $(2 + 0) + (5 + 0) = (2 + 0) \\oplus (5 + 0) = 7$, $k=0$ is a possible answer. Note that $k=4$ is also a possible answer because $(2 + 4) + (5 + 4) = (2 + 4) \\oplus (5 + 4) = 15$.\n\nIn the second test case, $(x+k)\\oplus (y+k) = (6+k)\\oplus (6+k) = 0$. However, $(x+k)+(y+k) > 0$ holds for every $k \\ge 0$, implying that such an integer $k$ does not exist.", "cfid": "2085C"}
{"problem_id": "2085B", "problem_title": "B. Serval and Final MEX", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2085/B", "problem_statement": "You are given an array $a$ consisting of $n\\ge 4$ non-negative integers.\n\nYou need to perform the following operation on $a$ until its length becomes $1$:\n\n- Select two indices $l$ and $r$ ($1\\le {\\color{red}{ l < r }} \\le |a|$), and replace the subarray $[a_l,a_{l+1},\\ldots,a_r]$ with a single integer $\\operatorname{mex}([a_l,a_{l+1},\\ldots,a_r])$, where $\\operatorname{mex}(b)$ denotes the minimum excluded (MEX)$^{\\text{∗}}$ of the integers in $b$. In other words, let $x=\\operatorname{mex}([a_l,a_{l+1},\\ldots,a_r])$, the array $a$ will become $[a_1,a_2,\\ldots,a_{l-1},x,a_{r+1},a_{r+2},\\ldots,a_{|a|}]$. Note that the length of $a$ decreases by $(r-l)$ after this operation.\n\nServal wants the final element in $a$ to be $0$. Help him!\n\nMore formally, you have to find a sequence of operations, such that after performing these operations in order, the length of $a$ becomes $1$, and the final element in $a$ is $0$.\n\nIt can be shown that at least one valid operation sequence exists under the constraints of the problem, and the length of any valid operation sequence does not exceed $n$.\n\nNote that you do not need to minimize the number of operations.\n\n$^{\\text{∗}}$The minimum excluded (MEX) of a collection of integers $b_1, b_2, \\ldots, b_k$ is defined as the smallest non-negative integer $x$ which does not occur in the collection $b$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($4\\le n\\le 5000$) — the length of the array $a$.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0\\le a_i\\le n$) — the elements of the array $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5000$.\n\n### Output\n\nFor each test case, output a single integer $k$ ($0\\le k\\le n$) in the first line of output — the length of the operation sequence.\n\nThen, output $k$ lines, the $i$-th line containing two integers $l_i$ and $r_i$ ($1\\le l_i<r_i\\le |a|$) — the two indices you choose in the $i$-th operation, where $|a|$ denotes the length of the array before this operation.\n\nIf there are multiple answers, you may print any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n4\n\n1 2 3 4\n\n5\n\n0 1 0 0 1\n\n6\n\n0 0 0 0 0 0\n\n6\n\n5 4 3 2 1 0\n\n4\n\n0 0 1 1\n\n4\n\n1 0 0 0\n\n```\n\n#### Output #1\n\n```\n1\n1 4\n4\n1 2\n1 2\n1 2\n1 2\n4\n5 6\n3 4\n1 2\n1 3\n3\n4 5\n4 5\n1 4\n2\n1 2\n1 3\n2\n2 4\n1 2\n```\n\n### Note\n\nIn the first test case, since $\\operatorname{mex}([1,2,3,4])=0$, after the only operation, the array becomes $[0]$.\n\nIn the second test case, the array $a$ changes as follows: \n\n$$ [\\underline{0,1},0,0,1]\\to [\\underline{2,0},0,1]\\to [\\underline{1,0},1]\\to [\\underline{2,1}]\\to [0]. $$\n\nIn the third test case, the array $a$ changes as follows: \n\n$$ [0,0,0,0,\\underline{0,0}]\\to [0,0,\\underline{0,0},1]\\to [\\underline{0,0},1,1]\\to [\\underline{1,1,1}]\\to [0]. $$\n\n", "cfid": "2085B"}
{"problem_id": "2075A", "problem_title": "A. To Zero", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2075/A", "problem_statement": "You are given two integers $n$ and $k$; $k$ is an odd number not less than $3$. Your task is to turn $n$ into $0$.\n\nTo do this, you can perform the following operation any number of times: choose a number $x$ from $1$ to $k$ and subtract it from $n$. However, if the current value of $n$ is even (divisible by $2$), then $x$ must also be even, and if the current value of $n$ is odd (not divisible by $2$), then $x$ must be odd.\n\nIn different operations, you can choose the same values of $x$, but you don't have to. So, there are no limitations on using the same value of $x$.\n\nCalculate the minimum number of operations required to turn $n$ into $0$.\n\n### Input\n\nThe first line contains one integer $t$ ($1 \\le t \\le 10000$) — the number of test cases.\n\nEach test case consists of one line containing two integers $n$ and $k$ ($3 \\le k \\le n \\le 10^9$, $k$ is odd).\n\n### Output\n\nFor each test case, output one integer — the minimum number of operations required to turn $n$ into $0$.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n39 7\n\n9 3\n\n6 3\n\n999967802 3\n\n5 5\n\n6 5\n\n999999999 3\n\n1000000000 3\n\n```\n\n#### Output #1\n\n```\n7\n4\n3\n499983901\n1\n2\n499999999\n500000000\n```\n\n### Note\n\nIn the first example from the statement, you can first subtract $5$ from $39$ to get $34$. Then subtract $6$ five times to get $4$. Finally, subtract $4$ to get $0$.\n\nIn the second example, you can subtract $3$ once, and then subtract $2$ three times.\n\nIn the third example, you can subtract $2$ three times.", "cfid": "2075A"}
{"problem_id": "2075C", "problem_title": "C. Two Colors", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2075/C", "problem_statement": "Monocarp has installed a new fence at his summer house. The fence consists of $n$ planks of the same size arranged in a row.\n\nMonocarp decided that he would paint his fence according to the following rules:\n\n- each plank of the fence will be painted in exactly one color;\n- the number of different colors that the planks will be painted in is exactly two;\n- the planks of the fence that are painted in the same color must form a continuous sequence, meaning that for all pairs of planks painted in the same color, there will be no planks painted in a different color between them.\n\nMonocarp has $m$ different paints, and the paint of the $i$-th color is sufficient to paint no more than $a_i$ planks of the fence. Monocarp will not buy any additional paints.\n\nYour task is to determine the number of different ways to paint the fence that satisfy all of Monocarp's described wishes. Two ways to paint are considered different if there exists a plank that is painted in different colors in these two ways.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $m$ ($2 \\le n, m \\le 2 \\cdot 10^5$) — the number of planks in the fence and the number of different colors of paint that Monocarp has.\n\nThe second line contains $m$ integers $a_1, a_2, \\dots, a_m$ ($1 \\le a_i \\le n$), where $a_i$ is the maximum number of planks that can be painted with the paint of color $i$.\n\nThe sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$. The sum of $m$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the number of different ways to paint the fence that satisfy all of Monocarp's described wishes.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n5 2\n\n2 4\n\n5 2\n\n3 4\n\n12 3\n\n5 9 8\n\n```\n\n#### Output #1\n\n```\n4\n6\n22\n```\n\n### Note\n\nIn the first test case, there are $4$ different ways to paint the fence (the sequences of color numbers in which the planks can be painted from left to right are listed below):\n\n1. $[1, 2, 2, 2, 2]$;\n2. $[1, 1, 2, 2, 2]$;\n3. $[2, 2, 2, 1, 1]$;\n4. $[2, 2, 2, 2, 1]$.\n\nIn the second test case, there are $6$ different ways to paint the fence (the sequences of color numbers in which the planks can be painted from left to right are listed below):\n\n1. $[1, 2, 2, 2, 2]$;\n2. $[1, 1, 2, 2, 2]$;\n3. $[1, 1, 1, 2, 2]$;\n4. $[2, 2, 1, 1, 1]$;\n5. $[2, 2, 2, 1, 1]$;\n6. $[2, 2, 2, 2, 1]$.", "cfid": "2075C"}
{"problem_id": "2075B", "problem_title": "B. Array Recoloring", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2075/B", "problem_statement": "You are given an integer array $a$ of size $n$. Initially, all elements of the array are colored red.\n\nYou have to choose exactly $k$ elements of the array and paint them blue. Then, while there is at least one red element, you have to select any red element with a blue neighbor and make it blue.\n\nThe cost of painting the array is defined as the sum of the first $k$ chosen elements and the last painted element.\n\nYour task is to calculate the maximum possible cost of painting for the given array.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^3$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $k$ ($2 \\le n \\le 5000$; $1 \\le k < n$).\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$).\n\nAdditional constraint on the input: the sum of $n$ over all test cases doesn't exceed $5000$.\n\n### Output\n\nFor each test case, print a single integer — the maximum possible cost of painting for the given array.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3 1\n\n1 2 3\n\n5 2\n\n4 2 3 1 3\n\n4 3\n\n2 2 2 2\n\n```\n\n#### Output #1\n\n```\n5\n10\n8\n```\n\n### Note\n\nIn the first example, you can initially color the $2$-nd element, and then color the elements in the order $1, 3$. Then the cost of painting is equal to $2+3=5$.\n\nIn the second example, you can initially color the elements $1$ and $5$, and then color the elements in the order $2, 4, 3$. Then the cost of painting is equal to $4+3+3=10$.\n\nIn the third example, you can initially color the elements $2, 3, 4$, and then color the $1$-st element. Then the cost of painting is equal to $2+2+2+2=8$.", "cfid": "2075B"}
{"problem_id": "2074C", "problem_title": "C. XOR and Triangle", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2074/C", "problem_statement": "This time, the pink soldiers have given you an integer $x$ ($x \\ge 2$).\n\nPlease determine if there exists a positive integer $y$ that satisfies the following conditions.\n\n- $y$ is strictly less than $x$.\n- There exists a non-degenerate triangle$^{\\text{∗}}$ with side lengths $x$, $y$, $x \\oplus y$. Here, $\\oplus$ denotes the [bitwise XOR operation](https://en.wikipedia.org/wiki/Bitwise_operation#XOR).\n\nAdditionally, if there exists such an integer $y$, output any.\n\n$^{\\text{∗}}$A triangle with side lengths $a$, $b$, $c$ is non-degenerate when $a+b > c$, $a+c > b$, $b+c > a$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 2000$). The description of the test cases follows.\n\nThe only line of each test case contains a single integer $x$ ($2 \\le x \\le 10^9$).\n\n### Output\n\nFor each test case, print one integer on a separate line. The integer you must output is as follows:\n\n- If there exists an integer $y$ satisfying the conditions, output the value of $y$ ($1 \\le y < x$);\n- Otherwise, output $-1$.\n\nIf there exist multiple integers that satisfy the conditions, you may output any.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n5\n\n2\n\n6\n\n3\n\n69\n\n4\n\n420\n\n```\n\n#### Output #1\n\n```\n3\n-1\n5\n-1\n66\n-1\n320\n```\n\n### Note\n\nIn the first test case, there exists a non-degenerate triangle with side lengths $3$, $5$, and $3 \\oplus 5 = 6$. Therefore, $y=3$ is a valid answer.\n\nIn the second test case, $1$ is the only possible candidate for $y$, but it cannot make a non-degenerate triangle. Therefore, the answer is $-1$.", "cfid": "2074C"}
{"problem_id": "2074A", "problem_title": "A. Draw a Square", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2074/A", "problem_statement": "The pink soldiers have given you $4$ distinct points on the plane. The $4$ points' coordinates are $(-l,0)$, $(r,0)$, $(0,-d)$, $(0,u)$ correspondingly, where $l$, $r$, $d$, $u$ are positive integers.\n\n![](https://espresso.codeforces.com/06a14f0d152a975453adebbd64d246fd9055b78c.png)In the diagram, a square is drawn by connecting the four points $L$, $R$, $D$, $U$.\n\nPlease determine if it is possible to draw a square$^{\\text{∗}}$ with the given points as its vertices.\n\n$^{\\text{∗}}$A square is defined as a polygon consisting of $4$ vertices, of which all sides have equal length and all inner angles are equal. No two edges of the polygon may intersect each other.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains four integers $l$, $r$, $d$, $u$ ($1 \\le l,r,d,u \\le 10$).\n\n### Output\n\nFor each test case, if you can draw a square using the four points, output \"Yes\". Otherwise, output \"No\".\n\nYou can output the answer in any case. For example, the strings \"yEs\", \"yes\", and \"YES\" will also be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n2 2 2 2\n\n1 2 3 4\n\n```\n\n#### Output #1\n\n```\nYes\nNo\n```\n\n### Note\n\nOn the first test case, the four given points form a square, so the answer is \"Yes\".\n\nOn the second test case, the four given points do not form a square, so the answer is \"No\".", "cfid": "2074A"}
{"problem_id": "2074D", "problem_title": "D. Counting Points", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2074/D", "problem_statement": "The pink soldiers drew $n$ circles with their center on the $x$-axis of the plane. Also, they have told that the sum of radii is exactly $m$$^{\\text{∗}}$.\n\nPlease find the number of integer points inside or on the border of at least one circle. Formally, the problem is defined as follows.\n\nYou are given an integer sequence $x_1,x_2,\\ldots,x_n$ and a positive integer sequence $r_1,r_2,\\ldots,r_n$, where it is known that $\\sum_{i=1}^n r_i = m$.\n\nYou must count the number of integer pairs $(x,y)$ that satisfy the following condition.\n\n- There exists an index $i$ such that $(x-x_i)^2 + y^2 \\le r_i^2$ ($1 \\le i \\le n$).\n\n$^{\\text{∗}}$Is this information really useful? Don't ask me; I don't really know.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\le n \\le m \\le 2\\cdot 10^5$).\n\nThe second line of each test case contains $x_1,x_2,\\ldots,x_n$ — the centers of the circles ($-10^9 \\le x_i \\le 10^9$).\n\nThe third line of each test case contains $r_1,r_2,\\ldots,r_n$ — the radii of the circles ($1 \\le r_i$, $\\sum_{i=1}^n r_i = m$).\n\nIt is guaranteed that the sum of $m$ over all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, output the number of integer points satisfying the condition on a separate line.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2 3\n\n0 0\n\n1 2\n\n2 3\n\n0 2\n\n1 2\n\n3 3\n\n0 2 5\n\n1 1 1\n\n4 8\n\n0 5 10 15\n\n2 2 2 2\n\n```\n\n#### Output #1\n\n```\n13\n16\n14\n52\n```\n\n### Note\n\nOn the first test case, the circle with $r_1=1$ is completely inside the circle with $r_2=2$. Therefore, you only have to count the number of integer points inside the latter. There are $13$ integer points such that $x^2+y^2 \\le 2^2$, so the answer is $13$.\n\nOn the second test case, the circle with $r_1=1$ is not completely inside the circle with $r_2=2$. There are $3$ additional points that are inside the first circle but not inside the second circle, so the answer is $3+13=16$.", "cfid": "2074D"}
{"problem_id": "2074B", "problem_title": "B. The Third Side", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2074/B", "problem_statement": "The pink soldiers have given you a sequence $a$ consisting of $n$ positive integers.\n\nYou must repeatedly perform the following operation until there is only $1$ element left.\n\n- Choose two distinct indices $i$ and $j$.\n- Then, choose a positive integer value $x$ such that there exists a non-degenerate triangle$^{\\text{∗}}$ with side lengths $a_i$, $a_j$, and $x$.\n- Finally, remove two elements $a_i$ and $a_j$, and append $x$ to the end of $a$.\n\nPlease find the maximum possible value of the only last element in the sequence $a$.\n\n$^{\\text{∗}}$A triangle with side lengths $a$, $b$, $c$ is non-degenerate when $a+b > c$, $a+c > b$, $b+c > a$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$).\n\nThe second line of each test case contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($1 \\le a_i \\le 1000$) — the elements of the sequence $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the maximum possible value of the only last element on a separate line.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n1\n\n10\n\n3\n\n998 244 353\n\n5\n\n1 2 3 4 5\n\n9\n\n9 9 8 2 4 4 3 5 3\n\n```\n\n#### Output #1\n\n```\n10\n1593\n11\n39\n```\n\n### Note\n\nOn the first test case, there is already only one element. The value of the only last element is $10$.\n\nOn the second test case, $a$ is initially $[998,244,353]$. The following series of operations is valid:\n\n1. Erase $a_2=244$ and $a_3=353$, and append $596$ to the end of $a$. $a$ is now $[998,596]$.\n2. Erase $a_1=998$ and $a_2=596$, and append $1593$ to the end of $a$. $a$ is now $[1593]$.\n\nIt can be shown that the only last element cannot be greater than $1593$. Therefore, the answer is $1593$.", "cfid": "2074B"}
{"problem_id": "2074E", "problem_title": "E. Empty Triangle", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2074/E", "problem_statement": "This is an interactive problem.\n\nThe pink soldiers hid from you $n$ ($3 \\le n \\le 1500$) fixed points $(x_1,y_1), (x_2,y_2), \\ldots, (x_n,y_n)$, whose coordinates are not given to you. Also, it is known that no two points have the same coordinates, and no three points are [collinear](https://en.wikipedia.org/wiki/Collinearity).\n\nYou can ask the Frontman about three distinct indices $i$, $j$, $k$. Then, he will draw a triangle with points $(x_i,y_i)$, $(x_j,y_j)$, $(x_k,y_k)$, and respond with the following:\n\n- If at least one of the hidden points lies inside the triangle, then the Frontman gives you the index of one such point. Do note that if there are multiple such points, the Frontman can arbitrarily select one of them.\n- Otherwise, the Frontman responds with $0$.\n\n![](https://espresso.codeforces.com/8de267b041b650ab4375c054841b7e29b9cb32dd.png)Your objective in this problem is to find a triangle not containing any other hidden point, such as the blue one in the diagram.\n\nUsing at most $\\mathbf{75}$ queries, you must find any triangle formed by three of the points, not containing any other hidden point inside.\n\nDo note that the Frontman may be adaptive while choosing the point to give you. In other words, the choice of the point can be determined by various factors including but not limited to the orientation of points and the previous queries. However, note that the sequence of points will never be altered.\n\nHacks are disabled for this problem. Your solution will be judged on exactly $\\mathbf{35}$ input files, including the example input.\n\n### Interaction\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 20$). The description of the test cases follows.\n\nThe first line of each test case contains one positive integer $n$ — the number of points ($3 \\le n \\le 1500$).\n\nAfterwards, you can output the following on a separate line to ask a query:\n\n- \"? i j k\" ($1 \\le i,j,k \\le n$, $i \\ne j$, $i \\ne k$, $j \\ne k$): Ask about the triangle formed by $(x_i,y_i)$, $(x_j,y_j)$, $(x_k,y_k)$.\n\nThen, the interactor responds with one integer on a new line:\n\n- If your query is invalid or the number of queries has exceeded $\\mathbf{75}$, then the interactor responds with $-1$;\n- If there exists an index $p$ ($1 \\le p \\le n$) such that the point $(x_p,y_p)$ is inside the triangle, then any such index $p$ is given;\n- Otherwise, the interactor responds with $0$.\n\nIf you want to print an answer, you can output the following on a separate line:\n\n- \"! i j k\" ($1 \\le i,j,k \\le n$, $i \\ne j$, $i \\ne k$, $j \\ne k$): The triangle formed by $(x_i,y_i)$, $(x_j,y_j)$, $(x_k,y_k)$ contains no other hidden point.\n\nThen, the following interaction happens:\n\n- If the answer is invalid or the triangle contains another hidden point, the interactor responds with $-1$;\n- If the answer is correct and there are more test cases to solve, you are given the value of $n$ for the next test case;\n- Otherwise, it means that all test cases are solved correctly, and your program may terminate gracefully.\n\nDo note that printing the answer does not count towards the number of queries made.\n\nDo note that the interactor may be adaptive while choosing the point to give you. In other words, the choice of the point can be determined by various factors including but not limited to the orientation of points and the previous queries. However, note that the sequence of points will never be altered.\n\nAfter printing each query do not forget to output the end of line and flush$^{\\text{∗}}$ the output. Otherwise, you will get Idleness limit exceeded verdict.\n\nIf, at any interaction step, you read $-1$ instead of valid data, your solution must exit immediately. This means that your solution will receive Wrong answer because of an invalid query or any other mistake. Failing to exit can result in an arbitrary verdict because your solution will continue to read from a closed stream.\n\nHacks\n\nHacks are disabled for this problem. Your solution will be judged on exactly $\\mathbf{35}$ input files, including the example input.\n\n$^{\\text{∗}}$To flush, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- sys.stdout.flush() in Python;\n- see the documentation for other languages.\n\n### Example\n\n#### Input #1\n\n```\n2\n6\n\n5\n\n4\n\n0\n\n3\n```\n\n#### Output #1\n\n```\n\n? 1 2 3\n\n? 1 5 3\n\n? 2 5 6\n\n! 2 5 6\n\n! 1 2 3\n```\n\n### Note\n\nIn the first test case, the points are $(3,0),(0,3),(5,2),(3,1),(2,2),(4,4)$.\n\nThe triangles corresponding to the three queries are as follows.\n\n![](https://espresso.codeforces.com/8de267b041b650ab4375c054841b7e29b9cb32dd.png)\n\nYou can see that the triangle formed by $(0,3)$, $(2,2)$, $(4,4)$ does not contain any other hidden point inside. Therefore, it is a valid answer.\n\nDo note that the interaction example only shows a valid interaction, and not necessarily the actual response. For example, it is possible that the Frontman responds with $4$ when you query \"? 1 2 3\". However, as the Frontman does not alter the sequence of points, he never responds with $6$ for the same query.\n\nIn the second test case, there are only $3$ points. Therefore, we know that the unique triangle formed by the points does not contain any other hidden point inside.", "cfid": "2074E"}
{"problem_id": "2078D", "problem_title": "D. Scammy Game Ad", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2078/D", "problem_statement": "Consider the following game.\n\n![](https://espresso.codeforces.com/f248ad16996fa7b100c145da56a742c674fad076.png)\n\nIn this game, a level consists of $n$ pairs of gates. Each pair contains one left gate and one right gate. Each gate performs one of two operations:\n\n- Addition Operation (\\+ a): Increases the number of people in a lane by a constant amount $a$.\n- Multiplication Operation (x a): Multiplies the current number of people in a lane by an integer $a$. This means the number of people increases by $(a - 1)$ times the current count in that lane.\n\nThe additional people gained from each operation can be assigned to either lane. However, people already in a lane cannot be moved to the other lane.\n\nInitially, there is one person in each lane. Your task is to determine the maximum total number of people that can be achieved by the end of the level.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe first line of each test case contains one integer $n$ ($1 \\leq n \\le 30$) — the number of pairs of gates.\n\nThe next $n$ lines of each test case provide the information for the left gate followed by the right gate of each gate pair. The information for each gate is given in the form + $a$ ($1 \\le a \\le 1000$) or x $a$ ($2 \\le a \\le 3$) for some integer $a$.\n\n### Output\n\nFor each test case, output a single integer — the maximum total number of people at the end of the level.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3\n\n\\+ 4 x 2\n\nx 3 x 3\n\n\\+ 7 + 4\n\n4\n\n\\+ 9 x 2\n\nx 2 x 3\n\n\\+ 9 + 10\n\nx 2 + 1\n\n4\n\nx 2 + 1\n\n\\+ 9 + 10\n\nx 2 x 3\n\n\\+ 9 x 2\n\n5\n\nx 3 x 3\n\nx 2 x 2\n\n\\+ 21 + 2\n\nx 2 x 3\n\n\\+ 41 x 3\n\n```\n\n#### Output #1\n\n```\n32\n98\n144\n351\n```\n\n### Note\n\nIn the first case, here is one possible way to play this game optimally.\n\nInitially, we have $l=1$ person in the left lane and $r=1$ person in the right lane.\n\nAfter passing through the first pair of gates, we gain $4$ people from the left gate and $1 \\cdot (2-1) = 1$ person from the right gate, for a total of $4+1=5$ people. We allocate $2$ people to the left lane and $3$ people to the right lane. This results in $l=1+2=3$ people in the left lane and $r=1+3=4$ people in the right lane.\n\nAfter passing through the second pair of gates, we gain $3 \\cdot (3-1) = 6$ people from the left gate and $4 \\cdot (3-1) = 8$ people from the right gate, for a total of $6+8=14$ people. We allocate $7$ people to the left lane and $7$ people to the right lane. This results in $l=3+7=10$ people in the left lane and $r=4+7=11$ people in the right lane.\n\nAfter passing through the last pair of gates, we gain $7$ people from the left gate and $4$ people from the right gate, for a total of $7+4=11$ people. We allocate $6$ people to the left lane and $5$ people to the right lane. This results in $l=10+6=16$ people in the left lane and $r=11+5=16$ people in the right lane.\n\nAt the end, the total number of people is $16+16=32$.", "cfid": "2078D"}
{"problem_id": "2078A", "problem_title": "A. Final Verdict", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2078/A", "problem_statement": "[Testify - void (Mournfinale) feat. 星熊南巫](https://www.youtube.com/watch?v=xkUN_9HFNPg)\n\nYou are given an array $a$ of length $n$, and must perform the following operation until the length of $a$ becomes $1$.\n\nChoose a positive integer $k < |a|$ such that $\\frac{|a|}{k}$ is an integer. Split $a$ into $k$ subsequences$^{\\text{∗}}$ $s_1, s_2, \\ldots, s_k$ such that:\n\n- Each element of $a$ belongs to exactly one subsequence.\n- The length of every subsequence is equal.\n\nAfter this, replace $a = \\left[ \\operatorname{avg}(s_1), \\operatorname{avg}(s_2), \\ldots, \\operatorname{avg}(s_k) \\right] $, where $\\operatorname{avg}(s) = \\frac{\\sum_{i = 1}^{|s|} s_i}{|s|}$ is the average of all the values in the subsequence. For example, $\\operatorname{avg}([1, 2, 1, 1]) = \\frac{5}{4} = 1.25$.\n\nYour task is to determine whether there exists a sequence of operations such that after all operations, $a = [x]$.\n\n$^{\\text{∗}}$A sequence $x$ is a subsequence of a sequence $y$ if $x$ can be obtained from $y$ by the deletion of several (possibly, zero or all) elements.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 500$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$, $x$ ($1 \\leq n, x \\leq 100$) — the length of the array $a$ and the final desired value.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 100$) — the array $a$.\n\n### Output\n\nFor each test case, output \"YES'\" (without quotes) if there exists such a sequence of operations, and \"NO\" (without quotes) otherwise.\n\nYou can output \"YES\" and \"NO\" in any case (for example, strings \"yES\", \"yes\" and \"Yes\" will be recognized as a positive response).\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n1 3\n\n3\n\n4 9\n\n7 11 2 5\n\n6 9\n\n1 9 14 12 10 8\n\n10 10\n\n10 10 10 10 10 10 10 10 10 10\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nYES\nYES\n```\n\n### Note\n\nIn the first test case, $x = 3$ and $a = [3]$ already holds.\n\nIn the second test case, $x = 9$, and there exists no sequence of operations such that after all operations, $a = [9]$.\n\nIn the third test case, $x = 9$, and here is one possible sequence of operations.\n\n1. $k = 2$, $s_1 = [1, 12, 8]$ and $s_2 = [9, 14, 10]$. Hence, $a = [\\operatorname{avg}(s_1), \\operatorname{avg}(s_2)] = [7, 11]$.\n2. $k = 1$ and $s_1 = [7, 11]$. Hence, $a = [\\operatorname{avg}(s_1)] = [9]$.\n\nIn the fourth test case, $x = 10$, and here is one possible sequence of operations.\n\n1. $k = 1$ and $s_1 = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]$. Hence, $a = [\\operatorname{avg}(s_1)] = [10]$.", "cfid": "2078A"}
{"problem_id": "2078B", "problem_title": "B. Vicious Labyrinth", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2078/B", "problem_statement": "[Axium Crisis - ak+q](https://youtu.be/1HyuI8Bvnsg?si=6amlU5OPKnJiydZs)\n\nThere are $n$ cells in a labyrinth, and cell $i$ ($1 \\leq i \\leq n$) is $n - i$ kilometers away from the exit. In particular, cell $n$ is the exit. Note also that each cell is connected to the exit but is not accessible from any other cell in any way.\n\nIn each cell, there is initially exactly one person stuck in it. You want to help everyone get as close to the exit as possible by installing a teleporter in each cell $i$ ($1 \\leq i \\leq n$), which translocates the person in that cell to another cell $a_i$.\n\nThe labyrinth owner caught you in the act. Amused, she let you continue, but under some conditions:\n\n- Everyone must use the teleporter exactly $k$ times.\n- No teleporter in any cell can lead to the same cell it is in. Formally, $i \\neq a_i$ for all $1 \\leq i \\leq n$.\n\nYou must find a teleporter configuration that minimizes the sum of distances of all individuals from the exit after using the teleporter exactly $k$ times while still satisfying the restrictions of the labyrinth owner.\n\nIf there are many possible configurations, you can output any of them.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first and only line of each test case contains two integers $n$ and $k$ ($2 \\leq n \\leq 2 \\cdot 10^5$, $1 \\leq k \\leq 10^9$) — the number of cells in the labyrinth and the value $k$.\n\nIt is guaranteed that the total sum of $n$ across all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output $n$ integers — the destinations of the teleporters $a_1, a_2, \\ldots, a_n$ in order, satisfying the given conditions ($1 \\leq a_i \\leq n$, $a_i \\neq i$).\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n2 1\n\n3 2\n\n```\n\n#### Output #1\n\n```\n2 1\n2 3 2\n```\n\n### Note\n\nIn the first test case, the position of each person is as follows.\n\n- Before teleporting: $[1, 2]$.\n- First teleportation: $[2, 1]$.\n\nThe distance sum is $(2-2) + (2-1) = 1$, which is the minimum possible.\n\nIn the second test case, the position of each person is as follows.\n\n- Before teleporting: $[1, 2, 3]$.\n- First teleportation: $[2, 3, 2]$.\n- Second teleportation: $[3, 2, 3]$.\n\nThe distance sum is $(3-3) + (3-2) + (3-3) = 1$, which is the minimum possible.", "cfid": "2078B"}
{"problem_id": "2077A", "problem_title": "A. Breach of Faith", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2077/A", "problem_statement": "[Breach of Faith - Supire feat.eili](https://www.youtube.com/watch?v=nVTiCKIIQSM)\n\nYou and your team have worked tirelessly until you have a sequence $a_1, a_2, \\ldots, a_{2n+1}$ of positive integers satisfying these properties.\n\n- $1 \\le a_i \\le 10^{18}$ for all $1 \\le i \\le 2n + 1$.\n- $a_1, a_2, \\ldots, a_{2n+1}$ are pairwise distinct.\n- $a_1 = a_2 - a_3 + a_4 - a_5 + \\ldots + a_{2n} - a_{2n+1}$.\n\nHowever, the people you worked with sabotaged you because they wanted to publish this sequence first. They deleted one number from this sequence and shuffled the rest, leaving you with a sequence $b_1, b_2, \\ldots, b_{2n}$. You have forgotten the sequence $a$ and want to find a way to recover it.\n\nIf there are many possible sequences, you can output any of them. It can be proven under the constraints of the problem that at least one sequence $a$ exists.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains one integer $n$ ($1 \\leq n \\leq 2 \\cdot 10^5$).\n\nThe second line of each test case contains $2n$ distinct integers $b_1, b_2, \\ldots, b_{2n}$ ($1 \\leq b_i \\leq 10^9$), denoting the sequence $b$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output $2n+1$ distinct integers, denoting the sequence $a$ ($1 \\leq a_i \\leq 10^{18}$).\n\nIf there are multiple possible sequences, you can output any of them. The sequence $a$ should satisfy the given conditions, and it should be possible to obtain $b$ after deleting one element from $a$ and shuffling the remaining elements.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n1\n\n9 2\n\n2\n\n8 6 1 4\n\n3\n\n99 2 86 33 14 77\n\n2\n\n1 6 3 2\n\n```\n\n#### Output #1\n\n```\n7 9 2\n1 8 4 6 9\n86 99 2 77 69 14 33\n4 6 1 2 3\n```", "cfid": "2077A"}
{"problem_id": "2071C", "problem_title": "C. Trapmigiano Reggiano", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2071/C", "problem_statement": "In an Italian village, a hungry mouse starts at vertex $\\textrm{st}$ on a given tree$^{\\text{∗}}$ with $n$ vertices.\n\nGiven a permutation $p$ of length $n$$^{\\\\text{†}}$, there are $n$ steps. For the $i$-th step:\n\n- A tempting piece of Parmesan cheese appears at vertex $p_i$. If the mouse is currently at vertex $p_i$, it will stay there and enjoy the moment. Otherwise, it will move along the simple path to vertex $p_i$ by one edge.\n\nYour task is to find such a permutation so that, after all $n$ steps, the mouse inevitably arrives at vertex $\\textrm{en}$, where a trap awaits.\n\nNote that the mouse must arrive at $\\textrm{en}$ after all $n$ steps, though it may pass through $\\textrm{en}$ earlier during the process.\n\n$^{\\text{∗}}$A tree is a connected graph without cycles.\n\n$^{\\text{†}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n$, $\\textrm{st}$, and $\\textrm{en}$ ($1 \\le n \\le 10^5$; $1 \\le \\textrm{st}, \\textrm{en} \\le n$) — the number of vertices of the tree, the starting vertex, and the trap vertex.\n\nEach of the next $n - 1$ lines contains two integers $u$ and $v$ ($1 \\le u, v \\le n$, $u \\neq v$) — the indices of the vertices connected by an edge.\n\nIt is guaranteed that the given edges form a tree.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case:\n\n- If no such permutation exists, output $-1$.\n- Otherwise, output $n$ integers $p_1, p_2, \\ldots, p_n$, representing the order in which the cheese will appear at the vertices, ensuring the mouse will eventually be caught at vertex $\\textrm{en}$.\n\nIf there are multiple solutions, print any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n1 1 1\n\n2 1 2\n\n1 2\n\n3 2 2\n\n1 2\n\n2 3\n\n6 1 4\n\n1 2\n\n1 3\n\n4 5\n\n5 6\n\n1 4\n\n```\n\n#### Output #1\n\n```\n1\n1 2\n3 1 2\n1 4 3 2 6 5```\n\n### Note\n\nIn the first test case, there is only one permutation with length $n = 1$ that is $p = [1]$, which successfully catches the mouse:\n\n\n\n$$\\textrm{st} = 1 \\overset{p_1 = 1}{\\xrightarrow{\\hspace{1.3cm}}} 1 = \\textrm{en}.$$\n\nIn the second test case, one possible permutation with length $n = 2$ is $p = [1, 2]$:\n\n\n\n$$\\textrm{st} = 1 \\overset{p_1 = 1}{\\xrightarrow{\\hspace{1.3cm}}} 1 \\overset{p_2 = 2}{\\xrightarrow{\\hspace{1.3cm}}} 2 = \\textrm{en}.$$\n\nIn the third test case, one possible permutation with length $n = 3$ is $p = [3, 1, 2]$:\n\n\n\n$$\\textrm{st} = 2 \\overset{p_1 = 3}{\\xrightarrow{\\hspace{1.3cm}}} 3 \\overset{p_2 = 1}{\\xrightarrow{\\hspace{1.3cm}}} 2 \\overset{p_3 = 2}{\\xrightarrow{\\hspace{1.3cm}}} 2 = \\textrm{en}.$$\n\n", "cfid": "2071C"}
{"problem_id": "2071B", "problem_title": "B. Perfecto", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2071/B", "problem_statement": "A permutation $p$ of length $n$$^{\\\\text{∗}}$ is perfect if, for each index $i$ ($1 \\le i \\le n$), it satisfies the following:\n\n- The sum of the first $i$ elements $p_1 + p_2 + \\ldots + p_i$ is not a perfect square$^{\\text{†}}$.\n\nYou would like things to be perfect. Given a positive integer $n$, find a perfect permutation of length $n$, or print $-1$ if none exists.\n\n$^{\\text{∗}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n$^{\\text{†}}$A perfect square is an integer that is the square of an integer, e.g., $9=3^2$ is a perfect square, but $8$ and $14$ are not.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first and only line of each test case contains a single integer $n$ ($1 \\le n \\le 5 \\cdot 10^5$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case:\n\n- If no solution exists, print a single integer $-1$.\n- Otherwise, print $n$ integers $p_1,p_2,\\ldots,p_n$ — the perfect permutation you find.\n\nIf there are multiple solutions, print any of them.\n\n### Example\n\n#### Input #1\n\n```\n3\n1\n4\n5\n```\n\n#### Output #1\n\n```\n-1\n2 4 1 3\n5 1 4 3 2```\n\n### Note\n\nIn the first test case, there is only one permutation with length $n = 1$ that is $p = [1]$, which is not perfect:\n\n- $p_1 = 1 = x^2$ for $x = 1$.\n\nIn the second test case, one possible perfect permutation with length $n = 4$ is $p = [2, 4, 1, 3]$:\n\n- $p_1 = 2 \\neq x^2$;\n- $p_1 + p_2 = 2 + 4 = 6 \\neq x^2$;\n- $p_1 + p_2 + p_3 = 2 + 4 + 1 = 7 \\neq x^2$;\n- $p_1 + p_2 + p_3 + p_4 = 2 + 4 + 1 + 3 = 10 \\neq x^2$.\n\nIn the third test case, one possible perfect permutation with length $n = 5$ is $p = [5, 1, 4, 3, 2]$:\n\n- $p_1 = 5 \\neq x^2$;\n- $p_1 + p_2 = 5 + 1 = 6 \\neq x^2$;\n- $p_1 + p_2 + p_3 = 5 + 1 + 4 = 10 \\neq x^2$;\n- $p_1 + p_2 + p_3 + p_4 = 5 + 1 + 4 + 3 = 13 \\neq x^2$;\n- $p_1 + p_2 + p_3 + p_4 + p_5 = 5 + 1 + 4 + 3 + 2 = 15 \\neq x^2$.", "cfid": "2071B"}
{"problem_id": "2071A", "problem_title": "A. The Play Never Ends", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2071/A", "problem_statement": "Let's introduce a two-player game, table tennis, where a winner is always decided and draws are impossible.\n\nThree players, Sosai, Fofo, and Hohai, want to spend the rest of their lives playing table tennis. They decided to play forever in the following way:\n\n- In each match, two players compete while the third spectates.\n\n- To ensure fairness, no player can play three times in a row. The player who plays twice in a row must sit out as a spectator in the next match, which will be played by the other two players. Otherwise, the winner and the spectator will play in the next match, while the loser will spectate.\n\nNow, the players, fully immersed in this infinite loop of matches, have tasked you with solving the following problem:\n\nGiven an integer $k$, determine whether the spectator of the first match can be the spectator in the $k$-th match.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$). The description of the test cases follows.\n\nThe only line of each test case contains one integer $k$ ($1 \\le k \\le 10^9$).\n\n### Output\n\nFor each test case, print \"YES\" (without quotes) if the spectator of the first match can be the spectator of the $k$-th match, and \"NO\" (without quotes) otherwise.\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n1\n\n2\n\n333\n\n1000000000\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nNO\nYES\n```\n\n### Note\n\nIn the first test case, the spectator of the first match is already a spectator in the $1$st match.\n\nIn the second test case, the spectator of the first match will play in the $2$nd match regardless of the result of the first match.", "cfid": "2071A"}
{"problem_id": "2071D1", "problem_title": "D1. Infinite Sequence (Easy Version)", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2071/D1", "problem_statement": "This is the easy version of the problem. The difference between the versions is that in this version, $l=r$. You can hack only if you solved all versions of this problem.\n\nYou are given a positive integer $n$ and the first $n$ terms of an infinite binary sequence $a$, which is defined as follows:\n\n- For $m>n$, $a\\_m = a\\_1 \\\\oplus a\\_2 \\\\oplus \\\\ldots \\\\oplus a\\_{\\\\lfloor \\\\frac{m}{2} \\\\rfloor}$$^{\\\\text{∗}}$.\n\nYour task is to compute the sum of elements in a given range $[l, r]$: $a_l + a_{l + 1} + \\ldots + a_r$.\n\n$^{\\\\text{∗}}$$\\\\oplus$ denotes the bitwise XOR operation.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n$, $l$, and $r$ ($1 \\le n \\le 2 \\cdot 10^5$, $1 \\le l=r\\le 10^{18}$).\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($\\color{red}{a_i \\in \\{0, 1\\}}$) — the first $n$ terms of the sequence $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the sum of elements in the given range.\n\n### Example\n\n#### Input #1\n\n```\n\n9\n\n1 1 1\n\n1\n\n2 3 3\n\n1 0\n\n3 5 5\n\n1 1 1\n\n1 234 234\n\n0\n\n5 1111 1111\n\n1 0 1 0 1\n\n1 1000000000000000000 1000000000000000000\n\n1\n\n10 87 87\n\n0 1 1 1 1 1 1 1 0 0\n\n12 69 69\n\n1 0 0 0 0 1 0 1 0 1 1 0\n\n13 46 46\n\n0 1 0 1 1 1 1 1 1 0 1 1 1\n\n```\n\n#### Output #1\n\n```\n1\n1\n0\n0\n1\n0\n1\n0\n0\n```\n\n### Note\n\nIn the first test case, the sequence $a$ is equal to \n\n$$[\\underline{\\color{red}{1}}, 1, 1, 0, 0, 1, 1, 1, 1, 1, \\ldots]$$\n\nwhere $l = 1$, and $r = 1$. The sum of elements in the range $\\[1, 1\\]$ is equal to \n\n$$a_1 = 1.$$\n\nIn the second test case, the sequence $a$ is equal to \n\n$$[\\color{red}{1}, \\color{red}{0}, \\underline{1}, 1, 1, 0, 0, 1, 1, 0, \\ldots]$$\n\nwhere $l = 3$, and $r = 3$. The sum of elements in the range $\\[3, 3\\]$ is equal to \n\n$$a_3 = 1.$$\n\n", "cfid": "2071D1"}
{"problem_id": "2070B", "problem_title": "B. Robot Program", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2070/B", "problem_statement": "There is a robot on the coordinate line. Initially, the robot is located at the point $x$ ($x \\ne 0$). The robot has a sequence of commands of length $n$ consisting of characters, where L represents a move to the left by one unit (from point $p$ to point $(p-1)$) and R represents a move to the right by one unit (from point $p$ to point $(p+1)$).\n\nThe robot starts executing this sequence of commands (one command per second, in the order they are presented). However, whenever the robot reaches the point $0$, the counter of executed commands is reset (i. e. it starts executing the entire sequence of commands from the very beginning). If the robot has completed all commands and is not at $0$, it stops.\n\nYour task is to calculate how many times the robot will enter the point $0$ during the next $k$ seconds.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of a test case contains three integers $n$, $x$ and $k$ ($1 \\le n \\le 2 \\cdot 10^5$; $-n \\le x \\le n$; $n \\le k \\le 10^{18}$).\n\nThe second line of a test case contains a string $s$ consisting of $n$ characters L and/or R.\n\nAdditional constraint on the input: the sum of $n$ over all test cases doesn't exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print a single integer — the number of times the robot will enter the point $0$ during the next $k$ seconds.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n3 2 6\n\nLLR\n\n2 -1 8\n\nRL\n\n4 -2 5\n\nLRRR\n\n5 3 7\n\nLRRLL\n\n1 1 1\n\nL\n\n3 -1 4846549234412827\n\nRLR\n\n```\n\n#### Output #1\n\n```\n1\n4\n1\n0\n1\n2423274617206414\n```\n\n### Note\n\nIn the first example, the robot moves as follows: $2 \\rightarrow 1 \\rightarrow \\underline{0} \\rightarrow -1 \\rightarrow -2 \\rightarrow -1$. The robot has completed all instructions from the sequence and is not at $0$. So it stops after $5$ seconds and the point $0$ is entered once.\n\nIn the second example, the robot moves as follows: $-1 \\rightarrow \\underline{0} \\rightarrow 1 \\rightarrow \\underline{0} \\rightarrow 1 \\rightarrow \\underline{0} \\rightarrow 1 \\rightarrow \\underline{0} \\rightarrow 1$. The robot worked $8$ seconds and the point $0$ is entered $4$ times.\n\nIn the third example, the robot moves as follows: $-2 \\rightarrow -3 \\rightarrow -2 \\rightarrow -1 \\rightarrow \\underline{0} \\rightarrow -1$. The robot worked $5$ seconds and the point $0$ is entered once.\n\nIn the fourth example, the robot moves as follows: $3 \\rightarrow 2 \\rightarrow 3 \\rightarrow 4 \\rightarrow 3 \\rightarrow 2$. The robot has completed all instructions from the sequence and is not at $0$. So it stops after $5$ seconds, without reaching the point $0$.", "cfid": "2070B"}
{"problem_id": "2070C", "problem_title": "C. Limited Repainting", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2070/C", "problem_statement": "You are given a strip, consisting of $n$ cells, all cells are initially colored red.\n\nIn one operation, you can choose a segment of consecutive cells and paint them blue. Before painting, the chosen cells can be either red or blue. Note that it is not possible to paint them red. You are allowed to perform at most $k$ operations (possibly zero).\n\nFor each cell, the desired color after all operations is specified: red or blue.\n\nIt is clear that it is not always possible to satisfy all requirements within $k$ operations. Therefore, for each cell, a penalty is also specified, which is applied if the cell ends up the wrong color after all operations. For the $i$-th cell, the penalty is equal to $a_i$.\n\nThe penalty of the final painting is calculated as the maximum penalty among all cells that are painted the wrong color. If there are no such cells, the painting penalty is equal to $0$.\n\nWhat is the minimum penalty of the final painting that can be achieved?\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\le n \\le 3 \\cdot 10^5$; $0 \\le k \\le n$) — the length of the strip and the maximum number of operations.\n\nThe second line contains a string $s$, consisting of $n$ characters 'R' and/or 'B'. 'R' means that the cell should be painted red. 'B' means that the cell should be painted blue.\n\nThe third line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$) — the penalty for each cell.\n\nThe sum of $n$ over all test cases does not exceed $3 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print a single integer — the minimum penalty of the final painting.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n4 1\n\nBRBR\n\n9 3 5 4\n\n4 1\n\nBRBR\n\n9 5 3 4\n\n4 2\n\nBRBR\n\n9 3 5 4\n\n10 2\n\nBRBRBBRRBR\n\n5 1 2 4 5 3 6 1 5 4\n\n5 5\n\nRRRRR\n\n5 3 1 2 4\n\n```\n\n#### Output #1\n\n```\n3\n3\n0\n4\n0\n```\n\n### Note\n\nIn the first test case, you can paint the cells from $1$ to $3$. The painting will be BBBR. So, only cell $2$ is painted the wrong color. Therefore, the penalty for it is the final penalty and equals $3$.\n\nIn the second test case, the painting BBBR will now result in a penalty of $5$. However, if you paint the cells from $1$ to $1$, resulting in BRRR, then only cell $3$ is painted the wrong color. The final penalty is $3$.\n\nIn the third test case, you can paint the cells from $1$ to $1$ and from $3$ to $3$. Then all cells will be the correct color, the penalty equals $0$.", "cfid": "2070C"}
{"problem_id": "2070A", "problem_title": "A. FizzBuzz Remixed", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2070/A", "problem_statement": "FizzBuzz is one of the most well-known problems from coding interviews. In this problem, we will consider a remixed version of FizzBuzz:\n\nGiven an integer $n$, process all integers from $0$ to $n$. For every integer such that its remainders modulo $3$ and modulo $5$ are the same (so, for every integer $i$ such that $i \\bmod 3 = i \\bmod 5$), printFizzBuzz.\n\nHowever, you don't have to solve it. Instead, given the integer $n$, you have to report how many times the correct solution to that problem will print FizzBuzz.\n\n### Input\n\nThe first line contains one integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nEach test case contains one line consisting of one integer $n$ ($0 \\le n \\le 10^9$).\n\n### Output\n\nFor each test case, print one integer — the number of times the correct solution will print FizzBuzz with the given value of $n$.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n0\n\n5\n\n15\n\n42\n\n1337\n\n17101997\n\n998244353\n\n```\n\n#### Output #1\n\n```\n1\n3\n4\n9\n270\n3420402\n199648872\n```\n\n### Note\n\nIn the first test case, the solution will print FizzBuzz for the integer $0$.\n\nIn the second test case, the solution will print FizzBuzz for the integers $0, 1, 2$.\n\nIn the third test case, the solution will print FizzBuzz for the integers $0, 1, 2, 15$.", "cfid": "2070A"}
{"problem_id": "2070D", "problem_title": "D. Tree Jumps", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2070/D", "problem_statement": "You are given a rooted tree, consisting of $n$ vertices. The vertices in the tree are numbered from $1$ to $n$, and the root is the vertex $1$. Let $d_x$ be the distance (the number of edges on the shortest path) from the root to the vertex $x$.\n\nThere is a chip that is initially placed at the root. You can perform the following operation as many times as you want (possibly zero):\n\n- move the chip from the current vertex $v$ to a vertex $u$ such that $d_u = d_v + 1$. If $v$ is the root, you can choose any vertex $u$ meeting this constraint; however, if $v$ is not the root, $u$ should not be a neighbor of $v$ (there should be no edge connecting $v$ and $u$).\n\n![](https://espresso.codeforces.com/769463352aac7806978d82f0bd49238491821303.png)\n\nFor example, in the tree above, the following chip moves are possible: $1 \\rightarrow 2$, $1 \\rightarrow 5$, $2 \\rightarrow 7$, $5 \\rightarrow 3$, $5 \\rightarrow 4$, $3 \\rightarrow 6$, $7 \\rightarrow 6$.\n\nA sequence of vertices is valid if you can move the chip in such a way that it visits all vertices from the sequence (and only them), in the order they are given in the sequence.\n\nYour task is to calculate the number of valid vertex sequences. Since the answer might be large, print it modulo $998244353$.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n \\le 3 \\cdot 10^5$).\n\nThe second line contains $n-1$ integers $p_2, p_3, \\dots, p_n$ ($1 \\le p_i < i$), where $p_i$ is the parent of the $i$-th vertex in the tree. Vertex $1$ is the root.\n\nAdditional constraint on the input: the sum of $n$ over all test cases doesn't exceed $3 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print a single integer — the number of valid vertex sequences, taken modulo $998244353$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n4\n\n1 2 1\n\n3\n\n1 2\n\n7\n\n1 2 2 1 4 5\n\n```\n\n#### Output #1\n\n```\n4\n2\n8\n```\n\n### Note\n\nIn the first example, the following sequences are valid: $[1]$, $[1, 2]$, $[1, 4]$, $[1, 4, 3]$.\n\nIn the second example, the following sequences are valid: $[1]$, $[1, 2]$.\n\nIn the third example, the following sequences are valid: $[1]$, $[1, 2]$, $[1, 2, 7]$, $[1, 2, 7, 6]$, $[1, 5]$, $[1, 5, 3]$, $[1, 5, 3, 6]$, $[1, 5, 4]$.", "cfid": "2070D"}
{"problem_id": "2072E", "problem_title": "E. Do You Love Your Hero and His Two-Hit Multi-Target Attacks?", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2072/E", "problem_statement": "Akito decided to study a new powerful spell. Since it possesses immeasurable strength, it certainly requires a lot of space and careful preparation. For this, Akito went out into the field. Let's represent the field as a Cartesian coordinate system.\n\nFor the spell, Akito needs to place $0 \\le n \\le 500$ staffs at distinct integer coordinates in the field such that there will be exactly $k$ pairs $(i, j)$ such that $1 \\le i < j \\le n$ and $\\rho(i, j) = d(i, j)$.\n\nHere, for two points with integer coordinates $a = (x_a, y_a)$ and $b = (x_b, y_b)$, $\\rho(a, b) = \\sqrt{(x_a - x_b)^2 + (y_a - y_b)^2}$ and $d(a, b) = |x_a - x_b| + |y_a - y_b|$.\n\n### Input\n\nThe first line of input contains a single number $t$ ($1 \\le t \\le 1000$) — the number of test cases.\n\nIn the only line of each test case, there is a single number $k$ ($0 \\le k \\le 10^5$) — the number of pairs of staffs for which the equality $\\rho(i, j) = d(i, j)$ must hold.\n\n### Output\n\nFor each test case, the first line of output should print the number $n$ ($0 \\le n \\le 500$) — the number of placed staffs.\n\nIn the following $n$ lines, pairs of integers $x_i, y_i$ $(-10^9 \\le x_i, y_i \\le 10^9)$ should be printed — the coordinates of the $i$-th staff. The points in which staffs stand must be distinct.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n0\n\n2\n\n5\n\n```\n\n#### Output #1\n\n```\n6\n69 52\n4 20\n789 9308706\n1337 1337\n-1234 -5678\n23456178 707\n10\n-236 -346262358\n273568 6435267\n2365437 31441367\n246574 -45642372\n-236 56\n4743623 -192892\n10408080 -8173135\n-237415357 31441367\n-78125638 278\n56 143231\n5\n1 1\n2 1\n1 5\n3 5\n1 10```", "cfid": "2072E"}
{"problem_id": "2072D", "problem_title": "D. For Wizards, the Exam Is Easy, but I Couldn't Handle It", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2072/D", "problem_statement": "Akito got tired of being a simple locksmith at a bank, so he decided to enroll in the Magical Academy and become the best wizard in the world! However, to enroll, he needed to solve a single problem on the exam, which the ambitious hero could not manage.\n\nIn the problem, he was given an array $a$ of length $n$. He needed to minimize the number of inversions$^{\\text{∗}}$ in the array after applying the spell exactly once. The spell was simple; to apply it, Akito had to choose two numbers $l$ and $r$ such that $1 \\le l \\le r \\le n$ and perform a cyclic shift of the subarray from $l$ to $r$ one position to the left.\n\nMore formally, Akito selects the subarray $[l, r]$ and modifies the array as follows:\n\n- From the original array $[a_1, a_2, \\ldots, a_{l - 1}, \\mathbf{ a_l }, \\mathbf{ a_{l + 1} } , \\mathbf{ \\ldots }, \\mathbf{ a_{r - 1} }, \\mathbf{ a_r }, a_{r + 1}, \\ldots, a_{n - 1}, a_n]$, he obtains the array $[a_1, a_2, \\ldots, a_{l - 1}, \\mathbf{ a_{l + 1} }, \\mathbf{ a_{l + 2} }, \\mathbf{ \\ldots }, \\mathbf{ a_{r - 1} }, \\mathbf{ a_{r} }, \\mathbf{ a_{l} }, a_{r + 1}, \\ldots, a_{n - 1}, a_{n}]$.\n\nAkito is eager to start his studies, but he still hasn't passed the exam. Help him enroll and solve the problem!\n\n$^{\\text{∗}}$An inversion in an array $b$ of length $m$ is defined as a pair of indices $(i, j)$ such that $1 \\le i < j \\le m$ and $b_i > b_j$. For example, in the array $b = [3, 1, 4, 1, 5]$, the inversions are the pairs of indices $(1, 2)$, $(1, 4)$, $(3, 4)$.\n\n### Input\n\nThe first line of input contains a number $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nIn the first line of each test case, there is a number $n$ ($1 \\le n \\le 2000$) — the length of the array $a$.\n\nIn the second line of each test case, there are $n$ numbers $a_i$ ($1 \\le a_i \\le 2000$) — the elements of the array $a$.\n\nIt is guaranteed that the sum of $n^2$ across all test cases does not exceed $4 \\cdot 10^6$.\n\n### Output\n\nFor each test case, output two numbers $l$ and $r$ ($1 \\le l \\le r \\le n$) — the boundaries of the subarray that should be chosen so that after applying the spell, the number of inversions in the array is minimized.\n\nIf there are multiple suitable pairs of boundaries, you may output any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n9\n\n7\n\n1 4 3 2 5 3 3\n\n6\n\n1 4 3 2 5 3\n\n8\n\n7 6 5 8 4 3 2 1\n\n10\n\n1 1 1 5 1 1 5 6 7 8\n\n2\n\n1337 69\n\n4\n\n2 1 2 1\n\n3\n\n998 244 353\n\n3\n\n1 2 1\n\n9\n\n1 1 2 3 5 8 13 21 34\n\n```\n\n#### Output #1\n\n```\n2 7\n2 4\n1 8\n4 6\n1 2\n1 4\n1 3\n2 3\n5 5```\n\n### Note\n\nIn the first example, the array $[1, 4, 3, 2, 5, 3, 3]$ will turn into the array $[1, 3, 2, 5, 3, 3, 4]$. The inversions in it are $(2, 3)$, $(4, 5)$, $(4, 6)$ and $(4, 7)$. It can be shown that it is not possible to achieve fewer than $4$ inversions.\n\nIn the second example, the array $[1, 4, 3, 2, 5, 3]$ will turn into $[1, 3, 2, 4, 5, 3]$. The inversions in it are $(2, 3)$, $(4, 6)$, and $(5, 6)$. The pair $l = 2$ and $r = 6$ also works, then the array will turn into $[1, 3, 2, 5, 3, 4]$, which also has $3$ inversions — $(2, 3)$, $(4, 5)$, and $(4, 6)$. It can be shown that it is not possible to achieve fewer than $3$ inversions.\n\nIn the fourth example, choosing $l = 4$ and $r = 6$ transforms the array into $[1, 1, 1, 1, 1, 5, 5, 6, 7, 8]$. It is sorted, and therefore, there are no inversions.\n\nIn the last example, the array is initially sorted, so any operation on a segment of length at least $2$ will only increase the number of inversions.", "cfid": "2072D"}
{"problem_id": "2072F", "problem_title": "F. Goodbye, Banker Life", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2072/F", "problem_statement": "Monsters are approaching the city, and to protect it, Akito must create a protective field around the city. As everyone knows, protective fields come in various levels. Akito has chosen the field of level $n$. To construct the field, a special phrase is required, which is the $n$-th row of the Great Magical Triangle, represented as a two-dimensional array. We will call this array $T$.\n\nThe triangle is defined as follows:\n\n- In the $i$-th row, there are $i$ integers.\n- The single integer in the first row is $k$.\n- Let the $j$-th element of the $i$-th row be denoted as $T\\_{i,j}$. Then \n\n$$T_{i,j} = \\begin{cases} T_{i-1,j-1} \\oplus T_{i-1,j}, &\\textrm{if } 1 < j < i \\\\ T_{i-1,j}, &\\textrm{if } j = 1 \\\\ T_{i-1,j-1}, &\\textrm{if } j = i \\end{cases}$$\n\nwhere $a \\oplus b$ is the bitwise [exclusive \"OR\"](https://en.wikipedia.org/wiki/Bitwise_operation#XOR)(XOR) of the integers $a$ and $b$.\n\nHelp Akito find the integers in the $n$-th row of the infinite triangle before the monsters reach the city.\n\n### Input\n\nThe first line contains the integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nIn the only line of each test case, there are two integers $n$ and $k$ ($1 \\le n \\le 10^6,\\ 1 \\le k < 2^{31}$) — the row index that Akito needs and the integer in the first row of the Great Magical Triangle, respectively.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case, output $n$ integers — the elements of the $n$-th row of the Great Magical Triangle.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n1 5\n\n2 10\n\n3 16\n\n9 1\n\n1 52\n\n```\n\n#### Output #1\n\n```\n5\n10 10\n16 0 16\n1 0 0 0 0 0 0 0 1\n52\n```\n\n### Note\n\nIn the first example, the first row of the Great Magical Triangle is $[5]$ by definition.\n\nIn the second example, $T_{2,1} = T_{1,1} = 10$ and $T_{2,2} = T_{1, 1} = 10$.", "cfid": "2072F"}
{"problem_id": "2072B", "problem_title": "B. Having Been a Treasurer in the Past, I Help Goblins Deceive", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2072/B", "problem_statement": "After completing the first quest, Akito left the starting cave. After a while, he stumbled upon a goblin village.\n\nSince Akito had nowhere to live, he wanted to find out the price of housing. It is well known that goblins write numbers as a string of characters '-' and '\\_', and the value represented by the string $s$ is the number of distinct subsequences$^{\\text{∗}}$ of the string $s$ that are equal to the string \"\\-\\_\\-\" (this is very similar to goblin faces).\n\nFor example, the string $s=$\"\\-\\_\\-\\-\\_-\" represents the number $6$, as it has $6$ subsequences \"\\-\\_\\-\":\n\n1. $s_1+s_2+s_3$\n2. $s_1+s_2+s_4$\n3. $s_1+s_2+s_6$\n4. $s_1+s_5+s_6$\n5. $s_3+s_5+s_6$\n6. $s_4+s_5+s_6$\n\nInitially, the goblins wrote a random string-number $s$ in response to Akito's question, but then they realized that they wanted to take as much gold as possible from the traveler. To do this, they ask you to rearrange the characters in the string $s$ so that the value of the number represented by the string $s$ is maximized.\n\n$^{\\text{∗}}$A subsequence of a string $a$ is a string $b$ that can be obtained by deleting several (possibly $0$) characters from $a$. Subsequences are considered different if they are obtained by deleting different sets of indices.\n\n### Input\n\nThe first line contains the number $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nIn the first line of each test case, there is one number $n$ ($1 \\le n \\le 2 \\cdot 10^5$) — the length of the string written by the goblins.\n\nIn the second line of each test case, there is a string $s$ of length $n$, consisting only of characters '-' and '\\_' — the string written by the goblins.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, you need to output one number — the maximum number of subsequences equal to the string \"-\\_-\", if the characters in the string $s$ are optimally rearranged.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n3\n\n\\-\\-\\_\n\n5\n\n\\_\\_\\-\\_\\_\n\n9\n\n\\-\\-\\_\\_\\-\\_---\n\n4\n\n\\_\\-\\-\\_\n\n10\n\n\\_\\-\\_\\-\\_\\-\\_-\\_-\n\n7\n\n\\_\\-\\-\\----\n\n1\n\n-\n\n2\n\n\\_-\n\n```\n\n#### Output #1\n\n```\n1\n0\n27\n2\n30\n9\n0\n0\n```\n\n### Note\n\nIn the first test case, it is beneficial to rearrange the characters to form the string \"-\\_-\". This is the only string of three characters that has at least one subsequence \"-\\_-\".\n\nIn the second test case, there is only one character \"-\", and at least two are needed for the subsequence \"-\\_-\". This means that for any rearrangement of characters, the answer will be $0$.\n\nIn the seventh and eighth test cases, the length of the string $n < 3$, which means that subsequences of length $3$ do not exist.", "cfid": "2072B"}
{"problem_id": "2072A", "problem_title": "A. New World, New Me, New Array", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2072/A", "problem_statement": "Natsume Akito has just woken up in a new world and immediately received his first quest! The system provided him with an array $a$ of $n$ zeros, an integer $k$, and an integer $p$.\n\nIn one operation, Akito chooses two integers $i$ and $x$ such that $1 \\le i \\le n$ and $-p \\le x \\le p$, and performs the assignment $a_i = x$.\n\nAkito is still not fully accustomed to controlling his new body, so help him calculate the minimum number of operations required to make the sum of all elements in the array equal to $k$, or tell him that it is impossible.\n\n### Input\n\nThe first line of input contains one integer $t$ ($1 \\le t \\le 1000$) — the number of test cases.\n\nThe only line of each test case contains three integers $n$, $k$, $p$ ($1 \\le n \\le 50$, $-2500 \\le k \\le 2500$, $1 \\le p \\le 50$) — the length of the array, the required sum, and the boundary of the segment from which numbers can be replaced.\n\n### Output\n\nFor each test case, output the minimum number of operations to achieve the final sum $k$ in the array, or $-1$ if it is impossible to achieve the sum $k$.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n21 100 10\n\n9 -420 42\n\n5 -7 2\n\n13 37 7\n\n10 0 49\n\n1 10 9\n\n7 -7 7\n\n20 31 1\n\n```\n\n#### Output #1\n\n```\n10\n-1\n4\n6\n0\n-1\n1\n-1\n```\n\n### Note\n\nIn the fifth example, the sum of the array is initially zero, so no operations are needed.\n\nIn the sixth example, the maximum sum in the array that we can achieve is $9$ (by assigning the number $9$ to the single element), so the sum $10$ cannot be obtained by any operations.\n\nIn the seventh example, only one operation $a_3 = -7$ is needed.", "cfid": "2072A"}
{"problem_id": "2072C", "problem_title": "C. Creating Keys for StORages Has Become My Main Skill", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2072/C", "problem_statement": "Akito still has nowhere to live, and the price for a small room is everywhere. For this reason, Akito decided to get a job at a bank as a key creator for storages.\n\nIn this magical world, everything is different. For example, the key for a storage with the code $(n, x)$ is an array $a$ of length $n$ such that:\n\n- $a_1 \\ | \\ a_2 \\ | \\ a_3 \\ | \\ \\ldots \\ | \\ a_n = x$, where $a \\ | \\ b$ is the [bitwise \"OR\"](https://en.wikipedia.org/wiki/Bitwise_operation#OR) of numbers $a$ and $b$.\n- $\\\\text{MEX}(\\\\{ a\\_1, a\\_2, a\\_3, \\\\ldots, a\\_n \\\\})$$^{\\\\text{∗}}$ is maximized among all such arrays.\n\nAkito diligently performed his job for several hours, but suddenly he got a headache. Substitute for him for an hour; for the given $n$ and $x$, create any key for the storage with the code $(n, x)$.\n\n$^{\\\\text{∗}}$$\\\\text{MEX}(S)$ is the minimum non-negative integer $z$ such that $z$ is not contained in the set $S$ and all $0 \\\\le y < z$ are contained in $S$.\n\n### Input\n\nThe first line contains the number $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nIn the only line of each test case, two numbers $n$ and $x$ ($1 \\le n \\le 2 \\cdot 10^5, 0 \\le x < 2^{30}$) are given — the length of the array and the desired value of the bitwise \"OR\".\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output $n$ integers $a_i$ ($0 \\le a_i < 2^{30}$) — the elements of the key array that satisfy all the conditions.\n\nIf there are multiple suitable arrays, output any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n9\n\n1 69\n\n7 7\n\n5 7\n\n7 3\n\n8 7\n\n3 52\n\n9 11\n\n6 15\n\n2 3\n\n```\n\n#### Output #1\n\n```\n69\n6 0 3 4 1 2 5\n4 1 3 0 2\n0 1 2 3 2 1 0\n7 0 6 1 5 2 4 3\n0 52 0\n0 1 8 3 0 9 11 2 10\n4 0 3 8 1 2\n0 3```", "cfid": "2072C"}
{"problem_id": "2069D", "problem_title": "D. Palindrome Shuffle", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2069/D", "problem_statement": "You are given a string $s$ consisting of lowercase Latin letters.\n\nYou can perform the following operation with the string $s$: choose a contiguous substring (possibly empty) of $s$ and shuffle it (reorder the characters in the substring as you wish).\n\nRecall that a palindrome is a string that reads the same way from the first character to the last and from the last character to the first. For example, the strings a, bab, acca, bcabcbacb are palindromes, but the strings ab, abbbaa, cccb are not.\n\nYour task is to determine the minimum possible length of the substring on which the aforementioned operation must be performed in order to convert the given string $s$ into a palindrome.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe only line of each test case contains a string $s$ ($2 \\le |s| \\le 2 \\cdot 10^5$), consisting of lowercase Latin letters.\n\nAdditional constraints on the input:\n\n- the string $s$ has an even length;\n- the string $s$ can always be converted to a palindrome;\n- the sum of lengths of $s$ over all test cases doesn't exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print a single integer — the minimum possible length of the substring on which the aforementioned operation must be performed in order to convert the given string $s$ into a palindrome.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\nbaba\n\ncc\n\nddaa\n\nacbacddacbca\n\n```\n\n#### Output #1\n\n```\n2\n0\n3\n2\n```\n\n### Note\n\nIn the first example, you can perform the operation as follows: baba $\\rightarrow$ baab.\n\nIn the second example, the string is already a palindrome, so we can shuffle an empty substring.\n\nIn the third example, you can perform the operation as follows: ddaa $\\rightarrow$ adda.\n\nIn the fourth example, you can perform the operation as follows: acbacddacbca $\\rightarrow$ acbcaddacbca.", "cfid": "2069D"}
{"problem_id": "2069C", "problem_title": "C. Beautiful Sequence", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2069/C", "problem_statement": "Let's call an integer sequence beautiful if the following conditions hold:\n\n- its length is at least $3$;\n- for every element except the first one, there is an element to the left less than it;\n- for every element except the last one, there is an element to the right larger than it;\n\nFor example, $[1, 4, 2, 4, 7]$ and $[1, 2, 4, 8]$ are beautiful, but $[1, 2]$, $[2, 2, 4]$, and $[1, 3, 5, 3]$ are not.\n\nRecall that a subsequence is a sequence that can be obtained from another sequence by removing some elements without changing the order of the remaining elements.\n\nYou are given an integer array $a$ of size $n$, where every element is from $1$ to $3$. Your task is to calculate the number of beautiful subsequences of the array $a$. Since the answer might be large, print it modulo $998244353$.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($3 \\le n \\le 2 \\cdot 10^5$).\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 3$).\n\nAdditional constraint on the input: the sum of $n$ over all test cases doesn't exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print a single integer — the number of beautiful subsequences of the array $a$, taken modulo $998244353$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n7\n\n3 2 1 2 2 1 3\n\n4\n\n3 1 2 2\n\n3\n\n1 2 3\n\n9\n\n1 2 3 2 1 3 2 2 3\n\n```\n\n#### Output #1\n\n```\n3\n0\n1\n22\n```\n\n### Note\n\nIn the first test case of the example, the following subsequences are beautiful:\n\n- $[a_3, a_4, a_7]$;\n- $[a_3, a_5, a_7]$;\n- $[a_3, a_4, a_5, a_7]$.", "cfid": "2069C"}
{"problem_id": "2069B", "problem_title": "B. Set of Strangers", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2069/B", "problem_statement": "You are given a table of $n$ rows and $m$ columns. Initially, the cell at the $i$-th row and the $j$-th column has color $a_{i, j}$.\n\nLet's say that two cells are strangers if they don't share a side. Strangers are allowed to touch with corners.\n\nLet's say that the set of cells is a set of strangers if all pairs of cells in the set are strangers. Sets with no more than one cell are sets of strangers by definition.\n\nIn one step, you can choose any set of strangers such that all cells in it have the same color and paint all of them in some other color. You can choose the resulting color.\n\nWhat is the minimum number of steps you need to make the whole table the same color?\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. Next, $t$ cases follow.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\le n \\le m \\le 700$) — the number of rows and columns in the table.\n\nThe next $n$ lines contain the colors of cells in the corresponding row $a_{i, 1}, \\dots, a_{i, m}$ ($1 \\le a_{i, j} \\le nm$).\n\nIt's guaranteed that the total sum of $nm$ doesn't exceed $5 \\cdot 10^5$ over all test cases.\n\n### Output\n\nFor each test case, print one integer — the minimum number of steps to paint all cells of the table the same color.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n1 1\n\n1\n\n3 3\n\n1 2 1\n\n2 3 2\n\n1 3 1\n\n1 6\n\n5 4 5 4 4 5\n\n3 4\n\n1 4 2 2\n\n1 4 3 5\n\n6 6 3 5\n\n```\n\n#### Output #1\n\n```\n0\n2\n1\n10\n```\n\n### Note\n\nIn the first test case, the table is painted in one color from the start.\n\nIn the second test case, you can, for example, choose all cells with color $1$ and paint them in $3$. Then choose all cells with color $2$ and also paint them in $3$.\n\nIn the third test case, you can choose all cells with color $5$ and paint them in color $4$.", "cfid": "2069B"}
{"problem_id": "2069A", "problem_title": "A. Was there an Array?", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2069/A", "problem_statement": "For an array of integers $a_1, a_2, \\dots, a_n$, we define its equality characteristic as the array $b_2, b_3, \\dots, b_{n-1}$, where $b_i = 1$ if the $i$-th element of the array $a$ is equal to both of its neighbors, and $b_i = 0$ if the $i$-th element of the array $a$ is not equal to at least one of its neighbors.\n\nFor example, for the array $[1, 2, 2, 2, 3, 3, 4, 4, 4, 4]$, the equality characteristic will be $[0, 1, 0, 0, 0, 0, 1, 1]$.\n\nYou are given the array $b_2, b_3, \\dots, b_{n-1}$. Your task is to determine whether there exists such an array $a$ for which the given array is the equality characteristic.\n\n### Input\n\nThe first line contains one integer $t$ ($1 \\le t \\le 1000$) — the number of test cases.\n\nEach test case consists of two lines:\n\n- the first line contains one integer $n$ ($3 \\le n \\le 100$);\n- the second line contains $n-2$ integers $b_2, b_3, \\dots, b_{n-1}$ ($0 \\le b_i \\le 1$).\n\n### Output\n\nFor each test case, output YES if the array $a$ exists, or NO if such an array does not exist. Each letter can be printed in any case.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n10\n\n0 1 0 0 0 0 1 1\n\n3\n\n1\n\n10\n\n0 1 0 1 1 0 0 1\n\n```\n\n#### Output #1\n\n```\nYES\nYES\nNO\n```\n\n### Note\n\nIn the first example, the array $a = [1, 2, 2, 2, 3, 3, 4, 4, 4, 4]$ is suitable.\n\nIn the second example, the array $a = [7, 7, 7]$ is suitable.", "cfid": "2069A"}
{"problem_id": "2064C", "problem_title": "C. Remove the Ends", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2064/C", "problem_statement": "You have an array $a$ of length $n$ consisting of non-zero integers. Initially, you have $0$ coins, and you will do the following until $a$ is empty:\n\n- Let $m$ be the current size of $a$. Select an integer $i$ where $1 \\\\le i \\\\le m$, gain $\\|a\\_i\\|$$^{\\\\text{∗}}$ coins, and then:\n  - if $a_i < 0$, then replace $a$ with $[a_1,a_2,\\ldots,a_{i - 1}]$ (that is, delete the suffix beginning with $a_i$);\n  - otherwise, replace $a$ with $[a_{i + 1},a_{i + 2},\\ldots,a_m]$ (that is, delete the prefix ending with $a_i$).\n\nFind the maximum number of coins you can have at the end of the process.\n\n$^{\\text{∗}}$Here $|a_i|$ represents the absolute value of $a_i$: it equals $a_i$ when $a_i > 0$ and $-a_i$ when $a_i < 0$.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10^4$) — the number of testcases.\n\nThe first line of each testcase contains an integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) — the length of $a$.\n\nThe second line of each testcase contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($-10^9 \\le a_i \\le 10^9$, $a_i \\ne 0$).\n\nThe sum of $n$ across all testcases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the maximum number of coins you can have at the end of the process.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n6\n\n3 1 4 -1 -5 -9\n\n6\n\n-10 -3 -17 1 19 20\n\n1\n\n1\n\n```\n\n#### Output #1\n\n```\n23\n40\n1\n```\n\n### Note\n\nAn example of how to get $23$ coins in the first testcase is as follows:\n\n- $a = [3, 1, 4, -1, -5, \\color{red}{-9}] \\xrightarrow{i = 6} a = [3, 1, 4, -1, -5] $, and get $9$ coins.\n- $a = [\\color{red}{3}, 1, 4, -1, -5] \\xrightarrow{i = 1} a = [1, 4, -1, -5] $, and get $3$ coins.\n- $a = [\\color{red}{1}, 4, -1, -5] \\xrightarrow{i = 1} a = [4, -1, -5] $, and get $1$ coin.\n- $a = [4, -1, \\color{red}{-5}] \\xrightarrow{i = 3} a = [4, -1] $, and get $5$ coins.\n- $a = [4, \\color{red}{-1}] \\xrightarrow{i = 2} a = [4] $, and get $1$ coin.\n- $a = [\\color{red}{4}] \\xrightarrow{i = 1} a = [] $, and get $4$ coins.\n\nAfter all the operations, you have $23$ coins.\n\nAn example of how to get $40$ coins in the second testcase is as follows:\n\n- $a = [-10, -3, -17, \\color{red}{1}, 19, 20] \\xrightarrow{i = 4} a = [19, 20] $, and get $1$ coin.\n- $a = [\\color{red}{19}, 20] \\xrightarrow{i = 1} a = [20] $, and get $19$ coins.\n- $a = [\\color{red}{20}] \\xrightarrow{i = 1} a = [] $, and get $20$ coins.\n\nAfter all the operations, you have $40$ coins.", "cfid": "2064C"}
{"problem_id": "2064A", "problem_title": "A. Brogramming Contest", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2064/A", "problem_statement": "One day after waking up, your friend challenged you to a brogramming contest. In a brogramming contest, you are given a binary string$^{\\text{∗}}$ $s$ of length $n$ and an initially empty binary string $t$. During a brogramming contest, you can make either of the following moves any number of times:\n\n- remove some suffix$^{\\text{†}}$ from $s$ and place it at the end of $t$, or\n- remove some suffix from $t$ and place it at the end of $s$.\n\nTo win the brogramming contest, you must make the minimum number of moves required to make $s$ contain only the character $\\texttt{0}$ and $t$ contain only the character $\\texttt{1}$. Find the minimum number of moves required.\n\n$^{\\text{∗}}$A binary string is a string consisting of characters $\\texttt{0}$ and $\\texttt{1}$.\n\n$^{\\text{†}}$A string $a$ is a suffix of a string $b$ if $a$ can be obtained from deletion of several (possibly, zero or all) elements from the beginning of $b$.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\le t \\le 100$) — the number of test cases.\n\nThe first line of each test case is an integer $n$ ($1 \\le n \\le 1000$) — the length of the string $s$.\n\nThe second line of each test case contains the binary string $s$.\n\nThe sum of $n$ across all test cases does not exceed $1000$.\n\n### Output\n\nFor each testcase, output the minimum number of moves required.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n5\n\n00110\n\n4\n\n1111\n\n3\n\n001\n\n5\n\n00000\n\n3\n\n101\n\n```\n\n#### Output #1\n\n```\n2\n1\n1\n0\n3\n```\n\n### Note\n\nAn optimal solution to the first test case is as follows:\n\n- $s = \\texttt{00}\\color{red}{\\texttt{110}}$, $t =$ empty string.\n- $s = \\texttt{00}$, $t = \\texttt{11}\\color{red}{\\texttt{0}}$.\n- $s = \\texttt{000}$, $t = \\texttt{11}$.\n\nIt can be proven that there is no solution using less than $2$ moves.\n\nIn the second test case, you have to move the whole string from $s$ to $t$ in one move.\n\nIn the fourth test case, you don't have to do any moves.", "cfid": "2064A"}
{"problem_id": "2064B", "problem_title": "B. Variety is Discouraged", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2064/B", "problem_statement": "Define the score of an arbitrary array $b$ to be the length of $b$ minus the number of distinct elements in $b$. For example:\n\n- The score of $[1, 2, 2, 4]$ is $1$, as it has length $4$ and only $3$ distinct elements ($1$, $2$, $4$).\n- The score of $[1, 1, 1]$ is $2$, as it has length $3$ and only $1$ distinct element ($1$).\n- The empty array has a score of $0$.\n\nYou have an array $a$. You need to remove some non-empty contiguous subarray from $a$ at most once.\n\nMore formally, you can do the following at most once:\n\n- pick two integers $l$, $r$ where $1 \\le l \\le r \\le n$, and\n- delete the contiguous subarray $[a_l,\\ldots,a_r]$ from $a$ (that is, replace $a$ with $[a_1,\\ldots,a_{l - 1},a_{r + 1},\\ldots,a_n]$).\n\nOutput an operation such that the score of $a$ is maximum; if there are multiple answers, output one that minimises the final length of $a$ after the operation. If there are still multiple answers, you may output any of them.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10^4$) — the number of testcases.\n\nThe first line of each testcase contains an integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) — the length of the array $a$.\n\nThe second line of each testcase contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($1 \\le a_i \\le n$).\n\nThe sum of $n$ across all testcases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each testcase, if you wish to not make a move, output $0$.\n\nOtherwise, output two integers $l$ and $r$ ($1 \\le l \\le r \\le n$), representing the left and right bound of the removed subarray.\n\nThe removed subarray should be chosen such that the score is maximized, and over all such answers choose any of them that minimises the final length of the array.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n1\n\n1\n\n5\n\n1 1 1 1 1\n\n4\n\n2 1 3 2\n\n```\n\n#### Output #1\n\n```\n1 1\n0\n2 3\n```\n\n### Note\n\nIn the first testcase, we have two options:\n\n- do nothing: the score of $[1]$ is $1-1=0$.\n- remove the subarray with $l=1$, $r=1$: we remove the only element, and we get an empty array with score $0$.\n\nTherefore, the maximum score possible is $0$. However, since we need to additionally minimise the final length of the array, we must output the second option with $l=r=1$. Note that the first option of doing nothing is incorrect, since it has a longer final length.\n\nIn the second testcase, no subarray is selected, so after which $a$ is still $[1, 1, 1, 1, 1]$. This has length $5$ and $1$ distinct element, so it has a score of $5 - 1 = 4$. This can be proven to be a shortest array which maximises the score.\n\nIn the third testcase, the subarray selected is $[2, \\color{red}1, \\color{red}3, 2]$, after which $a$ becomes $[2, 2]$. This has length $2$ and $1$ distinct element, so it has a score of $2 - 1 = 1$. This can be proven to be a shortest array which maximises the score.", "cfid": "2064B"}
{"problem_id": "2067C", "problem_title": "C. Devyatkino", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2067/C", "problem_statement": "You are given a positive integer $n$. In one operation, you can add to $n$ any positive integer whose decimal representation contains only the digit $9$, possibly repeated several times.\n\nWhat is the minimum number of operations needed to make the number $n$ contain at least one digit $7$ in its decimal representation?\n\nFor example, if $n = 80$, it is sufficient to perform one operation: you can add $99$ to $n$, after the operation $n = 179$, which contains the digit $7$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe only line of each test case contains an integer $n$ ($10 \\leq n \\leq 10^9$).\n\n### Output\n\nFor each test case, output the minimum number of operations required for the number $n$ to contain the digit $7$.\n\n### Example\n\n#### Input #1\n\n```\n\n16\n\n51\n\n60\n\n61\n\n777\n\n12345689\n\n1000000000\n\n2002\n\n3001\n\n977\n\n989898986\n\n80\n\n800001\n\n96\n\n70\n\n15\n\n90\n\n```\n\n#### Output #1\n\n```\n3\n2\n1\n0\n1\n3\n5\n4\n0\n7\n1\n2\n7\n0\n7\n3\n```\n\n### Note\n\nIn the first test case, three operations are sufficient: $51 + 9 + 9 + 9 = 78$, which contains the digit $7$. It can be shown that it is impossible to achieve the goal in one or two operations.\n\nIn the second test case, two operations are sufficient: $60 + 9 + 9 = 78$.\n\nIn the third test case, one operation is sufficient: $61 + 9 = 70$.\n\nIn the fourth test case, $n$ already contains the digit $7$, so no operations are required.\n\nIn the fifth test case, you can add $99$ to $n$ to obtain a number containing the digit $7$.", "cfid": "2067C"}
{"problem_id": "2066A", "problem_title": "A. Object Identification", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2066/A", "problem_statement": "This is an interactive problem.\n\nYou are given an array $x_1, \\ldots, x_n$ of integers from $1$ to $n$. The jury also has a fixed but hidden array $y_1, \\ldots, y_n$ of integers from $1$ to $n$. The elements of array $y$ are unknown to you. Additionally, it is known that for all $i$, $x_i \\neq y_i$, and all pairs $(x_i, y_i)$ are distinct.\n\nThe jury has secretly thought of one of two objects, and you need to determine which one it is:\n\n- Object A: A directed graph with $n$ vertices numbered from $1$ to $n$, and with $n$ edges of the form $x_i \\to y_i$.\n- Object B: $n$ points on a coordinate plane. The $i$-th point has coordinates $(x_i, y_i)$.\n\nTo guess which object the jury has thought of, you can make queries. In one query, you must specify two numbers $i, j$ $(1 \\leq i, j \\leq n, i \\neq j)$. In response, you receive one number:\n\n- If the jury has thought of Object A, you receive the length of the shortest path (in edges) from vertex $i$ to vertex $j$ in the graph, or $0$ if there is no path.\n- If the jury has thought of Object B, you receive the Manhattan distance between points $i$ and $j$, that is $|x_i -x_j| + |y_i - y_j|$.\n\nYou have $2$ queries to determine which of the objects the jury has thought of.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$). The description of the test cases follows.\n\n### Interaction\n\nThe interaction begins with reading $n$ ($3 \\leq n \\leq 2 \\cdot 10^5$) — the length of the arrays $x$ and $y$ at the start of each test case.\n\nNext, read $n$ integers: $x_1, x_2, \\ldots, x_n$ ($1 \\leq x_i \\leq n$) — the elements of array $x$.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2 \\cdot 10^5$.\n\nThe array $y_1, y_2, \\ldots, y_n$ is fixed for each test case. In other words, the interactor is not adaptive.\n\nIt is guaranteed that $x_i \\neq y_i$ for all $1 \\leq i \\leq n$, and all pairs $(x_i, y_i)$ are distinct.\n\nTo make a query, output \"? $i$ $j$\" (without quotes, $1 \\le i, j \\le n, i \\neq j$). Then you must read the response to the query, which is a non-negative integer.\n\nTo give an answer, output \"! A\" if Object A is hidden or \"! B\" if Object B is hidden (without quotes). Note that printing the answer does not count as one of the $2$ queries.\n\nAfter printing each query do not forget to output the end of line and flush$^{\\text{∗}}$ the output. Otherwise, you will get Idleness limit exceeded verdict. If, at any interaction step, you read $-1$ instead of valid data, your solution must exit immediately. This means that your solution will reveive Wrong answer because of an invalid query or any other mistake. Failing to exit can result in an arbitrary verdict because your solution will continue to read from a closed stream. Note that if the query is correct, the response will never be $-1$.\n\nHacks\n\nThe first line must contain an integer $t$ ($1 \\le t \\le 1000$) — the number of test cases.\n\nThe first line of each test case must contain an integer $n$ ($3 \\le n \\le 2 \\cdot 10^5$) — the length of the hidden array.\n\nThe second line of each test case must contain $n$ integers — $x_1, x_2, \\ldots, x_n$ ($1 \\le x_i \\le n$).\n\nThe third line of each test case must contain $n$ integers — $y_1, y_2, \\ldots, y_n$ ($1 \\le y_i \\le n$).\n\nIt must be ensured that $x_i \\neq y_i$ for all $1 \\le i \\le n$, and all pairs $(x_i, y_i)$ must be distinct.\n\nThe fourth line must contain one character: A or B, indicating which of the objects you want to hide.\n\nThe sum of $n$ across all test cases must not exceed $2 \\cdot 10^5$.\n\n$^{\\text{∗}}$To flush, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- sys.stdout.flush() in Python;\n- see the documentation for other languages.\n\n### Example\n\n#### Input #1\n\n```\n2\n3\n2 2 3\n\n1\n\n0\n\n5\n5 1 4 2 3\n\n4\n\n4```\n\n#### Output #1\n\n```\n? 2 3\n\n? 1 2\n\n! A\n\n? 1 5\n\n? 5 1\n\n! B```\n\n### Note\n\nIn the first test case, $x = [2,2,3]$, $y = [1,3,1]$ and Object A is guessed.\n\nIn the second test case, $x = [5,1,4,2,3]$, $y = [3,3,2,4,1]$ and Object B is guessed.", "cfid": "2066A"}
{"problem_id": "2067B", "problem_title": "B. Two Large Bags", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2067/B", "problem_statement": "You have two large bags of numbers. Initially, the first bag contains $n$ numbers: $a_1, a_2, \\ldots, a_n$, while the second bag is empty. You are allowed to perform the following operations:\n\n- Choose any number from the first bag and move it to the second bag.\n- Choose a number from the first bag that is also present in the second bag and increase it by one.\n\nYou can perform an unlimited number of operations of both types, in any order. Is it possible to make the contents of the first and second bags identical?\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains an integer $n$ ($2 \\le n \\le 1000$) — the length of the array $a$. It is guaranteed that $n$ is an even number.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le n$).\n\nIt is guaranteed that the sum of $n^2$ over all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case, print \"YES\" if it is possible to equalize the contents of the bags. Otherwise, output \"NO\".\n\nYou can output each letter in any case (for example, \"YES\", \"Yes\", \"yes\", \"yEs\", \"yEs\" will be recognized as a positive answer).\n\n### Example\n\n#### Input #1\n\n```\n\n9\n\n2\n\n1 1\n\n2\n\n2 1\n\n4\n\n1 1 4 4\n\n4\n\n3 4 3 3\n\n4\n\n2 3 4 4\n\n6\n\n3 3 4 5 3 3\n\n6\n\n2 2 2 4 4 4\n\n8\n\n1 1 1 1 1 1 1 4\n\n10\n\n9 9 9 10 10 10 10 10 10 10\n\n```\n\n#### Output #1\n\n```\nYes\nNo\nYes\nYes\nNo\nYes\nNo\nYes\nYes\n```\n\n### Note\n\nLet's analyze the sixth test case: we will show the sequence of operations that leads to the equality of the bags. Initially, the first bag consists of the numbers $(3, 3, 4, 5, 3, 3)$, and the second bag is empty.\n\n1. In the first operation, move the number $3$ from the first bag to the second. State: $(3, 4, 5, 3, 3)$ and $(3)$.\n2. In the second operation, increase the number $3$ from the first bag by one. This operation is possible because the second bag contains the number $3$. State: $(4, 4, 5, 3, 3)$ and $(3)$.\n3. In the third operation, move the number $4$ from the first bag to the second. State: $(4, 5, 3, 3)$ and $(3, 4)$.\n4. In the fourth operation, increase the number $4$ from the first bag by one. State: $(5, 5, 3, 3)$ and $(3, 4)$.\n5. In the fifth operation, move the number $5$ from the first bag to the second. State: $(5, 3, 3)$ and $(3, 4, 5)$.\n6. In the sixth operation, increase the number $3$ from the first bag by one. State: $(5, 3, 4)$ and $(3, 4, 5)$.\n\nAs we can see, as a result of these operations, it is possible to make the contents of the bags equal, so the answer exists.", "cfid": "2067B"}
{"problem_id": "2067A", "problem_title": "A. Adjacent Digit Sums", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2067/A", "problem_statement": "You are given two numbers $x, y$. You need to determine if there exists an integer $n$ such that $S(n) = x$, $S(n + 1) = y$.\n\nHere, $S(a)$ denotes the sum of the digits of the number $a$ in the decimal numeral system.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 500$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $x, y$ ($1 \\le x \\le 1000, 1 \\le y \\le 1000$).\n\n### Output\n\nFor each test case, print \"NO\" if a suitable $n$ does not exist. Otherwise, output \"YES\".\n\nYou can output each letter in any case (for example, \"YES\", \"Yes\", \"yes\", \"yEs\", \"yEs\" will be recognized as a positive answer).\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n1 2\n\n77 77\n\n997 999\n\n999 1\n\n1000 1\n\n1 11\n\n18 1\n\n```\n\n#### Output #1\n\n```\nYes\nNo\nNo\nYes\nNo\nNo\nYes\n```\n\n### Note\n\nIn the first test case, for example, $n = 100$ works. $S(100) = 1$, $S(101) = 2$.\n\nIn the second test case, it can be shown that $S(n) \\neq S(n+1)$ for all $n$; therefore, the answer is No.\n\nIn the fourth test case, $n = 10^{111}-1$ works, which is a number consisting of $111$ digits of $9$.", "cfid": "2067A"}
{"problem_id": "2065G", "problem_title": "G. Skibidus and Capping", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2065/G", "problem_statement": "Skibidus was abducted by aliens of Amog! Skibidus tries to talk his way out, but the Amog aliens don't believe him. To prove that he is not totally capping, the Amog aliens asked him to solve this task:\n\nAn integer $x$ is considered a semi-prime if it can be written as $p \\cdot q$ where $p$ and $q$ are (not necessarily distinct) [prime numbers](https://en.wikipedia.org/wiki/Prime_number). For example, $9$ is a semi-prime since it can be written as $3 \\cdot 3$, and $3$ is a prime number.\n\nSkibidus was given an array $a$ containing $n$ integers. He must report the number of pairs $(i, j)$ such that $i \\\\leq j$ and $\\\\operatorname{lcm}(a\\_i, a\\_j)$$^{\\\\text{∗}}$ is semi-prime.\n\n$^{\\text{∗}}$Given two integers $x$ and $y$, $\\operatorname{lcm}(x, y)$ denotes the [least common multiple](https://en.wikipedia.org/wiki/Least_common_multiple) of $x$ and $y$.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe first line of each test case contains an integer $n$ ($2 \\leq n \\leq 2 \\cdot 10^5$).\n\nThe following line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($2 \\leq a_i \\leq n$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the number of ordered pairs of indices on a new line.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n4\n\n2 2 3 4\n\n6\n\n2 2 3 4 5 6\n\n9\n\n2 2 4 5 7 8 9 3 5\n\n```\n\n#### Output #1\n\n```\n5\n12\n18\n```\n\n### Note\n\nIn the first test case, the $5$ pairs of indices are $(1, 3)$, $(1, 4)$, $(2, 3)$, $(2, 4)$, and $(4, 4)$.", "cfid": "2065G"}
{"problem_id": "2065F", "problem_title": "F. Skibidus and Slay", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2065/F", "problem_statement": "Let's define the majority of a sequence of $k$ elements as the unique value that appears strictly more than $\\left \\lfloor {\\frac{k}{2}} \\right \\rfloor$ times. If such a value does not exist, then the sequence does not have a majority. For example, the sequence $[1,3,2,3,3]$ has a majority $3$ because it appears $3 > \\left \\lfloor {\\frac{5}{2}} \\right \\rfloor = 2$ times, but $[1,2,3,4,5]$ and $[1,3,2,3,4]$ do not have a majority.\n\nSkibidus found a tree$^{\\text{∗}}$ of $n$ vertices and an array $a$ of length $n$. Vertex $i$ has the value $a_i$ written on it, where $a_i$ is an integer in the range $[1, n]$.\n\nFor each $i$ from $1$ to $n$, please determine if there exists a non-trivial simple path$^{\\text{†}}$ such that $i$ is the majority of the sequence of integers written on the vertices that form the path.\n\n$^{\\text{∗}}$A tree is a connected graph without cycles.\n\n$^{\\text{†}}$A sequence of vertices $v_1, v_2, ..., v_m$ ($m \\geq 2$) forms a non-trivial simple path if $v_i$ and $v_{i+1}$ are connected by an edge for all $1 \\leq i \\leq m - 1$ and all $v_i$ are pairwise distinct. Note that the path must consist of at least $2$ vertices.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n \\le 5 \\cdot 10^5$)  — the number of vertices.\n\nThe second line of each test case contains $a_1,a_2,\\ldots,a_n$ ($1 \\le a_i \\le n$)  — the integers written on the vertices.\n\nEach of the next $n-1$ lines contains two integers $u_i$ and $v_i$, denoting the two vertices connected by an edge ($1 \\le u_i,v_i \\le n$, $u_i \\neq v_i$).\n\nIt is guaranteed that the given edges form a tree.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a binary string $s$ of length $n$ on a separate line. $s_i$ should be computed as follows:\n\n- If there is a non-trivial path containing $i$ as the majority, $s_i$ is '1';\n- Otherwise, $s_i$ is '0'.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3\n\n1 2 3\n\n1 3\n\n2 3\n\n4\n\n3 1 1 3\n\n1 2\n\n2 3\n\n4 2\n\n4\n\n2 4 4 2\n\n1 2\n\n2 3\n\n3 4\n\n13\n\n1 4 4 7 4 7 1 1 7 11 11 11 11\n\n1 2\n\n2 3\n\n3 4\n\n4 5\n\n4 6\n\n2 7\n\n7 8\n\n2 9\n\n6 10\n\n5 11\n\n11 12\n\n10 13\n\n```\n\n#### Output #1\n\n```\n000\n1010\n0001\n1001001000100\n```\n\n### Note\n\nIn the first test case, there is no non-trivial path with $1$, $2$, or $3$ as a majority, so the binary string outputted is \"000\".\n\nIn the second test case, $1\\rightarrow 2\\rightarrow 4$ is a non-trivial path with $3$ as a majority.", "cfid": "2065F"}
{"problem_id": "2065C2", "problem_title": "C2. Skibidus and Fanum Tax (hard version)", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2065/C2", "problem_statement": "This is the hard version of the problem. In this version, $m \\leq 2\\cdot 10^5$.\n\nSkibidus has obtained two arrays $a$ and $b$, containing $n$ and $m$ elements respectively. For each integer $i$ from $1$ to $n$, he is allowed to perform the operation at most once:\n\n- Choose an integer $j$ such that $1 \\leq j \\leq m$. Set $a_i := b_j - a_i$. Note that $a_i$ may become non-positive as a result of this operation.\n\nSkibidus needs your help determining whether he can sort $a$ in non-decreasing order$^{\\text{∗}}$ by performing the above operation some number of times.\n\n$^{\\\\text{∗}}$$a$ is sorted in non-decreasing order if $a\\_1 \\\\leq a\\_2 \\\\leq \\\\ldots \\\\leq a\\_n$.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\leq n \\leq 2 \\cdot 10^5$, $1 \\leq m \\leq 2\\cdot 10^5$).\n\nThe following line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$).\n\nThe following line of each test case contains $m$ integers $b_1, b_2, \\ldots, b_m$ ($1 \\leq b_i \\leq 10^9$).\n\nIt is guaranteed that the sum of $n$ and the sum of $m$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, if it is possible to sort $a$ in non-decreasing order, print \"YES\" on a new line. Otherwise, print \"NO\" on a new line.\n\nYou can output the answer in any case. For example, the strings \"yEs\", \"yes\", and \"Yes\" will also be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n1 3\n\n5\n\n9 1 1000000000\n\n3 2\n\n1 4 3\n\n3 4\n\n4 3\n\n2 4 6 5\n\n6 1 8\n\n5 2\n\n6 4 5 4 5\n\n4 1000\n\n3 1\n\n9 8 7\n\n8\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nYES\nNO\nYES\n```\n\n### Note\n\nIn the first test case, $[5]$ is already sorted.\n\nIn the second test case, it can be shown that it is impossible.\n\nIn the third test case, we can set $a_2:=b_1-a_2=6-4=2$ and $a_3:=b_3-a_3=8-6=2$. The sequence $[2,2,2,5]$ is in nondecreasing order.\n\nIn the last case, we can apply operations on each index. The sequence becomes $[-1,0,1]$, which is in nondecreasing order.", "cfid": "2065C2"}
{"problem_id": "2065E", "problem_title": "E. Skibidus and Rizz", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2065/E", "problem_statement": "With the approach of Valentine's Day, Skibidus desperately needs a way to rizz up his crush! Fortunately, he knows of just the way: creating the perfect Binary String!\n\nGiven a binary string$^{\\text{∗}}$ $t$, let $x$ represent the number of $\\texttt{0}$ in $t$ and $y$ represent the number of $\\texttt{1}$ in $t$. Its balance-value is defined as the value of $\\max(x-y, y-x)$.\n\nSkibidus gives you three integers $n$, $m$, and $k$. He asks for your help to construct a binary string $s$ of length $n+m$ with exactly $n$ $\\texttt{0}$'s and $m$ $\\texttt{1}$'s such that the maximum balance-value among all of its substrings$^{\\text{†}}$ is exactly $k$. If it is not possible, output -1.\n\n$^{\\text{∗}}$A binary string only consists of characters $\\texttt{0}$ and $\\texttt{1}$.\n\n$^{\\text{†}}$A string $a$ is a substring of a string $b$ if $a$ can be obtained from $b$ by the deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe first and only line of each test case contains three integers $n$, $m$, and $k$ ($0 \\leq n, m \\leq 2\\cdot 10^5$, $1 \\leq k \\leq n + m$, $n+m\\geq 1$).\n\nIt is guaranteed that the sum of $n$ and the sum of $m$ over all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, if it is possible to construct $s$, output it on a new line. If there are multiple possible $s$, output any. Otherwise, output -1 on a new line.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n1 2 1\n\n4 3 2\n\n2 4 3\n\n8 3 2\n\n5 0 4\n\n5 0 5\n\n```\n\n#### Output #1\n\n```\n101\n0100101\n011011\n-1\n-1\n00000\n```\n\n### Note\n\nIn the first test case, we must construct $s$ such that it contains one $\\texttt{0}$, two $\\texttt{1}$, and a maximum balance of $1$ among all of its substrings. One possible valid $s$ is $\\texttt{101}$ because:\n\n- Consider the substring bounded by indices $[1, 1]$. Its balance-value is $\\max(0 - 1, 1 - 0) = 1$.\n- Consider the substring bounded by indices $[1, 2]$. Its balance-value is $\\max(1 - 1, 1 - 1) = 0$.\n- Consider the substring bounded by indices $[1, 3]$. Its balance-value is $\\max(1 - 2, 2 - 1) = 1$.\n- Consider the substring bounded by indices $[2, 2]$. Its balance-value is $\\max(1 - 0, 0 - 1) = 1$.\n- Consider the substring bounded by indices $[2, 3]$. Its balance-value is $\\max(1 - 1, 1 - 1) = 0$.\n- Consider the substring bounded by indices $[3, 3]$. Its balance-value is $\\max(0 - 1, 1 - 0) = 1$.\n\nAmong all possible substrings, the maximum balance-value is $1$.\n\nIn the second test case, the substring with the maximum balance-value is $0100$, which has a balance of $max(3-1, 1-3)=2$.", "cfid": "2065E"}
{"problem_id": "2065A", "problem_title": "A. Skibidus and Amog'u", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2065/A", "problem_statement": "Skibidus lands on a foreign planet, where the local Amog tribe speaks the Amog'u language. In Amog'u, there are two forms of nouns, which are singular and plural.\n\nGiven that the root of the noun is transcribed as $S$, the two forms are transcribed as:\n\n- Singular: $S$ $+$ \"us\"\n- Plural: $S$ $+$ \"i\"\n\nHere, $+$ denotes [string concatenation](https://en.wikipedia.org/wiki/Concatenation). For example, abc $+$ def $=$ abcdef.\n\nFor example, when $S$ is transcribed as \"amog\", then the singular form is transcribed as \"amogus\", and the plural form is transcribed as \"amogi\". Do note that Amog'u nouns can have an empty root — in specific, \"us\" is the singular form of \"i\" (which, on an unrelated note, means \"imposter\" and \"imposters\" respectively).\n\nGiven a transcribed Amog'u noun in singular form, please convert it to the transcription of the corresponding plural noun.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 100$). The description of the test cases follows.\n\nThe only line of each test case contains a string $W$, which is a transcribed Amog'u noun in singular form. It is guaranteed that $W$ consists of only lowercase English letters, has a length of at most $10$, and ends with \"us\".\n\n### Output\n\nFor each test case, output the transcription of the corresponding plural noun on a separate line.\n\n### Example\n\n#### Input #1\n\n```\n\n9\n\nus\n\nsus\n\nfungus\n\ncactus\n\nsussus\n\namogus\n\nchungus\n\nntarsus\n\nskibidus\n\n```\n\n#### Output #1\n\n```\ni\nsi\nfungi\ncacti\nsussi\namogi\nchungi\nntarsi\nskibidi\n```", "cfid": "2065A"}
{"problem_id": "2065B", "problem_title": "B. Skibidus and Ohio", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2065/B", "problem_statement": "Skibidus is given a string $s$ that consists of lowercase Latin letters. If $s$ contains more than $1$ letter, he can:\n\n- Choose an index $i$ ($1 \\leq i \\leq |s| - 1$, $|s|$ denotes the current length of $s$) such that $s_i = s_{i+1}$. Replace $s_i$ with any lowercase Latin letter of his choice. Remove $s_{i+1}$ from the string.\n\nSkibidus must determine the minimum possible length he can achieve through any number of operations.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 100$) — the number of test cases.\n\nThe only line of each test case contains a string $s$ ($1 \\leq |s| \\leq 100$). It is guaranteed $s$ only contains lowercase Latin letters.\n\n### Output\n\nFor each test case, output an integer on the new line, the minimum achievable length of $s$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\nbaa\n\nskibidus\n\ncc\n\nohio\n\n```\n\n#### Output #1\n\n```\n1\n8\n1\n4\n```\n\n### Note\n\nIn the first test case, Skibidus can:\n\n- Perform an operation on $i = 2$. He replaces $s_2$ with b and removes $s_3$ from the string. Then, $s$ becomes bb.\n- Perform an operation on $i = 1$. He replaces $s_1$ with b and removes $s_2$ from the string. Then, $s$ becomes b.\n- Because $s$ only contains $1$ letter, Skibidus cannot perform any more operations.\n\nTherefore, the answer is $1$ for the first test case.\n\nIn the second test case, he cannot perform an operation on any index. Therefore, the answer is still the length of the initial string, $8$.", "cfid": "2065B"}
{"problem_id": "2065D", "problem_title": "D. Skibidus and Sigma", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2065/D", "problem_statement": "Let's denote the score of an array $b$ with $k$ elements as $\\sum_{i=1}^{k}\\left(\\sum_{j=1}^ib_j\\right)$. In other words, let $S_i$ denote the sum of the first $i$ elements of $b$. Then, the score can be denoted as $S_1+S_2+\\ldots+S_k$.\n\nSkibidus is given $n$ arrays $a_1,a_2,\\ldots,a_n$, each of which contains $m$ elements. Being the sigma that he is, he would like to concatenate them in any order to form a single array containing $n\\cdot m$ elements. Please find the maximum possible score Skibidus can achieve with his concatenated array!\n\nFormally, among all possible permutations$^{\\text{∗}}$ $p$ of length $n$, output the maximum score of $a_{p_1} + a_{p_2} + \\dots + a_{p_n}$, where $+$ represents concatenation$^{\\text{†}}$.\n\n$^{\\text{∗}}$A permutation of length $n$ contains all integers from $1$ to $n$ exactly once.\n\n$^{\\text{†}}$The concatenation of two arrays $c$ and $d$ with lengths $e$ and $f$ respectively (i.e. $c + d$) is $c_1, c_2, \\ldots, c_e, d_1, d_2, \\ldots d_f$.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\leq n \\cdot m \\leq 2 \\cdot 10^5$) — the number of arrays and the length of each array.\n\nThe $i$'th of the next $n$ lines contains $m$ integers $a_{i,1}, a_{i,2}, \\ldots, a_{i,m}$ ($1 \\leq a_{i,j} \\leq 10^6$) — the elements of the $i$'th array.\n\nIt is guaranteed that the sum of $n \\cdot m$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the maximum score among all possible permutations $p$ on a new line.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2 2\n\n4 4\n\n6 1\n\n3 4\n\n2 2 2 2\n\n3 2 1 2\n\n4 1 2 1\n\n2 3\n\n3 4 5\n\n1 1 9\n\n```\n\n#### Output #1\n\n```\n41\n162\n72\n```\n\n### Note\n\nFor the first test case, there are two possibilities for $p$:\n\n- $p = [1, 2]$. Then, $a_{p_1} + a_{p_2} = [4, 4, 6, 1]$. Its score is $4+(4+4)+(4+4+6)+(4+4+6+1)=41$.\n- $p = [2, 1]$. Then, $a_{p_1} + a_{p_2} = [6, 1, 4, 4]$. Its score is $6+(6+1)+(6+1+4)+(6+1+4+4)=39$.\n\nThe maximum possible score is $41$.\n\nIn the second test case, one optimal arrangement of the final concatenated array is $[4,1,2,1,2,2,2,2,3,2,1,2]$. We can calculate that the score is $162$.", "cfid": "2065D"}
{"problem_id": "2065C1", "problem_title": "C1. Skibidus and Fanum Tax (easy version)", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2065/C1", "problem_statement": "This is the easy version of the problem. In this version, $m = 1$.\n\nSkibidus has obtained two arrays $a$ and $b$, containing $n$ and $m$ elements respectively. For each integer $i$ from $1$ to $n$, he is allowed to perform the operation at most once:\n\n- Choose an integer $j$ such that $1 \\leq j \\leq m$. Set $a_i := b_j - a_i$. Note that $a_i$ may become non-positive as a result of this operation.\n\nSkibidus needs your help determining whether he can sort $a$ in non-decreasing order$^{\\text{∗}}$ by performing the above operation some number of times.\n\n$^{\\\\text{∗}}$$a$ is sorted in non-decreasing order if $a\\_1 \\\\leq a\\_2 \\\\leq \\\\ldots \\\\leq a\\_n$.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\leq n \\leq 2 \\cdot 10^5$, $\\textbf{m = 1}$).\n\nThe following line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$).\n\nThe following line of each test case contains $m$ integers $b_1, b_2, \\ldots, b_m$ ($1 \\leq b_i \\leq 10^9$).\n\nIt is guaranteed that the sum of $n$ and the sum of $m$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, if it is possible to sort $a$ in non-decreasing order, print \"YES\" on a new line. Otherwise, print \"NO\" on a new line.\n\nYou can output the answer in any case. For example, the strings \"yEs\", \"yes\", and \"Yes\" will also be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n1 1\n\n5\n\n9\n\n3 1\n\n1 4 3\n\n3\n\n4 1\n\n1 4 2 5\n\n6\n\n4 1\n\n5 4 10 5\n\n4\n\n3 1\n\n9 8 7\n\n8\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nYES\nNO\nYES\n```\n\n### Note\n\nIn the first test case, $[5]$ is already sorted.\n\nIn the second test case, it can be shown that it is impossible.\n\nIn the third test case, we can set $a_3:=b_1-a_3=6-2=4$. The sequence $[1,4,4,5]$ is in nondecreasing order.\n\nIn the last case, we can apply operations on each index. The sequence becomes $[-1,0,1]$, which is in nondecreasing order.", "cfid": "2065C1"}
{"problem_id": "2059C", "problem_title": "C. Customer Service", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2059/C", "problem_statement": "Nikyr has started working as a queue manager at the company \"Black Contour.\" He needs to choose the order of servicing customers. There are a total of $n$ queues, each initially containing $0$ people. In each of the next $n$ moments of time, there are two sequential events:\n\n1. New customers arrive in all queues. More formally, at the $j$-th moment of time, the number of people in the $i$-th queue increases by a positive integer $a_{i,j}$.\n2. Nikyr chooses exactly one of the $n$ queues to be served at that moment in time. The number of customers in this queue becomes $0$.\n\nLet the number of people in the $i$-th queue after all events be $x_i$. Nikyr wants MEX$^{\\dagger}$ of the collection $x_1, x_2, \\ldots, x_n$ to be as large as possible. Help him determine the maximum value he can achieve with an optimal order of servicing the queues.\n\n$^{\\dagger}$The minimum excluded (MEX) of a collection of integers $c_1, c_2, \\ldots, c_k$ is defined as the smallest non-negative integer $y$ which does not occur in the collection $c$.\n\nFor example:\n\n- $\\operatorname{MEX}([2,2,1])= 0$, since $0$ does not belong to the array.\n- $\\operatorname{MEX}([3,1,0,1]) = 2$, since $0$ and $1$ belong to the array, but $2$ does not.\n- $\\operatorname{MEX}([0,3,1,2]) = 4$, since $0$, $1$, $2$, and $3$ belong to the array, but $4$ does not.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 2 \\cdot 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 300$) — the number of queues and moments of time.\n\nThe $i$-th of the next $n$ lines contains $n$ integers $a_{i,1}, a_{i,2}, \\ldots, a_{i,n}$ ($1 \\le a_{i,j} \\le 10^9$) — the number of new customers in the $i$-th queue at each moment of time.\n\nIt is guaranteed that the sum of $n^2$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the maximum value of $\\operatorname{MEX}([x_1, x_2, \\ldots, x_n])$ that can be achieved.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2\n\n1 2\n\n2 1\n\n2\n\n10 10\n\n10 10\n\n3\n\n2 3 3\n\n4 4 1\n\n2 1 1\n\n4\n\n4 2 2 17\n\n1 9 3 1\n\n5 5 5 11\n\n1 2 1 1\n\n```\n\n#### Output #1\n\n```\n2\n1\n3\n3\n```\n\n### Note\n\nIn the first test case, the second queue can be served at time $1$, and the first queue at time $2$. There will be $x_1 = 0$ people left in the first queue and $x_2 = 1$ person left in the second queue. Therefore, the answer is $\\operatorname{MEX}([0, 1]) = 2$.\n\nIn the second test case, the first queue can be served both times. There will be $x_1 = 0$ people left in the first queue and $x_2 = 20$ people left in the second queue. Therefore, the answer is $\\operatorname{MEX}([0, 20]) = 1$.\n\nIn the third test case, the third queue can be served at time $1$, the second queue at time $2$, and the first queue at time $3$. There will be $x_1 = 0$ people left in the first queue, $x_2 = 1$ person left in the second queue, and $x_3 = 2$ people left in the third queue. Therefore, the answer is $\\operatorname{MEX}([0, 1, 2]) = 3$.", "cfid": "2059C"}
{"problem_id": "2059A", "problem_title": "A. Milya and Two Arrays", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2059/A", "problem_statement": "An array is called good if for any element $x$ that appears in this array, it holds that $x$ appears at least twice in this array. For example, the arrays $[1, 2, 1, 1, 2]$, $[3, 3]$, and $[1, 2, 4, 1, 2, 4]$ are good, while the arrays $[1]$, $[1, 2, 1]$, and $[2, 3, 4, 4]$ are not good.\n\nMilya has two good arrays $a$ and $b$ of length $n$. She can rearrange the elements in array $a$ in any way. After that, she obtains an array $c$ of length $n$, where $c_i = a_i + b_i$ ($1 \\le i \\le n$).\n\nDetermine whether Milya can rearrange the elements in array $a$ such that there are at least $3$ distinct elements in array $c$.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 1000$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($3 \\le n \\le 50$) — the length of the arrays $a$ and $b$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$) — the elements of the array $a$.\n\nThe third line of each test case contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($1 \\le b_i \\le 10^9$) — the elements of the array $b$.\n\n### Output\n\nFor each test case, output $«$YES$»$ (without quotes) if it is possible to obtain at least $3$ distinct elements in array $c$, and $«$NO$»$ otherwise.\n\nYou can output each letter in any case (for example, $«$YES$»$, $«$Yes$»$, $«$yes$»$, $«$yEs$»$ will be recognized as a positive answer).\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n4\n\n1 2 1 2\n\n1 2 1 2\n\n6\n\n1 2 3 3 2 1\n\n1 1 1 1 1 1\n\n3\n\n1 1 1\n\n1 1 1\n\n6\n\n1 52 52 3 1 3\n\n59 4 3 59 3 4\n\n4\n\n100 1 100 1\n\n2 2 2 2\n\n```\n\n#### Output #1\n\n```\nYES\nYES\nNO\nYES\nNO\n```\n\n### Note\n\nIn the first test case, you can swap the second and third elements. Then the array $a = [1, 1, 2, 2]$, $b = [1, 2, 1, 2]$, and then $c = [2, 3, 3, 4]$.\n\nIn the second test case, you can leave the elements unchanged. Then $c = [2, 3, 4, 4, 3, 2]$.\n\nIn the third test case, the array $a$ will not change from rearranging the elements in it. Then $c = [2, 2, 2]$, so the answer is $«$NO$»$.", "cfid": "2059A"}
{"problem_id": "2059B", "problem_title": "B. Cost of the Array", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2059/B", "problem_statement": "You are given an array $a$ of length $n$ and an even integer $k$ ($2 \\le k \\le n$). You need to split the array $a$ into exactly $k$ non-empty subarrays$^{\\dagger}$ such that each element of the array $a$ belongs to exactly one subarray.\n\nNext, all subarrays with even indices (second, fourth, $\\ldots$, $k$-th) are concatenated into a single array $b$. After that, $0$ is added to the end of the array $b$.\n\nThe cost of the array $b$ is defined as the minimum index $i$ such that $b_i \\neq i$. For example, the cost of the array $b = [1, 2, 4, 5, 0]$ is $3$, since $b_1 = 1$, $b_2 = 2$, and $b_3 \\neq 3$. Determine the minimum cost of the array $b$ that can be obtained with an optimal partitioning of the array $a$ into subarrays.\n\n$^{\\dagger}$An array $x$ is a subarray of an array $y$ if $x$ can be obtained from $y$ by the deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $k$ ($2 \\le k \\le n \\le 2 \\cdot 10^5$, $k$ is even) — the length of the array $a$ and the number of subarrays.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$) — the elements of the array $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the minimum cost of the array $b$ that can be obtained.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3 2\n\n1 1 1\n\n8 8\n\n1 1 2 2 3 3 4 4\n\n5 4\n\n1 1 1 2 2\n\n5 4\n\n1 1 1000000000 2 2\n\n```\n\n#### Output #1\n\n```\n2\n5\n2\n1\n```\n\n### Note\n\nIn the first test case, there are only two possible partitionings: $[[1], [1, 1]]$ and $[[1, 1], [1]]$. In either case, $b_1 = 1$, and $b_2 \\ne 2$, so the cost is $2$.\n\nIn the second test case, there is only one possible partitioning, where $b = [1, 2, 3, 4, 0]$, so the cost is $5$ ($b_5 = 0 \\ne 5$).\n\nIn the third test case, the following partitioning works: $[[1], [1, 1], [2], [2]]$. Then $b = [1, 1, 2, 0]$, and the cost is $2$.", "cfid": "2059B"}
{"problem_id": "2062B", "problem_title": "B. Clockwork", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2062/B", "problem_statement": "You have a sequence of $n$ time clocks arranged in a line, where the initial time on the $i$-th clock is $a_i$. In each second, the following happens in order:\n\n- Each clock's time decreases by $1$. If any clock's time reaches $0$, you lose immediately.\n- You can choose to move to an adjacent clock or stay at the clock you are currently on.\n- You can reset the time of the clock you are on back to its initial value $a_i$.\n\nNote that the above events happen in order. If the time of a clock reaches $0$ in a certain second, even if you can move to this clock and reset its time during that second, you will still lose.\n\nYou can start from any clock. Determine if it is possible to continue this process indefinitely without losing.\n\n### Input\n\nThe first line of input contains a single integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nFor each test case, the first line contains a single integer $n$ ($2 \\leq n \\leq 5 \\cdot 10^5$) — the number of time clocks.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$) — the initial times set on the clocks.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5\\cdot 10^5$.\n\n### Output\n\nFor each test case, print \"YES\" (without quotes) if it is possible to continue this process indefinitely, or \"NO\" (without quotes) otherwise.\n\nYou can output \"YES\" and \"NO\" in any case (for example, strings \"yEs\", \"yes\" and \"Yes\" will be recognized as a positive response).\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n2\n\n4 10\n\n2\n\n2 2\n\n3\n\n4 10 5\n\n3\n\n5 3 5\n\n5\n\n12 13 25 17 30\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nNO\nYES\nYES\n```\n\n### Note\n\nIn the first test case, you can move back and forth between the two clocks, resetting them repeatedly.\n\nIn the third test case, assuming that you start from clock $1$ and follow the strategy below:\n\nInitially, $a=[4,10,5]$.\n\n1. $a$ becomes $[3, 9, 4]$. You move to clock $2$ and reset its time, resulting in $a=[3, 10, 4]$.\n2. $a$ becomes $[2, 9, 3]$. You move to clock $3$ and reset its time, resulting in $a=[2, 9, 5]$.\n3. $a$ becomes $[1, 8, 4]$. You move to clock $2$ and reset its time, resulting in $a=[1, 10, 4]$.\n4. $a$ becomes $[0, 9, 3]$. You move to clock $1$, but you lose because $a_1$ reaches $0$.\n\nIt can be proven that no other strategy allows you to continue this process indefinitely.", "cfid": "2062B"}
{"problem_id": "2062A", "problem_title": "A. String", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2062/A", "problem_statement": "You are given a string $s$ of length $n$ consisting of $\\mathtt{0}$ and/or $\\mathtt{1}$. In one operation, you can select a non-empty subsequence $t$ from $s$ such that any two adjacent characters in $t$ are different. Then, you flip each character of $t$ ($\\mathtt{0}$ becomes $\\mathtt{1}$ and $\\mathtt{1}$ becomes $\\mathtt{0}$). For example, if $s=\\mathtt{\\underline{0}0\\underline{101}}$ and $t=s_1s_3s_4s_5=\\mathtt{0101}$, after the operation, $s$ becomes $\\mathtt{\\underline{1}0\\underline{010}}$.\n\nCalculate the minimum number of operations required to change all characters in $s$ to $\\mathtt{0}$.\n\nRecall that for a string $s = s_1s_2\\ldots s_n$, any string $t=s_{i_1}s_{i_2}\\ldots s_{i_k}$ ($k\\ge 1$) where $1\\leq i_1 < i_2 < \\ldots <i_k\\leq n$ is a subsequence of $s$.\n\n### Input\n\nThe first line of input contains a single integer $t$ ($1 \\leq t \\leq 10^4$) — the number of input test cases.\n\nThe only line of each test case contains the string $s$ ($1\\le |s|\\le 50$), where $|s|$ represents the length of $s$.\n\n### Output\n\nFor each test case, output the minimum number of operations required to change all characters in $s$ to $\\mathtt{0}$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n1\n\n000\n\n1001\n\n10101\n\n01100101011101\n\n```\n\n#### Output #1\n\n```\n1\n0\n2\n3\n8\n```\n\n### Note\n\nIn the first test case, you can flip $s_1$. Then $s$ becomes $\\mathtt{0}$, so the answer is $1$.\n\nIn the fourth test case, you can perform the following three operations in order:\n\n1. Flip $s_1s_2s_3s_4s_5$. Then $s$ becomes $\\mathtt{\\underline{01010}}$.\n2. Flip $s_2s_3s_4$. Then $s$ becomes $\\mathtt{0\\underline{010}0}$.\n3. Flip $s_3$. Then $s$ becomes $\\mathtt{00\\underline{0}00}$.\n\nIt can be shown that you can not change all characters in $s$ to $\\mathtt{0}$ in less than three operations, so the answer is $3$.", "cfid": "2062A"}
{"problem_id": "2062C", "problem_title": "C. Cirno and Operations", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2062/C", "problem_statement": "Cirno has a sequence $a$ of length $n$. She can perform either of the following two operations for any (possibly, zero) times unless the current length of $a$ is $1$:\n\n- Reverse the sequence. Formally, $[a_1,a_2,\\ldots,a_n]$ becomes $[a_n,a_{n-1},\\ldots,a_1]$ after the operation.\n- Replace the sequence with its difference sequence. Formally, $[a_1,a_2,\\ldots,a_n]$ becomes $[a_2-a_1,a_3-a_2,\\ldots,a_n-a_{n-1}]$ after the operation.\n\nFind the maximum possible sum of elements of $a$ after all operations.\n\n### Input\n\nThe first line of input contains a single integer $t$ ($1 \\leq t \\leq 100$) — the number of input test cases.\n\nThe first line of each test case contains a single integer $n$ ($1\\le n\\le 50$) — the length of sequence $a$.\n\nThe second line of each test case contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($|a_i|\\le 1000$) — the sequence $a$.\n\n### Output\n\nFor each test case, print an integer representing the maximum possible sum.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n1\n\n-1000\n\n2\n\n5 -3\n\n2\n\n1000 1\n\n9\n\n9 7 9 -9 9 -8 7 -8 9\n\n11\n\n678 201 340 444 453 922 128 987 127 752 0\n\n```\n\n#### Output #1\n\n```\n-1000\n8\n1001\n2056\n269891\n```\n\n### Note\n\nIn the first test case, Cirno can not perform any operation, so the answer is $-1000$.\n\nIn the second test case, Cirno firstly reverses the sequence, then replaces the sequence with its difference sequence: $[5,-3]\\to[-3,5]\\to[8]$. It can be proven that this maximizes the sum, so the answer is $8$.\n\nIn the third test case, Cirno can choose not to operate, so the answer is $1001$.", "cfid": "2062C"}
{"problem_id": "2063C", "problem_title": "C. Remove Exactly Two", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2063/C", "problem_statement": "Recently, Little John got a tree from his aunt to decorate his house. But as it seems, just one tree is not enough to decorate the entire house. Little John has an idea. Maybe he can remove a few vertices from the tree. That will turn it into more trees! Right?\n\nYou are given a tree$^{\\text{∗}}$ of $n$ vertices. You must perform the following operation exactly twice.\n\n- Select a vertex $v$;\n- Remove all edges incident to $v$, and also the vertex $v$.\n\nPlease find the maximum number of connected components after performing the operation exactly twice.\n\nTwo vertices $x$ and $y$ are in the same connected component if and only if there exists a path from $x$ to $y$. For clarity, note that the graph with $0$ vertices has $0$ connected components by definition.$^{\\text{†}}$\n\n$^{\\text{∗}}$A tree is a connected graph without cycles.\n\n$^{\\text{†}}$But is such a graph connected?\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$).\n\nEach of the next $n-1$ lines contains two integers $u_i$ and $v_i$, denoting the two vertices connected by an edge ($1 \\le u_i,v_i \\le n$, $u_i \\neq v_i$). It is guaranteed that the given edges form a tree.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the maximum number of connected components on a separate line.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2\n\n1 2\n\n4\n\n1 2\n\n2 3\n\n2 4\n\n7\n\n1 2\n\n1 3\n\n2 4\n\n4 5\n\n5 6\n\n5 7\n\n```\n\n#### Output #1\n\n```\n0\n2\n4\n```\n\n### Note\n\nOn the first test case, removing a vertex twice will make the graph empty. By definition, the number of connected components in the graph with $0$ vertices is $0$. Therefore, the answer is $0$.\n\nOn the second test case, removing two vertices $1$ and $2$ leaves $2$ connected components. As it is impossible to make $3$ connected components with $2$ vertices, the answer is $2$.\n\nOn the third test case, removing two vertices $1$ and $5$ leaves $4$ connected components, which are $\\left\\{ 2,4\\right\\}$, $\\left\\{ 3\\right\\}$, $\\left\\{ 6\\right\\}$, and $\\left\\{ 7\\right\\}$. It can be shown that it is impossible to make $5$ connected components. Therefore, the answer is $4$.", "cfid": "2063C"}
{"problem_id": "2063A", "problem_title": "A. Minimal Coprime", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2063/A", "problem_statement": "Today, Little John used all his savings to buy a segment. He wants to build a house on this segment.\n\nA segment of positive integers $[l,r]$ is called coprime if $l$ and $r$ are coprime$^{\\text{∗}}$.\n\nA coprime segment $[l,r]$ is called minimal coprime if it does not contain$^{\\text{†}}$ any coprime segment not equal to itself. To better understand this statement, you can refer to the notes.\n\nGiven $[l,r]$, a segment of positive integers, find the number of minimal coprime segments contained in $[l,r]$.\n\n$^{\\text{∗}}$Two integers $a$ and $b$ are coprime if they share only one positive common divisor. For example, the numbers $2$ and $4$ are not coprime because they are both divided by $2$ and $1$, but the numbers $7$ and $9$ are coprime because their only positive common divisor is $1$.\n\n$^{\\text{†}}$A segment $[l',r']$ is contained in the segment $[l,r]$ if and only if $l \\le l' \\le r' \\le r$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 100$). The description of the test cases follows.\n\nThe only line of each test case consists of two integers $l$ and $r$ ($1 \\le l \\le r \\le 10^9$).\n\n### Output\n\nFor each test case, output the number of minimal coprime segments contained in $[l,r]$, on a separate line.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n1 2\n\n1 10\n\n49 49\n\n69 420\n\n1 1\n\n9982 44353\n\n```\n\n#### Output #1\n\n```\n1\n9\n0\n351\n1\n34371\n```\n\n### Note\n\nOn the first test case, the given segment is $[1,2]$. The segments contained in $[1,2]$ are as follows.\n\n- $[1,1]$: This segment is coprime, since the numbers $1$ and $1$ are coprime, and this segment does not contain any other segment inside. Thus, $[1,1]$ is minimal coprime.\n- $[1,2]$: This segment is coprime. However, as it contains $[1,1]$, which is also coprime, $[1,2]$ is not minimal coprime.\n- $[2,2]$: This segment is not coprime because $2$ and $2$ share $2$ positive common divisors: $1$ and $2$.\n\nTherefore, the segment $[1,2]$ contains $1$ minimal coprime segment.", "cfid": "2063A"}
{"problem_id": "2063B", "problem_title": "B. Subsequence Update", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2063/B", "problem_statement": "After Little John borrowed expansion screws from auntie a few hundred times, eventually she decided to come and take back the unused ones.\nBut as they are a crucial part of home design, Little John decides to hide some in the most unreachable places — under the eco-friendly wood veneers.\n\nYou are given an integer sequence $a_1, a_2, \\ldots, a_n$, and a segment $[l,r]$ ($1 \\le l \\le r \\le n$).\n\nYou must perform the following operation on the sequence exactly once.\n\n- Choose any subsequence$^{\\text{∗}}$ of the sequence $a$, and reverse it. Note that the subsequence does not have to be contiguous.\n\nFormally, choose any number of indices $i_1,i_2,\\ldots,i_k$ such that $1 \\le i_1 < i_2 < \\ldots < i_k \\le n$. Then, change the $i_x$-th element to the original value of the $i_{k-x+1}$-th element simultaneously for all $1 \\le x \\le k$.\n\nFind the minimum value of $a_l+a_{l+1}+\\ldots+a_{r-1}+a_r$ after performing the operation.\n\n$^{\\text{∗}}$A sequence $b$ is a subsequence of a sequence $a$ if $b$ can be obtained from $a$ by the deletion of several (possibly, zero or all) element from arbitrary positions.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n$, $l$, $r$ ($1 \\le l \\le r \\le n \\le 10^5$) — the length of $a$, and the segment $[l,r]$.\n\nThe second line of each test case contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($1 \\le a_{i} \\le 10^9$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, output the minimum value of $a_l+a_{l+1}+\\ldots+a_{r-1}+a_r$ on a separate line.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n2 1 1\n\n2 1\n\n3 2 3\n\n1 2 3\n\n3 1 3\n\n3 1 2\n\n4 2 3\n\n1 2 2 2\n\n5 2 5\n\n3 3 2 3 5\n\n6 1 3\n\n3 6 6 4 3 2\n\n```\n\n#### Output #1\n\n```\n1\n3\n6\n3\n11\n8\n```\n\n### Note\n\nOn the second test case, the array is $a=[1,2,3]$ and the segment is $[2,3]$.\n\nAfter choosing the subsequence $a_1,a_3$ and reversing it, the sequence becomes $[3,2,1]$. Then, the sum $a_2+a_3$ becomes $3$. It can be shown that the minimum possible value of the sum is $3$.", "cfid": "2063B"}
{"problem_id": "2061D", "problem_title": "D. Kevin and Numbers", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2061/D", "problem_statement": "Kevin wrote an integer sequence $a$ of length $n$ on the blackboard.\n\nKevin can perform the following operation any number of times:\n\n- Select two integers $x, y$ on the blackboard such that $|x - y| \\leq 1$, erase them, and then write down an integer $x + y$ instead.\n\nKevin wants to know if it is possible to transform these integers into an integer sequence $b$ of length $m$ through some sequence of operations.\n\nTwo sequences $a$ and $b$ are considered the same if and only if their multisets are identical. In other words, for any number $x$, the number of times it appears in $a$ must be equal to the number of times it appears in $b$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1\\leq m \\leq n \\leq 2\\cdot 10^5$) — the length of $a$ and the length of $b$.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1\\leq a_i \\leq 10^9$).\n\nThe third line contains $m$ integers $b_1, b_2, \\ldots, b_m$ ($1\\leq b_i \\leq 10^9$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, output \"Yes\" if it is possible to transform $a$ into $b$, and \"No\" otherwise.\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n9\n\n2 1\n\n4 5\n\n9\n\n2 1\n\n3 6\n\n9\n\n4 2\n\n1 2 2 2\n\n3 4\n\n4 2\n\n1 1 3 3\n\n3 5\n\n4 2\n\n1 2 3 4\n\n3 5\n\n5 5\n\n1 2 3 4 5\n\n5 4 3 2 1\n\n4 2\n\n1 1 1 1\n\n1 1\n\n4 4\n\n1 1 1 1\n\n1 1 1 2\n\n1 1\n\n1\n\n1000000000\n\n```\n\n#### Output #1\n\n```\nYes\nNo\nYes\nYes\nNo\nYes\nNo\nNo\nNo\n```\n\n### Note\n\nIn the first test case, you can erase $4, 5$, and write down $9$.\n\nIn the second test case, you can't erase $3, 6$.\n\nIn the third test case, one possible way could be:\n\n- Erase $2, 2$, and write down $4$. The remaining numbers are $1, 2, 4$ now.\n- Erase $1, 2$, and write down $3$. The remaining numbers are $3, 4$ now.\n\nIn the fourth test case, one possible way could be:\n\n- Erase $1, 1$, and write down $2$. The remaining numbers are $2, 3, 3$ now.\n- Erase $2, 3$, and write down $5$. The remaining numbers are $3, 5$ now.", "cfid": "2061D"}
{"problem_id": "2061A", "problem_title": "A. Kevin and Arithmetic", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2061/A", "problem_statement": "To train young Kevin's arithmetic skills, his mother devised the following problem.\n\nGiven $n$ integers $a_1, a_2, \\ldots, a_n$ and a sum $s$ initialized to $0$, Kevin performs the following operation for $i = 1, 2, \\ldots, n$ in order:\n\n- Add $a_i$ to $s$. If the resulting $s$ is even, Kevin earns a point and repeatedly divides $s$ by $2$ until it becomes odd.\n\nNote that Kevin can earn at most one point per operation, regardless of how many divisions he does.\n\nSince these divisions are considered more beneficial for Kevin's development, his mother wants to rearrange $a$ so that the number of Kevin's total points is maximized. Determine the maximum number of points.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 500$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1\\leq n \\leq 100$) — the number of integers.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1\\leq a_i \\leq 10^9$).\n\n### Output\n\nFor each test case, output one integer — the maximum number of points.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n1\n\n1\n\n2\n\n1 2\n\n3\n\n2 4 6\n\n4\n\n1000000000 999999999 999999998 999999997\n\n10\n\n3 1 4 1 5 9 2 6 5 3\n\n```\n\n#### Output #1\n\n```\n0\n2\n1\n3\n8\n```\n\n### Note\n\nIn the first test case, the only arrangement of $a$ is $[1]$. $s$ becomes $1$. Kevin earns no points.\n\nIn the second test case, the only possible arrangement of $a$ is $[2, 1]$. $s$ becomes $1$ and $1$ successively. Kevin earns points in both operations.\n\nIn the third test case, one possible arrangement of $a$ is $[2, 4, 6]$. $s$ becomes $1$, $5$, and $11$ successively. Kevin earns a point in the first operation.", "cfid": "2061A"}
{"problem_id": "2061B", "problem_title": "B. Kevin and Geometry", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2061/B", "problem_statement": "Kevin has $n$ sticks with length $a_1,a_2,\\ldots,a_n$.\n\nKevin wants to select $4$ sticks from these to form an isosceles trapezoid$^{\\text{∗}}$ with a positive area. Note that rectangles and squares are also considered isosceles trapezoids. Help Kevin find a solution. If no solution exists, output $-1$.\n\n$^{\\text{∗}}$An [isosceles trapezoid](https://en.wikipedia.org/wiki/Isosceles_trapezoid) is a convex quadrilateral with a line of symmetry bisecting one pair of opposite sides. In any isosceles trapezoid, two opposite sides (the bases) are parallel, and the two other sides (the legs) are of equal length.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($4 \\le n \\le 2\\cdot 10^5$).\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^8$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, output $4$ integers — the lengths of sticks. If no solution exists, output $-1$.\n\nIf there are multiple solutions, print any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n4\n\n5 5 5 10\n\n4\n\n10 5 10 5\n\n4\n\n1 2 3 4\n\n4\n\n1 1 1 3\n\n6\n\n4 2 1 5 7 1\n\n6\n\n10 200 30 300 30 100\n\n4\n\n100000000 100000000 1 2\n\n```\n\n#### Output #1\n\n```\n5 5 5 10\n5 5 10 10\n-1\n-1\n1 1 4 5\n-1\n100000000 100000000 1 2\n```\n\n### Note\n\nIn the first test case, you can form an isosceles trapezoid with bases of length $5$ and $10$, and two legs of length $5$.\n\nIn the second test case, you can form an isosceles trapezoid with two bases of length $5$ and two legs of length $10$. A rectangle is considered an isosceles trapezoid here.\n\nIn the third test case, there are no sticks with the same length. It's impossible to form an isosceles trapezoid.\n\nIn the fourth test case, it's impossible to form an isosceles trapezoid with a positive area.", "cfid": "2061B"}
{"problem_id": "2061C", "problem_title": "C. Kevin and Puzzle", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2061/C", "problem_statement": "Kevin enjoys logic puzzles.\n\nHe played a game with $n$ classmates who stand in a line. The $i$-th person from the left says that there are $a_i$ liars to their left (not including themselves).\n\nEach classmate is either honest or a liar, with the restriction that no two liars can stand next to each other. Honest classmates always say the truth. Liars can say either the truth or lies, meaning their statements are considered unreliable.\n\nKevin wants to determine the number of distinct possible game configurations modulo $998\\,244\\,353$. Two configurations are considered different if at least one classmate is honest in one configuration and a liar in the other.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains an integer $n$ ($1\\leq n \\leq 2 \\cdot 10^5$) — the number of classmates.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0\\leq a_i \\leq n$) — the number of liars to the left of the $i$-th person they claimed.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output one integer — the number of distinct game configurations modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n3\n\n0 1 2\n\n5\n\n0 0 0 0 0\n\n5\n\n0 0 1 1 2\n\n5\n\n0 1 2 3 4\n\n5\n\n0 0 1 1 1\n\n5\n\n5 1 5 2 5\n\n1\n\n0\n\n4\n\n2 3 1 1\n\n```\n\n#### Output #1\n\n```\n1\n2\n3\n0\n4\n1\n2\n0\n```\n\n### Note\n\nWe will use $\\color{red}{\\text{red}}$ to mark liars and $\\color{blue}{\\text{blue}}$ to mark honest people.\n\nIn the first test case, the only possible way is $(\\color{red}{0},\\color{blue}{1},\\color{red}{2})$.\n\nIn the second test case, two possible ways are $(\\color{blue}{0},\\color{blue}{0},\\color{blue}{0},\\color{blue}{0},\\color{blue}{0})$ and $(\\color{blue}{0},\\color{blue}{0},\\color{blue}{0},\\color{blue}{0},\\color{red}{0})$.\n\nIn the third test case, three possible ways are $(\\color{blue}{0},\\color{blue}{0},\\color{red}{1},\\color{blue}{1},\\color{red}{2})$, $(\\color{blue}{0},\\color{red}{0},\\color{blue}{1},\\color{red}{1},\\color{blue}{2})$, $(\\color{blue}{0},\\color{red}{0},\\color{blue}{1},\\color{blue}{1},\\color{red}{2})$.", "cfid": "2061C"}
{"problem_id": "2060D", "problem_title": "D. Subtract Min Sort", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2060/D", "problem_statement": "You are given a sequence $a$ consisting of $n$ positive integers.\n\nYou can perform the following operation any number of times.\n\n- Select an index $i$ ($1 \\le i < n$), and subtract $\\min(a_i,a_{i+1})$ from both $a_i$ and $a_{i+1}$.\n\nDetermine if it is possible to make the sequence non-decreasing by using the operation any number of times.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$).\n\nThe second line of each test case contains $a_1,a_2,\\ldots,a_n$ ($1 \\le a_i \\le 10^9$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nIf it is possible to make the sequence non-decreasing, print \"YES\" on a new line. Otherwise, print \"NO\" on a new line.\n\nYou can output the answer in any case. For example, the strings \"yEs\", \"yes\", and \"Yes\" will also be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n5\n\n1 2 3 4 5\n\n4\n\n4 3 2 1\n\n4\n\n4 5 2 3\n\n8\n\n4 5 4 5 4 5 4 5\n\n9\n\n9 9 8 2 4 4 3 5 3\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nYES\nYES\nNO\n```\n\n### Note\n\nIn the first test case, the array is already sorted.\n\nIn the second test case, we can show that it is impossible.\n\nIn the third test case, after performing an operation on $i=1$, the array becomes $[0,1,2,3]$, which is now in nondecreasing order.", "cfid": "2060D"}
{"problem_id": "2060A", "problem_title": "A. Fibonacciness", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2060/A", "problem_statement": "There is an array of $5$ integers. Initially, you only know $a_1,a_2,a_4,a_5$. You may set $a_3$ to any positive integer, negative integer, or zero. The Fibonacciness of the array is the number of integers $i$ ($1 \\leq i \\leq 3$) such that $a_{i+2}=a_i+a_{i+1}$. Find the maximum Fibonacciness over all integer values of $a_3$.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 500$) — the number of test cases.\n\nThe only line of each test case contains four integers $a_1, a_2, a_4, a_5$ ($1 \\leq a_i \\leq 100$).\n\n### Output\n\nFor each test case, output the maximum Fibonacciness on a new line.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n1 1 3 5\n\n1 3 2 1\n\n8 10 28 100\n\n100 1 100 1\n\n1 100 1 100\n\n100 100 100 100\n\n```\n\n#### Output #1\n\n```\n3\n2\n2\n1\n1\n2\n```\n\n### Note\n\nIn the first test case, we can set $a_3$ to $2$ to achieve the maximal Fibonacciness of $3$.\n\nIn the third test case, it can be shown that $2$ is the maximum Fibonacciness that can be achieved. This can be done by setting $a_3$ to $18$.", "cfid": "2060A"}
{"problem_id": "2060B", "problem_title": "B. Farmer John's Card Game", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2060/B", "problem_statement": "Farmer John's $n$ cows are playing a card game! Farmer John has a deck of $n \\cdot m$ cards numbered from $0$ to $n \\cdot m-1$. He distributes $m$ cards to each of his $n$ cows.\n\nFarmer John wants the game to be fair, so each cow should only be able to play $1$ card per round. He decides to determine a turn order, determined by a permutation$^{\\text{∗}}$ $p$ of length $n$, such that the $p_i$'th cow will be the $i$'th cow to place a card on top of the center pile in a round.\n\nIn other words, the following events happen in order in each round:\n\n- The $p_1$'th cow places any card from their deck on top of the center pile.\n- The $p_2$'th cow places any card from their deck on top of the center pile.\n- ...\n- The $p_n$'th cow places any card from their deck on top of the center pile.\n\nThere is a catch. Initially, the center pile contains a card numbered $-1$. In order to place a card, the number of the card must be greater than the number of the card on top of the center pile. Then, the newly placed card becomes the top card of the center pile. If a cow cannot place any card in their deck, the game is considered to be lost.\n\nFarmer John wonders: does there exist $p$ such that it is possible for all of his cows to empty their deck after playing all $m$ rounds of the game? If so, output any valid $p$. Otherwise, output $-1$.\n\n$^{\\text{∗}}$A permutation of length $n$ contains each integer from $1$ to $n$ exactly once\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 400$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\leq n \\cdot m \\leq 2\\,000$) — the number of cows and the number of cards each cow receives.\n\nThe following $n$ lines contain $m$ integers each – the cards received by each cow. It is guaranteed all given numbers (across all $n$ lines) are distinct and in the range from $0$ to $n \\cdot m - 1$, inclusive.\n\nIt is guaranteed the sum of $n \\cdot m$ over all test cases does not exceed $2\\,000$.\n\n### Output\n\nFor each test case, output the following on a new line:\n\n- If $p$ exists, output $n$ space-separated integers $p_1, p_2, \\ldots, p_n$.\n- Otherwise, output $-1$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2 3\n\n0 4 2\n\n1 5 3\n\n1 1\n\n0\n\n2 2\n\n1 2\n\n0 3\n\n4 1\n\n1\n\n2\n\n0\n\n3\n\n```\n\n#### Output #1\n\n```\n1 2\n1\n-1\n3 1 2 4\n```\n\n### Note\n\nIn the first test case, one turn order that allows all cards to be played is by having the first cow go before the second cow. The cards played will be $0\\rightarrow1\\rightarrow2\\rightarrow3\\rightarrow4\\rightarrow5$.\n\nIn the second test case, there is only one cow, so having the cow play all of her cards in increasing order will empty the deck.\n\nIn the third test case, it can be shown there is no valid turn order that allows all cards to be played.", "cfid": "2060B"}
{"problem_id": "2060C", "problem_title": "C. Game of Mathletes", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2060/C", "problem_statement": "Alice and Bob are playing a game. There are $n$ ($n$ is even) integers written on a blackboard, represented by $x_1, x_2, \\ldots, x_n$. There is also a given integer $k$ and an integer score that is initially $0$. The game lasts for $\\frac{n}{2}$ turns, in which the following events happen sequentially:\n\n- Alice selects an integer from the blackboard and erases it. Let's call Alice's chosen integer $a$.\n- Bob selects an integer from the blackboard and erases it. Let's call Bob's chosen integer $b$.\n- If $a+b=k$, add $1$ to score.\n\nAlice is playing to minimize the score while Bob is playing to maximize the score. Assuming both players use optimal strategies, what is the score after the game ends?\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $k$ ($2 \\leq n \\leq 2\\cdot 10^5, 1 \\leq k \\leq 2\\cdot n$, $n$ is even).\n\nThe second line of each test case contains $n$ integers $x_1,x_2,\\ldots,x_n$ ($1 \\leq x_i \\leq n$) — the integers on the blackboard.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, output the score if both players play optimally.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n4 4\n\n1 2 3 2\n\n8 15\n\n1 2 3 4 5 6 7 8\n\n6 1\n\n1 1 1 1 1 1\n\n16 9\n\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\n\n```\n\n#### Output #1\n\n```\n2\n1\n0\n4\n```\n\n### Note\n\nIn the first test case, one way the game may go is as follows:\n\n- Alice selects $1$ and Bob selects $3$. The score increases as $1+3=4$. Now the two integers remaining on the blackboard are $2$ and $2$.\n- Alice and Bob both select $2$. The score increases as $2+2=4$.\n- The game ends as the blackboard now has no integers.\n\nIn the third test case, it is impossible for the sum of Alice and Bob's selected integers to be $1$, so we answer $0$.\n\nNote that this is just an example of how the game may proceed for demonstration purposes. This may not be Alice or Bob's most optimal strategies.", "cfid": "2060C"}
{"problem_id": "2060E", "problem_title": "E. Graph Composition", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2060/E", "problem_statement": "You are given two simple undirected graphs $F$ and $G$ with $n$ vertices. $F$ has $m_1$ edges while $G$ has $m_2$ edges. You may perform one of the following two types of operations any number of times:\n\n- Select two integers $u$ and $v$ ($1 \\leq u,v \\leq n$) such that there is an edge between $u$ and $v$ in $F$. Then, remove that edge from $F$.\n- Select two integers $u$ and $v$ ($1 \\leq u,v \\leq n$) such that there is no edge between $u$ and $v$ in $F$. Then, add an edge between $u$ and $v$ in $F$.\n\nDetermine the minimum number of operations required such that for all integers $u$ and $v$ ($1 \\leq u,v \\leq n$), there is a path from $u$ to $v$ in $F$ if and only if there is a path from $u$ to $v$ in $G$.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) — the number of independent test cases.\n\nThe first line of each test case contains three integers $n$, $m_1$, and $m_2$ ($1 \\leq n \\leq 2\\cdot 10^5$, $0 \\leq m_1,m_2 \\leq 2\\cdot 10^5$) — the number of vertices, the number of edges in $F$, and the number of edges in $G$.\n\nThe following $m_1$ lines each contain two integers $u$ and $v$ ($1 \\leq u, v\\leq n$) — there is an edge between $u$ and $v$ in $F$. It is guaranteed that there are no repeated edges or self loops.\n\nThe following $m_2$ lines each contain two integers $u$ and $v$ ($1 \\leq u,v\\leq n$) — there is an edge between $u$ and $v$ in $G$. It is guaranteed that there are no repeated edges or self loops.\n\nIt is guaranteed that the sum of $n$, the sum of $m_1$, and the sum of $m_2$ over all test cases do not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer denoting the minimum operations required on a new line.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3 2 1\n\n1 2\n\n2 3\n\n1 3\n\n2 1 1\n\n1 2\n\n1 2\n\n3 2 0\n\n3 2\n\n1 2\n\n1 0 0\n\n3 3 1\n\n1 2\n\n1 3\n\n2 3\n\n1 2\n\n```\n\n#### Output #1\n\n```\n3\n0\n2\n0\n2\n```\n\n### Note\n\nIn the first test case you can perform the following three operations:\n\n1. Add an edge between vertex $1$ and vertex $3$.\n2. Remove the edge between vertex $1$ and vertex $2$.\n3. Remove the edge between vertex $2$ and vertex $3$.\n\nIt can be shown that fewer operations cannot be achieved.\n\nIn the second test case, $F$ and $G$ already fulfill the condition in the beginning.\n\nIn the fifth test case, the edges from $1$ to $3$ and from $2$ to $3$ must both be removed.", "cfid": "2060E"}
{"problem_id": "2056C", "problem_title": "C. Palindromic Subsequences", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2056/C", "problem_statement": "For an integer sequence $a = [a_1, a_2, \\ldots, a_n]$, we define $f(a)$ as the length of the longest subsequence$^{\\text{∗}}$ of $a$ that is a palindrome$^{\\text{†}}$.\n\nLet $g(a)$ represent the number of subsequences of length $f(a)$ that are palindromes. In other words, $g(a)$ counts the number of palindromic subsequences in $a$ that have the maximum length.\n\nGiven an integer $n$, your task is to find any sequence $a$ of $n$ integers that satisfies the following conditions:\n\n- $1 \\le a_i \\le n$ for all $1 \\le i \\le n$.\n- $g(a) > n$\n\nIt can be proven that such a sequence always exists under the given constraints.\n\n$^{\\text{∗}}$A sequence $x$ is a subsequence of a sequence $y$ if $x$ can be obtained from $y$ by the deletion of several (possibly, zero or all) element from arbitrary positions.\n\n$^{\\text{†}}$A palindrome is a sequence that reads the same from left to right as from right to left. For example, $[1, 2, 1, 3, 1, 2, 1]$, $[5, 5, 5, 5]$, and $[4, 3, 3, 4]$ are palindromes, while $[1, 2]$ and $[2, 3, 3, 3, 3]$ are not.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 100$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($\\color{red}{6} \\le n \\le 100$) — the length of the sequence.\n\nNote that there are no constraints on the sum of $n$ over all test cases.\n\n### Output\n\nFor each test case, output $n$ integers $a_1, a_2, \\ldots, a_n$, representing an array that satisfies the conditions.\n\nIf there are multiple solutions, you may output any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n6\n\n9\n\n15\n\n```\n\n#### Output #1\n\n```\n1 1 2 3 1 2\n7 3 3 7 5 3 7 7 3\n15 8 8 8 15 5 8 1 15 5 8 15 15 15 8\n```\n\n### Note\n\nIn the first example, one possible solution is $a = [1, 1, 2, 3, 1, 2]$. In this case, $f(a) = 3$ as the longest palindromic subsequence has length $3$. There are $7$ ways to choose a subsequence of length $3$ that is a palindrome, as shown below:\n\n1. $[a_1, a_2, a_5] = [1, 1, 1]$\n2. $[a_1, a_3, a_5] = [1, 2, 1]$\n3. $[a_1, a_4, a_5] = [1, 3, 1]$\n4. $[a_2, a_3, a_5] = [1, 2, 1]$\n5. $[a_2, a_4, a_5] = [1, 3, 1]$\n6. $[a_3, a_4, a_6] = [2, 3, 2]$\n7. $[a_3, a_5, a_6] = [2, 1, 2]$\n\nTherefore, $g(a) = 7$, which is greater than $n = 6$. Hence, $a = [1, 1, 2, 3, 1, 2]$ is a valid solution.\n\nIn the second example, one possible solution is $a = [7, 3, 3, 7, 5, 3, 7, 7, 3]$. In this case, $f(a) = 5$. There are $24$ ways to choose a subsequence of length $5$ that is a palindrome. Some examples are $[a_2, a_4, a_5, a_8, a_9] = [3, 7, 5, 7, 3]$ and $[a_1, a_4, a_6, a_7, a_8] = [7, 7, 3, 7, 7]$. Therefore, $g(a) = 24$, which is greater than $n = 9$. Hence, $a = [7, 3, 3, 7, 5, 3, 7, 7, 3]$ is a valid solution.\n\nIn the third example, $f(a) = 7$ and $g(a) = 190$, which is greater than $n = 15$.", "cfid": "2056C"}
{"problem_id": "2056B", "problem_title": "B. Find the Permutation", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2056/B", "problem_statement": "You are given an undirected graph with $n$ vertices, labeled from $1$ to $n$. This graph encodes a hidden permutation$^{\\text{∗}}$ $p$ of size $n$. The graph is constructed as follows:\n\n- For every pair of integers $1 \\le i < j \\le n$, an undirected edge is added between vertex $p_i$ and vertex $p_j$ if and only if $p_i < p_j$. Note that the edge is not added between vertices $i$ and $j$, but between the vertices of their respective elements. Refer to the notes section for better understanding.\n\nYour task is to reconstruct and output the permutation $p$. It can be proven that permutation $p$ can be uniquely determined.\n\n$^{\\text{∗}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 500$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 1000$).\n\nThe $i$-th of the next $n$ lines contains a string of $n$ characters $g_{i, 1}g_{i, 2}\\ldots g_{i, n}$ ($g_{i, j} = \\mathtt{0}$ or $g_{i, j} = \\mathtt{1}$) — the adjacency matrix. $g_{i, j} = \\mathtt{1}$ if and only if there is an edge between vertex $i$ and vertex $j$.\n\nIt is guaranteed that there exists a permutation $p$ which generates the given graph. It is also guaranteed that the graph is undirected and has no self-loops, meaning $g_{i, j} = g_{j, i}$ and $g_{i, i} = \\mathtt{0}$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $1000$.\n\n### Output\n\nFor each test case, output $n$ integers $p_1, p_2, \\ldots, p_n$ representing the reconstructed permutation.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n1\n\n0\n\n5\n\n00101\n\n00101\n\n11001\n\n00001\n\n11110\n\n6\n\n000000\n\n000000\n\n000000\n\n000000\n\n000000\n\n000000\n\n```\n\n#### Output #1\n\n```\n1\n4 2 1 3 5\n6 5 4 3 2 1\n```\n\n### Note\n\nIn the first case $p = [1]$. Since there are no pairs $1 \\le i < j \\le n$, there are no edges in the graph.\n\nThe graph in the second case is shown below. For example, when we choose $i = 3$ and $j = 4$, we add an edge between vertices $p_i = 1$ and $p_j = 3$, because $p_i < p_j$. However, when we choose $i = 2$ and $j = 3$, $p_i = 2$ and $p_j = 1$, so $p_i < p_j$ doesn't hold. Therefore, we don't add an edge between $2$ and $1$.\n\n![](https://espresso.codeforces.com/73c807a602602d5ad6dd697dfea7a886d23aec16.png)\n\nIn the third case, there are no edges in the graph, so there are no pairs of integers $1 \\le i < j \\le n$ such that $p_i < p_j$. Therefore, $p = [6, 5, 4, 3, 2, 1]$.", "cfid": "2056B"}
{"problem_id": "2056A", "problem_title": "A. Shape Perimeter", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2056/A", "problem_statement": "There is an $m$ by $m$ square stamp on an infinite piece of paper. Initially, the bottom-left corner of the square stamp is aligned with the bottom-left corner of the paper. You are given two integer sequences $x$ and $y$, each of length $n$. For each step $i$ from $1$ to $n$, the following happens:\n\n- Move the stamp $x_i$ units to the right and $y_i$ units upwards.\n- Press the stamp onto the paper, leaving an $m$ by $m$ colored square at its current position.\n\nNote that the elements of sequences $x$ and $y$ have a special constraint: $1\\le x_i, y_i\\le m - 1$.\n\nNote that you do not press the stamp at the bottom-left corner of the paper. Refer to the notes section for better understanding.\n\nIt can be proven that after all the operations, the colored shape on the paper formed by the stamp is a single connected region. Find the perimeter of this colored shape.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\le n \\le 100$, $2 \\le m \\le 100$) — the number of operations performed and the side length of the square stamp.\n\nThe $i$-th of the next $n$ lines contains two integers $x_i$ and $y_i$ ($1 \\le x_i, y_i \\le m - 1$) — the distance that the stamp will be moved right and up during the $i$-th operation, respectively.\n\nNote that there are no constraints on the sum of $n$ over all test cases.\n\n### Output\n\nFor each test case, output a single integer representing the perimeter of the colored shape on the paper.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n4 3\n\n1 1\n\n2 2\n\n2 1\n\n1 2\n\n1 2\n\n1 1\n\n6 7\n\n3 6\n\n1 1\n\n3 1\n\n6 6\n\n5 4\n\n6 1\n\n```\n\n#### Output #1\n\n```\n32\n8\n96\n```\n\n### Note\n\nIn the first example, the stamp has a side length of $3$ and is pressed $4$ times at coordinates $(1, 1)$, $(3, 3)$, $(5, 4)$, and $(6, 6)$. The piece of paper looks like that afterwards:\n\n![](https://espresso.codeforces.com/9fc3f24b6fa5d2b61c12e4b03034cf4461356a4e.png)\n\nHere, the square formed by the first press is colored blue, the second red, the third green, and the fourth purple. The combined shape, whose perimeter we need to calculate, looks like that:\n\n![](https://espresso.codeforces.com/d3769976097a17e12f245e090e7d4b21ac6d0111.png)\n\nFrom the diagram, it can be seen that this shape has a perimeter of $32$.", "cfid": "2056A"}
{"problem_id": "2055B", "problem_title": "B. Crafting", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2055/B", "problem_statement": "As you'd expect, Florida is home to many bizarre magical forces, and Florida Man seeks to tame them.\n\nThere are $n$ different types of magical materials, numbered from $1$ to $n$. Initially, you have $a_i$ units of material $i$ for each $i$ from $1$ to $n$. You are allowed to perform the following operation:\n\n- Select a material $i$ (where $1\\le i\\le n$). Then, spend $1$ unit of every other material $j$ (in other words, $j\\neq i$) to gain $1$ unit of material $i$. More formally, after selecting material $i$, update array $a$ as follows: $a_i := a_i + 1$, and $a_j := a_j - 1$ for all $j$ where $j\\neq i$ and $1\\le j\\le n$. Note that all $a_j$ must remain non-negative, i.e. you cannot spend resources you do not have.\n\nYou are trying to craft an artifact using these materials. To successfully craft the artifact, you must have at least $b_i$ units of material $i$ for each $i$ from $1$ to $n$. Determine if it is possible to craft the artifact by performing the operation any number of times (including zero).\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2\\le n\\le 2\\cdot 10^5$) — the number of types of materials.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i\\le 10^9$) — the amount of each material $i$ that you currently hold.\n\nThe third line of each test case contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($0 \\le b_i\\le 10^9$) — the amount of each material $i$ needed to produce the artifact.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print a single line containing either \"YES\" or \"NO\", representing whether or not the artifact can be crafted.\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n4\n\n0 5 5 1\n\n1 4 4 0\n\n3\n\n1 1 3\n\n2 2 1\n\n2\n\n1 10\n\n3 3\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nYES\n```\n\n### Note\n\nIn the first test case, perform an operation on material $1$. After doing so, we will have exactly the required resources: $1$ unit of material $1$, and $4$ units each of materials $2$ and $3$.\n\nIn the second test case, it can be shown that no matter how the operations are performed, it is impossible to craft the artifact.\n\nIn the third test case, we can perform the operation on material $1$ twice. After these operations, we will have $3$ units of material $1$ and $8$ units of material $2$, which is more than enough to craft the artifact.", "cfid": "2055B"}
{"problem_id": "2055C", "problem_title": "C. The Trail", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2055/C", "problem_statement": "There are no mountains in Florida, and Florida Man cannot comprehend their existence. As such, he really needs your help with this one.\n\nIn the wilderness lies a region of mountainous terrain represented as a rectangular grid with $n$ rows and $m$ columns. Each cell in the grid is identified by its position $(i, j)$, where $i$ is the row index and $j$ is the column index. The altitude of cell $(i, j)$ is denoted by $a_{i,j}$.\n\nHowever, this region has been tampered with. A path consisting of $n + m - 1$ cells, starting from the top-left corner $(1, 1)$ and ending at the bottom-right corner $(n, m)$, has been cleared. For every cell $(i, j)$ along this path, the altitude $a_{i,j}$ has been set to $0$. The path moves strictly via downward ($\\mathtt{D}$) or rightward ($\\mathtt{R}$) steps.\n\nTo restore the terrain to its original state, it is known that the region possessed a magical property before it was tampered with: all rows and all columns shared the same sum of altitudes. More formally, there exists an integer $x$ such that $\\sum_{j=1}^m a_{i, j} = x$ for all $1\\le i\\le n$, and $\\sum_{i=1}^n a_{i, j} = x$ for all $1\\le j\\le m$.\n\nYour task is to assign new altitudes to the cells on the path such that the above magical property is restored. It can be proven that a solution always exists. If there are multiple solutions that satisfy the property, any one of them may be provided.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($2 \\leq n, m \\leq 1000$) — the number of rows and columns in the grid.\n\nThe second line of each test case contains a string $s$ of length $n+m-2$ ($s_i = \\mathtt{D}$ or $s_i = \\mathtt{R}$) — the steps the path makes from $(1, 1)$ to $(n, m)$. The character $\\mathtt{D}$ represents a downward step, and $\\mathtt{R}$ represents a rightward step.\n\nThe $i$-th of the next $n$ lines each contain $m$ integers $a_{i,1}, a_{i, 2}, \\ldots, a_{i,m}$ ($-10^6 \\leq a_{i,j} \\leq 10^6$) — the altitude of each cell in the grid. It is guaranteed that if a cell $(i, j)$ lies on the path, then $a_{i,j} = 0$.\n\nIt is guaranteed that the sum of $n \\cdot m$ over all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case, output $n$ lines of $m$ integers representing the restored grid of altitudes $b_{i, j}$. The altitudes must satisfy $-10^{15} \\leq b_{i,j} \\leq 10^{15}$, and additionally $a_{i,j} = b_{i,j}$ if $(i, j)$ is not on the path. If multiple solutions exist, output any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3 3\n\nDRRD\n\n0 2 3\n\n0 0 0\n\n3 1 0\n\n4 5\n\nDRRRRDD\n\n0 1 0 2 3\n\n0 0 0 0 0\n\n-1 0 -3 -3 0\n\n0 0 0 -1 0\n\n2 3\n\nRRD\n\n0 0 0\n\n0 1 0\n\n5 5\n\nDDDDRRRR\n\n0 25 2 9 11\n\n0 6 13 20 22\n\n0 17 24 1 8\n\n0 3 10 12 19\n\n0 0 0 0 0\n\n```\n\n#### Output #1\n\n```\n1 2 3\n2 3 1\n3 1 2\n-6 1 0 2 3\n7 -1 3 2 -11\n-1 0 -3 -3 7\n0 0 0 -1 1\n0 -1 1\n0 1 -1\n18 25 2 9 11\n4 6 13 20 22\n15 17 24 1 8\n21 3 10 12 19\n7 14 16 23 5\n```\n\n### Note\n\nIn the first test case, the grid has been filled such that every row and column contains the numbers $1, 2, 3$ in some order, resulting in a common sum of $6$.\n\nIn the second test case, the grid has been filled such that all rows and columns sum to $0$.", "cfid": "2055C"}
{"problem_id": "2055A", "problem_title": "A. Two Frogs", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2055/A", "problem_statement": "Roaming through the alligator-infested Everglades, Florida Man encounters a most peculiar showdown.\n\nThere are $n$ lilypads arranged in a row, numbered from $1$ to $n$ from left to right. Alice and Bob are frogs initially positioned on distinct lilypads, $a$ and $b$, respectively. They take turns jumping, starting with Alice.\n\nDuring a frog's turn, it can jump either one space to the left or one space to the right, as long as the destination lilypad exists. For example, on Alice's first turn, she can jump to either lilypad $a-1$ or $a+1$, provided these lilypads are within bounds. It is important to note that each frog must jump during its turn and cannot remain on the same lilypad.\n\nHowever, there are some restrictions:\n\n- The two frogs cannot occupy the same lilypad. This means that Alice cannot jump to a lilypad that Bob is currently occupying, and vice versa.\n- If a frog cannot make a valid jump on its turn, it loses the game. As a result, the other frog wins.\n\nDetermine whether Alice can guarantee a win, assuming that both players play optimally. It can be proven that the game will end after a finite number of moves if both players play optimally.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 500$). The description of the test cases follows.\n\nThe first and only line of each test case contains three integers $n$, $a$, and $b$ ($2 \\leq n \\leq 100$, $1 \\leq a, b \\leq n$, $a\\neq b$) — the number of lilypads, and the starting positions of Alice and Bob, respectively.\n\nNote that there are no constraints on the sum of $n$ over all test cases.\n\n### Output\n\nFor each test case, print a single line containing either \"YES\" or \"NO\", representing whether or not Alice has a winning strategy.\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n2 1 2\n\n3 3 1\n\n4 2 3\n\n5 2 4\n\n7 6 2\n\n```\n\n#### Output #1\n\n```\nNO\nYES\nNO\nYES\nYES\n```\n\n### Note\n\nIn the first test case, Alice has no legal moves. Therefore, Alice loses on the first turn.\n\nIn the second test case, Alice can only move to lilypad $2$. Then, Bob has no legal moves. Therefore, Alice has a winning strategy in this case.\n\nIn the third test case, Alice can only move to lilypad $1$. Then, Bob can move to lilypad $2$. Alice is no longer able to move and loses, giving Bob the win. It can be shown that Bob can always win regardless of Alice's moves; hence, Alice does not have a winning strategy.", "cfid": "2055A"}
{"problem_id": "2057B", "problem_title": "B. Gorilla and the Exam", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2057/B", "problem_statement": "Due to a shortage of teachers in the senior class of the \"T-generation\", it was decided to have a huge male gorilla conduct exams for the students. However, it is not that simple; to prove his competence, he needs to solve the following problem.\n\nFor an array $b$, we define the function $f(b)$ as the smallest number of the following operations required to make the array $b$ empty:\n\n- take two integers $l$ and $r$, such that $l \\le r$, and let $x$ be the $\\min(b_l, b_{l+1}, \\ldots, b_r)$; then\n- remove all such $b_i$ that $l \\le i \\le r$ and $b_i = x$ from the array, the deleted elements are removed, the indices are renumerated.\n\nYou are given an array $a$ of length $n$ and an integer $k$. No more than $k$ times, you can choose any index $i$ ($1 \\le i \\le n$) and any integer $p$, and replace $a_i$ with $p$.\n\nHelp the gorilla to determine the smallest value of $f(a)$ that can be achieved after such replacements.\n\n### Input\n\nEach test contains multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each set of input data contains two integers $n$ and $k$ ($1 \\le n \\le 10^5$, $0 \\le k \\le n$) — the length of the array $a$ and the maximum number of changes, respectively.\n\nThe second line of each set of input data contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$) — the array $a$ itself.\n\nIt is guaranteed that the sum of the values of $n$ across all sets of input data does not exceed $10^5$.\n\n### Output\n\nFor each set of input data, output a single integer on a separate line — the smallest possible value of $f(a)$.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n1 0\n\n48843\n\n3 1\n\n2 3 2\n\n5 3\n\n1 2 3 4 5\n\n7 0\n\n4 7 1 3 2 4 1\n\n11 4\n\n3 2 1 4 4 3 4 2 1 3 3\n\n5 5\n\n1 2 3 4 5\n\n```\n\n#### Output #1\n\n```\n1\n1\n2\n5\n2\n1\n```\n\n### Note\n\nIn the first set of input data, $f([48\\,843]) = 1$, since the array consists of a single number, and thus it can be removed in one operation.\n\nIn the second set of input data, you can change the second number to $2$, resulting in the array $[2, 2, 2]$, where $f([2, 2, 2]) = 1$, since you can take the entire array as a subarray, the minimum on it is $2$, so we will remove all the $2$s from the array, and the array will become empty.", "cfid": "2057B"}
{"problem_id": "2057C", "problem_title": "C. Trip to the Olympiad", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2057/C", "problem_statement": "In the upcoming year, there will be many team olympiads, so the teachers of \"T-generation\" need to assemble a team of three pupils to participate in them. Any three pupils will show a worthy result in any team olympiad. But winning the olympiad is only half the battle; first, you need to get there...\n\nEach pupil has an independence level, expressed as an integer. In \"T-generation\", there is exactly one student with each independence levels from $l$ to $r$, inclusive. For a team of three pupils with independence levels $a$, $b$, and $c$, the value of their team independence is equal to $(a \\oplus b) + (b \\oplus c) + (a \\oplus c)$, where $\\oplus$ denotes the [bitwise XOR operation](https://en.wikipedia.org/wiki/Bitwise_operation#XOR).\n\nYour task is to choose any trio of students with the maximum possible team independence.\n\n### Input\n\nEach test contains multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case set contains two integers $l$ and $r$ ($0 \\le l, r < 2^{30}$, $r - l > 1$) — the minimum and maximum independence levels of the students.\n\n### Output\n\nFor each test case set, output three pairwise distinct integers $a, b$, and $c$, such that $l \\le a, b, c \\le r$ and the value of the expression $(a \\oplus b) + (b \\oplus c) + (a \\oplus c)$ is maximized. If there are multiple triples with the maximum value, any of them can be output.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n0 2\n\n0 8\n\n1 3\n\n6 22\n\n128 137\n\n69 98\n\n115 127\n\n0 1073741823\n\n```\n\n#### Output #1\n\n```\n1 2 0\n8 7 1\n2 1 3\n7 16 11\n134 132 137\n98 85 76\n123 121 118\n965321865 375544086 12551794\n```\n\n### Note\n\nIn the first test case, the only suitable triplet of numbers ($a, b, c$) (up to permutation) is ($0, 1, 2$).\n\nIn the second test case, one of the suitable triplets is ($8, 7, 1$), where $(8 \\oplus 7) + (7 \\oplus 1) + (8 \\oplus 1) = 15 + 6 + 9 = 30$. It can be shown that $30$ is the maximum possible value of $(a \\oplus b) + (b \\oplus c) + (a \\oplus c)$ for $0 \\le a, b, c \\le 8$.", "cfid": "2057C"}
{"problem_id": "2057A", "problem_title": "A. MEX Table", "difficulty": "easy", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2057/A", "problem_statement": "One day, the schoolboy Mark misbehaved, so the teacher Sasha called him to the whiteboard.\n\nSasha gave Mark a table with $n$ rows and $m$ columns. His task is to arrange the numbers $0, 1, \\\\ldots, n \\\\cdot m - 1$ in the table (each number must be used exactly once) in such a way as to maximize the sum of MEX$^{\\\\text{∗}}$ across all rows and columns. More formally, he needs to maximize \n\n$$\\sum\\limits_{i = 1}^{n} \\operatorname{mex}(\\{a_{i,1}, a_{i,2}, \\ldots, a_{i,m}\\}) + \\sum\\limits_{j = 1}^{m} \\operatorname{mex}(\\{a_{1,j}, a_{2,j}, \\ldots, a_{n,j}\\}),$$\n\nwhere $a_{i,j}$ is the number in the $i$-th row and $j$-th column.\n\nSasha is not interested in how Mark arranges the numbers, so he only asks him to state one number — the maximum sum of MEX across all rows and columns that can be achieved.\n\n$^{\\text{∗}}$The minimum excluded (MEX) of a collection of integers $c_1, c_2, \\ldots, c_k$ is defined as the smallest non-negative integer $x$ which does not occur in the collection $c$.\n\nFor example:\n\n- $\\operatorname{mex}([2,2,1])= 0$, since $0$ does not belong to the array.\n- $\\operatorname{mex}([3,1,0,1]) = 2$, since $0$ and $1$ belong to the array, but $2$ does not.\n- $\\operatorname{mex}([0,3,1,2]) = 4$, since $0$, $1$, $2$, and $3$ belong to the array, but $4$ does not.\n\n### Input\n\nEach test contains multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 1000$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\le n, m \\le 10^9$) — the number of rows and columns in the table, respectively.\n\n### Output\n\nFor each test case, output the maximum possible sum of $\\operatorname{mex}$ across all rows and columns.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n1 1\n\n2 2\n\n3 5\n\n```\n\n#### Output #1\n\n```\n2\n3\n6\n```\n\n### Note\n\nIn the first test case, the only element is $0$, and the sum of the $\\operatorname{mex}$ of the numbers in the first row and the $\\operatorname{mex}$ of the numbers in the first column is $\\operatorname{mex}(\\{0\\}) + \\operatorname{mex}(\\{0\\}) = 1 + 1 = 2$.\n\nIn the second test case, the optimal table may look as follows:\n\n$3\n\n$$0$$\n\n2$$1$\n\nThen $\\sum\\limits_{i = 1}^{n} \\operatorname{mex}(\\{a_{i,1}, a_{i,2}, \\ldots, a_{i,m}\\}) + \\sum\\limits_{j = 1}^{m} \\operatorname{mex}(\\{a_{1,j}, a_{2,j}, \\ldots, a_{n,j}\\}) = \\operatorname{mex}(\\{3, 0\\}) + \\operatorname{mex}(\\{2, 1\\})$ $+ \\operatorname{mex}(\\{3, 2\\}) + \\operatorname{mex}(\\{0, 1\\}) = 1 + 0 + 0 + 2 = 3$.", "cfid": "2057A"}
{"problem_id": "2112E", "problem_title": "E. Tree Colorings", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2112/E", "problem_statement": "Consider a rooted undirected tree. Each vertex can be colored blue, green, or yellow. A coloring is called beautiful if it meets these conditions:\n\n- the root of the tree is green;\n- if you consider all blue and green vertices, they are reachable from each other without passing through any yellow vertices;\n- if you consider all yellow and green vertices, they are reachable from each other without passing through any blue vertices;\n\nYou are given an integer $m$. Your task is to calculate the minimum number of vertices in a tree with exactly $m$ beautiful colorings.\n\n### Input\n\nThe first line contains a single integer ($1 \\le t \\le 10^5$) — the number of test cases.\n\nThe only line of each test case contains a single integer $m$ ($1 \\le m \\le 5 \\cdot 10^5$).\n\n### Output\n\nFor each test case, print a single integer — the minimum number of vertices in a tree with exactly $m$ beautiful colorings. If such a tree does not exist, print $-1$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n1\n\n3\n\n5\n\n7\n\n9\n\n```\n\n#### Output #1\n\n```\n1\n2\n3\n4\n3\n```\n\n### Note\n\nIn the following notes, let $g$ describe green color, $b$ be blue, and $y$ be yellow.\n\nIn the first example, consider a simple tree with just $1$ vertex. This tree has exactly $1$ beautiful coloring: the root is green.\n\nIn the second example, consider a simple tree with $2$ vertices with a root at the $1$-st vertex. There are exactly $3$ beautiful colorings: $[g, g]$, $[g, b]$ and $[g, y]$.\n\nIn the third example, consider a bamboo tree with $3$ vertices with a root at the $1$-st vertex. There are exactly $5$ beautiful colorings: $[g, g, g]$, $[g, g, b]$, $[g, g, y]$, $[g, b, b]$ and $[g, y, y]$.\n\nIn the fifth example, consider a tree with $3$ vertices with a root at the $1$-st vertex, and the other $2$ vertices connected to it. There are exactly $9$ beautiful colorings: $[g, g, g]$, $[g, g, b]$, $[g, g, y]$, $[g, b, g]$, $[g, b, b]$, $[g, b, y]$, $[g, y, g]$, $[g, y, b]$ and $[g, y, y]$.", "cfid": "2112E"}
{"problem_id": "2112F", "problem_title": "F. Variables and Operations", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2112/F", "problem_statement": "There are $n$ variables; let's denote the value of the $i$-th variable as $a_i$.\n\nThere are also $m$ operations which will be applied to these variables; the $i$-th operation is described by three integers $x_i, y_i, z_i$. When the $i$-th operation is applied, the variable $x_i$ gets assigned the following value: $\\min(a_{x_i}, a_{y_i} + z_i)$.\n\nEvery operation will be applied exactly once, but their order is not fixed; they can be applied in any order.\n\nLet's call a sequence of initial variable values $a_1, a_2, \\dots, a_n$ stable, if no matter in which order we apply operations, the resulting values will be the same. If the resulting value of the $i$-th variable depends on the order of operations, then the sequence of initial variable values is called $i$-unstable.\n\nYou have to process $q$ queries. In each query, you will be given initial values $a_1, a_2, \\dots, a_n$ and an integer $k$; before applying the operations, you can at most $k$ times choose a variable and decrease it by $1$. For every variable $i$, you have to independently determine if it is possible to transform the given values into an $i$-unstable sequence.\n\n### Input\n\nThe first line contains two integers $n$ and $m$ ($2 \\le n \\le 500$; $1 \\le m \\le 4 \\cdot 10^5$) — the number of variables and operations, respectively.\n\nThen, $m$ lines follow. The $i$-th of them contains three integers $x_i, y_i, z_i$ ($1 \\le x_i, y_i \\le n$; $x_i \\ne y_i$; $0 \\le z_i \\le 10^5$) — the description of the $i$-th operation.\n\nThe next line contains one integer $q$ ($1 \\le q \\le 1000$) — the number of queries.\n\nEach query consists of two lines:\n\n- the first line contains one integer $k$ ($0 \\le k \\le 10^9$) — the maximum number of times you can choose a variable and decrease it by $1$;\n- the second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($0 \\le a_i \\le 10^9$) — the initial values of the variables.\n\n### Output\n\nFor each query, print a string of $n$ zeroes and/or ones. The $i$-th character should be 1 if it is possible to obtain an $i$-unstable sequence, or 0 otherwise.\n\n### Examples\n\n#### Input #1\n\n```\n\n4 5\n\n2 1 10\n\n3 2 5\n\n1 4 8\n\n1 2 6\n\n3 1 17\n\n3\n\n0\n\n20 0 15 5\n\n10\n\n20 0 15 5\n\n30\n\n20 0 15 5\n\n```\n\n#### Output #1\n\n```\n0000\n0000\n0110\n```\n\n#### Input #2\n\n```\n\n3 5\n\n1 2 100\n\n1 2 10\n\n1 3 5\n\n1 2 100\n\n3 2 5\n\n1\n\n1000000000\n\n0 0 0\n\n```\n\n#### Output #2\n\n```\n000\n```\n\n#### Input #3\n\n```\n\n3 4\n\n2 3 5\n\n1 2 0\n\n3 1 4\n\n1 3 4\n\n10\n\n5\n\n7 5 3\n\n2\n\n5 7 0\n\n1\n\n1 1 1\n\n5\n\n3 0 1\n\n0\n\n5 3 5\n\n5\n\n6 0 4\n\n5\n\n1 5 6\n\n1\n\n7 7 2\n\n1\n\n1 6 6\n\n4\n\n7 7 2\n\n```\n\n#### Output #3\n\n```\n000\n000\n000\n001\n000\n001\n001\n000\n000\n000\n```\n\n### Note\n\nConsider the first example. If the initial variable values are $[20, 0, 15, 5]$, the resulting values will be $[6, 0, 5, 5]$ with any order of operations. Decreasing the variables $10$ times is not enough. However, if we can apply no more than $30$ changes, we can decrease the $1$-st variable by $2$, and the $4$-th variable by $25$, we get initial values equal to $[18, 0, 15, -20]$, and this sequence is $2$-unstable and $3$-unstable:\n\n- if you apply the operations in the order they are given, you will get $[-12, 0, 5, -20]$;\n- however, if you apply the operations in order $[3, 2, 4, 1, 5]$, you will get $[-12, -2, 5, -20]$;\n- and if you apply the operations in order $[3, 4, 5, 1, 2]$, you will get $[-12, -2, 3, -20]$.", "cfid": "2112F"}
{"problem_id": "2120E", "problem_title": "E. Lanes of Cars", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2120/E", "problem_statement": "Harshith is the president of TollClub. He tasks his subordinate Aryan to oversee a toll plaza with $n$ lanes. Initially, the $i$-th lane has $a_i$ cars waiting in a queue. Exactly one car from the front of each lane passes through the toll every second.\n\nThe angriness of a car is defined as the number of seconds it had to wait before passing through the toll. Consider it takes 1 sec for each car to pass the toll, i.e., the first car in a lane has angriness $1$, the second car has angriness $2$, and so on.\n\nTo reduce congestion and frustration, cars are allowed to switch lanes. A car can instantly move to the back of any other lane at any time. However, changing lanes increases its angriness by an additional $k$ units due to the confusion caused by the lane change.\n\nHarshith, being the awesome person he is, wants to help the drivers by minimising the total angriness of all cars. He asks Aryan to do so or get fired. Aryan is allowed to change lanes of any car anytime (possibly zero), but his goal is to find the minimum possible total angriness if the lane changes are done optimally. Help Aryan retain his job by determining the minimum angriness he can achieve.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\le n \\le 2 \\cdot 10^5$, $1 \\le k \\le 10^6$) — the number of lanes and the increment in angriness on a lane change.\n\nThe second line of each test case contains $n$ space-separated integers, denoting array $a$ — the $i$-th number representing the number of cars in the $i$-th lane ($1 \\le a_i \\le 10^6$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\nNote that the sum of $\\max a_i$ over all test cases is not bounded.\n\n### Output\n\nFor each test case, output a single integer in a new line, denoting the minimum total angriness.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n3 4\n\n13 7 4\n\n4 9\n\n6 12 14 5\n\n5 3\n\n2 4 13 5 10\n\n1 7\n\n6\n\n13 4\n\n10 26 34 39 9 43 48 41 1 38 13 4 46\n\n16 3\n\n176342 171863 70145 80835 160257 136105 78541 100795 114461 45482 68210 51656 29593 8750 173743 156063\n\n```\n\n#### Output #1\n\n```\n123\n219\n156\n21\n5315\n82302351405\n```\n\n### Note\n\nIn the first test case, Aryan shifts two cars from lane $1$ to lane $3$, after which the array becomes $[11, 7, 6]$. The total angriness is $\\frac{11\\cdot 12}{2}+\\frac{7\\cdot 8}{2}+\\frac{6\\cdot 7}{2}+2\\cdot 4=123$. It can be proven that this is the minimum possible angriness.\n\nIn the fourth test case, there is only one lane, so cars can't shift lanes. Total angriness is $\\frac{6\\cdot7}{2}=21$.", "cfid": "2120E"}
{"problem_id": "2120G", "problem_title": "G. Eulerian Line Graph", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2120/G", "problem_statement": "Aryan loves graph theory more than anything. Well, no, he likes to flex his research paper on line graphs to everyone more. To start a conversation with you, he decides to give you a problem on line graphs. In the mathematical discipline of graph theory, the line graph of a simple undirected graph $G$ is another simple undirected graph $L(G)$ that represents the adjacency between every two edges in $G$.\n\nPrecisely speaking, for an undirected graph $G$ without self-loops or multiple edges, its line graph $L(G)$ is a graph such that\n\n- Each vertex of $L(G)$ represents an edge of $G$.\n- Two vertices of $L(G)$ are adjacent if and only if their corresponding edges share a common endpoint in $G$.\n\n![](https://espresso.codeforces.com/7c4456d69ec30bde9274559f9dca34dcf6879258.png)\n\nAlso, $L^0(G)=G$ and $L^k(G)=L(L^{k-1}(G))$ for $k\\geq 1$.\n\nAn Euler trail is a sequence of edges that visits every edge of the graph exactly once. This trail can be either a path (starting and ending at different vertices) or a cycle (starting and ending at the same vertex). Vertices may be revisited during the trail, but each edge must be used exactly once.\n\nAryan gives you a simple connected graph $G$ with $n$ vertices and $m$ edges and an integer $k$, and it is guaranteed that $G$ has an Euler trail and it is not a path graph$^{\\text{∗}}$. He asks you to determine if $L^k(G)$ has an Euler trail.\n\n$^{\\text{∗}}$A path graph is a tree where every vertex is connected to atmost two other vertices.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains three space-separated integers $n$, $m$, and $k$ ($5 \\le n \\le 2 \\cdot 10^5$, $n-1 \\le m \\le \\min(\\frac{n\\cdot(n-1)}{2} ,2 \\cdot 10^5)$, $1 \\le k \\le 2 \\cdot 10^5$).\n\nThe next $m$ lines of each test case contain two space-separated integers $u$ and $v$ ($1 \\le u,v \\le n$, $u \\neq v$), denoting that an edge connects vertices $u$ and $v$.\n\nIt is guaranteed that the sum of $n$ and $m$ over all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each testcase, print \"YES\" if $L^k(G)$ has an Euler trail; otherwise, \"NO\".\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n5 5 2\n\n1 2\n\n2 3\n\n3 4\n\n4 5\n\n5 1\n\n5 6 1\n\n1 2\n\n2 3\n\n3 4\n\n4 5\n\n5 1\n\n1 3\n\n10 11 3\n\n1 2\n\n2 3\n\n3 4\n\n4 5\n\n4 6\n\n4 7\n\n5 7\n\n6 7\n\n7 8\n\n8 9\n\n9 10\n\n7 8 2\n\n1 3\n\n2 3\n\n1 4\n\n4 5\n\n2 5\n\n1 6\n\n6 7\n\n2 7\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nYES\nNO\n```\n\n### Note\n\nFor the first test case, $L^2(G)$ is isomorphic to $G$ itself. So, since $G$ has an Euler trail, $L^2(G)$ also has an Euler trail.\n\nFor the second test case, $L(G)$ looks as follows(Vertex $i-j$ of $L(G)$ in figure corresponds to edge between vertices $i$ and $j$ of $G$). It can be proven that this doesn't have an Euler trail.\n\n![](https://espresso.codeforces.com/b376c533b0c565921bd0995db02694519661b79c.png)", "cfid": "2120G"}
{"problem_id": "2120F", "problem_title": "F. Superb Graphs", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2120/F", "problem_statement": "As we all know, Aryan is a funny guy. He decides to create fun graphs. For a graph $G$, he defines fun graph $G'$ of $G$ as follows:\n\n- Every vertex $v'$ of $G'$ maps to a non-empty independent set$^{\\text{∗}}$ or clique$^{\\text{†}}$ in $G$.\n- The sets of vertices of $G$ that the vertices of $G'$ map to are pairwise disjoint and combined cover all the vertices of $G$, i.e., the sets of vertices of $G$ mapped by vertices of $G'$ form a partition of the vertex set of $G$.\n- If an edge connects two vertices $v_1'$ and $v_2'$ in $G'$, then there is an edge between every vertex of $G$ in the set mapped to $v_1'$ and every vertex of $G$ in the set mapped to $v_2'$.\n- If an edge does not connect two vertices $v_1'$ and $v_2'$ in $G'$, then there is not an edge between any vertex of $G$ in the set mapped to $v_1'$ and any vertex of $G$ in the set mapped to $v_2'$.\n\nAs we all know again, Harshith is a superb guy. He decides to use fun graphs to create his own superb graphs. For a graph $G$, a fun graph $G' '$ is called a superb graph of $G$ if $G' '$ has the minimum number of vertices among all possible fun graphs of $G$.\n\nAryan gives Harshith $k$ simple undirected graphs$^{\\text{‡}}$ $G_1, G_2,\\ldots,G_k$, all on the same vertex set $V$. Harshith then wonders if there exist $k$ other graphs $H_1, H_2,\\ldots,H_k$, all on some other vertex set $V'$ such that:\n\n- $G_i$ is a superb graph of $H_i$ for all $i\\in \\{1,2,\\ldots,k\\}$.\n- If a vertex $v\\in V$ maps to an independent set of size greater than $1$ in one $G_i, H_i$ ($1\\leq i\\leq k$) pair, then there exists no pair $G_j, H_j$ ($1\\leq j\\leq k, j\\neq i$) where $v$ maps to a clique of size greater than $1$.\n\nHelp Harshith solve his wonder.\n\n$^{\\text{∗}}$For a graph $G$, a subset $S$ of vertices is called an independent set if no two vertices of $S$ are connected with an edge.\n\n$^{\\text{†}}$For a graph $G$, a subset $S$ of vertices is called a clique if every vertex of $S$ is connected to every other vertex of $S$ with an edge.\n\n$^{\\text{‡}}$A graph is a simple undirected graph if its edges are undirected and there are no self-loops or multiple edges between the same pair of vertices.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 100$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1\\leq n\\leq 300, 1\\leq k\\leq 10$).\n\nThen, there are $k$ graphs described. The first line of each graph description contains a single integer $m$ ($0\\leq m\\leq \\frac{n\\cdot(n-1)}{2} $).\n\nNext $m$ lines each contain two space-separated integers $u$ and $v$ ($1\\leq u, v\\leq n, u\\neq v$), denoting that an edge connects vertices $u$ and $v$.\n\nIt is guaranteed that the sum of $m$ over all graphs over all test cases does not exceed $2\\cdot 10^5$, and the sum of $n$ over all test cases does not exceed $300$.\n\n### Output\n\nFor each testcase, print \"Yes\" if there exists $k$ graphs satisfying the conditions; otherwise, \"No\".\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n5 2\n\n3\n\n3 4\n\n5 3\n\n5 1\n\n6\n\n3 5\n\n3 4\n\n1 4\n\n1 2\n\n2 3\n\n4 2\n\n4 3\n\n0\n\n3\n\n3 1\n\n1 4\n\n1 2\n\n4\n\n4 2\n\n4 3\n\n1 2\n\n2 3\n\n3 2\n\n0\n\n3\n\n3 1\n\n3 2\n\n1 2\n\n```\n\n#### Output #1\n\n```\nYes\nYes\nNo\n```\n\n### Note\n\nFor the first test case, the following are the graphs of $G_1, H_1$ and $G_2, H_2$ such that $G_1$ is superb graph of $H_1$ and $G_2$ is superb graph of $H_2$.\n\n![](https://espresso.codeforces.com/452753955813c595256b6b1fee9c2f4329c082e5.png)\n\nIn each graph, vertex $2$ of $G_i$ corresonds to independent set $\\{2\\_1, 2\\_2\\}$ of corresponding $H_i$ and remaining vertices $v\\in\\{1,3,4,5\\}$ of $G_i$ correspond to independent set/clique $\\{v\\}$ in corresponding $H_i$(a single vertex set can be considered both an independent set and a clique).\n\nIn the third test case, it can be proven that the answer is \"No\".", "cfid": "2120F"}
{"problem_id": "2121H", "problem_title": "H. Ice Baby", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2121/H", "problem_statement": "The longest non-decreasing subsequence of an array of integers $a_1, a_2, \\ldots, a_n$ is the longest sequence of indices $1 \\leq i_1 < i_2 < \\ldots < i_k \\leq n$ such that $a_{i_1} \\leq a_{i_2} \\leq \\ldots \\leq a_{i_k}$. The length of the sequence is defined as the number of elements in the sequence. For example, the length of the longest non-decreasing subsequence of the array $a = [3, 1, 4, 1, 2]$ is $3$.\n\nYou are given two arrays of integers $l_1, l_2, \\ldots, l_n$ and $r_1, r_2, \\ldots, r_n$. For each $1 \\le k \\le n$, solve the following problem:\n\n- Consider all arrays of integers $a$ of length $k$, such that for each $1 \\leq i \\leq k$, it holds that $l_i \\leq a_i \\leq r_i$. Find the maximum length of the longest non-decreasing subsequence among all such arrays.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\leq n \\leq 2 \\cdot 10^5$) — the length of the arrays $l$ and $r$.\n\nThe next $n$ lines of each test case contain two integers $l_i$ and $r_i$ ($1 \\leq l_i \\leq r_i \\leq 10^9$).\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output $n$ integers: for each $k$ from $1$ to $n$, output the maximum length of the longest non-decreasing subsequence among all suitable arrays.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n1\n\n1 1\n\n2\n\n3 4\n\n1 2\n\n4\n\n4 5\n\n3 4\n\n1 3\n\n3 3\n\n8\n\n6 8\n\n4 6\n\n3 5\n\n5 5\n\n3 4\n\n1 3\n\n2 4\n\n3 3\n\n5\n\n1 2\n\n6 8\n\n4 5\n\n2 3\n\n3 3\n\n11\n\n35 120\n\n66 229\n\n41 266\n\n98 164\n\n55 153\n\n125 174\n\n139 237\n\n30 72\n\n138 212\n\n109 123\n\n174 196\n\n```\n\n#### Output #1\n\n```\n1\n1 1\n1 2 2 3\n1 2 2 3 3 3 4 5\n1 2 2 2 3\n1 2 3 4 5 6 7 7 8 8 9\n```\n\n### Note\n\nIn the first test case, the only possible array is $a = [1]$. The length of the longest non-decreasing subsequence of this array is $1$.\n\nIn the second test case, for $k = 2$, no matter how we choose the values of $a_1$ and $a_2$, the condition $a_1 > a_2$ will always hold. Therefore, the answer for $k = 2$ will be $1$.\n\nIn the third test case, for $k = 4$, we can choose the array $a = [5, 3, 3, 3]$. The length of the longest non-decreasing subsequence of this array is $3$.\n\nIn the fourth test case, for $k = 8$, we can choose the array $a = [7, 5, 3, 5, 3, 3, 3, 3]$. The length of the longest non-decreasing subsequence of this array is $5$.\n\nIn the fifth test case, for $k = 5$, we can choose the array $a = [2, 8, 5, 3, 3]$. The length of the longest non-decreasing subsequence of this array is $3$.", "cfid": "2121H"}
{"problem_id": "2121G", "problem_title": "G. Gangsta", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2121/G", "problem_statement": "You are given a binary string $s_1s_2 \\ldots s_n$ of length $n$. A string $s$ is called binary if it consists only of zeros and ones.\n\nFor a string $p$, we define the function $f(p)$ as the maximum number of occurrences of any character in the string $p$. For example, $f(00110) = 3$, $f(01) = 1$.\n\nYou need to find the sum $f(s_ls_{l+1} \\ldots s_r)$ for all pairs $1 \\leq l \\leq r \\leq n$.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. Then follows their descriptions.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) — the length of the binary string.\n\nThe second line of each test case contains a string of length $n$, consisting of $0$s and $1$s — the binary string $s$.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the sum $f(s_ls_{l+1} \\ldots s_r)$ for all pairs $1 \\leq l \\leq r \\leq n$.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n1\n\n0\n\n2\n\n01\n\n4\n\n0110\n\n6\n\n110001\n\n8\n\n10011100\n\n11\n\n01011011100\n\n```\n\n#### Output #1\n\n```\n1\n3\n14\n40\n78\n190\n```\n\n### Note\n\nIn the first test case, the string $s$ has one substring, and the value $f(0) = 1$.\n\nIn the second test case, all substrings of the string $s$ are $0$, $01$, $1$. And the answer is $1 + 1 + 1 = 3$, respectively.\n\nIn the third test case, all substrings of the string $s$ are $0$, $01$, $011$, $0110$, $1$, $11$, $110$, $1$, $10$, $0$. And the answer is $1 + 1 + 2 + 2 + 1 + 2 + 2 + 1 + 1 + 1 = 14$, respectively.", "cfid": "2121G"}
{"problem_id": "2113D", "problem_title": "D. Cheater", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2113/D", "problem_statement": "You are playing a new card game in a casino with the following rules:\n\n1. The game uses a deck of $2n$ cards with different values.\n2. The deck is evenly split between the player and the dealer: each receives $n$ cards.\n3. Over $n$ rounds, the player and the dealer simultaneously play one top card from their hand. The cards are compared, and the point goes to the one whose card has a higher value. The winning card is removed from the game, while the losing card is returned to the hand and placed on top of the other cards in the hand of the player who played it.\n\nNote that the game always lasts exactly $n$ rounds.\n\nYou have tracked the shuffling of the cards and know the order of the cards in the dealer's hand (from top to bottom). You want to maximize your score, so you can swap any two cards in your hand no more than once (to avoid raising suspicion).\n\nDetermine the maximum number of points you can achieve.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 5 \\cdot 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\leq n \\leq 2 \\cdot 10^{5}$) — the number of cards in the player's hand.\n\nThe second line of each test case contains $n$ integers $a_{1}, a_{2}, \\ldots, a_{n}$ ($1 \\leq a_{i} \\leq 2n$) — the values of the cards in the player's hand from top to bottom.\n\nThe third line of each test case contains $n$ integers $b_{1}, b_{2}, \\ldots, b_{n}$ ($1 \\leq b_{i} \\leq 2n$) — the values of the cards in the dealer's hand from top to bottom.\n\nIt is guaranteed that the values of all cards are distinct.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the maximum number of points you can achieve.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n7\n\n13 7 4 9 12 10 2\n\n6 1 14 3 8 5 11\n\n3\n\n1 6 5\n\n2 3 4\n\n5\n\n8 6 3 10 1\n\n7 9 5 2 4\n\n```\n\n#### Output #1\n\n```\n6\n2\n3\n```\n\n### Note\n\nIn the first test case, the cards can remain unchanged. The gameplay will be organized as follows:\n\n1. The cards with values $13$ and $6$ are compared. The player wins and receives a point.\n2. The cards with values $7$ and $6$ are compared. The player wins and receives a point.\n3. The cards with values $4$ and $6$ are compared. The dealer wins.\n4. The cards with values $4$ and $1$ are compared. The player wins and receives a point.\n5. The cards with values $9$ and $1$ are compared. The player wins and receives a point.\n6. The cards with values $12$ and $1$ are compared. The player wins and receives a point.\n7. The cards with values $10$ and $1$ are compared. The player wins and receives a point.\n\nThus, the player received $6$ points.\n\nIn the second test case, the cards with values $1$ and $5$ can be swapped, then the player's hand looks as follows $[5, 6, 1]$. The gameplay will be organized as follows:\n\n1. The cards with values $5$ and $2$ are compared. The player wins and receives a point.\n2. The cards with values $6$ and $2$ are compared. The player wins and receives a point.\n3. The cards with values $1$ and $2$ are compared. The dealer wins.\n\nThus, the player received $2$ points.\n\nIn the third test case, the cards with values $3$ and $10$ can be swapped, then the player's hand looks as follows $[8, 6, 10, 3, 1]$. The gameplay will be organized as follows:\n\n1. The cards with values $8$ and $7$ are compared. The player wins and receives a point.\n2. The cards with values $6$ and $7$ are compared. The dealer wins.\n3. The cards with values $6$ and $9$ are compared. The dealer wins.\n4. The cards with values $6$ and $5$ are compared. The player wins and receives a point.\n5. The cards with values $10$ and $5$ are compared. The player wins and receives a point.\n\nThus, the player received $3$ points.", "cfid": "2113D"}
{"problem_id": "2113F", "problem_title": "F. Two Arrays", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2113/F", "problem_statement": "You are given two arrays $a$ and $b$ of length $n$. You can perform the following operation an unlimited number of times:\n\n- Choose an integer $i$ from $1$ to $n$ and swap $a_i$ and $b_i$.\n\nLet $f(c)$ be the number of distinct numbers in array $c$. Find the maximum value of $f(a) + f(b)$. Also, output the arrays $a$ and $b$ after performing all operations.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 10^5$) — the length of the arrays.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 2n$) — the elements of array $a$.\n\nThe third line of each test case contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($1 \\le b_i \\le 2n$) — the elements of array $b$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, print a single integer in the first line — the maximum value of $f(a) + f(b)$.\n\nIn the second line, print $n$ integers — the elements of array $a$ after performing the operations.\n\nIn the third line, print $n$ integers — the elements of array $b$ after performing the operations.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n5\n\n1 2 4 4 4\n\n1 3 3 5 2\n\n7\n\n2 2 4 4 5 5 5\n\n1 3 3 2 1 6 6\n\n7\n\n12 3 3 4 5 6 4\n\n1 2 13 8 10 13 7\n\n```\n\n#### Output #1\n\n```\n9\n1 3 4 5 2\n1 2 3 4 4\n12\n2 3 4 2 1 5 6\n1 2 3 4 5 6 5\n14\n12 3 13 8 10 6 4\n1 2 3 4 5 13 7\n```\n\n### Note\n\nIn the first test case, after applying three operations with $i=2$, $i=4$, and $i=5$, we obtain $a = [1, 3, 4, 5, 2]$ and $b = [1, 2, 3, 4, 4]$. After that, $f(a) + f(b) = 5 + 4 = 9$. It can be shown that it is not possible to achieve a greater answer.\n\nIn the second test case, after applying the operations: \n\n$$f([2, 3, 4, 2, 1, 5, 6]) + f([1, 2, 3, 4, 5, 6, 5]) = 6 + 6 = 12$$\n\n", "cfid": "2113F"}
{"problem_id": "2113E", "problem_title": "E. From Kazan with Love", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2113/E", "problem_statement": "Marat is a native of Kazan. Kazan can be represented as an undirected tree consisting of $n$ vertices. In his youth, Marat often got into street fights, and now he has $m$ enemies, numbered from $1$ to $m$, living in Kazan along with him.\n\nEvery day, all the people living in the city go to work. Marat knows that the $i$-th of his enemies lives at vertex $a_i$ and works at vertex $b_i$. He himself lives at vertex $x$ and works at vertex $y$. It is guaranteed that $a_i \\ne x$.\n\nAll enemies go to work via the shortest path and leave their homes at time $1$. That is, if we represent the shortest path between vertices $a_i$ and $b_i$ as $c_1, c_2, c_3, \\ldots, c_k$ (where $c_1 = a_i$ and $c_k = b_i$), then at the moment $p$ ($1 \\le p \\le k$), the enemy numbered $i$ will be at vertex $c_p$.\n\nMarat really does not want to meet any of his enemies at the same vertex at the same time, as this would create an awkward situation, but they can meet on an edge. Marat also leaves his home at time $1$, and at each subsequent moment in time, he can either move to an adjacent vertex or stay at his current one.\n\nNote that Marat can only meet the $i$-th enemy at the moments $2, 3, \\ldots, k$ (where $c_1, c_2, \\ldots, c_k$ is the shortest path between vertices $a_i$ and $b_i$). In other words, starting from the moment after the enemy reaches work, Marat can no longer meet him.\n\nHelp Marat find the earliest moment in time when he can reach work without encountering any enemies along the way, or determine that it is impossible.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains four integers $n$, $m$, $x$, and $y$ ($2 \\le n \\le 10^5$, $1 \\le m \\le 200$, $1 \\le x, y \\le n$, $x \\neq y$) — the number of vertices in the tree, the number of enemies, and the vertex numbers from which Marat starts his journey and where he needs to arrive, respectively.\n\nThe $j$-th of the following $n - 1$ lines contains two integers $v_j$ and $u_j$ ($1 \\le v_j, u_j \\le n$, $v_j \\neq u_j$) — the endpoints of the $j$-th edge of the tree.\n\nThe $i$-th of the following $m$ lines contains two integers $a_i$ and $b_i$ ($1 \\le a_i, b_i \\le n$, $a_i \\neq b_i$, $a_i \\ne x$) — the description of the routes of Marat's enemies.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, output a single integer — the minimum moment in time when Marat can reach work, or $-1$ if it is impossible.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n4 1 1 4\n\n1 2\n\n2 3\n\n3 4\n\n4 1\n\n5 1 1 5\n\n1 2\n\n2 3\n\n3 4\n\n4 5\n\n5 1\n\n9 2 1 9\n\n1 2\n\n2 3\n\n3 4\n\n3 5\n\n5 6\n\n6 7\n\n6 8\n\n8 9\n\n9 1\n\n7 1\n\n9 2 7 2\n\n1 4\n\n2 5\n\n3 6\n\n4 5\n\n5 6\n\n4 7\n\n5 8\n\n6 9\n\n2 8\n\n3 7\n\n3 2 1 3\n\n1 2\n\n2 3\n\n2 1\n\n3 1\n\n```\n\n#### Output #1\n\n```\n4\n6\n10\n5\n-1\n```\n\n### Note\n\nIn the first test case, it is possible to reach vertex number $4$ from vertex number $1$ via the shortest path. Note that Marat will meet a single enemy on an edge, not at a vertex.\n\nIn the second test case, the optimal strategy is to wait for one moment in time at the starting vertex and then go along the shortest path from vertex $1$ to vertex $5$. If he does not stop at the beginning, Marat will meet his enemy at a vertex, not on an edge.\n\nIn the third test case, it is beneficial to go from vertex $1$ to vertex $4$. After that, he should not move anywhere for one moment in time, and then go along the shortest path from vertex $4$ to vertex $9$.", "cfid": "2113E"}
{"problem_id": "2118D2", "problem_title": "D2. Red Light, Green Light (Hard version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2118/D2", "problem_statement": "This is the hard version of the problem. The only difference is the constraint on $k$ and the total sum of $n$ and $q$ across all test cases. You can make hacks only if both versions of the problem are solved.\n\nYou are given a strip of length $10^{15}$ and a constant $k$. There are exactly $n$ cells that contain a traffic light; each has a position $p_i$ and an initial delay $d_i$ for which $d_i < k$. The $i$-th traffic light works the following way:\n\n- it shows red at the $l \\cdot k + d_i$-th second, where $l$ is an integer,\n- it shows green otherwise.\n\nAt second $0$, you are initially positioned at some cell on the strip, facing the positive direction. At each second, you perform the following actions in order:\n\n- If the current cell contains a red traffic light, you turn around.\n- Move one cell in the direction you are currently facing.\n\nYou are given $q$ different starting positions. For each one, determine whether you will eventually leave the strip within $10^{100}$ seconds.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 2\\cdot10^5$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$, $k$ ($\\mathbf{1 \\le n \\le 2\\cdot10^5}$ and $\\mathbf{1 \\le k \\le 10^{15}}$) — the number of traffic lights and the length of the period.\n\nThe second line of each test case contains $n$ integers $p_1, p_2, \\ldots p_n$ ($1 \\le p_1 < p_2 < \\ldots < p_n \\le 10^{15}$) — the positions of the traffic lights.\n\nThe third line of each test case contains $n$ integers $d_1, d_2, \\ldots d_n$ ($0 \\le d_i < k$) — the delays of the traffic lights.\n\nThe fourth line of each test case contains one integer $q$ ($\\mathbf{1 \\le q \\le 2\\cdot10^5}$) — the number of queries.\n\nThe fifth line of each test case contains $q$ integers $a_1, a_2, \\ldots, a_q$ ($1 \\leq a_i \\leq 10^{15}$) — the starting positions.\n\nIt is guaranteed that the sum of $n$ and $q$ over all test cases does not exceed $\\mathbf{2\\cdot10^5}$.\n\n### Output\n\nFor each test case, output $q$ lines. Each line should contain \"YES\" if you will eventually leave the strip and \"NO\" otherwise. You can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2 2\n\n1 4\n\n1 0\n\n3\n\n1 2 3\n\n9 4\n\n1 2 3 4 5 6 7 8 9\n\n3 2 1 0 1 3 3 1 1\n\n5\n\n2 5 6 7 8\n\n4 2\n\n1 2 3 4\n\n0 0 0 0\n\n4\n\n1 2 3 4\n\n3 4\n\n1 2 3\n\n3 1 1\n\n3\n\n1 2 3\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nYES\nYES\nYES\nYES\nNO\nNO\nYES\nYES\nNO\nNO\nYES\nNO\nYES\n```\n\n### Note\n\nIn the first test case, the following happens at starting positions $1$, $2$, and $3$:\n\n![](https://espresso.codeforces.com/63db34c82cbed1e62971514d85a4a6bf71302a79.png)\n\nAnd the following in the second test case at starting position $2$:\n\n![](https://espresso.codeforces.com/70971ec2952940a09246b1e55290386a0dec24a1.png)", "cfid": "2118D2"}
{"problem_id": "2118E", "problem_title": "E. Grid Coloring", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2118/E", "problem_statement": "There is a $n\\times m$ grid with each cell initially white. You have to color all the cells one-by-one. After you color a cell, all the colored cells furthest from it receive a penalty. Find a coloring order, where no cell has more than $3$ penalties.\n\nNote that $n$ and $m$ are both odd.\n\nThe distance metric used is the [chessboard distance](https://en.wikipedia.org/wiki/Chebyshev_distance) while we decide ties between cells with [Manhattan distance](https://en.wikipedia.org/wiki/Taxicab_geometry#Formal_definition). Formally, a cell $(x_2, y_2)$ is further away than $(x_3, y_3)$ from a cell $(x_1, y_1)$ if one of the following holds:\n\n- $\\max\\big(\\lvert x_1 - x_2 \\rvert, \\lvert y_1 - y_2 \\rvert\\big)>\\max\\big(\\lvert x_1 - x_3 \\rvert, \\lvert y_1 - y_3 \\rvert\\big)$\n- $\\max\\big(\\lvert x_1 - x_2 \\rvert, \\lvert y_1 - y_2 \\rvert\\big)=\\max\\big(\\lvert x_1 - x_3 \\rvert, \\lvert y_1 - y_3 \\rvert\\big)$ and $\\lvert x_1 - x_2 \\rvert + \\lvert y_1 - y_2 \\rvert>\\lvert x_1 - x_3 \\rvert + \\lvert y_1 - y_3 \\rvert$\n\nIt can be proven that at least one solution always exists.\n\n![](https://espresso.codeforces.com/426e6caed4dd02a8735e6ae056f6458c2ef70599.png)Example showing penalty changes after coloring the center of a $5 \\times 5$ grid. The numbers indicate the penalty of the cells.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 100$). The description of the test cases follows.\n\nThe first line of each test case contains two odd integers $n$ and $m$ ($1 \\le n, m \\le 4999$) — the number of rows and columns.\n\nIt is guaranteed that the sum of $n \\cdot m$ over all test cases does not exceed $5000$.\n\n### Output\n\nFor each test case, output $n \\cdot m$ lines where the $i$-th line should contain the coordinates of the $i$-th cell in your coloring order. If there are multiple solutions, print any of them.\n\nThe empty lines in the example output are just for increased readability. You're not required to print them.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3 3\n\n1 1\n\n1 5\n\n```\n\n#### Output #1\n\n```\n2 1\n2 3\n2 2\n1 1\n3 2\n3 3\n3 1\n1 3\n1 2\n\n1 1\n\n1 2\n1 4\n1 5\n1 1\n1 3```\n\n### Note\n\nIn the first test case, the grid can be colored as follows:\n\n![](https://espresso.codeforces.com/fcb29d564cde5c0f485e668c35cf05566b558ec8.png)The numbers indicate the penalty of the cells.", "cfid": "2118E"}
{"problem_id": "2117G", "problem_title": "G. Omg Graph", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2117/G", "problem_statement": "You are given an undirected connected weighted graph. Define the cost of a path of length $k$ to be as follows:\n\n- Let the weights of all the edges on the path be $w_1,...,w_k$.\n- The cost of the path is $(\\min_{i = 1}^{k}{w_i}) + (\\max_{i=1}^{k}{w_i})$, or in other words, the maximum edge weight + the minimum edge weight.\n\nAcross all paths from vertex $1$ to $n$, report the cost of the path with minimum cost. Note that the path is not necessarily simple.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $m$ ($2 \\le n \\le 2 \\cdot 10^5, n - 1 \\le m \\le \\min(2 \\cdot 10^5, \\frac{n(n - 1)}{2})$).\n\nThe next $m$ lines each contain integers $u, v$ and $w$ ($1 \\le u, v \\le n, 1 \\le w \\le 10^9$) representing an edge from vertex $u$ to $v$ with weight $w$. It is guaranteed that the graph does not contain self-loops or multiple edges and the resulting graph is connected.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$ and that the sum of $m$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer, the minimum cost path from vertex $1$ to $n$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3 2\n\n1 2 1\n\n2 3 1\n\n3 2\n\n1 3 13\n\n1 2 5\n\n8 9\n\n1 2 6\n\n2 3 5\n\n3 8 6\n\n1 4 7\n\n4 5 4\n\n5 8 7\n\n1 6 5\n\n6 7 5\n\n7 8 5\n\n3 3\n\n1 3 9\n\n1 2 8\n\n2 3 3\n\n```\n\n#### Output #1\n\n```\n2\n18\n10\n11\n```\n\n### Note\n\nFor the second test case, the optimal path is $1 \\rightarrow 2 \\rightarrow 1 \\rightarrow 3$, the edge weights are $5, 5, 13$ so the cost is $\\min(5, 5, 13) + \\max(5, 5, 13) = 5 + 13 = 18$. It can be proven that there is no path with lower cost.", "cfid": "2117G"}
{"problem_id": "2117H", "problem_title": "H. Incessant Rain", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2117/H", "problem_statement": "Note the unusual memory limit.\n\nSilver Wolf gives you an array $a$ of length $n$ and $q$ queries. In each query, she replaces an element in $a$. After each query, she asks you to output the maximum integer $k$ such that there exists an integer $x$ such that it is the $k$-majority of a subarray$^{\\text{∗}}$ of $a$.\n\nAn integer $y$ is the $k$-majority of array $b$ if $y$ appears at least $\\lfloor \\frac{|b|+1}{2} \\rfloor +k$ times in $b$, where $|b|$ represents the length of $b$. Note that $b$ may not necessarily have a $k$-majority.\n\n$^{\\text{∗}}$An array $b$ is a subarray of an array $a$ if $b$ can be obtained from $a$ by the deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$)  — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $q$ ($1 \\leq n, q \\leq 3 \\cdot 10^5$)  — the length of $a$ and the number of queries.\n\nThe following line contains $n$ space-separated integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq n$).\n\nThe following $q$ lines contain two integers $i$ and $x$, denoting the query that replaces $a_i$ with $x$ ($1 \\leq i, x \\leq n$).\n\nIt is guaranteed that the sum of $n$ and the sum of $q$ over all test cases does not exceed $3 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the answer to all queries on a single new line, separated by a space.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n5 5\n\n1 2 3 4 5\n\n3 4\n\n1 4\n\n2 4\n\n4 3\n\n2 3\n\n7 8\n\n3 2 3 3 2 2 3\n\n2 3\n\n5 3\n\n6 3\n\n3 4\n\n4 4\n\n7 4\n\n6 4\n\n2 4\n\n```\n\n#### Output #1\n\n```\n1 1 2 1 0\n2 2 3 2 1 1 1 2\n```", "cfid": "2117H"}
{"problem_id": "2111E", "problem_title": "E. Changing the String", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2111/E", "problem_statement": "Given a string $s$ that consists only of the first three letters of the Latin alphabet, meaning each character of the string is either a, b, or c.\n\nAlso given are $q$ operations that need to be performed on the string. In each operation, two letters $x$ and $y$ from the set of the first three letters of the Latin alphabet are provided, and for each operation, one of the following two actions must be taken:\n\n- change any (one) occurrence of the letter $x$ in the string $s$ to the letter $y$ (if at least one occurrence of the letter $x$ exists);\n- do nothing.\n\nThe goal is to perform all operations in the given order in such a way that the string $s$ becomes lexicographically minimal.\n\nRecall that a string $a$ is lexicographically less than a string $b$ if and only if one of the following conditions holds:\n\n- $a$ is a prefix of $b$, but $a \\neq b$;\n- at the first position where $a$ and $b$ differ, the string $a$ has a letter that comes earlier in the alphabet than the corresponding letter in $b$.\n\n### Input\n\nEach test consists of several test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10^{3}$) — the number of test cases. The description of the test cases follows.\n\nIn the first line of each test case, there are two integers $n$ and $q$ ($1 \\le n, q \\le 2 \\cdot 10^{5}$) — the length of the string $s$ and the number of operations.\n\nIn the second line of each test case, the string $s$ is given — a string of exactly $n$ characters, each of which is a, b, or c.\n\nThe next $q$ lines of each test case contain the description of the operations. Each line contains two characters $x$ and $y$, each of which is a, b, or c.\n\nAdditional constraints on the input:\n\n- the sum of $n$ across all test cases does not exceed $2 \\cdot 10^{5}$;\n- the sum of $q$ across all test cases does not exceed $2 \\cdot 10^{5}$.\n\n### Output\n\nFor each test case, output the lexicographically minimal string that can be obtained from $s$ using the given operations.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2 2\n\ncb\n\nc b\n\nb a\n\n10 10\n\nbbbbbbbbbb\n\nb a\n\nb c\n\nc b\n\nb a\n\nc a\n\nb c\n\nb c\n\nb a\n\na b\n\nc a\n\n30 20\n\nabcaababcbbcabcbbcabcbabbbbabc\n\nb c\n\nb c\n\nc a\n\nb c\n\nb c\n\nb a\n\nb c\n\nb c\n\nb a\n\nb a\n\nb a\n\nb a\n\nc a\n\nb c\n\nc a\n\nb c\n\nc a\n\nc a\n\nb c\n\nc b\n\n```\n\n#### Output #1\n\n```\nab\naaaaabbbbb\naaaaaaaaaaaaaaabbbabcbabbbbabc\n```\n\n### Note\n\nIn the first test case, both operations need to be applied to the first letter:\n\n1. after the first operation, $s = $ \"bb\"\n2. after the second operation, $s = $ \"ab\"\n\nIn the second test case, the string could change as follows:\n\n01. \"bbbbabbbbb\" (changed the $5$-th letter)\n02. \"cbbbabbbbb\" (changed the $1$-st letter)\n03. \"cbbbabbbbb\" (did nothing)\n04. \"cbbaabbbbb\" (changed the $4$-th letter)\n05. \"abbaabbbbb\" (changed the $1$-st letter)\n06. \"abcaabbbbb\" (changed the $3$-rd letter)\n07. \"abcaabbbbb\" (did nothing)\n08. \"aacaabbbbb\" (changed the $2$-nd letter)\n09. \"aacaabbbbb\" (did nothing)\n10. \"aaaaabbbbb\" (changed the $3$-rd letter)", "cfid": "2111E"}
{"problem_id": "2111F", "problem_title": "F. Puzzle", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2111/F", "problem_statement": "You have been gifted a puzzle, where each piece of this puzzle is a square with a side length of one. You can glue any picture onto this puzzle, cut it, and obtain an almost ordinary jigsaw puzzle.\n\nYour friend is an avid mathematician, so he suggested you consider the following problem. Is it possible to arrange the puzzle pieces in such a way that the following conditions are met:\n\n- the pieces are aligned parallel to the coordinate axes;\n- the pieces do not overlap each other;\n- all pieces form a single connected component (i.e., there exists a path from each piece to every other piece along the pieces, where each two consecutive pieces share a side);\n- the ratio of the perimeter of this component to the area of this component equals $\\frac{p}{s}$;\n- the number of pieces used does not exceed $50\\,000$.\n\nCan you handle it?\n\n![](https://espresso.codeforces.com/21225771b06e268653d52533d80b6910fcaf58fb.png)For this figure, the ratio of the perimeter to the area is $\\frac{11}{9}$\n\n### Input\n\nEach test consists of several test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10$) — the number of test cases. The description of the test cases follows.\n\nThe only line of each test case contains two integers $p$ and $s$ ($1 \\le p, s \\le 50$).\n\n### Output\n\nFor each test case:\n\n- if it is impossible to arrange the pieces as described above, output a single integer $-1$;\n- otherwise, in the first line output a single integer $k$ ($1 \\le k \\le 50\\,000$), and then in $k$ lines output the coordinates of the pieces: each line should contain two integers $x_{i}$ and $y_{i}$ ($-10^{9} \\le x_{i}, y_{i} \\le 10^{9}$). If there are multiple suitable arrangements of the pieces, output any of them.\n\n### Examples\n\n#### Input #1\n\n```\n\n2\n\n1 1\n\n31 4\n\n```\n\n#### Output #1\n\n```\n20\n3 7\n3 8\n6 4\n6 5\n3 5\n4 4\n4 5\n4 3\n3 4\n5 3\n5 4\n5 7\n3 6\n4 6\n5 5\n5 6\n4 7\n4 8\n6 6\n6 7\n-1\n```\n\n#### Input #2\n\n```\n\n2\n\n4 2\n\n12 5\n\n```\n\n#### Output #2\n\n```\n24\n-7 2\n-3 -3\n-7 -5\n-7 1\n-3 2\n-7 -2\n-3 -5\n-7 -6\n-5 -6\n-3 -4\n-3 -6\n-7 0\n-6 -6\n-7 -3\n-5 2\n-7 -1\n-3 1\n-4 -6\n-3 0\n-7 -4\n-6 2\n-4 2\n-3 -1\n-3 -2\n5\n0 0\n0 1\n1 0\n-1 0\n0 -1\n```\n\n### Note\n\nIn the first test case of the first test, the figure may look like this:\n\n![](https://espresso.codeforces.com/c78a4676f61c6a56a17a58a94d80b977997a016f.png)\n\nIn the second test, the figures look like this:\n\n![](https://espresso.codeforces.com/2d4ef6ccde7efc7b4b537794e8dec6817d5235f2.png)![](https://espresso.codeforces.com/54d05bdd77431e3f82d36d7b022980f2a2ecafa8.png)\n\nNote that the internal perimeter is also taken into account!", "cfid": "2111F"}
{"problem_id": "2111G", "problem_title": "G. Divisible Subarrays", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2111/G", "problem_statement": "Technically, this is an interactive problem.\n\nAn array $a$ of $m$ numbers is called divisible if at least one of the following conditions holds:\n\n- There exists an index $i$ ($1 \\le i < m$) and an integer $x$ such that for all indices $j$ ($j \\le i$), it holds that $a_{j} \\le x$ and for all indices $k$ ($k > i$), it holds that $a_{k} > x$.\n- There exists an index $i$ ($1 \\le i < m$) and an integer $x$ such that for all indices $j$ ($j \\le i$), it holds that $a_{j} > x$ and for all indices $k$ ($k > i$), it holds that $a_{k} \\le x$.\n\nYou are given a permutation $p$ of integers $1, 2, \\dots, n$. Your task is to answer queries of the following form fast: if we take only the segment \\[$l$, $r$\\] from the permutation, that is, the numbers $p_{l}, p_{l + 1}, \\dots, p_{r}$, is this subarray of numbers divisible?\n\nQueries will be submitted in interactive mode in groups of $10$, meaning you will not receive the next group of queries until you output all answers for the current group.\n\n### Input\n\nThe first line contains one integer $n$ ($2 \\le n \\le 2 \\cdot 10^{5}$) — the size of the permutation.\n\nThe second line contains $n$ integers $p_{i}$ ($1 \\le p_{i} \\le n$) — the permutation of natural numbers itself.\n\nThe third line contains one integer $q$ ($10 \\le q \\le 10^{6}, q \\bmod 10 = 0$) — the number of queries.\n\nThe following $q$ lines contain two integers $l$ and $r$ ($1 \\le l < r \\le n$) — the parameters of the query.\n\n### Output\n\nFor each query, output the string \"YES\" if the subarray from this query is divisible and \"NO\" otherwise.\n\nAfter printing the answers to a group of queries, do not forget to output the end of line and flush the output buffer. Otherwise, you may get the Idleness Limit Exceeded verdict. To flush the buffer, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- flush(output) in Pascal;\n- stdout.flush() in Python;\n- refer to the documentation for other languages.\n\nYou have to flush the output buffer after the $10$-th, $20$-th, $30$-th query (and so on), i. e. after each query with index divisible by $10$. After that, you can read the next group of queries.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n4 2 3 6 1 5 7\n\n20\n\n1 2\n\n1 3\n\n1 4\n\n1 5\n\n1 6\n\n2 3\n\n2 4\n\n2 5\n\n2 6\n\n3 4\n\n3 5\n\n3 6\n\n4 5\n\n4 6\n\n5 6\n\n1 7\n\n2 7\n\n3 7\n\n4 7\n\n5 7\n\n```\n\n#### Output #1\n\n```\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n```", "cfid": "2111G"}
{"problem_id": "2115C", "problem_title": "C. Gellyfish and Eternal Violet", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2115/C", "problem_statement": "There are $n$ monsters, numbered from $1$ to $n$, in front of Gellyfish. The HP of the $i$-th monster is $h_i$.\n\nGellyfish doesn't want to kill them, but she wants to keep these monsters from being a threat to her. So she wants to reduce the HP of all the monsters to exactly $1$.\n\nNow, Gellyfish, with The Sword Sharpened with Tears, is going to attack the monsters for $m$ rounds. For each round:\n\n1. The Sword Sharpened with Tears shines with a probability of $p$.\n2. Gellyfish can choose whether to attack:\n   - If Gellyfish doesn't attack, nothing happens.\n   - If Gellyfish chooses to attack and The Sword Sharpened with Tears shines, the HP of all the monsters will be reduced by $1$.\n   - If Gellyfish chooses to attack and The Sword Sharpened with Tears does not shine, Gellyfish can choose one of the monsters and reduce its HP by $1$.\n\nPlease note that before Gellyfish decides whether or not to attack, she will know whether the sword shines or not. Also, when the sword shines, Gellyfish can only make attacks on all the monsters and cannot make an attack on only one monster.\n\nNow, Gellyfish wants to know what the probability is that she will reach her goal if she makes choices optimally during the battle.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 100$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n$, $m$, and $p'$ ($1 \\leq n \\leq 20$, $1 \\leq m \\leq 4000$, $0 \\leq p' \\leq 100$) — the number of monsters, the number of rounds of attacks, and an integer representing the probability $p = \\frac {p'} {100}$ that the Sword Sharpened with Tears shines.\n\nThe second line of each test case contains $n$ integers $h_1,h_2,\\ldots,h_n$ ($1 \\leq h_i \\leq 400$) — the HP of the monsters.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $100$.\n\n### Output\n\nFor each test case, output a single real number representing the probability that Gellyfish will reach her goal.\n\nYour answer is considered correct if its absolute or relative error does not exceed $10^{-6}$.\n\nFormally, let your answer be $a$, and the jury's answer be $b$. Your answer is accepted if and only if $\\frac{|a - b|}{\\max{(1, |b|)}} \\le 10^{-6}$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2 2 10\n\n2 2\n\n5 5 20\n\n2 2 2 2 2\n\n6 20 50\n\n1 1 4 5 1 4\n\n9 50 33\n\n9 9 8 2 4 4 3 5 3\n\n```\n\n#### Output #1\n\n```\n0.910000\n0.672320\n0.588099\n0.931474\n```\n\n### Note\n\nIn the first test case, Gellyfish will always attack whether the sword shines or not in the first round.\n\nIf the sword shines in the first round, then Gellyfish can reach her goal after the attack in the first round.\n\nOtherwise, if the sword does not shine in the first round, she will attack monster $1$ in the first round. For the second round:\n\n- If the sword shines, since monster $1$ was attacked in the first round, Gellyfish can't reach her goal.\n- Otherwise, Gellyfish can attack monster $2$, allowing her to reach her goal.\n\nTherefore, the probability that Gellyfish can reach her goal is $10\\% + (90\\% \\cdot 90\\%) = 91\\%$.\n\nIn the second test case, Gellyfish will only attack in the first round where the sword shines. It can be observed that the only way Gellyfish can't reach her goal is if the sword never shines in all $5$ rounds. The probability that Gellyfish can reach her goal is $100\\% - (80\\%)^5 = 67.232\\%$.", "cfid": "2115C"}
{"problem_id": "2115D", "problem_title": "D. Gellyfish and Forget-Me-Not", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2115/D", "problem_statement": "Gellyfish and Flower are playing a game.\n\nThe game consists of two arrays of $n$ integers $a_1,a_2,\\ldots,a_n$ and $b_1,b_2,\\ldots,b_n$, along with a binary string $c_1c_2\\ldots c_n$ of length $n$.\n\nThere is also an integer $x$ which is initialized to $0$.\n\nThe game consists of $n$ rounds. For $i = 1,2,\\ldots,n$, the round proceeds as follows:\n\n1. If $c_i = \\mathtt{0}$, Gellyfish will be the active player. Otherwise, if $c_i = \\mathtt{1}$, Flower will be the active player.\n2. The active player will perform exactly one of the following operations:\n   - Set $x:=x \\oplus a_i$.\n   - Set $x:=x \\oplus b_i$.\n\nHere, $\\oplus$ denotes the [bitwise XOR operation](https://en.wikipedia.org/wiki/Bitwise_operation#XOR).\n\nGellyfish wants to minimize the final value of $ x $ after $ n $ rounds, while Flower wants to maximize it.\n\nFind the final value of $ x $ after all $ n $ rounds if both players play optimally.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\leq n \\leq 10^5$) — the number of rounds of the game.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\leq a_i < 2^{60}$).\n\nThe third line of each test case contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($0 \\leq b_i < 2^{60}$).\n\nThe fourth line of each test case contains a binary string $c$ of length $n$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, output a single integer — the final value of $ x $ after all $ n $ rounds.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n1\n\n0\n\n2\n\n0\n\n2\n\n12 2\n\n13 3\n\n11\n\n3\n\n6 1 2\n\n6 2 3\n\n010\n\n4\n\n1 12 7 2\n\n4 14 4 2\n\n0111\n\n9\n\n0 5 10 6 6 2 6 2 11\n\n7 3 15 3 6 7 6 7 8\n\n110010010\n\n```\n\n#### Output #1\n\n```\n0\n15\n6\n11\n5\n```\n\n### Note\n\nIn the first test case, there's only one round and Gellyfish is the active player of that round. Therefore, she will choose $a_1$, and the final value of $x$ is $0$.\n\nIn the second test case, Flower will be the active player in both rounds. She will choose $a_1$ and $b_2$, and the final value of $x$ is $a_1 \\oplus b_2 = 15$. Flower may also choose $b_1$ and $a_2$ instead for the same result of $x=a_2 \\oplus b_1 = 15$.\n\nIn the third test case, $a_1 = b_1$ so it doesn't matter what decision Gellyfish makes in the first round. In the second round:\n\n- If Flower chooses $a_2$, then $x$ will become $7$. Gellyfish will choose $b_3$ in the third round, so the final value of $x$ will be $4$.\n- Otherwise, Flower chooses $b_2$, then $x$ will become $4$. Gellyfish will choose $a_3$ in the third round, so the final value of $x$ will be $6$.\n\nFlower wants to maximize the final value of $x$, so Flower will choose $b_2$ in the second round. Therefore, the final value of $x$ will be $6$.", "cfid": "2115D"}
{"problem_id": "2115B", "problem_title": "B. Gellyfish and Camellia Japonica", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2115/B", "problem_statement": "Gellyfish has an array of $n$ integers $c_1, c_2, \\ldots, c_n$. In the beginning, $c = [a_1, a_2, \\ldots, a_n]$.\n\nGellyfish will make $q$ modifications to $c$.\n\nFor $i = 1,2,\\ldots,q$, Gellyfish is given three integers $x_i$, $y_i$, and $z_i$ between $1$ and $n$. Then Gellyfish will set $c_{z_i} := \\min(c_{x_i}, c_{y_i})$.\n\nAfter the $q$ modifications, $c = [b_1, b_2, \\ldots, b_n]$.\n\nNow Flower knows the value of $b$ and the value of the integers $x_i$, $y_i$, and $z_i$ for all $1 \\leq i \\leq q$, but she doesn't know the value of $a$.\n\nFlower wants to find any possible value of the array $a$ or report that no such $a$ exists.\n\nIf there are multiple possible values of the array $a$, you may output any of them.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $q$ ($1 \\leq n, q \\leq 3 \\cdot 10^5$) — the size of the array and the number of modifications.\n\nThe second line of each test case contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($1 \\leq b_i \\leq 10^9$) — the value of the array $c$ after the $q$ modifications.\n\nThe following $q$ lines each contain three integers $x_i$, $y_i$, and $z_i$ ($1 \\leq x_i, y_i, z_i \\leq n$) — describing the $i$-th modification.\n\nIt is guaranteed that the sum of $n$ and the sum of $q$ over all test cases does not exceed $3 \\cdot 10^5$.\n\n### Output\n\nFor each test case, if $a$ exists, output $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\leq a_i \\leq 10^9$) in a single line. Otherwise, output \"-1\" in a single line.\n\nIf there are multiple solutions, print any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2 1\n\n1 2\n\n2 1 2\n\n3 2\n\n1 2 3\n\n2 3 2\n\n1 2 1\n\n6 4\n\n1 2 2 3 4 5\n\n5 6 6\n\n4 5 5\n\n3 4 4\n\n2 3 3\n\n```\n\n#### Output #1\n\n```\n-1\n1 2 3\n1 2 3 4 5 5\n```\n\n### Note\n\nIn the first test case, based on the given sequence of modifications, we know that $b_1 = a_1$ and $b_2 = \\min(a_1, a_2)$. Therefore, it is necessary that $b_2 \\leq b_1$. However, for the given $b$, we have $b_1<b_2$. Therefore, there is no solution.\n\nIn the second test case, we can see that the given $c$ becomes $b$ from $a$ after the given modifications, and $c$ is not changed at each modification.", "cfid": "2115B"}
{"problem_id": "2114G", "problem_title": "G. Build an Array", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2114/G", "problem_statement": "Yesterday, Dima found an empty array and decided to add some integers to it. He can perform the following operation an unlimited number of times:\n\n- add any integer to the left or right end of the array.\n- then, as long as there is a pair of identical adjacent elements in the array, they will be replaced by their sum.\n\nIt can be shown that there can be at most one such pair in the array at the same time.\n\nFor example, if the array is $[3, 6, 4]$ and we add the number $3$ to the left, the array will first become $[3, 3, 6, 4]$, then the first two elements will be replaced by $6$, and the array will become $[6, 6, 4]$, and then — $[12, 4]$.\n\nAfter performing the operation exactly $k$ times, he thinks he has obtained an array $a$ of length $n$, but he does not remember which operations he applied. Determine if there exists a sequence of $k$ operations that could result in the given array $a$ from an empty array, or determine that it is impossible.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. The descriptions of the test cases follow.\n\nThe first line of each test case description contains two integers $n$ and $k$ ($1 \\le n \\le 10^5$, $n \\le k \\le 10^6$) — the length of the resulting array and the number of operations.\n\nThe second line contains $n$ integers $a_i$ ($1 \\le a_i \\le 10^9, a_{i - 1} \\ne a_i$) — the elements of the resulting array.\n\nIt is guaranteed that the sum of the values of $n$ across all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, if there is no suitable sequence of operations of length $k$, output \"NO\". Otherwise, output \"YES\".\n\nYou may output \"YES\" and \"NO\" in any case (for example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as a positive answer).\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n3 3\n\n2 1 4\n\n3 7\n\n2 1 4\n\n2 15\n\n2 16\n\n3 10\n\n256 32 1\n\n3 289\n\n768 96 1\n\n3 290\n\n768 96 1\n\n5 7\n\n5 1 6 3 10\n\n4 6\n\n6 8 5 10\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nYES\nYES\nYES\nNO\nYES\nYES\n```", "cfid": "2114G"}
{"problem_id": "2114F", "problem_title": "F. Small Operations", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2114/F", "problem_statement": "Given an integer $x$ and an integer $k$. In one operation, you can perform one of two actions:\n\n- choose an integer $1 \\le a \\le k$ and assign $x = x \\cdot a$;\n- choose an integer $1 \\le a \\le k$ and assign $x = \\frac{x}{a}$, where the value of $\\frac{x}{a}$ must be an integer.\n\nFind the minimum number of operations required to make the number $x$ equal to $y$, or determine that it is impossible.\n\n### Input\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe only line of each test case contains three integers $x$, $y$ and $k$ ($1 \\le x, y, k \\le 10^6$).\n\nIt is guaranteed that the sum of $x$ and the sum of $y$ across all test cases does not exceed $10^8$.\n\n### Output\n\nFor each test case, output $-1$ if it is impossible to achieve $x=y$ using the given operations, and the minimum number of required operations otherwise.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n4 6 3\n\n4 5 3\n\n4 6 2\n\n10 45 3\n\n780 23 42\n\n11 270 23\n\n1 982800 13\n\n1 6 2\n\n```\n\n#### Output #1\n\n```\n2\n-1\n-1\n3\n3\n3\n6\n-1\n```", "cfid": "2114F"}
{"problem_id": "2110E", "problem_title": "E. Melody", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2110/E", "problem_statement": "In 2077, the robots that took over the world realized that human music wasn't that great, so they started composing their own.\n\nTo write music, the robots have a special musical instrument capable of producing $n$ different sounds. Each sound is characterized by its volume and pitch. A sequence of sounds is called music. Music is considered beautiful if any two consecutive sounds differ either only in volume or only in pitch. Music is considered boring if the volume or pitch of any three consecutive sounds is the same.\n\nYou want to compose beautiful, non-boring music that contains each sound produced by your musical instrument exactly once.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nIn the first line of each test case, there is a number $n$ ($1 \\le n \\le 2 \\cdot 10^5$) — the number of sounds that the musical instrument can produce.\n\nNext, there are $n$ lines, where the $i$-th line contains a pair of numbers $v_i, p_i$ ($1 \\le v_i,\\space p_i \\le 10^9$) — the volume and pitch of the $i$-th sound, respectively. It is guaranteed that among all $n$ sounds, there are no duplicates, meaning for any $i \\neq j$, at least one of the conditions $v_i \\neq v_j$ or $p_i \\neq p_j$ holds.\n\nThe sum of $n$ across all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, if it is possible to compose such music, output \"YES\", and on the next line, output $n$ numbers — the indices of the sounds in the order that forms beautiful non-boring music. Otherwise, output \"NO\".\n\nYou may output each letter in any case (lowercase or uppercase). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be accepted as a positive answer.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n4\n\n179 239\n\n179 179\n\n239 179\n\n239 239\n\n3\n\n1 1\n\n2 1\n\n3 1\n\n1\n\n5 7\n\n5\n\n1 1\n\n1 2\n\n2 1\n\n2 2\n\n99 99\n\n7\n\n1 1\n\n1 3\n\n2 1\n\n2 2\n\n3 1\n\n3 2\n\n3 3\n\n```\n\n#### Output #1\n\n```\nYES\n4 3 2 1\nNO\nYES\n1\nNO\nYES\n3 4 6 7 2 1 5\n```\n\n### Note\n\nIn the first test case, the music $(239,239)-(239,179)-(179,179)-(179,239)$ is suitable, contains all sounds, and all consecutive sounds differ either only in volume or only in pitch.\n\nIn the second test case, it can be shown that there is no suitable music with the given sounds.", "cfid": "2110E"}
{"problem_id": "2110F", "problem_title": "F. Faculty", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2110/F", "problem_statement": "In 2077, after the world was enslaved by robots, the robots decided to implement an educational reform, and now the operation of taking the modulus is only taught in the faculty of \"Ancient World History\". Here is one of the entrance tasks for this faculty:\n\nWe define the beauty of an array of positive integers $b$ as the maximum $f(b_i, b_j)$ over all pairs $1 \\leq i, j \\leq n$, where $f(x, y) = (x \\bmod y) + (y \\bmod x)$.\n\nGiven an array of positive integers $a$ of length $n$, output $n$ numbers, where the $i$-th number ($1 \\leq i \\leq n$) is the beauty of the array $a_1, a_2, \\ldots, a_i$.\n\n$x \\bmod y$ is the remainder of the division of $x$ by $y$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\leq n \\leq 10^6$) — the size of the array $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$).\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case, output $n$ integers — the beauties of all prefixes of the array $a$.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n5\n\n3 1 4 1 5\n\n7\n\n5 11 11 4 2 1 10\n\n```\n\n#### Output #1\n\n```\n0 1 4 4 5\n0 6 6 7 7 7 11\n```\n\n### Note\n\nThe beauty of the array $3$ is $0$.\n\nThe beauty of the array $3, 1$ is $f(3, 1) = 1$.\n\nThe beauty of the array $3, 1, 4$ is $f(3, 4) = 4$.\n\nThe beauty of the array $3, 1, 4, 1$ is $f(4, 3) = 4$.\n\nThe beauty of the array $3, 1, 4, 1, 5$ is $f(4, 5) = 5$.", "cfid": "2110F"}
{"problem_id": "2109F", "problem_title": "F. Penguin Steps", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2109/F", "problem_statement": "Mouf, the clever master of Darkness, and Fouad, the brave champion of Light, have entered the Grid Realm once more. This time, they have found the exit, but it is guarded by fierce monsters! They must fight with their bare hands instead of summoning monsters!\n\nMouf and Fouad are standing on an $n \\times n$ grid. Each cell $(i, j)$ has a value $a_{i,j}$ and a color. The color of a cell is white if $c_{i,j} = 0$ and black if $c_{i,j} = 1$.\n\nMouf starts at the top-left corner $(1, 1)$, and Fouad starts at the bottom-left corner $(n, 1)$. Both are trying to reach the exit cell at $(r, n)$.\n\nA path is defined as a sequence of adjacent cells (sharing a horizontal or vertical edge). The cost of a path is the maximum value of $a_{i, j}$ among all cells included in the path (including the first and last cells).\n\nLet:\n\n- $\\mathrm{dis}_M$ denote the minimum possible cost of a valid path from Mouf's starting position $(1, 1)$ to the exit $(r, n)$;\n- $\\mathrm{dis}_F$ denote the minimum possible cost of a valid path from Fouad's starting position $(n, 1)$ to the exit $(r, n)$.\n\nBefore moving, Mouf can perform up to $k$ operations. In each operation, he may select any black cell and increment its value by $1$ (possibly choosing the same cell multiple times).\n\nMouf wants to maximize $\\mathrm{dis}_F$ while ensuring that his own cost $\\mathrm{dis}_M$ remains unchanged (as if he performed no operations). If Mouf acts optimally, what are the values of $\\mathrm{dis}_M$ and $\\mathrm{dis}_F$?\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^3$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n$, $r$, and $k$ ($2 \\le n \\le 300$, $1 \\le r \\le n$, $0 \\le k \\le 10^6$) — the length of the grid, the row number of the exit cell, and the number of allowed operations.\n\nThe $i$-th of the next $n$ lines contains $n$ integers $a_{i,1}, a_{i,2}, \\ldots, a_{i,n}$ ($1 \\le a_{ij} \\le 10^6$) — the values of the cells in the $i$-th row.\n\nThe $i$-th of the next $n$ lines contains a binary string $c_i$ of length $n$ — denoting the color of the cells in the $i$-th row (cell $(i,j)$ is white if $c_{i,j}=\\mathtt{0}$ and black if $c_{i,j} = \\mathtt{1}$).\n\nIt is guaranteed that the sum of $n^2$ over all test cases does not exceed $9 \\cdot 10^4$.\n\n### Output\n\nFor each test case, output two integers — $\\mathrm{dis}_M$ and $\\mathrm{dis}_F$ if Mouf performs the operations optimally.\n\n### Examples\n\n#### Input #1\n\n```\n\n4\n\n2 1 30\n\n2 2\n\n1 1\n\n11\n\n01\n\n3 3 5\n\n9 2 2\n\n2 3 2\n\n2 2 2\n\n111\n\n111\n\n010\n\n7 3 12\n\n3 3 3 3 5 1 1\n\n9 4 8 3 3 5 5\n\n9 4 8 7 3 3 3\n\n4 4 4 4 9 4 9\n\n4 4 4 4 9 4 9\n\n1 4 4 4 4 4 9\n\n1 1 4 4 9 9 9\n\n1111111\n\n1011111\n\n1011111\n\n1111111\n\n1111101\n\n1110001\n\n0111111\n\n5 3 1419\n\n1219 678 1672 1858 1210\n\n535 732 1316 345 296\n\n1106 3060 507 216 1943\n\n194 2124 47 87 4818\n\n1007 329 1425 284 660\n\n00010\n\n10111\n\n00101\n\n10001\n\n10100\n\n```\n\n#### Output #1\n\n```\n2 2\n9 5\n3 8\n1943 2426\n```\n\n#### Input #2\n\n```\n\n1\n\n8 2 2216\n\n429 589 675 2022 259 452 733 967\n\n1097 2880 256 1894 259 1052 345 692\n\n911 831 513 1243 200 14 854 217\n\n611 882 681 279 54 719 1469 1885\n\n504 2524 1332 17 3113 34 1281 717\n\n498 1896 1800 2231 731 364 69 1247\n\n1397 399 68 448 1337 1076 166 3786\n\n16 857 91 475 106 102 1517 1949\n\n01010100\n\n00101100\n\n00001000\n\n10100110\n\n00001000\n\n00100000\n\n01100011\n\n00001000\n\n```\n\n#### Output #2\n\n```\n733 1671\n```\n\n### Note\n\nIn the first test case:\n\n- Although Mouf can perform up to $30$ operations, he can not increase $\\mathrm{dis}_F$ beyond $2$; he is restricted to applying operations only on $(2,2)$, because performing operations on $(1,1)$ or $(1,2)$ would change $\\mathrm{dis}_M$.\n- Mouf may apply all $30$ operations on cell $(2,2)$; however, Fouad can still follow the path $(2,1) \\rightarrow (1,1) \\rightarrow (1,2)$ with a cost of $2$.\n\nIn the second test case, Mouf can apply two operations on $(2,2)$ and three operations on $(3,2)$. It can be shown that Mouf can not increase $\\mathrm{dis}_F$ beyond $5$.", "cfid": "2109F"}
{"problem_id": "2109E", "problem_title": "E. Binary String Wowee", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2109/E", "problem_statement": "Mouf is bored with themes, so he decided not to use any themes for this problem.\n\nYou are given a binary$^{\\text{∗}}$ string $s$ of length $n$. You are to perform the following operation exactly $k$ times:\n\n- select an index $i$ ($1 \\le i \\le n$) such that $s_i = \\mathtt{0}$;\n- then flip$^{\\text{†}}$ each $s_j$ for all indices $j$ ($1 \\le j \\le i$).\n\nYou need to count the number of possible ways to perform all $k$ operations.\n\nSince the answer could be ginormous, print it modulo $998\\,244\\,353$.\n\nTwo sequences of operations are considered different if they differ in the index selected at any step.\n\n$^{\\text{∗}}$A binary string is a string that consists only of the characters $\\mathtt{0}$ and $\\mathtt{1}$.\n\n$^{\\text{†}}$Flipping a binary character is changing it from $\\mathtt{0}$ to $\\mathtt{1}$ or vice versa.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 100$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\le k \\le n \\le 500$) — the length of the binary string $s$ and the number of times the operation must be performed, respectively.\n\nThe second line of each test case contains a binary string $s$ of length $n$ consisting of only characters $\\mathtt{0}$ and $\\mathtt{1}$.\n\nIt is guaranteed that the sum of $n$ does not exceed $500$ over all test cases.\n\n### Output\n\nFor each test case, output a single integer — the number of ways you can perform exactly $k$ operations, modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3 1\n\n010\n\n3 2\n\n000\n\n5 4\n\n01001\n\n8 8\n\n11001100\n\n20 20\n\n10010110101101010110\n\n```\n\n#### Output #1\n\n```\n2\n3\n10\n27286\n915530405\n```\n\n### Note\n\nIn the first test case, here are all the possible sequences of operations:\n\n- $\\mathtt{\\color{red}{0}10} \\xrightarrow{i = 1} \\mathtt{110}$\n- $\\mathtt{\\color{red}{010}} \\xrightarrow{i = 3} \\mathtt{101}$\n\nIn the second test case, here are all the possible sequences of operations:\n\n- $\\mathtt{\\color{red}{0}00} \\xrightarrow{i = 1} \\mathtt{\\color{red}{1}00} \\xrightarrow{i = 2} \\mathtt{010}$\n- $\\mathtt{\\color{red}{0}00} \\xrightarrow{i = 1} \\mathtt{\\color{red}{1}00} \\xrightarrow{i = 3} \\mathtt{011}$\n- $\\mathtt{\\color{red}{00}0} \\xrightarrow{i = 2} \\mathtt{\\color{red}{11}0} \\xrightarrow{i = 3} \\mathtt{001}$", "cfid": "2109E"}
{"problem_id": "2109D", "problem_title": "D. D/D/D", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2109/D", "problem_statement": "Of course, a problem with the letter D is sponsored by Declan Akaba.\n\nYou are given a simple, connected, undirected graph with $n$ vertices and $m$ edges. The graph contains no self-loops or multiple edges. You are also given a multiset $A$ consisting of $\\\\ell$ elements: \n\n$$ A = \\{A_1, A_2, \\ldots, A_\\ell\\} $$\n\nStarting from vertex $1$, you may perform the following move any number of times, as long as the multiset $A$ is not empty:\n\n- Select an element $k \\in A$ and remove it from the multiset . You must remove exactly one occurrence of $k$ from $A$.\n- Traverse any walk$^{\\text{∗}}$ of exactly $k$ edges to reach some vertex (possibly the same one you started from).\n\nFor each $i$ ($1 \\le i \\le n$), determine whether there exists a sequence of such moves that starts at vertex $1$ and ends at vertex $i$, using the original multiset $A$.\n\nNote that the check for each vertex $i$ is independent — you restart from vertex $1$ and use the original multiset $A$ for each case.\n\n$^{\\text{∗}}$A walk of length $k$ is a sequence of vertices $v_0, v_1, \\ldots, v_{k - 1}, v_k$ such that each consecutive pair of vertices $(v_i, v_{i + 1})$ is connected by an edge in the graph. The sequence may include repeated vertices.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n$, $m$, and $\\ell$ ($2 \\leq n \\leq 2 \\cdot 10^5$, $n-1 \\leq m \\leq 4 \\cdot 10^5$, $1 \\leq \\ell \\leq 2 \\cdot 10^5$) — the number of vertices, the number of edges, and the size of the multiset, respectively.\n\nThe second line of each test case contains $\\ell$ integers $A_1, A_2, \\ldots, A_{\\ell}$ ($1 \\leq A_i \\leq 10^4$) — the elements of the multiset.\n\nEach of the following $m$ lines contains two integers $u$ and $v$ ($1 \\le u < v \\le n$) — the endpoints of an edge in the graph.\n\nIt is guaranteed that the edges form a simple, connected graph without self-loops or multiple edges.\n\nIt is guaranteed that the sum of $n$, the sum of $m$, and the sum of $\\ell$ over all test cases does not exceed $2 \\cdot 10^5$, $4 \\cdot 10^5$, and $2 \\cdot 10^5$, respectively.\n\n### Output\n\nFor each test case, output a binary string of length $n$, where the $i$-th character is $\\mathtt{1}$ if there exists a sequence of moves ending at vertex $i$, and $\\mathtt{0}$ otherwise.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n6 5 2\n\n2 3\n\n1 2\n\n2 3\n\n3 4\n\n4 5\n\n5 6\n\n5 5 1\n\n5\n\n1 2\n\n2 3\n\n3 4\n\n4 5\n\n3 5\n\n5 4 3\n\n100 200 300\n\n1 2\n\n1 3\n\n1 4\n\n2 5\n\n```\n\n#### Output #1\n\n```\n111101\n11111\n10001\n```\n\n### Note\n\nIn the first test case:\n\n- Vertex $1$ is reachable without making any moves.\n- Vertex $2$ is reachable by selecting element $3 \\in A$; one possible walk is \\[$1 \\rightarrow 2 \\rightarrow 1 \\rightarrow 2$\\].\n- Vertex $3$ can be reached by selecting element $2 \\in A$ and taking the walk \\[$1 \\rightarrow 2 \\rightarrow 3$\\].\n- Vertex $4$ is reachable by selecting element $3 \\in A$ and following the walk \\[$1 \\rightarrow 2 \\rightarrow 3 \\rightarrow 4$\\].\n- Vertex $5$ is not reachable by any valid sequence of moves.\n- Vertex $6$ is reachable by first selecting element $2 \\in A$ and taking the walk \\[$1 \\rightarrow 2 \\rightarrow 3$\\], followed by selecting element $3 \\in A$ and taking the walk \\[$3 \\rightarrow 4 \\rightarrow 5 \\rightarrow 6$\\].", "cfid": "2109D"}
{"problem_id": "2109C3", "problem_title": "C3. Hacking Numbers (Hard Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2109/C3", "problem_statement": "This is the hard version of the problem. In this version, the limit of commands you can send is described in the statement. You can make hacks only if all versions of the problem are solved.\n\nThis is an interactive problem.\n\nWelcome, Duelists! In this interactive challenge, there is an unknown integer $x$ ($1 \\le x \\le 10^9$). You must make it equal to a given integer in the input $n$. By harnessing the power of \"Mathmech\" monsters, you can send a command to do one of the following:\n\nCommandConstraintResultCaseUpdateJury's response\"add $y$\"$-10^{18} \\le y \\le 10^{18}\n\n$$\\mathrm{res} = x + y$$\n\ntext{if } 1 \\le \\mathrm{res} \\le 10^{18}\n\n$$x \\leftarrow \\mathrm{res}$\"1\"$\\mathrm{else}$$\n\nx \\leftarrow x$\"0\"\"mul $y$\"$1 \\le y \\le 10^{18}\n\n$$\\mathrm{res} = x \\cdot y$$\n\ntext{if } 1 \\le \\mathrm{res} \\le 10^{18}\n\n$$x \\leftarrow \\mathrm{res}$\"1\"$\\mathrm{else}$$\n\nx \\leftarrow x$\"0\"\"div $y$\"$1 \\le y \\le 10^{18}\n\n$$\\mathrm{res} = x/y$$\n\ntext{if } y$ divides $x\n\n$$x \\leftarrow \\mathrm{res}$\"1\"$\\mathrm{else}$$\n\nx \\leftarrow x$\"0\"\"digit\"—$\\\\mathrm{res} = S(x)$$^{\\\\text{∗}}$—$x \\leftarrow \\mathrm{res}$\"1\"\n\nLet $f(n)$ be the minimum integer such that there is a sequence of $f(n)$ commands that transforms $x$ into $n$ for all $x(1 \\le x \\le 10^9)$. You do not know the value of $x$ in advance. Find $f(n)$ such that, no matter what $x$ is, you can always transform it into $n$ using at most $f(n)$ commands.\n\nYour task is to change $x$ into $n$ using at most $f(n)$ commands.\n\n$^{\\\\text{∗}}$$S(n)$ is a function that returns the sum of all the individual digits of a non-negative integer $n$. For example, $S(123) = 1 + 2 + 3 = 6$\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 5000$). The description of the test cases follows.\n\nThe first and only line of each test case contains one integer $n$ ($1 \\le n \\le 10^9$).\n\n### Interaction\n\nThe interaction for each test case begins by reading the integer $n$.\n\nTo send a command, output a line in the following format:\n\n- \"add $y$\" Add some integer $y$ ($-10^{18} \\le y \\le 10^{18}$) to $x$.\nThe jury will output \"1\" if $x + y$ is within $[1, 10^{18}]$ (successful), and \"0\" otherwise. If successful, update $x \\leftarrow x + y$.\n\n- \"mul $y$\" Multiply $x$ by a positive integer $y$ ($1 \\le y \\le 10^{18}$).\nThe jury will output \"1\" if $x \\cdot y$ is within $[1, 10^{18}]$ (successful), and \"0\" otherwise. If successful, update $x \\leftarrow x \\cdot y$.\n\n- \"div $y$\" Divide $x$ by a positive integer $y$ ($1 \\le y \\le 10^{18}$).\nThe jury will output \"1\" if $y$ is a divisor of $x$ (successful), and \"0\" otherwise. If successful, update $x \\leftarrow \\frac{x}{y}$.\n\n- \"digit\" Make $x$ equal to the sum of its digits.\nThe jury will always output \"1\" and update $x \\leftarrow S(x)$.\n\n\nNote that commands are case sensitive.\n\nWhen you have determined that $x$ is equal to $n$, output a line in the following format:\n\n- \"!\" — where the jury will output a \"1\" if $n$ is equal to $x$, and \"-1\" otherwise.\n\nNote that answering does not count toward your limit of commands.\n\nIf your program makes more than $f(n)$ commands ($f(n)$ is described above) for one test case, or makes an invalid command, then the response to the command will be \"-1\". After receiving such a response, your program should immediately terminate to receive the verdict Wrong Answer. Otherwise, it may receive any other verdict.\n\nAfter printing a command, do not forget to output the end of the line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- sys.stdout.flush() in Python;\n- std::io::stdout().flush() in Rust;\n- see the documentation for other languages.\n\nThe interactor is non-adaptive. The unknown integer $x$ does not change during the interaction.\n\nHacks\n\nTo hack, use the following format.\n\nThe first line should contain a single integer $t$ ($1 \\leq t \\leq 5000$) — the number of test cases.\n\nThe first line of each test case should contain two positive integers $n$ and $x$ ($1 \\leq n,x \\leq 10^9$) — denoting the unknown integer and the target value to which it should be made equal, respectively.\n\n### Example\n\n#### Input #1\n\n```\n2\n100\n\n0\n\n1\n\n1\n\n1\n\n5\n\n1\n\n1\n\n1\n```\n\n#### Output #1\n\n```\n\nadd -10\n\nadd 1\n\nmul 10\n\n!\n\ndigit\n\ndiv 2\n\n!\n```\n\n### Note\n\nSolutionJuryExplanation$\\texttt{2}$There are 2 test cases.$\\texttt{100}$In the first test case, the unknown integer $x = 9$ and we have to make it equal to $n = 100$.$\\texttt{add -10}\n\n$$\\texttt{0}$The answer to \"add -10\" is \"0\". This means that the addition command was not successful as $x + y = 9 + (-10) \\le 0$, and $x$ remains $9$ after the command$\\texttt{add 1}$$\n\ntexttt{1}$The answer to \"add 1\" is \"1\". This means that the addition command was successful as $x + y = 9 + 1 = 10$, and $x$ changes to $10$ after the command.$\\texttt{mul 10}\n\n$$\\texttt{1}$The answer to \"mul 10\" is \"1\". This means that the multiplication command was successful as $x \\cdot y = 10 \\cdot 10 = 100$, and $x$ changes to $100$ after the command.$\\texttt{!}$$\n\ntexttt{1}$The answer to \"!\" is \"1\". This means you have determined that $x$ equals $n$.$\\texttt{5}$In the second test case, the unknown integer $x = 1234$ and we have to make it equal to $n = 5$.$\\texttt{digit}\n\n$$\\texttt{1}$The answer to \"digit\" is \"1\". This means that $x$ turned into the sum of its digits $1 + 2 + 3 + 4 = 10$, and $x$ changes to $10$ after the command.$\\texttt{div 2}$$\n\ntexttt{1}$The answer to \"div 2\" is \"1\". This means that the division command was successful as $y = 2$ is a divisor of $x = 10$, and $x$ changes to $\\frac{x}{y} = \\frac{10}{2} = 5$ after the command.$\\texttt{!}$$\\texttt{1}$The answer to \"!\" is \"1\". This means you have determined that $x$ equals $n$.\n\nNote that the empty lines in the example input and output are for the sake of clarity, and do not occur in the real interaction.", "cfid": "2109C3"}
{"problem_id": "2101D", "problem_title": "D. Mani and Segments", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2101/D", "problem_statement": "An array $b$ of length $|b|$ is cute if the sum of the length of its Longest Increasing Subsequence (LIS) and the length of its Longest Decreasing Subsequence (LDS)$^{\\text{∗}}$ is exactly one more than the length of the array. More formally, the array $b$ is cute if $\\operatorname{LIS}(b) + \\operatorname{LDS}(b) = |b| + 1$.\n\nYou are given a permutation $a$ of length $n$$^{\\\\text{†}}$. Your task is to count the number of non-empty subarrays$^{\\\\text{‡}}$ of permutation $a$ that are cute.\n\n$^{\\text{∗}}$A sequence $x$ is a subsequence of a sequence $y$ if $x$ can be obtained from $y$ by the deletion of several (possibly, zero or all) element from arbitrary positions.\n\nThe longest increasing (decreasing) subsequence of an array is the longest subsequence such that its elements are ordered in strictly increasing (decreasing) order.\n\n$^{\\text{†}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n$^{\\text{‡}}$An array $x$ is a subarray of an array $y$ if $x$ can be obtained from $y$ by the deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1\\le n\\le 2 \\cdot 10^5 $) — the length of permutation $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le n$) — the elements of permutation $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the number of cute non-empty subarrays of permutation $a$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3\n\n3 1 2\n\n5\n\n2 3 4 5 1\n\n4\n\n3 4 1 2\n\n7\n\n1 2 3 4 5 6 7\n\n10\n\n7 8 2 4 5 10 1 3 6 9\n\n```\n\n#### Output #1\n\n```\n6\n15\n9\n28\n36\n```\n\n### Note\n\nIn the first test case, all of the $6$ non-empty subarrays are cute:\n\n- $[3]$: $\\operatorname{LIS}([3]) + \\operatorname{LDS}([3]) = 1 + 1 = 2$.\n- $[1]$: $\\operatorname{LIS}([1]) + \\operatorname{LDS}([1]) = 1 + 1 = 2$.\n- $[2]$: $\\operatorname{LIS}([2]) + \\operatorname{LDS}([2]) = 1 + 1 = 2$.\n- $[3, 1]$: $\\operatorname{LIS}([3, 1]) + \\operatorname{LDS}([3, 1]) = 1 + 2 = 3$.\n- $[1, 2]$: $\\operatorname{LIS}([1, 2]) + \\operatorname{LDS}([1, 2]) = 2 + 1 = 3$.\n- $[3, 1, 2]$: $\\operatorname{LIS}([3, 1, 2]) + \\operatorname{LDS}([3, 1, 2]) = 2 + 2 = 4$.\n\nIn the second test case, one of the cute subarrays is $[2, 3, 4, 5, 1]$ as $\\operatorname{LIS}([2, 3, 4, 5, 1]) = 4$ and $\\operatorname{LDS}([2, 3, 4, 5, 1]) = 2$, which satisfies $4 + 2 = 5 + 1$.", "cfid": "2101D"}
{"problem_id": "2101C", "problem_title": "C. 23 Kingdom", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2101/C", "problem_statement": "The distance of a value $x$ in an array $c$, denoted as $d_x(c)$, is defined as the largest gap between any two occurrences of $x$ in $c$.\n\nFormally, $d_x(c) = \\max(j - i)$ over all pairs $i < j$ where $c_i = c_j = x$. If $x$ appears only once or not at all in $c$, then $d_x(c) = 0$.\n\nThe beauty of an array is the sum of the distances of each distinct value in the array. Formally, the beauty of an array $c$ is equal to $\\sum\\limits_{1\\le x\\le n} d_x(c)$.\n\nGiven an array $a$ of length $n$, an array $b$ is nice if it also has length $n$ and its elements satisfy $1\\le b_i\\le a_i$ for all $1\\le i\\le n$. Your task is to find the maximum possible beauty of any nice array.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1\\le n\\le 2\\cdot10^5$) — the length of array $a$.\n\nThe second line of each test case contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($1\\le a_i\\le n$) — the elements of array $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2\\cdot10^5$.\n\n### Output\n\nFor each test case, output a single integer representing the maximum possible beauty among all nice arrays.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n4\n\n1 2 1 2\n\n2\n\n2 2\n\n10\n\n1 2 1 5 1 2 2 1 1 2\n\n8\n\n1 5 2 8 4 1 4 2\n\n```\n\n#### Output #1\n\n```\n4\n1\n16\n16\n```\n\n### Note\n\nIn the first test case, if $b = [1, 2, 1, 2]$, then $d_1(b) = 3 - 1 = 2$ and $d_2(b) = 4 - 2 = 2$, resulting in a beauty of $2 + 2 = 4$. It can be proven that there are no nice arrays with a beauty greater than $4$.\n\nIn the second test case, both $b = [1, 1]$ and $b = [2, 2]$ are valid solutions with a beauty of $1$.\n\nIn the third test case, if $b = [1, 2, 1, 4, 1, 2, 1, 1, 1, 2]$ with $d_1(b) = 9 - 1 = 8$, $d_2(b) = 10 - 2 = 8$, and $d_4(b) = 0$, resulting in a beauty of $16$.", "cfid": "2101C"}
{"problem_id": "2107D", "problem_title": "D. Apple Tree Traversing", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2107/D", "problem_statement": "There is an apple tree with $n$ nodes, initially with one apple at each node. You have a paper with you, initially with nothing written on it.\n\nYou are traversing on the apple tree, by doing the following action as long as there is at least one apple left:\n\n- Choose an apple path $(u,v)$. A path $(u,v)$ is called an apple path if and only if for every node on the path $(u,v)$, there's an apple on it.\n- Let $d$ be the number of apples on the path, write down three numbers $(d,u,v)$, in this order, on the paper.\n- Then remove all the apples on the path $(u,v)$.\n\nHere, the path $(u, v)$ refers to the sequence of vertices on the unique shortest walk from $u$ to $v$.\n\nLet the number sequence on the paper be $a$. Your task is to find the lexicographically largest possible sequence $a$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a number $n$ ($1 \\le n \\le 1.5 \\cdot 10^5$).\n\nThe following $n-1$ lines of each test case contain two numbers $u,v$ ($1 \\le u,v \\le n$). It's guaranteed that the input forms a tree.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $1.5 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the lexicographically largest sequence possible $a_1, a_2, \\ldots, a_{|a|}$. It can be shown that $|a| \\le 3 \\cdot n$.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n4\n\n1 2\n\n1 3\n\n1 4\n\n4\n\n2 1\n\n2 4\n\n2 3\n\n5\n\n1 2\n\n2 3\n\n3 4\n\n4 5\n\n1\n\n8\n\n6 3\n\n3 5\n\n5 4\n\n4 2\n\n5 1\n\n1 8\n\n3 7\n\n6\n\n3 2\n\n2 6\n\n2 5\n\n5 4\n\n4 1\n\n```\n\n#### Output #1\n\n```\n3 4 3 1 2 2\n3 4 3 1 1 1\n5 5 1\n1 1 1\n5 8 7 2 4 2 1 6 6\n5 6 1 1 3 3\n```\n\n### Note\n\nIn the first test case, we do the following steps:\n\n- Choose the apple path $(4, 3)$. This path consists of the nodes $4, 1, 3$, and each of them have an apple (so it is a valid apple path). $d = 3$ as there are $3$ apples on this path. Append $3, 4, 3$ in that order to our sequence $a$. Now, remove the apples from these $3$ vertices.\n- Only node $2$ has an apple left. Choose the apple path $(2, 2)$. This path only consists of the single node $2$. $d = 1$ as there is $1$ apple on this path. Append $1, 2, 2$ in that order to our sequence $a$ and remove the apple from $2$.\n\nThe final sequence is thus $[3, 4, 3, 1, 2, 2]$. It can be shown this is the lexicographically largest sequence possible.", "cfid": "2107D"}
{"problem_id": "2107F1", "problem_title": "F1. Cycling (Easy Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2107/F1", "problem_statement": "This is the easy version of the problem. The difference between the versions is that in this version, $1\\le n\\le 5\\cdot 10^3$ and you don't need to output the answer for each prefix. You can hack only if you solved all versions of this problem.\n\nLeo works as a programmer in the city center, and his lover teaches at a high school in the suburbs. Every weekend, Leo would ride his bike to the suburbs to spend a nice weekend with his lover.\n\nThere are $n$ cyclists riding in front of Leo on this road right now. They are numbered $1$, $2$, $\\ldots$, $n$ from front to back. Initially, Leo is behind the $n$-th cyclist. The $i$-th cyclist has an agility value $a_i$.\n\nLeo wants to get ahead of the $1$-st cyclist. Leo can take the following actions as many times as he wants:\n\n- Assuming that the first person in front of Leo is cyclist $i$, he can go in front of cyclist $i$ for a cost of $a_i$. This puts him behind cyclist $i - 1$.\n- Using his super powers, swap $a_i$ and $a_j$ ($1\\le i < j\\le n$) for a cost of $(j - i)$.\n\nLeo wants to know the minimum cost to get in front of the $1$-st cyclist. Here you only need to print the answer for the whole array, i.e. $[a_1, a_2, \\ldots, a_n]$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^3$). The description of the test cases follows.\n\nThe first line of each test case contains a positive integer $n$ ($1 \\leq n \\leq 5\\cdot 10^3$), representing the number of the cyclists.\n\nThe second line of each test case contains $n$ integers $a_1, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5\\cdot 10^3$.\n\n### Output\n\nFor each test case, print one integer representing the minimum cost for Leo to go from behind the $n$-th cyclist to in front of the $1$-st cyclist.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3\n\n1 2 4\n\n4\n\n1 1 1 1\n\n2\n\n1 2\n\n4\n\n4 1 3 2\n\n```\n\n#### Output #1\n\n```\n7\n4\n3\n8\n```\n\n### Note\n\nIn the first test case, one possible way to move from the position behind the $n$-th cyclist to the position in front of the $1$-st cyclist is:\n\n- Leo swaps $a_2$ $(i=2)$ and $a_3$ $(j=3)$, then the array becomes $[1,4,2]$; it costs $j-i=3-2=1$.\n- Leo is behind the $3$-rd cyclist and moves behind the $2$-nd cyclist; it costs $a_3=2$.\n- Leo swaps $a_1$ $(i=1)$ and $a_2$ $(j=2)$, then the array becomes $[4,1,2]$; it costs $j-i=2-1=1$.\n- Leo is behind the $2$-nd cyclist and moves behind the $1$-st cyclist; it costs $a_2=1$.\n- Leo swaps $a_1$ $(i=1)$ and $a_2$ $(j=2)$, then the array becomes $[1,4,2]$; it costs $j-i=2-1=1$.\n- Leo moves ahead of the $1$-st cyclist; it costs $a_1=1$.\n\nSo the total cost is $1+2+1+1+1+1=7$. It can be proved that $7$ is the minimum cost.\n\nIn the second test case, to move ahead of the $1$-st cyclist from the position behind the $n$-th cyclist, Leo should not swap anyone's agility value. The total cost is $1+1+1+1=4$.", "cfid": "2107F1"}
{"problem_id": "2107F2", "problem_title": "F2. Cycling (Hard Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2107/F2", "problem_statement": "This is the hard version of the problem. The difference between the versions is that in this version, $1\\le n\\le 10^6$ and you need to output the answer for each prefix. You can hack only if you solved all versions of this problem.\n\nLeo works as a programmer in the city center, and his lover teaches at a high school in the suburbs. Every weekend, Leo would ride his bike to the suburbs to spend a nice weekend with his lover.\n\nThere are $n$ cyclists riding in front of Leo on this road right now. They are numbered $1$, $2$, $\\ldots$, $n$ from front to back. Initially, Leo is behind the $n$-th cyclist. The $i$-th cyclist has an agility value $a_i$.\n\nLeo wants to get ahead of the $1$-st cyclist. Leo can take the following actions as many times as he wants:\n\n- Assuming that the first person in front of Leo is cyclist $i$, he can go in front of cyclist $i$ for a cost of $a_i$. This puts him behind cyclist $i - 1$.\n- Using his super powers, swap $a_i$ and $a_j$ ($1\\le i < j\\le n$) for a cost of $(j - i)$.\n\nLeo wants to know the minimum cost to get in front of the $1$-st cyclist.\n\nIn addition, he wants to know the answer for each $1\\le i \\le n$, $[a_1, a_2, \\ldots, a_i]$ as the original array. The problems of different $i$ are independent. To be more specific, in the $i$-th problem, Leo starts behind the $i$-th cyclist instead of the $n$-th cyclist, and cyclists numbered $i + 1, i + 2, \\ldots, n$ are not present.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a positive integer $n$ ($1 \\leq n \\leq 10^6$), representing the number of the cyclists.\n\nThe second line of each test case contains $n$ integers $a_1, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case, print $n$ integers, the answers for the array $[a_1, a_2, \\ldots, a_i]$ for each $i = 1, 2, \\ldots n$ in this order.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3\n\n1 2 4\n\n4\n\n1 1 1 1\n\n2\n\n1 2\n\n4\n\n4 1 3 2\n\n```\n\n#### Output #1\n\n```\n1 3 7\n1 2 3 4\n1 3\n4 3 6 8\n```\n\n### Note\n\nIn the first test case, one possible way to move from the position behind the $n$-th cyclist to the position in front of the $1$-st cyclist is:\n\n- Leo swaps $a_2$ $(i=2)$ and $a_3$ $(j=3)$, then the array becomes $[1,4,2]$; it costs $j-i=3-2=1$.\n- Leo is behind the $3$-rd cyclist and moves behind the $2$-nd cyclist; it costs $a_3=2$.\n- Leo swaps $a_1$ $(i=1)$ and $a_2$ $(j=2)$, then the array becomes $[4,1,2]$; it costs $j-i=2-1=1$.\n- Leo is behind the $2$-nd cyclist and moves behind the $1$-st cyclist; it costs $a_2=1$.\n- Leo swaps $a_1$ $(i=1)$ and $a_2$ $(j=2)$, then the array becomes $[1,4,2]$; it costs $j-i=2-1=1$.\n- Leo moves ahead of the $1$-st cyclist; it costs $a_1=1$.\n\nSo the total cost is $1+2+1+1+1+1=7$. It can be proved that $7$ is the minimum cost.\n\nIn the second test case, to move ahead of the $1$-st cyclist from the position behind the $n$-th cyclist, Leo should not swap anyone's agility value. The total cost is $1+1+1+1=4$.", "cfid": "2107F2"}
{"problem_id": "2107E", "problem_title": "E. Ain and Apple Tree", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2107/E", "problem_statement": "If I was also hit by an apple falling from an apple tree, could I become as good at physics as Newton?\n\nTo be better at physics, Ain wants to build an apple tree so that she can get hit by apples on it. Her apple tree has $n$ nodes and is rooted at $1$. She defines the weight of an apple tree as $\\sum \\limits_{i=1}^n \\sum \\limits_{j=i+1}^n \\text{dep}(\\operatorname{lca}(i,j))$.\n\nHere, $\\text{dep}(x)$ is defined as the number of edges on the unique shortest path from node $1$ to node $x$. $\\operatorname{lca}(i, j)$ is defined as the unique node $x$ with the largest value of $\\text{dep}(x)$ and which is present on both the paths $(1, i)$ and $(1, j)$.\n\nFrom some old books Ain reads, she knows that Newton's apple tree's weight is around $k$, but the exact value of it is lost.\n\nAs Ain's friend, you want to build an apple tree with $n$ nodes for her, and the absolute difference between your tree's weight and $k$ should be at most $1$, i.e. $|\\text{weight} - k| \\le 1$. Unfortunately, this is not always possible, in this case please report it.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two numbers $n,k$ ($2 \\le n \\le 10^5,0 \\le k \\le 10^{15}$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, first output $\\texttt{Yes}$ if a solution exists or $\\texttt{No}$ if no solution exists. You may print each character in either case, for example $\\texttt{YES}$ and $\\texttt{yEs}$ will also be accepted.\n\nIf there's at least one solution, print $n-1$ lines and each line contains two numbers $u,v$ $(1 \\le u,v \\le n)$ represents the apple tree.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n2 1\n\n2 2\n\n4 0\n\n5 7\n\n5 5\n\n```\n\n#### Output #1\n\n```\nYes\n1 2\nNo\nYes\n1 2\n1 3\n1 4\nYes\n1 3\n3 5\n4 5\n3 2\nYes\n1 2\n2 3\n2 4\n2 5\n```\n\n### Note\n\nIn the first test case, we can check that the weight is $0$. This satisfies the condition because $k = 1$ and so the absolute difference is only $1$.\n\nIn the second test case, there exists no solution because there are no trees of $2$ nodes with weights of either $1, 2$ or $3$.", "cfid": "2107E"}
{"problem_id": "2108F", "problem_title": "F. Fallen Towers", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2108/F", "problem_statement": "Pizano built an array $a$ of $n$ towers, each consisting of $a_i \\ge 0$ blocks.\n\nPizano can knock down a tower so that the next $a_i$ towers grow by $1$. In other words, he can take the element $a_i$, increase the next $a_i$ elements by one, and then set $a_i$ to $0$. The blocks that fall outside the array of towers disappear. If Pizano knocks down a tower with $0$ blocks, nothing happens.\n\nPizano wants to knock down all $n$ towers in any order, each exactly once. That is, for each $i$ from $1$ to $n$, he will knock down the tower at position $i$ exactly once.\n\nMoreover, the resulting array of tower heights must be non-decreasing. This means that after he knocks down all $n$ towers, for any $i < j$, the tower at position $i$ must not be taller than the tower at position $j$.\n\nYou are required to output the maximum $\\text{MEX}$ of the resulting array of tower heights.\n\nThe $\\text{MEX}$ of an array is the smallest non-negative integer that is not present in the array.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains an integer $n$ ($1 \\leq n \\leq 10^5$) — the number of towers.\n\nThe second line of each test case contains $n$ integers — the initial heights of the towers $a_1, \\ldots, a_n$ ($0 \\leq a_i \\leq 10^9$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, output a single integer — the maximum $\\text{MEX}$ of the final array.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n2\n\n1 2\n\n4\n\n2 1 0 0\n\n10\n\n5 9 3 7 1 5 1 5 4 3\n\n10\n\n1 1 1 1 1 1 1 1 1 1\n\n10\n\n3 2 1 0 3 2 1 0 3 2\n\n5\n\n5 2 0 5 5\n\n1\n\n1000000000\n\n7\n\n4 0 1 0 2 7 7\n\n```\n\n#### Output #1\n\n```\n2\n3\n7\n4\n5\n4\n1\n3\n```\n\n### Note\n\nExplanation for the first test case.\n\n![](https://espresso.codeforces.com/b27f3ad036c335f58fe3b07c11f325fd39450091.png)\n\nExplanation for the second test case. Note that all towers were knocked down exactly once, and the final array of heights is non-decreasing.\n\n![](https://espresso.codeforces.com/5d8740d0c655899ee758c6d450d7dca858b1f65d.png)", "cfid": "2108F"}
{"problem_id": "2108D", "problem_title": "D. Needle in a Numstack", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2108/D", "problem_statement": "This is an interactive problem.\n\nYou found the numbers $k$ and $n$ in the attic, but lost two arrays $A$ and $B$.\n\nYou remember that:\n\n- $|A| + |B| = n$, the total length of the arrays is $n$.\n- $|A| \\geq k$ and $|B| \\geq k$, the length of each array is at least $k$.\n- The arrays consist only of numbers from $1$ to $k$.\n- If you take any $k$ consecutive elements from array $A$, they will all be different. Also, if you take any $k$ consecutive elements from array $B$, they will all be different.\n\nFortunately, a kind spirit that settled in the attic found these arrays and concatenated them into an array $C$ of length $n$. That is, the elements of array $A$ were first written into array $C$, followed by the elements of array $B$.\n\nYou can ask the kind spirit up to $250$ questions. Each question contains an index $i$ ($1 \\leq i \\leq n$). In response, you will receive the $i$-th element of the concatenated array $C$.\n\nYou need to find the lengths of arrays $A$ and $B$, or report that it is impossible to determine them uniquely.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 300$). The description of the test cases follows.\n\nThe only line of each test case contains two integers $n$ and $k$ ($1 \\leq k \\leq 50$, $2 k \\leq n \\leq 10^{6}$).\n\nNote that the sum of $n$ across test cases is not limited.\n\n### Interaction\n\nThe interaction for each test case begins with reading the integer $n$.\n\nThen you can make up to $250$ queries.\n\nTo make a query, output a string in the format \"? x\" (without quotes) ($1 \\leq x \\leq n$). After each query, read an integer — the answer to your query.\n\nIf you make too many queries, you will receive a verdict of Wrong answer.\n\nTo report your answer, output a string in the format \"! a b\" (without quotes), where $a$ and $b$ are the lengths of arrays $A$ and $B$ that you found, respectively. The answer is not counted when counting the number of queries.\n\nIf it is impossible to determine the lengths of the arrays uniquely, output \"! -1\" (without quotes). Note that if you answer $-1$ while there is a sequence of at most $250$ queries that uniquely determines the lengths of arrays, you will get a Wrong answer verdict.\n\nIt is guaranteed that there are arrays $A$ and $B$ that do not contradict the statement, for which the interactor output is correct.\n\nThe interactor is not adaptive, which means that the answer is known before the participant makes queries and does not depend on the queries made by the participant.\n\nIf your program makes more than $250$ queries, your program should immediately terminate to receive the verdict Wrong answer. Otherwise, you can get an arbitrary verdict because your solution will continue to read from a closed stream.\n\nAfter outputting a query, do not forget to output a newline and flush the output buffer. Otherwise, you will receive a verdict of \"IL\" (Idleness limit exceeded). To flush the buffer, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- flush(output) in Pascal;\n- stdout.flush() in Python;\n- see the documentation for other languages.\n\nHacks\n\nHacks are disabled for this problem.\n\n### Example\n\n#### Input #1\n\n```\n6\n5 2\n\n1\n\n2\n\n2\n\n18 4\n\n2\n\n4\n\n1\n\n1\n\n4\n\n3 1\n\n10 5\n\n9 3\n\n3\n\n3\n\n2\n\n12 4\n\n1\n\n3\n\n1\n\n3\n\n1\n\n3\n```\n\n#### Output #1\n\n```\n\n? 1\n\n? 2\n\n? 3\n\n! 2 3\n\n? 9\n\n? 13\n\n? 10\n\n? 14\n\n? 6\n\n! 9 9\n\n! -1\n\n! 5 5\n\n? 3\n\n? 6\n\n? 9\n\n! 6 3\n\n? 1\n\n? 2\n\n? 5\n\n? 6\n\n? 9\n\n? 10\n\n! -1\n```\n\n### Note\n\nConsider the first example. We queried the first $3$ elements out of $5$. Now we know that the array $C$ looks like $[1, 2, 2, ?, ?]$. We know for sure that the third element is not from array $A$ — because according to the condition, any $k$ consecutive elements (in our case $k = 2$) in array $A$ are different. Thus, the third element is definitely located in array $B$. This means that the length of array $A$ is $2$, and the length of array $B$ is $3$.\n\nThe picture shows arrays from all test cases. The elements whose values were requested are marked in yellow.\n\n![](https://espresso.codeforces.com/1981313348269cab100360e478a64874954e4b27.png)", "cfid": "2108D"}
{"problem_id": "2108E", "problem_title": "E. Spruce Dispute", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2108/E", "problem_statement": "It's already a hot April outside, and Polycarp decided that this is the perfect time to finally take down the spruce tree he set up several years ago. As he spent several hours walking around it, gathering his strength, he noticed something curious: the spruce is actually a tree$^{\\text{∗}}$ — and not just any tree, but one consisting of an odd number of vertices $n$. Moreover, on $n-1$ of the vertices hang Christmas ornaments, painted in exactly $\\frac{n-1}{2}$ distinct colors, with exactly two ornaments painted in each color. The remaining vertex, as tradition dictates, holds the tree's topper.\n\nAt last, after several days of mental preparation, Polycarp began dismantling the spruce. First, he removed the topper and had already started taking apart some branches when suddenly a natural question struck him: how can he remove one of the tree's edges and rearrange the ornaments in such a way that the sum of the lengths of the simple paths between ornaments of the same color is as large as possible?\n\nIn this problem, removing an edge from the tree is defined as follows: choose a pair of adjacent vertices $a$ and $b$ ($a < b$), then remove vertex $b$ from the tree and reattach all of $b$'s adjacent vertices (except for $a$) directly to $a$.\n\nPolycarp cannot continue dismantling his spruce until he gets an answer to this question. However, checking all possible options would take him several more years. Knowing your experience in competitive programming, he turned to you for help. But can you solve this dispute?\n\n$^{\\text{∗}}$A tree is a connected graph without cycles.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains an odd number $n$ ($3 \\le n < 2 \\cdot 10^5$) — the number of vertices in the tree.\n\nThe following $n-1$ lines describe the tree, given by pairs of adjacent vertices $u$, $v$ ($1 \\le u, v \\le n, u \\neq v$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, you need to output two lines.\n\nIn the first line, output the pair of vertices $u$, $v$, the edge between which Polycarp is going to remove.\n\nIn the next line, output the array $c$ of $n$ numbers from $0$ to $\\frac{n-1}{2}$, where $c[i]$ — the positive color number assigned to vertex $i$. Note that $c[\\text{max}(u, v)]= 0$, since this vertex has been removed.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n5\n\n1 2\n\n2 3\n\n2 4\n\n4 5\n\n5\n\n1 2\n\n1 3\n\n1 4\n\n1 5\n\n7\n\n1 5\n\n5 4\n\n4 3\n\n3 2\n\n2 6\n\n6 7\n\n```\n\n#### Output #1\n\n```\n1 2\n2 0 1 1 2\n1 5\n1 1 2 2 0\n4 3\n1 3 3 0 2 2 1\n```\n\n### Note\n\nConsider the first test case.\n\nRemove the edge connecting vertices $1$ and $2$. After this, vertex $2$ will be removed from the tree, and vertices $3$ and $4$ will be connected to vertex $1$.\n\nColor vertices $3$ and $4$ with the first color, and vertices $1$ and $5$ with the second. The sum of the lengths of simple paths between ornaments of the same color is equal to $2 + 2 = 4$. It can be shown that this value is the largest possible.\n\n![](https://espresso.codeforces.com/187d5439eac93442b727d84bea394613d3a21efe.png)\n\nIn the second and third examples, the maximum sum of path lengths will be $3$ and $9$, respectively.", "cfid": "2108E"}
{"problem_id": "2104G", "problem_title": "G. Modulo 3", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2104/G", "problem_statement": "Surely, you have seen problems which require you to output the answer modulo $10^9+7$, $10^9+9$, or $998244353$. But have you ever seen a problem where you have to print the answer modulo $3$?\n\nYou are given a functional graph consisting of $n$ vertices, numbered from $1$ to $n$. It is a directed graph, in which each vertex has exactly one outgoing arc. The graph is given as the array $g_1, g_2, \\dots, g_n$, where $g_i$ means that there is an arc that goes from $i$ to $g_i$. For some vertices, the outgoing arcs might be self-loops.\n\nInitially, all vertices of the graph are colored in color $1$. You can perform the following operation: select a vertex and a color from $1$ to $k$, and then color this vertex and all vertices that are reachable from it. You can perform this operation any number of times (even zero).\n\nYou should process $q$ queries. The query is described by three integers $x$, $y$ and $k$. For each query, you should:\n\n- assign $g_x := y$;\n- then calculate the number of different graph colorings for the given value of $k$ (two colorings are different if there exists at least one vertex that is colored in different colors in these two colorings); since the answer can be very large, print it modulo $3$.\n\nNote that in every query, the initial coloring of the graph is reset (all vertices initially have color $1$ in each query).\n\n### Input\n\nThe first line contains two integers $n$ and $q$ ($1 \\le n, q \\le 2 \\cdot 10^5$).\n\nThe second line contains $n$ integers $g_1, g_2, \\dots, g_n$ ($1 \\le g_i \\le n$).\n\nThe $q$ lines follow. The $i$-th line contains three integers $x_i$, $y_i$ and $k_i$ ($1 \\le x_i, y_i \\le n$; $1 \\le k_i \\le 10^9$).\n\n### Output\n\nFor each query, print a single integer — the number of different graph colorings for the given value of $k$, taken modulo $3$.\n\n### Examples\n\n#### Input #1\n\n```\n\n4 5\n\n2 3 1 4\n\n4 3 1\n\n2 1 2\n\n3 4 3\n\n4 1 5\n\n2 4 4\n\n```\n\n#### Output #1\n\n```\n1\n2\n0\n2\n1\n```\n\n#### Input #2\n\n```\n\n8 10\n\n7 4 6 8 7 7 1 4\n\n1 7 5\n\n2 3 3\n\n8 6 1\n\n3 1 3\n\n7 2 5\n\n5 2 4\n\n2 7 4\n\n4 6 5\n\n5 2 3\n\n4 5 1\n\n```\n\n#### Output #2\n\n```\n1\n0\n1\n0\n2\n1\n1\n2\n0\n1\n```", "cfid": "2104G"}
{"problem_id": "2104F", "problem_title": "F. Numbers and Strings", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2104/F", "problem_statement": "For each integer $x$ from $1$ to $n$, we will form the string $S(x)$ according to the following rules:\n\n- compute $(x+1)$;\n- write $x$ and $x+1$ next to each other in the decimal system without separators and leading zeros;\n- in the resulting string, sort all digits in non-decreasing order.\n\nFor example, the string $S(139)$ is 011349 (before sorting the digits, it is 139140). The string $S(99)$ is 00199.\n\nYour task is to count the number of distinct strings among $S(1), S(2), \\dots, S(n)$.\n\n### Input\n\nThe first line contains one integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nEach test case consists of one line containing a single integer $n$ ($1 \\le n \\le 10^{9} - 2$).\n\n### Output\n\nFor each test case, output a single integer — the number of distinct strings among $S(1), S(2), \\dots, S(n)$.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n42\n\n1337\n\n```\n\n#### Output #1\n\n```\n42\n948\n```", "cfid": "2104F"}
{"problem_id": "2097B", "problem_title": "B. Baggage Claim", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2097/B", "problem_statement": "Every airport has a baggage claim area, and Balbesovo Airport is no exception. At some point, one of the administrators at Sheremetyevo came up with an unusual idea: to change the traditional shape of the baggage claim conveyor from a carousel to a more complex form.\n\nSuppose that the baggage claim area is represented as a rectangular grid of size $n \\times m$. The administration proposed that the path of the conveyor should pass through the cells $p_1, p_2, \\ldots, p_{2k+1}$, where $p_i = (x_i, y_i)$.\n\nFor each cell $p_i$ and the next cell $p_{i+1}$ (where $1 \\leq i \\leq 2k$), these cells must share a common side. Additionally, the path must be simple, meaning that for no pair of indices $i \\neq j$ should the cells $p_i$ and $p_j$ coincide.\n\nUnfortunately, the route plan was accidentally spoiled by spilled coffee, and only the cells with odd indices of the path were preserved: $p_1, p_3, p_5, \\ldots, p_{2k+1}$. Your task is to determine the number of ways to restore the original complete path $p_1, p_2, \\ldots, p_{2k+1}$ given these $k+1$ cells.\n\nSince the answer can be very large, output it modulo $10^9+7$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 3 \\cdot 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n$, $m$, and $k$ ($1 \\le n, m \\le 1000$, $n \\cdot m \\ge 3$, $1 \\le k \\le \\left\\lfloor \\frac12 (n m - 1) \\right\\rfloor$) — the dimensions of the grid and a parameter defining the length of the path.\n\nNext, there are $k+1$ lines, the $i$-th of which contains two integers $x_{2i-1}$ and $y_{2i-1}$ ($1 \\le x_{2i-1} \\le n$, $1 \\le y_{2i-1} \\le m$) — the coordinates of the cell $p_{2i-1}$ that lies on the path.\n\nIt is guaranteed that all pairs $(x_{2i-1}, y_{2i-1})$ are distinct.\n\nIt is guaranteed that the sum $n \\cdot m$ over all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case, output a single integer — the number of ways to restore the original complete path modulo $10^9+7$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n2 4 2\n\n1 1\n\n2 2\n\n2 4\n\n1 4 1\n\n1 1\n\n1 4\n\n5 5 11\n\n2 5\n\n3 4\n\n4 5\n\n5 4\n\n4 3\n\n5 2\n\n4 1\n\n3 2\n\n2 1\n\n1 2\n\n2 3\n\n1 4\n\n3 4 4\n\n1 2\n\n2 1\n\n3 2\n\n2 3\n\n3 4\n\n3 3 2\n\n2 2\n\n1 1\n\n1 3\n\n```\n\n#### Output #1\n\n```\n2\n0\n2\n5\n1\n```\n\n### Note\n\nIn the first test case, there are two possible paths:\n\n- $(1,1) \\to (2,1) \\to (2, 2) \\to (2, 3) \\to (2, 4)$\n- $(1,1) \\to (1,2) \\to (2, 2) \\to (2, 3) \\to (2, 4)$\n\nIn the second test case, there is no suitable path, as the cells $(1,1)$ and $(1,4)$ do not have a common neighboring cell.", "cfid": "2097B"}
{"problem_id": "2097D", "problem_title": "D. Homework", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2097/D", "problem_statement": "Some teachers work at the educational center \"Sirius\" while simultaneously studying at the university. In this case, the trip does not exempt them from completing their homework, so they do their homework right on the plane. Artem is one of those teachers, and he was assigned the following homework at the university.\n\nWith an arbitrary string $a$ of even length $m$, he can perform the following operation. Artem splits the string $a$ into two halves $x$ and $y$ of equal length, after which he performs exactly one of three actions:\n\n- For each $i \\in \\left\\{ 1, 2, \\ldots, \\frac{m}{2}\\right\\}$ assign $x_i = (x_i + y_i) \\bmod 2$;\n- For each $i \\in \\left\\{ 1, 2, \\ldots, \\frac{m}{2}\\right\\}$ assign $y_i = (x_i + y_i) \\bmod 2$;\n- Perform an arbitrary number of operations (the same operations defined above, applied recursively) on the strings $x$ and $y$, independently of each other. Note that in this case, the strings $x$ and $y$ must be of even length.\n\nAfter that, the string $a$ is replaced by the strings $x$ and $y$, concatenated in the same order.\n\nUnfortunately, Artem fell asleep on the plane, so you will have to complete his homework. Artem has two binary strings $s$ and $t$ of length $n$, each consisting of $n$ characters 0 or 1. Determine whether it is possible to make string $s$ equal to string $t$ with an arbitrary number of operations.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^5$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 10^6$) — the length of the strings $s$ and $t$.\n\nThe second line of each test case contains the string $s$ of length $n$, consisting only of characters 0 and 1.\n\nThe third line of each test case contains the string $t$ of length $n$, consisting only of characters 0 and 1.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case, output \"Yes\" (without quotes) if it is possible to make string $s$ equal to string $t$, and \"No\" otherwise.\n\nYou can output each letter in any case (lowercase or uppercase). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be accepted as a positive answer.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n8\n\n00001001\n\n10101001\n\n8\n\n00000000\n\n00001001\n\n6\n\n010110\n\n100010\n\n```\n\n#### Output #1\n\n```\nYes\nNo\nYes\n```\n\n### Note\n\nIn the first test case, the string 00001001 can be transformed into the string 10101001 in two operations. The sequence of actions is illustrated in the figure below:\n\n![](https://espresso.codeforces.com/db22dab7fd76e815ff8fea8c2beaa45cc9e94441.png)\n\nIn the second test case, the string 00000000 cannot be transformed into any string other than 00000000, as no non-zero elements can be formed during any operation.", "cfid": "2097D"}
{"problem_id": "2097C", "problem_title": "C. Bermuda Triangle", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2097/C", "problem_statement": "The Bermuda Triangle — a mysterious area in the Atlantic Ocean where, according to rumors, ships and airplanes disappear without a trace. Some blame magnetic anomalies, others — portals to other worlds, but the truth remains hidden in a fog of mysteries.\n\nA regular passenger flight 814 was traveling from Miami to Nassau on a clear sunny day. Nothing foreshadowed trouble until the plane entered a zone of strange flickering fog. Radio communication was interrupted, the instruments spun wildly, and flashes of unearthly light flickered outside the windows.\n\nFor simplicity, we will assume that the Bermuda Triangle and the airplane are on a plane, and the vertices of the triangle have coordinates $(0, 0)$, $(0, n)$, and $(n, 0)$. Initially, the airplane is located at the point $(x, y)$ strictly inside the Bermuda Triangle and is moving with a velocity vector $(v_x, v_y)$. All instruments have failed, so the crew cannot control the airplane.\n\nThe airplane can escape from the triangle if it ever reaches exactly one of the vertices of the triangle. However, if at any moment (possibly non-integer) the airplane hits the boundary of the triangle (but not at a vertex), its velocity vector is immediately reflected relative to that side$^\\dagger$, and the airplane continues to move in the new direction.\n\nDetermine whether the airplane can ever escape from the Bermuda Triangle (i.e., reach exactly one of its vertices). If this is possible, also calculate how many times before that moment the airplane will hit the boundary of the triangle (each touch of the boundary, even at the same point, counts; crossing a vertex does not count).\n\n$^\\dagger$ Reflection occurs according to the usual laws of physics. The angle of incidence equals the angle of reflection.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe only line of each test case contains five integers $n$, $x$, $y$, $v_x$, and $v_y$ ($3 \\le n \\le 10^9$, $1 \\le x, y$, $x+y < n$, $1 \\le v_x, v_y \\le 10^9$) — numbers describing the vertices of the triangle, the initial coordinates of the airplane, and the initial velocity vector.\n\n### Output\n\nFor each test case, output a single integer — the number of times the airplane will hit the boundary of the triangle before it escapes. If the airplane never escapes from the triangle, output $-1$.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n6 2 2 5 2\n\n6 2 2 20 8\n\n4 1 2 1 1\n\n4 1 1 1 2\n\n4 1 1 2 1\n\n6 2 3 2 3\n\n```\n\n#### Output #1\n\n```\n2\n2\n-1\n-1\n-1\n5\n```\n\n### Note\n\nAn illustration for the first test case is provided below:\n\n![](https://espresso.codeforces.com/b61bf649673fea524553cda5382f6c8b913e886d.png)\n\nIn the second test case, the answer is the same as in the first, as all initial data, except for the speed, are the same, but the airplanes are initially moving in the same direction.\n\nIn the third test case, the answer is $-1$, as the airplane will move exclusively along the segments marked in green. An illustration is provided below:\n\n![](https://espresso.codeforces.com/a9f5835b971419e77d90e52946f6bf0f9559d1d8.png)", "cfid": "2097C"}
{"problem_id": "2106F", "problem_title": "F. Goblin", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2106/F", "problem_statement": "Dr. TC has a new patient called Goblin. He wants to test Goblin's intelligence, but he has gotten bored of his standard test. So, he decided to make it a bit harder.\n\nFirst, he creates a binary string$^{\\text{∗}}$ $s$ having $n$ characters. Then, he creates $n$ binary strings $a_1, a_2, \\ldots, a_n$. It is known that $a_i$ is created by first copying $s$, then flipping the $i$-th character ($\\texttt{1}$ becomes $\\texttt{0}$ and vice versa). After creating all $n$ strings, he arranges them into an $n \\times n$ grid $g$ where $g_{i, j} = a_{i_j}$.\n\nA set $S$ of size $k$ containing distinct integer pairs $\\{(x_1, y_1), (x_2, y_2), \\ldots, (x_k, y_k)\\}$ is considered good if:\n\n- $1 \\leq x_i, y_i \\leq n$ for all $1 \\leq i \\leq k$.\n- $g_{x_i, y_i} = \\texttt{0}$ for all $1 \\leq i \\leq k$.\n- For any two integers $i$ and $j$ ($1 \\leq i, j \\leq k$), coordinate $(x_i, y_i)$ is reachable from coordinate $(x_j, y_j)$ by traveling through a sequence of adjacent cells (which share a side) that all have a value of $\\texttt{0}$.\n\nGoblin's task is to find the maximum possible size of a good set $S$. Because Dr. TC is generous, this time he gave him two seconds to find the answer instead of one. Goblin is not known for his honesty, so he has asked you to help him cheat.\n\n$^{\\text{∗}}$A binary string is a string that only consists of characters $\\texttt{1}$ and $\\texttt{0}$.\n\n### Input\n\nThe first line of the input consists of a single integer $t$ $(1 \\le t \\le 10^3)$ — the number of test cases.\n\nThe first line of each test contains a single integer $n$ $(1 \\le n \\le 2 \\cdot 10^5)$ — the length of the binary string $s$.\n\nThe second line of each test contains a single binary string $s$ of length $n$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single number, the maximum possible size of a good set of cells from the grid.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n3\n\n000\n\n4\n\n0010\n\n7\n\n1011001\n\n4\n\n0001\n\n2\n\n11\n\n1\n\n0\n\n```\n\n#### Output #1\n\n```\n3\n9\n10\n7\n1\n0\n```\n\n### Note\n\nIn the first example, the following grid has been written on the board:\n\n\n\n$$ 1 0 0 $$\n\n0 1 0 \n\n$$ $$\n\n0 0 1 $$\n\nThe set that consists of cells $(1, 2)$ and $(1, 3)$ is good. The set that consists of cells $(1, 1)$ and $(1, 2)$ is not good, since the value of cell $(1, 1)$ is not $0$. The set of cells $(1, 2)$, $(1, 3)$, $(2, 3)$ is good and has a maximum size of $3$. Note that the set of cells $(2, 1)$, $(3, 1)$, and $(3, 2)$ is also good with a maximum size of $3$.\n\nIn the second example, the following grid is written on the board:\n\n\n\n$$ 1 0 1 0 $$\n\n0 1 1 0 \n\n$$ $$\n\n0 0 0 0 \n\n$$ $$\n\n0 0 1 1 $$\n\nAnd the maximum possible size of a good set is $9$.", "cfid": "2106F"}
{"problem_id": "2106G2", "problem_title": "G2. Baudelaire (hard version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2106/G2", "problem_statement": "This is the Hard Version of the problem. The only difference between the two versions is that in the Hard Version the tree may be of any shape.\n\nThis problem is interactive.\n\nBaudelaire is very rich, so he bought a tree of size $n$, rooted at some arbitrary node. Additionally, every node has a value of $1$ or $-1$.\n\nCow the Nerd saw the tree and fell in love with it. However, computer science doesn't pay him enough, so he can't afford to buy it. Baudelaire decided to play a game with Cow the Nerd, and if he won, he would gift him the tree.\n\nCow the Nerd does not know which node is the root, and he doesn't know the values of the nodes either. However, he can ask Baudelaire queries of two types:\n\n- $1$ $k$ $u_1$ $u_2$ $...$ $u_k$: Let $f(u)$ be the sum of the values of all nodes in the path from the root of the tree to node $u$. Cow the Nerd may choose an integer $k$ $(1 \\le k \\le n)$ and $k$ nodes $u_1, u_2, ..., u_k$, and he will receive the value $f(u_1) + f(u_2) + ... + f(u_k)$.\n- $2$ $u$: Baudelaire will toggle the value of node $u$. Specifically, if the value of $u$ is $1$, it will become $-1$, and vice versa.\n\nCow the Nerd wins if he guesses the value of every node correctly (the values of the final tree, after performing the queries) within $n + 200$ total queries. Can you help him win?\n\n### Input\n\nThe first line of the input contains a single integer $t$ $(1 \\le t \\le 100)$, the number of test cases.\n\nThe first line of each test case contains a single integer $n$ $(2 \\le n \\le 10^3)$, the size of the tree.\n\nEach of the next $n-1$ lines contains two integers $u$ and $v$ $(1 \\le u, v \\le n, u \\neq v)$, denoting an edge between nodes $u$ and $v$ in the tree.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^3$ and that each graph provided is a valid tree.\n\n### Interaction\n\nTo ask a query of type $1$, output a line in the following format (without the quotes):\n\n- \"? 1 k $u_1$ $u_2$ $...$ $u_k$\", ($1 \\le k, u_i \\le n$)\n\nThe jury will return a single integer, $f(u_1) + f(u_2) + ... + f(u_k)$.\n\nTo ask a query of type $2$, output a line in the following format:\n\n- \"? 2 $u$\" ($1 \\le u \\le n$)\n\nThe jury will toggle the value of node $u$: if its value is $1$, it will become $-1$ and vice versa.\n\nWhen you have found the answer, output a single line in the following format:\n\n- \"! $v_1, v_2, ..., v_n$\" ($v_i = 1$ or $v_i = -1$, and $v_i$ is the value of node $i$ after performing the queries)\n\nAfter that, proceed to process the next test case or terminate the program if it was the last test case. Printing the answer does not count as a query.\n\nThe interactor is not adaptive, meaning that the values of the tree are known before the participant asks the queries.\n\nIf your program makes more than $n + 200$ queries, your program should immediately terminate to receive the verdict Wrong Answer. Otherwise, you can get an arbitrary verdict because your solution will continue to read from a closed stream.\n\nAfter printing a query do not forget to output the end of line and flush the output. Otherwise, you may get the Idleness Limit Exceeded verdict. To do this, use:\n\n- fflush(stdout) or cout.flush() in C++\n- System.out.flush() in Java;\n- flush(output) in Pascal;\n- stdout.flush() in Python;\n- see the documentation for other languages.\n\nHacks\n\nFor hacks, use the following format.\n\nThe first line should contain a single integer $t$ $(1 \\le t \\le 100)$ — the number of test cases.\n\nThe first line of each test case must contain exactly two integers $n$ and $root$ $(2 \\le n \\le 10^3, 1 \\le root \\le n)$ — the size of the tree and the root of the tree.\n\nThe second line of each test case must contain exactly $n$ integers $a_1, a_2, ..., a_n$ $(|a_i| = 1)$ — where $a_i$ is the value of node $i$.\n\nEach of the following $n-1$ lines must contain exactly two integers $u$ and $v$ $(1 \\le u, v \\le n)$ — denoting an edge of the tree between nodes $u$ and $v$.\n\nThe sum of $n$ over all test cases must not exceed $10^3$ and every graph provided must be a valid tree.\n\n### Example\n\n#### Input #1\n\n```\n3\n4\n1 4\n4 2\n2 3\n\n1\n\n-1\n\n-5\n\n-5\n\n2\n1 2\n\n2\n\n7\n1 2\n2 7\n7 3\n7 4\n7 5\n7 6\n\n-1\n\n```\n\n#### Output #1\n\n```\n\n? 1 3 1 2 4\n\n? 1 2 3 1\n\n? 2 4\n? 1 3 1 2 4\n\n? 1 2 3 1\n\n! -1 -1 -1 -1\n\n? 1 1 1\n\n! 1 1\n\n? 1 1 1\n\n! -1 1 1 1 1 1 -1```\n\n### Note\n\nIn the first example, the root of the tree is node $4$ and the values are: $[-1, -1, -1, 1]$ (the $i$-th value is the value of node $i$).\n\nInitially, $f(1) = 0, f(2) = 0, f(3) = -1, f(4) = 1$. Therefore, the answer to our first query is $f(1) + f(2) + f(4) = 1$, and of the second query is $f(3) + f(1) = -1$.\n\nAfter toggling the value of node $4$, the values are $[-1, -1, -1, -1]$. In addition, $f(1) = -2, f(2) = -2, f(3) = -3, f(4) = -1$. Therefore, $f(1) + f(2) + f(4) = -5$ and $f(3) + f(1) = -5$.\n\nWe answer that the final values of the nodes are $[-1, -1, -1, -1]$, which is correct. Notice that we report the values of the nodes after the changes, and not before.\n\nIn the second example, the root of the tree is $2$ and the initial values are $[1, 1]$.\n\nIn the last example, the root of the tree is $1$ and the initial values are $[-1, 1, 1, 1, 1, 1, -1]$.\n\nNote that this is just an explanation of how the queries work, and it is not supposed to use any specific strategy to solve the problem.", "cfid": "2106G2"}
{"problem_id": "2106G1", "problem_title": "G1. Baudelaire (easy version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2106/G1", "problem_statement": "This is the easy version of the problem. The only difference between the two versions is that in this version, it is guaranteed that every node is adjacent to node $1$.\n\nThis problem is interactive.\n\nBaudelaire is very rich, so he bought a tree of size $n$ that is rooted at some arbitrary node. Additionally, every node has a value of $1$ or $-1$. In this version, every node is adjacent to node $1$. However, please note that node $1$ is not necessarily the root.\n\nCow the Nerd saw the tree and fell in love with it. However, computer science doesn't pay him enough, so he can't afford to buy it. Baudelaire decided to play a game with Cow the Nerd, and if he won, he would gift him the tree.\n\nCow the Nerd does not know which node is the root, and he doesn't know the values of the nodes either. However, he can ask Baudelaire queries of two types:\n\n- $1$ $k$ $u_1$ $u_2$ $...$ $u_k$: Let $f(u)$ be the sum of the values of all nodes in the path from the root of the tree to node $u$. Cow the Nerd may choose an integer $k$ $(1 \\le k \\le n)$ and $k$ nodes $u_1, u_2, ..., u_k$, and he will receive the value $f(u_1) + f(u_2) + ... + f(u_k)$.\n- $2$ $u$: Baudelaire will toggle the value of node $u$. Specifically, if the value of $u$ is $1$ it will become $-1$, and vice versa.\n\nCow the Nerd wins if he guesses the value of every node correctly (the values of the final tree, after performing the queries) within $n + 200$ total queries. Can you help him win?\n\n### Input\n\nThe first line of the input contains a single integer $t$ $(1 \\le t \\le 100)$, the number of test cases.\n\nThe first line of each test case contains a single integer $n$ $(2 \\le n \\le 10^3)$, the size of the tree.\n\nEach of the next $n-1$ lines contains two integers $u$ and $v$ $(1 \\le u, v \\le n, u \\neq v)$, denoting an edge between nodes $u$ and $v$ in the tree. In this version, it is guaranteed that either $u = 1$ or $v = 1$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^3$ and that each graph provided is a valid tree.\n\n### Interaction\n\nTo ask a query of type $1$, output a line in the following format (without the quotes):\n\n- \"? 1 k $u_1$ $u_2$ $...$ $u_k$\", ($1 \\le k, u_i \\le n$)\n\nThe jury will return a single integer, $f(u_1) + f(u_2) + ... + f(u_k)$.\n\nTo ask a query of type $2$, output a line in the following format:\n\n- \"? 2 $u$\" ($1 \\le u \\le n$)\n\nThe jury will toggle the value of node $u$: if its value is $1$ it will become $-1$ and vice versa.\n\nWhen you have found the answer, output a single line in the following format:\n\n- \"! $v_1, v_2, ..., v_n$\" ($v_i = 1$ or $v_i = -1$, and $v_i$ is the value of node $i$ after performing the queries)\n\nAfter that, proceed to process the next test case or terminate the program if it was the last test case. Printing the answer does not count as a query.\n\nThe interactor is not adaptive, meaning that the values of the tree are known before the participant asks the queries.\n\nIf your program makes more than $n + 200$ queries, your program should immediately terminate to receive the verdict Wrong Answer. Otherwise, you can get an arbitrary verdict because your solution will continue to read from a closed stream.\n\nAfter printing a query do not forget to output the end of line and flush the output. Otherwise, you may get the Idleness Limit Exceeded verdict. To do this, use:\n\n- fflush(stdout) or cout.flush() in C++\n- System.out.flush() in Java;\n- flush(output) in Pascal;\n- stdout.flush() in Python;\n- see the documentation for other languages.\n\nHacks\n\nFor hacks, use the following format.\n\nThe first line should contain a single integer $t$ $(1 \\le t \\le 100)$ — the number of test cases.\n\nThe first line of each test case must contain exactly two integers $n$ and $root$ $(2 \\le n \\le 10^3, 1 \\le root \\le n)$ — the size of the tree and the root of the tree.\n\nThe second line of each test case must contain exactly $n$ integers $a_1, a_2, ..., a_n$ $(|a_i| = 1)$ — where $a_i$ is the value of node $i$.\n\nEach of the following $n-1$ lines must contain exactly two integers $u$ and $v$ $(1 \\le u, v \\le n)$ — denoting an edge of the tree between nodes $u$ and $v$.\n\nThe sum of $n$ over all test cases must not exceed $10^3$ and every graph provided must be a valid tree. For this version, every node must be adjacent to node $1$.\n\n### Example\n\n#### Input #1\n\n```\n1\n4\n1 2\n3 1\n1 4\n\n0\n\n-6\n\n```\n\n#### Output #1\n\n```\n\n? 1 3 1 2 3\n\n? 2 2\n? 1 3 1 2 3\n\n! -1 -1 -1 1```\n\n### Note\n\nIn the example, the root of the tree is node $2$, and the values of the nodes are $[-1, 1, -1, 1]$. Therefore, $f(1) = 0, f(2) = 1, f(3) = -1, f(4) = 1$.\n\nFirst, we query about the sum $f(1) + f(2) + f(3)$, so we receive the value $0$. Then, we toggle the value of node $2$, and the values are: $[-1, -1, -1, 1]$. Therefore, $f(1) = -2, f(2) = -1, f(3) = -3, f(4) = -1$, and $f(1) + f(2) + f(3) = -6$.\n\nFinally, we figure out that the values of the nodes are $[-1, -1, -1, 1]$, so we answer that.\n\nNote that this is just an explanation of how the queries work, and it is not supposed to use any specific strategy to solve the problem.", "cfid": "2106G1"}
{"problem_id": "2103D", "problem_title": "D. Local Construction", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2103/D", "problem_statement": "An element $b_i$ ($1\\le i\\le m$) in an array $b_1, b_2, \\ldots, b_m$ is a local minimum if at least one of the following holds:\n\n- $2\\le i\\le m - 1$ and $b_i < b_{i - 1}$ and $b_i < b_{i + 1}$, or\n- $i = 1$ and $b_1 < b_2$, or\n- $i = m$ and $b_m < b_{m - 1}$.\n\nSimilarly, an element $b_i$ ($1\\le i\\le m$) in an array $b_1, b_2, \\ldots, b_m$ is a local maximum if at least one of the following holds:\n\n- $2\\le i\\le m - 1$ and $b_i > b_{i - 1}$ and $b_i > b_{i + 1}$, or\n- $i = 1$ and $b_1 > b_2$, or\n- $i = m$ and $b_m > b_{m - 1}$.\n\nNote that local minima and maxima are not defined for arrays with only one element.\n\nThere is a hidden permutation$^{\\text{∗}}$ $p$ of length $n$. The following two operations are applied to permutation $p$ alternately, starting from operation 1, until there is only one element left in $p$:\n\n- Operation 1 — remove all elements of $p$ which are not local minima.\n- Operation 2 — remove all elements of $p$ which are not local maxima.\n\nMore specifically, operation 1 is applied during every odd iteration, and operation 2 is applied during every even iteration, until there is only one element left in $p$.\n\nFor each index $i$ ($1\\le i\\le n$), let $a_i$ be the iteration number that element $p_i$ is removed, or $-1$ if it was never removed.\n\nIt can be proven that there will be only one element left in $p$ after at most $\\lceil \\log_2 n\\rceil$ iterations (in other words, $a_i \\le \\lceil \\log_2 n\\rceil$).\n\nYou are given the array $a_1, a_2, \\ldots, a_n$. Your task is to construct any permutation $p$ of $n$ elements that satisfies array $a$.\n\n$^{\\text{∗}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$) — the number of elements in permutation $p$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le \\lceil\\log_2 n\\rceil$ or $a_i = -1$) — the iteration number that element $p_i$ is removed.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\nIt is guaranteed that there exists at least one permutation $p$ that satisfies array $a$.\n\n### Output\n\nFor each test case, output $n$ integers representing the elements of the permutation satisfying array $a$.\n\nIf there are multiple solutions, you may output any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n3\n\n1 1 -1\n\n5\n\n1 -1 1 2 1\n\n8\n\n3 1 2 1 -1 1 1 2\n\n7\n\n1 1 1 -1 1 1 1\n\n5\n\n1 1 1 1 -1\n\n5\n\n-1 1 1 1 1\n\n5\n\n-1 1 2 1 2\n\n```\n\n#### Output #1\n\n```\n3 2 1\n4 3 5 1 2\n6 7 2 4 3 8 5 1\n6 5 2 1 3 4 7\n5 4 3 2 1\n1 2 3 4 5\n4 5 2 3 1```\n\n### Note\n\nIn the first test case, operations will be applied to permutation $[3, 2, 1]$ as follows:\n\n1. The only local minimum in $[3, 2, 1]$ is $1$. Hence, elements $3$ and $2$ are removed. There is only one remaining element; hence the process terminates.\n\nThis satisfies array $a = [1, 1, -1]$ as both $p_1$ and $p_2$ were removed on iteration number $1$, while $p_3$ was not removed.\n\nIn the second test case, operations will be applied to permutation $p = [4, 3, 5, 1, 2]$ as follows:\n\n1. The local minima in $[4, 3, 5, 1, 2]$ are $3$ and $1$. Hence, elements $4$, $5$, and $2$ are removed.\n2. The only local maximum in $[3, 1]$ is $3$. Hence, element $1$ is removed. There is only one remaining element; hence the process terminates.\n\nThis satisfies array $a = [1, -1, 1, 2, 1]$ as elements $p_1 = 4$, $p_3 = 5$, and $p_5 = 2$ were removed on iteration $1$, element $p_4 = 1$ was removed on iteration $2$, and element $p_2 = 3$ was not removed.\n\nIn the third test case, operations will be applied on permutation $[6, 7, 2, 4, 3, 8, 5, 1]$ as follows:\n\n1. The local minima in $[6, 7, 2, 4, 3, 8, 5, 1]$ are $6$, $2$, $3$, and $1$. Hence, elements $7$, $4$, $8$, and $5$ are removed.\n2. The local maxima in $[6, 2, 3, 1]$ are $6$ and $3$. Hence, elements $2$ and $1$ are removed.\n3. The only local minimum in $[6, 3]$ is $3$. Hence, element $6$ is removed. There is only one remaining element; hence the process terminates.\n\nIn the fourth test case, one permutation satisfying the constraints is \\[$6$, $5$, $2$, $1$, $3$, $4$, $7$\\]. $1$ is the only local minimum, so only it will stay after the first iteration. Note that there are other valid permutations; for example, \\[$6$, $4$, $3$, $1$, $2$, $5$, $7$\\] would also be considered correct.", "cfid": "2103D"}
{"problem_id": "2103F", "problem_title": "F. Maximize Nor", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2103/F", "problem_statement": "The bitwise nor$^{\\text{∗}}$ of an array of $k$-bit integers $b_1, b_2, \\ldots, b_m$ can be computed by calculating the bitwise nor cumulatively from left to right. More formally, $\\operatorname{nor}(b_1, b_2, \\ldots, b_m) = \\operatorname{nor}(\\operatorname{nor}(b_1, b_2, \\ldots, b_{m - 1}), b_m)$ for $m\\ge 2$, and $\\operatorname{nor}(b_1) = b_1$.\n\nYou are given an array of $k$-bit integers $a_1, a_2, \\ldots, a_n$. For each index $i$ ($1\\le i\\le n$), find the maximum bitwise nor among all subarrays$^{\\text{†}}$ of $a$ containing index $i$. In other words, for each index $i$, find the maximum value of $\\operatorname{nor}(a_l, a_{l+1}, \\ldots, a_r)$ among all $1 \\le l \\le i \\le r \\le n$.\n\n$^{\\text{∗}}$ The [logical nor](https://en.m.wikipedia.org/wiki/Logical_NOR) of two boolean values is $1$ if both values are $0$, and $0$ otherwise. The bitwise nor of two $k$-bit integers is calculated by performing the logical nor operation on each pair of the corresponding bits.\n\nFor example, let us compute $\\operatorname{nor}(2, 6)$ when they are represented as $4$-bit numbers. In binary, $2$=$0010_2$ and $6=0110_2$. Therefore, $\\operatorname{nor}(2,6) = 1001_2 = 9$ as by performing the logical nor operations from left to right, we have:\n\n- $\\operatorname{nor}(0,0) = 1$\n- $\\operatorname{nor}(0,1) = 0$\n- $\\operatorname{nor}(1,0) = 0$\n- $\\operatorname{nor}(1,1) = 0$\n\nNote that if $2$ and $6$ were represented as $3$-bit integers instead, then $\\operatorname{nor}(2,6) = 1$.\n\n$^{\\text{†}}$An array $x$ is a subarray of an array $y$ if $x$ can be obtained from $y$ by the deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\le n \\le 10^5$, $1 \\le k \\le 17$) — the number of elements in the array and the number of bits of the array elements.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le 2^k - 1$) — the elements of array $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, output $n$ integers, the $i$-th of which is the maximum bitwise nor among all subarrays of $a$ containing index $i$.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n2 2\n\n1 3\n\n5 3\n\n1 7 4 6 2\n\n```\n\n#### Output #1\n\n```\n1 3\n5 7 5 6 5\n```\n\n### Note\n\nIn the first test case, subarrays that have index $1$ are $[1]$ and $[1, 3]$. The values of their bitwise nor are $1$ and $0$ respectively. Hence, the answer for index $1$ is $1$. Subarrays that have index $2$ are $[3]$ and $[1, 3]$. The values of their bitwise nor are $3$ and $0$ respectively. Hence, the answer for index $2$ is $3$.\n\nIn the second test case:\n\n- For $i = 1$, the subarray with maximum bitwise nor is $[a_1, a_2, a_3, a_4, a_5] = [1, 7, 4, 6, 2]$, $\\operatorname{nor}(1, 7, 4, 6, 2) = 5$\n- For $i = 2$, the subarray with maximum bitwise nor is $[a_2] = [7]$, $\\operatorname{nor}(7) = 7$\n- For $i = 3$, the subarray with maximum bitwise nor is $[a_1, a_2, a_3, a_4, a_5] = [1, 7, 4, 6, 2]$, $\\operatorname{nor}(1, 7, 4, 6, 2) = 5$\n- For $i = 4$, the subarray with maximum bitwise nor is $[a_4] = [6]$, $\\operatorname{nor}(6) = 6$\n- For $i = 5$, the subarray with maximum bitwise nor is $[a_1, a_2, a_3, a_4, a_5] = [1, 7, 4, 6, 2]$, $\\operatorname{nor}(1, 7, 4, 6, 2) = 5$", "cfid": "2103F"}
{"problem_id": "2103E", "problem_title": "E. Keep the Sum", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2103/E", "problem_statement": "You are given an integer $k$ and an array $a$ of length $n$, where each element satisfies $0 \\le a_i \\le k$ for all $1 \\le i \\le n$. You can perform the following operation on the array:\n\n- Choose two distinct indices $i$ and $j$ ($1 \\le i,j \\le n$ and $i \\neq j$) such that $a_i + a_j = k$.\n- Select an integer $x$ satisfying $-a_j \\le x \\le a_i$.\n- Decrease $a_i$ by $x$ and increase $a_j$ by $x$. In other words, update $a_i := a_i - x$ and $a_j := a_j + x$.\n\nNote that the constraints on $x$ ensure that all elements of array $a$ remain between $0$ and $k$ throughout the operations.\n\nYour task is to determine whether it is possible to make the array $a$ non-decreasing$^{\\text{∗}}$ using the above operation. If it is possible, find a sequence of at most $3n$ operations that transforms the array into a non-decreasing one.\n\nIt can be proven that if it is possible to make the array non-decreasing using the above operation, there exists a solution that uses at most $3n$ operations.\n\n$^{\\text{∗}}$ An array $a_1, a_2, \\ldots, a_n$ is said to be non-decreasing if for all $1 \\le i \\le n - 1$, it holds that $a_i \\le a_{i+1}$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers, $n$ and $k$ ($4 \\le n \\le 2 \\cdot 10^5$, $1 \\le k \\le 10^9$) — the length of the array $a$ and the required sum for the operation.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le k$) — the elements of array $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output $-1$ if it is not possible to make the array non-decreasing using the operation.\n\nOtherwise, output the number of operations $m$ ($0 \\le m \\le 3n$). On each of the next $m$ lines, output three integers $i$, $j$, and $x$ representing an operation where $a_i$ is decreased by $x$ and $a_j$ is increased by $x$.\n\nNote that you are not required to minimize the number of operations. If there are multiple solutions requiring at most $3n$ operations, you may output any.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n5 100\n\n1 2 3 4 5\n\n5 6\n\n1 2 3 5 4\n\n5 7\n\n7 1 5 3 1\n\n10 10\n\n2 5 3 2 7 3 1 8 4 0\n\n```\n\n#### Output #1\n\n```\n0\n1\n4 1 1\n-1\n6\n1 8 2\n3 5 2\n5 7 3\n5 9 3\n8 10 5\n2 10 4```\n\n### Note\n\nIn the first test case, the array is already non-decreasing, so we do not need to perform any operations.\n\nIn the second test case, we can perform an operation with $i=4$, $j=1$, and $x=1$. $a_4$ decreases by $1$ to become $5 - 1 = 4$ while $a_1$ increases by $1$ to become $1 + 1 = 2$. After the operation, the array becomes $[2, 2, 3, 4, 4]$, which is non-decreasing.\n\nNote that there are other ways to make the array non-decreasing, all of which would be considered correct as long as they do not use more than $3 \\cdot n = 15$ operations.\n\nIn the third test case, it is not possible to make the array non-decreasing. This is because there are no distinct pairs of indices $i$ and $j$ where $a_i + a_j = 7$, so no operation can be done on the array.\n\nIn the fourth test case, the array is transformed as follows:\n\n1. $[\\textbf{0}, 5, 3, 2, 7, 3, 1, \\textbf{10}, 4, 0]$\n2. $[0, 5, \\textbf{1}, 2, \\textbf{9}, 3, 1, 10, 4, 0]$\n3. $[0, 5, 1, 2, \\textbf{6}, 3, \\textbf{4}, 10, 4, 0]$\n4. $[0, 5, 1, 2, \\textbf{3}, 3, 4, 10, \\textbf{7}, 0]$\n5. $[0, 5, 1, 2, 3, 3, 4, \\textbf{5}, 7, \\textbf{5}]$\n6. $[0, \\textbf{1}, 1, 2, 3, 3, 4, 5, 7, \\textbf{9}]$", "cfid": "2103E"}
{"problem_id": "2096D", "problem_title": "D. Wonderful Lightbulbs", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2096/D", "problem_statement": "You are the proud owner of an infinitely large grid of lightbulbs, represented by a [Cartesian coordinate system](https://en.wikipedia.org/wiki/Cartesian_coordinate_system). Initially, all of the lightbulbs are turned off, except for one lightbulb, where you buried your proudest treasure.\n\nIn order to hide your treasure's position, you perform the following operation an arbitrary number of times (possibly zero):\n\n- Choose two integer numbers $x$ and $y$, and switch the state of the $4$ lightbulbs at $(x, y)$, $(x, y + 1)$, $(x + 1, y - 1)$, and $(x + 1, y)$. In other words, for each lightbulb, turn it on if it was off, and turn it off if it was on. Note that there are no constraints on $x$ and $y$.\n\nIn the end, there are $n$ lightbulbs turned on at coordinates $(x_1, y_1), (x_2, y_2), \\ldots, (x_n, y_n)$. Unfortunately, you have already forgotten where you buried your treasure, so now you have to figure out one possible position of the treasure. Good luck!\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) — the number of lightbulbs that are on.\n\nThe $i$-th of the next $n$ lines contains two integers $x_i$ and $y_i$ ($\\color{red}{-10^8} \\le x_i, y_i \\le \\color{red}{10^8}$) — the coordinates of the $i$-th lightbulb. It is guaranteed that all coordinates are distinct.\n\nAdditional constraint: There exists at least one position $(s, t)$ ($\\color{red}{-10^9} \\le s, t \\le \\color{red}{10^9}$), such that if the lightbulb at position $(s, t)$ is initially turned on, then after performing an arbitrary number of operations (possibly zero), we will get the given configuration of lightbulbs.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output two integers $s$ and $t$ ($-10^9 \\le s, t \\le 10^9$) — one possible position of the buried treasure. If there are multiple solutions, print any of them.\n\nFor this problem, hacks are disabled.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n1\n\n2 3\n\n3\n\n-2 -1\n\n-1 -2\n\n-1 -3\n\n7\n\n7 26\n\n6 27\n\n6 28\n\n7 27\n\n8 26\n\n8 27\n\n7 28\n\n11\n\n70 9\n\n69 8\n\n69 0\n\n73 5\n\n70 -1\n\n70 5\n\n71 7\n\n70 4\n\n73 4\n\n71 3\n\n72 3\n\n```\n\n#### Output #1\n\n```\n2 3\n-2 -2\n7 27\n72 7\n```\n\n### Note\n\nFor the first test case, one possible scenario is that you hid your treasure at position $(2, 3)$. Then, you did not perform any operations.\n\nIn the end, only the lightbulb at $(2, 3)$ is turned on.\n\nFor the second test case, one possible scenario is that you hid your treasure at position $(-2, -2)$. Then, you performed $1$ operation with $x = -2$, $y = -2$.\n\nThe operation switches the state of the $4$ lightbulbs at $(-2, -2)$, $(-2, -1)$, $(-1, -3)$, and $(-1, -2)$.\n\nIn the end, the lightbulbs at $(-2, -1)$, $(-1, -2)$, and $(-1, -3)$ are turned on.", "cfid": "2096D"}
{"problem_id": "2096E", "problem_title": "E. Wonderful Teddy Bears", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2096/E", "problem_statement": "You are the proud owner of $n$ teddy bears, which are arranged in a row on a shelf. Each teddy bear is colored either black or pink.\n\nAn arrangement of teddy bears is beautiful if all the black teddy bears are to the left of all the pink teddy bears. In other words, there does not exist a pair of indices $(i, j)$ ($1 \\leq i < j \\leq n$) such that the $i$-th teddy bear is pink, and the $j$-th teddy bear is black.\n\nYou want to reorder the teddy bears into a beautiful arrangement. You are too short to reach the shelf, but luckily, you can send instructions to a robot to move the teddy bears around. In a single instruction, the robot can:\n\n- Choose an index $i$ ($1 \\le i \\le n - 2$) and reorder the teddy bears at positions $i$, $i + 1$ and $i + 2$ so that all the black teddy bears are to the left of all the pink teddy bears.\n\nWhat is the minimum number of instructions needed to reorder the teddy bears?\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($3 \\le n \\le 2 \\cdot 10^5$) — the number of teddy bears.\n\nThe second line of each test case contains a single string $s$ of length $n$ consisting of characters B and P — the colors of the teddy bears. For each $i$ from $1$ to $n$, the $i$-th teddy bear is colored black if $s_i = \\texttt{B}$ and pink if $s_i = \\texttt{P}$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the minimum number of instructions needed to reorder the teddy bears.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3\n\nPPP\n\n3\n\nBPP\n\n3\n\nPPB\n\n7\n\nPPBPPBB\n\n15\n\nBPBPBBBBBPBBBBB\n\n```\n\n#### Output #1\n\n```\n0\n0\n1\n5\n14\n```\n\n### Note\n\nFor the first test case, all the teddy bears are pink. Thus, the arrangement is already beautiful, so the answer is $0$.\n\nFor the second test case, all the black teddy bears are to the left of all the pink teddy bears. Thus, the answer is $0$.\n\nFor the third test case, we can perform $1$ instruction with $i = 1$.\n\nAfter the instruction, the sequence of colors changes from $\\texttt{PPB}$ to $\\texttt{BPP}$, and we are done.\n\nFor the fourth test case, we can perform $5$ instructions as follows:\n\n- $i = 1$: $\\texttt{}\\color{magenta}{\\texttt{PPB}}\\texttt{PPBB} \\rightarrow \\texttt{}\\color{magenta}{\\texttt{BPP}}\\texttt{PPBB}$\n- $i = 5$: $\\texttt{BPPP}\\color{magenta}{\\texttt{PBB}}\\texttt{} \\rightarrow \\texttt{BPPP}\\color{magenta}{\\texttt{BBP}}\\texttt{}$\n- $i = 4$: $\\texttt{BPP}\\color{magenta}{\\texttt{PBB}}\\texttt{P} \\rightarrow \\texttt{BPP}\\color{magenta}{\\texttt{BBP}}\\texttt{P}$\n- $i = 3$: $\\texttt{BP}\\color{magenta}{\\texttt{PBB}}\\texttt{PP} \\rightarrow \\texttt{BP}\\color{magenta}{\\texttt{BBP}}\\texttt{PP}$\n- $i = 2$: $\\texttt{B}\\color{magenta}{\\texttt{PBB}}\\texttt{PPP} \\rightarrow \\texttt{B}\\color{magenta}{\\texttt{BBP}}\\texttt{PPP}$", "cfid": "2096E"}
{"problem_id": "2094H", "problem_title": "H. La Vaca Saturno Saturnita", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2094/H", "problem_statement": "Saturnita's mood depends on an array $a$ of length $n$, which only he knows the meaning of, and a function $f(k, a, l, r)$, which only he knows how to compute. Shown below is the pseudocode for his function $f(k, a, l, r)$.\n\n```\n`function f(k, a, l, r):<br/>   ans := 0<br/>   for i from l to r (inclusive):<br/>      while k is divisible by a[i]:<br/>         k := k/a[i]<br/>      ans := ans + k<br/>   return ans<br/>````\n\nYou are given $q$ queries, each containing integers $k$, $l$, and $r$. For each query, please output $f(k,a,l,r)$.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $q$ ($1 \\leq n \\leq 10^5, 1 \\leq q \\leq 5\\cdot 10^4$).\n\nThe following line contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($2 \\leq a_i \\leq 10^5$).\n\nThe following $q$ lines each contain three integers $k$, $l$, and $r$ ($1 \\leq k \\leq 10^5, 1 \\leq l \\leq r \\leq n$).\n\nIt is guaranteed that the sum of $n$ does not exceed $10^5$ over all test cases, and the sum of $q$ does not exceed $5\\cdot 10^4$ over all test cases.\n\n### Output\n\nFor each query, output the answer on a new line.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n5 3\n\n2 3 5 7 11\n\n2 1 5\n\n2 2 4\n\n2310 1 5\n\n4 3\n\n18 12 8 9\n\n216 1 2\n\n48 2 4\n\n82944 1 4\n\n```\n\n#### Output #1\n\n```\n5\n6\n1629\n13\n12\n520\n```", "cfid": "2094H"}
{"problem_id": "2093G", "problem_title": "G. Shorten the Array", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2093/G", "problem_statement": "The beauty of an array $b$ of length $m$ is defined as $\\max(b_i \\oplus b_j)$ among all possible pairs $1 \\le i \\le j \\le m$, where $x \\oplus y$ is the [bitwise XOR](https://en.wikipedia.org/wiki/Bitwise_operation#XOR) of numbers $x$ and $y$. We denote the beauty value of the array $b$ as $f(b)$.\n\nAn array $b$ is called beautiful if $f(b) \\ge k$.\n\nRecently, Kostya bought an array $a$ of length $n$ from the store. He considers this array too long, so he plans to cut out some beautiful subarray from it. That is, he wants to choose numbers $l$ and $r$ ($1 \\le l \\le r \\le n$) such that the array $a_{l \\dots r}$ is beautiful. The length of such a subarray will be the number $r - l + 1$. The entire array $a$ is also considered a subarray (with $l = 1$ and $r = n$).\n\nYour task is to find the length of the shortest beautiful subarray in the array $a$. If no subarray is beautiful, you should output the number $-1$.\n\n### Input\n\nThe first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$).\n\nNext, there are $t$ blocks of two lines:\n\nIn the first line of the block, there are two integers $n$ and $k$ ($1 \\le n \\le 2 \\cdot 10^5$, $0 \\le k \\le 10^9$).\n\nIn the second line of the block, there is the array $a$ consisting of $n$ integers ($0 \\le a_i \\le 10^9$).\n\nIt is guaranteed that the sum of $n$ across all tests does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, you need to output a single integer — the minimum length of the segment $(l, r)$ for which $f(a_{l \\dots r}) \\ge k$. If such a segment is not found, you should output $-1$.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n5 0\n\n1 2 3 4 5\n\n5 7\n\n1 2 3 4 5\n\n5 8\n\n1 2 3 4 5\n\n5 7\n\n3 5 1 4 2\n\n5 3\n\n3 5 1 4 2\n\n6 71\n\n26 56 12 45 60 27\n\n```\n\n#### Output #1\n\n```\n1\n2\n-1\n4\n2\n-1\n```", "cfid": "2093G"}
{"problem_id": "2084G1", "problem_title": "G1. Wish Upon a Satellite (Easy Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2084/G1", "problem_statement": "This is the easy version of the problem. The difference between the versions is that in this version, $t \\le 1000$, $n \\le 5000$ and the sum of $n$ does not exceed $5000$. You can hack only if you solved all versions of this problem.\n\nFor a non-empty sequence $c$ of length $k$, define $f(c)$ as follows:\n\n- Turtle and Piggy are playing a game on a sequence. They are given the sequence $c_1, c_2, \\ldots, c_k$, and Turtle goes first. Turtle and Piggy alternate in turns (so, Turtle does the first turn, Piggy does the second, Turtle does the third, etc.).\n- The game goes as follows:\n  - Let the current length of the sequence be $m$. If $m = 1$, the game ends.\n  - If the game does not end and it's Turtle's turn, then Turtle must choose an integer $i$ such that $1 \\le i \\le m - 1$, set $c_i$ to $\\min(c_i, c_{i + 1})$, and remove $c_{i + 1}$.\n  - If the game does not end and it's Piggy's turn, then Piggy must choose an integer $i$ such that $1 \\le i \\le m - 1$, set $c_i$ to $\\max(c_i, c_{i + 1})$, and remove $c_{i + 1}$.\n- Turtle wants to maximize the value of $c_1$ in the end, while Piggy wants to minimize the value of $c_1$ in the end.\n- $f(c)$ is the value of $c_1$ in the end if both players play optimally.\n\nFor a permutation $p$ of length $n$$^{\\\\text{∗}}$, Turtle defines the beauty of the permutation as $\\sum\\limits_{i = 1}^n \\sum\\limits_{j = i}^n f([p_i, p_{i + 1}, \\ldots, p_j])$ (i.e., the sum of $f(c)$ where $c$ is a non-empty subsegment$^{\\text{†}}$ of $p$).\n\nPiggy gives Turtle a permutation $a$ of length $n$ where some elements are missing and represented by $0$.\n\nTurtle asks you to determine a permutation $b$ of length $n$ such that:\n\n- $b$ can be formed by filling in the missing elements of $a$ (i.e., for all $1 \\le i \\le n$, if $a_i \\ne 0$, then $b_i = a_i$).\n- The beauty of the permutation $b$ is maximized.\n\nFor convenience, you only need to find the maximum beauty of such permutation $b$.\n\n$^{\\text{∗}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n$^{\\text{†}}$A sequence $a$ is a subsegment of a sequence $b$ if $a$ can be obtained from $b$ by the deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 5000$).\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le n$). It is guaranteed that the elements of $a$ that are not $0$ are distinct.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5000$.\n\n### Output\n\nFor each test case, output a single integer — the maximum beauty of the permutation $b$.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n2\n\n1 0\n\n3\n\n0 0 0\n\n3\n\n0 1 0\n\n5\n\n3 2 4 5 1\n\n7\n\n0 3 2 5 0 0 0\n\n10\n\n1 2 6 5 8 9 0 0 0 0\n\n5\n\n0 4 1 0 0\n\n5\n\n0 1 5 2 3\n\n```\n\n#### Output #1\n\n```\n4\n12\n11\n44\n110\n300\n45\n40\n```\n\n### Note\n\nIn the first test case, the permutation $b$ with the maximum beauty is $[1, 2]$. The beauty of $[1, 2]$ is $4$ since $f([1]) + f([2]) + f([1, 2]) = 1 + 2 + 1 = 4$. If $c = [1, 2]$, then $f(c) = 1$ since Turtle can only choose $i = 1$ and he will set $c_1$ to $\\min(c_1, c_2) = 1$.\n\nIn the second test case, one of the permutations $b$ with the maximum beauty is $[3, 2, 1]$. The beauty of $[3, 2, 1]$ is $12$ since $f([3]) + f([2]) + f([1]) + f([3, 2]) + f([2, 1]) + f([3, 2, 1]) = 3 + 2 + 1 + 2 + 1 + 3 = 12$.\n\nIn the third test case, one of the permutations $b$ with the maximum beauty is $[2, 1, 3]$.\n\nIn the fourth test case, if $c = [3, 2, 4, 5, 1]$, then $f(c) = 3$. One of the possible game processes is as follows:\n\n- Turtle can choose $i = 3$. Then he will set $c_3$ to $\\min(c_3, c_4) = 4$ and remove $c_4$. The sequence $c$ will become $[3, 2, 4, 1]$.\n- Piggy can choose $i = 1$. Then he will set $c_1$ to $\\max(c_1, c_2) = 3$ and remove $c_2$. The sequence $c$ will become $[3, 4, 1]$.\n- Turtle can choose $i = 2$. Then he will set $c_2$ to $\\min(c_2, c_3) = 1$ and remove $c_3$. The sequence $c$ will become $[3, 1]$.\n- Piggy can choose $i = 1$. Then he will set $c_1$ to $\\max(c_1, c_2) = 3$ and remove $c_2$. The sequence $c$ will become $[3]$.\n- The length of the sequence becomes $1$, so the game will end. The value of $c_1$ will be $3$ in the end.\n\nIn the fifth test case, one of the permutations $b$ with the maximum beauty is $[1, 3, 2, 5, 6, 4, 7]$.", "cfid": "2084G1"}
{"problem_id": "2084E", "problem_title": "E. Blossom", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2084/E", "problem_statement": "You are given a permutation $a$ of length $n$$^{\\\\text{∗}}$ where some elements are missing and represented by $-1$.\n\nDefine the value of a permutation as the sum of the MEX$^{\\text{†}}$ of all its non-empty subsegments$^{\\text{‡}}$.\n\nFind the sum of the value of all possible valid permutations that can be formed by filling in the missing elements of $a$ modulo $10^9 + 7$.\n\n$^{\\text{∗}}$ A permutation of length $n$ is an array consisting of $n$ distinct integers from $\\bf{0}$ to $\\bf{n - 1}$ in arbitrary order. For example, $[1,2,0,4,3]$ is a permutation, but $[0,1,1]$ is not a permutation ($1$ appears twice in the array), and $[0,2,3]$ is also not a permutation ($n=3$ but there is $3$ in the array).\n\n$^{\\text{†}}$The minimum excluded (MEX) of a collection of integers $c_1, c_2, \\ldots, c_k$ is defined as the smallest non-negative integer $x$ which does not occur in the collection $c$.\n\n$^{\\text{‡}}$A sequence $a$ is a subsegment of a sequence $b$ if $a$ can be obtained from $b$ by the deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 5000$).\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($-1 \\le a_i < n$).\n\nIt is guaranteed that the elements of $a$ that are not $-1$ are distinct.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5000$.\n\n### Output\n\nFor each test case, output a single integer — the sum of the value of all possible valid permutations modulo $10^9 + 7$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n2\n\n0 -1\n\n2\n\n-1 -1\n\n3\n\n2 0 1\n\n3\n\n-1 2 -1\n\n5\n\n-1 0 -1 2 -1\n\n```\n\n#### Output #1\n\n```\n3\n6\n7\n10\n104\n```\n\n### Note\n\nIn the first test case, the only valid permutation is $[0, 1]$, and the value of $[0, 1]$ is $3$ since:\n\n\n\n$$\\operatorname{mex}([0]) + \\operatorname{mex}([1]) + \\operatorname{mex}([0, 1]) = 1 + 0 + 2 = 3$$\n\nSo the answer is $3$.\n\nIn the second test case, there are two valid permutations: $[0, 1]$ and $[1, 0]$. The value of $[0, 1]$ and the value of $[1, 0]$ is $3$, so the answer is $3 + 3 = 6$.\n\nIn the fourth test case, there are two valid permutations: $[0, 2, 1]$ and $[1, 2, 0]$. The value of $[0, 2, 1]$ is $5$ since:\n\n\n\n$$\\operatorname{mex}([0]) + \\operatorname{mex}([2]) + \\operatorname{mex}([1]) + \\operatorname{mex}([0, 2]) + \\operatorname{mex}([2, 1]) + \\operatorname{mex}([0, 2, 1]) = 1 + 0 + 0 + 1 + 0 + 3 = 5$$\n\nAnd the value of $[1, 2, 0]$ is $5$ since:\n\n\n\n$$\\operatorname{mex}([1]) + \\operatorname{mex}([2]) + \\operatorname{mex}([0]) + \\operatorname{mex}([1, 2]) + \\operatorname{mex}([2, 0]) + \\operatorname{mex}([1, 2, 0]) = 0 + 0 + 1 + 0 + 1 + 3 = 5$$\n\nSo the answer is $5 + 5 = 10$.", "cfid": "2084E"}
{"problem_id": "2084F", "problem_title": "F. Skyscape", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2084/F", "problem_statement": "You are given a permutation $a$ of length $n$$^{\\\\text{∗}}$.\n\nWe say that a permutation $b$ of length $n$ is good if the two permutations $a$ and $b$ can become the same after performing the following operation at most $n$ times (possibly zero):\n\n- Choose two integers $l, r$ such that $1 \\le l < r \\le n$ and $a_r = \\min(a_l, a_{l + 1}, \\ldots, a_r)$.\n- Cyclically shift the subsegment $[a_l, a_{l + 1}, \\ldots, a_r]$ one position to the right. In other words, replace $a$ with $[a_1, \\ldots, a_{l - 1}, \\; a_r, a_l, a_{l + 1}, \\ldots, a_{r - 1}, \\; a_{r + 1}, \\ldots, a_n]$.\n\nYou are also given a permutation $c$ of length $n$ where some elements are missing and represented by $0$.\n\nYou need to find a good permutation $b_1, b_2, \\ldots, b_n$ such that $b$ can be formed by filling in the missing elements of $c$ (i.e., for all $1 \\le i \\le n$, if $c_i \\ne 0$, then $b_i = c_i$). If it is impossible, output $-1$.\n\n$^{\\text{∗}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n \\le 5 \\cdot 10^5$).\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le n$). It is guaranteed that $a$ is a permutation of length $n$.\n\nThe third line of each test case contains $n$ integers $c_1, c_2, \\ldots, c_n$ ($0 \\le c_i \\le n$). It is guaranteed that the elements of $c$ that are not $0$ are distinct.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5 \\cdot 10^5$.\n\n### Output\n\nFor each test case:\n\n- If it is impossible to find such a good permutation $b$, output a single integer $-1$.\n- Otherwise, output $n$ integers $b_1, b_2, \\ldots, b_n$ — the good permutation $b$ you've found. You need to ensure that for all $1 \\le i \\le n$, if $c_i \\ne 0$, then $b_i = c_i$. If there are multiple answers, output any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n9\n\n2\n\n2 1\n\n1 2\n\n4\n\n3 2 4 1\n\n2 0 0 1\n\n5\n\n3 2 1 5 4\n\n1 3 0 0 0\n\n5\n\n3 2 1 5 4\n\n3 2 1 5 4\n\n5\n\n3 2 1 5 4\n\n3 2 5 1 4\n\n6\n\n3 5 6 2 1 4\n\n0 2 0 5 0 0\n\n6\n\n3 5 6 2 1 4\n\n0 2 0 6 4 0\n\n9\n\n6 9 2 4 1 7 8 3 5\n\n0 2 5 9 0 0 0 8 0\n\n9\n\n8 5 3 9 1 7 4 6 2\n\n0 0 8 0 7 0 4 0 2\n\n```\n\n#### Output #1\n\n```\n1 2\n2 3 4 1\n1 3 2 4 5\n3 2 1 5 4\n-1\n3 2 1 5 4 6\n-1\n-1\n1 3 8 5 7 9 4 6 2\n```\n\n### Note\n\nIn the first test case, $b = [1, 2]$ is a valid answer since after performing the following operation, $a$ and $b$ will become the same:\n\n- Choose $l = 1, r = 2$ and cyclically shift the subsegment $[a_1, a_2]$ one position to the right. Then $a$ will become $[1, 2]$.\n\nIn the second test case, $b = [2, 3, 4, 1]$ is a valid answer since after performing the following operation, $a$ and $b$ will become the same:\n\n- Choose $l = 1, r = 2$ and cyclically shift the subsegment $[a_1, a_2]$ one position to the right. Then $a$ will become $[2, 3, 4, 1]$.\n\nIn the third test case, $b = [1, 3, 2, 4, 5]$ is a valid answer since after performing the following operation, $a$ and $b$ will become the same:\n\n- Choose $l = 1, r = 3$ and cyclically shift the subsegment $[a_1, a_2, a_3]$ one position to the right. Then $a$ will become $[1, 3, 2, 5, 4]$.\n- Choose $l = 4, r = 5$ and cyclically shift the subsegment $[a_4, a_5]$ one position to the right. Then $a$ will become $[1, 3, 2, 4, 5]$.\n\nIn the fourth test case, $b = [3, 2, 1, 5, 4]$ is a valid answer since $a$ and $b$ are already the same.\n\nIn the fifth test case, it is impossible to find such a good permutation $b$, so you should output $-1$.\n\nIn the sixth test case, $b = [3, 2, 1, 5, 4, 6]$ is a valid answer since after performing the following operation, $a$ and $b$ will become the same:\n\n- Choose $l = 2, r = 4$ and cyclically shift the subsegment $[a_2, a_3, a_4]$ one position to the right. Then $a$ will become $[3, 2, 5, 6, 1, 4]$.\n- Choose $l = 3, r = 5$ and cyclically shift the subsegment $[a_3, a_4, a_5]$ one position to the right. Then $a$ will become $[3, 2, 1, 5, 6, 4]$.\n- Choose $l = 5, r = 6$ and cyclically shift the subsegment $[a_5, a_6]$ one position to the right. Then $a$ will become $[3, 2, 1, 5, 4, 6]$.", "cfid": "2084F"}
{"problem_id": "2086E", "problem_title": "E. Zebra-like Numbers", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2086/E", "problem_statement": "We call a positive integer zebra-like if its binary representation has alternating bits up to the most significant bit, and the least significant bit is equal to $1$. For example, the numbers $1$, $5$, and $21$ are zebra-like, as their binary representations $1$, $101$, and $10101$ meet the requirements, while the number $10$ is not zebra-like, as the least significant bit of its binary representation $1010$ is $0$.\n\nWe define the zebra value of a positive integer $e$ as the minimum integer $p$ such that $e$ can be expressed as the sum of $p$ zebra-like numbers (possibly the same, possibly different)\n\nGiven three integers $l$, $r$, and $k$, calculate the number of integers $x$ such that $l \\le x \\le r$ and the zebra value of $x$ equals $k$.\n\n### Input\n\nEach test consists of several test cases. The first line contains a single integer $t$ ($1 \\le t \\le 100$) — the number of test cases. The description of test cases follows.\n\nThe only line of each test case contains three integers $l$, $r$ ($1 \\le l \\le r \\le 10^{18}$) and $k$ ($1 \\le k \\le 10^{18}$).\n\n### Output\n\nFor each test case, output a single integer — the number of integers in $[l, r]$ with zebra value $k$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n1 100 3\n\n1 1 1\n\n15 77 2\n\n2 10 100\n\n1234567 123456789101112131 12\n\n```\n\n#### Output #1\n\n```\n13\n1\n3\n0\n4246658701\n```\n\n### Note\n\nIn the first test case, there are $13$ suitable numbers: $3, 7, 11, 15, 23, 27, 31, 43, 47, 63, 87, 91, 95$.\n\nEach of them can be represented as a sum of $3$ zebra-like numbers.", "cfid": "2086E"}
{"problem_id": "2086F", "problem_title": "F. Online Palindrome", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2086/F", "problem_statement": "This is an interactive problem.\n\nThe jury has a string $s$ consisting of lowercase Latin letters. The following constraints apply to this string:\n\n- the string has an odd length that does not exceed $99$;\n- the string consists only of the characters \"a\" and \"b\".\n\nThere is also a string $t$, which is initially empty. Then, $|s|$ steps happen. During the $i$-th step, the following events occur:\n\n- first, the jury tells you the character $s_i$ and appends it to the end of the string $t$;\n- then, you may swap any two characters in $t$, or do nothing.\n\nYour task is to ensure that after the $|s|$-th step, the string $t$ is a palindrome.\n\n### Interaction\n\nThe interactive interaction starts immediately.\n\nDuring each step, your program will receive one character — the next character of the string $s$ or \"0\" (zero) if the string has ended. If the character \"0\" is received, your program must terminate immediately.\n\nAfter receiving $s_{i}$, you must output the positions of the characters to be swapped, that is, two integers $l$ and $r$ ($1 \\le l,r \\le i$) or, if you do not want to swap characters, then \"0 0\".\n\nIf your program makes an invalid operation, for example, by trying to swap characters from non-existing positions, or the resulting string $t$ is not a palindrome, the jury program will print one character \"X\" on a separate line. If your program receives \"X\" as the response, it should terminate immediately; otherwise, the verdict of your submission will be undefined.\n\nThe interactor in this problem is not adaptive, meaning that the string $s$ does not change during the interaction.\n\nAfter each output request, do not forget to output a newline and flush the output buffer. Otherwise, you will receive a verdict of \"Idleness limit exceeded\". To do this, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- sys.stdout.flush() in Python;\n- refer to the documentation for other languages.\n\nHack format\n\nFor hacks, use the following format.\n\nThe first line should contain a single integer $|s|$ — the length of the string $s$.\n\nThe second line should contain the $s$ itself ($1 \\le |s| \\le 99, |s| \\bmod 2 = 1$), consisting of lowercase Latin letters \"a\" and \"b\".\n\n### Examples\n\n#### Input #1\n\n```\na\n\na\n\nb\n\n0```\n\n#### Output #1\n\n```\n\n0 0\n\n1 2\n\n2 3\n```\n\n#### Input #2\n\n```\na\n\na\n\nb\n\na\n\nb\n\n0\n```\n\n#### Output #2\n\n```\n\n0 0\n\n2 1\n\n3 2\n\n4 4\n\n4 5\n```", "cfid": "2086F"}
{"problem_id": "2092F", "problem_title": "F. Andryusha and CCB", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2092/F", "problem_statement": "Let us define the beauty of a binary string $z$ as the number of indices $i$ such that $1 \\le i < |z|$ and $z_i \\neq z_{i+1}$.\n\nWhile waiting for his friends from the CCB, Andryusha baked a pie, represented by a binary string $s$ of length $n$. To avoid offending anyone, he wants to divide this string into $k$ substrings such that each digit belongs to exactly one substring, and the beauties of all substrings are the same.\n\nAndryusha does not know the exact number of friends from the CCB who will come to his house, so he wants to find the number of values of $k$ for which it is possible to split the pie into exactly $k$ parts with equal beauties.\n\nHowever, Andryusha's brother, Tristan, decided that this formulation of the problem is too simple. Therefore, he wants you to find the number of such values of $k$ for each prefix of the string. In other words, for each $i$ from $1$ to $n$, you need to find the number of values of $k$ for which it is possible to split the prefix $s_1 s_2 \\ldots s_i$ into exactly $k$ parts with equal beauties.\n\n### Input\n\nEach test consists of several test cases. The first line of the input data contains one integer $t$ ($1 \\le t \\le 10^5$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\leq n \\leq 10^6$) — the length of the binary string.\n\nThe second line of each test case contains a binary string of length $n$, consisting only of digits 0 and 1.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case, output a single line containing $n$ integers $c_i$ ($0 \\le c_i \\le n$) — the number of values of $k$ for which it is possible to split the prefix $s_1 s_2 \\ldots s_i$ into exactly $k$ parts with equal beauties.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n5\n\n00011\n\n10\n\n0101010101\n\n7\n\n0010100\n\n```\n\n#### Output #1\n\n```\n1 2 3 4 5\n1 2 2 3 2 4 2 4 3 4\n1 2 3 3 4 3 4\n```\n\n### Note\n\nIn the third case, the values of $k$ that satisfy the conditions are:\n\n1. $i = 1$: $k \\in \\{1\\}$,\n2. $i = 2$: $k \\in \\{1, 2\\}$,\n3. $i = 3$: $k \\in \\{1, 2, 3\\}$,\n4. $i = 4$: $k \\in \\{1, 3, 4\\}$,\n5. $i = 5$: $k \\in \\{1, 2, 4, 5\\}$,\n6. $i = 6$: $k \\in \\{1, 5, 6\\}$,\n7. $i = 7$: $k \\in \\{1, 5, 6, 7\\}$.", "cfid": "2092F"}
{"problem_id": "2092E", "problem_title": "E. She knows...", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2092/E", "problem_statement": "D. Pippy is preparing for a \"black-and-white\" party at his home. He only needs to repaint the floor in his basement, which can be represented as a board of size $n \\times m$.\n\nAfter the last party, the entire board is painted green, except for some $k$ cells $(x_1, y_1), (x_2, y_2), \\ldots, (x_k, y_k)$, each of which is painted either white or black. For the upcoming party, D. Pippy wants to paint each of the remaining green cells either black or white. At the same time, he wants the number of pairs of adjacent cells with different colors on the board to be even after repainting.\n\nFormally, if \n\n$$A = \\left\\{((i_1, j_1), (i_2, j_2)) \\ | \\ 1 \\le i_1, i_2 \\le n, 1 \\le j_1, j_2 \\le m, i_1+j_1<i_2+j_2, |i_1-i_2|+|j_1-j_2| = 1, \\operatorname{color}(i_1, j_1) \\neq \\operatorname{color}(i_2, j_2) \\right\\},$$\n\nwhere $\\operatorname{color}(x, y)$ denotes the color of the cell $(x, y)$, then it is required that $|A|$ be even.\n\nHelp D. Pippy find the number of ways to repaint the floor so that the condition is satisfied. Since this number can be large, output the remainder of its division by $10^9 + 7$.\n\n### Input\n\nEach test consists of several test cases. The first line of the input data contains one integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains three integers $n, m, k$ ($3 \\le n, m \\le 10^9$; $1 \\le k \\le 2 \\cdot 10^5$) — the dimensions of the board and the number of cells that are initially not green.\n\nIn the $i$-th of the following $k$ lines of each test case, there are three integers $x_i, y_i$ and $c_i$ ($1 \\le x_i \\le n; 1 \\le y_i \\le m$; $c_i \\in \\{0, 1\\}$) — the coordinates of the cell and its color (if white, then $c_i = 0$; if black, then $c_i = 1$). It is guaranteed that all cells are distinct.\n\nIt is guaranteed that the sum of $k$ across all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the answer modulo $10^9 + 7$.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n3 3 6\n\n1 1 0\n\n1 2 1\n\n1 3 0\n\n3 1 1\n\n3 2 0\n\n3 3 1\n\n3 4 12\n\n1 1 0\n\n1 2 1\n\n1 3 0\n\n1 4 1\n\n2 1 1\n\n2 2 0\n\n2 3 1\n\n2 4 0\n\n3 1 0\n\n3 2 1\n\n3 3 0\n\n3 4 1\n\n```\n\n#### Output #1\n\n```\n4\n0\n```\n\n### Note\n\nIn the first test case, there are exactly $4$ ways to paint the green cells $(2, 1), (2, 2), (2, 3)$, namely: $(1, 1, 0), (0, 0, 1), (1, 0, 0), (0, 1, 1)$ (the colors are indicated in the same order as the cells), as shown below.\n\n![](https://espresso.codeforces.com/675afbf168b04d13cafb66dda4b563200ddc256d.png)Example 1.\n\nIn the second test case, all cells of the board are already painted, and the number of pairs of adjacent cells with different colors on the board is odd, so the answer is zero.", "cfid": "2092E"}
{"problem_id": "2091G", "problem_title": "G. Gleb and Boating", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2091/G", "problem_statement": "Programmer Gleb frequently visits the IT Campus \"NEIMARK\" to participate in programming training sessions.\n\nNot only is Gleb a programmer, but he is also a renowned rower, so he covers part of his journey from home to the campus by kayaking along a river. Assume that Gleb starts at point $0$ and must reach point $s$ (i.e., travel $s$ meters along a straight line). To make the challenge tougher, Gleb has decided not to go outside the segment $[0, s]$. The dimensions of the kayak can be neglected.\n\nGleb is a strong programmer! Initially, his power is $k$. Gleb's power directly affects the movement of his kayak. If his current power is $x$, then with one paddle stroke the kayak moves $x$ meters in the current direction. Gleb can turn around and continue moving in the opposite direction, but such a maneuver is quite challenging, and after each turn, his power decreases by $1$. The power can never become $0$ — if his current power is $1$, then even after turning it remains $1$. Moreover, Gleb cannot make two turns in a row — after each turn, he must move at least once before making another turn. Similarly, Gleb cannot make a turn immediately after the start — he must first perform a paddle stroke.\n\nGleb wants to reach point $s$ from point $0$ without leaving the segment $[0, s]$ and while preserving as much power as possible. Help him — given the value $s$ and his initial power $k$, determine the maximum possible power he can have upon reaching point $s$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\leq t \\leq 100$). The description of the test cases follows.\n\nA single line of each test case contains two integers $s$ and $k$ ($1 \\leq s \\leq 10^9$, $1 \\leq k \\leq 1000$, $k \\leq s$).\n\nIt is guaranteed that the sum of $k$ over all test cases does not exceed $2000$.\n\n### Output\n\nFor each test case, output the maximum possible power Gleb can have at the end of his journey.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n9 6\n\n10 7\n\n24 2\n\n123456 777\n\n6 4\n\n99 6\n\n10 4\n\n99 4\n\n```\n\n#### Output #1\n\n```\n4\n1\n2\n775\n1\n4\n2\n2\n```\n\n### Note\n\nOne of the variants of Gleb's movement in the first example:\n\n![](https://espresso.codeforces.com/4e41b69eb4b8149b5fb4530e5f1e6eede1c4d340.png)", "cfid": "2091G"}
{"problem_id": "2089C1", "problem_title": "C1. Key of Like (Easy Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2089/C1", "problem_statement": "This is the easy version of the problem. The difference between the versions is that in this version, it is guaranteed that $k=0$. You can hack only if you solved all versions of this problem.\n\nA toy box is a refrigerator filled with childhood delight. Like weakness, struggle, hope ... When such a sleeper is reawakened, what kind of surprises will be waiting?\n\nM received her toy box as a birthday present from her mother. A jewellery designer would definitely spare no effort in decorating yet another priceless masterpiece as a starry firmament with exquisitely shaped gemstones. In addition, $l$ distinct locks secure the tiny universe of her lovely daughter: a hair clip featuring a flower design, a weathered feather pen, a balloon shaped like the letter M ... each piece obscures a precious moment.\n\nA few days ago, M rediscovered her toy box when she was reorganizing her bedroom, along with a ring of keys uniquely designed for the toy box. Attached to the key ring are $(l + k)$ keys, of which $l$ keys are able to open one of the $l$ locks correspondingly, while the other $k$ keys are nothing but counterfeits to discourage brute-force attack. To remind the correspondence, M's mother adorned each key with a gemstone of a different type. However, passing days have faded M's memory away.\n\n\"... So I have to turn to you all,\" M said while laying that ring of keys on the table.\n\nK picked up the keys and examined them carefully. \"The appearance of these keys unveils nothing fruitful. Thus, I am afraid that we shall inspect them sequentially.\"\n\nAlthough everyone is willing to help M, nobody has a plan. Observing others' reactions, T suggested, \"Let's play a game. Everyone tries a key in turn, and who opens the most locks is amazing.\"\n\n$n$ members, including M herself, take turns to unlock the toy box recursively in the same order until all the $l$ locks are unlocked. At each turn, the current member only selects a single key and tests it on exactly one of the locks. To open the toy box as soon as possible, every member chooses the key and the lock that maximize the probability of being a successful match. If there are multiple such pairs, a member will randomly choose one of such pairs with equal probability. Apparently, if a lock has been matched with a key, then neither the lock nor the key will be chosen again in following attempts.\n\nAssume that at the very beginning, the probability that a lock can be opened by any key is equal. If everyone always tries the optimal pairs of keys and locks based on all the historical trials, what will the expected number of successful matches be for each member?\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 100$). The description of the test cases follows.\n\nThe only line of the input contains three integers, $n$, $l$, $k$ ($1 \\leq n \\leq 100, 1 \\leq l \\leq 5000, k = 0$) — the number of members participating in the game, the number of locks, and the number of counterfeit keys.\n\nIt is guaranteed that the sum of $l$ across all test cases does not exceed $5000$.\n\n### Output\n\nFor each test case, output a single line with $n$ integers $e_1, \\ldots, e_n$, where $e_i$ represents the expected number of successful matches, modulo $10^9 + 7$.\n\nFormally, let $M = 10^9 + 7$. It can be shown that the exact answer can be expressed as an irreducible fraction $\\frac{p}{q}$, where $p$ and $q$ are integers and $q \\not \\equiv 0 \\pmod{M}$. Output the integer equal to $p \\cdot q^{-1} \\bmod M$. In other words, output such an integer $e_i$ that $0 \\le x < M$ and $e_i \\cdot q \\equiv p \\pmod{M}$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3 1 0\n\n3 2 0\n\n2 5 0\n\n9 104 0\n\n```\n\n#### Output #1\n\n```\n1 0 0\n500000004 1 500000004\n200000004 800000008\n869203933 991076635 39374313 496894434 9358446 51822059 979588764 523836809 38844739\n```\n\n### Note\n\nFor the first test case, there is only $1$ lock, so the first member opens the only lock with the only key undoubtedly.\n\nFor the second test case, there are exactly $2$ locks and $2$ keys, with each key corresponding to one of the locks. Without extra information, the first member randomly chooses a key and a lock with equal probabilities, for which the probability of success is $1/2$.\n\n- If the first member succeeds, the second member will open the other lock with the other key.\n- If the first member fails, then the key she selected can open the other lock, and the other key must correspond to the lock she chose. This information allows both the second and the third member to open a lock.\n\nIn conclusion, the expected numbers of successful matches will be:\n\n\n\n$$ \\begin{split} e_1 &= \\frac{1}{2}\\times 1 + \\frac{1}{2}\\times 0 = \\frac{1}{2} \\equiv 500,000,004 \\pmod {10^9+7},\\\\ e_2 &= \\frac{1}{2}\\times 1 + \\frac{1}{2} \\times 1 = 1,\\\\ e_3 &= \\frac{1}{2}\\times 0 + \\frac{1}{2} \\times 1 = \\frac{1}{2} \\equiv 500,000,004\\pmod {10^9+7}. \\end{split} $$\n\n", "cfid": "2089C1"}
{"problem_id": "2089B1", "problem_title": "B1. Canteen (Easy Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2089/B1", "problem_statement": "This is the easy version of the problem. The difference between the versions is that in this version, $k=0$. You can hack only if you solved all versions of this problem.\n\nEcrade has two sequences $a_0, a_1, \\ldots, a_{n - 1}$ and $b_0, b_1, \\ldots, b_{n - 1}$ consisting of integers. It is guaranteed that the sum of all elements in $a$ does not exceed the sum of all elements in $b$.\n\nInitially, Ecrade can make exactly $k$ changes to the sequence $a$. It is guaranteed that $k$ does not exceed the sum of $a$. In each change:\n\n- Choose an integer $i$ ($0 \\le i < n$) such that $a_i > 0$, and perform $a_i := a_i - 1$.\n\nThen Ecrade will perform the following three operations sequentially on $a$ and $b$, which constitutes one round of operations:\n\n1. For each $0 \\le i < n$: $t := \\min(a_i, b_i), a_i := a_i - t, b_i := b_i - t$;\n2. For each $0 \\le i < n$: $c_i := a_{(i - 1) \\bmod n}$;\n3. For each $0 \\le i < n$: $a_i := c_i$;\n\nEcrade wants to know the minimum number of rounds required for all elements in $a$ to become equal to $0$ after exactly $k$ changes to $a$.\n\nHowever, this seems a bit complicated, so please help him!\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 2\\cdot 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$, $k$ ($1 \\le n \\le 2 \\cdot 10^5$, $k = 0$).\n\nThe second line of each test case contains $n$ integers $a_0, a_1, \\ldots, a_{n - 1}$ ($1 \\le a_i \\le 10^9$).\n\nThe third line of each test case contains $n$ integers $b_0, b_1, \\ldots, b_{n - 1}$ ($1 \\le b_i \\le 10^9$).\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2\\cdot 10^5$. It is also guaranteed that in each test case the sum of $a$ does not exceed the sum of $b$, and that $k$ does not exceed the sum of $a$.\n\n### Output\n\nFor each test case, output the minimum number of rounds required for all elements in $a$ to become equal to $0$ after exactly $k$ changes to $a$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3 0\n\n1 1 4\n\n5 1 4\n\n4 0\n\n1 2 3 4\n\n4 3 2 1\n\n4 0\n\n2 1 1 2\n\n1 2 2 1\n\n8 0\n\n1 2 3 4 5 6 7 8\n\n8 7 6 5 4 3 2 1\n\n```\n\n#### Output #1\n\n```\n1\n4\n4\n8\n```\n\n### Note\n\nIn this version, Ecrade cannot make changes to $a$.\n\nIn the first test case:\n\n- After the first round, $a=[0,0,0],b=[4,0,0]$.\n\nIn the second test case:\n\n- After the first round, $a=[3,0,0,1],b=[3,1,0,0]$;\n- After the second round, $a=[1,0,0,0],b=[0,1,0,0]$;\n- After the third round, $a=[0,1,0,0],b=[0,1,0,0]$;\n- After the fourth round, $a=[0,0,0,0],b=[0,0,0,0]$.", "cfid": "2089B1"}
{"problem_id": "2089B2", "problem_title": "B2. Canteen (Hard Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2089/B2", "problem_statement": "This is the hard version of the problem. The difference between the versions is that in this version, there are no additional limits on $k$. You can hack only if you solved all versions of this problem.\n\nEcrade has two sequences $a_0, a_1, \\ldots, a_{n - 1}$ and $b_0, b_1, \\ldots, b_{n - 1}$ consisting of integers. It is guaranteed that the sum of all elements in $a$ does not exceed the sum of all elements in $b$.\n\nInitially, Ecrade can make exactly $k$ changes to the sequence $a$. It is guaranteed that $k$ does not exceed the sum of $a$. In each change:\n\n- Choose an integer $i$ ($0 \\le i < n$) such that $a_i > 0$, and perform $a_i := a_i - 1$.\n\nThen Ecrade will perform the following three operations sequentially on $a$ and $b$, which constitutes one round of operations:\n\n1. For each $0 \\le i < n$: $t := \\min(a_i, b_i), a_i := a_i - t, b_i := b_i - t$;\n2. For each $0 \\le i < n$: $c_i := a_{(i - 1) \\bmod n}$;\n3. For each $0 \\le i < n$: $a_i := c_i$;\n\nEcrade wants to know the minimum number of rounds required for all elements in $a$ to become equal to $0$ after exactly $k$ changes to $a$.\n\nHowever, this seems a bit complicated, so please help him!\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 2\\cdot 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$, $k$ ($1\\le n\\le 2\\cdot 10^5$, $0\\le k\\le 2\\cdot 10^{14}$).\n\nThe second line of each test case contains $n$ integers $a_0, a_1, \\ldots, a_{n - 1}$ ($1 \\le a_i \\le 10^9$).\n\nThe third line of each test case contains $n$ integers $b_0, b_1, \\ldots, b_{n - 1}$ ($1 \\le b_i \\le 10^9$).\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2\\cdot 10^5$. It is also guaranteed that in each test case the sum of $a$ does not exceed the sum of $b$, and that $k$ does not exceed the sum of $a$.\n\n### Output\n\nFor each test case, output the minimum number of rounds required for all elements in $a$ to become equal to $0$ after exactly $k$ changes to $a$.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n3 0\n\n1 1 4\n\n5 1 4\n\n4 0\n\n1 2 3 4\n\n4 3 2 1\n\n4 0\n\n2 1 1 2\n\n1 2 2 1\n\n8 0\n\n1 2 3 4 5 6 7 8\n\n8 7 6 5 4 3 2 1\n\n3 6\n\n1 1 4\n\n5 1 4\n\n4 1\n\n1 2 3 4\n\n4 3 2 1\n\n4 1\n\n2 1 1 2\n\n1 2 2 1\n\n4 2\n\n2 1 1 2\n\n1 2 2 1\n\n```\n\n#### Output #1\n\n```\n1\n4\n4\n8\n0\n2\n2\n1\n```\n\n### Note\n\nIn the fifth test case, all elements in $a$ become $0$ after exactly $6$ changes.\n\nIn the sixth test case, Ecrade can do exactly one change to $a_3$, then $a$ will become $[1,2,2,4]$.\n\n- After the first round, $a=[3,0,0,0],b=[3,1,0,0]$;\n- After the second round, $a=[0,0,0,0],b=[0,1,0,0]$.\n\nIn the seventh test case, Ecrade can do exactly one change to $a_4$, then $a$ will become $[2,1,1,1]$.\n\n- After the first round, $a=[0,1,0,0],b=[0,1,1,0]$;\n- After the second round, $a=[0,0,0,0],b=[0,0,1,0]$.", "cfid": "2089B2"}
{"problem_id": "2085F1", "problem_title": "F1. Serval and Colorful Array (Easy Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2085/F1", "problem_statement": "This is the easy version of the problem. The difference between the versions is that in this version, $n\\le 3000$. You can hack only if you solved all versions of this problem.\n\nServal has a magic number $k$ ($k\\ge 2$). We call an array $r$ colorful if and only if:\n\n- The length of $r$ is $k$, and\n- Each integer between $1$ and $k$ appears exactly once in $r$.\n\nYou are given an array $a$ consisting of $n$ integers between $1$ and $k$. It is guaranteed that each integer between $1$ and $k$ appears in $a$ at least once. You can perform the following operation on $a$:\n\n- Choose an index $i$ ($1\\le i < n$), then swap $a_i$ and $a_{i+1}$.\n\nFind the minimum number of operations needed to make at least one subarray$^{\\text{∗}}$ of $a$ colorful. It can be shown that this is always possible under the constraints of the problem.\n\n$^{\\text{∗}}$An array $b$ is a subarray of an array $a$ if $b$ can be obtained from $a$ by the deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $k$ ($2\\leq k\\leq n\\leq 3000$) — the length of the array $a$ and Serval's magic number.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1\\leq a_i\\leq k$) — the elements of the array $a$. It is guaranteed that each integer between $1$ and $k$ appears in $a$ at least once.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $3000$.\n\n### Output\n\nFor each test case, output a single integer — the minimum number of operations needed to make at least one subarray of $a$ colorful.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n3 2\n\n1 2 1\n\n7 3\n\n2 1 1 3 1 1 2\n\n6 3\n\n1 1 2 2 2 3\n\n6 3\n\n1 2 2 2 2 3\n\n10 5\n\n5 1 3 1 1 2 2 4 1 3\n\n9 4\n\n1 2 3 3 3 3 3 2 4\n\n```\n\n#### Output #1\n\n```\n0\n1\n2\n3\n4\n5\n```\n\n### Note\n\nIn the first test case, since the subarrays $[a_1, a_2] = [1, 2]$ and $[a_2, a_3] = [2, 1]$ are already colorful, we do not need to perform any operations. Thus, the answer is $0$.\n\nIn the second test case, we can swap $a_1$ and $a_2$ to obtain $[1, \\underline{2, 1, 3}, 1, 1, 2]$, which has a colorful subarray $[a_2, a_3, a_4] = [2, 1, 3]$. And the given array initially does not have any colorful subarrays, so the answer is $1$.", "cfid": "2085F1"}
{"problem_id": "2085D", "problem_title": "D. Serval and Kaitenzushi Buffet", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2085/D", "problem_statement": "Serval has just found a Kaitenzushi buffet restaurant. Kaitenzushi means that there is a conveyor belt in the restaurant, delivering plates of sushi in front of the customer, Serval.\n\nIn this restaurant, each plate contains exactly $k$ pieces of sushi and the $i$-th plate has a deliciousness $d_i$. Serval will have a meal in this restaurant for $n$ minutes, and within the $n$ minutes, he must eat up all the pieces of sushi he took from the belt.\n\nDenote the counter for uneaten taken pieces of sushi as $r$. Initially, $r=0$. In the $i$-th minute ($1\\leq i\\leq n$), only the $i$-th plate of sushi will be delivered in front of Serval, and he can do one of the following:\n\n- Take the $i$-th plate of sushi (whose deliciousness is $d_i$) from the belt, and $r$ will be increased by $k$;\n- Eat one uneaten piece of sushi that he took from the belt before, and $r$ will be decreased by $1$. Note that you can do this only if $r>0$;\n- Or, do nothing, and $r$ will remain unchanged.\n\nNote that after the $n$ minutes, the value of $r$ must be $0$.\n\nServal wants to maximize the sum of the deliciousnesses of all the plates he took. Help him find it out!\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1\\leq k<n\\leq 2\\cdot 10^5$) — the number of minutes of the meal and the number of sushi pieces in each plate.\n\nThe second line contains $n$ integers $d_1, d_2, \\ldots, d_n$ ($1\\leq d_i\\leq 10^9$) — the deliciousness of each plate.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, print a single integer — the maximum possible sum of the deliciousnesses of all the plates Serval took.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n5 2\n\n3 6 4 1 2\n\n7 1\n\n3 1 4 1 5 9 2\n\n4 3\n\n4 3 2 1\n\n6 2\n\n1 3 5 2 4 6\n\n6 1\n\n1000000000 1 1000000000 1 1000000000 1\n\n```\n\n#### Output #1\n\n```\n6\n16\n4\n6\n3000000000\n```\n\n### Note\n\nIn the first test case, it can be shown that Serval can eat up at most one plate of sushi. Since the second plate of sushi has the greatest deliciousness $6$ among all the plates, he will take it from the belt in the second minute, and then eat it up in the following $2$ minutes.\n\nMinute$1\n\n$$2$$\n\n3\n\n$$4$$\n\n5$Action — TakeEatEat — $r$ after action$0\n\n$$2$$\n\n1\n\n$$0$$\n\n0$Deliciousnesses gained$0\n\n$$6$$\n\n6\n\n$$6$$\n\n6$\n\nIn the second test case, it can be shown that it is optimal for Serval to eat up the first, third, and sixth plates of sushi. The sum of the deliciousnesses of these plates is $3 + 4 + 9 = 16$.\n\nMinute$1\n\n$$2$$\n\n3\n\n$$4$$\n\n5\n\n$$6$$\n\n7$ActionTakeEatTakeEat — TakeEat$r$ after action$1\n\n$$0$$\n\n1\n\n$$0$$\n\n0\n\n$$1$$\n\n0$Deliciousnesses gained$3\n\n$$3$$\n\n7\n\n$$7$$\n\n7\n\n$$16$$\n\n16$", "cfid": "2085D"}
{"problem_id": "2085E", "problem_title": "E. Serval and Modulo", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2085/E", "problem_statement": "There is an array $a$ consisting of $n$ non-negative integers and a magic number $k$ ($k\\ge 1$, $k$ is an integer). Serval has constructed another array $b$ of length $n$, where $b_i = a_i \\bmod k$ holds$^{\\text{∗}}$ for all $1\\leq i\\leq n$. Then, he shuffled $b$.\n\nYou are given the two arrays $a$ and $b$. Find a possible magic number $k$. However, there is a small possibility that Serval fooled you, and such an integer does not exist. In this case, output $-1$.\n\nIt can be shown that, under the constraints of the problem, if such an integer $k$ exists, then there exists a valid answer no more than $10^9$. And you need to guarantee that $k\\le 10^9$ in your output.\n\n$^{\\\\text{∗}}$$a\\_i \\\\bmod k$ denotes the remainder from dividing $a\\_i$ by $k$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains an integer $n$ ($1\\leq n\\leq 10^4$) — the length of the array $a$.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0\\leq a_i\\leq 10^6$) — the elements of the array $a$.\n\nThe third line contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($0\\leq b_i\\leq 10^6$) — the elements of the array $b$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^4$.\n\n### Output\n\nFor each test case, output a single integer $k$ ($1\\leq k\\leq 10^9$) — the magic number you found. Print $-1$ if it is impossible to find such an integer.\n\nIf there are multiple answers, you may print any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n4\n\n3 5 2 7\n\n0 1 1 1\n\n5\n\n3 1 5 2 4\n\n1 2 3 4 5\n\n6\n\n2 3 4 7 8 9\n\n1 2 3 6 7 8\n\n5\n\n21 22 25 28 20\n\n0 1 2 1 0\n\n6\n\n1 1 2 3 5 8\n\n0 0 1 1 0 0\n\n```\n\n#### Output #1\n\n```\n2\n31415926\n-1\n4\n-1\n```\n\n### Note\n\nIn the first test case, if $k\\ge 3$, then $2=a_3\\bmod k$ should be in the array $b$, which leads to a contradiction. For $k = 1$, $[a_1\\bmod k, a_2\\bmod k, a_3\\bmod k, a_4 \\bmod k] = [0,0,0,0]$, which cannot be shuffled to $b$. For $k = 2$, $[a_1\\bmod k, a_2\\bmod k, a_3\\bmod k, a_4 \\bmod k] = [1,1,0,1]$, which can be shuffled to $b$. Thus, the only possible answer is $k=2$.\n\nIn the second test case, note that $b$ can be obtained by shuffling $a$. Thus, all integers between $6$ and $10^9$ are possible answers.\n\nIn the third test case, it can be shown that such $k$ does not exist. Got fooled by Serval!", "cfid": "2085E"}
{"problem_id": "2085F2", "problem_title": "F2. Serval and Colorful Array (Hard Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2085/F2", "problem_statement": "This is the hard version of the problem. The difference between the versions is that in this version, $n\\le 4\\cdot 10^5$. You can hack only if you solved all versions of this problem.\n\nServal has a magic number $k$ ($k\\ge 2$). We call an array $r$ colorful if and only if:\n\n- The length of $r$ is $k$, and\n- Each integer between $1$ and $k$ appears exactly once in $r$.\n\nYou are given an array $a$ consisting of $n$ integers between $1$ and $k$. It is guaranteed that each integer between $1$ and $k$ appears in $a$ at least once. You can perform the following operation on $a$:\n\n- Choose an index $i$ ($1\\le i < n$), then swap $a_i$ and $a_{i+1}$.\n\nFind the minimum number of operations needed to make at least one subarray$^{\\text{∗}}$ of $a$ colorful. It can be shown that this is always possible under the constraints of the problem.\n\n$^{\\text{∗}}$An array $b$ is a subarray of an array $a$ if $b$ can be obtained from $a$ by the deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $k$ ($2\\leq k\\leq n\\leq 4\\cdot 10^5$) — the length of the array $a$ and Serval's magic number.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1\\leq a_i\\leq k$) — the elements of the array $a$. It is guaranteed that each integer between $1$ and $k$ appears in $a$ at least once.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $4\\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the minimum number of operations needed to make at least one subarray of $a$ colorful.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n3 2\n\n1 2 1\n\n7 3\n\n2 1 1 3 1 1 2\n\n6 3\n\n1 1 2 2 2 3\n\n6 3\n\n1 2 2 2 2 3\n\n10 5\n\n5 1 3 1 1 2 2 4 1 3\n\n9 4\n\n1 2 3 3 3 3 3 2 4\n\n```\n\n#### Output #1\n\n```\n0\n1\n2\n3\n4\n5\n```\n\n### Note\n\nIn the first test case, since the subarrays $[a_1, a_2] = [1, 2]$ and $[a_2, a_3] = [2, 1]$ are already colorful, we do not need to perform any operations. Thus, the answer is $0$.\n\nIn the second test case, we can swap $a_1$ and $a_2$ to obtain $[1, \\underline{2, 1, 3}, 1, 1, 2]$, which has a colorful subarray $[a_2, a_3, a_4] = [2, 1, 3]$. And the given array initially does not have any colorful subarrays, so the answer is $1$.", "cfid": "2085F2"}
{"problem_id": "2075E", "problem_title": "E. XOR Matrix", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2075/E", "problem_statement": "For two arrays $a = [a_1, a_2, \\dots, a_n]$ and $b = [b_1, b_2, \\dots, b_m]$, we define the XOR matrix $X$ of size $n \\times m$, where for each pair $(i,j)$ ($1 \\le i \\le n$; $1 \\le j \\le m$) it holds that $X_{i,j} = a_i \\oplus b_j$. The symbol $\\oplus$ denotes the bitwise XOR operation.\n\nYou are given four integers $n, m, A, B$. Count the number of such pairs of arrays $(a, b)$ such that:\n\n- $a$ consists of $n$ integers, each of which is from $0$ to $A$;\n- $b$ consists of $m$ integers, each of which is from $0$ to $B$;\n- in the XOR matrix formed from these arrays, there are no more than two distinct values.\n\n### Input\n\nThe first line contains one integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nEach test case consists of one line containing four integers $n, m, A, B$ ($2 \\le n, m, A, B \\le 2^{29} - 1$).\n\n### Output\n\nFor each test case, output one integer — the number of pairs of arrays $(a, b)$ that satisfy all three conditions. Since this number can be very large, output it modulo $998244353$.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n2 2 2 2\n\n2 3 4 5\n\n5 7 4 3\n\n1337 42 1337 42\n\n4 2 13 37\n\n536870902 536370902 536390912 466128231\n\n```\n\n#### Output #1\n\n```\n57\n864\n50360\n439988899\n112000\n732195491\n```", "cfid": "2075E"}
{"problem_id": "2075D", "problem_title": "D. Equalization", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2075/D", "problem_statement": "You are given two non-negative integers $x$ and $y$.\n\nYou can perform the following operation any number of times (possibly zero): choose a positive integer $k$ and divide either $x$ or $y$ by $2^k$ rounding down. The cost of this operation is $2^k$. However, there is an additional constraint: you cannot select the same value of $k$ more than once.\n\nYour task is to calculate the minimum possible cost in order to make $x$ equal to $y$.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^5$) — the number of test cases.\n\nThe only line of each test case contains two integers $x$ and $y$ ($0 \\le x, y \\le 10^{17}$).\n\n### Output\n\nFor each test case, print a single integer — the minimum possible cost in order to make $x$ equal to $y$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n0 1\n\n6 2\n\n3 3\n\n13 37\n\n4238659325782394 12983091057341925\n\n```\n\n#### Output #1\n\n```\n2\n6\n0\n26\n32764\n```\n\n### Note\n\nIn the first example, you can proceed as follows: choose $k=1$ and divide $y$ by $2$. After that, $x$ and $y$ are equal to $0$.\n\nIn the second example, you can proceed as follows: choose $k=2$ and divide $x$ by $4$; choose $k=1$ and divide $y$ by $2$. After that, $x$ and $y$ are equal to $1$.\n\nIn the third example, numbers already are equal.", "cfid": "2075D"}
{"problem_id": "2075F", "problem_title": "F. Beautiful Sequence Returns", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2075/F", "problem_statement": "Let's call an integer sequence beautiful if the following conditions hold:\n\n- for every element except the first one, there is an element to the left less than it;\n- for every element except the last one, there is an element to the right larger than it;\n\nFor example, $[1, 2]$, $[42]$, $[1, 4, 2, 4, 7]$, and $[1, 2, 4, 8]$ are beautiful, but $[2, 2, 4]$ and $[1, 3, 5, 3]$ are not.\n\nRecall that a subsequence is a sequence that can be obtained from another sequence by removing some elements (possibly zero) without changing the order of the remaining elements.\n\nYou are given an integer array $a$ of size $n$. Find the longest beautiful subsequence of the array $a$ and print its length.\n\n### Input\n\nThe first line contains one integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. Next, $t$ independent cases follow.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 5 \\cdot 10^5$) — the length of array $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^6$) – the array $a$.\n\nAdditional constraint on the input: the total sum of $n$ over all test cases doesn't exceed $5 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print one integer — the length of the longest beautiful subsequence of array $a$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n1\n\n42\n\n5\n\n1 2 3 4 5\n\n6\n\n6 5 4 3 2 1\n\n7\n\n1 1 3 4 2 3 4\n\n6\n\n2 3 1 1 2 4\n\n```\n\n#### Output #1\n\n```\n1\n5\n1\n5\n3\n```", "cfid": "2075F"}
{"problem_id": "2074F", "problem_title": "F. Counting Necessary Nodes", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2074/F", "problem_statement": "A quadtree is a tree data structure in which each node has at most four children and accounts for a square-shaped region.\n\nFormally, for all tuples of nonnegative integers $k,a,b \\ge 0$, there exists exactly one node accounting for the following region$^{\\text{∗}}$.\n\n\n\n$$[a \\cdot 2^k,(a+1) \\cdot 2^k] \\times [b \\cdot 2^k,(b+1) \\cdot 2^k]$$\n\nAll nodes whose region is larger than $1 \\times 1$ contain four children corresponding to the regions divided equally into four, and the nodes whose region is $1 \\times 1$ correspond to the leaf nodes of the tree.\n\n![](https://espresso.codeforces.com/4f8845f643b1cebe1c8c25d2bc7237887010f0bd.png)A small subset of the regions accounted for by the nodes is shown. The relatively darker regions are closer to leaf nodes.\n\nThe Frontman hates the widespread misconception, such that the quadtree can perform range queries in $\\mathcal{O}(\\log n)$ time when there are $n$ leaf nodes inside the region. In fact, sometimes it is necessary to query much more than $\\mathcal{O}(\\log n)$ regions for this, and the time complexity is $\\mathcal{O}(n)$ in some extreme cases. Thus, the Frontman came up with this task to educate you about this worst case of the data structure.\n\nThe pink soldiers have given you a finite region $[l_1,r_1] \\times [l_2,r_2]$, where $l_i$ and $r_i$ ($l_i < r_i$) are nonnegative integers. Please find the minimum number of nodes that you must choose in order to make the union of regions accounted for by the chosen nodes exactly the same as the given region. Here, two sets of points are considered different if there exists a point included in one but not in the other.\n\n$^{\\text{∗}}$Regions are sets of points with real coordinates, where the point $(x,y)$ is included in the region $[p,q] \\times [r,s]$ if and only if $p \\le x \\le q$ and $r \\le y \\le s$. Here, $\\times$ formally refers to [Cartesian product of sets](https://en.wikipedia.org/wiki/Cartesian_product).\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe only line of each test case contains four integers $l_1$, $r_1$, $l_2$, $r_2$ — the boundaries of the region in each axis ($0 \\le l_i < r_i \\le 10^6$).\n\n### Output\n\nFor each test case, output the minimum number of nodes necessary to satisfy the condition on a separate line.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n0 1 1 2\n\n0 2 0 2\n\n1 3 1 3\n\n0 2 1 5\n\n9 98 244 353\n\n```\n\n#### Output #1\n\n```\n1\n1\n4\n5\n374\n```\n\n### Note\n\nOn the first test case, the given region is $[0,1] \\times [1,2]$. There is one node accounting for $[0,1] \\times [1,2]$. Choosing this node, the answer is $1$.\n\nOn the second test case, the given region is $[0,2] \\times [0,2]$. There is one node accounting for $[0,2] \\times [0,2]$. Choosing this node, the answer is $1$.\n\nOn the third test case, the given region is $[1,3] \\times [1,3]$. There is no node that accounts for $[1,3] \\times [1,3]$. Instead, you can make the union of regions exactly the same as $[1,3] \\times [1,3]$ by choosing the following $4$ nodes:\n\n- A leaf node accounting for $[1,2] \\times [1,2]$;\n- A leaf node accounting for $[1,2] \\times [2,3]$;\n- A leaf node accounting for $[2,3] \\times [1,2]$;\n- A leaf node accounting for $[2,3] \\times [2,3]$.\n\nIt can be shown that it is impossible to make the union of regions exactly the same as $[1,3] \\times [1,3]$ with less than $4$ nodes. Therefore, the answer is $4$.\n\nOn the fourth test case, the given region is $[0,2] \\times [1,5]$. You can make the union of regions exactly the same as $[0,2] \\times [1,5]$ by choosing the following $5$ nodes:\n\n- A leaf node accounting for $[0,1] \\times [1,2]$;\n- A leaf node accounting for $[1,2] \\times [1,2]$;\n- A non-leaf node accounting for $[0,2] \\times [2,4]$;\n- A leaf node accounting for $[0,1] \\times [4,5]$;\n- A leaf node accounting for $[1,2] \\times [4,5]$.\n\nIt can be shown that it is impossible to make the union of regions exactly the same as $[0,2] \\times [1,5]$ with less than $5$ nodes. Therefore, the answer is $5$.", "cfid": "2074F"}
{"problem_id": "2074G", "problem_title": "G. Game With Triangles: Season 2", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2074/G", "problem_statement": "The Frontman greets you to this final round of the survival game.\n\nThere is a regular polygon with $n$ sides ($n \\ge 3$). The vertices are indexed as $1,2,\\ldots,n$ in clockwise order. On each vertex $i$, the pink soldiers have written a positive integer $a_i$. With this regular polygon, you will play a game defined as follows.\n\nInitially, your score is $0$. Then, you perform the following operation any number of times to increase your score.\n\n- Select $3$ different vertices $i$, $j$, $k$ that you have not chosen before, and draw the triangle formed by the three vertices.\n  - Then, your score increases by $a_i \\cdot a_j \\cdot a_k$.\n  - However, you can not perform this operation if the triangle shares a positive common area with any of the triangles drawn previously.\n\n![](https://espresso.codeforces.com/ff519219dea5f829a144af7b5e21e05171f1f551.png)An example of a state after two operations is on the left. The state on the right is impossible as the two triangles share a positive common area.\n\nYour objective is to maximize the score. Please find the maximum score you can get from this game.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ — the number of vertices ($3 \\le n \\le 400$).\n\nThe second line of each test case contains $a_1,a_2,\\ldots,a_n$ — the integers written on vertices ($1 \\le a_i \\le 1000$).\n\nIt is guaranteed that the sum of $n^3$ over all test cases does not exceed $400^3$.\n\n### Output\n\nFor each test case, output the maximum score you can get on a separate line.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n3\n\n1 2 3\n\n4\n\n2 1 3 4\n\n6\n\n2 1 2 1 1 1\n\n6\n\n1 2 1 3 1 5\n\n9\n\n9 9 8 2 4 4 3 5 3\n\n9\n\n9 9 3 2 4 4 8 5 3\n\n```\n\n#### Output #1\n\n```\n6\n24\n5\n30\n732\n696\n```\n\n### Note\n\nOn the first test case, you can draw only one triangle. The maximum score $6$ is found by drawing the triangle with $i=1$, $j=2$, $k=3$.\n\nOn the second test case, you can draw only one triangle. The maximum score $24$ is found by drawing the triangle with $i=1$, $j=3$, $k=4$.\n\nOn the third test case, you can draw two triangles. There is a series of two operations that leads to the score $5$, which is the maximum.\n\nOn the fourth test case, you can draw two triangles. However, drawing two triangles leads to a score of either $6+5=11$, $15+2=17$, or $10+3=13$. The maximum score $30$ is found by drawing only one triangle with $i=2$, $j=4$, $k=6$.\n\nOn the fifth test case, you can draw three triangles. The maximum score $732$ is found by drawing three triangles as follows.\n\n![](https://espresso.codeforces.com/4e37348c913d7d7c080ddf5c9de7e295628cfd17.png)", "cfid": "2074G"}
{"problem_id": "2077B", "problem_title": "B. Finding OR Sum", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2077/B", "problem_statement": "[ALTER EGO - Yuta Imai vs Qlarabelle](https://www.youtube.com/watch?v=LJEqM7pvClA)\n\nThis is an interactive problem.\n\nThere are two hidden non-negative integers $x$ and $y$ ($0 \\leq x, y < 2^{30}$). You can ask no more than $2$ queries of the following form.\n\n- Pick a non-negative integer $n$ ($0 \\leq n < 2^{30}$). The judge will respond with the value of $(n \\mathbin{|} x) + (n \\mathbin{|} y)$, where $|$ denotes the [bitwise OR operation](https://en.wikipedia.org/wiki/Bitwise_operation#OR).\n\nAfter this, the judge will give you another non-negative integer $m$ ($0 \\leq m < 2^{30}$). You must answer the correct value of $(m \\mathbin{|} x) + (m \\mathbin{|} y)$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\n### Interaction\n\nTwo hidden integers $x$ and $y$ are chosen ($0 \\leq x, y < 2^{30}$). Note that $x$ and $y$ might be different for different test cases.\n\nThe interactor in this task is not adaptive. In other words, the integers $x$ and $y$ do not change during the interaction.\n\nTo ask a query, pick an integer $n$ ($0 \\leq n < 2^{30}$) and print only the integer $n$ to a line.\n\nYou will receive a single integer, the value of $(n \\mathbin{|} x) + (n \\mathbin{|} y)$.\n\nYou may make no more than $2$ queries of the following form.\n\nAfter you finish your queries, output \"!\" in a line. You will receive an integer $m$ ($0 \\leq m < 2^{30}$). Note that the value of $m$ is also fixed before interaction.\n\nYou must output only the value of $(m \\mathbin{|} x) + (m \\mathbin{|} y)$ in a line. Note that this line is not considered a query and is not taken into account when counting the number of queries asked.\n\nAfter this, proceed to the next test case.\n\nIf you make more than $2$ queries during an interaction, your program must terminate immediately, and you will receive the Wrong Answer verdict. Otherwise, you can get an arbitrary verdict because your solution will continue to read from a closed stream.\n\nAfter printing a query do not forget to output the end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- flush(output) in Pascal;\n- stdout.flush() in Python;\n- see the documentation for other languages.\n\nHacks\n\nTo hack, follow the test format below.\n\nThe first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first and only line of each test case contains a single line with three integers $x, y, m$ ($0 \\leq x, y, m < 2^{30}$).\n\n### Example\n\n#### Input #1\n\n```\n2\n\n3\n\n4\n\n1\n\n0\n\n1```\n\n#### Output #1\n\n```\n\n0\n\n1\n\n!\n\n4\n\n0\n\n!\n\n2```\n\n### Note\n\nIn the first test, the interaction proceeds as follows.\n\nSolutionJuryExplanation$\\texttt{2}$There are 2 test cases.$\\texttt{}$In the first test case, $x=1$ and $y=2$.$\\texttt{0}\n\n$$\\texttt{3}$The solution requests $(0 \\mathbin{|} 1) + (0 \\mathbin{|} 2)$, and the jury responds with $3$.$\\texttt{1}$$\n\ntexttt{4}$The solution requests $(1 \\mathbin{|} 1) + (1 \\mathbin{|} 2)$, and the jury responds with $4$.$\\texttt{!}\n\n$$\\texttt{1}$The solution requests the value of $m$, and the jury responds with $1$.$\\texttt{4}$The solution knows that $(1 \\mathbin{|} x) + (1 \\mathbin{|} y)=4$ because of earlier queries.$\\texttt{}$In the second test case, $x=0$ and $y=0$.$\\texttt{0}$$\n\ntexttt{0}$The solution requests $(0 \\mathbin{|} 0) + (0 \\mathbin{|} 0)$, and the jury responds with $0$.$\\texttt{!}$$\\texttt{1}$The solution requests the value of $m$, and the jury responds with $1$.$\\texttt{2}$The solution somehow deduces that $x=y=0$, so it responds with $(1 \\mathbin{|} 0) + (1 \\mathbin{|} 0)=2$.\n\nNote that the empty lines in the example input and output are for the sake of clarity and do not occur in the real interaction.", "cfid": "2077B"}
{"problem_id": "2077C", "problem_title": "C. Binary Subsequence Value Sum", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2077/C", "problem_statement": "[Last \\| Moment - onoken](https://www.youtube.com/watch?v=l_fXX3Y0Pis)\n\nFor a binary string$^{\\text{∗}}$ $v$, the score of $v$ is defined as the maximum value of\n\n\n\n$$F\\big(v, 1, i\\big) \\cdot F\\big(v, i+1, |v|\\big)$$\n\nover all $i$ ($0 \\leq i \\leq |v|$).\n\nHere, $F\\big(v, l, r\\big) = r - l + 1 - 2 \\cdot \\operatorname{zero}(v, l, r)$, where $\\operatorname{zero}(v, l, r)$ denotes the number of $\\mathtt{0}$s in $v_lv_{l+1} \\ldots v_r$. If $l > r$, then $F\\big(v, l, r\\big) = 0$.\n\nYou are given a binary string $s$ of length $n$ and a positive integer $q$.\n\nYou will be asked $q$ queries.\n\nIn each query, you are given an integer $i$ ($1 \\leq i \\leq n$). You must flip $s_i$ from $\\mathtt{0}$ to $\\mathtt{1}$ (or from $\\mathtt{1}$ to $\\mathtt{0}$). Find the sum of the scores over all non-empty subsequences$^{\\text{†}}$ of $s$ after each modification query.\n\nSince the result may be large, output the answer modulo $998\\,244\\,353$.\n\nNote that the modifications are persistent.\n\n$^{\\text{∗}}$A binary string is a string that consists only of the characters $\\mathtt{0}$ and $\\mathtt{1}$.\n\n$^{\\text{†}}$A binary string $x$ is a subsequence of a binary string $y$ if $x$ can be obtained from $y$ by deleting several (possibly zero or all) characters.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $q$ ($1 \\leq n \\leq 2 \\cdot 10^5$, $1 \\leq q \\leq 2 \\cdot 10^5$) — the length of the string $s$ and the number of modification queries, respectively.\n\nThe second line contains the binary string $s$ of length $n$, consisting of characters $\\mathtt{0}$ and $\\mathtt{1}$.\n\nThe following $q$ lines each contain an integer $i$ ($1 \\leq i \\leq n$), indicating that $s_i$ is flipped from $\\mathtt{0}$ to $\\mathtt{1}$ or from $\\mathtt{1}$ to $\\mathtt{0}$.\n\nIt is guaranteed that neither the total sum of all values of $n$ nor the total sum of all values of $q$ across all test cases exceeds $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output $q$ lines, each line containing a single integer — the required sum modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3 2\n\n010\n\n1\n\n3\n\n10 3\n\n0101000110\n\n3\n\n5\n\n10\n\n24 1\n\n011001100110000101111000\n\n24\n\n```\n\n#### Output #1\n\n```\n1\n5\n512\n768\n1536\n23068672\n```\n\n### Note\n\nFor the first test case, after the first modification, we have $s = \\texttt{110}$. We can compute the sum of scores over all subsequences as follows:\n\nIndicesSubsequenceScore$1$1$0\n\n$$2$1$0$$\n\n1, 2$11$1\n\n$$3$0$0$$\n\n1, 3$10$0\n\n$$2, 3$10$0$$\n\n1, 2, 3$110$0$\n\nSumming up: $0+0+1+0+0+0+0 = 1$.\n\nAfter the second modification, we have $s = \\texttt{111}$. We can compute the sum of scores over all subsequences as follows:\n\nIndicesSubsequenceScore$1$1$0\n\n$$2$1$0$$\n\n1, 2$11$1\n\n$$3$1$0$$\n\n1, 3$11$1\n\n$$2, 3$11$1$$\n\n1, 2, 3$111$2$\n\nSumming up: $0+0+1+0+1+1+2 = 5$.", "cfid": "2077C"}
{"problem_id": "2077E", "problem_title": "E. Another Folding Strip", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2077/E", "problem_statement": "For an array $b$ of length $m$, define $f(b)$ as follows.\n\nConsider a $1 \\times m$ strip, where all cells initially have darkness $0$. You want to transform it into a strip where the color at the $i$-th position has darkness $b_i$. You can perform the following operation, which consists of two steps:\n\n1. Fold the paper at any line between two cells. You may fold as many times as you like, or choose not to fold at all.\n2. Choose one position to drop the black dye. The dye permeates from the top and flows down to the bottom, increasing the darkness of all cells in its path by $1$. After dropping the dye, you unfold the strip.\n\nLet $f(b)$ be the minimum number of operations required to achieve the desired configuration. It can be proven that the goal can always be achieved in a finite number of operations.\n\nYou are given an array $a$ of length $n$. Evaluate\n\n\n\n$$\\sum_{l=1}^n\\sum_{r=l}^n f(a_l a_{l+1} \\ldots a_r)$$\n\nmodulo $998\\,244\\,353$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\leq n \\leq 2 \\cdot 10^5$) — the length of the array $a$.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\leq a_i \\leq 10^9$) — denoting the array $a$.\n\nIt is guaranteed that the sum of all values of $n$ across all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the required sum modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3\n\n0 1 0\n\n6\n\n1 0 0 1 2 1\n\n5\n\n2 1 2 4 3\n\n12\n\n76 55 12 32 11 45 9 63 88 83 32 6\n\n```\n\n#### Output #1\n\n```\n4\n28\n47\n7001\n```\n\n### Note\n\nIn the first test case,\n\n- $f(a_1)=f(\\mathtt{0})=0$\n- $f(a_1a_2)=f(\\mathtt{01})=1$\n- $f(a_1a_2a_3)=f(\\mathtt{010})=1$\n- $f(a_2)=f(\\mathtt{1})=1$\n- $f(a_2a_3)=f(\\mathtt{10})=1$\n- $f(a_3)=f(\\mathtt{0})=0$\n\nThis sums up to $0+1+1+1+1+0 = 4$\n\nIn the second test case, $f(a_1a_2a_3a_4a_5a_6) = 2$. Here's one possible sequence of operations.\n\n![](https://espresso.codeforces.com/7e858937391c04751be3558a4470a2f30d2bd683.png)", "cfid": "2077E"}
{"problem_id": "2071D2", "problem_title": "D2. Infinite Sequence (Hard Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2071/D2", "problem_statement": "This is the hard version of the problem. The difference between the versions is that in this version, $l\\le r$. You can hack only if you solved all versions of this problem.\n\nYou are given a positive integer $n$ and the first $n$ terms of an infinite binary sequence $a$, which is defined as follows:\n\n- For $m>n$, $a\\_m = a\\_1 \\\\oplus a\\_2 \\\\oplus \\\\ldots \\\\oplus a\\_{\\\\lfloor \\\\frac{m}{2} \\\\rfloor}$$^{\\\\text{∗}}$.\n\nYour task is to compute the sum of elements in a given range $[l, r]$: $a_l + a_{l + 1} + \\ldots + a_r$.\n\n$^{\\\\text{∗}}$$\\\\oplus$ denotes the bitwise XOR operation.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n$, $l$, and $r$ ($1 \\le n \\le 2 \\cdot 10^5$, $1 \\le l \\leq r \\le 10^{18}$).\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($\\color{red}{a_i \\in \\{0, 1\\}}$) — the first $n$ terms of the sequence $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the sum of elements in the given range.\n\n### Example\n\n#### Input #1\n\n```\n\n9\n\n1 1 1\n\n1\n\n2 3 10\n\n1 0\n\n3 5 25\n\n1 1 1\n\n1 234 567\n\n0\n\n5 1111 10000000000\n\n1 0 1 0 1\n\n1 1000000000000000000 1000000000000000000\n\n1\n\n10 41 87\n\n0 1 1 1 1 1 1 1 0 0\n\n12 65 69\n\n1 0 0 0 0 1 0 1 0 1 1 0\n\n13 46 54\n\n0 1 0 1 1 1 1 1 1 0 1 1 1\n\n```\n\n#### Output #1\n\n```\n1\n5\n14\n0\n6666665925\n0\n32\n3\n2\n```\n\n### Note\n\nIn the first test case, the sequence $a$ is equal to \n\n$$[\\underline{\\color{red}{1}}, 1, 1, 0, 0, 1, 1, 1, 1, 1, \\ldots]$$\n\nwhere $l = 1$, and $r = 1$. The sum of elements in the range $\\[1, 1\\]$ is equal to \n\n$$a_1 = 1.$$\n\nIn the second test case, the sequence $a$ is equal to \n\n$$[\\color{red}{1}, \\color{red}{0}, \\underline{1, 1, 1, 0, 0, 1, 1, 0}, \\ldots]$$\n\nwhere $l = 3$, and $r = 10$. The sum of elements in the range $\\[3, 10\\]$ is equal to \n\n$$a_3 + a_4 + \\ldots + a_{10} = 1 + 1 + 1 + 0 + 0 + 1 + 1 + 0 = 5.$$\n\n", "cfid": "2071D2"}
{"problem_id": "2071F", "problem_title": "F. Towering Arrays", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2071/F", "problem_statement": "An array $b = [b_1, b_2, \\ldots, b_m]$ of length $m$ is called $p$-towering if there exists an index $i$ ($1\\\\le i\\\\le m$) such that for every index $j$ ($1 \\\\le j \\\\le m$), the following condition holds: \n\n$$b_j \\ge p - |i - j|.$$\n\nGiven an array $a = [a_1, a_2, \\ldots, a_n]$ of length $n$, you can remove at most $k$ elements from it. Determine the maximum value of $p$ for which the remaining array can be made $p$-towering.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $k$ ($0 \\le k < n \\le 2 \\cdot 10^5$).\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the maximum value of $p$ for which the remaining array can be made $p$-towering.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n5 0\n\n2 1 4 5 2\n\n5 3\n\n2 1 4 5 2\n\n6 1\n\n1 2 3 4 5 1\n\n11 6\n\n6 3 8 5 8 3 2 1 2 7 1\n\n14 3\n\n3 2 3 5 5 2 6 7 4 8 10 1 8 9\n\n2 0\n\n1 1\n\n```\n\n#### Output #1\n\n```\n3\n5\n5\n7\n9\n1\n```\n\n### Note\n\nIn the first test case, you cannot delete any element. The array remains $[2, 1, 4, \\color{red}{5}, 2]$ and is p-towering for $p = 3$ by picking $i = 4$:\n\n- $a_1 = 2 \\ge p - |i - 1| = 3 - |4 - 1| = 0$;\n- $a_2 = 1 \\ge p - |i - 2| = 3 - |4 - 2| = 1$;\n- $a_3 = 4 \\ge p - |i - 3| = 3 - |4 - 3| = 2$;\n- $a_4 = 5 \\ge p - |i - 4| = 3 - |4 - 4| = 3$;\n- $a_5 = 2 \\ge p - |i - 5| = 3 - |4 - 5| = 2$.\n\nIn the second test case, you can remove the first, second, and fifth elements to obtain the array $[4, \\color{red}{5}]$. Clearly, the obtained array is p-towering for $p = 5$ by picking $i = 2$.", "cfid": "2071F"}
{"problem_id": "2071E", "problem_title": "E. LeaFall", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2071/E", "problem_statement": "You are given a tree$^{\\text{∗}}$ with $n$ vertices. Over time, each vertex $i$ ($1 \\le i \\le n$) has a probability of $\\frac{p_i}{q_i}$ of falling. Determine the expected value of the number of unordered pairs$^{\\text{†}}$ of distinct vertices that become leaves$^{\\text{‡}}$ in the resulting forest$^{\\text{§}}$, modulo $998\\,244\\,353$.\n\nNote that when vertex $v$ falls, it is removed along with all edges connected to it. However, adjacent vertices remain unaffected by the fall of $v$.\n\n$^{\\text{∗}}$A tree is a connected graph without cycles.\n\n$^{\\text{†}}$An unordered pair is a collection of two elements where the order in which the elements appear does not matter. For example, the unordered pair $(1, 2)$ is considered the same as $(2, 1)$.\n\n$^{\\text{‡}}$A leaf is a vertex that is connected to exactly one edge.\n\n$^{\\text{§}}$A forest is a graph without cycles\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 10^5$).\n\nThe $i$-th line of the following $n$ lines contains two integers $p_i$ and $q_i$ ($1 \\le p_i < q_i < 998\\,244\\,353$).\n\nEach of the following $n - 1$ lines contains two integers $u$ and $v$ ($1 \\le u, v \\le n$, $u \\neq v$) — the indices of the vertices connected by an edge.\n\nIt is guaranteed that the given edges form a tree.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, output a single integer — the expected value of the number of unordered pairs of distinct vertices that become leaves in the resulting forest modulo $998\\,244\\,353$.\n\nFormally, let $M = 998\\,244\\,353$. It can be shown that the exact answer can be expressed as an irreducible fraction $\\frac{p}{q}$, where $p$ and $q$ are integers and $q \\not \\equiv 0 \\pmod{M}$. Output the integer equal to $p \\cdot q^{-1} \\bmod M$. In other words, output such an integer $x$ that $0 \\le x < M$ and $x \\cdot q \\equiv p \\pmod{M}$.\n\n### Examples\n\n#### Input #1\n\n```\n\n5\n\n1\n\n1 2\n\n3\n\n1 2\n\n1 2\n\n1 2\n\n1 2\n\n2 3\n\n3\n\n1 3\n\n1 5\n\n1 3\n\n1 2\n\n2 3\n\n1\n\n998244351 998244352\n\n6\n\n10 17\n\n7 13\n\n6 11\n\n2 10\n\n10 19\n\n5 13\n\n4 3\n\n3 6\n\n1 4\n\n3 5\n\n3 2\n\n```\n\n#### Output #1\n\n```\n0\n623902721\n244015287\n0\n799215919\n```\n\n#### Input #2\n\n```\n\n1\n\n10\n\n282508078 551568452\n\n894311255 989959022\n\n893400641 913415297\n\n460925436 801908985\n\n94460427 171411253\n\n997964895 998217862\n\n770266391 885105593\n\n591419316 976424827\n\n606447024 863339056\n\n940224886 994244553\n\n9 5\n\n9 6\n\n9 8\n\n8 7\n\n3 6\n\n1 5\n\n7 4\n\n8 10\n\n4 2\n\n```\n\n#### Output #2\n\n```\n486341067\n```\n\n### Note\n\nIn the first test case, only one vertex is in the tree, which is not a leaf, so the answer is $0$.\n\nIn the second test case, the tree is shown below.\n\n![](https://espresso.codeforces.com/9b426d5475e2fee4907b1e7338b4334f54af90cb.png)\n\nVertices that have not fallen are denoted in bold. Let us examine the following three cases:\n\n![](https://espresso.codeforces.com/9b40ca8f13ed11e12e6e3d8e059804452ec32139.png)We arrive at this configuration with a probability of $\\left( \\frac{1}{2} \\right) ^3$, where the only unordered pair of distinct leaf vertices is $(2, 3)$.![](https://espresso.codeforces.com/083f0c9b83880b52a1480065864772b47b3f9a0a.png)We arrive at this configuration with a probability of $\\left( \\frac{1}{2} \\right) ^3$, where the only unordered pair of distinct leaf vertices is $(2, 1)$.![](https://espresso.codeforces.com/99f29f0761292ed246a7a79eb3b9f64daf3be141.png)We arrive at this configuration with a probability of $\\left( \\frac{1}{2} \\right) ^3$, where the only unordered pair of distinct leaf vertices is $(1, 3)$.\n\nAll remaining cases contain no unordered pairs of distinct leaf vertices. Hence, the answer is $\\frac{1 + 1 + 1}{8} = \\frac{3}{8}$, which is equal to $623\\,902\\,721$ modulo $998\\,244\\,353$.", "cfid": "2071E"}
{"problem_id": "2070F", "problem_title": "F. Friends and Pizza", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2070/F", "problem_statement": "Monocarp has $n$ pizzas, the $i$-th pizza consists of $a_i$ slices. Pizzas are denoted by uppercase Latin letters from A to the $n$-th letter of the Latin alphabet.\n\nMonocarp also has $m$ friends, and he wants to invite exactly two of them to eat pizza. For each friend, Monocarp knows which pizzas that friend likes.\n\nAfter the friends arrive at Monocarp's house, for each pizza, the following happens:\n\n- if the pizza is not liked by any of the two invited friends, Monocarp eats it;\n- if the pizza is liked by exactly one of the two invited friends, that friend eats it;\n- and if the pizza is liked by both friends, they try to split it. If it consists of an even number of slices, they both eat exactly half of the slices. But if the pizza consists of an odd number of slices, they start quarrelling, trying to decide who will eat an extra slice — and Monocarp doesn't like that.\n\nFor each $k$ from $0$ to $\\sum a_i$, calculate the number of ways to choose exactly two friends to invite so that the friends don't quarrel, and Monocarp eats exactly $k$ slices.\n\n### Input\n\nThe first line contains two integers $n$ and $m$ ($1 \\le n \\le 20$; $2 \\le m \\le 5 \\cdot 10^5$) — the number of pizzas and the number of friends, respectively.\n\nThe second line contains $m$ strings $s_1, s_2, \\dots, s_m$ ($1 \\le |s_i| \\le n$), where $s_i$ is a string consisting of distinct characters from A to the $n$-th letter of the Latin alphabet, denoting which pizzas the $i$-th friend likes. In every string $s_i$, the characters are sorted in lexicographical (alphabetic) order.\n\nThe third line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 2 \\cdot 10^4$) — the sizes of the pizzas.\n\n### Output\n\nPrint $\\sum a_i + 1$ integers, where the $k$-th integer (starting from $0$) should be the number of ways to choose exactly two friends to invite so that the friends don't quarrel, and Monocarp eats exactly $k$ slices.\n\n### Example\n\n#### Input #1\n\n```\n\n3 6\n\nA AB ABC AB BC C\n\n2 3 5\n\n```\n\n#### Output #1\n\n```\n4 0 0 1 0 2 0 0 0 0 0\n```\n\n### Note\n\nLet's consider all pairs of friends from the first example:\n\n- if Monocarp invites friends $1$ and $2$, they will eat pizzas $1$ and $2$, and he'll eat the $3$-rd pizza;\n- if Monocarp invites friends $1$ and $3$, they will eat all of the pizzas;\n- if Monocarp invites friends $1$ and $4$, they will eat pizzas $1$ and $2$, and he'll eat the $3$-rd pizza;\n- if Monocarp invites friends $1$ and $5$, they will eat all of the pizzas;\n- if Monocarp invites friends $1$ and $6$, they will eat pizzas $1$ and $3$, and he'll eat the $2$-nd pizza;\n- if Monocarp invites friends $2$ and $3$, they will quarrel because of the $2$-nd pizza;\n- if Monocarp invites friends $2$ and $4$, they will quarrel because of the $2$-nd pizza;\n- if Monocarp invites friends $2$ and $5$, they will quarrel because of the $2$-nd pizza;\n- if Monocarp invites friends $2$ and $6$, they will eat all of the pizzas;\n- if Monocarp invites friends $3$ and $4$, they will quarrel because of the $2$-nd pizza;\n- if Monocarp invites friends $3$ and $5$, they will quarrel because of the $2$-nd pizza;\n- if Monocarp invites friends $3$ and $6$, they will quarrel because of the $3$-rd pizza;\n- if Monocarp invites friends $4$ and $5$, they will quarrel because of the $2$-nd pizza;\n- if Monocarp invites friends $4$ and $6$, they will eat all of the pizzas;\n- if Monocarp invites friends $5$ and $6$, they will quarrel because of the $3$-rd pizza.", "cfid": "2070F"}
{"problem_id": "2070E", "problem_title": "E. Game with Binary String", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2070/E", "problem_statement": "Consider the following game. Two players have a binary string (a string consisting of characters 0 and/or 1). The players take turns, the first player makes the first turn. During a player's turn, he or she has to choose exactly two adjacent elements of the string and remove them (the first element and the last element are also considered adjacent). Furthermore, there are additional constraints depending on who makes the move:\n\n- if it's the first player's move, both chosen characters should be 0;\n- if it's the second player's move, at least one of the chosen characters should be 1.\n\nThe player who can't make a valid move loses the game. This also means that if the string currently has less than $2$ characters, the current player loses the game.\n\nYou are given a binary string $s$ of length $n$. You have to calculate the number of its substrings such that, if the game is played on that substring and both players make optimal decisions, the first player wins. In other words, calculate the number of pairs $(l, r)$ such that $1 \\le l \\le r \\le n$ and the first player has a winning strategy on the string $s_l s_{l+1} \\dots s_r$.\n\n### Input\n\nThe first line contains one integer $n$ ($1 \\le n \\le 3 \\cdot 10^5$).\n\nThe second line contains the string $s$, consisting of exactly $n$ characters. Each character of the string is either 0 or 1.\n\n### Output\n\nPrint one integer — the number of substrings such that, if the game is played on that substring, the first player wins.\n\n### Example\n\n#### Input #1\n\n```\n\n10\n\n0010010011\n\n```\n\n#### Output #1\n\n```\n12\n```\n\n### Note\n\nIn the first example, the following substrings are winning for the first player ($s[l:r]$ denotes $s_l s_{l+1} \\dots s_r$):\n\n- $s[1:2]$;\n- $s[1:3]$;\n- $s[1:7]$;\n- $s[2:4]$;\n- $s[2:8]$;\n- $s[3:5]$;\n- $s[4:5]$;\n- $s[4:6]$;\n- $s[5:7]$;\n- $s[6:8]$;\n- $s[7:8]$;\n- $s[7:9]$.", "cfid": "2070E"}
{"problem_id": "2072G", "problem_title": "G. I've Been Flipping Numbers for 300 Years and Calculated the Sum", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2072/G", "problem_statement": "After three hundred years of slime farming, Akito finally obtained the magical number $n$. Upon reaching the merchant, he wanted to exchange the number for gold, but the merchant gave the hero a quest.\n\nThe merchant said that for the quest, the skill $\\text{rev}(n, p)$ would be required, which Akito, by happy coincidence, had recently learned. $\\text{rev}(n, p)$ represents the following procedure:\n\n1. Write the number $n$ in base $p$, let this representation be $n = \\overline{n_{\\ell - 1} \\ldots n_1 n_0}$, where $\\ell$ is the length of the base $p$ representation of the number $n$.\n2. Reverse the base $p$ representation, let this be $m = \\overline{n_0 n_1 \\ldots n_{\\ell - 1}}$.\n3. Convert the number $m$ back to decimal and return it as the result.\n\nThe merchant's quest was to calculate the sum $x = \\sum\\limits_{p = 2}^{k} \\text{rev}(n, p)$. Since this number can be quite large, only the remainder of $x$ when divided by $10^9 + 7$ is required. The merchant also mentioned that the previous traveler had been calculating this sum for three hundred years and had not finished it. But you will help Akito finish it faster, right?\n\n### Input\n\nThe first line contains the number $t$ ($1 \\le t \\le 5000$) — the number of test cases.\n\nIn the only line of each test case, two numbers $n$ and $k$ are given ($1 \\le n \\le 3 \\cdot 10^5, 2 \\le k \\le 10^{18}$) — the magical number and the upper limit for summation.\n\nNote that the sum of $n$ across all test cases is not bounded.\n\n### Output\n\nFor each test case, you need to output a single number — the remainder of $x = \\sum\\limits_{p = 2}^{k} \\text{rev}(n, p)$ when divided by $10^9 + 7$.\n\n### Example\n\n#### Input #1\n\n```\n\n12\n\n3 2\n\n42 52\n\n1 10\n\n4 4\n\n16 2\n\n69 69\n\n9 3\n\n19 84\n\n9982 44353\n\n100000 1000000007\n\n17 30\n\n777 1000000000000000000\n\n```\n\n#### Output #1\n\n```\n3\n7594\n9\n6\n1\n33471\n10\n2006\n120792461\n584502117\n775\n46058362\n```\n\n### Note\n\nIn the third test case, $n = 1$. The number one in any numeral system is represented by a single digit, which means $\\text{rev}(1, p) = 1$ for any $p \\ge 2$. Thus, $x = \\sum\\limits_{p = 2}^{k} 1 = \\sum\\limits_{p = 2}^{10} 1 = 10 - 2 + 1 = 9$.\n\nIn the fourth test case, $x = \\text{rev}(4, 2) + \\text{rev}(4, 3) + \\text{rev}(4, 4)$. Let's calculate each term:\n\n- $4 = 100_2 \\rightarrow \\text{rev}(4, 2) = 001_2 = 1$\n- $4 = 11_3 \\rightarrow \\text{rev}(4, 3) = 11_3 = 4$\n- $4 = 10_4 \\rightarrow \\text{rev}(4, 4) = 01_4 = 1$\n\nThus, $x = 1 + 4 + 1 = 6$.\n\nIn the seventh test case, $x = \\text{rev}(9, 2) + \\text{rev}(9, 3)$. Let's calculate each term:\n\n- $9 = 1001_2 \\rightarrow \\text{rev}(9, 2) = 1001_2 = 9$\n- $9 = 100_3 \\rightarrow \\text{rev}(9, 3) = 001_3 = 1$\n\nThus, $x = 9 + 1 = 10$.", "cfid": "2072G"}
{"problem_id": "2069E", "problem_title": "E. A, B, AB and BA", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2069/E", "problem_statement": "You are given a string $s$ consisting of characters A and B.\n\nYour task is to split it into blocks of length $1$ and $2$ in such a way that\n\n- there are no more than $a$ strings equal to \"A\";\n- there are no more than $b$ strings equal to \"B\";\n- there are no more than $ab$ strings \"AB\";\n- there are no more than $ba$ strings \"BA\";\n\nStrings \"AA\" and \"BB\" are prohibited. Each character of the initial string $s$ should belong to exactly one block.\n\n### Input\n\nThe first line contains one integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. Next, $t$ independent cases follow.\n\nThe first line of each test case contains a single string $s$ ($1 \\le |s| \\le 5 \\cdot 10^5$) consisting only of characters A and/or B.\n\nThe second line of each test case contains four integers $a$, $b$, $ab$, and $ba$ ($0 \\le a, b, ab, ba \\le 5 \\cdot 10^5$) — the maximum allowed number of strings \"A\", \"B\", \"AB\", and \"BA\" correspondingly.\n\nIt's guaranteed that the total length of $s$ doesn't exceed $5 \\cdot 10^5$ over all test cases.\n\n### Output\n\nFor each test case, print YES if it's possible to split string $s$. Otherwise, print NO.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\nA\n\n0 0 10 10\n\nB\n\n0 1 0 0\n\nABA\n\n0 0 1 1\n\nABBABAAB\n\n5 5 0 0\n\nABABBAABBAAB\n\n1 1 2 3\n\nABBBBAB\n\n0 3 2 0\n\nBAABBA\n\n1 3 2 0\n\n```\n\n#### Output #1\n\n```\nNO\nYES\nNO\nYES\nYES\nYES\nNO\n```\n\n### Note\n\nIn the third test case, all possible splits are: A\\|B\\|A, AB\\|A or A\\|BA. All of them have at least one \"A\".\n\nIn the fourth test case, one of the possible splits is the following: A\\|B\\|B\\|A\\|B\\|A\\|A\\|B.\n\nIn the fifth test case, one of the possible splits is the following: A\\|BA\\|B\\|BA\\|AB\\|BA\\|AB.", "cfid": "2069E"}
{"problem_id": "2069F", "problem_title": "F. Graph Inclusion", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2069/F", "problem_statement": "A connected component of an undirected graph is defined as a set of vertices $S$ of this graph such that:\n\n- for every pair of vertices $(u, v)$ in $S$, there exists a path between vertices $u$ and $v$;\n- there is no vertex outside $S$ that has a path to a vertex within $S$.\n\nFor example, the graph in the picture below has three components: $\\{1, 3, 7, 8\\}$, $\\{2\\}$, $\\{4, 5, 6\\}$.\n\n![](https://espresso.codeforces.com/7715b47246248fe80ce09cff1f675d0918eda77e.png)\n\nWe say that graph $A$ includes graph $B$ if every component of graph $B$ is a subset of some component of graph $A$.\n\nYou are given two graphs, $A$ and $B$, both consisting of $n$ vertices numbered from $1$ to $n$. Initially, there are no edges in the graphs. You must process queries of two types:\n\n- add an edge to one of the graphs;\n- remove an edge from one of the graphs.\n\nAfter each query, you have to calculate the minimum number of edges that have to be added to $A$ so that $A$ includes $B$, and print it. Note that you don't actually add these edges, you just calculate their number.\n\n### Input\n\nThe first line contains two integers $n$ and $q$ ($2 \\le n \\le 4 \\cdot 10^5$; $1 \\le q \\le 4 \\cdot 10^5$) — the number of vertices and queries, respectively.\n\nNext, there are $q$ lines, where the $i$-th line describes the $i$-th query. The description of the query begins with the character $c_i$ (either A or B) — the graph to which the query should be applied. Then, two integers $x_i$ and $y_i$ follow ($1 \\le x_i, y_i \\le n$; $x_i \\ne y_i$). If there is an edge $(x_i, y_i)$ in the corresponding graph, it should be removed; otherwise, it should be added to that graph.\n\n### Output\n\nFor each query, print one integer — the minimum number of edges that you have to add to the graph $A$ so that it includes $B$.\n\n### Example\n\n#### Input #1\n\n```\n\n6 9\n\nA 2 3\n\nB 1 3\n\nA 2 1\n\nA 3 2\n\nB 5 6\n\nA 6 5\n\nA 3 4\n\nA 4 2\n\nA 4 3\n\n```\n\n#### Output #1\n\n```\n0\n1\n0\n1\n2\n1\n1\n0\n1\n```", "cfid": "2069F"}
{"problem_id": "2064D", "problem_title": "D. Eating", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2064/D", "problem_statement": "There are $n$ slimes on a line, the $i$-th of which has weight $w\\_i$. Slime $i$ is able to eat another slime $j$ if $w\\_i \\\\geq w\\_j$; afterwards, slime $j$ disappears and the weight of slime $i$ becomes $w\\_i \\\\oplus w\\_j$$^{\\\\text{∗}}$.\n\nThe King of Slimes wants to run an experiment with parameter $x$ as follows:\n\n- Add a new slime with weight $x$ to the right end of the line (after the $n$-th slime).\n- This new slime eats the slime to its left if it is able to, and then takes its place (moves one place to the left). It will continue to do this until there is either no slime to its left or the weight of the slime to its left is greater than its own weight. (No other slimes are eaten during this process.)\n- The score of this experiment is the total number of slimes eaten.\n\nThe King of Slimes is going to ask you $q$ queries. In each query, you will be given an integer $x$, and you need to determine the score of the experiment with parameter $x$.\n\nNote that the King does not want you to actually perform each experiment; his slimes would die, which is not ideal. He is only asking what the hypothetical score is; in other words, the queries are not persistent.\n\n$^{\\text{∗}}$Here $\\oplus$ denotes the [bitwise XOR operation](https://en.wikipedia.org/wiki/Bitwise_operation#XOR).\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each test case contains integers $n$ and $q$ ($1 \\le n, q \\le 2 \\cdot 10^5$) — the number of slimes and the number of queries, respectively.\n\nThe following line contains $n$ integers $w_1,w_2,\\ldots,w_n$ ($1 \\le w_i < 2^{30}$) — the weights of the slimes.\n\nThe following $q$ lines contain a single integer $x$ ($ 1 \\le x < 2^{30}$) — the parameter for the experiment.\n\nThe sum of $n$ does not exceed $2 \\cdot 10^5$ and the sum of $q$ does not exceed $2 \\cdot 10^5$ across all test cases.\n\n### Output\n\nFor each query, output a single integer — the score of the experiment.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n1 1\n\n5\n\n6\n\n4 4\n\n1 5 4 11\n\n8\n\n13\n\n16\n\n15\n\n10 9\n\n10 4 3 9 7 4 6 1 9 4\n\n2\n\n6\n\n5\n\n6\n\n9\n\n8\n\n6\n\n2\n\n7\n\n```\n\n#### Output #1\n\n```\n1\n0 2 4 2\n0 1 1 1 3 3 1 0 1\n```\n\n### Note\n\nFor the first query of the second testcase:\n\n- A slime of weight $8$ would be added to the end, so $w = [1, 5, 4, 11, \\color{red}8]$.\n- The added slime has smaller weight than the slime to its left so it cannot eat it, and thus ends the process after eating no slimes with score $0$.\n\nFor the second query of the second testcase:\n\n- A slime of weight $13$ would be added to the end, so $w = [1, 5, 4, 11, \\color{red}{13}]$.\n- The added slime has bigger weight than the slime to its left, and so it will eat it. Its weight will become $13 \\oplus 11 = 6$. Now $w = [1, 5, 4, \\color{red}{6}]$.\n- The added slime will now eat the slime to its left, and its weight becomes $6 \\oplus 4 = 2$. Now $w = [1, 5, \\color{red}{2}]$.\n- The added slime is no longer able to eat the slime to its left, so it ends the process with a score of $2$.", "cfid": "2064D"}
{"problem_id": "2064F", "problem_title": "F. We Be Summing", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2064/F", "problem_statement": "You are given an array $a$ of length $n$ and an integer $k$.\n\nCall a non-empty array $b$ of length $m$ epic if there exists an integer $i$ where $1 \\le i < m$ and $\\min(b_1,\\ldots,b_i) + \\max(b_{i + 1},\\ldots,b_m) = k$.\n\nCount the number of epic subarrays$^{\\text{∗}}$ of $a$.\n\n$^{\\text{∗}}$An array $a$ is a subarray of an array $b$ if $a$ can be obtained from $b$ by the deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10^4$) — the number of testcases.\n\nThe first line of each testcase contains integers $n$ and $k$ ($2 \\le n \\le 2 \\cdot 10^5$; $n < k < 2 \\cdot n$) — the length of the array $a$ and $k$.\n\nThe second line of each testcase contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($1 \\le a_i \\le n$).\n\nThe sum of $n$ across all testcases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each testcase, output the number of epic contiguous subarrays of $a$.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n5 7\n\n1 2 3 4 5\n\n7 13\n\n6 6 6 6 7 7 7\n\n6 9\n\n4 5 6 6 5 1\n\n5 9\n\n5 5 4 5 5\n\n5 6\n\n3 3 3 3 3\n\n6 8\n\n4 5 4 5 4 5\n\n```\n\n#### Output #1\n\n```\n2\n12\n3\n8\n10\n4\n```\n\n### Note\n\nThese are all the epic subarrays in the first testcase:\n\n- $[2, 3, 4, 5]$, because $\\min(2, 3) + \\max(4, 5) = 2 + 5 = 7$.\n- $[3, 4]$, because $\\min(3) + \\max(4) = 3 + 4 = 7$.\n\nIn the second test case, every subarray that contains at least one $6$ and at least one $7$ is epic.", "cfid": "2064F"}
{"problem_id": "2064E", "problem_title": "E. Mycraft Sand Sort", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2064/E", "problem_statement": "Steve has a permutation$^{\\text{∗}}$ $p$ and an array $c$, both of length $n$. Steve wishes to sort the permutation $p$.\n\nSteve has an infinite supply of coloured sand blocks, and using them he discovered a physics-based way to sort an array of numbers called gravity sort. Namely, to perform gravity sort on $p$, Steve will do the following:\n\n- For all $i$ such that $1 \\le i \\le n$, place a sand block of color $c_i$ in position $(i, j)$ for all $j$ where $1 \\le j \\le p_i$. Here, position $(x, y)$ denotes a cell in the $x$-th row from the top and $y$-th column from the left.\n- Apply downwards gravity to the array, so that all sand blocks fall as long as they can fall.\n\n![](https://espresso.codeforces.com/bc9da7db75c1cd76ae4b448579a882a11a989364.png)An example of gravity sort for the third testcase. $p = [4, 2, 3, 1, 5]$, $c = [2, 1, 4, 1, 5]$\n\nAlex looks at Steve's sand blocks after performing gravity sort and wonders how many pairs of arrays $(p',c')$ where $p'$ is a permutation would have resulted in the same layout of sand. Note that the original pair of arrays $(p, c)$ will always be counted.\n\nPlease calculate this for Alex. As this number could be large, output it modulo $998\\,244\\,353$.\n\n$^{\\text{∗}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is a $4$ in the array).\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe first line of each testcase contains an integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) — the lengths of the arrays.\n\nThe second line of each testcase contains $n$ distinct integers $p_1,p_2,\\ldots,p_n$ ($1 \\le p_i \\le n$) — the elements of $p$.\n\nThe following line contains $n$ integers $c_1,c_2,\\ldots,c_n$ ($1 \\le c_i \\le n$) — the elements of $c$.\n\nThe sum of $n$ across all testcases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each testcase, output the number of pairs of arrays $(p', c')$ Steve could have started with, modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n1\n\n1\n\n1\n\n5\n\n5 3 4 1 2\n\n1 1 1 1 1\n\n5\n\n4 2 3 1 5\n\n2 1 4 1 5\n\n40\n\n29 15 20 35 37 31 27 1 32 36 38 25 22 8 16 7 3 28 11 12 23 4 14 9 39 13 10 30 6 2 24 17 19 5 34 18 33 26 40 21\n\n3 1 2 2 1 2 3 1 1 1 1 2 1 3 1 1 3 1 1 1 2 2 1 3 3 3 2 3 2 2 2 2 1 3 2 1 1 2 2 2\n\n```\n\n#### Output #1\n\n```\n1\n120\n1\n143654893\n```\n\n### Note\n\nThe second test case is shown below.\n\n![](https://espresso.codeforces.com/0be3e1a1e38f8485a0af76fd4cafe659e8413522.png)Gravity sort of the second testcase.\n\nIt can be shown that permutations of $p$ will yield the same result, and that $c$ must equal $[1,1,1,1,1]$ (since all sand must be the same color), so the answer is $5! = 120$.\n\nThe third test case is shown in the statement above. It can be proven that no other arrays $p$ and $c$ will produce the same final result, so the answer is $1$.", "cfid": "2064E"}
{"problem_id": "2066D2", "problem_title": "D2. Club of Young Aircraft Builders (hard version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2066/D2", "problem_statement": "This is the hard version of the problem. The difference between the versions is that in this version, not necessary $a_i = 0$. You can hack only if you solved all versions of this problem.\n\nThere is a building with $n$ floors, numbered from $1$ to $n$ from bottom to top. There is exactly one person living on each floor.\n\nAll the residents of the building have an important goal today: to launch at least $c$ paper airplanes collectively. The residents will launch the airplanes in turn. When a person from the $i$-th floor launches an airplane, all residents on floors from $1$ to $i$ can see it as it descends to the ground. If, from the perspective of the resident on the $i$-th floor, at least $c$ airplanes have already been launched, they will no longer launch airplanes themselves. It is also known that by the end of the day, from the perspective of each resident in the building, at least $c$ airplanes have been launched, and a total of $m$ airplanes were thrown.\n\nYou have been carefully monitoring this flash mob, and for each airplane, you recorded which resident from which floor threw it. Unfortunately, the information about who exactly threw some of the airplanes has been lost. Find the number of ways to fill in the gaps so that the information could be credible. Since the answer could be quite large, output it modulo $10^9 + 7$.\n\nIt is also possible that you made a mistake in your records, and there is no possible way to restore the gaps. In that case, the answer is considered to be $0$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n, c, m$ ($1 \\le n \\le 100$, $1 \\le c \\le 100$, $c \\le m \\le n \\cdot c$) — the number of floors in the building, the minimum required number of airplanes, and the number of airplanes actually launched.\n\nThe second line of each test case contains $m$ integers $a_1, a_2, \\ldots, a_m$ ($0 \\le a_i \\le n$) — $a_i$ indicates the resident from which floor launched the $i$-th airplane; $a_i = 0$ indicates a gap.\n\nIt is guaranteed that the sum of the values of $m$ across all test cases does not exceed $10^4$.\n\n### Output\n\nFor each test case, output the number of ways to fill in the gaps with numbers from $1$ to $n$, so that the chronology of the airplane launches could be credible, modulo $10^9 + 7$.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n3 2 4\n\n0 0 0 0\n\n5 5 7\n\n0 0 0 0 0 0 0\n\n6 1 3\n\n2 0 0\n\n2 3 5\n\n0 0 1 0 2\n\n3 3 4\n\n3 3 3 0\n\n2 1 2\n\n0 1\n\n2 1 2\n\n0 2\n\n5 3 12\n\n0 0 1 0 2 4 0 0 0 5 0 5\n\n```\n\n#### Output #1\n\n```\n6\n190\n3\n2\n0\n0\n1\n14\n```\n\n### Note\n\nIn the first test example, all six possible ways to fill in the gaps are as follows:\n\n1. $[1, 1, 3, 3]$\n2. $[1, 2, 3, 3]$\n3. $[1, 3, 2, 3]$\n4. $[2, 1, 3, 3]$\n5. $[2, 2, 3, 3]$\n6. $[3, 1, 2, 3]$\n\nNote that the array $[2, 3, 1, 3]$ is not a valid way to fill in the gaps, as the third airplane could not have been launched by the person on the $1$st floor, since from their perspective, $c = 2$ airplanes had already been launched.\n\nAlso, the array $[1, 1, 2, 3]$ is not a valid way to fill in the gaps, as from the perspective of the person on the $3$rd floor, only $1$ airplane has been launched, while $c = 2$.", "cfid": "2066D2"}
{"problem_id": "2066C", "problem_title": "C. Bitwise Slides", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2066/C", "problem_statement": "You are given an array $a_1, a_2, \\ldots, a_n$. Also, you are given three variables $P,Q,R$, initially equal to zero.\n\nYou need to process all the numbers $a_1, a_2, \\ldots, a_n$, in the order from $1$ to $n$. When processing the next $a_i$, you must perform exactly one of the three actions of your choice:\n\n1. $P := P \\oplus a_i$\n2. $Q := Q \\oplus a_i$\n3. $R := R \\oplus a_i$\n\n$\\oplus$ denotes the bitwise XOR operation.\n\nWhen performing actions, you must follow the main rule: it is necessary that after each action, all three numbers $P,Q,R$ are not pairwise distinct.\n\nThere are a total of $3^n$ ways to perform all $n$ actions. How many of them do not violate the main rule? Since the answer can be quite large, find it modulo $10^9 + 7$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains an integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) — the length of the array $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$) — the elements of the array $a$.\n\nIt is guaranteed that the sum of the values of $n$ for all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the number of ways to perform all $n$ actions without violating the main rule, modulo $10^9 + 7$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3\n\n1 7 9\n\n4\n\n179 1 1 179\n\n5\n\n1 2 3 3 2\n\n12\n\n8 2 5 3 9 1 8 12 9 9 9 4\n\n1\n\n1000000000\n\n```\n\n#### Output #1\n\n```\n3\n9\n39\n123\n3\n```\n\n### Note\n\nIn the first test case, there are 3 valid sequences of operations: PPP, QQQ, RRR.\n\nIn the second test case, there are 9 valid sequences of operations: PPPP, PPPQ, PPPR, QQQP, QQQQ, QQQR, RRRP, RRRQ, RRRR.", "cfid": "2066C"}
{"problem_id": "2066B", "problem_title": "B. White Magic", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2066/B", "problem_statement": "We call a sequence $a_1, a_2, \\ldots, a_n$ magical if for all $1 \\leq i \\leq n-1$ it holds that: $\\operatorname{min}(a_1, \\ldots, a_i) \\geq \\operatorname{mex}(a_{i+1}, \\ldots, a_n)$. In particular, any sequence of length $1$ is considered magical.\n\nThe minimum excluded (MEX) of a collection of integers $a_1, a_2, \\ldots, a_k$ is defined as the smallest non-negative integer $t$ which does not occur in the collection $a$.\n\nYou are given a sequence $a$ of $n$ non-negative integers. Find the maximum possible length of a magical subsequence$^{\\text{∗}}$ of the sequence $a$.\n\n$^{\\text{∗}}$A sequence $a$ is a subsequence of a sequence $b$ if $a$ can be obtained from $b$ by the deletion of several (possibly, zero or all) element from arbitrary positions.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains an integer $n$ ($1 \\leq n \\leq 2 \\cdot 10^5$) — the length of the sequence $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\leq a_i \\leq 10^9$) — the elements of the sequence $a$.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single number — the maximum possible length of a magical subsequence of the sequence $a$.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n5\n\n4 3 2 1 0\n\n6\n\n4 3 3 2 1 0\n\n4\n\n2 0 1 2\n\n1\n\n777\n\n4\n\n1000000000 1 7 9\n\n2\n\n0 1\n\n2\n\n1 2\n\n4\n\n0 1 0 1\n\n```\n\n#### Output #1\n\n```\n5\n5\n3\n1\n4\n2\n2\n3\n```\n\n### Note\n\nIn the first test case, the sequence $[4, 3, 2, 1, 0]$ is magical, since:\n\n- $\\operatorname{min}(4) = 4, \\operatorname{mex}(3, 2, 1, 0) = 4$. $4 \\geq 4$\n- $\\operatorname{min}(4, 3) = 3, \\operatorname{mex}(2, 1, 0) = 3$. $3 \\geq 3$\n- $\\operatorname{min}(4, 3, 2) = 2, \\operatorname{mex}(1, 0) = 2$. $2 \\geq 2$\n- $\\operatorname{min}(4, 3, 2, 1) = 1, \\operatorname{mex}(0) = 1$. $1 \\geq 1$\n\nIn the second test case, the sequence $[4, 3, 3, 2, 1, 0]$ is not magical, since $\\operatorname{min}(4, 3) = 3, \\operatorname{mex}(3, 2, 1, 0) = 4$, $3 < 4$. However, the subsequence $[4, 3, 2, 1, 0]$ of this sequence is magical, so the answer is $5$.", "cfid": "2066B"}
{"problem_id": "2066D1", "problem_title": "D1. Club of Young Aircraft Builders (easy version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2066/D1", "problem_statement": "This is the easy version of the problem. The difference between the versions is that in this version, all $a_i = 0$. You can hack only if you solved all versions of this problem.\n\nThere is an $n$-story building, with floors numbered from $1$ to $n$ from bottom to top. There is exactly one person living on each floor.\n\nAll the residents of the building have a very important goal today: to launch at least $c$ paper airplanes collectively. The residents will launch the airplanes in turn. When a person from the $i$-th floor launches an airplane, all residents on the floors from $1$ to $i$ can see it as it descends to the ground.\n\nIf, from the perspective of the resident on the $i$-th floor, at least $c$ airplanes have already been launched, they will not launch any more airplanes themselves. It is also known that by the end of the day, from the perspective of each resident in the building, at least $c$ airplanes have been launched, and a total of $m$ airplanes were thrown.\n\nYou carefully monitored this flash mob and recorded which resident from which floor threw each airplane. Unfortunately, the information about who exactly threw some airplanes has been lost. Find the number of ways to fill in the gaps so that the information could be credible. Since the answer can be quite large, output it modulo $10^9 + 7$.\n\nIn this version of the problem, all information has been lost, and the entire array consists of gaps.\n\nIt is also possible that you made a mistake in your records, and there is no possible way to restore the gaps. In that case, the answer is considered to be $0$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n, c, m$ ($1 \\le n \\le 100$, $1 \\le c \\le 100$, $c \\le m \\le n \\cdot c$) — the number of floors in the building, the minimum required number of airplanes, and the number of airplanes actually launched.\n\nThe second line of each test case contains $m$ integers $a_1, a_2, \\ldots, a_m$ ($0 \\le a_i \\le n$) — $a_i$ indicates the resident from which floor launched the $i$-th airplane; $a_i = 0$ indicates a gap.\n\nIn this version of the problem, it is guaranteed that all $a_i = 0$.\n\nIt is guaranteed that the sum of the values of $m$ across all test cases does not exceed $10^4$.\n\n### Output\n\nFor each test case, output the number of ways to fill in the gaps with numbers from $1$ to $n$, so that the chronology of the airplane launches could be credible, modulo $10^9 + 7$.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n3 2 4\n\n0 0 0 0\n\n5 5 7\n\n0 0 0 0 0 0 0\n\n```\n\n#### Output #1\n\n```\n6\n190\n```\n\n### Note\n\nIn the first test example, all six possible ways to fill in the gaps are as follows:\n\n1. $[1, 1, 3, 3]$\n2. $[1, 2, 3, 3]$\n3. $[1, 3, 2, 3]$\n4. $[2, 1, 3, 3]$\n5. $[2, 2, 3, 3]$\n6. $[3, 1, 2, 3]$\n\nNote that the array $[2, 3, 1, 3]$ is not a valid way to fill in the gaps, as the third airplane could not have been launched by the person on the $1$st floor, since from their perspective, $c = 2$ airplanes had already been launched.\n\nAlso, the array $[1, 1, 2, 3]$ is not a valid way to fill in the gaps, as from the perspective of the person on the $3$rd floor, only $1$ airplane has been launched, while $c = 2$.", "cfid": "2066D1"}
{"problem_id": "2065H", "problem_title": "H. Bro Thinks He's Him", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2065/H", "problem_statement": "Skibidus thinks he's Him! He proved it by solving this difficult task. Can you also prove yourself?\n\nGiven a binary string$^{\\text{∗}}$ $t$, $f(t)$ is defined as the minimum number of contiguous substrings, each consisting of identical characters, into which $t$ can be partitioned. For example, $f(\\texttt{00110001}) = 4$ because $t$ can be partitioned as $\\texttt{[00][11][000][1]}$ where each bracketed segment consists of identical characters.\n\nSkibidus gives you a binary string $s$ and $q$ queries. In each query, a single character of the string is flipped (i.e. $\\texttt{0}$ changes to $\\texttt{1}$ and $\\texttt{1}$ changes to $\\texttt{0}$); changes are saved after the query is processed. After each query, output the sum over all $f(b)$ where $b$ is a non-empty subsequence$^{\\text{†}}$ of $s$, modulo $998\\,244\\,353$.\n\n$^{\\text{∗}}$A binary string consists of only characters $\\texttt{0}$ and $\\texttt{1}$.\n\n$^{\\text{†}}$A subsequence of a string is a string which can be obtained by removing several (possibly zero) characters from the original string.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) — the number of test cases.\n\nThe first line of each test case contains a binary string $s$ ($1 \\leq |s| \\leq 2 \\cdot 10^5$).\n\nThe following line of each test case contains an integer $q$ ($1 \\leq q \\leq 2 \\cdot 10^5$) — the number of queries.\n\nThe following line contains $q$ integers $v_1, v_2, \\ldots, v_q$ ($1 \\leq v_i \\leq |s|$), denoting $s_{v_i}$ is flipped for the $i$'th query.\n\nIt is guaranteed that the sum of $|s|$ and the sum of $q$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output $q$ integers on a single line — the answer after each query modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n101\n\n2\n\n1 3\n\n10110\n\n3\n\n1 2 3\n\n101110101\n\n5\n\n7 2 4 4 1\n\n```\n\n#### Output #1\n\n```\n10 7\n61 59 67\n1495 1169 1417 1169 1396\n```\n\n### Note\n\nIn the first test case, $s$ becomes $\\texttt{001}$ after the first query. Let's calculate the answer for each subsequence:\n\n- $f(s_1) = f(\\texttt{0}) = 1$\n- $f(s_2) = f(\\texttt{0}) = 1$\n- $f(s_3) = f(\\texttt{1}) = 1$\n- $f(s_1 s_2) = f(\\texttt{00}) = 1$\n- $f(s_1 s_3) = f(\\texttt{01}) = 2$\n- $f(s_2 s_3) = f(\\texttt{01}) = 2$\n- $f(s_1 s_2 s_3) = f(\\texttt{001}) = 2$\n\nThe sum of these values is $10$, modulo $998\\,244\\,353$.", "cfid": "2065H"}
{"problem_id": "2059D", "problem_title": "D. Graph and Graph", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2059/D", "problem_statement": "You are given two connected undirected graphs with the same number of vertices. In both graphs, there is a token located at some vertex. In the first graph, the token is initially at vertex $s_1$, and in the second graph, the token is initially at vertex $s_2$. The following operation is repeated an infinite number of times:\n\n- Let the token currently be at vertex $v_1$ in the first graph and at vertex $v_2$ in the second graph.\n- A vertex $u_1$, adjacent to $v_1$, is chosen in the first graph.\n- A vertex $u_2$, adjacent to $v_2$, is chosen in the second graph.\n- The tokens are moved to the chosen vertices: in the first graph, the token moves from $v_1$ to $u_1$, and in the second graph, from $v_2$ to $u_2$.\n- The cost of such an operation is equal to $|u_1 - u_2|$.\n\nDetermine the minimum possible total cost of all operations or report that this value will be infinitely large.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains one integer $t$ ($1 \\le t \\le 500$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains three integers $n$, $s_1$, and $s_2$ ($2 \\le n \\le 1000$, $1 \\le s_1, s_2 \\le n$) — the number of vertices in each graph, the number of the vertex in the first graph where the token is initially located, and the number of the vertex in the second graph where the token is initially located.\n\nThe second line of each test case contains one integer $m_1$ ($1 \\le m_1 \\le 1000$) — the number of edges in the first graph.\n\nThe $i$-th of the following $m_1$ lines contains two integers $a_i$ and $b_i$ ($1 \\le a_i, b_i \\le n$, $a_i \\ne b_i$) — the numbers of the endpoints of the $i$-th edge in the first graph.\n\nThe next line of each test case contains one integer $m_2$ ($1 \\le m_2 \\le 1000$) — the number of edges in the second graph.\n\nThe $j$-th of the following $m_2$ lines contains two integers $c_j$ and $d_j$ ($1 \\le c_j, d_j \\le n$, $c_j \\ne d_j$) — the numbers of the endpoints of the $j$-th edge in the second graph.\n\nIt is guaranteed that the sum of $n$, the sum of $m_1$, and the sum of $m_2$ over all test cases do not exceed $1000$.\n\nIt is guaranteed that both graphs are connected.\n\n### Output\n\nFor each test case, output one integer — the minimum total cost of all operations or $-1$, if this value will be infinitely large.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n4 1 1\n\n4\n\n1 2\n\n2 3\n\n3 4\n\n4 1\n\n4\n\n1 2\n\n2 3\n\n3 4\n\n4 1\n\n4 1 2\n\n4\n\n1 2\n\n2 3\n\n3 4\n\n4 1\n\n4\n\n1 2\n\n2 3\n\n3 4\n\n4 1\n\n7 7 2\n\n7\n\n1 6\n\n2 1\n\n3 2\n\n3 4\n\n5 1\n\n7 3\n\n7 5\n\n6\n\n5 1\n\n5 6\n\n5 7\n\n6 3\n\n7 2\n\n7 4\n\n```\n\n#### Output #1\n\n```\n0\n-1\n7\n```\n\n### Note\n\nIn the first test case, an infinite sequence of transitions can be constructed to the vertices $2, 3, 4, 1, 2, 3, 4, 1, \\ldots$, along which the token can move in both the first and the second graphs.\n\nIn the second test case, it can be proven that the cost of any operation will be greater than $0$; therefore, the total cost of all operations will be infinitely large.", "cfid": "2059D"}
{"problem_id": "2059E2", "problem_title": "E2. Stop Gaming (Hard Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2059/E2", "problem_statement": "This is the hard version of the problem. The difference between the versions is that in this version you need to output all the operations that need to be performed. You can hack only if you solved all versions of this problem.\n\nYou are given $n$ arrays, each of which has a length of $m$. Let the $j$-th element of the $i$-th array be denoted as $a_{i, j}$. It is guaranteed that all $a_{i, j}$ are pairwise distinct. In one operation, you can do the following:\n\n- Choose some integer $i$ ($1 \\le i \\le n$) and an integer $x$ ($1 \\le x \\le 2 \\cdot n \\cdot m$).\n- For all integers $k$ from $i$ to $n$ in increasing order, do the following:\n1. Add the element $x$ to the beginning of the $k$-th array.\n\n2. Assign $x$ the value of the last element in the $k$-th array.\n\n3. Remove the last element from the $k$-th array.\n\nIn other words, you can insert an element at the beginning of any array, after which all elements in this and all following arrays are shifted by one to the right. The last element of the last array is removed.\n\nYou are also given a description of the arrays that need to be obtained after all operations. That is, after performing the operations, the $j$-th element of the $i$-th array should be equal to $b_{i, j}$. It is guaranteed that all $b_{i, j}$ are pairwise distinct.\n\nDetermine the minimum number of operations that need to be performed to obtain the desired arrays, and also output the sequence of all operations itself.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\le n, m \\le 3 \\cdot 10^5$) — the number of arrays and the number of elements in each array.\n\nThe $i$-th of the following $n$ lines contains $m$ integers $a_{i, 1}, a_{i, 2}, \\ldots, a_{i, m}$ ($1 \\le a_{i, j} \\le 2 \\cdot n \\cdot m$) — the elements of the $i$-th original array. It is guaranteed that all $a_{i, j}$ are pairwise distinct.\n\nThe $i$-th of the following $n$ lines contains $m$ integers $b_{i, 1}, b_{i, 2}, \\ldots, b_{i, m}$ ($1 \\le b_{i, j} \\le 2 \\cdot n \\cdot m$) — the elements of the $i$-th final array. It is guaranteed that all $b_{i, j}$ are pairwise distinct.\n\nIt is guaranteed that the sum of $n \\cdot m$ over all test cases does not exceed $3 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the minimum number of operations that need to be performed.\n\nNext, for each operation output two integers $i$ and $x$ ($1 \\le i \\le n$, $1 \\le x \\le 2 \\cdot n \\cdot m$) — the index of the array where the element is inserted and the value of the element, respectively.\n\nIf there are multiple possible sequences with the minimum number of operations, output any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2 2\n\n2 6\n\n3 4\n\n1 2\n\n7 8\n\n1 5\n\n5 4 1 2 3\n\n5 4 3 2 1\n\n3 3\n\n1 2 3\n\n4 5 6\n\n7 8 9\n\n11 1 2\n\n12 3 4\n\n13 5 6\n\n4 4\n\n1 2 3 4\n\n5 6 7 8\n\n9 10 11 12\n\n13 14 15 16\n\n17 1 2 3\n\n4 18 5 6\n\n7 19 8 20\n\n9 21 22 10\n\n```\n\n#### Output #1\n\n```\n3\n1 1\n2 8\n2 7\n5\n1 1\n1 2\n1 3\n1 4\n1 5\n3\n1 11\n2 12\n3 13\n6\n3 20\n2 18\n3 19\n4 22\n4 21\n1 17\n```\n\n### Note\n\nIn the first test case, the following sequence of $3$ operations is suitable:\n\n- Apply the operation to the first array with $x = 1$. Then the element $1$ will be added to the beginning of the first array, and the value of $x$ will become $6$. The last element will be removed, and the first array will look like $[1, 2]$. Next, the element $x$ is added to the beginning of the second array, and the value of $x$ becomes $4$. The last element of the second array is removed, and both arrays look like $[1, 2]$ and $[6, 3]$ respectively after the first operation.\n- Apply the operation to the second array with $x = 8$. Then the first array remains unchanged, and both arrays will look like $[1, 2]$ and $[8, 6]$ respectively.\n- Apply the operation to the second array with $x = 7$, then both arrays will have the required appearance $[1, 2]$ and $[7, 8]$ respectively.\n\nIn the second test case, the desired array can only be achieved in $5$ operations.\n\nIn the third test case, the following sequence of $3$ operations is suitable:\n\n- Apply the operation with $x = 11$ to the first array.\n- Apply the operation with $x = 12$ to the second array.\n- Apply the operation with $x = 13$ to the third array.", "cfid": "2059E2"}
{"problem_id": "2059E1", "problem_title": "E1. Stop Gaming (Easy Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2059/E1", "problem_statement": "This is the easy version of the problem. The difference between the versions is that in this version you only need to find the minimum number of operations. You can hack only if you solved all versions of this problem.\n\nYou are given $n$ arrays, each of which has a length of $m$. Let the $j$-th element of the $i$-th array be denoted as $a_{i, j}$. It is guaranteed that all $a_{i, j}$ are pairwise distinct. In one operation, you can do the following:\n\n- Choose some integer $i$ ($1 \\le i \\le n$) and an integer $x$ ($1 \\le x \\le 2 \\cdot n \\cdot m$).\n- For all integers $k$ from $i$ to $n$ in increasing order, do the following:\n1. Add the element $x$ to the beginning of the $k$-th array.\n\n2. Assign $x$ the value of the last element in the $k$-th array.\n\n3. Remove the last element from the $k$-th array.\n\nIn other words, you can insert an element at the beginning of any array, after which all elements in this and all following arrays are shifted by one to the right. The last element of the last array is removed.\n\nYou are also given a description of the arrays that need to be obtained after all operations. That is, after performing the operations, the $j$-th element of the $i$-th array should be equal to $b_{i, j}$. It is guaranteed that all $b_{i, j}$ are pairwise distinct.\n\nDetermine the minimum number of operations that need to be performed to obtain the desired arrays.\n\n### Input\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\le n, m \\le 3 \\cdot 10^5$) — the number of arrays and the number of elements in each array.\n\nThe $i$-th of the following $n$ lines contains $m$ integers $a_{i, 1}, a_{i, 2}, \\ldots, a_{i, m}$ ($1 \\le a_{i, j} \\le 2 \\cdot n \\cdot m$) — the elements of the $i$-th original array. It is guaranteed that all $a_{i, j}$ are pairwise distinct.\n\nThe $i$-th of the following $n$ lines contains $m$ integers $b_{i, 1}, b_{i, 2}, \\ldots, b_{i, m}$ ($1 \\le b_{i, j} \\le 2 \\cdot n \\cdot m$) — the elements of the $i$-th final array. It is guaranteed that all $b_{i, j}$ are pairwise distinct.\n\nIt is guaranteed that the sum of $n \\cdot m$ over all test cases does not exceed $3 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the minimum number of operations that need to be performed.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2 2\n\n2 6\n\n3 4\n\n1 2\n\n7 8\n\n1 5\n\n5 4 1 2 3\n\n5 4 3 2 1\n\n3 3\n\n1 2 3\n\n4 5 6\n\n7 8 9\n\n11 1 2\n\n12 3 4\n\n13 5 6\n\n4 4\n\n1 2 3 4\n\n5 6 7 8\n\n9 10 11 12\n\n13 14 15 16\n\n17 1 2 3\n\n4 18 5 6\n\n7 19 8 20\n\n9 21 22 10\n\n```\n\n#### Output #1\n\n```\n3\n5\n3\n6\n```\n\n### Note\n\nIn the first test case, the following sequence of $3$ operations is suitable:\n\n- Apply the operation to the first array with $x = 1$. Then the element $1$ will be added to the beginning of the first array, and the value of $x$ will become $6$. The last element will be removed, and the first array will look like $[1, 2]$. Next, the element $x$ is added to the beginning of the second array, and the value of $x$ becomes $4$. The last element of the second array is removed, and both arrays look like $[1, 2]$ and $[6, 3]$ respectively after the first operation.\n- Apply the operation to the second array with $x = 8$. Then the first array remains unchanged, and both arrays will look like $[1, 2]$ and $[8, 6]$ respectively.\n- Apply the operation to the second array with $x = 7$, then both arrays will have the required appearance $[1, 2]$ and $[7, 8]$ respectively.\n\nIn the second test case, the desired array can only be achieved in $5$ operations.\n\nIn the third test case, the following sequence of $3$ operations is suitable:\n\n- Apply the operation with $x = 11$ to the first array.\n- Apply the operation with $x = 12$ to the second array.\n- Apply the operation with $x = 13$ to the third array.", "cfid": "2059E1"}
{"problem_id": "2062D", "problem_title": "D. Balanced Tree", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2062/D", "problem_statement": "You are given a tree$^{\\text{∗}}$ with $n$ nodes and values $l_i, r_i$ for each node. You can choose an initial value $a_i$ satisfying $l_i\\le a_i\\le r_i$ for the $i$-th node. A tree is balanced if all node values are equal, and the value of a balanced tree is defined as the value of any node.\n\nIn one operation, you can choose two nodes $u$ and $v$, and increase the values of all nodes in the subtree$^{\\text{†}}$ of node $v$ by $1$ while considering $u$ as the root of the entire tree. Note that $u$ may be equal to $v$.\n\nYour goal is to perform a series of operations so that the tree becomes balanced. Find the minimum possible value of the tree after performing these operations. Note that you don't need to minimize the number of operations.\n\n$^{\\text{∗}}$A tree is a connected graph without cycles.\n\n$^{\\text{†}}$Node $w$ is considered in the subtree of node $v$ if any path from root $u$ to $w$ must go through $v$.\n\n### Input\n\nThe first line of input contains a single integer $t$ ($1 \\leq t \\leq 10^5$) — the number of input test cases.\n\nThe first line of each test case contains one integer $n$ ($1 \\le n \\le 2\\cdot 10^5$) — the number of nodes in the tree.\n\nThen $n$ lines follow. The $i$-th line contains two integers $l_i,r_i$ ($0\\le l_i \\le r_i\\le 10^9$) — the constraint of the value of the $i$-th node.\n\nThe next $n-1$ lines contain the edges of the tree. The $i$-th line contains two integers $u_i,v_i$ ($1\\le u_i,v_i \\le n$, $u_i \\neq v_i$) — an edge connecting $u_i$ and $v_i$. It is guaranteed that the given edges form a tree.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the minimum possible value that all $a_i$ can be made equal to after performing the operations. It can be shown that the answer always exists.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n4\n\n0 11\n\n6 6\n\n0 0\n\n5 5\n\n2 1\n\n3 1\n\n4 3\n\n7\n\n1 1\n\n0 5\n\n0 5\n\n2 2\n\n2 2\n\n2 2\n\n2 2\n\n1 2\n\n1 3\n\n2 4\n\n2 5\n\n3 6\n\n3 7\n\n4\n\n1 1\n\n1 1\n\n1 1\n\n0 0\n\n1 4\n\n2 4\n\n3 4\n\n7\n\n0 20\n\n0 20\n\n0 20\n\n0 20\n\n3 3\n\n4 4\n\n5 5\n\n1 2\n\n1 3\n\n1 4\n\n2 5\n\n3 6\n\n4 7\n\n5\n\n1000000000 1000000000\n\n0 0\n\n1000000000 1000000000\n\n0 0\n\n1000000000 1000000000\n\n3 2\n\n2 1\n\n1 4\n\n4 5\n\n6\n\n21 88\n\n57 81\n\n98 99\n\n61 76\n\n15 50\n\n23 67\n\n2 1\n\n3 2\n\n4 3\n\n5 3\n\n6 4\n\n```\n\n#### Output #1\n\n```\n11\n3\n3\n5\n3000000000\n98\n```\n\n### Note\n\nIn the first test case, you can choose $a=[6,6,0,5]$.\n\nYou can perform the following operations to make all $a_i$ equal:\n\n1. Choose $u=4$, $v=3$ and perform the operation $5$ times.\n2. Choose $u=1$, $v=3$ and perform the operation $6$ times.\n\nThe complete process is shown as follows (where the numbers inside the parentheses are elements of $a$):\n\n![](https://espresso.codeforces.com/7f1aa785ea78225224c7c60aeb85b5c2197683c0.png)\n\nIt can be proven that this is the optimal solution.", "cfid": "2062D"}
{"problem_id": "2062F", "problem_title": "F. Traveling Salescat", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2062/F", "problem_statement": "You are a cat selling fun algorithm problems. Today, you want to recommend your fun algorithm problems to $k$ cities.\n\nThere are a total of $n$ cities, each with two parameters $a_i$ and $b_i$. Between any two cities $i,j$ ($i\\ne j$), there is a bidirectional road with a length of $\\max(a_i + b_j , b_i + a_j)$. The cost of a path is defined as the total length of roads between every two adjacent cities along the path.\n\nFor $k=2,3,\\ldots,n$, find the minimum cost among all simple paths containing exactly $k$ distinct cities.\n\n### Input\n\nThe first line of input contains a single integer $t$ ($1 \\leq t \\leq 1500$) — the number of test cases.\n\nFor each test case, the first line contains a single integer $n$ ($2 \\leq n \\leq 3\\cdot 10^3$) — the number of cities.\n\nThen $n$ lines follow, the $i$-th line contains two integers $a_i,b_i$ ($0 \\leq a_i,b_i \\leq 10^9$) — the parameters of city $i$.\n\nIt is guaranteed that the sum of $n^2$ over all test cases does not exceed $9\\cdot 10^6$.\n\n### Output\n\nFor each test case, print $n-1$ integers in one line. The $i$-th integer represents the minimum cost when $k=i+1$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3\n\n0 2\n\n2 1\n\n3 3\n\n5\n\n2 7\n\n7 5\n\n6 3\n\n1 8\n\n7 5\n\n8\n\n899167687 609615846\n\n851467150 45726720\n\n931502759 23784096\n\n918190644 196992738\n\n142090421 475722765\n\n409556751 726971942\n\n513558832 998277529\n\n294328304 434714258\n\n```\n\n#### Output #1\n\n```\n4 9\n10 22 34 46\n770051069 1655330585 2931719265 3918741472 5033924854 6425541981 7934325514\n```\n\n### Note\n\nIn the first test case:\n\n- For $k=2$, the optimal path is $1\\to 2$ with a cost of $\\max(0+1,2+2)=4$.\n- For $k=3$, the optimal path is $2\\to 1\\to 3$ with a cost of $\\max(0+1,2+2)+\\max(0+3,3+2)=4+5=9$.\n\nIn the second test case:\n\n- For $k=2$, the optimal path is $1\\to 4$.\n- For $k=3$, the optimal path is $2\\to 3\\to 5$.\n- For $k=4$, the optimal path is $4\\to 1\\to 3\\to 5$.\n- For $k=5$, the optimal path is $5\\to 2\\to 3\\to 1\\to 4$.", "cfid": "2062F"}
{"problem_id": "2062E2", "problem_title": "E2. The Game (Hard Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2062/E2", "problem_statement": "This is the hard version of the problem. The difference between the versions is that in this version, you need to find all possible nodes Cirno may choose. You can hack only if you solved all versions of this problem.\n\nCirno and Daiyousei are playing a game with a tree$^{\\text{∗}}$ of $n$ nodes, rooted at node $1$. The value of the $i$-th node is $w_i$. They take turns to play the game; Cirno goes first.\n\nIn each turn, assuming the opponent chooses $j$ in the last turn, the player can choose any remaining node $i$ satisfying $w_i>w_j$ and delete the subtree$^{\\text{†}}$ of node $i$. In particular, Cirno can choose any node and delete its subtree in the first turn.\n\nThe first player who can not operate wins, and they all hope to win. Find all possible nodes Cirno may choose in the first turn so that she wins if both of them play optimally.\n\n$^{\\text{∗}}$A tree is a connected graph without cycles.\n\n$^{\\text{†}}$Node $u$ is considered in the subtree of node $i$ if any path from $1$ to $u$ must go through $i$.\n\n### Input\n\nThe first line of input contains a single integer $t$ ($1 \\leq t \\leq 10^5$) — the number of input test cases.\n\nThe first line of each test case contains one integer $n$ ($1 \\le n \\le 4\\cdot 10^5$) — the number of nodes in the tree.\n\nThe second line contains $n$ integers $w_1,w_2,\\ldots,w_n$ ($1 \\le w_i \\le n$) — the value of each node.\n\nThe next $n-1$ lines contain the edges of the tree. The $i$-th line contains two integers $u_i,v_i$ ($1\\le u_i,v_i \\le n$, $u_i \\neq v_i$) — an edge connecting $u_i$ and $v_i$. It is guaranteed that the given edges form a tree.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $4\\cdot 10^5$.\n\n### Output\n\nFor each test case, print one line.\n\nIf Cirno wins the game, print several integers. The first integer $k$ represents the number of possible nodes she may choose in the first turn. The other $k$ integers are all possible nodes in increasing order.\n\nOtherwise, print \"0\" (without quotes).\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n4\n\n2 2 4 3\n\n1 2\n\n1 3\n\n2 4\n\n5\n\n1 2 3 4 5\n\n1 2\n\n2 3\n\n3 4\n\n4 5\n\n3\n\n1 2 3\n\n1 2\n\n1 3\n\n5\n\n3 1 3 4 5\n\n1 2\n\n2 3\n\n3 4\n\n4 5\n\n10\n\n1 2 3 2 4 3 3 4 4 3\n\n1 4\n\n4 6\n\n7 4\n\n6 9\n\n6 5\n\n7 8\n\n1 2\n\n2 3\n\n2 10\n\n```\n\n#### Output #1\n\n```\n2 2 4\n0\n1 2\n1 2\n5 3 4 6 7 10\n```\n\n### Note\n\nIn the first test case:\n\n1. If Cirno chooses $1$ or $3$ in the first turn, Daiyousei cannot make a move, so Daiyousei wins.\n2. If Cirno chooses $2$ or $4$ in the first turn, Daiyousei can only choose $3$, but after it Cirno cannot make a move, so Cirno wins.\n\nTherefore, all possible nodes Cirno may choose are $2$ and $4$.\n\nIn the second test case, regardless of which node Cirno chooses, Daiyousei cannot make a move, so Daiyousei wins.\n\nIn the third and fourth test case, the only possible node Cirno may choose in the first turn is $2$.\n\nIn the fifth test case, all possible nodes Cirno may choose in the first turn are $3,4,6,7$ and $10$.", "cfid": "2062E2"}
{"problem_id": "2062E1", "problem_title": "E1. The Game (Easy Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2062/E1", "problem_statement": "This is the easy version of the problem. The difference between the versions is that in this version, you only need to find one of the possible nodes Cirno may choose. You can hack only if you solved all versions of this problem.\n\nCirno and Daiyousei are playing a game with a tree$^{\\text{∗}}$ of $n$ nodes, rooted at node $1$. The value of the $i$-th node is $w_i$. They take turns to play the game; Cirno goes first.\n\nIn each turn, assuming the opponent chooses $j$ in the last turn, the player can choose any remaining node $i$ satisfying $w_i>w_j$ and delete the subtree$^{\\text{†}}$ of node $i$. In particular, Cirno can choose any node and delete its subtree in the first turn.\n\nThe first player who can not operate wins, and they all hope to win. Find one of the possible nodes Cirno may choose so that she wins if both of them play optimally.\n\n$^{\\text{∗}}$A tree is a connected graph without cycles.\n\n$^{\\text{†}}$Node $u$ is considered in the subtree of node $i$ if any path from $1$ to $u$ must go through $i$.\n\n### Input\n\nThe first line of input contains a single integer $t$ ($1 \\leq t \\leq 10^5$) — the number of input test cases.\n\nThe first line of each test case contains one integer $n$ ($1 \\le n \\le 4\\cdot 10^5$) — the number of nodes in the tree.\n\nThe second line contains $n$ integers $w_1,w_2,\\ldots,w_n$ ($1 \\le w_i \\le n$) — the value of each node.\n\nThe next $n-1$ lines contain the edges of the tree. The $i$-th line contains two integers $u_i,v_i$ ($1\\le u_i,v_i \\le n$, $u_i \\neq v_i$) — an edge connecting $u_i$ and $v_i$. It is guaranteed that the given edges form a tree.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $4\\cdot 10^5$.\n\n### Output\n\nFor each test case, print one line.\n\nIf Cirno wins the game, print any possible node she may choose in the first turn.\n\nOtherwise, print \"0\" (without quotes).\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n4\n\n2 2 4 3\n\n1 2\n\n1 3\n\n2 4\n\n5\n\n1 2 3 4 5\n\n1 2\n\n2 3\n\n3 4\n\n4 5\n\n3\n\n1 2 3\n\n1 2\n\n1 3\n\n5\n\n3 1 3 4 5\n\n1 2\n\n2 3\n\n3 4\n\n4 5\n\n10\n\n1 2 3 2 4 3 3 4 4 3\n\n1 4\n\n4 6\n\n7 4\n\n6 9\n\n6 5\n\n7 8\n\n1 2\n\n2 3\n\n2 10\n\n```\n\n#### Output #1\n\n```\n2\n0\n2\n2\n10\n```\n\n### Note\n\nIn the first test case:\n\n1. If Cirno chooses $1$ or $3$ in the first turn, Daiyousei cannot make a move, so Daiyousei wins.\n2. If Cirno chooses $2$ or $4$ in the first turn, Daiyousei can only choose $3$, but after it Cirno cannot make a move, so Cirno wins.\n\nTherefore, all possible nodes Cirno may choose are $2$ and $4$.\n\nIn the second test case, regardless of which node Cirno chooses, Daiyousei cannot make a move, so Daiyousei wins.\n\nIn the third and fourth test case, the only possible node Cirno may choose in the first turn is $2$.\n\nIn the fifth test case, all possible nodes Cirno may choose in the first turn are $3,4,6,7$ and $10$.", "cfid": "2062E1"}
{"problem_id": "2063F1", "problem_title": "F1. Counting Is Not Fun (Easy Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2063/F1", "problem_statement": "This is the easy version of the problem. The difference between the versions is that in this version, the limits on $t$ and $n$ are smaller. You can hack only if you solved all versions of this problem.\n\nNow Little John is rich, and so he finally buys a house big enough to fit himself and his favorite bracket sequence. But somehow, he ended up with a lot of brackets! Frustrated, he penetrates through the ceiling with the \"buddha palm\".\n\nA bracket sequence is called balanced if it can be constructed by the following formal grammar.\n\n1. The empty sequence $\\varnothing$ is balanced.\n2. If the bracket sequence $A$ is balanced, then $\\mathtt{(}A\\mathtt{)}$ is also balanced.\n3. If the bracket sequences $A$ and $B$ are balanced, then the concatenated sequence $A B$ is also balanced.\n\nFor example, the sequences \"(())()\", \"()\", \"(()(()))\", and the empty sequence are balanced, while \"(()\" and \"(()))(\" are not.\n\nGiven a balanced bracket sequence $s$, a pair of indices $(i,j)$ ($i<j$) is called a good pair if $s_i$ is '(', $s_j$ is ')', and the two brackets are added simultaneously with respect to Rule 2 while constructing the sequence $s$. For example, the sequence \"(())()\" has three different good pairs, which are $(1,4)$, $(2,3)$, and $(5,6)$. One can show that any balanced bracket sequence of $2n$ brackets contains exactly $n$ different good pairs, and using any order of rules to construct the same bracket sequence will yield the same set of good pairs.\n\nEmily will play a bracket guessing game with John. The game is played as follows.\n\nInitially, John has a balanced bracket sequence $s$ containing $n$ different good pairs, which is not known to Emily. John tells Emily the value of $n$ and asks Emily to guess the sequence.\n\nThroughout $n$ turns, John gives Emily the following kind of clue on each turn.\n\n- $l\\;r$: The sequence $s$ contains a good pair $(l,r)$.\n\nThe clues that John gives Emily are pairwise distinct and do not contradict each other.\n\nAt a certain point, Emily can be certain that the balanced bracket sequence satisfying the clues given so far is unique. For example, assume Emily knows that $s$ has $3$ good pairs, and it contains the good pair $(2,5)$. Out of $5$ balanced bracket sequences with $3$ good pairs, there exists only one such sequence \"((()))\" with the good pair $(2,5)$. Therefore, one can see that Emily does not always need $n$ turns to guess $s$.\n\nTo find out the content of $s$ as early as possible, Emily wants to know the number of different balanced bracket sequences that match the clues after each turn. Surely, this is not an easy job for Emily, especially when she is given so many good pairs. Now it is your turn to help Emily. Given the clues, you must find the answer before and after each turn. As the answers may be huge, you need to find them modulo $998\\,244\\,353$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^3$). The description of the test cases follows.\n\nThe first line of each test case contains one integer $n$ ($2 \\le n \\le 5000$) — the number of good pairs.\n\nThen, each of the $n$ following lines contains two integers $l_i$ and $r_i$ representing the $i$-th clue ($1 \\le l_i < r_i \\le 2n$).\n\nThe clues in one test case are pairwise distinct and do not contradict each other.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5000$.\n\n### Output\n\nFor each test case, output $n+1$ integers on a separate line:\n\n- The first integer is the answer before all clues, modulo $998\\,244\\,353$.\n- For all $i \\ge 1$, the $i+1$-th integer is the answer after the $i$-th clue, modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3\n\n2 5\n\n1 6\n\n3 4\n\n4\n\n1 6\n\n7 8\n\n2 3\n\n4 5\n\n6\n\n2 3\n\n1 6\n\n7 8\n\n9 12\n\n10 11\n\n4 5\n\n```\n\n#### Output #1\n\n```\n5 1 1 1\n14 2 2 1 1\n132 42 5 2 1 1 1\n```\n\n### Note\n\nThe first test case of the example is explained in the problem description.\n\nThe third test case of the example is explained as follows. It can be shown that there are $132$ balanced bracket sequences with $6$ good pairs. The answers after each clue are given as follows:\n\n1. You are given the good pair $(2,3)$. There are $42$ balanced bracket sequences having the good pair $(2,3)$.\n2. You are given the good pair $(1,6)$. There are $5$ balanced bracket sequences having good pairs $(2,3)$, $(1,6)$.\n3. You are given the good pair $(7,8)$. There are $2$ balanced bracket sequences having the three good pairs. The strings are \"(()())()(())\" and \"(()())()()()\", respectively.\n4. You are given the good pair $(9,12)$. There is only one balanced bracket sequence having the four good pairs. The content of $s$ is therefore the only string, which is \"(()())()(())\".\n\nThen, the number of bracket sequences after the fifth and the sixth clue are both $1$ as you already know the content of $s$.", "cfid": "2063F1"}
{"problem_id": "2063F2", "problem_title": "F2. Counting Is Not Fun (Hard Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2063/F2", "problem_statement": "This is the hard version of the problem. The difference between the versions is that in this version, the limits on $t$ and $n$ are bigger. You can hack only if you solved all versions of this problem.\n\nNow Little John is rich, and so he finally buys a house big enough to fit himself and his favorite bracket sequence. But somehow, he ended up with a lot of brackets! Frustrated, he penetrates through the ceiling with the \"buddha palm\".\n\nA bracket sequence is called balanced if it can be constructed by the following formal grammar.\n\n1. The empty sequence $\\varnothing$ is balanced.\n2. If the bracket sequence $A$ is balanced, then $\\mathtt{(}A\\mathtt{)}$ is also balanced.\n3. If the bracket sequences $A$ and $B$ are balanced, then the concatenated sequence $A B$ is also balanced.\n\nFor example, the sequences \"(())()\", \"()\", \"(()(()))\", and the empty sequence are balanced, while \"(()\" and \"(()))(\" are not.\n\nGiven a balanced bracket sequence $s$, a pair of indices $(i,j)$ ($i<j$) is called a good pair if $s_i$ is '(', $s_j$ is ')', and the two brackets are added simultaneously with respect to Rule 2 while constructing the sequence $s$. For example, the sequence \"(())()\" has three different good pairs, which are $(1,4)$, $(2,3)$, and $(5,6)$. One can show that any balanced bracket sequence of $2n$ brackets contains exactly $n$ different good pairs, and using any order of rules to construct the same bracket sequence will yield the same set of good pairs.\n\nEmily will play a bracket guessing game with John. The game is played as follows.\n\nInitially, John has a balanced bracket sequence $s$ containing $n$ different good pairs, which is not known to Emily. John tells Emily the value of $n$ and asks Emily to guess the sequence.\n\nThroughout $n$ turns, John gives Emily the following kind of clue on each turn.\n\n- $l\\;r$: The sequence $s$ contains a good pair $(l,r)$.\n\nThe clues that John gives Emily are pairwise distinct and do not contradict each other.\n\nAt a certain point, Emily can be certain that the balanced bracket sequence satisfying the clues given so far is unique. For example, assume Emily knows that $s$ has $3$ good pairs, and it contains the good pair $(2,5)$. Out of $5$ balanced bracket sequences with $3$ good pairs, there exists only one such sequence \"((()))\" with the good pair $(2,5)$. Therefore, one can see that Emily does not always need $n$ turns to guess $s$.\n\nTo find out the content of $s$ as early as possible, Emily wants to know the number of different balanced bracket sequences that match the clues after each turn. Surely, this is not an easy job for Emily, especially when she is given so many good pairs. Now it is your turn to help Emily. Given the clues, you must find the answer before and after each turn. As the answers may be huge, you need to find them modulo $998\\,244\\,353$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains one integer $n$ ($2 \\le n \\le 3 \\cdot 10^5$) — the number of good pairs.\n\nThen, each of the $n$ following lines contains two integers $l_i$ and $r_i$ representing the $i$-th clue ($1 \\le l_i < r_i \\le 2n$).\n\nThe clues in one test case are pairwise distinct and do not contradict each other.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $3 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output $n+1$ integers on a separate line:\n\n- The first integer is the answer before all clues, modulo $998\\,244\\,353$.\n- For all $i \\ge 1$, the $i+1$-th integer is the answer after the $i$-th clue, modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3\n\n2 5\n\n1 6\n\n3 4\n\n4\n\n1 6\n\n7 8\n\n2 3\n\n4 5\n\n6\n\n2 3\n\n1 6\n\n7 8\n\n9 12\n\n10 11\n\n4 5\n\n```\n\n#### Output #1\n\n```\n5 1 1 1\n14 2 2 1 1\n132 42 5 2 1 1 1\n```\n\n### Note\n\nThe first test case of the example is explained in the problem description.\n\nThe third test case of the example is explained as follows. It can be shown that there are $132$ balanced bracket sequences with $6$ good pairs. The answers after each clue are given as follows:\n\n1. You are given the good pair $(2,3)$. There are $42$ balanced bracket sequences having the good pair $(2,3)$.\n2. You are given the good pair $(1,6)$. There are $5$ balanced bracket sequences having good pairs $(2,3)$, $(1,6)$.\n3. You are given the good pair $(7,8)$. There are $2$ balanced bracket sequences having the three good pairs. The strings are \"(()())()(())\" and \"(()())()()()\", respectively.\n4. You are given the good pair $(9,12)$. There is only one balanced bracket sequence having the four good pairs. The content of $s$ is therefore the only string, which is \"(()())()(())\".\n\nThen, the number of bracket sequences after the fifth and the sixth clue are both $1$ as you already know the content of $s$.", "cfid": "2063F2"}
{"problem_id": "2063E", "problem_title": "E. Triangle Tree", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2063/E", "problem_statement": "One day, a giant tree grew in the countryside. Little John, with his childhood eagle, decided to make it his home. Little John will build a structure on the tree with galvanized square steel. However, little did he know, he could not build what is physically impossible.\n\nYou are given a rooted tree$^{\\text{∗}}$ containing $n$ vertices rooted at vertex $1$. A pair of vertices $(u,v)$ is called a good pair if $u$ is not an ancestor$^{\\text{†}}$ of $v$ and $v$ is not an ancestor of $u$. For any two vertices, $\\text{dist}(u,v)$ is defined as the number of edges on the unique simple path from $u$ to $v$, and $\\text{lca}(u,v)$ is defined as their [lowest common ancestor](https://en.wikipedia.org/wiki/Lowest_common_ancestor).\n\nA function $f(u,v)$ is defined as follows.\n\n- If $(u,v)$ is a good pair, $f(u,v)$ is the number of distinct integer values $x$ such that there exists a non-degenerate triangle$^{\\text{‡}}$ formed by side lengths $\\text{dist}(u,\\text{lca}(u,v))$, $\\text{dist}(v,\\text{lca}(u,v))$, and $x$.\n- Otherwise, $f(u,v)$ is $0$.\n\nYou need to find the following value: \n\n$$\\sum_{i = 1}^{n-1} \\sum_{j = i+1}^n f(i,j).$$\n\ntext{∗}}$A tree is a connected graph without cycles. A rooted tree is a tree where one vertex is special and called the root.\n\n$^{\\text{†}}$An ancestor of vertex $v$ is any vertex on the simple path from $v$ to the root, including the root, but not including $v$. The root has no ancestors.\n\n$^{\\text{‡}}$A triangle with side lengths $a$, $b$, $c$ is non-degenerate when $a+b > c$, $a+c > b$, $b+c > a$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 3 \\cdot 10^5$).\n\nEach of the next $n-1$ lines contains two integers $u_i$ and $v_i$, denoting the two vertices connected by an edge ($1 \\le u_i,v_i \\le n$, $u_i \\neq v_i$).\n\nIt is guaranteed that the given edges form a tree.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $3 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the answer on a separate line.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3\n\n1 2\n\n1 3\n\n3\n\n1 2\n\n3 2\n\n5\n\n2 3\n\n1 5\n\n4 2\n\n1 2\n\n11\n\n2 1\n\n2 3\n\n2 4\n\n4 5\n\n6 5\n\n5 7\n\n4 8\n\n8 9\n\n7 10\n\n10 11\n\n```\n\n#### Output #1\n\n```\n1\n0\n4\n29\n```\n\n### Note\n\nOn the first test case, the only good pair $(i,j)$ satisfying $i<j$ is $(2,3)$. Here, $\\text{lca}(2,3)$ is $1$, and the two distances are $1$ and $1$.\n\nThere is only one value of $x$ for two side lengths $1$ and $1$, which is $1$. Therefore, the answer for the first test case is $1$.\n\nOn the second test case, there is no good pair. Therefore, the answer for the second test case is $0$.\n\nOn the third test case, the good pairs $(i,j)$ satisfying $i<j$ are as follows.\n\n- $(2,5)$: $\\text{lca}(2,5)$ is $1$, distances are $1$ and $1$. There is only one possible value of $x$, which is $1$.\n- $(3,4)$: $\\text{lca}(3,4)$ is $2$, distances are $1$ and $1$. There is only one possible value of $x$, which is $1$.\n- $(3,5)$: $\\text{lca}(3,5)$ is $1$, distances are $2$ and $1$. There is only one possible value of $x$, which is $2$.\n- $(4,5)$: $\\text{lca}(4,5)$ is $1$, distances are $2$ and $1$. There is only one possible value of $x$, which is $2$.\n\nTherefore, the answer for the third test case is $1+1+1+1=4$.", "cfid": "2063E"}
{"problem_id": "2063D", "problem_title": "D. Game With Triangles", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2063/D", "problem_statement": "Even Little John needs money to buy a house. But he recently lost his job; how will he earn money now? Of course, by playing a game that gives him money as a reward! Oh well, maybe not those kinds of games you are thinking about.\n\nThere are $n+m$ distinct points $(a_1,0), (a_2,0), \\ldots, (a_{n},0), (b_1,2), (b_2,2), \\ldots, (b_{m},2)$ on the plane. Initially, your score is $0$. To increase your score, you can perform the following operation:\n\n- Choose three distinct points which are not [collinear](https://en.wikipedia.org/wiki/Collinearity);\n- Increase your score by the area of the triangle formed by these three points;\n- Then, erase the three points from the plane.\n\n![](https://espresso.codeforces.com/5f6a73286fffbc2708f1d388ed58ca5bc0d69d23.png)An instance of the game, where the operation is performed twice.\n\nLet $k_{\\max}$ be the maximum number of operations that can be performed. For example, if it is impossible to perform any operation, $k_\\max$ is $0$. Additionally, define $f(k)$ as the maximum possible score achievable by performing the operation exactly $k$ times. Here, $f(k)$ is defined for all integers $k$ such that $0 \\le k \\le k_{\\max}$.\n\nFind the value of $k_{\\max}$, and find the values of $f(x)$ for all integers $x=1,2,\\ldots,k_{\\max}$ independently.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le {3 \\cdot 10^4}$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\le n,m \\le 2 \\cdot 10^5$).\n\nThe second line of each test case contains $n$ pairwise distinct integers $a_1,a_2,\\ldots,a_{n}$ — the points on $y=0$ ($-10^9 \\le a_i \\le 10^9$).\n\nThe third line of each test case contains $m$ pairwise distinct integers $b_1,b_2,\\ldots,b_{m}$ — the points on $y=2$ ($-10^9 \\le b_i \\le 10^9$).\n\nIt is guaranteed that both the sum of $n$ and the sum of $m$ over all test cases do not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, given that the maximum number of operations is $k_{\\max}$, you must output at most two lines:\n\n- The first line contains the value of $k_{\\max}$;\n- The second line contains $k_{\\max}$ integers denoting $f(1),f(2),\\ldots,f(k_{\\max})$. You are allowed to omit this line if $k_{\\max}$ is $0$.\n\nNote that under the constraints of this problem, it can be shown that all values of $f(x)$ are integers no greater than $10^{16}$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n1 3\n\n0\n\n0 1 -1\n\n2 4\n\n0 100\n\n-100 -50 0 50\n\n2 4\n\n0 1000\n\n-100 -50 0 50\n\n6 6\n\n20 1 27 100 43 42\n\n100 84 1 24 22 77\n\n8 2\n\n564040265 -509489796 469913620 198872582 -400714529 553177666 131159391 -20796763\n\n-1000000000 1000000000\n\n```\n\n#### Output #1\n\n```\n1\n2\n2\n150 200\n2\n1000 200\n4\n99 198 260 283\n2\n2000000000 2027422256\n```\n\n### Note\n\nOn the first test case, there are $1+3=4$ points $(0,0),(0,2),(1,2),(-1,2)$.\n\nIt can be shown that you cannot perform two or more operations. The value of $k_{\\max}$ is $1$, and you are only asked for the value of $f(1)$.\n\nYou can choose $(0,0)$, $(-1,2)$, and $(1,2)$ as the three vertices of the triangle. After that, your score is increased by the area of the triangle, which is $2$. Then, the three points are erased from the plane. It can be shown that the maximum value of your score after performing one operation is $2$. Therefore, the value of $f(1)$ is $2$.\n\nOn the fifth test case, there are $8+2=10$ points.\n\nIt can be shown that you cannot perform three or more operations. The value of $k_{\\max}$ is $2$, and you are asked for the values $f(1)$ and $f(2)$.\n\nTo maximize the score with only one operation, you can choose three points $(198\\,872\\,582,0)$, $(-1\\,000\\,000\\,000,2)$, and $(1\\,000\\,000\\,000,2)$. Then, the three points are erased from the plane. It can be shown that the maximum value of your score after performing one operation is $2\\,000\\,000\\,000$. Therefore, the value of $f(1)$ is $2\\,000\\,000\\,000$.\n\nTo maximize the score with exactly two operations, you can choose the following sequence of operations.\n\n- Choose three points $(-509\\,489\\,796,0)$, $(553\\,177\\,666,0)$, and $(-1\\,000\\,000\\,000,2)$. The three points are erased.\n- Choose three points $(-400\\,714\\,529,0)$, $(564\\,040\\,265,0)$, and $(1\\,000\\,000\\,000,2)$. The three points are erased.\n\nThen, the score after two operations becomes $2\\,027\\,422\\,256$. It can be shown that the maximum value of your score after performing exactly two operations is $2\\,027\\,422\\,256$. Therefore, the value of $f(2)$ is $2\\,027\\,422\\,256$.", "cfid": "2063D"}
{"problem_id": "2061E", "problem_title": "E. Kevin and And", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2061/E", "problem_statement": "Kevin has an integer sequence $a$ of length $n$. At the same time, Kevin has $m$ types of magic, where the $i$-th type of magic can be represented by an integer $b_i$.\n\nKevin can perform at most $k$ (possibly zero) magic operations. In each operation, Kevin can do the following:\n\n- Choose two indices $i$ ($1\\leq i\\leq n$) and $j$ ($1\\leq j\\leq m$), and then update $a_i$ to $a_i\\ \\&\\ b_j$. Here, $\\&$ denotes the [bitwise AND operation](https://en.wikipedia.org/wiki/Bitwise_operation#AND).\n\nFind the minimum possible sum of all numbers in the sequence $a$ after performing at most $k$ operations.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n, m, k$ ($1\\leq n \\leq 10^5$, $1\\leq m \\leq 10$, $0\\leq k\\leq nm$) — the length of $a$, the number of types of magic, and the maximum number of operations.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0\\leq a_i < 2^{30}$).\n\nThe third line contains $m$ integers $b_1, b_2, \\ldots, b_m$ ($0\\leq b_i < 2^{30}$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, output one integer — the minimum possible sum of all numbers in the sequence $a$ after performing at most $k$ operations.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n1 3 2\n\n7\n\n5 6 3\n\n2 3 2\n\n5 6\n\n5 6 3\n\n10 2 5\n\n3 1 4 1 5 9 2 6 5 3\n\n7 8\n\n5 1 0\n\n1073741823 1073741823 1073741823 1073741823 1073741823\n\n1073741823\n\n1 1 0\n\n0\n\n0\n\n```\n\n#### Output #1\n\n```\n1\n3\n11\n5368709115\n0\n```\n\n### Note\n\nIn the first test case, one possible way could be:\n\n- Update $a_1$ to $a_1\\ \\&\\ b_1$. The sequence will become $[5]$.\n- Update $a_1$ to $a_1\\ \\&\\ b_3$. The sequence will become $[1]$.\n\nIn the second test case, one possible way could be:\n\n- Update $a_1$ to $a_1\\ \\&\\ b_3$. The sequence will become $[1, 6]$.\n- Update $a_2$ to $a_2\\ \\&\\ b_3$. The sequence will become $[1, 2]$.", "cfid": "2061E"}
{"problem_id": "2061G", "problem_title": "G. Kevin and Teams", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2061/G", "problem_statement": "This is an interactive problem.\n\nKevin has $n$ classmates, numbered $1, 2, \\ldots, n$. Any two of them may either be friends or not friends.\n\nKevin wants to select $2k$ classmates to form $k$ teams, where each team contains exactly $2$ people. Each person can belong to at most one team.\n\nLet $u_i$ and $v_i$ be two people in the $i$-th team. To avoid potential conflicts during team formation, the team members must satisfy one of the following two conditions:\n\n- For all $i$ ($1\\leq i \\leq k$), classmate $u_i$ and $v_i$ are friends.\n- For all $i$ ($1\\leq i \\leq k$), classmate $u_i$ and $v_i$ are not friends.\n\nKevin wants to determine the maximum $k$ such that, regardless of the friendship relationships among the $n$ people, he can always find $2k$ people to form the teams. After that, he needs to form $k$ teams. But asking whether two classmates are friends is awkward, so Kevin wants to achieve this while asking about the friendship status of no more than $n$ pairs of classmates.\n\nThe interactor is adaptive. It means that the hidden relationship between classmates is not fixed before the interaction and will change during the interaction.\n\n### Interaction\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains one positive integer $n$ ($2\\leq n \\leq 10^5$) — the number of classmates.\n\nFirst, you should output an integer $k$ ($1\\leq k\\leq \\frac{n}2$) — the maximum number of teams you can form.\n\nYou can make queries in the following way — print one line of the form $?\\;u\\;v$ where $1\\leq u\\neq v \\leq n$. After that, read a single integer: $0$ or $1$ indicating whether they are friends. $1$ means they are friends while $0$ means not.\n\nIf you want to print the answer, output $!\\;u_1\\;v_1\\;u_2\\;v_2\\;\\ldots\\;u_k\\;v_k$. You should output exactly $2k$ distinct numbers. Then, the interaction continues with the next test case.\n\nYou can make at most $n$ queries. Printing the answer does not count towards the number of queries made.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\nAfter printing each query do not forget to output the end of line and flush$^{\\text{∗}}$ the output. Otherwise, you will get Idleness limit exceeded verdict.\n\nIf, at any interaction step, you read $-1$ instead of valid data, your solution must exit immediately. This means that your solution will reveive Wrong answer because of an invalid query or any other mistake. Failing to exit can result in an arbitrary verdict because your solution will continue to read from a closed stream.\n\nHacks\n\nThe interactor for hacks is not adaptive. To make a hack, use the following format.\n\nThe first line contains the word \"manual\".\n\nThe second line contains a single integer $t$ ($1\\leq t \\leq 10^4$) — the number of test cases.\n\nThe first line of each test case contains an integer $n$ ($2\\leq n \\leq 10^5$) — the number of classmates.\n\nThe second line of each test case contains a string $s$ consisting of '0' and '1' of length $\\frac{n(n - 1)}{2}$ — indicating the relationship between $(1, 2)$, $(1, 3)$, $\\ldots$, $(1, n)$, $(2, 3)$, $(2, 4)$, $\\ldots$, $(2, n)$, $\\ldots$, $(n - 1, n)$. '1' means being friends and '0' means not being friends.\n\nThe following is the input of example.\n\n```\n\nmanual\n\n2\n\n3\n\n011\n\n5\n\n1011101011\n\n```\n\nThe sum of $n$ over all test cases must not exceed $10^5$.\n\nThere is an additional constraint for hacks: The sum of $\\frac{n(n-1)}{2}$ over all test cases must not exceed $10^7$.\n\n$^{\\text{∗}}$To flush, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- sys.stdout.flush() in Python;\n- see the documentation for other languages.\n\n### Example\n\n#### Input #1\n\n```\n2\n3\n\n1\n\n5\n\n1\n\n0\n\n1\n\n0\n\n0\n```\n\n#### Output #1\n\n```\n\n1\n? 1 2\n\n! 1 2\n\n2\n? 1 2\n\n? 3 4\n\n? 3 5\n\n? 1 3\n\n? 2 4\n\n! 1 2 3 5\n```\n\n### Note\n\nIn the first test case:\n\nKevin claims he can form $1$ team regardless of the friendship relationships among the $3$ people.\n\nKevin asks about the friendship relationship between people $1$ and $2$. The jury responds that they are friends.\n\nKevin answers that he can form a team with people $1$ and $2$.\n\nIn the second test case:\n\nKevin claims he can form $2$ teams regardless of the friendship relationships among the $5$ people.\n\nKevin asks about the friendship relationship between people $(1, 2), (3, 4), (3, 5), (1, 3), (2, 4)$. The jury responds with $1, 0, 1, 0, 0$.\n\nKevin answers that he can form two teams with people $(1, 2)$ and $(3, 5)$.\n\nIt is also possible to form two teams with people $(1, 3)$ and $(2, 4)$, since they are both not friends.", "cfid": "2061G"}
{"problem_id": "2061F1", "problem_title": "F1. Kevin and Binary String (Easy Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2061/F1", "problem_statement": "This is the easy version of the problem. The difference between the versions is that in this version, string $t$ consists of only '0' and '1'. You can hack only if you solved all versions of this problem.\n\nKevin has a binary string $s$ of length $n$. Kevin can perform the following operation:\n\n- Choose two adjacent blocks of $s$ and swap them.\n\nA block is a maximal substring$^{\\text{∗}}$ of identical characters. Formally, denote $s[l,r]$ as the substring $s_l s_{l+1} \\ldots s_r$. A block is $s[l,r]$ satisfying:\n\n- $l=1$ or $s_l\\not=s_{l-1}$.\n- $s_l=s_{l+1} = \\ldots = s_{r}$.\n- $r=n$ or $s_r\\not=s_{r+1}$.\n\nAdjacent blocks are two blocks $s[l_1,r_1]$ and $s[l_2,r_2]$ satisfying $r_1+1=l_2$.\n\nFor example, if $s=\\mathtt{000}\\,\\mathbf{11}\\,\\mathbf{00}\\,\\mathtt{111}$, Kevin can choose the two blocks $s[4,5]$ and $s[6,7]$ and swap them, transforming $s$ into $\\mathtt{000}\\,\\mathbf{00}\\,\\mathbf{11}\\,\\mathtt{111}$.\n\nGiven a string $t$ of length $n$ consisting of '0', '1' and '?', Kevin wants to determine the minimum number of operations required to perform such that for any index $i$ ($1\\le i\\le n$), if $t_i\\not=$ '?' then $s_i=t_i$. If it is impossible, output $-1$.\n\n$^{\\text{∗}}$A string $a$ is a substring of a string $b$ if $a$ can be obtained from $b$ by the deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a string $s$ consisting of '0' and '1'.\n\nThe second line of each test case contains a string $t$ consisting of '0' and '1'.\n\nIt is guaranteed that the lengths of $s$ and $t$ are the same.\n\nIt is guaranteed that the sum of the length of $s$ over all test cases will not exceed $4\\cdot 10^5$.\n\n### Output\n\nFor each test case, output one integer — the minimum number of operations required. If it is impossible, output $-1$.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n0001100111\n\n0000011111\n\n010101\n\n111000\n\n0101\n\n0110\n\n0101\n\n1010\n\n011001\n\n001110\n\n0\n\n1\n\n```\n\n#### Output #1\n\n```\n1\n3\n1\n-1\n-1\n-1\n```\n\n### Note\n\nIn the first test case, the possible way is shown in the statement.\n\nIn the second test case, one possible way could be:\n\n- Swap blocks $[2, 2], [3, 3]$, $s$ will become $\\mathtt{001101}$.\n- Swap blocks $[3, 4], [5, 5]$, $s$ will become $\\mathtt{000111}$.\n- Swap blocks $[1, 3], [4, 6]$, $s$ will become $\\mathtt{111000}$.", "cfid": "2061F1"}
{"problem_id": "2060G", "problem_title": "G. Bugged Sort", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2060/G", "problem_statement": "Today, Alice has given Bob arrays for him to sort in increasing order again! At this point, no one really knows how many times she has done this.\n\nBob is given two sequences $a$ and $b$, both of length $n$. All integers in the range from $1$ to $2n$ appear exactly once in either $a$ or $b$. In other words, the concatenated$^{\\text{∗}}$ sequence $a+b$ is a permutation$^{\\text{†}}$ of length $2n$.\n\nBob must sort both sequences in increasing order at the same time using Alice's swap function. Alice's swap function is implemented as follows:\n\n- Given two indices $i$ and $j$ ($i \\neq j$), it swaps $a_i$ with $b_j$, and swaps $b_i$ with $a_j$.\n\nGiven sequences $a$ and $b$, please determine if both sequences can be sorted in increasing order simultaneously after using Alice's swap function any number of times.\n\n$^{\\text{∗}}$The concatenated sequence $a+b$ denotes the sequence $[a_1, a_2, a_3, \\ldots , b_1, b_2, b_3, \\ldots]$.\n\n$^{\\text{†}}$A permutation of length $m$ contains all integers from $1$ to $m$ in some order.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($3 \\le n \\le 2 \\cdot 10^5$).\n\nThe second line of each test case contains $a_1,a_2,\\ldots,a_n$ ($1 \\le a_i \\le 2n$).\n\nThe third line of each test case contains $b_1,b_2,\\ldots,b_n$ ($1 \\le b_i \\le 2n$).\n\nIt is guaranteed that all integers in the range $[1,2n]$ appear exactly once in either $a$ or $b$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nIf it is possible to sort both sequences simultaneously, print \"YES\" on a new line. Otherwise, print \"NO\" on a new line.\n\nYou can output the answer in any case. For example, the strings \"yEs\", \"yes\", and \"Yes\" will also be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3\n\n2 1 3\n\n4 6 5\n\n3\n\n2 1 5\n\n4 3 6\n\n4\n\n1 6 4 3\n\n5 2 8 7\n\n4\n\n5 3 7 1\n\n8 6 4 2\n\n7\n\n5 1 9 12 3 13 7\n\n2 4 11 14 6 10 8\n\n```\n\n#### Output #1\n\n```\nNO\nYES\nNO\nYES\nYES\n```\n\n### Note\n\nIn the first test case, it can be shown that it is impossible.\n\nIn the second test case, Bob can perform one operation with indices $i=1$ and $j=2$. The arrays become $[3,4,5]$ and $[1,2,6]$ respectively. Both arrays are now sorted.", "cfid": "2060G"}
{"problem_id": "2060F", "problem_title": "F. Multiplicative Arrays", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2060/F", "problem_statement": "You're given integers $k$ and $n$. For each integer $x$ from $1$ to $k$, count the number of integer arrays $a$ such that all of the following are satisfied:\n\n- $1 \\leq |a| \\leq n$ where $|a|$ represents the length of $a$.\n- $1 \\leq a_i \\leq k$ for all $1 \\leq i \\leq |a|$.\n- $a_1 \\times a_2 \\times \\dots \\times a_{|a|}=x$ (i.e., the product of all elements is $x$).\n\nNote that two arrays $b$ and $c$ are different if either their lengths are different, or if there exists an index $1 \\leq i \\leq |b|$ such that $b_i\\neq c_i$.\n\nOutput the answer modulo $998\\,244\\,353$.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\leq t\\leq 10^3$) — the number of independent test cases.\n\nThe only line of each test case contains two integers $k$ and $n$ ($1 \\leq k \\leq 10^5, 1\\leq n \\leq 9\\cdot 10^8$).\n\nIt is guaranteed that the sum of $k$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, output $k$ space-separated integers on a new line: the number of arrays for $x=1,2,\\ldots,k$, modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2 2\n\n4 3\n\n10 6969420\n\n```\n\n#### Output #1\n\n```\n2 3\n3 6 6 10\n6969420 124188773 124188773 729965558 124188773 337497990 124188773 50981194 729965558 337497990\n```\n\n### Note\n\nIn the first test case, there are $2$ arrays $a$ with $|a|\\leq 2$ and the product of elements equal to $1$:\n\n- $[1]$\n- $[1,1]$\n\nThere are $3$ arrays $a$ with $|a|\\leq 2$ and the product of elements equal to $2$:\n\n- $[2]$\n- $[1,2]$\n- $[2,1]$", "cfid": "2060F"}
{"problem_id": "2056F1", "problem_title": "F1. Xor of Median (Easy Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2056/F1", "problem_statement": "This is the easy version of the problem. The difference between the versions is that in this version, the constraints on $t$, $k$, and $m$ are lower. You can hack only if you solved all versions of this problem.\n\nA sequence $a$ of $n$ integers is called good if the following condition holds:\n\n- Let $\\text{cnt}_x$ be the number of occurrences of $x$ in sequence $a$. For all pairs $0 \\le i < j < m$, at least one of the following has to be true: $\\text{cnt}_i = 0$, $\\text{cnt}_j = 0$, or $\\text{cnt}_i \\le \\text{cnt}_j$. In other words, if both $i$ and $j$ are present in sequence $a$, then the number of occurrences of $i$ in $a$ is less than or equal to the number of occurrences of $j$ in $a$.\n\nYou are given integers $n$ and $m$. Calculate the value of the bitwise XOR of the median$^{\\text{∗}}$ of all good sequences $a$ of length $n$ with $0\\le a_i < m$.\n\nNote that the value of $n$ can be very large, so you are given its binary representation instead.\n\n$^{\\text{∗}}$The median of a sequence $a$ of length $n$ is defined as the $\\left\\lfloor\\frac{n + 1}{2}\\right\\rfloor$-th smallest value in the sequence.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 50$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $k$ and $m$ ($1 \\le k \\le 200$, $1 \\le m \\le 500$) — the number of bits in $n$ and the upper bound on the elements in sequence $a$.\n\nThe second line of each test case contains a binary string of length $k$ — the binary representation of $n$ with no leading zeros.\n\nIt is guaranteed that the sum of $k$ over all test cases does not exceed $200$.\n\n### Output\n\nFor each test case, output a single integer representing the bitwise XOR of the median of all good sequences $a$ of length $n$ where $0\\le a_i < m$.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n2 3\n\n10\n\n2 3\n\n11\n\n5 1\n\n11101\n\n7 9\n\n1101011\n\n17 34\n\n11001010001010010\n\n1 500\n\n1\n\n```\n\n#### Output #1\n\n```\n3\n2\n0\n8\n32\n0\n```\n\n### Note\n\nIn the first example, $n = 10_2 = 2$ and $m = 3$. All possible sequences with elements less than $m$ are: $[0, 0]$, $[0, 1]$, $[0, 2]$, $[1, 0]$, $[1, 1]$, $[1, 2]$, $[2, 0]$, $[2, 1]$, $[2, 2]$. All of them are good, so the answer is: $0 \\oplus 0 \\oplus 0 \\oplus 0 \\oplus 1 \\oplus 1 \\oplus 0 \\oplus 1 \\oplus 2 = 3$.\n\nIn the second example, $n = 11_2 = 3$ and $m = 3$. Some good sequences are $[2, 2, 2]$, $[1, 0, 1]$, and $[2, 0, 1]$. However, a sequence $[2, 0, 0]$ is not good, because $\\text{cnt}_0 = 2$, $\\text{cnt}_2 = 1$. Therefore, if we set $i = 0$ and $j = 2$, $i < j$ holds, but $\\text{cnt}_i \\le \\text{cnt}_j$ does not.", "cfid": "2056F1"}
{"problem_id": "2056E", "problem_title": "E. Nested Segments", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2056/E", "problem_statement": "A set $A$ consisting of pairwise distinct segments $[l, r]$ with integer endpoints is called good if $1\\le l\\le r\\le n$, and for any pair of distinct segments $[l_i, r_i], [l_j, r_j]$ in $A$, exactly one of the following conditions holds:\n\n- $r_i < l_j$ or $r_j < l_i$ (the segments do not intersect)\n- $l_i \\le l_j \\le r_j \\le r_i$ or $l_j \\le l_i \\le r_i \\le r_j$ (one segment is fully contained within the other)\n\nYou are given a good set $S$ consisting of $m$ pairwise distinct segments $[l_i, r_i]$ with integer endpoints. You want to add as many additional segments to the set $S$ as possible while ensuring that set $S$ remains good.\n\nSince this task is too easy, you need to determine the number of different ways to add the maximum number of additional segments to $S$, ensuring that the set remains good. Two ways are considered different if there exists a segment that is being added in one of the ways, but not in the other.\n\nFormally, you need to find the number of good sets $T$ of distinct segments, such that $S$ is a subset of $T$ and $T$ has the maximum possible size. Since the result might be very large, compute the answer modulo $998\\,244\\,353$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\le n \\le 2 \\cdot 10^5$, $0 \\le m \\le 2 \\cdot 10^5$) — the maximum right endpoint of the segments, and the size of $S$.\n\nThe $i$-th of the next $m$ lines contains two integers $l_i$ and $r_i$ ($1 \\le l_i \\le r_i \\le n$) — the boundaries of the segments in set $S$.\n\nIt is guaranteed that the given set $S$ is good, and the segments in set $S$ are pairwise distinct.\n\nIt is guaranteed that both the sum of $n$ and the sum of $m$ over all test cases do not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer representing the number of different ways, modulo $998\\,244\\,353$, that you can add the maximum number of additional segments to set $S$ while ensuring that set $S$ remains good.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n1 0\n\n2 3\n\n1 1\n\n2 2\n\n1 2\n\n5 2\n\n1 3\n\n2 3\n\n4 1\n\n1 1\n\n6 2\n\n1 3\n\n4 6\n\n2300 0\n\n```\n\n#### Output #1\n\n```\n1\n1\n2\n5\n4\n187997613\n```\n\n### Note\n\nIn the first example, the only possible segment is $[1, 1]$, so $T = \\{[1, 1]\\}$ has the maximum size, and it is the only solution.\n\nIn the second example, it is not possible to add any additional segments to set $S$. Hence, the only way to add segments to $S$ is adding nothing.\n\nIn the third example, it is possible to add $7$ additional segments to $S$ while ensuring that the set remains good. It can be proven that adding more than $7$ additional segments to $S$ is not possible. There are exactly $2$ different ways to add these $7$ segments to $S$, and their respective sets $T$ are shown below:\n\n- $\\{[1, 1], [1, 3], [1, 4], [1, 5], [2, 2], [2, 3], [3, 3], [4, 4], [5, 5]\\}$\n- $\\{[1, 1], [1, 3], [1, 5], [2, 2], [2, 3], [3, 3], [4, 4], [4, 5], [5, 5]\\}$.\n\nIn the fourth example, there are exactly $5$ different ways to add a maximum of $6$ additional segments to $S$, and their respective sets $T$ are shown below:\n\n- $\\{[1, 1], [1, 2], [1, 3], [1, 4], [2, 2], [3, 3], [4, 4]\\}$\n- $\\{[1, 1], [1, 2], [1, 4], [2, 2], [3, 3], [3, 4], [4, 4]\\}$\n- $\\{[1, 1], [1, 3], [1, 4], [2, 2], [2, 3], [3, 3], [4, 4]\\}$\n- $\\{[1, 1], [1, 4], [2, 2], [2, 3], [2, 4], [3, 3], [4, 4]\\}$\n- $\\{[1, 1], [1, 4], [2, 2], [2, 4], [3, 3], [3, 4], [4, 4]\\}$", "cfid": "2056E"}
{"problem_id": "2056F2", "problem_title": "F2. Xor of Median (Hard Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2056/F2", "problem_statement": "This is the hard version of the problem. The difference between the versions is that in this version, the constraints on $t$, $k$, and $m$ are higher. You can hack only if you solved all versions of this problem.\n\nA sequence $a$ of $n$ integers is called good if the following condition holds:\n\n- Let $\\text{cnt}_x$ be the number of occurrences of $x$ in sequence $a$. For all pairs $0 \\le i < j < m$, at least one of the following has to be true: $\\text{cnt}_i = 0$, $\\text{cnt}_j = 0$, or $\\text{cnt}_i \\le \\text{cnt}_j$. In other words, if both $i$ and $j$ are present in sequence $a$, then the number of occurrences of $i$ in $a$ is less than or equal to the number of occurrences of $j$ in $a$.\n\nYou are given integers $n$ and $m$. Calculate the value of the bitwise XOR of the median$^{\\text{∗}}$ of all good sequences $a$ of length $n$ with $0\\le a_i < m$.\n\nNote that the value of $n$ can be very large, so you are given its binary representation instead.\n\n$^{\\text{∗}}$The median of a sequence $a$ of length $n$ is defined as the $\\left\\lfloor\\frac{n + 1}{2}\\right\\rfloor$-th smallest value in the sequence.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $k$ and $m$ ($1 \\le k \\le 2 \\cdot 10^5$, $1 \\le m \\le 10^9$) — the number of bits in $n$ and the upper bound on the elements in sequence $a$.\n\nThe second line of each test case contains a binary string of length $k$ — the binary representation of $n$ with no leading zeros.\n\nIt is guaranteed that the sum of $k$ over all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer representing the bitwise XOR of the median of all good sequences $a$ of length $n$ where $0\\le a_i < m$.\n\n### Example\n\n#### Input #1\n\n```\n\n6\n\n2 3\n\n10\n\n2 3\n\n11\n\n5 1\n\n11101\n\n7 9\n\n1101011\n\n17 34\n\n11001010001010010\n\n1 1000000000\n\n1\n\n```\n\n#### Output #1\n\n```\n3\n2\n0\n8\n32\n0\n```\n\n### Note\n\nIn the first example, $n = 10_2 = 2$ and $m = 3$. All possible sequences with elements less than $m$ are: $[0, 0]$, $[0, 1]$, $[0, 2]$, $[1, 0]$, $[1, 1]$, $[1, 2]$, $[2, 0]$, $[2, 1]$, $[2, 2]$. All of them are good, so the answer is: $0 \\oplus 0 \\oplus 0 \\oplus 0 \\oplus 1 \\oplus 1 \\oplus 0 \\oplus 1 \\oplus 2 = 3$.\n\nIn the second example, $n = 11_2 = 3$ and $m = 3$. Some good sequences are $[2, 2, 2]$, $[1, 0, 1]$, and $[2, 0, 1]$. However, a sequence $[2, 0, 0]$ is not good, because $\\text{cnt}_0 = 2$, $\\text{cnt}_2 = 1$. Therefore, if we set $i = 0$ and $j = 2$, $i < j$ holds, but $\\text{cnt}_i \\le \\text{cnt}_j$ does not.", "cfid": "2056F2"}
{"problem_id": "2056D", "problem_title": "D. Unique Median", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2056/D", "problem_statement": "An array $b$ of $m$ integers is called good if, when it is sorted, $b_{\\left\\lfloor \\frac{m + 1}{2} \\right\\rfloor} = b_{\\left\\lceil \\frac{m + 1}{2} \\right\\rceil}$. In other words, $b$ is good if both of its medians are equal. In particular, $\\left\\lfloor \\frac{m + 1}{2} \\right\\rfloor = \\left\\lceil \\frac{m + 1}{2} \\right\\rceil$ when $m$ is odd, so $b$ is guaranteed to be good if it has an odd length.\n\nYou are given an array $a$ of $n$ integers. Calculate the number of good subarrays$^{\\text{∗}}$ in $a$.\n\n$^{\\text{∗}}$An array $x$ is a subarray of an array $y$ if $x$ can be obtained from $y$ by the deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 10^5$) — the length of the array.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le \\color{red}{\\textbf{10}}$) — the given array.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case, output a single integer representing the number of good subarrays in $a$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n4\n\n1 1 1 1\n\n5\n\n1 10 2 3 3\n\n10\n\n6 3 2 3 5 3 4 2 3 5\n\n```\n\n#### Output #1\n\n```\n10\n11\n42\n```\n\n### Note\n\nIn the first case, every subarray is good since all its elements are equal to $1$.\n\nIn the second case, an example of a good subarray is $b = [10, 2, 3, 3]$. When it is sorted, $b = [2, 3, 3, 10]$, so $b_{\\left\\lfloor \\frac{4 + 1}{2} \\right\\rfloor} = b_{\\left\\lceil \\frac{4 + 1}{2} \\right\\rceil} = b_2 = b_3 = 3$. Another example would be $b = [1, 10, 2]$. On the other hand, $b = [1, 10]$ is not good as its two medians are $1$ and $10$, which are not equal.", "cfid": "2056D"}
{"problem_id": "2055D", "problem_title": "D. Scarecrow", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2055/D", "problem_statement": "At his orange orchard, Florida Man receives yet another spam letter, delivered by a crow. Naturally, he's sending it back in the most inconvenient manner possible.\n\nA crow is sitting at position $0$ of the number line. There are $n$ scarecrows positioned at integer coordinates $a_1, a_2, \\ldots, a_n$ along the number line. These scarecrows have been enchanted, allowing them to move left and right at a speed of $1$ unit per second.\n\nThe crow is afraid of scarecrows and wants to stay at least a distance of $k$ ahead of the nearest scarecrow positioned at or before it. To do so, the crow uses its teleportation ability as follows:\n\n- Let $x$ be the current position of the crow, and let $y$ be the largest position of a scarecrow such that $y \\le x$. If $x - y < k$, meaning the scarecrow is too close, the crow will instantly teleport to position $y + k$.\n\nThis teleportation happens instantly and continuously. The crow will keep checking for scarecrows positioned at or to the left of him and teleport whenever one gets too close (which could happen at non-integral times). Note that besides this teleportation ability, the crow will not move on its own.\n\nYour task is to determine the minimum time required to make the crow teleport to a position greater than or equal to $\\ell$, assuming the scarecrows move optimally to allow the crow to reach its goal. For convenience, you are asked to output twice the minimum time needed for the crow to reach the target position $\\ell$. It can be proven that this value will always be an integer.\n\nNote that the scarecrows can start, stop, or change direction at any time (possibly at non-integral times).\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n, k, \\ell$ ($1 \\leq n \\leq 2 \\cdot 10^5$, $1 \\leq k \\leq \\ell \\leq 10^8$) — the number of scarecrows, the teleportation distance, and the target position of the crow, respectively.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\leq a_1 \\leq a_2 \\leq \\ldots \\leq a_n \\leq \\ell$) — the initial positions of the $n$ scarecrows.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer representing the twice the minimum time required for the crow to teleport to a position greater than or equal to $\\ell$.\n\n### Example\n\n#### Input #1\n\n```\n\n9\n\n1 3 5\n\n0\n\n3 2 5\n\n2 5 5\n\n1 10 10\n\n10\n\n10 1 10\n\n0 1 2 3 4 5 6 7 8 9\n\n2 1 2\n\n0 0\n\n2 1 2\n\n0 2\n\n2 1 3\n\n0 2\n\n2 2 4\n\n1 1\n\n9 12 54\n\n3 3 8 24 25 27 29 34 53\n\n```\n\n#### Output #1\n\n```\n4\n5\n20\n0\n2\n1\n2\n2\n7\n```\n\n### Note\n\nIn the first test case, the crow instantly teleports to position $3$ due to the scarecrow at position $0$. This scarecrow may then move to position $2$, causing the crow to continuously move from position $3$ to position $5$, completing the trip in $2$ seconds. Therefore, the output is $4$.\n\nIn the second test case, scarecrow $1$ and scarecrow $2$ can move to positions $0$ and $3$, respectively, in $2$ seconds, while scarecrow $3$ remains at position $5$. The crow teleports to position $2$ due to scarecrow $1$. Then, scarecrow $1$ moves to the right while scarecrow $2$ and scarecrow $3$ move to the left for $0.5$ seconds. This causes the crow to continuously move from position $2$ to position $2.5$ due to scarecrow $1$ moving right from position $0$. After this half second, the scarecrows will be at positions $0.5, 2.5, 4.5$. Scarecrow $2$, now at position $2.5$, causes the crow to instantly teleport to position $4.5$, and scarecrow $3$ at position $4.5$ causes it to instantly teleport to position $6.5$, which exceeds $\\ell = 5$. Therefore, the crow finishes the trip in just $2.5$ seconds, and the output is $5$.\n\nIt can be shown that these are the minimum possible times for both test cases.", "cfid": "2055D"}
{"problem_id": "2055E", "problem_title": "E. Haystacks", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2055/E", "problem_statement": "On the next new moon, the universe will reset, beginning with Florida. It's up to Florida Man to stop it, but he first needs to find an important item.\n\nThere are $n$ haystacks labelled from $1$ to $n$, where haystack $i$ contains $a_i$ haybales. One of the haystacks has a needle hidden beneath it, but you do not know which one. Your task is to move the haybales so that each haystack is emptied at least once, allowing you to check if the needle is hidden under that particular haystack.\n\nHowever, the process is not that simple. Once a haystack $i$ is emptied for the first time, it will be assigned a height limit and can no longer contain more than $b_i$ haybales. More formally, a move is described as follows:\n\n- Choose two haystacks $i$ and $j$. If haystack $i$ has not been emptied before, or haystack $i$ contains strictly less than $b_i$ haybales, you may move exactly $1$ haybale from haystack $j$ to haystack $i$.\n\nNote: Before a haystack is emptied, it has no height limit, and you can move as many haybales as you want onto that haystack.\n\nCompute the minimum number of moves required to ensure that each haystack is emptied at least once, or report that it is impossible.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2\\le n\\le 5\\cdot 10^5$) — the number of haystacks.\n\nThe $i$-th of the next $n$ lines contains two integers $a_i$ and $b_i$ ($1\\le a_i, b_i\\le 10^9$) — the initial number of haybales in the $i$-th haystack, and the height limit that it is assigned after it is emptied for the first time.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print a single integer — the minimum number of moves required to ensure that each haystack is emptied at least once. If it is not possible to empty each haystack at least once, output -1.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n2\n\n3 5\n\n2 4\n\n2\n\n10 1\n\n1 10\n\n3\n\n1 3\n\n4 3\n\n1 1\n\n3\n\n5 4\n\n2 4\n\n1 10\n\n6\n\n2 1\n\n3 3\n\n5 4\n\n1 5\n\n1 6\n\n1 8\n\n5\n\n3 2\n\n1 2\n\n1 1\n\n1 3\n\n6 5\n\n2\n\n5 10\n\n7 12\n\n```\n\n#### Output #1\n\n```\n8\n-1\n8\n9\n14\n15\n19\n```\n\n### Note\n\nIn the first test case, we can do the following sequence of moves:\n\n- Move $3$ haybales from haystack $1$ to haystack $2$. Haystack $1$ is now emptied, and is assigned a height limit of $5$.\n- Move $5$ haybales from haystack $2$ to haystack $1$. Haystack $2$ is now emptied, and is assigned a height limit of $4$.\n\nThe above sequence requires $3 + 5 = 8$ moves. It is not possible to use less than $8$ moves as the following sequence of moves is invalid:\n\n- Move $2$ haybales from haystack $2$ to haystack $1$. Haystack $2$ is now emptied, and is assigned a height limit of $4$.\n- Move $4$ haybales from haystack $1$ to haystack $2$. Haystack $1$ now has $1$ haybale, while haystack $2$ has $4$ haybales.\n- Haystack $1$ cannot be emptied as haystack $2$ is already at its height limit of $4$, so no more haybales can be moved from haystack $1$ to haystack $2$.\n\nIn the second test case, the task is impossible. This is because the height limits of both haystacks are too small that once one of the haystacks is emptied, the other haystack cannot be emptied due to the small height limits.\n\nIn the third test case, the following sequence of moves can be shown to be optimal:\n\n- Move $1$ haybale from haystack $1$ to haystack $3$. Haystack $1$ is now emptied, and is assigned a height limit of $3$.\n- Move $3$ haybales from haystack $2$ to haystack $1$.\n- Move $1$ haybale from haystack $2$ to haystack $3$. Haystack $2$ is now emptied and is assigned a height limit of $3$.\n- Move $3$ haybales from haystack $3$ to haystack $2$. Haystack $3$ is now emptied, and is assigned a height limit of $1$.\n\nThe above sequence requires $1 + 3 + 1 + 3 = 8$ moves.", "cfid": "2055E"}
{"problem_id": "2057E1", "problem_title": "E1. Another Exercise on Graphs (Easy Version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2057/E1", "problem_statement": "This is the easy version of the problem. The difference between the versions is that in this version, there is an additional constraint on $m$. You can hack only if you solved all versions of this problem.\n\nRecently, the instructors of \"T-generation\" needed to create a training contest. They were missing one problem, and there was not a single problem on graphs in the contest, so they came up with the following problem.\n\nYou are given a connected weighted undirected graph with $n$ vertices and $m$ edges, which does not contain self-loops or multiple edges.\n\nThere are $q$ queries of the form $(a, b, k)$: among all paths from vertex $a$ to vertex $b$, find the smallest $k$-th maximum weight of edges on the path$^{\\dagger}$.\n\nThe instructors thought that the problem sounded very interesting, but there is one catch. They do not know how to solve it. Help them and solve the problem, as there are only a few hours left until the contest starts.\n\n$^{\\dagger}$ Let $w_1 \\ge w_2 \\ge \\ldots \\ge w_{h}$ be the weights of all edges in a path, in non-increasing order. The $k$-th maximum weight of the edges on this path is $w_{k}$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 100$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each set of test case contains three integers $n, m$ and $q$ ($2 \\le n \\le 400$, $n - 1 \\le m \\le \\operatorname{min}(\\mathbf{400}, \\frac{n \\cdot (n - 1)}{2})$, $1 \\le q \\le 3 \\cdot 10^5$) — the number of vertices, the number of edges, and the number of questions, respectively.\n\nEach of the following $m$ lines of each set of test case contains three integers $v, u$ and $w$ ($1 \\le v, u \\le n$, $1 \\le w \\le 10^9$) — the ends of the next edge of the graph and its weight, respectively. It is guaranteed that the graph does not contain self-loops and multiple edges.\n\nEach of the following $q$ lines of each set of test case contains three integers $a, b$ and $k$ ($1 \\le a, b \\le n$, $k \\ge 1$) — the next question. It is guaranteed that any path from vertex $a$ to vertex $b$ contains at least $k$ edges.\n\nIt is guaranteed that the sum of the values of $n$ across all sets of test cases does not exceed $400$.\n\nIt is guaranteed that the sum of the values of $m$ across all sets of test cases does not exceed $400$.\n\nIt is guaranteed that the sum of the values of $q$ across all sets of test cases does not exceed $3 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the answers to all questions.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n4 4 2\n\n1 2 2\n\n2 4 2\n\n1 3 4\n\n3 4 1\n\n1 4 2\n\n2 3 1\n\n6 7 3\n\n1 2 10\n\n2 3 3\n\n3 4 9\n\n4 5 2\n\n5 6 1\n\n2 4 10\n\n4 6 10\n\n1 6 3\n\n1 6 2\n\n2 4 1\n\n11 17 10\n\n1 4 5\n\n1 3 19\n\n1 2 10\n\n3 2 13\n\n4 5 1\n\n4 6 11\n\n3 5 9\n\n3 6 18\n\n2 7 17\n\n5 8 15\n\n5 10 8\n\n6 9 4\n\n7 10 20\n\n7 8 16\n\n8 11 3\n\n9 11 6\n\n10 11 14\n\n3 11 1\n\n3 11 3\n\n1 11 1\n\n1 11 4\n\n1 11 3\n\n8 2 2\n\n10 4 1\n\n3 9 2\n\n3 9 1\n\n6 7 3\n\n```\n\n#### Output #1\n\n```\n1 2\n2 9 9\n11 3 11 1 3 10 8 4 11 4\n```\n\n### Note\n\nIn the first set of test cases, one of the optimal paths in the first query is the path $1 \\rightarrow 3 \\rightarrow 4$; the $2$-nd maximum weight of the edges on this path is $1$. In the second query, one of the optimal paths is $2 \\rightarrow 4 \\rightarrow 3$; $1$-st maximum weight of the edges is $2$.\n\nIn the second set of input data, one of the optimal paths in the first query is the path $1 \\rightarrow 2 \\rightarrow 4 \\rightarrow 5 \\rightarrow 6$; the $3$-rd maximum weight of the edges on this path is $2$.", "cfid": "2057E1"}
{"problem_id": "2057D", "problem_title": "D. Gifts Order", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2057/D", "problem_statement": "\"T-Generation\" has decided to purchase gifts for various needs; thus, they have $n$ different sweaters numbered from $1$ to $n$. The $i$-th sweater has a size of $a_i$. Now they need to send some subsegment of sweaters to an olympiad. It is necessary that the sweaters fit as many people as possible, but without having to take too many of them.\n\nThey need to choose two indices $l$ and $r$ ($1 \\le l \\le r \\le n$) to maximize the convenience equal to \n\n$$\\operatorname{max} (a_l, a_{l + 1}, \\ldots, a_r) - \\operatorname{min} (a_l, a_{l + 1}, \\ldots, a_r) - (r - l),$$\n\nthat is, the range of sizes minus the number of sweaters.\n\nSometimes the sizes of the sweaters change; it is known that there have been $q$ changes, in each change, the size of the $p$-th sweater becomes $x$.\n\nHelp the \"T-Generation\" team and determine the maximum convenience among all possible pairs $(l, r)$ initially, as well as after each size change.\n\n### Input\n\nEach test consists of several test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $q$ ($1 \\le n, q \\le 2 \\cdot 10^5$) — the number of sweaters and the number of size changes.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$) — the sizes of the sweaters.\n\nEach of the following $q$ lines of each test case contains two integers $p$ and $x$ ($1 \\le p \\le n$, $1 \\le x \\le 10^9$) — the next size change.\n\nIt is guaranteed that the sum of the values of $n$ and the sum of the values of $q$ across all test cases do not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the maximum value of convenience among all possible pairs $(l, r)$ before any actions, as well as after each size change.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2 2\n\n1 10\n\n1 10\n\n2 2\n\n5 3\n\n1 2 3 4 5\n\n3 7\n\n1 4\n\n5 2\n\n8 5\n\n7 4 2 4 8 2 1 4\n\n5 4\n\n1 10\n\n3 2\n\n8 11\n\n7 7\n\n```\n\n#### Output #1\n\n```\n8\n0\n7\n0\n4\n4\n4\n5\n3\n6\n6\n9\n7\n```\n\n### Note\n\nConsider the first test case.\n\n- Before any changes, you can take all the sweaters; then the convenience is equal to $\\operatorname{max} (a_1, a_2) - \\operatorname{min} (a_1, a_2) - (2 - 1) = 10 - 1 - 1 = 8$.\n- After the first query, the sizes of both sweaters will be equal to $10$, you can only take the first sweater and the convenience is equal to $10 - 10 - 0 = 0$.\n- After the second query, the size of the first sweater will be $10$, and the second $2$, you can take all the sweaters and the convenience is equal to $\\operatorname{max} (a_1, a_2) - \\operatorname{min} (a_1, a_2) - (2 - 1) = 10 - 2 - 1 = 7$.", "cfid": "2057D"}
{"problem_id": "2057E2", "problem_title": "E2. Another Exercise on Graphs (hard version)", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2057/E2", "problem_statement": "This is the hard version of the problem. The difference between the versions is that in this version, there is no additional constraint on $m$. You can hack only if you solved all versions of this problem.\n\nRecently, the instructors of \"T-generation\" needed to create a training contest. They were missing one problem, and there was not a single problem on graphs in the contest, so they came up with the following problem.\n\nYou are given a connected weighted undirected graph with $n$ vertices and $m$ edges, which does not contain self-loops or multiple edges.\n\nThere are $q$ queries of the form $(a, b, k)$: among all paths from vertex $a$ to vertex $b$, find the smallest $k$-th maximum weight of edges on the path$^{\\dagger}$.\n\nThe instructors thought that the problem sounded very interesting, but there is one catch. They do not know how to solve it. Help them and solve the problem, as there are only a few hours left until the contest starts.\n\n$^{\\dagger}$ Let $w_1 \\ge w_2 \\ge \\ldots \\ge w_{h}$ be the weights of all edges in a path, in non-increasing order. The $k$-th maximum weight of the edges on this path is $w_{k}$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 100$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each set of test case contains three integers $n, m$ and $q$ ($2 \\le n \\le 400$, $n - 1 \\le m \\le \\frac{n \\cdot (n - 1)}{2}$, $1 \\le q \\le 3 \\cdot 10^5$) — the number of vertices, the number of edges, and the number of questions, respectively.\n\nEach of the following $m$ lines of each set of test case contains three integers $v, u$ and $w$ ($1 \\le v, u \\le n$, $1 \\le w \\le 10^9$) — the ends of the next edge of the graph and its weight, respectively. It is guaranteed that the graph does not contain self-loops and multiple edges.\n\nEach of the following $q$ lines of each set of test case contains three integers $a, b$ and $k$ ($1 \\le a, b \\le n$, $k \\ge 1$) — the next question. It is guaranteed that any path from vertex $a$ to vertex $b$ contains at least $k$ edges.\n\nIt is guaranteed that the sum of the values of $n$ across all sets of test cases does not exceed $400$.\n\nIt is guaranteed that the sum of the values of $q$ across all sets of test cases does not exceed $3 \\cdot 10^5$.\n\n### Output\n\nFor each set of test case, output the answers to all questions.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n4 4 2\n\n1 2 2\n\n2 4 2\n\n1 3 4\n\n3 4 1\n\n1 4 2\n\n2 3 1\n\n6 7 3\n\n1 2 10\n\n2 3 3\n\n3 4 9\n\n4 5 2\n\n5 6 1\n\n2 4 10\n\n4 6 10\n\n1 6 3\n\n1 6 2\n\n2 4 1\n\n11 17 10\n\n1 4 5\n\n1 3 19\n\n1 2 10\n\n3 2 13\n\n4 5 1\n\n4 6 11\n\n3 5 9\n\n3 6 18\n\n2 7 17\n\n5 8 15\n\n5 10 8\n\n6 9 4\n\n7 10 20\n\n7 8 16\n\n8 11 3\n\n9 11 6\n\n10 11 14\n\n3 11 1\n\n3 11 3\n\n1 11 1\n\n1 11 4\n\n1 11 3\n\n8 2 2\n\n10 4 1\n\n3 9 2\n\n3 9 1\n\n6 7 3\n\n```\n\n#### Output #1\n\n```\n1 2\n2 9 9\n11 3 11 1 3 10 8 4 11 4\n```\n\n### Note\n\nIn the first set of test cases, one of the optimal paths in the first query is the path $1 \\rightarrow 3 \\rightarrow 4$; the $2$-nd maximum weight of the edges on this path is $1$. In the second query, one of the optimal paths is $2 \\rightarrow 4 \\rightarrow 3$; $1$-st maximum weight of the edges is $2$.\n\nIn the second set of input data, one of the optimal paths in the first query is the path $1 \\rightarrow 2 \\rightarrow 4 \\rightarrow 5 \\rightarrow 6$; the $3$-rd maximum weight of the edges on this path is $2$.", "cfid": "2057E2"}
{"problem_id": "2057G", "problem_title": "G. Secret Message", "difficulty": "medium", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2057/G", "problem_statement": "Every Saturday, Alexander B., a teacher of parallel X, writes a secret message to Alexander G., a teacher of parallel B, in the evening. Since Alexander G. is giving a lecture at that time and the message is very important, Alexander B. has to write this message on an interactive online board.\n\nThe interactive online board is a grid consisting of $n$ rows and $m$ columns, where each cell is $1 \\times 1$ in size. Some cells of this board are already filled in, and it is impossible to write a message in them; such cells are marked with the symbol \".\", while the remaining cells are called free and are marked with the symbol \"#\".\n\nLet us introduce two characteristics of the online board:\n\n- $s$ is the number of free cells.\n- $p$ is the perimeter of the grid figure formed by the union of free cells.\n\nLet $A$ be the set of free cells. Your goal is to find a set of cells $S \\subseteq A$ that satisfies the following properties:\n\n- $|S| \\le \\frac{1}{5} \\cdot (s+p)$.\n- Any cell from $A$ either lies in $S$ or shares a side with some cell from $S$.\n\nWe can show that at least one set $S$ satisfying these properties exists; you are required to find any suitable one.\n\n### Input\n\nThe first line contains the number $t$ ($1 \\le t \\le 80\\,000$) — the number of test cases.\n\nIn the first line of each test case, the numbers $n$ and $m$ ($1 \\le n, m \\le 2 \\cdot 10^6$) — the dimensions of the grid are given.\n\nThe following $n$ lines contain the description of the grid.\n\nIt is guaranteed that the sum of $n \\cdot m$ across all test cases does not exceed $2 \\cdot 10^6$.\n\n### Output\n\nFor each test case, output $n$ lines consisting of $m$ symbols, where each symbol encodes the state of the cell:\n\n- \"#\" — the cell is in $A$ but not in $S$;\n- \"S\" — the cell is in both $A$ and $S$;\n- \".\" — the cell is neither in $A$ nor in $S$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3 3\n\n.#.\n\n###\n\n.#.\n\n2 6\n\n######\n\n######\n\n3 7\n\n###....\n\n#.#.###\n\n###....\n\n```\n\n#### Output #1\n\n```\n.#.\n#S#\n.#.\n#S##S#\n#S##S#\nS#S....\n#.#.S#S\nS#S....\n```\n\n### Note\n\nIn the first example, $s=5$ and $p=12$, thus the number of cells in $S$ must not exceed $\\frac{1}{5} \\cdot (5+12) = 3.4$, meaning $|S| \\le 3$. Note that the presented set $S$ consists of $1$ cell and clearly satisfies all the constraints.\n\nIn the second example, $s=12$ and $p=16$, thus the number of cells in $S$ must not exceed $\\frac{1}{5} \\cdot (12+16)= 5.6$, meaning $|S| \\le 5$. Note that the presented set $S$ consists of $4$ cells and clearly satisfies all the constraints.\n\nIn the third example, we will explain what perimeter is, as it may not be obvious. Any grid figure has a boundary, which can be represented as a union of segments that do not intersect at interior points. Thus, in the picture below, the thick black line denotes the boundary of the figure formed by the union of free cells. The total length of these segments is $p=24$.\n\nAt the same time, the value $s=11$ and the upper limit is $|S| \\le 7$, the presented set has a size of $6$ and clearly satisfies all the constraints.\n\n![](https://espresso.codeforces.com/607d4d227788f62cc30899a18cf34fb632683dcf.png)", "cfid": "2057G"}
{"problem_id": "2118F", "problem_title": "F. Shifts and Swaps", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2118/F", "problem_statement": "You are given arrays $a$ and $b$ of length $n$ and an integer $m$.\n\nThe arrays only contain integers from $1$ to $m$, and both arrays contain all integers from $1$ to $m$.\n\nYou may repeatedly perform either of the following operations on $a$:\n\n- cyclic shift$^{\\text{∗}}$ the array to the left\n- swap two neighboring elements if their difference is at least $2$.\n\nIs it possible to transform the first array into the second?\n\n$^{\\text{∗}}$A left cyclic shift of a zero-indexed array $p$ of length $n$ is an array $q$ such that $q_i = p_{(i + 1) \\bmod n}$ for all $0 \\le i < n$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^5$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($2 \\le m \\le n \\le 5\\cdot10^5$) — the length of the arrays and the number of distinct elements in $a$.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le m$) — denoting the array $a$.\n\nThe third line contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($1 \\le b_i \\le m$) — denoting the array $b$.\n\nIt is guaranteed that both arrays contain all integers from $1$ to $m$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5\\cdot10^5$.\n\n### Output\n\nFor each test case, output \"YES\" if it is possible to transform the first array into the second and \"NO\" otherwise. You can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n3 3\n\n1 2 3\n\n3 2 1\n\n4 3\n\n1 1 2 3\n\n1 2 2 3\n\n4 4\n\n1 3 2 4\n\n2 3 4 1\n\n6 3\n\n1 1 2 1 2 3\n\n2 1 1 2 3 1\n\n5 4\n\n2 3 4 1 1\n\n3 2 1 1 4\n\n9 7\n\n2 4 6 7 3 1 5 4 6\n\n6 7 3 5 6 4 2 4 1\n\n9 8\n\n8 3 5 6 5 4 1 7 2\n\n7 5 3 5 8 4 6 2 1\n\n8 6\n\n2 1 5 4 6 3 5 4\n\n6 1 5 2 4 5 3 4\n\n```\n\n#### Output #1\n\n```\nYES\nNO\nYES\nNO\nYES\nYES\nNO\nNO\n```\n\n### Note\n\nIn the first test case, you can transform array $a$ into array $b$ with the following steps:\n\n- \\[$1$, $2$, $3$\\] — shift to the left\n- \\[$2$, $3$, $1$\\] — swap indices $2$ and $3$\n- \\[$2$, $1$, $3$\\] — shift to the left\n- \\[$1$, $3$, $2$\\] — shift to the left\n- \\[$3$, $2$, $1$\\]\n\nIn the second test case, it can be proven that it is impossible to transform array $a$ into array $b$ with the given operations.", "cfid": "2118F"}
{"problem_id": "2115E", "problem_title": "E. Gellyfish and Mayflower", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2115/E", "problem_statement": "[Mayflower by Plum](https://www.youtube.com/watch?v=wD6_6R7dhnE/)\n\nMay, Gellyfish's friend, loves playing a game called \"Inscryption\" which is played on a directed acyclic graph with $n$ vertices and $m$ edges. All edges $ a \\rightarrow b$ satisfy $a<b$.\n\nYou start in vertex $1$ with some coins. You need to move from vertex $1$ to the vertex where the boss is located along the directed edges, and then fight with the final boss.\n\nEach of the $n$ vertices of the graph contains a Trader who will sell you a card with power $w_i$ for $c_i$ coins. You can buy as many cards as you want from each Trader. However, you can only trade with the trader on the $i$-th vertex if you are currently on the $i$-th vertex.\n\nIn order to defeat the boss, you want the sum of the power of your cards to be as large as possible.\n\nYou will have to answer the following $q$ queries:\n\n- Given integers $p$ and $r$. If the final boss is located at vertex $p$, and you have $r$ coins in the beginning, what is the maximum sum of the power of your cards when you fight the final boss? Note that you are allowed to trade cards on vertex $p$.\n\n### Input\n\nThe first line of input contains two integers $n$ and $m$ ($1 \\leq n \\leq 200$, $n - 1 \\leq m \\leq \\min(\\frac {n(n-1)} 2, 2000)$) — the number of vertices and the number of edges.\n\nThe $i$-th of the following $n$ lines of input each contains two integers $c_i$ and $w_i$ ($1 \\leq c_i \\leq 200$, $1 \\leq w_i \\leq 10^9$) — describing the cards of the Trader on the $i$-th vertex.\n\nIn the following $m$ lines of input, each line contains two integers $u$ and $v$ ($1 \\leq u < v \\leq n$), indicating a directed edge from vertex $u$ to vertex $v$. It is guaranteed that every edge $(u,v)$ appears at most once.\n\nThe next line of input contains one single integer $q$ ($1 \\leq q \\leq 2 \\cdot 10^5$) — the number of queries.\n\nIn the following $q$ lines of input, each line contains two integers $p$ and $r$ ($1 \\leq p \\leq n$, $1 \\leq r \\leq 10^9$).\n\nIt is guaranteed that for all $i$, there exists a path from vertex $1$ to vertex $i$.\n\n### Output\n\nFor each query, output the answer to the query.\n\n### Examples\n\n#### Input #1\n\n```\n\n3 2\n\n3 9\n\n2 5\n\n1 2\n\n1 2\n\n2 3\n\n6\n\n1 4\n\n2 4\n\n3 4\n\n1 5\n\n2 5\n\n3 5\n\n```\n\n#### Output #1\n\n```\n9\n10\n11\n9\n14\n14\n```\n\n#### Input #2\n\n```\n\n4 4\n\n10 1000\n\n2 5\n\n1 2\n\n3 9\n\n1 2\n\n1 3\n\n2 4\n\n3 4\n\n9\n\n2 3\n\n3 3\n\n4 1\n\n4 2\n\n4 4\n\n4 5\n\n4 101\n\n4 102\n\n4 103\n\n```\n\n#### Output #2\n\n```\n5\n6\n2\n5\n11\n14\n10002\n10005\n10009\n```\n\n#### Input #3\n\n```\n\n6 8\n\n9 5\n\n4 1\n\n8 9\n\n10 4\n\n9 4\n\n8 2\n\n3 5\n\n4 6\n\n3 4\n\n2 3\n\n1 2\n\n2 5\n\n4 5\n\n1 3\n\n10\n\n3 12\n\n1 9\n\n6 47\n\n2 19\n\n1 129\n\n5 140\n\n2 148\n\n1 63\n\n2 43\n\n3 102\n\n```\n\n#### Output #3\n\n```\n10\n5\n46\n10\n70\n154\n81\n35\n21\n109\n```\n\n### Note\n\nFor the third query in the first example, we will play the game in the following order:\n\n- buy $1$ card with $9$ power from the trader on vertex $1$, and you'll still have $1$ coin after the trade.\n- move from vertex $1$ to vertex $2$.\n- move from vertex $2$ to vertex $3$.\n- buy $1$ card with $2$ power from the trader on vertex $3$, and you'll have no coins after the trade.\n\nIn the end, we will have $1$ card with $9$ power and $1$ card with $2$, so the sum of the power of the cards is $9+2=11$.\n\nFor the fifth query in the second example, we will play the game in the following order:\n\n- move from vertex $1$ to vertex $3$.\n- buy $1$ card with $2$ power from the trader on vertex $3$, and you'll still have $3$ coins after the trade.\n- move from vertex $3$ to vertex $4$.\n- buy $1$ card with $9$ power from the trader on vertex $4$, and you'll have no coins after the trade.\n\nIn the end, we will have $1$ card with $2$ power and $1$ card with $9$, so the sum of the power of the cards is $2+9=11$.\n\nFor the sixth query in the second example, we will play the game in the following order:\n\n- move from vertex $1$ to vertex $2$.\n- buy $1$ card with $5$ power from the trader on vertex $2$, and you'll still have $3$ coins after the trade.\n- move from vertex $2$ to vertex $4$.\n- buy $1$ card with $9$ power from the trader on vertex $4$, and you'll have no coins after the trade.\n\nIn the end, we will have $1$ card with $5$ power and $1$ card with $9$, so the sum of the power of the cards is $5+9=14$.\n\nFor the seventh query in the second example, we will play the game in the following order:\n\n- buy $10$ cards with $1000$ power from the trader on vertex $1$, and you'll still have $1$ coin after the trade.\n- move from vertex $1$ to vertex $3$.\n- buy $1$ card with $2$ power from the trader on vertex $3$, and you'll have no coins after the trade.\n- move from vertex $3$ to vertex $4$.\n\nIn the end, we will have $10$ cards with $1000$ power and $1$ card with $2$ power, so the sum of the power of the cards is $10 \\cdot 1000+2=10\\,002$.", "cfid": "2115E"}
{"problem_id": "2115F1", "problem_title": "F1. Gellyfish and Lycoris Radiata (Easy Version)", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2115/F1", "problem_statement": "This is the easy version of the problem. The difference between the versions is that in this version, the time limit and the constraints on $n$ and $q$ are lower. You can hack only if you solved all versions of this problem.\n\nGellyfish has an array consisting of $n$ sets. Initially, all the sets are empty.\n\nNow Gellyfish will do $q$ operations. Each operation contains one modification operation and one query operation, for the $i$-th ($1 \\leq i \\leq q$) operation:\n\nFirst, there will be a modification operation, which is one of the following:\n\n1. Insert operation: You are given an integer $r$. For the $1$-th to $r$-th sets, insert element $i$. Note that the element inserted here is $i$, the index of the operation, not the index of the set.\n2. Reverse operation: You are given an integer $r$. Reverse the $1$-th to $r$-th sets.\n3. Delete operation: You are given an integer $x$. Delete element $x$ from all sets that contain $x$.\n\nFollowed by a query operation:\n\n- Query operation: You are given an integer $p$. Output the smallest element in the $p$-th set (If the $p$-th set is empty, the answer is considered to be $0$).\n\nNow, Flower needs to provide the answer for each query operation. Please help her!\n\nAdditional constraint on the problem: Gellyfish will only give the next operation after Flower has answered the previous query operation. That is, you need to solve this problem online. Please refer to the input format for more details.\n\n### Input\n\nThe first line contains two integers $n$ and $q$ ($1 \\leq n, q \\leq 10^5$) — the number of the sets and the number of operations.\n\nAs you need to respond to the operations online, the operations will be encoded.\n\nThe $i$-th line of the following $q$ lines contains three integers $a$, $b$, and $c$ ($1 \\leq a \\leq 3$, $1 \\leq c \\leq n$) — describing the $i$-th operation in an encoded form.\n\nHere, $a$ represents the type of modification operation. Among them, $a=1$ represents Insert operation, $a=2$ represents Reverse operation, $a=3$ represents Delete operation.\n\n- If $a = 1$, then the modification operation is the Insert operation. It will be guaranteed that $1 \\leq b \\leq n$. $r$ will be calculated as $r=(b+\\text{ans}_{i-1}-1) \\bmod n + 1$.\n- If $a=2$, then the modification operation is the Reverse operation. It will be guaranteed that $1 \\leq b \\leq n$. $r$ will be calculated as $r=(b+\\text{ans}_{i-1}-1) \\bmod n + 1$.\n- If $a=3$, then the modification operation is the Delete operation. It will be guaranteed that $1 \\leq b \\leq q$. $x$ will be calculated as $x=(b+\\text{ans}_{i-1}-1) \\bmod q + 1$.\n\nFor the query operation, $p$ will be calculated as $p = (c+\\text{ans}_{i-1}-1) \\bmod n + 1$.\n\nHere $ \\text{ans}_{i} (1 \\leq i \\leq q)$ represents the answer to the query operation in the $i$-th operation. Additionally, we define $ \\text{ans}_{0} = 0$.\n\n### Output\n\nFor each query operation, output the answer to the query.\n\n### Example\n\n#### Input #1\n\n```\n\n5 10\n\n1 2 2\n\n2 3 1\n\n1 5 3\n\n2 2 5\n\n1 5 2\n\n2 4 4\n\n3 2 2\n\n3 1 2\n\n3 10 5\n\n3 2 4\n\n```\n\n#### Output #1\n\n```\n1\n0\n1\n1\n3\n1\n0\n5\n0\n0\n```\n\n### Note\n\nAll the sets are empty in the beginning, so the array is $[\\{\\}, \\{\\}, \\{\\}, \\{\\}, \\{\\}]$.\n\nWith the decoding method given before, we can see what happens in each operation:\n\n01. For the first operation: $a = 1, r = 2, p = 2$. The modification operation is an Insert operation; element $1$ is inserted into the first two sets; so the array becomes $[\\{1\\}, \\{1\\}, \\{\\}, \\{\\}, \\{\\}]$, and the smallest element in the second set is $1$.\n02. For the second operation: $a = 2, r = 4, p = 2$. The modification operation is a Reverse operation; the first four sets are reversed; so the array becomes $[\\{\\}, \\{\\}, \\{1\\}, \\{1\\}, \\{\\}]$, and the second set is empty, which means the answer is $0$.\n03. For the third operation: $a = 1, r = 5, p = 3$. The modification operation is an Insert operation; element $3$ is inserted into all the sets; so the array becomes $[\\{3\\}, \\{3\\}, \\{1, 3\\}, \\{1, 3\\}, \\{3\\}]$, and the smallest element in the third set is $1$.\n04. For the fourth operation: $a = 2, r = 3, p = 1$. The modification operation is a Reverse operation; the first three sets are reversed; so the array becomes $[\\{1, 3\\}, \\{3\\}, \\{3\\}, \\{1, 3\\}, \\{3\\}]$, and the smallest element in the first set is $1$.\n05. For the fifth operation: $a = 1, r = 1, p = 3$. The modification operation is an Insert operation; element $5$ is inserted into the first set; so the array becomes $[\\{1, 3, 5\\}, \\{3\\}, \\{3\\}, \\{1, 3\\}, \\{3\\}]$, and the smallest element in the third set is $3$.\n06. For the sixth operation: $a = 2, r = 2, p = 2$. The modification operation is a Reverse operation; the first two sets are reversed; so the array becomes $[\\{3\\}, \\{1, 3, 5\\}, \\{3\\}, \\{1, 3\\}, \\{3\\}]$, and the smallest element in the second set is $1$.\n07. For the seventh operation: $a = 3, x = 3, p = 3$. The modification operation is a Delete operation; element $3$ is deleted from all the sets; so the array becomes $[\\{\\}, \\{1, 5\\}, \\{\\}, \\{1\\}, \\{\\}]$, and the third set is empty, which means the answer is $0$.\n08. For the eighth operation: $a = 3, x = 1, p = 2$. The modification operation is a Delete operation; element $1$ is deleted from all the sets; so the array becomes $[\\{\\}, \\{5\\}, \\{\\}, \\{\\}, \\{\\}]$, and the smallest element in the second set is $5$.\n09. For the ninth operation: $a = 3, x = 5, p = 5$. The modification operation is a Delete operation; element $5$ is deleted from all the sets; so the array becomes $[\\{\\}, \\{\\}, \\{\\}, \\{\\}, \\{\\}]$, and the fifth set is empty, which means the answer is $0$.\n10. For the tenth operation: $a = 3, x = 2, p = 4$. The modification operation is a Delete operation; element $2$ is deleted from all the sets; so the array becomes $[\\{\\}, \\{\\}, \\{\\}, \\{\\}, \\{\\}]$, and the fourth set is empty, which means the answer is $0$.\n\nPlease note that although we have not inserted element $2$ into the sets, we still delete element $2$ from all the sets in the tenth operation, which means that the Delete operation doesn't necessarily require the existence of a set to contain the deleted element. It also shows that it is possible to have two Delete operations that delete the same element.", "cfid": "2115F1"}
{"problem_id": "2115F2", "problem_title": "F2. Gellyfish and Lycoris Radiata (Hard Version)", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2115/F2", "problem_statement": "This is the hard version of the problem. The difference between the versions is that in this version, the time limit and the constraints on $n$ and $q$ are higher. You can hack only if you solved all versions of this problem.\n\nGellyfish has an array consisting of $n$ sets. Initially, all the sets are empty.\n\nNow Gellyfish will do $q$ operations. Each operation contains one modification operation and one query operation, for the $i$-th ($1 \\leq i \\leq q$) operation:\n\nFirst, there will be a modification operation, which is one of the following:\n\n1. Insert operation: You are given an integer $r$. For the $1$-th to $r$-th sets, insert element $i$. Note that the element inserted here is $i$, the index of the operation, not the index of the set.\n2. Reverse operation: You are given an integer $r$. Reverse the $1$-th to $r$-th sets.\n3. Delete operation: You are given an integer $x$. Delete element $x$ from all sets that contain $x$.\n\nFollowed by a query operation:\n\n- Query operation: You are given an integer $p$. Output the smallest element in the $p$-th set (If the $p$-th set is empty, the answer is considered to be $0$).\n\nNow, Flower needs to provide the answer for each query operation. Please help her!\n\nAdditional constraint on the problem: Gellyfish will only give the next operation after Flower has answered the previous query operation. That is, you need to solve this problem online. Please refer to the input format for more details.\n\n### Input\n\nThe first line contains two integers $n$ and $q$ ($1 \\leq n, q \\leq 3 \\cdot 10^5$) — the number of the sets and the number of operations.\n\nAs you need to respond to the operations online, the operations will be encoded.\n\nThe $i$-th line of the following $q$ lines contains three integers $a$, $b$, and $c$ ($1 \\leq a \\leq 3$, $1 \\leq c \\leq n$) — describing the $i$-th operation in an encoded form.\n\nHere, $a$ represents the type of modification operation. Among them, $a=1$ represents Insert operation, $a=2$ represents Reverse operation, $a=3$ represents Delete operation.\n\n- If $a = 1$, then the modification operation is the Insert operation. It will be guaranteed that $1 \\leq b \\leq n$. $r$ will be calculated as $r=(b+\\text{ans}_{i-1}-1) \\bmod n + 1$.\n- If $a=2$, then the modification operation is the Reverse operation. It will be guaranteed that $1 \\leq b \\leq n$. $r$ will be calculated as $r=(b+\\text{ans}_{i-1}-1) \\bmod n + 1$.\n- If $a=3$, then the modification operation is the Delete operation. It will be guaranteed that $1 \\leq b \\leq q$. $x$ will be calculated as $x=(b+\\text{ans}_{i-1}-1) \\bmod q + 1$.\n\nFor the query operation, $p$ will be calculated as $p = (c+\\text{ans}_{i-1}-1) \\bmod n + 1$.\n\nHere $ \\text{ans}_{i} (1 \\leq i \\leq q)$ represents the answer to the query operation in the $i$-th operation. Additionally, we define $ \\text{ans}_{0} = 0$.\n\n### Output\n\nFor each query operation, output the answer to the query.\n\n### Example\n\n#### Input #1\n\n```\n\n5 10\n\n1 2 2\n\n2 3 1\n\n1 5 3\n\n2 2 5\n\n1 5 2\n\n2 4 4\n\n3 2 2\n\n3 1 2\n\n3 10 5\n\n3 2 4\n\n```\n\n#### Output #1\n\n```\n1\n0\n1\n1\n3\n1\n0\n5\n0\n0\n```\n\n### Note\n\nAll the sets are empty in the beginning, so the array is $[\\{\\}, \\{\\}, \\{\\}, \\{\\}, \\{\\}]$.\n\nWith the decoding method given before, we can see what happens in each operation:\n\n01. For the first operation: $a = 1, r = 2, p = 2$. The modification operation is an Insert operation; element $1$ is inserted into the first two sets; so the array becomes $[\\{1\\}, \\{1\\}, \\{\\}, \\{\\}, \\{\\}]$, and the smallest element in the second set is $1$.\n02. For the second operation: $a = 2, r = 4, p = 2$. The modification operation is a Reverse operation; the first four sets are reversed; so the array becomes $[\\{\\}, \\{\\}, \\{1\\}, \\{1\\}, \\{\\}]$, and the second set is empty, which means the answer is $0$.\n03. For the third operation: $a = 1, r = 5, p = 3$. The modification operation is an Insert operation; element $3$ is inserted into all the sets; so the array becomes $[\\{3\\}, \\{3\\}, \\{1, 3\\}, \\{1, 3\\}, \\{3\\}]$, and the smallest element in the third set is $1$.\n04. For the fourth operation: $a = 2, r = 3, p = 1$. The modification operation is a Reverse operation; the first three sets are reversed; so the array becomes $[\\{1, 3\\}, \\{3\\}, \\{3\\}, \\{1, 3\\}, \\{3\\}]$, and the smallest element in the first set is $1$.\n05. For the fifth operation: $a = 1, r = 1, p = 3$. The modification operation is an Insert operation; element $5$ is inserted into the first set; so the array becomes $[\\{1, 3, 5\\}, \\{3\\}, \\{3\\}, \\{1, 3\\}, \\{3\\}]$, and the smallest element in the third set is $3$.\n06. For the sixth operation: $a = 2, r = 2, p = 2$. The modification operation is a Reverse operation; the first two sets are reversed; so the array becomes $[\\{3\\}, \\{1, 3, 5\\}, \\{3\\}, \\{1, 3\\}, \\{3\\}]$, and the smallest element in the second set is $1$.\n07. For the seventh operation: $a = 3, x = 3, p = 3$. The modification operation is a Delete operation; element $3$ is deleted from all the sets; so the array becomes $[\\{\\}, \\{1, 5\\}, \\{\\}, \\{1\\}, \\{\\}]$, and the third set is empty, which means the answer is $0$.\n08. For the eighth operation: $a = 3, x = 1, p = 2$. The modification operation is a Delete operation; element $1$ is deleted from all the sets; so the array becomes $[\\{\\}, \\{5\\}, \\{\\}, \\{\\}, \\{\\}]$, and the smallest element in the second set is $5$.\n09. For the ninth operation: $a = 3, x = 5, p = 5$. The modification operation is a Delete operation; element $5$ is deleted from all the sets; so the array becomes $[\\{\\}, \\{\\}, \\{\\}, \\{\\}, \\{\\}]$, and the fifth set is empty, which means the answer is $0$.\n10. For the tenth operation: $a = 3, x = 2, p = 4$. The modification operation is a Delete operation; element $2$ is deleted from all the sets; so the array becomes $[\\{\\}, \\{\\}, \\{\\}, \\{\\}, \\{\\}]$, and the fourth set is empty, which means the answer is $0$.\n\nPlease note that although we have not inserted element $2$ into the sets, we still delete element $2$ from all the sets in the tenth operation, which means that the Delete operation doesn't necessarily require the existence of a set to contain the deleted element. It also shows that it is possible to have two Delete operations that delete the same element.", "cfid": "2115F2"}
{"problem_id": "2101E", "problem_title": "E. Kia Bakes a Cake", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2101/E", "problem_statement": "You are given a binary string $s$ of length $n$ and a tree $T$ with $n$ vertices. Let $k$ be the number of 1s in $s$. We will construct a complete undirected weighted graph with $k$ vertices as follows:\n\n- For each $1\\le i\\le n$ with $s_i = \\mathtt{1}$, create a vertex labeled $i$.\n- For any two vertices labeled $u$ and $v$ that are created in the above step, define the edge weight between them $w(u, v)$ as the distance$^{\\text{∗}}$ between vertex $u$ and vertex $v$ in the tree $T$.\n\nA simple path$^{\\text{†}}$ that visits vertices labeled $v_1, v_2, \\ldots, v_m$ in this order is nice if for all $1\\le i\\le m - 2$, the condition $2\\cdot w(v_i, v_{i + 1})\\le w(v_{i + 1}, v_{i + 2})$ holds. In other words, the weight of each edge in the path must be at least twice the weight of the previous edge. Note that $s_{v_i} = \\mathtt{1}$ has to be satisfied for all $1\\le i\\le m$, as otherwise, there would be no vertex with the corresponding label.\n\nFor each vertex labeled $i$ ($1\\le i\\le n$ and $s_i = \\mathtt{1}$) in the complete undirected weighted graph, determine the maximum number of vertices in any nice simple path starting from the vertex labeled $i$.\n\n$^{\\text{∗}}$The distance between two vertices $a$ and $b$ in a tree is equal to the number of edges on the unique simple path between vertex $a$ and vertex $b$.\n\n$^{\\text{†}}$A path is a sequence of vertices $v_1, v_2, \\ldots, v_m$ such that there is an edge between $v_i$ and $v_{i + 1}$ for all $1\\le i\\le m - 1$. A simple path is a path with no repeated vertices, i.e., $v_i\\neq v_j$ for all $1\\le i < j\\le m$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1\\le n\\le 7\\cdot10^4$) — the length of the binary string $s$ and the number of vertices in the tree $T$.\n\nThe second line of each test case contains a binary string with $n$ characters $s_1s_2\\ldots s_n$ ($s_i\\in \\{\\mathtt{0}, \\mathtt{1}\\}$) — the string representing the vertices to be constructed in the complete undirected weighted graph.\n\nEach of the next $n - 1$ lines contains two integers $u$ and $v$ ($1\\le u, v\\le n$) — the endpoints of the edges of the tree $T$.\n\nIt is guaranteed that the given edges form a tree.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $7\\cdot10^4$.\n\n### Output\n\nFor each test case, output $n$ integers, the $i$-th integer representing the maximum number of vertices in any nice simple path starting from the vertex labeled $i$. If there is no vertex labeled $i$, i.e., $s_i = \\mathtt{0}$, output $-1$ instead.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n5\n\n01111\n\n1 2\n\n2 3\n\n3 4\n\n4 5\n\n17\n\n01101011110101101\n\n1 2\n\n2 3\n\n3 4\n\n4 5\n\n5 6\n\n6 7\n\n7 8\n\n8 9\n\n9 10\n\n10 11\n\n11 12\n\n12 13\n\n13 14\n\n14 15\n\n15 16\n\n16 17\n\n2\n\n01\n\n1 2\n\n```\n\n#### Output #1\n\n```\n-1 3 3 3 3\n-1 5 4 -1 4 -1 5 5 5 5 -1 4 -1 5 5 -1 3\n-1 1\n```\n\n### Note\n\nIn the first test case, the tree $T$ and the constructed graph are as follows:\n\n![](https://espresso.codeforces.com/2c018d3678fcc993cea93af930f4bc10bd9d0bed.png)Left side is the tree $T$ with selected nodes colored yellow. The right side is the constructed complete graph.\n\nThe nice path shown in the diagram is $3\\rightarrow 4\\rightarrow 2$. The path is nice as $w(4, 2) = 2$ is at least twice of $w(3, 4) = 1$. Extending the path using $2\\rightarrow 5$ is not possible as $w(2, 5) = 3$ is less than twice of $w(4, 2) = 2$.\n\nIn the second test case, the tree $T$ is a simple path of length $17$. An example of a nice path starting from the vertex labeled $2$ is $2\\rightarrow 3\\rightarrow 5\\rightarrow 9\\rightarrow 17$, which has edge weights of $1, 2, 4, 8$ doubling each time.", "cfid": "2101E"}
{"problem_id": "2101F", "problem_title": "F. Shoo Shatters the Sunshine", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2101/F", "problem_statement": "You are given a tree with $n$ vertices, where each vertex can be colored red, blue, or white. The coolness of a coloring is defined as the maximum distance$^{\\text{∗}}$ between a red and a blue vertex.\n\nFormally, if we denote the color of the $i$-th vertex as $c_i$, the coolness of a coloring is $\\max d(u, v)$ over all pairs of vertices $1\\le u, v\\le n$ where $c_u$ is red and $c_v$ is blue. If there are no red or no blue vertices, the coolness is zero.\n\nYour task is to calculate the sum of coolness over all $3^n$ possible colorings of the tree, modulo $998\\,244\\,353$.\n\n$^{\\text{∗}}$The distance between two vertices $a$ and $b$ in a tree is equal to the number of edges on the unique simple path between vertex $a$ and vertex $b$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 50$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2\\le n\\le 3000$) — the number of vertices in the tree.\n\nEach of the next $n - 1$ lines contains two integers $u$ and $v$ ($1\\le u, v\\le n$) — the endpoints of the edges of the tree.\n\nIt is guaranteed that the given edges form a tree.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $3000$.\n\n### Output\n\nFor each test case, output the sum of coolness over all $3^n$ possible colorings of the tree, modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n3\n\n1 2\n\n2 3\n\n6\n\n1 2\n\n1 3\n\n1 4\n\n3 5\n\n5 6\n\n17\n\n1 2\n\n1 3\n\n1 4\n\n1 5\n\n2 6\n\n2 7\n\n2 8\n\n3 9\n\n3 10\n\n7 11\n\n7 12\n\n11 13\n\n13 14\n\n14 15\n\n10 16\n\n16 17\n\n```\n\n#### Output #1\n\n```\n18\n1920\n78555509\n```\n\n### Note\n\nIn the first test case, there are $12$ colorings that have at least one blue and one red node. The following pictures show their coloring and their coolness:\n\n![](https://espresso.codeforces.com/15dd2aaf8c69f02fa71a455d40f5b7dc08ca4311.png)All these colorings have coolness $2$![](https://espresso.codeforces.com/921c5954be27aa779f596f91411b63f11d4f661a.png)All these colorings have coolness $1$\n\nTherefore, the sum of coolness over all possible colorings is $6\\cdot 2 + 6\\cdot 1 = 18$.\n\nIn the second test case, the following are some examples of colorings with a coolness of $3$:\n\n![](https://espresso.codeforces.com/24a643356f55c5c5cb134dfece58f952a4c90566.png)", "cfid": "2101F"}
{"problem_id": "2097F", "problem_title": "F. Lost Luggage", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2097/F", "problem_statement": "As is known, the airline \"Trouble\" often loses luggage, and concerned journalists decided to calculate the maximum number of luggage pieces that may not return to travelers.\n\nThe airline \"Trouble\" operates flights between $n$ airports, numbered from $1$ to $n$. The journalists' experiment will last for $m$ days. It is known that at midnight before the first day of the experiment, there were $s_j$ lost pieces of luggage in the $j$-th airport. On the $i$-th day, the following occurs:\n\n- In the morning, $2n$ flights take off simultaneously, including $n$ flights of the first type and $n$ flights of the second type.\n  - The $j$-th flight of the first type flies from airport $j$ to airport $(((j-2) \\bmod n )+ 1)$ (the previous airport, with the first airport being the last), and it can carry no more than $a_{i,j}$ lost pieces of luggage.\n  - The $j$-th flight of the second type flies from airport $j$ to airport $((j \\bmod n) + 1)$ (the next airport, with the last airport being the first), and it can carry no more than $c_{i,j}$ lost pieces of luggage.\n- In the afternoon, a check of lost luggage is conducted at the airports. If after the flights have departed on that day, there are $x$ pieces of luggage remaining in the $j$-th airport and $x \\ge b_{i, j}$, then at least $x - b_{i, j}$ pieces of luggage are found, and they cease to be lost.\n- In the evening, all $2n$ flights conclude, and the lost luggage transported that day arrives at the corresponding airports.\n\nFor each $k$ from $1$ to $m$, the journalists want to know the maximum number of lost pieces of luggage that may be unfound during the checks over the first $k$ days. Note that for each $k$, these values are calculated independently.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 100$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($3 \\le n \\le 12$, $1 \\le m \\le 2000$) — the number of airports and the number of days of the experiment.\n\nThe second line of each test case contains $n$ integers $s_1, s_2, \\ldots, s_n$ ($0 \\le s_i \\le 10^8$) — the initial number of lost pieces of luggage in each airport.\n\nNext, the descriptions for each of the $m$ days follow in order.\n\nThe first line of the description of the $i$-th day contains $n$ integers $a_{i,1}, a_{i,2}, \\ldots, a_{i,n}$ ($0 \\le a_{i, j} \\le 10^8$) — the maximum number of lost pieces of luggage that can be transported to the previous airport for each airport.\n\nThe second line of the description of the $i$-th day contains $n$ integers $b_{i,1}, \\ldots, b_{i,n}$ ($0 \\le b_{i, j} \\le 10^8$) — the minimum number of lost pieces of luggage that will be found on the $i$-th day in each airport.\n\nThe third line of the description of the $i$-th day contains $n$ integers $c_{i,1}, \\ldots, c_{i,n}$ ($0 \\le c_{i, j} \\le 10^8$) — the maximum number of lost pieces of luggage that can be transported to the next airport for each airport.\n\nIt is guaranteed that the sum of $m$ over all test cases does not exceed $2000$.\n\n### Output\n\nFor each test case, output $m$ integers — the maximum number of unfound pieces of luggage for each number of days from $1$ to $m$.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n5 3\n\n1 1 1 1 1\n\n0 0 1 0 0\n\n0 1 0 0 1\n\n1 0 0 1 0\n\n0 1 0 0 0\n\n9 0 9 9 9\n\n0 1 0 0 0\n\n0 0 0 0 0\n\n9 0 9 0 0\n\n0 0 0 0 0\n\n3 1\n\n0 100000000 5\n\n0 100000000 5\n\n0 100000000 5\n\n0 100000000 5\n\n```\n\n#### Output #1\n\n```\n5\n4\n2\n100000005\n```\n\n### Note\n\nIn the first test case:\n\n- On the first day, all $5$ pieces of luggage may not be found, as the lost luggage can be sent on flights from each airport.\n- In the morning of the second day, there may be no more than $3$ pieces of luggage in the $2$-nd airport, no more than $2$ pieces in the $5$-th airport, and no luggage in the other airports. All luggage from the $5$-th airport may remain there. In the $2$-nd airport, no more than $2$ pieces of luggage can be sent on flights to neighboring airports. Thus, at least $1$ piece of luggage will be found.\n- By the end of the third day, lost luggage may only be in the $1$-st and $2$-nd airports. There can be no more than one piece in each, meaning that at most $2$ pieces of luggage will remain unfound in total.\n\n![](https://espresso.codeforces.com/75b781e883fa683f8e14854d82606ce873c13b96.png)The found luggage is marked in green.\n\nIn the second test case, all pieces of luggage may remain in their original airports, and the inspection won't find any lost suitcases. Therefore, the answer is $10^9 + 5$.", "cfid": "2097F"}
{"problem_id": "2097E", "problem_title": "E. Clearing the Snowdrift", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2097/E", "problem_statement": "Boy Vasya loves to travel very much. In particular, flying in airplanes brings him extraordinary pleasure. He was about to fly to another city, but the runway was heavily covered with snow and needed to be cleared.\n\nThe runway can be represented as $n$ consecutive sections numbered from $1$ to $n$. The snowstorm was quite strong, but it has already stopped, so Vasya managed to calculate that the $i$-th section is covered with $a_i$ meters of snow. For such situations, the airport has a snowplow that works in a rather unusual way. In one minute, the snowplow can do the following:\n\n- Choose a consecutive segment of length no more than $d$ and remove one meter of snow from the most snow-covered sections.\nFormally, one can choose $1 \\le l \\le r \\le n$ ($r - l + 1 \\le d$). After that, $c = \\max \\{ a_l, a_{l + 1}, \\ldots , a_r \\}$ is calculated, and if $c > 0$, then for all $i \\colon l \\le i \\le r$ such that $a_i = c$, the value of $a_i$ is decreased by one.\n\n\nVasya has been preparing for the flight for a long time and wants to understand how much time he has left to wait until all sections are completely cleared of snow. In other words, it is required to calculate the minimum number of minutes that the snowplow will need to achieve $a_i = 0$ for all $i$ from $1$ to $n$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 2 \\cdot 10^5$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $d$ ($1 \\le n \\le 5 \\cdot 10^5, 1 \\le d \\le n$) — the number of sections on the runway and the maximum length of the segment that the snowplow can choose.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$), where $a_i$ is the number of meters of snow on the $i$-th section.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the minimum number of minutes required for the snowplow to achieve $a_i = 0$ for all $i$ from $1$ to $n$.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n5 2\n\n1 5 2 1 2\n\n3 1\n\n1000000000 1000000000 1000000000\n\n```\n\n#### Output #1\n\n```\n8\n3000000000\n```\n\n### Note\n\nIn the first test case, there is an optimal sequence of operations. First, select the segment $[2, 3]$ four times. After three operations, $a_2$ will turn into $2$, and the array $a$ will look like $[1, 2, 2, 1, 2]$. After the fourth operation, the array $a$ will become $[1, 1, 1, 1, 2]$. Next, the array can be transformed into zeros by selecting the segments $[1, 2]$, $[3, 3]$, $[5, 5]$, and $[4, 5]$ (in that exact order).\n\nIn the second test case, $d = 1$, which means that each section is cleared independently of the others, and the answer is equal to the sum of all $a_i$.", "cfid": "2097E"}
{"problem_id": "2096H", "problem_title": "H. Wonderful XOR Problem", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2096/H", "problem_statement": "You are the proud... never mind, just solve this problem.\n\nThere are $n$ intervals $[l_1, r_1], [l_2, r_2], \\ldots [l_n, r_n]$. For each $x$ from $0$ to $2^m - 1$, find the number, modulo $998\\,244\\,353$, of sequences $a_1, a_2, \\ldots a_n$ such that:\n\n- $l_i \\leq a_i \\leq r_i$ for all $i$ from $1$ to $n$;\n- $a_1 \\oplus a_2 \\oplus \\ldots \\oplus a_n = x$, where $\\oplus$ denotes the [bitwise XOR operator](https://en.wikipedia.org/wiki/Bitwise_operation#XOR).\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line contains two integers $n$ and $m$ ($1 \\leq n \\leq 2 \\cdot 10^5$, $1 \\leq m \\leq 18$).\n\nThe $i$-th of the next $n$ lines contains two integers $l_i$ and $r_i$ ($0 \\leq l_i \\leq r_i < 2^m$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$, and the sum of $2^m$ over all test cases does not exceed $2^{18}$.\n\n### Output\n\nFor each $x$ from $0$ to $2^m - 1$, let:\n\n- $f_x$ be the number of valid sequences, modulo $998\\,244\\,353$;\n- $g_x = f_x \\cdot 2^x \\mod 998\\,244\\,353$.\n\nHere, $f_x$ and $g_x$ are both integers in the interval $[0, 998\\,244\\,352]$.\n\nLet $h = g_0 \\oplus g_1 \\oplus \\ldots \\oplus g_{2^m - 1}$.\n\nOutput a single integer — the value of $h$ itself. Do not perform a modulo operation.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2 2\n\n0 2\n\n1 3\n\n5 3\n\n3 7\n\n1 3\n\n0 2\n\n1 5\n\n3 6\n\n10 14\n\n314 1592\n\n653 5897\n\n932 3846\n\n264 3383\n\n279 5028\n\n841 9716\n\n939 9375\n\n105 8209\n\n749 4459\n\n230 7816\n\n1 5\n\n0 29\n\n```\n\n#### Output #1\n\n```\n22\n9812\n75032210\n1073741823\n```\n\n### Note\n\nFor the first test case, the values of $f_x$ are as follows:\n\n- $f_0 = 2$, because there are $2$ valid sequences: $[1, 1]$ and $[2, 2]$;\n- $f_1 = 2$, because there are $2$ valid sequences: $[0, 1]$ and $[2, 3]$;\n- $f_2 = 2$, because there are $2$ valid sequences: $[0, 2]$ and $[1, 3]$;\n- $f_3 = 3$, because there are $3$ valid sequences: $[0, 3]$, $[1, 2]$, and $[2, 1]$.\n\nThe values of $g_x$ are as follows:\n\n- $g_0 = f_0 \\cdot 2^0 = 2 \\cdot 2^0 = 2$;\n- $g_1 = f_1 \\cdot 2^1 = 2 \\cdot 2^1 = 4$;\n- $g_2 = f_2 \\cdot 2^2 = 2 \\cdot 2^2 = 8$;\n- $g_3 = f_3 \\cdot 2^3 = 3 \\cdot 2^3 = 24$.\n\nThus, the value to output is $2 \\oplus 4 \\oplus 8 \\oplus 24 = 22$.\n\nFor the second test case, the values of $f_x$ are as follows:\n\n- $f_{0} = 120$;\n- $f_{1} = 120$;\n- $f_{2} = 119$;\n- $f_{3} = 118$;\n- $f_{4} = 105$;\n- $f_{5} = 105$;\n- $f_{6} = 106$;\n- $f_{7} = 107$.", "cfid": "2096H"}
{"problem_id": "2096G", "problem_title": "G. Wonderful Guessing Game", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2096/G", "problem_statement": "This is an interactive problem.\n\nYou are a proud teacher at the Millennium Science School. Today, a student named Alice challenges you to a guessing game.\n\nAlice is thinking of an integer from $1$ to $n$, and you must guess it by asking her some queries.\n\nTo make things harder, she says you must ask all the queries first, and she will ignore exactly $1$ query.\n\nFor each query, you choose an array of $k$ distinct integers from $1$ to $n$, where $k$ is even. Then, Alice will respond with one of the following:\n\n- $\\texttt{L}$: the number is one of the first $\\frac{k}{2}$ elements of the array;\n- $\\texttt{R}$: the number is one of the last $\\frac{k}{2}$ elements of the array;\n- $\\texttt{N}$: the number is not in the array;\n- $\\texttt{?}$: this query is ignored.\n\nAlice is impatient, so you must find a strategy that minimizes the number of queries. Can you do it?\n\nFormally, let $f(n)$ be the minimum number of queries required to determine Alice's number. Then you must find a strategy that uses exactly $f(n)$ queries.\n\nNote that the interactor is adaptive, which means Alice's number is not fixed at the beginning and may depend on your queries. However, it is guaranteed that there exists at least one number that is consistent with Alice's responses.\n\nWe can show that $f(n) \\leq 20$ for all $n$ such that $2 \\le n \\le 2 \\cdot 10^5$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe only line of each test case contains a single integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$) — the maximum possible value of Alice's number.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Interaction\n\nThe interaction begins by reading the integer $n$.\n\nThen, output a single integer $q$ ($1 \\leq q \\leq 20$) — the number of queries.\n\nTo ask a query, output a line in the following format:\n\n- $k\\,a_1\\,a_2 \\ldots a_k$ ($2 \\leq k \\leq n$, $k$ is even, $1 \\leq a_i \\leq n$, the $a_i$ are distinct) — the length of the array, and the array itself.\n\nOnce you've asked all $q$ queries, read a string $s$ ($|s| = q$) — the responses to the queries as described above.\n\nWhen you know Alice's number, output a single integer $x$ ($1 \\leq x \\leq n$) — the value of the number.\n\nThen, move on to the next test case, or terminate the program if there are no more test cases.\n\nAfter outputting all $q$ queries, do not forget to output the end of the line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- flush(output) in Pascal;\n- stdout.flush() in Python;\n- See the documentation for other languages.\n\nNote that even if you correctly determine Alice's number but use more than $f(n)$ queries, you will get Wrong answer.\n\nFor this problem, hacks are disabled.\n\n### Example\n\n#### Input #1\n\n```\n2\n3\n\n?N\n\n5\n\nR?L\n\n```\n\n#### Output #1\n\n```\n\n2\n2 1 2\n2 1 2\n\n3\n\n3\n4 3 2 4 1\n4 5 4 3 1\n4 1 5 3 4\n\n1\n```\n\n### Note\n\nIn the first test case, $n = 3$. We ask $2$ queries: $[1, 2]$, and $[1, 2]$ again.\n\n- For the first query, Alice's response is $\\texttt{?}$, which means this query is ignored.\n- For the second query, Alice's response is $\\texttt{N}$, which means her number is not in the array $[1, 2]$.\n\nFrom the information above, we can determine that Alice's number is $3$.\n\nIt can be shown that all valid strategies for $n = 3$ require at least $2$ queries.\n\nIn the second test case, $n = 5$. We ask $3$ queries: $[3, 2, 4, 1]$, $[5, 4, 3, 1]$, and $[1, 5, 3, 4]$.\n\n- For the first query, Alice's response is $\\texttt{R}$, which means her number is in the array $[4, 1]$.\n- For the second query, Alice's response is $\\texttt{?}$, which means this query is ignored.\n- For the third query, Alice's response is $\\texttt{L}$, which means her number is in the array $[1, 5]$.\n\nFrom the information above, we can determine that Alice's number is $1$.\n\nIt can be shown that all valid strategies for $n = 5$ require at least $3$ queries.", "cfid": "2096G"}
{"problem_id": "2096F", "problem_title": "F. Wonderful Impostors", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2096/F", "problem_statement": "You are a proud live streamer known as Gigi Murin. Today, you will play a game with $n$ viewers numbered $1$ to $n$.\n\nIn the game, each player is either a crewmate or an impostor. You don't know the role of each viewer.\n\nThere are $m$ statements numbered $1$ to $m$, which are either true or false. For each $i$ from $1$ to $m$, statement $i$ is one of two types:\n\n- $0\\:a_i\\:b_i$ ($1 \\leq a_i \\leq b_i \\leq n$) — there are no impostors among viewers $a_i, a_i + 1, \\ldots, b_i$;\n- $1\\:a_i\\:b_i$ ($1 \\leq a_i \\leq b_i \\leq n$) — there is at least one impostor among viewers $a_i, a_i + 1, \\ldots, b_i$.\n\nAnswer $q$ questions of the following form:\n\n- $l\\:r$ ($1 \\leq l \\leq r \\leq m$) — is it possible that statements $l, l + 1, \\ldots, r$ are all true?\n\nNote that it is not guaranteed that there is at least one impostor among all viewers, and it is not guaranteed that there is at least one crewmate among all viewers.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$, $m$ ($1 \\leq n, m \\leq 2 \\cdot 10^5$) — the number of viewers, and the number of statements.\n\nThe $i$-th of the next $m$ lines contains three integers $x_i$, $a_i$, $b_i$ ($x_i \\in \\{0, 1\\}$, $1 \\leq a_i \\leq b_i \\leq n$) — describing statement $i$.\n\nThe next line contains a single integer $q$ ($1 \\le q \\le 2 \\cdot 10^5$) — the number of questions.\n\nEach of the next $q$ lines contains two integers $l$ and $r$ ($1 \\leq l \\leq r \\leq m$) — describing a question.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$, the sum of $m$ over all test cases does not exceed $2 \\cdot 10^5$, and the sum of $q$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each question, output \"YES\" if it is possible that the requested statements are all true. Otherwise, output \"NO\".\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n4 3\n\n1 1 3\n\n1 2 4\n\n0 2 3\n\n1\n\n1 3\n\n5 2\n\n0 1 5\n\n1 1 5\n\n3\n\n1 1\n\n2 2\n\n1 2\n\n1 2\n\n0 1 1\n\n1 1 1\n\n2\n\n1 1\n\n2 2\n\n7 9\n\n1 2 2\n\n1 4 5\n\n0 5 6\n\n1 2 2\n\n1 1 1\n\n0 4 7\n\n0 3 7\n\n0 2 7\n\n0 6 6\n\n5\n\n1 5\n\n2 6\n\n3 7\n\n4 8\n\n5 9\n\n```\n\n#### Output #1\n\n```\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nNO\nYES\nNO\nYES\n```\n\n### Note\n\nIn the first test case, there are $4$ viewers and $3$ statements. The statements are as follows:\n\n- Statement $1$: There is at least one impostor among viewers $1$, $2$, and $3$;\n- Statement $2$: There is at least one impostor among viewers $2$, $3$, and $4$;\n- Statement $3$: There are no impostors among viewers $2$ and $3$.\n\nWe can see that it is possible that statements $1$, $2$, and $3$ are all true. For example, this is one possible scenario:\n\n- Viewer $1$ is an impostor;\n- Viewer $2$ is a crewmate;\n- Viewer $3$ is a crewmate;\n- Viewer $4$ is an impostor.\n\nIn the second test case, there are $5$ viewers and $2$ statements. The statements are as follows:\n\n- Statement $1$: There is at least one impostor among viewers $1$, $2$, $3$, $4$, and $5$;\n- Statement $2$: There are no impostors among viewers $1$, $2$, $3$, $4$, and $5$.\n\nWe can see that it is possible that statement $1$ is true, and it is possible that statement $2$ is true. However, it is not possible that both statements $1$ and $2$ are true.", "cfid": "2096F"}
{"problem_id": "2084H", "problem_title": "H. Turtle and Nediam 2", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2084/H", "problem_statement": "[LGR-205-Div.1 C Turtle and Nediam](https://www.luogu.com.cn/problem/P11283)\n\nYou are given a binary sequence $s$ of length $n$ which only consists of $0$ and $1$.\n\nYou can do the following operation at most $n - 2$ times (possibly zero):\n\n- Let $m$ denote the current length of $s$. Choose an integer $i$ such that $1 \\le i \\le m - 2$.\n- Let the median$^{\\text{∗}}$ of the subarray $[s_i, s_{i + 1}, s_{i + 2}]$ be $x$, and let $j$ be the smallest integer such that $j \\ge i$ and $s_j = x$.\n- Remove $s_j$ from the sequence and concatenate the remaining parts. In other words, replace $s$ with $[s_1, s_2, \\ldots, s_{j - 1}, s_{j + 1}, s_{j + 2}, \\ldots, s_m]$.\n\nNote that after every operation, the length of $s$ decreases by $1$.\n\nFind how many different binary sequences can be obtained after performing the operation, modulo $10^9 + 7$.\n\n$^{\\text{∗}}$The median of an array of odd length $k$ is the $\\frac{k + 1}{2}$-th element when sorted.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($3 \\le n \\le 2 \\cdot 10^6$) — the length of the binary sequence.\n\nThe second line of each test case contains a string $s$ of length $n$, consisting of only $0$ and $1$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^6$.\n\n### Output\n\nFor each test case, output a single integer — the number of binary sequences that can be obtained, modulo $10^9 + 7$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n5\n\n11111\n\n6\n\n100011\n\n9\n\n000111000\n\n14\n\n11001111111000\n\n16\n\n0010000110100011\n\n```\n\n#### Output #1\n\n```\n4\n8\n30\n114\n514\n```\n\n### Note\n\nIn the first test case, the following binary sequences can be obtained: $[1, 1]$, $[1, 1, 1]$, $[1, 1, 1, 1]$, $[1, 1, 1, 1, 1]$.\n\nIn the second test case, the following binary sequences can be obtained: $[0, 1]$, $[0, 1, 1]$, $[1, 0, 1]$, $[1, 0, 0, 1]$, $[1, 0, 1, 1]$, $[1, 0, 0, 0, 1]$, $[1, 0, 0, 1, 1]$, $[1, 0, 0, 0, 1, 1]$. For example, to obtain $[0, 1, 1]$, you can:\n\n- Choose $i = 2$. The median of $[0, 0, 0]$ is $0$. Remove $s_2$. The sequence becomes $[1, 0, 0, 1, 1]$.\n- Choose $i = 1$. The median of $[1, 0, 0]$ is $0$. Remove $s_2$. The sequence becomes $[1, 0, 1, 1]$.\n- Choose $i = 1$. The median of $[1, 0, 1]$ is $1$. Remove $s_1$. The sequence becomes $[0, 1, 1]$.", "cfid": "2084H"}
{"problem_id": "2084G2", "problem_title": "G2. Wish Upon a Satellite (Hard Version)", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2084/G2", "problem_statement": "This is the hard version of the problem. The difference between the versions is that in this version, $t \\le 10^4$, $n \\le 5 \\cdot 10^5$ and the sum of $n$ does not exceed $5 \\cdot 10^5$. You can hack only if you solved all versions of this problem.\n\nFor a non-empty sequence $c$ of length $k$, define $f(c)$ as follows:\n\n- Turtle and Piggy are playing a game on a sequence. They are given the sequence $c_1, c_2, \\ldots, c_k$, and Turtle goes first. Turtle and Piggy alternate in turns (so, Turtle does the first turn, Piggy does the second, Turtle does the third, etc.).\n- The game goes as follows:\n  - Let the current length of the sequence be $m$. If $m = 1$, the game ends.\n  - If the game does not end and it's Turtle's turn, then Turtle must choose an integer $i$ such that $1 \\le i \\le m - 1$, set $c_i$ to $\\min(c_i, c_{i + 1})$, and remove $c_{i + 1}$.\n  - If the game does not end and it's Piggy's turn, then Piggy must choose an integer $i$ such that $1 \\le i \\le m - 1$, set $c_i$ to $\\max(c_i, c_{i + 1})$, and remove $c_{i + 1}$.\n- Turtle wants to maximize the value of $c_1$ in the end, while Piggy wants to minimize the value of $c_1$ in the end.\n- $f(c)$ is the value of $c_1$ in the end if both players play optimally.\n\nFor a permutation $p$ of length $n$$^{\\\\text{∗}}$, Turtle defines the beauty of the permutation as $\\sum\\limits_{i = 1}^n \\sum\\limits_{j = i}^n f([p_i, p_{i + 1}, \\ldots, p_j])$ (i.e., the sum of $f(c)$ where $c$ is a non-empty subsegment$^{\\text{†}}$ of $p$).\n\nPiggy gives Turtle a permutation $a$ of length $n$ where some elements are missing and represented by $0$.\n\nTurtle asks you to determine a permutation $b$ of length $n$ such that:\n\n- $b$ can be formed by filling in the missing elements of $a$ (i.e., for all $1 \\le i \\le n$, if $a_i \\ne 0$, then $b_i = a_i$).\n- The beauty of the permutation $b$ is maximized.\n\nFor convenience, you only need to find the maximum beauty of such permutation $b$.\n\n$^{\\text{∗}}$A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n$^{\\text{†}}$A sequence $a$ is a subsegment of a sequence $b$ if $a$ can be obtained from $b$ by the deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 5 \\cdot 10^5$).\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le n$). It is guaranteed that the elements of $a$ that are not $0$ are distinct.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output a single integer — the maximum beauty of the permutation $b$.\n\n### Example\n\n#### Input #1\n\n```\n\n8\n\n2\n\n1 0\n\n3\n\n0 0 0\n\n3\n\n0 1 0\n\n5\n\n3 2 4 5 1\n\n7\n\n0 3 2 5 0 0 0\n\n10\n\n1 2 6 5 8 9 0 0 0 0\n\n5\n\n0 4 1 0 0\n\n5\n\n0 1 5 2 3\n\n```\n\n#### Output #1\n\n```\n4\n12\n11\n44\n110\n300\n45\n40\n```\n\n### Note\n\nIn the first test case, the permutation $b$ with the maximum beauty is $[1, 2]$. The beauty of $[1, 2]$ is $4$ since $f([1]) + f([2]) + f([1, 2]) = 1 + 2 + 1 = 4$. If $c = [1, 2]$, then $f(c) = 1$ since Turtle can only choose $i = 1$ and he will set $c_1$ to $\\min(c_1, c_2) = 1$.\n\nIn the second test case, one of the permutations $b$ with the maximum beauty is $[3, 2, 1]$. The beauty of $[3, 2, 1]$ is $12$ since $f([3]) + f([2]) + f([1]) + f([3, 2]) + f([2, 1]) + f([3, 2, 1]) = 3 + 2 + 1 + 2 + 1 + 3 = 12$.\n\nIn the third test case, one of the permutations $b$ with the maximum beauty is $[2, 1, 3]$.\n\nIn the fourth test case, if $c = [3, 2, 4, 5, 1]$, then $f(c) = 3$. One of the possible game processes is as follows:\n\n- Turtle can choose $i = 3$. Then he will set $c_3$ to $\\min(c_3, c_4) = 4$ and remove $c_4$. The sequence $c$ will become $[3, 2, 4, 1]$.\n- Piggy can choose $i = 1$. Then he will set $c_1$ to $\\max(c_1, c_2) = 3$ and remove $c_2$. The sequence $c$ will become $[3, 4, 1]$.\n- Turtle can choose $i = 2$. Then he will set $c_2$ to $\\min(c_2, c_3) = 1$ and remove $c_3$. The sequence $c$ will become $[3, 1]$.\n- Piggy can choose $i = 1$. Then he will set $c_1$ to $\\max(c_1, c_2) = 3$ and remove $c_2$. The sequence $c$ will become $[3]$.\n- The length of the sequence becomes $1$, so the game will end. The value of $c_1$ will be $3$ in the end.\n\nIn the fifth test case, one of the permutations $b$ with the maximum beauty is $[1, 3, 2, 5, 6, 4, 7]$.", "cfid": "2084G2"}
{"problem_id": "2089E", "problem_title": "E. Black Cat Collapse", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2089/E", "problem_statement": "The world of the black cat is collapsing.\n\nIn this world, which can be represented as a rooted tree with root at node $1$, Liki and Sasami need to uncover the truth about the world.\n\nEach day, they can explore a node $u$ that has not yet collapsed. After this exploration, the black cat causes $u$ and all nodes in its subtree to collapse. Additionally, at the end of the $i$ th day, if it exists, the number $n-i+1$ node will also collapse.\n\nFor each $i$ from $1$ to $n$, determine the number of exploration schemes where Liki and Sasami explore exactly $i$ days (i.e., they perform exactly $i$ operations), with the last exploration being at node $1$. The result should be computed modulo $998\\,244\\,353$.\n\nNote: It is guaranteed that nodes $1$ to $n$ can form a \"DFS\" order of the tree, meaning there exists a depth-first search traversal where the $i$ th visited node is $i$.\n\n### Input\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains exactly one number $n$ ($3 \\le n \\le 80$).\n\nEach of the following $n - 1$ lines contains two integers $u_i$ and $v_i$, representing two vertices connected by an edge ($1 \\le u_i, v_i \\le n$). It is guaranteed that the given edges form a tree. It is also guaranteed that the vertices can form a \"DFS\" traversal order.\n\nIt is guaranteed that the sum of $n$ for all test cases does not exceed $80$\n\n### Output\n\nFor each test case, print $n$ integers, where the $i$ th integer represents the number of exploration schemes for exactly $i$ days, modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n4\n\n1 2\n\n2 3\n\n2 4\n\n7\n\n4 2\n\n6 1\n\n5 1\n\n7 6\n\n2 3\n\n1 2\n\n```\n\n#### Output #1\n\n```\n1 3 3 1\n1 6 23 48 43 17 1\n```\n\n### Note\n\nFor the first test case, the following operation sequences are legal:\n\n$\\{1\\},\\{2,1\\},\\{3,1\\},\\{4,1\\},\\{3,2,1\\},\\{4,2,1\\},\\{4,3,1\\},\\{4,3,2,1\\}$.", "cfid": "2089E"}
{"problem_id": "2089D", "problem_title": "D. Conditional Operators", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2089/D", "problem_statement": "In C++, the conditional operator ?: is used as the value of x?y:z is $y$ if $x$ is true; otherwise, the value is $z$. $x$, $y$, and $z$ may also be expressions. It is right-associated; that is, a?b:c?d:e is equivalent to a?b:(c?d:e). $0$ means false and $1$ means true.\n\nGiven a binary string with length $2n+1$, you need to show whether the value of the expression can be $1$ after inserting $n$ conditional operators into the string. You can use parentheses. For example, the string 10101 can be transformed into (1?0:1)?0:1, whose value is $1$.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10\\,000)$, the number of test cases. The description of the test cases follows.\n\nIn the first line of each test case, there is a single integer $n$ ($1 \\le n \\le 1.5 \\cdot 10^5)$.\n\nIn the second line of each test case, there is a binary string of length $2n + 1$.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $1.5 \\cdot 10^5$.\n\n### Output\n\nFor each test case, on the first line, output Yes if the string can be transformed into an expression of value $1$; otherwise, output No.\n\nIf the answer is Yes, output the expression on the second line. You can use parentheses, but the order of the characters in the original string must remain the same. The length of your expression must be no more than $10n+1000$.\n\n### Example\n\n#### Input #1\n\n```\n\n2\n\n2\n\n10101\n\n2\n\n00000\n\n```\n\n#### Output #1\n\n```\nYes\n(1?0:1)?(0):1\nNo\n```\n\n### Note\n\nThe first test case — is the one mentioned in the problem description.\n\nIn the second test case, it is clear that regardless of how the conditional operator is used, the result will always be zero.", "cfid": "2089D"}
{"problem_id": "2089C2", "problem_title": "C2. Key of Like (Hard Version)", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2089/C2", "problem_statement": "This is the hard version of the problem. The difference between the versions is that in this version, $k$ can be non-zero. You can hack only if you solved all versions of this problem.\n\nA toy box is a refrigerator filled with childhood delight. Like weakness, struggle, hope ... When such a sleeper is reawakened, what kind of surprises will be waiting?\n\nM received her toy box as a birthday present from her mother. A jewellery designer would definitely spare no effort in decorating yet another priceless masterpiece as a starry firmament with exquisitely shaped gemstones. In addition, $l$ distinct locks secure the tiny universe of her lovely daughter: a hair clip featuring a flower design, a weathered feather pen, a balloon shaped like the letter M ... each piece obscures a precious moment.\n\nA few days ago, M rediscovered her toy box when she was reorganizing her bedroom, along with a ring of keys uniquely designed for the toy box. Attached to the key ring are $(l + k)$ keys, of which $l$ keys are able to open one of the $l$ locks correspondingly, while the other $k$ keys are nothing but counterfeits to discourage brute-force attack. To remind the correspondence, M's mother adorned each key with a gemstone of a different type. However, passing days have faded M's memory away.\n\n\"... So I have to turn to you all,\" M said while laying that ring of keys on the table.\n\nK picked up the keys and examined them carefully. \"The appearance of these keys unveils nothing fruitful. Thus, I am afraid that we shall inspect them sequentially.\"\n\nAlthough everyone is willing to help M, nobody has a plan. Observing others' reactions, T suggested, \"Let's play a game. Everyone tries a key in turn, and who opens the most locks is amazing.\"\n\n$n$ members, including M herself, take turns to unlock the toy box recursively in the same order until all the $l$ locks are unlocked. At each turn, the current member only selects a single key and tests it on exactly one of the locks. To open the toy box as soon as possible, every member chooses the key and the lock that maximize the probability of being a successful match. If there are multiple such pairs, a member will randomly choose one of such pairs with equal probability. Apparently, if a lock has been matched with a key, then neither the lock nor the key will be chosen again in following attempts.\n\nAssume that at the very beginning, the probability that a lock can be opened by any key is equal. If everyone always tries the optimal pairs of keys and locks based on all the historical trials, what will the expected number of successful matches be for each member?\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 100$). The description of the test cases follows.\n\nThe only line of the input contains three integers, $n$, $l$, $k$ ($1 \\leq n \\leq 100, 1 \\leq l \\leq 5000, 0 \\leq k \\leq 25$) — the number of members participating in the game, the number of locks, and the number of counterfeit keys.\n\nIt is guaranteed that the sum of $l$ across all test cases does not exceed $5000$.\n\n### Output\n\nFor each test case, output a single line with $n$ integers $e_1, \\ldots, e_n$, where $e_i$ represents the expected number of successful matches, modulo $10^9 + 7$.\n\nFormally, let $M = 10^9 + 7$. It can be shown that the exact answer can be expressed as an irreducible fraction $\\frac{p}{q}$, where $p$ and $q$ are integers and $q \\not \\equiv 0 \\pmod{M}$. Output the integer equal to $p \\cdot q^{-1} \\bmod M$. In other words, output such an integer $e_i$ that $0 \\le x < M$ and $e_i \\cdot q \\equiv p \\pmod{M}$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n3 1 4\n\n3 2 0\n\n25 2 5\n\n4 102 9\n\n```\n\n#### Output #1\n\n```\n800000006 800000006 400000003\n500000004 1 500000004\n142857144 166666668 615646263 639455787 234126986 257936510 195918369 502040820 478316330 81264173 190523433 471438023 23809524 0 0 0 0 0 0 0 0 0 0 0 0\n568832210 85779764 969938175 375449967\n```\n\n### Note\n\nFor the first test case, there is only $1$ lock, so the strategy will always be choosing any key that no one has ever tried. Since there are $1 + 4 = 5$ keys in total, the probability that each member successfully opens the lock will be $2/5, 2/5, 1/5$ respectively, which are also the expected numbers of successful matches.\n\nFor the second test case, there are exactly $2$ locks and $2$ keys, with each key corresponding to one of the locks. Without extra information, the first member randomly chooses a key and a lock with equal probabilities, for which the probability of success is $1/2$.\n\n- If the first member succeeds, the second member will open the other lock with the other key.\n- If the first member fails, then the key she selected can open the other lock, and the other key must correspond to the lock she chose. This information allows both the second and the third member to open a lock.\n\nIn conclusion, the expected numbers of successful matches will be:\n\n\n\n$$ \\begin{split} e_1 &= \\frac{1}{2}\\times 1 + \\frac{1}{2}\\times 0 = \\frac{1}{2} \\equiv 500,000,004 \\pmod {10^9+7},\\\\ e_2 &= \\frac{1}{2}\\times 1 + \\frac{1}{2} \\times 1 = 1,\\\\ e_3 &= \\frac{1}{2}\\times 0 + \\frac{1}{2} \\times 1 = \\frac{1}{2} \\equiv 500,000,004\\pmod {10^9+7}. \\end{split} $$\n\n", "cfid": "2089C2"}
{"problem_id": "2077G", "problem_title": "G. RGB Walking", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2077/G", "problem_statement": "[Red and Blue and Green - fn and Silentroom](https://www.youtube.com/watch?v=UeN7U474cxE)\n\n⠀\n\nYou are given a connected graph with $n$ vertices and $m$ bidirectional edges with weight not exceeding $x$. The $i$-th edge connects vertices $u_i$ and $v_i$, has weight $w_i$, and is assigned a color $c_i$ ($1 \\leq i \\leq m$, $1 \\leq u_i, v_i \\leq n$). The color $c_i$ is either red, green, or blue. It is guaranteed that there is at least one edge of each color.\n\nFor a walk where vertices and edges may be repeated, let $s_r, s_g, s_b$ denote the sum of the weights of the red, green, and blue edges that the walk passes through, respectively. If an edge is traversed multiple times, each traversal is counted separately.\n\nFind the minimum value of $\\max(s_r, s_g, s_b) - \\min(s_r, s_g, s_b)$ over all possible walks from vertex $1$ to vertex $n$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n$, $m$, and $x$ ($4 \\leq n \\leq 2 \\cdot 10^5$, $n-1 \\leq m \\leq 2 \\cdot 10^5$, $1 \\leq x \\leq 2 \\cdot 10^5$) — the number of vertices, the number of edges in the graph, and the upper bound on the weight of the edges, respectively.\n\nThe next $m$ lines each contain three integers $u_i, v_i, w_i$ and a letter $c_i$ ($1 \\leq u_i, v_i \\leq n$, $1 \\leq w_i \\leq x$), representing a bidirectional edge between vertices $u_i$ and $v_i$ with weight $w_i$ and color $c_i$. The color $c_i$ is either 'r', 'g', or 'b', denoting red, green, and blue, respectively.\n\nIt is guaranteed that the graph is connected and contains at least one edge of each color. The graph may also contain multiple edges and self-loops.\n\nAdditionally, it is guaranteed that the total sum of all values of $n$, the total sum of all values of $m$, and the total sum of all values of $x$ across all test cases do not exceed $2 \\cdot 10^5$ individually.\n\n### Output\n\nFor each test case, output a single integer — the minimum value of $\\max(s_r, s_g, s_b) - \\min(s_r, s_g, s_b)$ over all walks from vertex $1$ to vertex $n$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n4 3 3\n\n1 2 2 r\n\n2 3 3 g\n\n3 4 2 b\n\n4 5 4\n\n1 2 1 r\n\n1 1 1 r\n\n2 1 1 r\n\n2 3 4 g\n\n3 4 4 b\n\n4 6 4\n\n1 2 2 r\n\n1 2 2 r\n\n2 3 3 b\n\n1 3 4 r\n\n1 4 1 g\n\n3 4 4 g\n\n```\n\n#### Output #1\n\n```\n1\n0\n0\n```\n\n### Note\n\nIn the first test case, the optimal path is $1 \\to 2 \\to 3 \\to 4$. The edges used are:\n\n- $1 \\to 2$ (red, weight $2$)\n- $2 \\to 3$ (green, weight $3$)\n- $3 \\to 4$ (blue, weight $2$)\n\nWe have $s_r = 2$, $s_g = 3$, and $s_b = 2$. Thus, the answer is $1$.\n\nIn the second test case, one of the optimal paths is $1 \\to 1 \\to 2 \\to 1 \\to 2 \\to 3 \\to 4$. The edges used are:\n\n- $1 \\to 1$ (red, weight $1$)\n- $1 \\to 2$ (red, weight $1$)\n- $2 \\to 1$ (red, weight $1$)\n- $1 \\to 2$ (red, weight $1$)\n- $2 \\to 3$ (green, weight $4$)\n- $3 \\to 4$ (blue, weight $4$)\n\nWe have $s_r = s_g = s_b = 4$. Thus, the answer is $0$.", "cfid": "2077G"}
{"problem_id": "2077F", "problem_title": "F. AND x OR", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2077/F", "problem_statement": "Suppose you have two arrays $c$ and $d$, each of length $k$. The pair $(c, d)$ is called good if $c$ can be changed to $d$ by performing the following operation any number of times.\n\n- Select two distinct indices $i$ and $j$ ($1 \\leq i, j \\leq k$, $i \\neq j$) and a nonnegative integer $x$ ($0 \\leq x < 2^{30}$). Then, apply the following transformations:\n  - $c_i := c_i \\mathbin{\\&} x$, where $\\&$ denotes the [bitwise AND operation](https://en.wikipedia.org/wiki/Bitwise_operation#AND).\n  - $c_j := c_j \\mathbin{|} x$, where $|$ denotes the [bitwise OR operation](https://en.wikipedia.org/wiki/Bitwise_operation#OR).\n\nYou are given two arrays $a$ and $b$, both of length $n$, containing nonnegative integers not exceeding $m$.\n\nYou can perform two types of moves on these arrays any number of times:\n\n1. Select an index $i$ ($1 \\leq i \\leq n$) and set $a_i := a_i + 1$.\n2. Select an index $i$ ($1 \\leq i \\leq n$) and set $b_i := b_i + 1$.\n\nNote that the elements of $a$ and $b$ may exceed $m$ at some point while performing the moves.\n\nFind the minimum number of moves required to make the pair $(a, b)$ good.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\leq n, m \\leq 2 \\cdot 10^6$) — the length of arrays $a$ and $b$, and the maximum possible value in these arrays, respectively.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\leq a_i \\leq m$) — denoting the array $a$.\n\nThe third line contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($0 \\leq b_i \\leq m$) — denoting the array $b$.\n\nAdditionally, it is guaranteed that the sum of all values of $n$ and the sum of all values of $m$ across all test cases do not exceed $2 \\cdot 10^6$.\n\n### Output\n\nFor each test case, output a single integer — the minimum number of moves required to make the pair $(a, b)$ good.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n4 3\n\n0 1 2 3\n\n0 1 2 3\n\n3 32\n\n8 9 32\n\n8 6 32\n\n5 64\n\n5 7 16 32 64\n\n4 8 16 32 64\n\n4 11\n\n9 1 4 3\n\n8 11 6 2\n\n5 10\n\n7 9 5 4 2\n\n3 10 6 5 9\n\n```\n\n#### Output #1\n\n```\n0\n2\n2\n0\n1\n```\n\n### Note\n\nIn the first case, we already have $a = b$.\n\nIn the second case, we can perform move $2$ on index $i = 2$ twice. The array $b$ becomes $[8, 8, 32]$. We can see that $(a, b)$ is now good.\n\nIn the third case, we can perform move $2$ on index $i = 1$, then perform move $1$ on index $i = 2$. It can be proven that you cannot make the pair $(a, b)$ good in fewer than $2$ moves.", "cfid": "2077F"}
{"problem_id": "2077D", "problem_title": "D. Maximum Polygon", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2077/D", "problem_statement": "Given an array $a$ of length $n$, determine the lexicographically largest$^{\\text{∗}}$ subsequence$^{\\text{†}}$ $s$ of $a$ such that $s$ can be the side lengths of a polygon.\n\nRecall that $s$ can be the side lengths of a polygon if and only if $|s| \\geq 3$ and\n\n\n\n$$ 2 \\cdot \\max(s_1, s_2, \\ldots, s_{|s|}) < s_1 + s_2 + \\ldots + s_{|s|}. $$\n\nIf no such subsequence $s$ exists, print $-1$.\n\n$^{\\text{∗}}$A sequence $x$ is lexicographically smaller than a sequence $y$ if and only if one of the following holds:\n\n- $x$ is a prefix of $y$, but $x \\ne y$;\n- in the first position where $x$ and $y$ differ, the sequence $x$ has a smaller element than the corresponding element in $y$.\n\n$^{\\text{†}}$A sequence $x$ is a subsequence of a sequence $y$ if $x$ can be obtained from $y$ by deleting several (possibly zero or all) elements.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($3 \\leq n \\leq 2 \\cdot 10^5$) — the length of the array $a$.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$) — the array $a$.\n\nIt is guaranteed that the total sum of all values of $n$ across all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the answer in the following format:\n\nIf the answer exists, output the following.\n\nIn the first line, output the integer $k$ ($1 \\leq k \\leq n$) — the length of the subsequence $s$.\n\nIn the second line, output $k$ integers $s_1, s_2, \\ldots, s_k$ ($1 \\leq s_i \\leq 10^9$, $s$ is a subsequence of $a$) — the subsequence $s$. Note that the desired output is the value, not the index.\n\nOtherwise, output a single line with the integer $-1$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3\n\n3 1 2\n\n4\n\n1 4 2 3\n\n6\n\n1 6 4 5 3 2\n\n6\n\n43 12 99 53 22 4\n\n7\n\n9 764 54 73 22 23 1\n\n```\n\n#### Output #1\n\n```\n-1\n3\n4 2 3\n4\n6 5 3 2\n5\n43 99 53 22 4\n4\n54 73 23 1\n```\n\n### Note\n\nIn the first test case, there are no subsequences that can be the side lengths of a polygon.\n\nIn the second test case, there are $2$ subsequences that can be the side lengths of a polygon: $1, 4, 2, 3$ and $4, 2, 3$. The latter is the lexicographically larger subsequence.", "cfid": "2077D"}
{"problem_id": "2066E", "problem_title": "E. Tropical Season", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2066/E", "problem_statement": "You have $n$ barrels of infinite capacity. The $i$-th barrel initially contains $a_i$ kilograms of water. In this problem, we assume that all barrels weigh the same.\n\nYou know that exactly one of the barrels has a small amount of tropical poison distributed on its surface, with a total weight of $0.179$ kilograms. However, you do not know which barrel contains the poison. Your task is to identify this poisonous barrel.\n\nAll the barrels are on scales. Unfortunately, the scales do not show the exact weight of each barrel. Instead, for each pair of barrels, they show the result of a comparison between the weights of those barrels. Thus, for any two barrels, you can determine whether their weights are equal, and if not, which barrel is heavier. The poison and water are included in the weight of the barrel.\n\nThe scales are always turned on, and the information from them can be used an unlimited number of times.\n\nYou also have the ability to pour water. You can pour water from any barrel into any other barrel in any amounts.\n\nHowever, to pour water, you must physically handle the barrel from which you are pouring, so if that happens to be the poisonous barrel, you will die. This outcome must be avoided.\n\nHowever, you can pour water into the poisonous barrel without touching it.\n\nIn other words, you can choose the numbers $i, j, x$ ($i \\neq j, 1 \\leq i, j \\leq n, 0 < x \\leq a_i$, the barrel numbered $i$ is not poisonous) and execute $a_i := a_i - x$, $a_j := a_j + x$. Where $x$ is not necessarily an integer.\n\nIs it possible to guarantee the identification of which barrel contains the poison and remain alive using pouring and the information from the scales? You know that the poison is located on exactly one of the barrels.\n\nAdditionally, we ask you to process $q$ queries. In each query, either one of the existing barrels is removed, or an additional barrel with a certain amount of water is added. After each query, you need to answer whether it is possible to guarantee the identification of the poisonous barrel, given that there is exactly one.\n\n### Input\n\nThe first line contains two integers $n$ and $q$ ($1 \\le n, q \\le 2 \\cdot 10^5$).\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^6$) — the volumes of water in the existing barrels.\n\nThe next $q$ lines contain queries, one per line. Each query is either of the form \\+ x or \\- x, which means, respectively, adding and removing a barrel with $x$ kilograms of water. It is guaranteed that when the query \\- x is made, one of the existing barrels has a volume of $x$, and that there is always at least one barrel remaining throughout the queries. In all queries, $1 \\leq x \\leq 10^6$.\n\n### Output\n\nOutput $q+1$ lines, the answer to the problem before all queries, and after each query. If it is possible to identify the poisonous barrel, output \"Yes\"; otherwise, output \"No\". You can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Examples\n\n#### Input #1\n\n```\n\n4 7\n\n2 2 4 11\n\n\\- 2\n\n\\+ 4\n\n\\+ 30\n\n\\+ 40\n\n\\- 4\n\n\\+ 2\n\n\\+ 2\n\n```\n\n#### Output #1\n\n```\nYes\nNo\nYes\nNo\nYes\nNo\nNo\nYes\n```\n\n#### Input #2\n\n```\n\n6 7\n\n5000 1000 400 400 100 99\n\n\\+ 1\n\n\\- 5000\n\n\\- 1\n\n\\- 400\n\n\\- 400\n\n\\- 100\n\n\\- 99\n\n```\n\n#### Output #2\n\n```\nNo\nYes\nYes\nYes\nNo\nNo\nNo\nYes\n```\n\n### Note\n\nIn the first test, before any queries, the weights of the barrels are $[2, 2, 4, 11]$. You can compare the values of the first and second barrels. If the result is not equal, you can definitively conclude that the barrel with the greater weight is poisonous. If the result is equal, both barrels are non-poisonous. Then you can pour all the contents of the first barrel into the second. After that, both the second and third barrels will contain $4$ kilograms of water. Now let's compare the values of the second and third barrels. If the result is not equal, the barrel with the greater weight is poisonous. Otherwise, both barrels are non-poisonous. The only barrel that could be poisonous is barrel 4. Thus, with this strategy, we can safely determine the poisonous barrel.", "cfid": "2066E"}
{"problem_id": "2066F", "problem_title": "F. Curse", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2066/F", "problem_statement": "You are given two arrays of integers: $a_1, a_2, \\ldots, a_n$ and $b_1, b_2, \\ldots, b_m$.\n\nYou need to determine if it is possible to transform array $a$ into array $b$ using the following operation several (possibly, zero) times.\n\n- Among all non-empty subarrays$^{\\text{∗}}$ of $a$, choose any with the maximum sum, and replace this subarray with an arbitrary non-empty integer array.\n\nIf it is possible, you need to construct any possible sequence of operations. Constraint: in your answer, the sum of the lengths of the arrays used as replacements must not exceed $n + m$ across all operations. The numbers must not exceed $10^9$ in absolute value.\n\n$^{\\text{∗}}$An array $a$ is a subarray of an array $b$ if $a$ can be obtained from $b$ by the deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 200$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n, m$ ($1 \\le n, m \\le 500$) — the lengths of arrays $a$ and $b$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($-10^6 \\le a_i \\le 10^6$) — the elements of array $a$.\n\nThe third line of each test case contains $m$ integers $b_1, b_2, \\ldots, b_m$ ($-10^6 \\le b_i \\le 10^6$) — the elements of array $b$.\n\nIt is guaranteed that the sum of the values of $n$ across all test cases does not exceed $500$.\n\nIt is guaranteed that the sum of the values of $m$ across all test cases does not exceed $500$.\n\n### Output\n\nFor each test case, output $-1$ if it is impossible to transform array $a$ into array $b$.\n\nOtherwise, in the first line, output the number of operations $0 \\leq q \\leq n + m$. Then output the operations in the following format in the order they are performed.\n\nIn the first line of each operation, print three numbers $l, r, k$ ($1 \\leq l \\leq r \\leq |a|$). In the second line, print $k$ integers $c_1 \\ldots c_k$, which means replacing the segment $a_l, \\ldots, a_r$ with the array $c_1, \\ldots, c_k$.\n\nThe sum of $k$ across all $q$ operations must not exceed $n + m$. Additionally, it must hold that $-10^9 \\leq c_i \\leq 10^9$.\n\nYou do not need to minimize the number of operations.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n4 3\n\n2 -3 2 0\n\n-3 -7 0\n\n2 1\n\n-2 -2\n\n2\n\n5 4\n\n-5 9 -3 5 -9\n\n-6 6 -1 -9\n\n```\n\n#### Output #1\n\n```\n4\n3 4 1\n-3\n\n1 1 1\n-3\n\n2 2 1\n-7\n\n3 3 1\n0\n\n-1\n\n3\n2 4 1\n-5\n\n1 1 1\n-6\n\n2 2 2\n6 -1\n```\n\n### Note\n\nIn the first test, the initial array is modified as follows:\n\n\n\n$$ [2, -3, 2, 0] \\to [2, -3, -3] \\to [-3, -3, -3] \\to [-3, -7, -3] \\to [-3, -7, 0] $$\n\nYou may choose to output empty lines or not. Empty lines in the example are added for convenience.", "cfid": "2066F"}
{"problem_id": "2062H", "problem_title": "H. Galaxy Generator", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2062/H", "problem_statement": "In a two-dimensional universe, a star can be represented by a point $(x,y)$ on a two-dimensional plane. Two stars are directly connected if and only if their $x$ or $y$ coordinates are the same, and there are no other stars on the line segment between them. Define a galaxy as a connected component composed of stars connected directly or indirectly (through other stars).\n\nFor a set of stars, its value is defined as the minimum number of galaxies that can be obtained after performing the following operation for any (possibly, zero) times: in each operation, you can select a point $(x,y)$ without stars. If a star can be directly connected to at least $3$ stars after creating it here, then you create a star here.\n\nYou are given a $n\\times n$ matrix $a$ consisting of $0$ and $1$ describing a set $S$ of stars. There is a star at $(x,y)$ if and only if $a_{x,y}=1$. Calculate the sum, modulo $10^9 + 7$, of the values of all non-empty subsets of $S$.\n\n### Input\n\nThe first line of input contains a single integer $t$ ($1 \\leq t \\leq 100$) — the number of test cases.\n\nFor each test case, the first line contains a single integer $n$ ($1 \\leq n \\leq 14$) — the size of matrix $a$.\n\nThen $n$ lines follow; the $i$-th line contains a string $a_i$ of length $n$ — the $i$-th row of matrix $a$.\n\nIt is guaranteed that the sum of $2^n$ over all test cases does not exceed $2^{14}$.\n\n### Output\n\nFor each test case, output the sum, modulo $10^9 + 7$, of the values of all non-empty subsets of $S$.\n\n### Example\n\n#### Input #1\n\n```\n8\n1\n0\n2\n01\n10\n3\n010\n000\n101\n4\n0110\n1001\n1001\n0110\n11\n11111110111\n10000010010\n10111010011\n10111010011\n10111010001\n10000010000\n11111110101\n00000000111\n11011010011\n10010101100\n11101010100\n11\n11011111110\n10010000010\n00010111010\n10010111010\n01010111010\n11010000010\n01011111110\n11000000000\n01010000010\n01000111100\n00000001010\n11\n11010101001\n11001010100\n00000000110\n11111110010\n10000010010\n10111010110\n10111010111\n10111010010\n10000010110\n11111110100\n00000000000\n3\n111\n100\n111\n```\n\n#### Output #1\n\n```\n0\n4\n9\n355\n593092633\n438667113\n922743932\n155\n```\n\n### Note\n\nIn the first test case, $S$ is empty. $S$ has no non-empty subsets. So the answer is $0$.\n\nIn the second test case, $S = \\{(1,2),(2,1)\\}$. $S$ has $3$ non-empty subsets.\n\n- $\\{(1,2)\\}$ and $\\{(2,1)\\}$ — there is only one star in the set, forming $1$ galaxy.\n- $\\{(1,2),(2,1)\\}$ — two stars in the set are not connected, forming $2$ galaxies.\n\nSo the answer is $1+1+2=4$.\n\nIn the third test case, $S = \\{(1,2),(3,1),(3,3)\\}$. $S$ has $7$ non-empty subsets.\n\n- $\\{(1,2)\\}$, $\\{(3,1)\\}$, and $\\{(3,3)\\}$ — there is only one star in the set, forming $1$ galaxy.\n- $\\{(1,2),(3,1)\\}$ and $\\{(1,2),(3,3)\\}$ — two stars in the set are not connected, forming $2$ galaxies.\n- $\\{(3,1),(3,3)\\}$ — two stars in the set are connected, forming $1$ galaxy.\n- $\\{(1,2),(3,1),(3,3)\\}$ — initially, star $(1,2)$ is not in the galaxy formed by $(3,1)$ and $(3,3)$. You can make an operation creating a star at $(3,2)$ connecting to these three stars, forming $1$ galaxy.\n\nSo the answer is $1+1+1+2+2+1+1=9$.", "cfid": "2062H"}
{"problem_id": "2062G", "problem_title": "G. Permutation Factory", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2062/G", "problem_statement": "You are given two permutations $p_1,p_2,\\ldots,p_n$ and $q_1,q_2,\\ldots,q_n$ of length $n$. In one operation, you can select two integers $1\\leq i,j\\leq n,i\\neq j$ and swap $p_i$ and $p_j$. The cost of the operation is $\\min (|i-j|,|p_i-p_j|)$.\n\nFind the minimum cost to make $p_i = q_i$ hold for all $1\\leq i\\leq n$ and output a sequence of operations to achieve the minimum cost.\n\nA permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\n### Input\n\nThe first line of input contains a single integer $t$ ($1 \\leq t \\leq 10^4$) — the number of input test cases.\n\nThe first line of each test case contains one integer $n$ ($2 \\le n \\le 100$) — the length of permutations $p$ and $q$.\n\nThe second line contains $n$ integers $p_1,p_2,\\ldots,p_n$ ($1\\leq p_i\\leq n$) — the permutation $p$. It is guaranteed that $p_1,p_2,\\ldots,p_n$ is a permutation of $1,2,\\ldots,n$.\n\nThe third line contains $n$ integers $q_1,q_2,\\ldots,q_n$ ($1\\leq q_i\\leq n$) — the permutation $q$. It is guaranteed that $q_1,q_2,\\ldots,q_n$ is a permutation of $1,2,\\ldots,n$.\n\nIt is guaranteed that the sum of $n^3$ over all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case, output the total number of operations $k$ ($0\\le k\\le n^2$) on the first line. Then output $k$ lines, each containing two integers $i,j$ ($1\\le i,j\\le n$, $i\\neq j$) representing an operation to swap $p_i$ and $p_j$ in order.\n\nIt can be shown that no optimal operation sequence has a length greater than $n^2$.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2\n\n2 1\n\n2 1\n\n3\n\n1 2 3\n\n3 2 1\n\n4\n\n2 1 4 3\n\n4 2 3 1\n\n5\n\n1 4 3 2 5\n\n5 2 3 4 1\n\n```\n\n#### Output #1\n\n```\n0\n1\n1 3\n3\n1 4\n2 4\n1 3\n4\n1 2\n4 5\n2 5\n1 4\n```\n\n### Note\n\nIn the second test case, you can swap $p_1,p_3$ costing $\\min(|1-3|,|1-3|)=2$. Then $p$ equals $q$ with a cost of $2$.\n\nIn the third test case, you can perform the following operations:\n\nInitially, $p=[2,1,4,3]$.\n\n1. Swap $p_1,p_4$ costing $\\min(|1-4|,|2-3|)=1$, resulting in $p=[3,1,4,2]$.\n2. Swap $p_2,p_4$ costing $\\min(|2-4|,|1-2|)=1$, resulting in $p=[3,2,4,1]$.\n3. Swap $p_1,p_3$ costing $\\min(|1-3|,|3-4|)=1$. Then $p$ equals $q$ with a cost of $3$.", "cfid": "2062G"}
{"problem_id": "2061I", "problem_title": "I. Kevin and Nivek", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2061/I", "problem_statement": "Kevin and Nivek are competing for the title of \"The Best Kevin\". They aim to determine the winner through $n$ matches.\n\nThe $i$-th match can be one of two types:\n\n- Type 1: Kevin needs to spend $a_i$ time to defeat Nivek and win the match. If Kevin doesn't spend $a_i$ time on it, Nivek will win the match.\n- Type 2: The outcome of this match depends on their historical records. If Kevin's number of wins is greater than or equal to Nivek's up to this match, then Kevin wins. Otherwise, Nivek wins.\n\nKevin wants to know the minimum amount of time he needs to spend to ensure he wins at least $k$ matches.\n\nOutput the answers for $k = 0, 1, \\ldots, n$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 3 \\cdot 10^5$) — the number of matches.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($-1 \\leq a_i \\leq 10^9$).\n\nIf $a_i = -1$, the $i$-th match is of Type 2. Otherwise, the $i$-th match is of Type 1, and $a_i$ represents the amount of time Kevin needs to spend to win this match.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $3 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output $n + 1$ integers. The $i$-th integer represents the minimum amount of time to win at least $i-1$ matches.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n5\n\n-1 -1 -1 -1 -1\n\n5\n\n3 2 5 4 1\n\n5\n\n100 -1 -1 -1 1\n\n```\n\n#### Output #1\n\n```\n0 0 0 0 0 0\n0 1 3 6 10 15\n0 1 100 100 100 101\n```\n\n### Note\n\nIn the first test case, all matches are of Type 2. Kevin can automatically win all matches.\n\nIn the second test case, all matches are of Type 1. Kevin can choose matches in increasing order of $a_i$.\n\nIn the third test case:\n\n- If Kevin spends $a_1$ time on match $1$, he can win matches $1, 2, 3, 4$.\n- If Kevin spends $a_5$ time on match $5$, he can win match $5$.\n- If Kevin spends $a_1$ time on match $1$ and $a_5$ time on match $5$, he can win all matches.", "cfid": "2061I"}
{"problem_id": "2061H2", "problem_title": "H2. Kevin and Stones (Hard Version)", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2061/H2", "problem_statement": "This is the hard version of the problem. The difference between the versions is that in this version, you need to output a valid sequence of operations if one exists. You can hack only if you solved all versions of this problem.\n\nKevin has an undirected graph with $n$ vertices and $m$ edges. Initially, some vertices contain stones, which Kevin wants to move to new positions.\n\nKevin can perform the following operation:\n\n- For each stone at $u_i$, select a neighboring vertex $v_i$. Simultaneously move each stone from $u_i$ to its corresponding $v_i$.\n\nAt any time, each vertex can contain at most one stone.\n\nDetermine whether a valid sequence of operations exists that moves the stones from the initial state to the target state. Output a valid sequence of operations with no more than $2n$ moves if one exists. It can be proven that if a valid sequence exists, a valid sequence with no more than $2n$ moves exists.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1\\leq n \\leq 2000$, $0\\leq m \\leq \\min(\\frac{n(n-1)}{2}, 10^4)$) — the number of vertices and edges in the graph.\n\nThe second line contains a binary string $s$ consisting of '0' and '1'. The $i$-th bit of $s$ indicates the number of stones on the $i$-th vertex in the initial state.\n\nThe third line contains a binary string $t$ consisting of '0' and '1'. The $i$-th bit of $t$ indicates the number of stones on the $i$-th vertex in the target state.\n\nEach of the next $m$ lines contains two integers $u$ and $v$ ($1\\leq u, v \\leq n$) — an undirected edge between the $u$-th vertex and the $v$-th vertex.\n\nIt is guaranteed that the graph is simple. There are no self-loops and parallel edges in the graph.\n\nIt is guaranteed that the numbers of '1' in $s$ and $t$ are the same.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2000$.\n\nIt is guaranteed that the sum of $m$ over all test cases does not exceed $10^4$.\n\n### Output\n\nFor each test case, on the first line, output \"Yes\" or \"No\" to indicate whether a valid sequence of operations exists.\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\nIf a valid sequence of operations exists, output a single integer $k$ ($0 \\leq k \\leq 2n$) on the second line, representing the number of operations. Suppose there are $c$ stones in the initial state. The next $k + 1$ lines should each contain distinct $c$ integers, representing the positions of the stones before the operations and after each operation. These positions should satisfy the following:\n\n- The positions of the stones in the first line match the initial state from the input, in any order.\n- The positions of the stones in the last line match the target state from the input, in any order.\n- For all $i$ ($1\\leq i\\leq k$) and $j$ ($1\\leq j\\leq c$), ensure that the $j$-th integer in the $i$-th line and the $j$-th integer in the $(i+1)$-th line correspond to adjacent vertices in the graph. In other words, the stone is moved from its previous position to the next.\n\nIf there are multiple solutions, print any of them.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2 1\n\n10\n\n01\n\n1 2\n\n11 11\n\n11011001010\n\n01101011100\n\n1 2\n\n2 3\n\n3 4\n\n4 5\n\n5 6\n\n6 7\n\n7 8\n\n8 9\n\n9 10\n\n10 11\n\n11 1\n\n3 2\n\n110\n\n101\n\n1 2\n\n2 3\n\n3 2\n\n111\n\n111\n\n1 2\n\n2 3\n\n```\n\n#### Output #1\n\n```\nYes\n1\n1\n2\nYes\n6\n1 2 4 5 8 10\n2 3 5 6 9 11\n3 2 6 7 10 1\n4 3 7 8 11 2\n5 2 8 9 1 3\n6 3 7 8 2 4\n7 2 8 9 3 5\nNo\nYes\n0\n1 2 3\n```", "cfid": "2061H2"}
{"problem_id": "2061H1", "problem_title": "H1. Kevin and Stones (Easy Version)", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2061/H1", "problem_statement": "This is the easy version of the problem. The difference between the versions is that in this version, you only need to determine whether a valid sequence of operations exists. You can hack only if you solved all versions of this problem.\n\nKevin has an undirected graph with $n$ vertices and $m$ edges. Initially, some vertices contain stones, which Kevin wants to move to new positions.\n\nKevin can perform the following operation:\n\n- For each stone at $u_i$, select a neighboring vertex $v_i$. Simultaneously move each stone from $u_i$ to its corresponding $v_i$.\n\nAt any time, each vertex can contain at most one stone.\n\nDetermine whether a valid sequence of operations exists that moves the stones from the initial state to the target state.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1\\leq n \\leq 2000$, $0\\leq m \\leq \\min(\\frac{n(n-1)}{2}, 10^4)$) — the number of vertices and edges in the graph.\n\nThe second line contains a binary string $s$ consisting of '0' and '1'. The $i$-th bit of $s$ indicates the number of stones on the $i$-th vertex in the initial state.\n\nThe third line contains a binary string $t$ consisting of '0' and '1'. The $i$-th bit of $t$ indicates the number of stones on the $i$-th vertex in the target state.\n\nEach of the next $m$ lines contains two integers $u$ and $v$ ($1\\leq u, v \\leq n$) — an undirected edge between the $u$-th vertex and the $v$-th vertex.\n\nIt is guaranteed that the graph is simple. There are no self-loops and parallel edges in the graph.\n\nIt is guaranteed that the numbers of '1' in $s$ and $t$ are the same.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2000$.\n\nIt is guaranteed that the sum of $m$ over all test cases does not exceed $10^4$.\n\n### Output\n\nFor each test case, on the first line, output \"Yes\" or \"No\" to indicate whether a valid sequence of operations exists.\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n4\n\n2 1\n\n10\n\n01\n\n1 2\n\n11 11\n\n11011001010\n\n01101011100\n\n1 2\n\n2 3\n\n3 4\n\n4 5\n\n5 6\n\n6 7\n\n7 8\n\n8 9\n\n9 10\n\n10 11\n\n11 1\n\n3 2\n\n110\n\n101\n\n1 2\n\n2 3\n\n3 2\n\n111\n\n111\n\n1 2\n\n2 3\n\n```\n\n#### Output #1\n\n```\nYes\nYes\nNo\nYes\n```", "cfid": "2061H1"}
{"problem_id": "2061F2", "problem_title": "F2. Kevin and Binary String (Hard Version)", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2061/F2", "problem_statement": "This is the hard version of the problem. The difference between the versions is that in this version, string $t$ consists of '0', '1' and '?'. You can hack only if you solved all versions of this problem.\n\nKevin has a binary string $s$ of length $n$. Kevin can perform the following operation:\n\n- Choose two adjacent blocks of $s$ and swap them.\n\nA block is a maximal substring$^{\\text{∗}}$ of identical characters. Formally, denote $s[l,r]$ as the substring $s_l s_{l+1} \\ldots s_r$. A block is $s[l,r]$ satisfying:\n\n- $l=1$ or $s_l\\not=s_{l-1}$.\n- $s_l=s_{l+1} = \\ldots = s_{r}$.\n- $r=n$ or $s_r\\not=s_{r+1}$.\n\nAdjacent blocks are two blocks $s[l_1,r_1]$ and $s[l_2,r_2]$ satisfying $r_1+1=l_2$.\n\nFor example, if $s=\\mathtt{000}\\,\\mathbf{11}\\,\\mathbf{00}\\,\\mathtt{111}$, Kevin can choose the two blocks $s[4,5]$ and $s[6,7]$ and swap them, transforming $s$ into $\\mathtt{000}\\,\\mathbf{00}\\,\\mathbf{11}\\,\\mathtt{111}$.\n\nGiven a string $t$ of length $n$ consisting of '0', '1' and '?', Kevin wants to determine the minimum number of operations required to perform such that for any index $i$ ($1\\le i\\le n$), if $t_i\\not=$ '?' then $s_i=t_i$. If it is impossible, output $-1$.\n\n$^{\\text{∗}}$A string $a$ is a substring of a string $b$ if $a$ can be obtained from $b$ by the deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a string $s$ consisting of '0' and '1'.\n\nThe second line of each test case contains a string $t$ consisting of '0', '1' and '?'.\n\nIt is guaranteed that the lengths of $s$ and $t$ are the same.\n\nIt is guaranteed that the sum of the length of $s$ over all test cases will not exceed $4\\cdot 10^5$.\n\n### Output\n\nFor each test case, output one integer — the minimum number of operations required. If it is impossible, output $-1$.\n\n### Examples\n\n#### Input #1\n\n```\n\n6\n\n0001100111\n\n0000011111\n\n010101\n\n111000\n\n0101\n\n0110\n\n0101\n\n1010\n\n011001\n\n001110\n\n0\n\n1\n\n```\n\n#### Output #1\n\n```\n1\n3\n1\n-1\n-1\n-1\n```\n\n#### Input #2\n\n```\n\n6\n\n010101\n\n?0?0??\n\n0101\n\n?0?0\n\n11100101\n\n????????\n\n11100101\n\n???11?1?\n\n1000100011\n\n?11?000?0?\n\n10101\n\n?1011\n\n```\n\n#### Output #2\n\n```\n2\n-1\n0\n2\n2\n-1\n```\n\n### Note\n\nIn the first test case of the first example, the possible way is shown in the statement.\n\nIn the second test case of the first example, one possible way could be:\n\n- Swap blocks $[2, 2], [3, 3]$, $s$ will become $\\mathtt{001101}$.\n- Swap blocks $[3, 4], [5, 5]$, $s$ will become $\\mathtt{000111}$.\n- Swap blocks $[1, 3], [4, 6]$, $s$ will become $\\mathtt{111000}$.\n\nIn the first test case of the second example, one possible way could be:\n\n- Swap blocks $[1, 1], [2, 2]$, $s$ will become $\\mathtt{100101}$.\n- Swap blocks $[4, 4], [5, 5]$, $s$ will become $\\mathtt{100011}$.", "cfid": "2061F2"}
{"problem_id": "2055F", "problem_title": "F. Cosmic Divide", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2055/F", "problem_statement": "With the artifact in hand, the fabric of reality gives way to its true master — Florida Man.\n\nA polyomino is a connected$^{\\text{∗}}$ figure constructed by joining one or more equal $1 \\times 1$ unit squares edge to edge. A polyomino is convex if, for any two squares in the polyomino that share the same row or the same column, all squares between them are also part of the polyomino. Below are four polyominoes, only the first and second of which are convex.\n\n![](https://espresso.codeforces.com/8724689d0b36a88fea4585d8abc9730b8c0d960d.png)\n\nYou are given a convex polyomino with $n$ rows and an even area. For each row $i$ from $1$ to $n$, the unit squares from column $l_i$ to column $r_i$ are part of the polyomino. In other words, there are $r_i - l_i + 1$ unit squares that are part of the polyomino in the $i$-th row: $(i, l_i), (i, l_i + 1), \\ldots, (i, r_i-1), (i, r_i)$.\n\nTwo polyominoes are congruent if and only if you can make them fit exactly on top of each other by translating the polyominoes. Note that you are not allowed to rotate or reflect the polyominoes. Determine whether it is possible to partition the given convex polyomino into two disjoint connected polyominoes that are congruent to each other. The following examples illustrate a valid partition of each of the two convex polyominoes shown above:\n\n![](https://espresso.codeforces.com/97de3cd15bf04caabb5cdf47250f4e27c68bed36.png)\n\nThe partitioned polyominoes do not need to be convex, and each unit square should belong to exactly one of the two partitioned polyominoes.\n\n$^{\\text{∗}}$A polyomino is connected if and only if for every two unit squares $u \\neq v$ that are part of the polyomino, there exists a sequence of distinct squares $s_1, s_2, \\ldots, s_k$, such that $s_1 = u$, $s_k = v$, $s_i$ are all part of the polyomino, and $s_i, s_{i+1}$ share an edge for each $1 \\le i \\le k - 1$.\n\n### Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1\\le n\\le 2\\cdot 10^5$) — the number of rows of the polyomino.\n\nThe $i$-th of the next $n$ lines contains two integers $l_i$ and $r_i$ ($1\\le l_i\\le r_i\\le 10^9$) — the range of columns that are part of the polyomino in the $i$-th row.\n\nIt is guaranteed that the area of the polyomino is even. In other words, $\\sum_{i=1}^n r_i - l_i + 1\\equiv 0\\pmod{2}$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, print a single line containing either \"YES\" or \"NO\", representing whether or not the polyomino can be partitioned as described in the problem.\n\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\n\n### Example\n\n#### Input #1\n\n```\n\n7\n\n2\n\n1 2\n\n2 3\n\n4\n\n4 4\n\n2 4\n\n1 4\n\n1 2\n\n3\n\n1 2\n\n1 2\n\n2 3\n\n2\n\n1 3\n\n3 3\n\n2\n\n1 3\n\n2 2\n\n3\n\n1 2\n\n1 3\n\n1 3\n\n4\n\n8 9\n\n6 8\n\n6 8\n\n5 6\n\n```\n\n#### Output #1\n\n```\nYES\nYES\nNO\nNO\nNO\nNO\nYES\n```\n\n### Note\n\nThe first and second test cases are the polyominoes depicted in the problem statement and can be partitioned as shown.\n\nThe polyomino in the third test case, shown below, can be shown to be impossible to partition. None of the following partitions are valid:\n\n![](https://espresso.codeforces.com/0a986911d905df1d700e5c6e0a7823b6baa1714b.png)\n\nThe partition on the left does not use polyominoes that are translations of each other, and the partition on the right does not use connected polyominoes.\n\nThe polyomino in the fourth test case, shown below, can be shown to be impossible to partition.\n\n![](https://espresso.codeforces.com/5f032563bda214bb7c65076b4882bda7d0a17e46.png)\n\nNote that while you can partition it into two $1 \\times 2$ rectangles, these rectangles are not translations of each other.", "cfid": "2055F"}
{"problem_id": "2057F", "problem_title": "F. Formation", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2057/F", "problem_statement": "One day, the teachers of \"T-generation\" decided to instill discipline in the pupils, so they lined them up and made them calculate in order. There are a total of $n$ pupils, the height of the $i$-th pupil in line is $a_i$.\n\nThe line is comfortable, if for each $i$ from $1$ to $n - 1$, the following condition holds: $a_i \\cdot 2 \\ge a_{i + 1}$. Initially, the line is comfortable.\n\nThe teachers do not like that the maximum height in the line is too small, so they want to feed the pupils pizza. You know that when a pupil eats one pizza, their height increases by $1$. One pizza can only be eaten by only one pupil, but each pupil can eat an unlimited number of pizzas. It is important that after all the pupils have eaten their pizzas, the line is comfortable.\n\nThe teachers have $q$ options for how many pizzas they will order. For each option $k_i$, answer the question: what is the maximum height $\\max(a_1, a_2, \\ldots, a_n)$ that can be achieved if the pupils eat at most $k_i$ pizzas.\n\n### Input\n\nEach test contains multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each set of test case contains two integers $n$ and $q$ ($1 \\le n, q \\le 5 \\cdot 10^4$) — the number of pupils and the number of options for how many pizzas the teachers will order.\n\nThe second line of each set of test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$) — the heights of the pupils.It is guaranteed that initially, the line is comfortable.\n\nEach of the following $q$ lines of each set of input data contains one integer $k_i$ ($1 \\le k_i \\le 10^9$) — the next limit for how many pizzas the pupils can eat.\n\nIt is guaranteed that the sum of the values of $n$ across all sets of input data does not exceed $5 \\cdot 10^4$.\n\nIt is guaranteed that the sum of the values of $q$ across all sets of input data does not exceed $5 \\cdot 10^4$.\n\n### Output\n\nFor each test case, for each limit for how many pizzas the pupils can eat, output the maximum value $\\max(a_1, a_2, \\ldots, a_n)$ that can be achieved while ensuring that the line is comfortable.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2 1\n\n10 20\n\n10\n\n6 7\n\n3 1 2 4 5 6\n\n1\n\n2\n\n4\n\n8\n\n16\n\n32\n\n64\n\n10 4\n\n1 2 4 8 16 32 64 128 256 512\n\n10\n\n100\n\n1000\n\n10000\n\n```\n\n#### Output #1\n\n```\n26\n7 8 10 12 19 35 67\n513 560 1011 10001\n```\n\n### Note\n\nIn the first query of the first set of input data, you can first give $3$ pizzas to the first pupil, and then give $6$ pizzas to the second pupil, making the final array $[13, 26]$ (the line is comfortable since $13 \\cdot 2 \\ge 26$), and the maximum element in it is $26$.", "cfid": "2057F"}
{"problem_id": "2057H", "problem_title": "H. Coffee Break", "difficulty": "hard", "platform": "codeforces", "link": "https://codeforces.com/problemset/problem/2057/H", "problem_statement": "There are very long classes in the T-Generation. In one day, you need to have time to analyze the training and thematic contests, give a lecture with new material, and, if possible, also hold a mini-seminar. Therefore, there is a break where students can go to drink coffee and chat with each other.\n\nThere are a total of $n+2$ coffee machines located in sequentially arranged rooms along a long corridor. The coffee machines are numbered from $0$ to $n+1$, and immediately after the break starts, there are $a_i$ students gathered around the $i$-th coffee machine.\n\nThe students are talking too loudly among themselves, and the teachers need to make a very important announcement. Therefore, they want to gather the maximum number of students around some single coffee machine. The teachers are too lazy to run around the corridors and gather the students, so they came up with a more sophisticated way to manipulate them:\n\n- At any moment, the teachers can choose room $i$ ($1 \\le i \\le n$) and turn off the lights there;\n- If there were $x$ students in that room, then after turning off the lights, $\\lfloor \\frac12 x \\rfloor$ students will go to room $(i-1)$, and $\\lfloor \\frac12 x \\rfloor$ other students will go to room $(i+1)$.\n- If $x$ was odd, then one student remains in the same room.\n- After that, the lights in room $i$ are turned back on.\n\nThe teachers have not yet decided where they will gather the students, so for each $i$ from $1$ to $n$, you should determine what is the maximum number of students that can be gathered around the $i$-th coffee machine.\n\nThe teachers can turn off the lights in any rooms at their discretion, in any order, possibly turning off the lights in the same room multiple times.\n\nNote that the values of $a_0$ and $a_{n+1}$ do not affect the answer to the problem, so their values will not be given to you.\n\n### Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10\\,000$) — the number of test cases.\n\nIn the first line of each test case, there is an integer $n$ ($1 \\le n \\le 10^6$).\n\nIn the second line of each test case, there are integers $a_1, \\ldots, a_n$ ($0 \\le a_i \\le 10^9$) — the number of students around coffee machines numbered $1, 2, \\ldots, n$.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $10^6$.\n\n### Output\n\nFor each test case, output $n$ integers $b_1, \\ldots, b_n$, where $b_i$ is the maximum number of students that can be around coffee machines number $i$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2\n\n8 0\n\n5\n\n2 2 2 2 2\n\n5\n\n0 0 9 0 0\n\n```\n\n#### Output #1\n\n```\n8 4\n4 5 4 5 4\n4 6 9 6 4\n```\n\n### Note\n\nLet's analyze the first test case:\n\n- To maximize the number of students at the $1$-st coffee machine, all that needs to be done is nothing.\n- To maximize the number of students at the $2$-nd coffee machine, it is sufficient to turn off the lights in the $1$-st room once.", "cfid": "2057H"}
