author: LiveCodeBench Pro Team
author_email: shz060@ucsd.edu
difficulty: easy
instruction: "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create\
  \ a C++17 solution file at /app/main.cpp.\nThis task does not include local test\
  \ cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit)\
  \ to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n\
  \  3) passes only if the judge returns passed == true.\n\nEnvironment variables\
  \ (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n\
  \  - PID: problem id (default 2013C)\n  - LANG: language (default cpp)\n  - CODE_PATH:\
  \ path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds\
  \ (default 120)\n\nDimash learned that Mansur wrote something very unpleasant about\
  \ him to a friend, so he decided to find out his password at all costs and discover\
  \ what exactly he wrote.\n\nBelieving in the strength of his password, Mansur stated\
  \ that his password -- is a binary string of length $n$. He is also ready to answer\
  \ Dimash's questions of the following type:\n\nDimash says a binary string $t$,\
  \ and Mansur replies whether it is true that $t$ is a substring of his password.\n\
  \nHelp Dimash find out the password in no more than $2n$ operations; otherwise,\
  \ Mansur will understand the trick and stop communicating with him.\n\n### Input\n\
  \nEach test contains multiple test cases. The first line contains the number of\
  \ test cases $t$ ($1 \\le t \\le 100$). The description of the test cases follows.\n\
  \n### Interaction\n\nAt the beginning of each test case, first read $n$ ($1 \\le\
  \ n \\le 100$) -- the size of the binary string. Then proceed to guessing it.\n\n\
  To guess each string $s$, you can make no more than $2n$ queries of the following\
  \ type:\n\n- \"? t\", where $t$ is a binary string such that ($1 \\le |t| \\le n$).\n\
  \nIn response to this query, you will receive $1$ if $t$ is a substring of $s$,\
  \ and $0$ otherwise.\n\nOnce you receive the answer, output a single string in the\
  \ following format:\n\n- \"! s\", where $s$ is a binary string of size $n$.\n\n\
  After that, proceed to solve the next test case.\n\nIf you make an incorrect attempt\
  \ or exceed the limit of $2n$ attempts, you will receive $-1$ instead of an answer\
  \ and get the verdict Wrong answer. In this case, your program should terminate\
  \ immediately to avoid undefined verdicts.\n\nAfter outputting the queries, do not\
  \ forget to output a newline character and flush the output buffer. Otherwise, you\
  \ will receive the verdict Solution \"hung\". To flush the buffer, use:\n\n- fflush(stdout)\
  \ or cout.flush() in C++;\n- System.out.flush() in Java;\n- flush(output) in Pascal;\n\
  - stdout.flush() in Python;\n- refer to the documentation for other languages.\n\
  \nHacks:\n\nTo use hacks, use the following format of tests:\n\nThe first line should\
  \ contain a single integer $t$ ($1\\le t\\le 100$) -- the number of test cases.\n\
  \nThe first line of each test case should contain a single number $n$ ($1 \\le n\
  \ \\le 100$) -- the length of the string. The second line should contain a binary\
  \ string of size $n$.\n\n### Example\n\n#### Input #1\n\n```\n4\n3\n\n0\n\n0\n\n\
  1\n\n4\n\n4\n\n2```\n\n#### Output #1\n\n```\n\n? 00\n\n? 000\n\n? 010\n\n! 010\n\
  \n! 1100\n\n! 0110\n\n! 10```\n\n### Note\n\nIn the first example, the string $010$\
  \ is given. Therefore, the answers to the queries are as follows:\n\n\"? 00\" $00$\
  \ is not a substring of $010$, so the answer is $0$.\n\n\"? 000\" $000$ is not a\
  \ substring, so the answer is $0$.\n\n\"? 010\" $010$ is a substring, so the answer\
  \ is $1$.\n\nIn the second example, the string is $1100$, in the third $0110$, and\
  \ in the fourth $10$."
max_agent_timeout_sec: 300
max_test_timeout_sec: 180
tags: []
