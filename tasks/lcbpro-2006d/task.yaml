author: LiveCodeBench Pro Team
author_email: shz060@ucsd.edu
difficulty: medium
instruction: "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create\
  \ a C++17 solution file at /app/main.cpp.\nThis task does not include local test\
  \ cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit)\
  \ to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n\
  \  3) passes only if the judge returns passed == true.\n\nEnvironment variables\
  \ (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n\
  \  - PID: problem id (default 2006D)\n  - LANG: language (default cpp)\n  - CODE_PATH:\
  \ path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds\
  \ (default 120)\n\nIris has just learned multiplication in her Maths lessons. However,\
  \ since her brain is unable to withstand too complex calculations, she could not\
  \ multiply two integers with the product greater than $k$ together. Otherwise, her\
  \ brain may explode!\n\nHer teacher sets a difficult task every day as her daily\
  \ summer holiday homework. Now she is given an array $a$ consisting of $n$ elements,\
  \ and she needs to calculate the product of each two adjacent elements (that is,\
  \ $a_1 \\cdot a_2$, $a_2 \\cdot a_3$, and so on). Iris wants her brain to work safely,\
  \ and in order to do that, she would like to modify the array $a$ in such a way\
  \ that $a_i \\cdot a_{i + 1} \\leq k$ holds for every $1 \\leq i < n$. There are\
  \ two types of operations she can perform:\n\n1. She can rearrange the elements\
  \ of the array $a$ in an arbitrary way.\n2. She can select an arbitrary element\
  \ of the array $a$ and change its value to an arbitrary integer from $1$ to $k$.\n\
  \nIris wants to minimize the number of operations of type $2$ that she uses.\n\n\
  However, that's completely not the end of the summer holiday! Summer holiday lasts\
  \ for $q$ days, and on the $i$-th day, Iris is asked to solve the Math homework\
  \ for the subarray $b_{l_i}, b_{l_i + 1}, \\ldots, b_{r_i}$. Help Iris and tell\
  \ her the minimum number of type $2$ operations she needs to perform for each day.\
  \ Note that the operations are independent for each day, i.e. the array $b$ is not\
  \ changed.\n\n### Input\n\nEach test consists of multiple test cases. The first\
  \ line contains a single integer $t$ ($1 \\leq t \\leq 5\\cdot 10^4$) -- the number\
  \ of test cases. The description of the test cases follows.\n\nThe first line of\
  \ each test case contains three integers $n$, $q$ and $k$ ($2 \\leq n \\leq 10^5$,\
  \ $1 \\leq q \\leq 10^5$, $1 \\leq k \\leq 10^6$) -- the length of array $b$, the\
  \ number of days, and the upper bound for the multiplication calculation.\n\nThe\
  \ second line of each test case contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($1\
  \ \\leq b_i \\leq k$) -- the elements of the array $b$.\n\nThen $q$ lines follow,\
  \ the $i$-th of them contains two integers $l_i$ and $r_i$ ($1 \\leq l_i < r_i \\\
  leq n$) -- the boundaries of the subarray on the $i$-th day.\n\nIt is guaranteed\
  \ that the sum of $n$ over all test cases does not exceed $10^5$, and the sum of\
  \ $q$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test,\
  \ output a single line containing $q$ integers -- the minimum number of operations\
  \ of type $2$ needed for each day.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\
  \n3 1 1\n\n1 1 1\n\n1 3\n\n3 2 10\n\n1 10 9\n\n1 3\n\n2 3\n\n5 4 2\n\n2 2 2 2 2\n\
  \n1 2\n\n2 4\n\n2 5\n\n1 5\n\n6 5 10\n\n3 2 5 10 10 1\n\n1 4\n\n3 6\n\n1 6\n\n2\
  \ 5\n\n5 6\n\n10 10 10\n\n10 9 8 7 6 5 4 3 2 1\n\n1 10\n\n1 9\n\n1 8\n\n1 7\n\n\
  2 10\n\n3 10\n\n4 10\n\n5 10\n\n3 9\n\n6 8\n\n```\n\n#### Output #1\n\n```\n0\n\
  0 1\n1 1 2 2\n1 1 1 1 0\n3 3 4 3 2 2 1 1 2 1\n```\n\n### Note\n\nIn the first test\
  \ case, as Iris can always multiply $1$ and $1$ together, no operations are needed,\
  \ so the answer is $0$.\n\nIn the second test case, the first day's homework is\
  \ $[1, 10, 9]$. Iris can rearrange its elements to get $[9, 1, 10]$, so no operations\
  \ of type $2$ are needed. The second day's homework is $[10, 9]$, and she can change\
  \ one element to get the array $[1, 9]$, so one operation of type $2$ is needed."
max_agent_timeout_sec: 300
max_test_timeout_sec: 180
tags: []
