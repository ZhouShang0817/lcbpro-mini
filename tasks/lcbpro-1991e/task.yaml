author: LiveCodeBench Pro Team
author_email: shz060@ucsd.edu
difficulty: medium
instruction: "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create\
  \ a C++17 solution file at /app/main.cpp.\nThis task does not include local test\
  \ cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit)\
  \ to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n\
  \  3) passes only if the judge returns passed == true.\n\nEnvironment variables\
  \ (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n\
  \  - PID: problem id (default 1991E)\n  - LANG: language (default cpp)\n  - CODE_PATH:\
  \ path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds\
  \ (default 120)\n\nThis is an interactive problem.\n\nConsider an undirected connected\
  \ graph consisting of $n$ vertices and $m$ edges. Each vertex can be colored with\
  \ one of three colors: $1$, $2$, or $3$. Initially, all vertices are uncolored.\n\
  \nAlice and Bob are playing a game consisting of $n$ rounds. In each round, the\
  \ following two-step process happens:\n\n1. Alice chooses two different colors.\n\
  2. Bob chooses an uncolored vertex and colors it with one of the two colors chosen\
  \ by Alice.\n\nAlice wins if there exists an edge connecting two vertices of the\
  \ same color. Otherwise, Bob wins.\n\nYou are given the graph. Your task is to decide\
  \ which player you wish to play as and win the game.\n\n### Input\n\nEach test contains\
  \ multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\\
  le 1000$) -- the number of test cases. The description of test cases follows.\n\n\
  The first line of each test case contains two integers $n$, $m$ ($1 \\le n \\le\
  \ 10^4$, $n - 1 \\le m \\le \\min(\\frac{n \\cdot (n - 1)}{2}, 10^4)$) -- the number\
  \ of vertices and the number of edges in the graph, respectively.\n\nEach of the\
  \ next $m$ lines of each test case contains two integers $u_i$, $v_i$ ($1 \\le u_i,\
  \ v_i \\le n$) -- the edges of the graph. It is guaranteed that the graph is connected\
  \ and there are no multiple edges or self-loops.\n\nIt is guaranteed that the sum\
  \ of $n$ and the sum of $m$ over all test cases does not exceed $10^4$.\n\n### Interaction\n\
  \nFor each test case, you need to output a single line containing either \"Alice\"\
  \ or \"Bob\", representing the player you choose.\n\nThen for each of the following\
  \ $n$ rounds, the following two-step process happens:\n\n1. Alice (either you or\
  \ the interactor) will output two integers $a$ and $b$ ($1 \\le a, b \\le 3$, $a\
  \ \\neq b$) -- the colors chosen by Alice.\n2. Bob (either you or the interactor)\
  \ will output two integers $i$ and $c$ ($1 \\le i \\le n$, $c = a$ or $c = b$) --\
  \ the vertex and the color chosen by Bob. Vertex $i$ must be a previously uncolored\
  \ vertex.\n\nIf any of your outputs are invalid, the jury will output \"-1\" and\
  \ you will receive a Wrong Answer verdict.\n\nAt the end of all $n$ turns, if you\
  \ have lost the game, the jury will output \"-1\" and you will receive a Wrong Answer\
  \ verdict.\n\nIf your program has received a $-1$ instead of a valid value, it must\
  \ terminate immediately. Otherwise, you may receive an arbitrary verdict because\
  \ your solution might be reading from a closed stream.\n\nNote that if you are playing\
  \ as Alice, and there already exists an edge connected two vertices of the same\
  \ color, the interactor will not terminate early and you will keep playing all $n$\
  \ rounds.\n\nAfter outputting, do not forget to output end of line and flush the\
  \ output. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n\
  - fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- flush(output)\
  \ in Pascal;\n- stdout.flush() in Python;\n- see documentation for other languages.\n\
  \nIn this problem, hacks are disabled.\n\n### Example\n\n#### Input #1\n\n```\n\
  2\n3 3\n1 2\n2 3\n3 1\n\n3 1\n\n2 2\n\n1 1\n4 4\n1 2\n2 3\n3 4\n4 1\n\n2 3\n\n1\
  \ 2\n\n2 1\n\n3 1\n\n```\n\n#### Output #1\n\n```\n\nAlice\n3 1\n\n1 2\n\n2 1\n\n\
  Bob\n\n1 2\n\n2 1\n\n4 1\n\n3 3\n```\n\n### Note\n\nNote that the sample test cases\
  \ are example games and do not necessarily represent the optimal strategy for both\
  \ players.\n\nIn the first test case, you choose to play as Alice.\n\n1. Alice chooses\
  \ two colors: $3$ and $1$. Bob chooses vertex $3$ and colors it with color $1$.\n\
  2. Alice chooses two colors: $1$ and $2$. Bob chooses vertex $2$ and colors it with\
  \ color $2$.\n3. Alice chooses two colors: $2$ and $1$. Bob chooses vertex $1$ and\
  \ colors it with color $1$.\n\nAlice wins because the edge $(3, 1)$ connects two\
  \ vertices of the same color.\n\nIn the second test case, you choose to play as\
  \ Bob.\n\n1. Alice chooses two colors: $2$ and $3$. Bob chooses vertex $1$ and colors\
  \ it with color $2$.\n2. Alice chooses two colors: $1$ and $2$. Bob chooses vertex\
  \ $2$ and colors it with color $1$.\n3. Alice chooses two colors: $2$ and $1$. Bob\
  \ chooses vertex $4$ and colors it with color $1$.\n4. Alice chooses two colors:\
  \ $3$ and $1$. Bob chooses vertex $3$ and colors it with color $3$.\n\nBob wins\
  \ because there are no edges with vertices of the same color."
max_agent_timeout_sec: 300
max_test_timeout_sec: 180
tags: []
