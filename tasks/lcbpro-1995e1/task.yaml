author: LiveCodeBench Pro Team
author_email: shz060@ucsd.edu
difficulty: medium
instruction: "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create\
  \ a C++17 solution file at /app/main.cpp.\nThis task does not include local test\
  \ cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit)\
  \ to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n\
  \  3) passes only if the judge returns passed == true.\n\nEnvironment variables\
  \ (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n\
  \  - PID: problem id (default 1995E1)\n  - LANG: language (default cpp)\n  - CODE_PATH:\
  \ path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds\
  \ (default 120)\n\nThis is the easy version of a problem. The only difference between\
  \ an easy and a hard version is the constraints on $t$ and $n$. You can make hacks\
  \ only if both versions of the problem are solved.\n\nArthur is giving a lesson\
  \ to his famous $2 n$ knights. Like any other students, they're sitting at the desks\
  \ in pairs, but out of habit in a circle. The knight $2 i - 1$ is sitting at the\
  \ desk with the knight $2 i$.\n\nEach knight has intelligence, which can be measured\
  \ by an integer. Let's denote the intelligence of the $i$-th knight as $a_i$. Arthur\
  \ wants the maximal difference in total intelligence over all pairs of desks to\
  \ be as small as possible. More formally, he wants to minimize $\\max\\limits_{1\
  \ \\le i \\le n} (a_{2 i - 1} + a_{2 i}) - \\min\\limits_{1 \\le i \\le n} (a_{2\
  \ i - 1} + a_{2 i})$.\n\nHowever, the Code of Chivalry only allows swapping the\
  \ opposite knights in the circle, i.e., Arthur can simultaneously perform $a_i :=\
  \ a_{i + n}$, $a_{i + n} := a_i$ for any $1 \\le i \\le n$. Arthur can make any\
  \ number of such swaps. What is the best result he can achieve?\n\n### Input\n\n\
  Each test consists of several test cases. The first line contains a single integer\
  \ $t$ ($1 \\le t \\le 1000$) -- the number of test cases. It is followed by descriptions\
  \ of the test cases.\n\nThe first line of each test case contains a single integer\
  \ $n$ ($1 \\le n \\le 2000$) -- the number of desks.\n\nThe second line consists\
  \ of $2n$ integers $a_1, a_2, \\ldots, a_{2 n}$ ($1 \\le a_i \\le 10^9$) -- the\
  \ intelligence values of the knights.\n\nIt is guaranteed that the sum of $n$ over\
  \ all test cases does not exceed $2000$.\n\n### Output\n\nFor each test case, output\
  \ a single line containing one integer -- the minimal difference Arthur can achieve.\n\
  \n### Example\n\n#### Input #1\n\n```\n\n5\n\n2\n\n6 6 4 4\n\n1\n\n10 17\n\n3\n\n\
  1 10 1 10 1 10\n\n3\n\n3 3 4 5 5 4\n\n5\n\n1 2 3 4 5 6 7 8 9 10\n\n```\n\n#### Output\
  \ #1\n\n```\n0\n0\n0\n2\n4\n```\n\n### Note\n\nIn the first test case, Arthur can\
  \ swap the second and the fourth knights. Then the total intelligence at both desks\
  \ will be $10$.\n\nIn the third test case, Arthur can make $0$ operations, which\
  \ will result in the total intelligence of $11$ at each of the desks.\n\nIn the\
  \ fourth test case, Arthur can swap knights with indices $2$ and $5$ and achieve\
  \ the difference of $2$. It can be proven that he cannot improve his result any\
  \ further."
max_agent_timeout_sec: 300
max_test_timeout_sec: 180
tags: []
