author: LiveCodeBench Pro Team
author_email: shz060@ucsd.edu
difficulty: easy
instruction: "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create\
  \ a C++17 solution file at /app/main.cpp.\nThis task does not include local test\
  \ cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit)\
  \ to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n\
  \  3) passes only if the judge returns passed == true.\n\nEnvironment variables\
  \ (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n\
  \  - PID: problem id (default 2018A)\n  - LANG: language (default cpp)\n  - CODE_PATH:\
  \ path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds\
  \ (default 120)\n\n[DJ Genki vs Gram - Einherjar Joker](https://soundcloud.com/leon-hwang-368077289/einherjar-joker-dj-genki-vs-gram)\n\
  \n⠀\n\nYou have some cards. An integer between $1$ and $n$ is written on each card:\
  \ specifically, for each $i$ from $1$ to $n$, you have $a_i$ cards which have the\
  \ number $i$ written on them.\n\nThere is also a shop which contains unlimited cards\
  \ of each type. You have $k$ coins, so you can buy at most $k$ new cards in total,\
  \ and the cards you buy can contain any integer between $\\mathbf{1}$ and $\\mathbf{n}$,\
  \ inclusive.\n\nAfter buying the new cards, you must partition all your cards into\
  \ decks, according to the following rules:\n\n- all the decks must have the same\
  \ size;\n- there are no pairs of cards with the same value in the same deck.\n\n\
  Find the maximum possible size of a deck after buying cards and partitioning them\
  \ optimally.\n\n### Input\n\nEach test contains multiple test cases. The first line\
  \ contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description\
  \ of the test cases follows.\n\nThe first line of each test case contains two integers\
  \ $n$, $k$ ($1 \\leq n \\leq 2 \\cdot 10^5$, $0 \\leq k \\leq 10^{16}$) -- the number\
  \ of distinct types of cards and the number of coins.\n\nThe second line of each\
  \ test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\leq a_i \\leq 10^{10}$,\
  \ $\\sum a_i \\geq 1$) -- the number of cards of type $i$ you have at the beginning,\
  \ for each $1 \\leq i \\leq n$.\n\nIt is guaranteed that the sum of $n$ over all\
  \ test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case,\
  \ output a single integer: the maximum possible size of a deck if you operate optimally.\n\
  \n### Example\n\n#### Input #1\n\n```\n\n9\n\n3 1\n\n3 2 2\n\n5 4\n\n2 6 1 2 4\n\
  \n2 100\n\n1410065408 10000000000\n\n10 8\n\n7 4 6 6 9 3 10 2 8 7\n\n2 12\n\n2 2\n\
  \n2 70\n\n0 1\n\n1 0\n\n1\n\n3 0\n\n2 1 2\n\n3 1\n\n0 3 3\n\n```\n\n#### Output\
  \ #1\n\n```\n2\n3\n1\n7\n2\n2\n1\n1\n2\n```\n\n### Note\n\nIn the first test case,\
  \ you can buy one card with the number $1$, and your cards become $[1, 1, 1, 1,\
  \ 2, 2, 3, 3]$. You can partition them into the decks $[1, 2], [1, 2], [1, 3], [1,\
  \ 3]$: they all have size $2$, and they all contain distinct values. You can show\
  \ that you cannot get a partition with decks of size greater than $2$, so the answer\
  \ is $2$.\n\nIn the second test case, you can buy two cards with the number $1$\
  \ and one card with the number $3$, and your cards become $[1, 1, 1, 1, 2, 2, 2,\
  \ 2, 2, 2, 3, 3, 4, 4, 5, 5, 5, 5]$, which can be partitioned into $[1, 2, 3], [1,\
  \ 2, 4], [1, 2, 5], [1, 2, 5], [2, 3, 5], [2, 4, 5]$. You can show that you cannot\
  \ get a partition with decks of size greater than $3$, so the answer is $3$."
max_agent_timeout_sec: 300
max_test_timeout_sec: 180
tags: []
