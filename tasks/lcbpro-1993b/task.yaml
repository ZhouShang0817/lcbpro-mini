author: LiveCodeBench Pro Team
author_email: shz060@ucsd.edu
difficulty: easy
instruction: "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create\
  \ a C++17 solution file at /app/main.cpp.\nThis task does not include local test\
  \ cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit)\
  \ to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n\
  \  3) passes only if the judge returns passed == true.\n\nEnvironment variables\
  \ (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n\
  \  - PID: problem id (default 1993B)\n  - LANG: language (default cpp)\n  - CODE_PATH:\
  \ path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds\
  \ (default 120)\n\nGiven an array $a$ of $n$ positive integers.\n\nIn one operation,\
  \ you can pick any pair of indexes $(i, j)$ such that $a_i$ and $a_j$ have distinct\
  \ parity, then replace the smaller one with the sum of them. More formally:\n\n\
  - If $a_i < a_j$, replace $a_i$ with $a_i + a_j$;\n- Otherwise, replace $a_j$ with\
  \ $a_i + a_j$.\n\nFind the minimum number of operations needed to make all elements\
  \ of the array have the same parity.\n\n### Input\n\nThe first line contains a single\
  \ integer $t$ ($1 \\le t \\le 10^4$) -- the number of test cases.\n\nThe first line\
  \ of each test case contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$).\n\
  \nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\\
  le 10^9$) -- the elements of array $a$.\n\nIt is guaranteed that the sum of $n$\
  \ over all test cases does not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each\
  \ test case, output a single integer -- the minimum number of operations required.\n\
  \n### Example\n\n#### Input #1\n\n```\n\n7\n\n5\n\n1 3 5 7 9\n\n4\n\n4 4 4 4\n\n\
  3\n\n2 3 4\n\n4\n\n3 2 2 8\n\n6\n\n4 3 6 1 2 1\n\n6\n\n3 6 1 2 1 2\n\n5\n\n999999996\
  \ 999999997 999999998 999999999 1000000000\n\n```\n\n#### Output #1\n\n```\n0\n\
  0\n2\n4\n3\n3\n3\n```\n\n### Note\n\nIn the first test case, all integers already\
  \ have the same parity. Therefore, no operation is needed.\n\nIn the third test\
  \ case, we can perform two operations $(1, 2)$ and $(1, 3)$. The array $a$ transforms\
  \ as follows: $a = [\\color{red}2, \\color{red}3, 4] \\longrightarrow [\\color{red}5,\
  \ 3, \\color{red}4] \\longrightarrow [5, 3, 9]$.\n\nIn the fourth test case, an\
  \ example of an optimal sequence of operations is $(1, 2)$, $(1, 3)$, $(1, 4)$,\
  \ and $(1, 4)$. The array $a$ transforms as follows: $a = [\\color{red}3, \\color{red}2,\
  \ 2, 8] \\longrightarrow [\\color{red}3, 5, \\color{red}2, 8] \\longrightarrow [\\\
  color{red}3, 5, 5, \\color{red}8] \\longrightarrow [\\color{red}{11}, 5, 5, \\color{red}8]\
  \ \\longrightarrow [11, 5, 5, 19]$."
max_agent_timeout_sec: 300
max_test_timeout_sec: 180
tags: []
