author: LiveCodeBench Pro Team
author_email: shz060@ucsd.edu
difficulty: medium
instruction: "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create\
  \ a C++17 solution file at /app/main.cpp.\nThis task does not include local test\
  \ cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit)\
  \ to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n\
  \  3) passes only if the judge returns passed == true.\n\nEnvironment variables\
  \ (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n\
  \  - PID: problem id (default 1994F)\n  - LANG: language (default cpp)\n  - CODE_PATH:\
  \ path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds\
  \ (default 120)\n\nPelican Town represents $n$ houses connected by $m$ bidirectional\
  \ roads. Some roads have NPCs standing on them. Farmer Buba needs to walk on each\
  \ road with an NPC and talk to them.\n\nHelp the farmer find a route satisfying\
  \ the following properties:\n\n- The route starts at some house, follows the roads,\
  \ and ends at the same house.\n- The route does not follow any road more than once\
  \ (in both directions together).\n- The route follows each road with an NPC exactly\
  \ once.\n\nNote that the route can follow roads without NPCs, and you do not need\
  \ to minimize the length of the route.\n\nIt is guaranteed that you can reach any\
  \ house from any other by walking on the roads with NPCs only.\n\n### Input\n\n\
  Each test consists of multiple test cases. The first line contains an integer $t$\
  \ ($1 \\le t \\le 10^{4}$) -- the number of test cases. Then follows the description\
  \ of the test cases.\n\nThe first line of each test case contains two integers $n$\
  \ and $m$ ($2 \\leq n \\leq 5 \\cdot 10^5, 1 \\leq m \\leq 5 \\cdot 10^5$) -- the\
  \ number of houses and roads in Pelican Town respectively.\n\nIn each of the next\
  \ $m$ lines, three integers $u$, $v$, and $c$ ($1 \\leq u, v \\leq n, c = 0/1$)\
  \ are given -- the ends of the road and whether an NPC is on this road. If $c =\
  \ 1$, then the road has an NPC. If $c = 0$, then the road has no NPC.\n\nThe graph\
  \ may contain multiple edges and loops, and if there are multiple edges with NPCs\
  \ standing on them, the route must follow each of these roads.\n\nIt is guaranteed\
  \ that you can reach any house from any other by walking on the roads with NPCs\
  \ only.\n\nIt is guaranteed that the sum of $n$ and $m$ for all test cases does\
  \ not exceed $5 \\cdot 10^5$.\n\n### Output\n\nFor each test case, if there is no\
  \ solution, then output \"No\" (without quotes).\n\nOtherwise, output \"Yes\" (without\
  \ quotes), and then output $k$ -- the number of roads in the route. In the next\
  \ line, output $k + 1$ numbers -- the houses of the route in the order of traversal.\
  \ Note that the first house should match the last one, as the route is cyclic.\n\
  \nIf there are multiple answers, you can print any of them.\n\nYou can output each\
  \ letter in any case (for example, the strings \"yEs\", \"yes\", \"Yes\", and \"\
  YES\" will be recognized as a positive answer).\n\n### Example\n\n#### Input #1\n\
  \n```\n\n3\n\n3 2\n\n1 2 1\n\n2 3 1\n\n3 3\n\n1 2 1\n\n1 3 1\n\n2 3 0\n\n5 9\n\n\
  1 2 0\n\n5 2 1\n\n5 4 1\n\n5 1 1\n\n2 3 1\n\n5 2 1\n\n4 1 0\n\n4 3 0\n\n5 2 0\n\n\
  ```\n\n#### Output #1\n\n```\nNO\nYES\n3\n1 2 3 1\nYES\n7\n1 2 5 4 3 2 5 1\n```\n\
  \n### Note\n\nNote that in the third test case, there are multiple edges $(5, 2)$.\
  \ You must walk on two of them."
max_agent_timeout_sec: 300
max_test_timeout_sec: 180
tags: []
