author: LiveCodeBench Pro Team
author_email: shz060@ucsd.edu
difficulty: hard
instruction: "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create\
  \ a C++17 solution file at /app/main.cpp.\nThis task does not include local test\
  \ cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit)\
  \ to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n\
  \  3) passes only if the judge returns passed == true.\n\nEnvironment variables\
  \ (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n\
  \  - PID: problem id (default 2039F2)\n  - LANG: language (default cpp)\n  - CODE_PATH:\
  \ path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds\
  \ (default 120)\n\nThis is the hard version of the problem. The only differences\
  \ between the two versions of this problem are the constraints on $t$, $m$, and\
  \ the sum of $m$. You can only make hacks if both versions of the problem are solved.\n\
  \nFor an integer array $a$ of length $n$, define $f(k)$ as the [greatest common\
  \ divisor (GCD)](https://en.wikipedia.org/wiki/Greatest_common_divisor) of the maximum\
  \ values of all subarrays$^{\\text{∗}}$ of length $k$. For example, if the array\
  \ is $[2, 1, 4, 6, 2]$, then $f(3) = \\operatorname{gcd}(\\operatorname{max}([2,\
  \ 1, 4]), \\operatorname{max}([1, 4, 6]), \\operatorname{max}([4, 6, 2])) = \\operatorname{gcd}(4,\
  \ 6, 6) = 2$.\n\nAn array is good if $f(i) \\neq f(j)$ is satisfied over all pairs\
  \ $1 \\le i \\lt j \\le n$.\n\nShohag has an integer $m$. Help him count the number,\
  \ modulo $998\\,244\\,353$, of non-empty good arrays of arbitrary length such that\
  \ each element of the array is an integer from $1$ to $m$.\n\n$^{\\text{∗}}$An array\
  \ $d$ is a subarray of an array $c$ if $d$ can be obtained from $c$ by deletion\
  \ of several (possibly, zero or all) elements from the beginning and several (possibly,\
  \ zero or all) elements from the end.\n\n### Input\n\nThe first line contains a\
  \ single integer $t$ ($1 \\le t \\le 3 \\cdot 10^5$) -- the number of test cases.\n\
  \nThe first and only line of each test case contains an integer $m$ ($1 \\le m \\\
  le 10^6$).\n\nNote that there is no limit on the sum of $m$ over all test cases.\n\
  \n### Output\n\nFor each test case, output an integer -- the number of valid arrays\
  \ modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\n2\n\n\
  5\n\n9\n\n```\n\n#### Output #1\n\n```\n4\n29\n165\n```\n\n### Note\n\nIn the first\
  \ test case, the valid arrays are $[1]$, $[1, 2]$, $[2]$, and $[2, 1]$.\n\nIn the\
  \ second test case, there are a total of $29$ valid arrays. In particular, the array\
  \ $[2, 1, 4]$ with length $n = 3$ is valid because all elements are from $1$ to\
  \ $m = 5$ and $f(1)$, $f(2)$ and $f(n = 3)$ all are distinct:\n\n- $f(1) = \\operatorname{gcd}(\\\
  operatorname{max}([2]), \\operatorname{max}([1]), \\operatorname{max}([4])) = \\\
  operatorname{gcd}(2, 1, 4) = 1.$\n- $f(2) = \\operatorname{gcd}(\\operatorname{max}([2,\
  \ 1]), \\operatorname{max}([1, 4])) = \\operatorname{gcd}(2, 4) = 2.$\n- $f(3) =\
  \ \\operatorname{gcd}(\\operatorname{max}([2, 1, 4])) = \\operatorname{gcd}(4) =\
  \ 4.$"
max_agent_timeout_sec: 300
max_test_timeout_sec: 180
tags: []
