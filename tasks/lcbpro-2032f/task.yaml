author: LiveCodeBench Pro Team
author_email: shz060@ucsd.edu
difficulty: medium
instruction: "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create\
  \ a C++17 solution file at /app/main.cpp.\nThis task does not include local test\
  \ cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit)\
  \ to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n\
  \  3) passes only if the judge returns passed == true.\n\nEnvironment variables\
  \ (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n\
  \  - PID: problem id (default 2032F)\n  - LANG: language (default cpp)\n  - CODE_PATH:\
  \ path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds\
  \ (default 120)\n\nHaving the magical beanstalk, Jack has been gathering a lot of\
  \ peanuts lately. Eventually, he has obtained $n$ pockets of peanuts, conveniently\
  \ numbered $1$ to $n$ from left to right. The $i$-th pocket has $a_i$ peanuts.\n\
  \nJack and his childhood friend Alice decide to play a game around the peanuts.\
  \ First, Alice divides the pockets into some boxes; each box will have a non-zero\
  \ number of consecutive pockets, and each pocket will, obviously, belong to exactly\
  \ one box. At the same time, Alice does not change the order of the boxes, that\
  \ is, the boxes are numbered in ascending order of the indices of the pockets in\
  \ them.\n\nAfter that, Alice and Jack will take turns alternately, with Alice going\
  \ first.\n\nAt each turn, the current player will remove a positive number of peanuts\
  \ from exactly one pocket which belongs to the leftmost non-empty box (i.e., the\
  \ leftmost box containing at least one non-empty pocket). In other words, if we\
  \ number the boxes from left to right, then each player can only pick peanuts from\
  \ the pocket in the $j$-th box ($j \\ge 2$) only if the $(j - 1)$-th box has no\
  \ peanuts left. The player who cannot make a valid move loses.\n\nAlice is sure\
  \ she will win since she has the advantage of dividing the pockets into boxes herself.\
  \ Thus, she wanted to know how many ways there are for her to divide the peanuts\
  \ into boxes at the start of the game so that she will win, assuming both players\
  \ play optimally. Can you help her with the calculation?\n\nAs the result can be\
  \ very large, output it modulo $998\\,244\\,353$.\n\n### Input\n\nEach test consists\
  \ of multiple test cases. The first line contains a single integer $t$ ($1 \\le\
  \ t \\le 10^4$) -- the number of test cases. The description of the test cases follows.\n\
  \nThe first line of each test case contains a single integer $n$ ($1 \\leq n \\\
  leq 10^6$) -- the number of pockets.\n\nThe second line of each test case contains\
  \ $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$) -- the number\
  \ of peanuts in each pocket.\n\nIt is guaranteed that the sum of $n$ over all test\
  \ cases does not exceed $10^6$.\n\n### Output\n\nFor each test case, output a single\
  \ integer -- the number of ways for Alice to divide the pockets into boxes at the\
  \ start of the game to guarantee her win, assuming both players play optimally,\
  \ modulo $998\\,244\\,353$.\n\n### Example\n\n#### Input #1\n\n```\n\n5\n\n3\n\n\
  1 2 3\n\n4\n\n1 2 3 1\n\n5\n\n1 1 1 1 1\n\n2\n\n1 1\n\n10\n\n1 2 3 4 5 6 7 8 9 10\n\
  \n```\n\n#### Output #1\n\n```\n1\n4\n16\n0\n205\n```\n\n### Note\n\nIn the first\
  \ test case, the only way for Alice to win is to divide the pockets into two boxes\
  \ as follows: $([1, 2], [3])$ (the first box contains the first two pockets and\
  \ the second box contains the third pocket). Alice wins by taking both peanuts from\
  \ the second pocket, leaving Jack with $([1], [3])$. Jack is forced to take the\
  \ only peanut left in the first box, which allows Alice to take the remaining ones\
  \ in the second box.\n\nIn the second test case, the winning divisions for Alice\
  \ are $([1], [2, 3, 1])$, $([1, 2, 3, 1])$, $([1, 2], [3], [1])$, and $([1, 2],\
  \ [3, 1])$.\n\nIn the third test case, Alice always wins no matter how she divides\
  \ the pockets into boxes.\n\nIn the fourth test case, Alice always loses no matter\
  \ how she divides the pockets into boxes."
max_agent_timeout_sec: 300
max_test_timeout_sec: 180
tags: []
