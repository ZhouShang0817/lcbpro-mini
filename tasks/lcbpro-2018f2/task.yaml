author: LiveCodeBench Pro Team
author_email: shz060@ucsd.edu
difficulty: medium
instruction: "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create\
  \ a C++17 solution file at /app/main.cpp.\nThis task does not include local test\
  \ cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit)\
  \ to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n\
  \  3) passes only if the judge returns passed == true.\n\nEnvironment variables\
  \ (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n\
  \  - PID: problem id (default 2018F2)\n  - LANG: language (default cpp)\n  - CODE_PATH:\
  \ path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds\
  \ (default 120)\n\n[NightHawk22 - Isolation](https://soundcloud.com/vepium/nighthawk22-isolation-official-limbo-remix)\n\
  \n⠀\n\nThis is the medium version of the problem. In the three versions, the constraints\
  \ on $n$ and the time limit are different. You can make hacks only if all the versions\
  \ of the problem are solved.\n\nThis is the statement of Problem D1B:\n\n- There\
  \ are $n$ cities in a row, numbered $1, 2, \\ldots, n$ left to right.\n\n- At time\
  \ $1$, you conquer exactly one city, called the starting city.\n- At time $2, 3,\
  \ \\ldots, n$, you can choose a city adjacent to the ones conquered so far and conquer\
  \ it.\n\nYou win if, for each $i$, you conquer city $i$ at a time no later than\
  \ $a_i$. A winning strategy may or may not exist, also depending on the starting\
  \ city. How many starting cities allow you to win?\n\nFor each $0 \\leq k \\leq\
  \ n$, count the number of arrays of positive integers $a_1, a_2, \\ldots, a_n$ such\
  \ that\n\n- $1 \\leq a_i \\leq n$ for each $1 \\leq i \\leq n$;\n- the answer to\
  \ Problem D1B is $k$.\n\nThe answer can be very large, so you have to calculate\
  \ it modulo a given prime $p$.\n\n### Input\n\nEach test contains multiple test\
  \ cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 500$).\
  \ The description of the test cases follows.\n\nThe only line of each test case\
  \ contains two integers $n$, $p$ ($1 \\le n \\le 500$, $10^8 \\leq p \\leq 10^9$,\
  \ $p$ is prime) -- the number of cities and the modulo.\n\nIt is guaranteed that\
  \ the sum of $n$ over all test cases does not exceed $500$.\n\n### Output\n\nFor\
  \ each test case, output $n+1$ integers: the $i$-th integer should be the number\
  \ of arrays that satisfy the conditions for $k = i-1$.\n\n### Example\n\n#### Input\
  \ #1\n\n```\n\n11\n\n1 998244353\n\n2 998244353\n\n3 998244353\n\n4 998244353\n\n\
  5 998244353\n\n6 998244353\n\n7 998244353\n\n8 998244353\n\n9 998244353\n\n10 102275857\n\
  \n10 999662017\n\n```\n\n#### Output #1\n\n```\n0 1\n1 2 1\n14 7 4 2\n183 34 19\
  \ 16 4\n2624 209 112 120 48 12\n42605 1546 793 992 468 216 36\n785910 13327 6556\
  \ 9190 4672 2880 864 144\n16382863 130922 61939 94992 50100 36960 14256 4608 576\n\
  382823936 1441729 657784 1086596 583344 488700 216000 96480 23040 2880\n20300780\
  \ 17572114 7751377 13641280 7376068 6810552 3269700 1785600 576000 144000 14400\n\
  944100756 17572114 7751377 13641280 7376068 6810552 3269700 1785600 576000 144000\
  \ 14400\n```\n\n### Note\n\nIn the first test case,\n\n- arrays with $1$ good starting\
  \ city: $[1]$.\n\nIn the second test case,\n\n- arrays with $0$ good starting cities:\
  \ $[1, 1]$;\n- arrays with $1$ good starting city: $[1, 2]$, $[2, 1]$;\n- arrays\
  \ with $2$ good starting cities: $[2, 2]$.\n\nIn the third test case,\n\n- arrays\
  \ with $0$ good starting cities: $[1, 1, 1]$, $[1, 1, 2]$, $[1, 1, 3]$, $[1, 2,\
  \ 1]$, $[1, 2, 2]$, $[1, 3, 1]$, $[1, 3, 2]$, $[2, 1, 1]$, $[2, 1, 2]$, $[2, 2,\
  \ 1]$, $[2, 2, 2]$, $[2, 3, 1]$, $[2, 3, 2]$, $[3, 1, 1]$;\n- arrays with $1$ good\
  \ starting city: $[1, 2, 3]$, $[1, 3, 3]$, $[2, 1, 3]$, $[3, 1, 2]$, $[3, 1, 3]$,\
  \ $[3, 2, 1]$, $[3, 3, 1]$;\n- arrays with $2$ good starting cities: $[2, 2, 3]$,\
  \ $[2, 3, 3]$, $[3, 2, 2]$, $[3, 3, 2]$;\n- arrays with $3$ good starting cities:\
  \ $[3, 2, 3]$, $[3, 3, 3]$."
max_agent_timeout_sec: 300
max_test_timeout_sec: 180
tags: []
