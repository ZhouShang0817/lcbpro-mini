author: LiveCodeBench Pro Team
author_email: shz060@ucsd.edu
difficulty: easy
instruction: "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create\
  \ a C++17 solution file at /app/main.cpp.\nThis task does not include local test\
  \ cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit)\
  \ to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n\
  \  3) passes only if the judge returns passed == true.\n\nEnvironment variables\
  \ (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n\
  \  - PID: problem id (default 2028B)\n  - LANG: language (default cpp)\n  - CODE_PATH:\
  \ path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds\
  \ (default 120)\n\nAlice mixed up the words transmutation and permutation! She has\
  \ an array $a$ specified via three integers $n$, $b$, $c$: the array $a$ has length\
  \ $n$ and is given via $a_i = b\\cdot (i - 1) + c$ for $1\\le i\\le n$. For example,\
  \ if $n=3$, $b=2$, and $c=1$, then $a=[2 \\cdot 0 + 1, 2 \\cdot 1 + 1, 2 \\cdot\
  \ 2 + 1] = [1, 3, 5]$.\n\nNow, Alice really enjoys permutations of $\\[0, \\\\ldots,\
  \ n-1\\]\n\n$$^{\\text{∗}}$ and would like to transform $a$ into a permutation.\
  \ In one operation, Alice replaces the maximum element of $a$ with the $\\operatorname{MEX}$$\n\
  \ntext{†}}$ of $a$. If there are multiple maximum elements in $a$, Alice chooses\
  \ the leftmost one to replace.\n\nCan you help Alice figure out how many operations\
  \ she has to do for $a$ to become a permutation for the first time? If it is impossible,\
  \ you should report it.\n\n$^{\\text{∗}}$A permutation of length $n$ is an array\
  \ consisting of $n$ distinct integers from $0$ to $n-1$ in arbitrary order. Please\
  \ note, this is slightly different from the usual definition of a permutation. For\
  \ example, $[1,2,0,4,3]$ is a permutation, but $[0,1,1]$ is not a permutation ($1$\
  \ appears twice in the array), and $[0,2,3]$ is also not a permutation ($n=3$ but\
  \ there is $3$ in the array).\n\n$^{\\text{†}}$The $\\operatorname{MEX}$ of an array\
  \ is the smallest non-negative integer that does not belong to the array. For example,\
  \ the $\\operatorname{MEX}$ of $[0, 3, 1, 3]$ is $2$ and the $\\operatorname{MEX}$\
  \ of $[5]$ is $0$.\n\n### Input\n\nEach test contains multiple test cases. The first\
  \ line contains the number of test cases $t$ ($1 \\le t \\le 10^5$). The description\
  \ of the test cases follows.\n\nThe only line of each test case contains three integers\
  \ $n$, $b$, $c$ ($1\\le n\\le 10^{18}$; $0\\le b$, $c\\le 10^{18}$) -- the parameters\
  \ of the array.\n\n### Output\n\nFor each test case, if the array can never become\
  \ a permutation, output $-1$. Otherwise, output the minimum number of operations\
  \ for the array to become a permutation.\n\n### Example\n\n#### Input #1\n\n```\n\
  \n7\n\n10 1 0\n\n1 2 3\n\n100 2 1\n\n3 0 1\n\n3 0 0\n\n1000000000000000000 0 0\n\
  \n1000000000000000000 1000000000000000000 1000000000000000000\n\n```\n\n#### Output\
  \ #1\n\n```\n0\n1\n50\n2\n-1\n-1\n1000000000000000000\n```\n\n### Note\n\nIn the\
  \ first test case, the array is already $[0, 1, \\ldots, 9]$, so no operations are\
  \ required.\n\nIn the third test case, the starting array is $[1, 3, 5, \\ldots,\
  \ 199]$. After the first operation, the $199$ gets transformed into a $0$. In the\
  \ second operation, the $197$ gets transformed into a $2$. If we continue this,\
  \ it will take exactly $50$ operations to get the array $[0, 1, 2, 3, \\ldots, 99]$.\n\
  \nIn the fourth test case, two operations are needed: $[1,1,1] \\to [0,1,1] \\to\
  \ [0,2,1]$.\n\nIn the fifth test case, the process is $[0,0,0] \\to [1,0,0] \\to\
  \ [2,0,0] \\to [1,0,0] \\to [2,0,0]$. This process repeats forever, so the array\
  \ is never a permutation and the answer is $-1$."
max_agent_timeout_sec: 300
max_test_timeout_sec: 180
tags: []
