author: LiveCodeBench Pro Team
author_email: shz060@ucsd.edu
difficulty: easy
instruction: "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create\
  \ a C++17 solution file at /app/main.cpp.\nThis task does not include local test\
  \ cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit)\
  \ to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n\
  \  3) passes only if the judge returns passed == true.\n\nEnvironment variables\
  \ (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n\
  \  - PID: problem id (default 2036E)\n  - LANG: language (default cpp)\n  - CODE_PATH:\
  \ path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds\
  \ (default 120)\n\nA conspiracy of ancient sages, who decided to redirect rivers\
  \ for their own convenience, has put the world on the brink. But before implementing\
  \ their grand plan, they decided to carefully think through their strategy -- that's\
  \ what sages do.\n\nThere are $n$ countries, each with exactly $k$ regions. For\
  \ the $j$-th region of the $i$-th country, they calculated the value $a_{i,j}$,\
  \ which reflects the amount of water in it.\n\nThe sages intend to create channels\
  \ between the $j$-th region of the $i$-th country and the $j$-th region of the $(i\
  \ + 1)$-th country for all $1 \\leq i \\leq (n - 1)$ and for all $1 \\leq j \\leq\
  \ k$.\n\nSince all $n$ countries are on a large slope, water flows towards the country\
  \ with the highest number. According to the sages' predictions, after the channel\
  \ system is created, the new value of the $j$-th region of the $i$-th country will\
  \ be $b_{i,j} = a_{1,j} | a_{2,j} | ... | a_{i,j}$, where $|$ denotes the [bitwise\
  \ \"OR\"](http://tiny.cc/bitwise_or) operation.\n\nAfter the redistribution of water,\
  \ the sages aim to choose the most suitable country for living, so they will send\
  \ you $q$ queries for consideration.\n\nEach query will contain $m$ requirements.\n\
  \nEach requirement contains three parameters: the region number $r$, the sign $o$\
  \ (either \"$<$\" or \"$>$\"), and the value $c$. If $o$ = \"$<$\", then in the\
  \ $r$-th region of the country you choose, the new value must be strictly less than\
  \ the limit $c$, and if $o$ = \"$>$\", it must be strictly greater.\n\nIn other\
  \ words, the chosen country $i$ must satisfy all $m$ requirements. If in the current\
  \ requirement $o$ = \"$<$\", then it must hold that $b_{i,r} < c$, and if $o$ =\
  \ \"$>$\", then $b_{i,r} > c$.\n\nIn response to each query, you should output a\
  \ single integer -- the number of the suitable country. If there are multiple such\
  \ countries, output the smallest one. If no such country exists, output $-1$.\n\n\
  ### Input\n\nThe first line contains three integers $n$, $k$, and $q$ ($1 \\leq\
  \ n, k, q \\leq 10^5$) -- the number of countries, regions, and queries, respectively.\n\
  \nNext, there are $n$ lines, where the $i$-th line contains $k$ integers $a_{i,1},\
  \ a_{i,2}, \\dots, a_{i,k}$ ($1 \\leq a_{i,j} \\leq 10^9$), where $a_{i,j}$ is the\
  \ value of the $j$-th region of the $i$-th country.\n\nThen, $q$ queries are described.\n\
  \nThe first line of each query contains a single integer $m$ ($1 \\leq m \\leq 10^5$)\
  \ -- the number of requirements.\n\nThen follow $m$ lines, each containing an integer\
  \ $r$, a character $o$, and an integer $c$ ($1 \\leq r \\leq k$, $0 \\leq c \\leq\
  \ 2 \\cdot 10^9$), where $r$ and $c$ are the region number and the value, and $o$\
  \ is either \"$<$\" or \"$>$\" -- the sign.\n\nIt is guaranteed that $n \\cdot k$\
  \ does not exceed $10^5$ and that the sum of $m$ across all queries also does not\
  \ exceed $10^5$.\n\n### Output\n\nFor each query, output a single integer on a new\
  \ line -- the smallest number of the suitable country, or $-1$ if no such country\
  \ exists.\n\n### Example\n\n#### Input #1\n\n```\n\n3 4 4\n\n1 3 5 9\n\n4 6 5 3\n\
  \n2 1 2 7\n\n3\n\n1 > 4\n\n2 < 8\n\n1 < 6\n\n2\n\n1 < 8\n\n2 > 8\n\n1\n\n3 > 5\n\
  \n2\n\n4 > 8\n\n1 < 8\n\n```\n\n#### Output #1\n\n```\n2\n-1\n3\n1\n```\n\n### Note\n\
  \nIn the example, the initial values of the regions are as follows:\n\n$1\n\n$$3$$\n\
  \n5\n\n$$9$$\n\n4\n\n$$6$$\n\n5\n\n$$3$$\n\n2\n\n$$1$$\n\n2$$7$\n\nAfter creating\
  \ the channels, the new values will look like this:\n\n$1\n\n$$3$$\n\n5\n\n$$9$$\n\
  \n1 | 4\n\n$$3 | 6$$\n\n5 | 5\n\n$$9 | 3$$\n\n1 | 4 | 2\n\n$$3 | 6 | 1$$\n\n5 |\
  \ 5 | 2\n\n$$9 | 3 | 7$ $\\downarrow$ $1$$\n\n3\n\n$$5$$\n\n9\n\n$$5$$\n\n7\n\n\
  $$5$$\n\n11\n\n$$7$$\n\n7\n\n$$7$$\n\n15$\n\nIn the first query, it is necessary\
  \ to output the minimum country number (i.e., row) where, after the redistribution\
  \ of water in the first region (i.e., column), the new value will be greater than\
  \ four and less than six, and in the second region it will be less than eight. Only\
  \ the country with number $2$ meets these requirements.\n\nIn the second query,\
  \ there are no countries that meet the specified requirements.\n\nIn the third query,\
  \ only the country with number $3$ is suitable.\n\nIn the fourth query, all three\
  \ countries meet the conditions, so the answer is the smallest number $1$."
max_agent_timeout_sec: 300
max_test_timeout_sec: 180
tags: []
