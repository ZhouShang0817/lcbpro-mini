author: LiveCodeBench Pro Team
author_email: shz060@ucsd.edu
difficulty: medium
instruction: "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create\
  \ a C++17 solution file at /app/main.cpp.\nThis task does not include local test\
  \ cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit)\
  \ to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n\
  \  3) passes only if the judge returns passed == true.\n\nEnvironment variables\
  \ (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n\
  \  - PID: problem id (default 2002D2)\n  - LANG: language (default cpp)\n  - CODE_PATH:\
  \ path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds\
  \ (default 120)\n\nThis is the hard version of the problem. In this version, you\
  \ are given a generic tree and the constraints on $n$ and $q$ are higher. You can\
  \ make hacks only if both versions of the problem are solved.\n\nYou are given a\
  \ rooted tree consisting of $n$ vertices. The vertices are numbered from $1$ to\
  \ $n$, and the root is the vertex $1$. You are also given a permutation $p_1, p_2,\
  \ \\ldots, p_n$ of $[1,2,\\ldots,n]$.\n\nYou need to answer $q$ queries. For each\
  \ query, you are given two integers $x$, $y$; you need to swap $p_x$ and $p_y$ and\
  \ determine if $p_1, p_2, \\ldots, p_n$ is a valid DFS order$^\\dagger$ of the given\
  \ tree.\n\nPlease note that the swaps are persistent through queries.\n\n$^\\dagger$\
  \ A DFS order is found by calling the following $\\texttt{dfs}$ function on the\
  \ given tree.\n\n```\n`dfs_order = []<br/><br/>function dfs(v):<br/>    append v\
  \ to the back of dfs_order<br/>    pick an arbitrary permutation s of children of\
  \ v<br/>    for child in s:<br/>        dfs(child)<br/>dfs(1)<br/>````\n\nNote that\
  \ the DFS order is not unique.\n\n### Input\n\nEach test contains multiple test\
  \ cases. The first line contains the number of test cases $t$ ($1\\le t\\le10^4$).\
  \ The description of the test cases follows.\n\nThe first line of each test case\
  \ contains two integers $n$, $q$ ($2\\le n\\le 3\\cdot 10^5$, $2\\le q\\le 10^5$) --\
  \ the number of vertices in the tree and the number of queries.\n\nThe next line\
  \ contains $n-1$ integers $a_2,a_3,\\ldots,a_n$ ($1\\le a_i<i$) -- the parent of\
  \ each vertex in the given tree.\n\nThe next line contains $n$ integers $p_1,p_2,\\\
  ldots,p_n$ ($1\\le p_i\\le n$, all $p_i$ are distinct) -- the initial permutation\
  \ $p$.\n\nThe next $q$ lines each contain two integers $x$, $y$ ($1\\le x,y\\le\
  \ n,x\\neq y$) -- the positions of the elements to swap in the permutation.\n\n\
  It is guaranteed that the sum of all $n$ does not exceed $3\\cdot 10^5$, and the\
  \ sum of all $q$ does not exceed $10^5$.\n\n### Output\n\nFor each test case, print\
  \ $q$ lines corresponding to the $q$ queries. For each query, output $\\texttt{YES}$\
  \ if there is a DFS order that exactly equals the current permutation, and output\
  \ $\\texttt{NO}$ otherwise.\n\nYou can output $\\texttt{Yes}$ and $\\texttt{No}$\
  \ in any case (for example, strings $\\texttt{yEs}$, $\\texttt{yes}$, $\\texttt{Yes}$,\
  \ and $\\texttt{YES}$ will be recognized as a positive response).\n\n### Example\n\
  \n#### Input #1\n\n```\n\n3\n\n3 3\n\n1 1\n\n1 2 3\n\n2 3\n\n3 2\n\n1 3\n\n7 4\n\
  \n1 1 2 2 3 3\n\n1 2 3 4 5 6 7\n\n3 5\n\n2 5\n\n3 7\n\n4 6\n\n5 4\n\n1 1 3 4\n\n\
  2 3 4 5 1\n\n5 1\n\n4 5\n\n3 4\n\n2 3\n\n```\n\n#### Output #1\n\n```\nYES\nYES\n\
  NO\nYES\nNO\nNO\nYES\nYES\nNO\nNO\nYES\n```\n\n### Note\n\nIn the first test case,\
  \ the permutation $p_1, p_2, \\ldots, p_n$ after each modification is $[1,3,2],[1,2,3],[3,2,1]$,\
  \ respectively. The first two permutations are valid DFS orders; the third is not\
  \ a DFS order.\n\nIn the second test case, the permutation $p_1, p_2, \\ldots, p_n$\
  \ after each modification is $[1,2,5,4,3,6,7],[1,3,5,4,2,6,7],[1,3,7,4,2,6,5],[1,3,7,6,2,4,5]$,\
  \ respectively."
max_agent_timeout_sec: 300
max_test_timeout_sec: 180
tags: []
