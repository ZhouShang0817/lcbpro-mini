author: LiveCodeBench Pro Team
author_email: shz060@ucsd.edu
difficulty: easy
instruction: "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create\
  \ a C++17 solution file at /app/main.cpp.\nThis task does not include local test\
  \ cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit)\
  \ to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n\
  \  3) passes only if the judge returns passed == true.\n\nEnvironment variables\
  \ (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n\
  \  - PID: problem id (default 2028C)\n  - LANG: language (default cpp)\n  - CODE_PATH:\
  \ path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds\
  \ (default 120)\n\nAlice is at the Mad Hatter's tea party! There is a long sheet\
  \ cake made up of $n$ sections with tastiness values $a_1, a_2, \\ldots, a_n$. There\
  \ are $m$ creatures at the tea party, excluding Alice.\n\nAlice will cut the cake\
  \ into $m + 1$ pieces. Formally, she will partition the cake into $m + 1$ subarrays,\
  \ where each subarray consists of some number of adjacent sections. The tastiness\
  \ of a piece is the sum of tastiness of its sections. Afterwards, she will divvy\
  \ these $m + 1$ pieces up among the $m$ creatures and herself (her piece can be\
  \ empty). However, each of the $m$ creatures will only be happy when the tastiness\
  \ of its piece is $v$ or more.\n\nAlice wants to make sure every creature is happy.\
  \ Limited by this condition, she also wants to maximize the tastiness of her own\
  \ piece. Can you help Alice find the maximum tastiness her piece can have? If there\
  \ is no way to make sure every creature is happy, output $-1$.\n\n### Input\n\n\
  Each test contains multiple test cases. The first line contains the number of test\
  \ cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\
  \nThe first line of each test case contains three integers $n, m, v$ ($1\\le m\\\
  le n\\le 2\\cdot 10^5$; $1\\le v\\le 10^9$) -- the number of sections, the number\
  \ of creatures, and the creatures' minimum requirement for tastiness, respectively.\n\
  \nThe next line contains $n$ space separated integers $a_1, a_2, \\ldots, a_n$ ($1\
  \ \\le a_i \\le 10^9$) -- the tastinesses of the sections.\n\nThe sum of $n$ over\
  \ all test cases does not exceed $2\\cdot 10^5$.\n\n### Output\n\nFor each test\
  \ case, output the maximum tastiness Alice can achieve for her piece, or $-1$ if\
  \ there is no way to make sure every creature is happy.\n\n### Example\n\n#### Input\
  \ #1\n\n```\n\n7\n\n6 2 1\n\n1 1 10 1 1 10\n\n6 2 2\n\n1 1 10 1 1 10\n\n6 2 3\n\n\
  1 1 10 1 1 10\n\n6 2 10\n\n1 1 10 1 1 10\n\n6 2 11\n\n1 1 10 1 1 10\n\n6 2 12\n\n\
  1 1 10 1 1 10\n\n6 2 12\n\n1 1 1 1 10 10\n\n```\n\n#### Output #1\n\n```\n22\n12\n\
  2\n2\n2\n0\n-1\n```\n\n### Note\n\nFor the first test case, Alice can give the first\
  \ and second section as their own pieces, and then take the remaining $10 + 1 +\
  \ 1 + 10 = 22$ tastiness for herself. We can show that she cannot do any better.\n\
  \nFor the second test case, Alice could give the first and second section as one\
  \ piece, and the sixth section as one piece. She can then take the remaining $10\
  \ + 1 + 1 = 12$ tastiness for herself. We can show that she cannot do any better.\n\
  \nFor the seventh test case, Alice cannot give each creature a piece of at least\
  \ $12$ tastiness."
max_agent_timeout_sec: 300
max_test_timeout_sec: 180
tags: []
