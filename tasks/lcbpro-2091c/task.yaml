author: LiveCodeBench Pro Team
author_email: shz060@ucsd.edu
difficulty: easy
instruction: "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create\
  \ a C++17 solution file at /app/main.cpp.\nThis task does not include local test\
  \ cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit)\
  \ to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n\
  \  3) passes only if the judge returns passed == true.\n\nEnvironment variables\
  \ (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n\
  \  - PID: problem id (default 2091C)\n  - LANG: language (default cpp)\n  - CODE_PATH:\
  \ path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds\
  \ (default 120)\n\nAt the IT Campus \"NEIMARK\", there are several top-secret rooms\
  \ where problems for major programming competitions are developed. To enter one\
  \ of these rooms, you must unlock a circular lock by selecting the correct code.\
  \ This code is updated every day.\n\nToday's code is a permutation$^{\\text{∗}}$\
  \ of the numbers from $1$ to $n$, with the property that in every cyclic shift$^{\\\
  text{†}}$ of it, there is exactly one fixed point. That is, in every cyclic shift,\
  \ there exists exactly one element whose value is equal to its position in the permutation.\n\
  \nOutput any valid permutation that satisfies this condition. Keep in mind that\
  \ a valid permutation might not exist, then output $-1$.\n\n$^{\\text{∗}}$A permutation\
  \ is defined as a sequence of length $n$ consisting of integers from $1$ to $n$,\
  \ where each number appears exactly once. For example, (2 1 3), (1), (4 3 1 2) are\
  \ permutations; (1 2 2), (3), (1 3 2 5) are not.\n\n$^{\\text{†}}$A cyclic shift\
  \ of an array is obtained by moving the last element to the beginning of the array.\
  \ A permutation of length $n$ has exactly $n$ cyclic shifts.\n\n### Input\n\nEach\
  \ test contains multiple test cases. The first line contains the number of test\
  \ cases $t$ ($1 \\leq t \\leq 500$). The description of the test cases follows.\n\
  \nA single line of each test case contains a single integer $n$ ($1 \\leq n \\leq\
  \ 2 \\cdot 10^5$).\n\nIt is guaranteed that the sum of $n$ over all test cases does\
  \ not exceed $2 \\cdot 10^5$.\n\n### Output\n\nFor each test case, output the desired\
  \ permutation. If multiple solutions exist, output any one of them. If no suitable\
  \ permutations exist, output $-1$.\n\n### Example\n\n#### Input #1\n\n```\n\n3\n\
  \n4\n\n5\n\n3\n\n```\n\n#### Output #1\n\n```\n-1\n4 1 3 5 2\n1 3 2\n```\n\n###\
  \ Note\n\nIn the second example, there is a permutation such that in each cyclic\
  \ shift there is a fixed point (highlighted in dark red):\n\n![](https://espresso.codeforces.com/e1f7f024e13851731c4a34d583c32d16a0e2a8e9.png)\n\
  \nThe first line contains the element numbers, and the second line contains all\
  \ the shifts of the desired permutation."
max_agent_timeout_sec: 300
max_test_timeout_sec: 180
tags: []
