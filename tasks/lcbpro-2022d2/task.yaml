author: LiveCodeBench Pro Team
author_email: shz060@ucsd.edu
difficulty: medium
instruction: "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create\
  \ a C++17 solution file at /app/main.cpp.\nThis task does not include local test\
  \ cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit)\
  \ to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n\
  \  3) passes only if the judge returns passed == true.\n\nEnvironment variables\
  \ (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n\
  \  - PID: problem id (default 2022D2)\n  - LANG: language (default cpp)\n  - CODE_PATH:\
  \ path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds\
  \ (default 120)\n\nThis is the hard version of the problem. In this version, you\
  \ must use the minimum number of queries possible. You can make hacks only if both\
  \ versions of the problem are solved.\n\nThis is an interactive problem.\n\nIt is\
  \ a tradition in Mexico's national IOI trainings to play the game \"Asesino\", which\
  \ is similar to \"Among Us\" or \"Mafia\".\n\nToday, $n$ players, numbered from\
  \ $1$ to $n$, will play \"Asesino\" with the following three roles:\n\n- Knight:\
  \ a Knight is someone who always tells the truth.\n- Knave: a Knave is someone who\
  \ always lies.\n- Impostor: an Impostor is someone everybody thinks is a Knight,\
  \ but is secretly a Knave.\n\nEach player will be assigned a role in the game. There\
  \ will be exactly one Impostor but there can be any (possible zero) number of Knights\
  \ and Knaves.\n\nAs the game moderator, you have accidentally forgotten the roles\
  \ of everyone, but you need to determine the player who is the Impostor.\n\nTo determine\
  \ the Impostor, you will ask some questions. In each question, you will pick two\
  \ players $i$ and $j$ ($1 \\leq i, j \\leq n$; $i \\neq j$) and ask if player $i$\
  \ thinks that player $j$ is a Knight. The results of the question is shown in the\
  \ table below.\n\nKnightKnaveImpostorKnightYesNoYesKnaveNoYesNoImpostorNoYes--The\
  \ response of the cell in row $a$ and column $b$ is the result of asking a question\
  \ when $i$ has role $a$ and $j$ has row $b$. For example, the \"Yes\" in the top\
  \ right cell belongs to row \"Knight\" and column \"Impostor\", so it is the response\
  \ when $i$ is a Knight and $j$ is an Impostor.\n\nFind the Impostor in the minimum\
  \ number of queries possible. That is, let $f(n)$ be the minimum integer such that\
  \ for $n$ players, there exists a strategy that can determine the Impostor using\
  \ at most $f(n)$ questions. Then, you should use at most $f(n)$ questions to determine\
  \ the Impostor.\n\nNote: the grader is adaptive: the roles of the players are not\
  \ fixed in the beginning and may change depending on your questions. However, it\
  \ is guaranteed that there exists an assignment of roles that is consistent with\
  \ all previously asked questions under the constraints of this problem.\n\n### Input\n\
  \nThe first line of input contains a single integer $t$ ($1 \\leq t \\leq 10^3$) --\
  \ the number of test cases. The description of the test cases follows.\n\nThe first\
  \ line of each test case contains a single integer $n$ ($3 \\le n \\le 10^5$) --\
  \ the number of people playing the game.\n\nIt is guaranteed that the sum of $n$\
  \ over all test cases does not exceed $10^5$.\n\n### Interaction\n\nTo ask a question,\
  \ output a line in the following format:\n\n- \"? i j\" ($1 \\leq i,j \\leq n$;\
  \ $i \\neq j$) -- to ask player $i$ if they think player $j$ is a Knight.\n\nThe\
  \ jury will output a \"1\" if player $i$ thinks player $j$ is a Knight, and \"0\"\
  \ otherwise.\n\nWhen you have determined which player the Impostor is, output a\
  \ line in the following format:\n\n- \"! i\" ($1 \\leq i \\leq n$) -- the Impostor\
  \ is player $i$.\n\nNote that answering does not count to your limit of $f(n)$ questions.\n\
  \nIf you have made an invalid output, used more than $f(n)$ questions or wrongly\
  \ determined the Impostor, the jury will respond with \"-1\" and you will receive\
  \ a Wrong Answer verdict. Upon receiving \"-1\", your program must terminate immediately.\
  \ Otherwise, you may receive an arbitrary verdict because your solution might be\
  \ reading from a closed stream.\n\nAfter printing a query do not forget to output\
  \ the end of the line and flush the output. Otherwise, you will get Idleness limit\
  \ exceeded. To do this, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush()\
  \ in Java;\n- sys.stdout.flush() in Python;\n- std::io::stdout().flush() in Rust;\n\
  - see the documentation for other languages.\n\nHack format\n\nFor hacks, use the\
  \ following format.\n\nThe first line should contain a single integer $t$ -- the\
  \ number of test cases.\n\nThe first line of each test case should contain the integer\
  \ $n$ followed by the string \"manual\".\n\nThe second line contains $n$ integers\
  \ $a_1, a_2, \\ldots, a_n$ ($-1 \\le a_i \\le 1$) -- the roles of each player. $1$\
  \ denotes a Knight, $0$ denotes a Knave, and $-1$ dentoes an Impostor. There must\
  \ be exactly one Impostor, that is there must be exactly one index $i$ such that\
  \ $a_i=-1$.\n\nAs an example, the hack format for the example input is:\n\n```\n\
  `2<br/>7 manual<br/>0 1 0 -1 0 1 0<br/>4 manual<br/>0 1 -1 0<br/>````\n\n### Example\n\
  \n#### Input #1\n\n```\n2\n7\n\n1\n\n0\n\n0\n\n1\n\n1\n\n0\n\n0\n\n4\n\n0\n\n1\n\
  \n1\n\n1\n```\n\n#### Output #1\n\n```\n\n? 1 3\n\n? 7 6\n\n? 2 5\n\n? 6 2\n\n?\
  \ 4 5\n\n? 4 6\n\n? 1 4\n\n! 4\n\n? 1 2\n\n? 2 3\n\n? 3 4\n\n? 4 1\n\n! 3\n```\n\
  \n### Note\n\nNote that the example test cases do not represent an optimal strategy\
  \ for asking questions and are only shown for the sake of demonstrating the interaction\
  \ format. Specifically, we cannot determine which player is the Impostor from the\
  \ questions asked in the examples.\n\nIn the first test case of the example, players\
  \ at indices $2$ and $6$ are Knights, players at indices $1$, $3$, $5$, and $7$\
  \ are Knaves, and the Impostor is at index $4$. The following is an explanation\
  \ of the questions asked:\n\n- In the first query, player $i$ is a Knave and player\
  \ $j$ is a Knave. The answer is \"yes\" since Knaves always lie.\n- In the second\
  \ query, player $i$ is a Knave and player $j$ is a Knight. The answer is \"no\"\
  \ since Knaves always lie.\n- In the third query, player $i$ is a Knight and player\
  \ $j$ is a Knave. The answer is \"no\" since Knights always tell the truth.\n- In\
  \ the fourth query, player $i$ is a Knight and player $j$ is a Knight. The answer\
  \ is \"yes\" since Knights always tell the truth.\n- In the fifth query, player\
  \ $i$ is a Impostor and player $j$ is a Knave. The answer is \"yes\" since the Impostor\
  \ always lies.\n- In the sixth query, player $i$ is a Impostor and player $j$ is\
  \ a Knight. The answer is \"no\" since the Impostor always lies.\n- In the seventh\
  \ query, player $i$ is a Knave and player $j$ is a Impostor. The answer is \"no\"\
  \ since Knaves always lie and Knaves thinks that the Impostor is a Knight."
max_agent_timeout_sec: 300
max_test_timeout_sec: 180
tags: []
