author: LiveCodeBench Pro Team
author_email: shz060@ucsd.edu
difficulty: medium
instruction: "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create\
  \ a C++17 solution file at /app/main.cpp.\nThis task does not include local test\
  \ cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit)\
  \ to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n\
  \  3) passes only if the judge returns passed == true.\n\nEnvironment variables\
  \ (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n\
  \  - PID: problem id (default 2049F)\n  - LANG: language (default cpp)\n  - CODE_PATH:\
  \ path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds\
  \ (default 120)\n\nAn integer sequence $b_1, b_2, \\ldots, b_n$ is good if $\\operatorname{mex}(b_1,\
  \ b_2, \\ldots, b_n) - (b_1 | b_2 | \\ldots | b_n) = 1$. Here, $\\operatorname{mex(c)}$\
  \ denotes the MEX$^{\\text{∗}}$ of the collection $c$, and $|$ is the [bitwise OR](https://en.wikipedia.org/wiki/Bitwise_operation#OR)\
  \ operator.\n\nShohag has an integer sequence $a_1, a_2, \\ldots, a_n$. He will\
  \ perform the following $q$ updates on $a$:\n\n- $i$ $x$ -- increase $a_i$ by $x$.\n\
  \nAfter each update, help him find the length of the longest good subarray$^{\\\
  text{†}}$ of $a$.\n\n$^{\\text{∗}}$The minimum excluded (MEX) of a collection of\
  \ integers $c_1, c_2, \\ldots, c_k$ is defined as the smallest non-negative integer\
  \ $y$ which does not occur in the collection $c$.\n\n$^{\\text{†}}$An array $d$\
  \ is a subarray of an array $f$ if $d$ can be obtained from $f$ by the deletion\
  \ of several (possibly, zero or all) elements from the beginning and several (possibly,\
  \ zero or all) elements from the end.\n\n### Input\n\nEach test contains multiple\
  \ test cases. The first line contains the number of test cases $t$ ($1 \\le t \\\
  le 10^4$). The description of the test cases follows.\n\nThe first line of each\
  \ test case contains two space-separated integers $n$ and $q$ ($1 \\le n, q \\le\
  \ 10^5$).\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\
  \ \\ldots, a_n$ ($0 \\le a_i \\le n$).\n\nThe next $q$ lines of each test case are\
  \ of the following form:\n\n- $i$ $x$ ($1 \\le i, x \\le n$) -- it means you should\
  \ increase $a_i$ by $x$.\n\nIt is guaranteed that the sum of $n$ over all test cases\
  \ doesn't exceed $10^5$ and the sum of $q$ doesn't exceed $10^5$.\n\n### Output\n\
  \nFor each test case, output $q$ lines -- on the $i$-th line output the length of\
  \ the longest good subarray of $a$ after the $i$-th update.\n\n### Example\n\n####\
  \ Input #1\n\n```\n\n2\n\n6 3\n\n0 0 1 0 1 0\n\n6 1\n\n3 2\n\n6 3\n\n3 1\n\n1 3\
  \ 1\n\n1 1\n\n```\n\n#### Output #1\n\n```\n6\n3\n2\n0\n```\n\n### Note\n\nIn the\
  \ first test case, after the first update, the array becomes $[0, 0, 1, 0, 1, 1]$,\
  \ and here the whole array is good because $\\operatorname{mex}([0, 0, 1, 0, 1,\
  \ 1]) - (0 | 0 | 1 | 0 | 1 | 1) = 2 - 1 = 1$.\n\nAfter the second update, the array\
  \ becomes $[0, 0, 3, 0, 1, 1]$, and here the subarray $[0, 1, 1]$ has the maximum\
  \ length among all the good subarrays.\n\nFinally, after the third update, the array\
  \ becomes $[0, 0, 3, 0, 1, 4]$, and here the subarrays $[0, 0]$ and $[0, 1]$ both\
  \ have the maximum length among all the good subarrays."
max_agent_timeout_sec: 300
max_test_timeout_sec: 180
tags: []
