author: LiveCodeBench Pro Team
author_email: shz060@ucsd.edu
difficulty: hard
instruction: "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create\
  \ a C++17 solution file at /app/main.cpp.\nThis task does not include local test\
  \ cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit)\
  \ to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n\
  \  3) passes only if the judge returns passed == true.\n\nEnvironment variables\
  \ (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n\
  \  - PID: problem id (default 1994H)\n  - LANG: language (default cpp)\n  - CODE_PATH:\
  \ path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds\
  \ (default 120)\n\nThis is an interactive problem!\n\nTimofey is writing a competition\
  \ called Capture the Flag (or CTF for short). He has one task left, which involves\
  \ hacking a security system. The entire system is based on polynomial hashes$^{\\\
  text{∗}}$.\n\nTimofey can input a string consisting of lowercase Latin letters into\
  \ the system, and the system will return its polynomial hash. To hack the system,\
  \ Timofey needs to find the polynomial hash parameters ($p$ and $m$) that the system\
  \ uses.\n\nTimofey doesn't have much time left, so he will only be able to make\
  \ $3$ queries. Help him solve the task.\n\n$^{\\text{∗}}$ The polynomial hash of\
  \ a string $s$, consisting of lowercase Latin letters of length $n$, based on $p$\
  \ and modulo $m$ is $(\\mathrm{ord}(s_1) \\cdot p ^ 0 + \\mathrm{ord}(s_2) \\cdot\
  \ p ^ 1 + \\mathrm{ord}(s_3) \\cdot p ^ 2 + \\ldots + \\mathrm{ord}(s_n) \\cdot\
  \ p ^ {n - 1}) \\bmod m$. Where $s_i$ denotes the $i$-th character of the string\
  \ $s$, $\\mathrm{ord}(\\mathrm{chr})$ denotes the ordinal number of the character\
  \ $\\mathrm{chr}$ in the English alphabet, and $x \\bmod m$ is the remainder of\
  \ $x$ when divided by $m$.\n\n### Input\n\nEach test consists of multiple test cases.\
  \ The first line contains an integer $t$ ($1 \\leq t \\leq 10^3$) -- the number\
  \ of test cases.\n\nIt is guaranteed that the $p$ and $m$ used by the system satisfy\
  \ the conditions: $26 < p \\leq 50$ and $p + 1 < m \\leq 2 \\cdot 10^9$.\n\n###\
  \ Interaction\n\nTo make a query to the system, output ? $s$, where $s$ is a string\
  \ of no more than $50$ characters in length, the hash of which you want to know.\
  \ In response to this query, you will receive the polynomial hash of the string\
  \ $s$.\n\nTo output the answer, output ! $p$ $m$, where $p$ is the base of the hash,\
  \ and $m$ is the modulus. After that, immediately proceed to the next test case.\n\
  \nYou have to make not more than $3$ queries ?, otherwise you will get verdict Wrong\
  \ Answer.\n\nAfter outputting a query, do not forget to output a newline and flush\
  \ the output buffer. Otherwise, you will receive the verdict Idleness limit exceeded.\
  \ To flush the buffer, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush()\
  \ in Java;\n- flush(output) in Pascal;\n- stdout.flush() in Python;\n- see the documentation\
  \ for other languages.\n\n### Example\n\n#### Input #1\n\n```\n1\n\n32\n\n28```\n\
  \n#### Output #1\n\n```\n? aa\n\n? yb\n\n! 31 59```\n\n### Note\n\nAnswer for the\
  \ first query is $(ord(a) \\cdot 31^0 + ord(a) \\cdot 31^1) \\mod 59 = (1 + 1 \\\
  cdot 31) \\mod 59 = 32$.\n\nAnswer for the second query is $(ord(y) \\cdot 31^0\
  \ + ord(b) \\cdot 31^1) \\mod 59 = (25 + 2 \\cdot 31) \\mod 59 = 28$."
max_agent_timeout_sec: 300
max_test_timeout_sec: 180
tags: []
