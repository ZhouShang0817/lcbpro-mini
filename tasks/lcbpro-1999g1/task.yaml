author: LiveCodeBench Pro Team
author_email: shz060@ucsd.edu
difficulty: easy
instruction: "LiveCodeBench Pro (Mini) - external judge.\n\nThe agent must create\
  \ a C++17 solution file at /app/main.cpp.\nThis task does not include local test\
  \ cases. Instead, the test harness:\n  1) POSTs the code to the external judge (/submit)\
  \ to get a sid,\n  2) polls GET /result/{sid}?short=1 until status == \"done\",\n\
  \  3) passes only if the judge returns passed == true.\n\nEnvironment variables\
  \ (overridable at runtime):\n  - BASE_URL: judge base URL (default http://38.80.122.117:8081)\n\
  \  - PID: problem id (default 1999G1)\n  - LANG: language (default cpp)\n  - CODE_PATH:\
  \ path to code (default /app/main.cpp)\n  - JUDGE_TIMEOUT_SECS: poll timeout seconds\
  \ (default 120)\n\nThis is the easy version of the problem. The only difference\
  \ between the two versions is that in this version, you can make at most $\\mathbf{10}$\
  \ queries.\n\nThis is an interactive problem. If you are unsure how interactive\
  \ problems work, then it is recommended to read [the guide for participants](https://codeforces.com/blog/entry/45307).\n\
  \nWe have a secret ruler that is missing one number $x$ ($2 \\leq x \\leq 999$).\
  \ When you measure an object of length $y$, the ruler reports the following values:\n\
  \n- If $y < x$, the ruler (correctly) measures the object as having length $y$.\n\
  - If $y \\geq x$, the ruler incorrectly measures the object as having length $y+1$.\n\
  \n![](https://espresso.codeforces.com/a98908c8e65eba44622cf7a3ee2ee84099990643.png)\n\
  \nThe ruler above is missing the number $4$, so it correctly measures the first\
  \ segment as length $3$ but incorrectly measures the second segment as length $6$\
  \ even though it is actually $5$.\n\nYou need to find the value of $x$. To do that,\
  \ you can make queries of the following form:\n\n- $\\texttt{?}~a~b$ -- in response,\
  \ we will measure the side lengths of an $a \\times b$ rectangle with our ruler\
  \ and multiply the results, reporting the measured area of the rectangle back to\
  \ you. For example, if $x=4$ and you query a $3 \\times 5$ rectangle, we will measure\
  \ its side lengths as $3 \\times 6$ and report $18$ back to you.\n\nFind the value\
  \ of $x$. You can ask at most $\\mathbf{10}$ queries.\n\n### Input\n\nEach test\
  \ contains multiple test cases. The first line of input contains a single integer\
  \ $t$ ($1 \\leq t \\leq 1000$) -- the number of test cases.\n\n### Interaction\n\
  \nThere is no initial input for each test case. You should begin the interaction\
  \ by asking a query.\n\nTo make a query, output a single line of the form $\\texttt{?}~a~b$\
  \ ($1 \\leq a, b \\leq 1000$). In response, you will be told the measured area of\
  \ the rectangle, according to our secret ruler.\n\nWhen you are ready to print the\
  \ answer, output a single line of the form $\\texttt{!}~x$ ($2 \\leq x \\leq 999$).\
  \ After that, proceed to process the next test case or terminate the program if\
  \ it was the last test case. Printing the answer does not count as a query.\n\n\
  The interactor is not adaptive, meaning that the answer is known before the participant\
  \ asks the queries and doesn't depend on the queries asked by the participant.\n\
  \nIf your program makes more than $10$ queries for one set of input data, makes\
  \ an invalid query, or prints the wrong value of $x$, then the response to the query\
  \ will be $-1$. After receiving such a response, your program should immediately\
  \ terminate to receive the verdict Wrong Answer. Otherwise, you can get an arbitrary\
  \ verdict because your solution will continue to read from a closed stream.\n\n\
  After printing a query do not forget to output the end of line and flush the output.\
  \ Otherwise, you may get Idleness limit exceeded verdict. To do this, use:\n\n-\
  \ fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- flush(output)\
  \ in Pascal;\n- stdout.flush() in Python;\n- see the documentation for other languages.\n\
  \nHacks\n\nTo make a hack, use the following format.\n\nThe first line should contain\
  \ a single integer $t$ ($1 \\leq t \\leq 1000$) -- the number of test cases.\n\n\
  The only line of each test case should contain a single integer $x$ ($2 \\leq x\
  \ \\leq 999$) -- the missing number on the ruler.\n\n### Example\n\n#### Input #1\n\
  \n```\n2\n\n18\n\n25\n\n9999```\n\n#### Output #1\n\n```\n? 3 5\n\n? 4 4\n\n! 4\n\
  ? 99 100\n\n! 100```\n\n### Note\n\nIn the first test, the interaction proceeds\
  \ as follows.\n\nSolutionJuryExplanation$\\texttt{2}$There are 2 test cases.$\\\
  texttt{? 3 5}\n\n$$\\texttt{18}$Secretly, the jury picked $x=4$. The solution requests\
  \ the $3 \\times 5$ rectangle, and the jury responds with $3 \\times 6 = 18$, as\
  \ described in the statement.$\\texttt{? 4 4}$$\n\ntexttt{25}$The solution requests\
  \ the $4 \\times 4$ rectangle, which the jury measures as $5 \\times 5$ and responds\
  \ with $25$.$\\texttt{! 4}$The solution has somehow determined that $x=4$, and outputs\
  \ it. Since the output is correct, the jury continues to the next test case.$\\\
  texttt{? 99 100}$$\\texttt{1}$Secretly, the jury picked $x=100$. The solution requests\
  \ the $99 \\times 100$ rectangle, which the jury measures as $99 \\times 101$ and\
  \ responds with $9999$.$\\texttt{! 100}$The solution has somehow determined that\
  \ $x=100$, and outputs it. Since the output is correct and there are no more test\
  \ cases, the jury and the solution exit.\n\nNote that the line breaks in the example\
  \ input and output are for the sake of clarity, and do not occur in the real interaction."
max_agent_timeout_sec: 300
max_test_timeout_sec: 180
tags: []
